========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
def findArea ( r ) :					      static double findArea ( int r ) {			    public static double findArea ( double r ) {		  script_not_found : None
    PI = 3.142						      	return PI * Math . pow ( r , 2 ) ;			      final double PI = 3.142 ;					  
    return PI * ( r * r )				      }								      return PI * ( r * r ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
def perimeter ( diameter , height ) :			      static int perimeter ( int diameter , int height ) {	    public static double perimeter ( double diameter , double hei success : None
    return 2 * ( diameter + height )			      	return 2 * ( diameter + height ) ;			      return 2 * ( diameter + height ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1
--							      --							    --								  --
def kthgroupsum ( k ) :					      public static int kthgroupsum ( int k ) {			    public static double kthGroupSum ( double k ) {		  success : None
    return k * k * k					      	return k * k * k ;					      return k * k * k ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION						      TAIL_RECURSION						    TAIL_RECURSION						  TAIL_RECURSION
--							      --							    --								  --
def fact ( n ) :					      static int fact ( int n ) {				    public static long fact ( long n ) {			  failure : #Results:4, 10
    if ( n == 0 ) :					      	if ( n == 0 ) return 1 ;				      if ( ( n == 0 ) || ( n == 1 ) ) return 1 ;		  
	return 1					      	return n * fact ( n - 1 ) ;				      return n * fact ( n - 1 ) ;				  
    return n * fact ( n - 1 )				      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_TO_MULTIPLY_WITH_7			      EFFICIENT_WAY_TO_MULTIPLY_WITH_7				    EFFICIENT_WAY_TO_MULTIPLY_WITH_7				  EFFICIENT_WAY_TO_MULTIPLY_WITH_7
--							      --							    --								  --
def multiplyBySeven ( n ) :				      static int multiplyBySeven ( int n ) {			    public static int multiplyBySeven ( int n ) {		  success : None
    return ( ( n << 3 ) - n )				      	return ( ( n << 3 ) - n ) ;				      return ( ( n << 3 ) - n ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES_1				      NUMBER_TRIANGLES_N_MOVES_1				    NUMBER_TRIANGLES_N_MOVES_1					  NUMBER_TRIANGLES_N_MOVES_1
--							      --							    --								  --
def numberOfTriangles ( n ) :				      public static double numberOfTriangles ( int n ) {	    public static int numberOfTriangles ( int n ) {		  script_not_found : None
    ans = 2 * ( pow ( 3 , n ) ) - 1			      	double ans = 2 * ( pow ( 3 , n ) ) - 1 ;		      int ans = 2 * ( Math . pow ( 3 , n ) ) - 1 ;		  
    return ans						      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_NUMBER_USING_LOG				      SQUARE_ROOT_NUMBER_USING_LOG				    SQUARE_ROOT_NUMBER_USING_LOG				  SQUARE_ROOT_NUMBER_USING_LOG
--							      --							    --								  --
def squareRoot ( n ) :					      static double squareRoot ( double n ) {			    public static double squareRoot ( double n ) {		  script_not_found : None
    return pow ( 2 , 0.5 * math.log2 ( n ) )		      	return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . l   return Math . pow ( 2 , 0.5 * Math . log2 ( n ) ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			      MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			    MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			  MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA
--							      --							    --								  --
def minHeight ( area , base ) :				      static double minHeight ( double base , double area ) {	    public static int minHeight ( int area , int base ) {	  script_not_found : None
    return math.ceil ( ( 2 * area ) / base )		      	double d = ( 2 * area ) / base ;			      return Math . ceil ( ( 2 * area ) / base ) ;		  
							      	return Math . ceil ( d ) ;				    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
def circumferenceparallelogram ( a , b ) :		      static float circumferenceparallelogram ( float a , float b ) public static double circumferenceParallelogram ( double a ,  success : None
    return ( ( 2 * a ) + ( 2 * b ) )			      	return ( ( 2 * a ) + ( 2 * b ) ) ;			      return ( ( 2 * a ) + ( 2 * b ) ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
def factorial ( n ) :					      int factorial ( int n ) {					    public static int factorial ( int n ) {			  error : C_PROGRAM_FACTORIAL_NUMBER_2.java:19: erro
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ;   return 1 == ( n == 1 || n == 0 ) ? n : n * factorial ( n -  r: incomparable types: int and boolean   return 1
							      }								    }								  == ( n == 1 || n == 0 ) ? n : n * f_filled ( n - 1
							      								    								   ) ;		  ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_CIRCUMSCRIBED_CIRCLE_SQUARE			      AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				    AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				  AREA_CIRCUMSCRIBED_CIRCLE_SQUARE
--							      --							    --								  --
def areacircumscribed ( a ) :				      static float areacircumscribed ( float a ) {		    public static double areacircumscribed ( double a ) {	  error : AREA_CIRCUMSCRIBED_CIRCLE_SQUARE.java:20:
    return ( a * a * ( PI / 2 ) )			      	float PI = 3.14159265f ;				      return ( a * a * ( PI / 2 ) ) ;				  error: cannot find symbol   return ( a * a * ( PI
							      	return ( a * a * ( PI / 2 ) ) ;				    }								  / 2 ) ) ;			 ^   symbol:   varia
							      }								    								  ble PI   location: class AREA_CIRCUMSCRIBED_CIRCLE
							      								    								  _SQUARE 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
def sortString ( str ) :				      static void sortString ( String str ) {			    public static void sortString ( String str ) {		  script_not_found : None
    str = ''.join ( sorted ( str ) )			      	char [ ] arr = str . toCharArray ( ) ;			      str = "" + str ;						  
    print ( str )					      	Arrays . sort ( arr ) ;					      System . out . println ( str ) ;				  
							      	System . out . print ( String . valueOf ( arr ) ) ;	    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT				      POSITION_OF_RIGHTMOST_SET_BIT				    POSITION_OF_RIGHTMOST_SET_BIT				  POSITION_OF_RIGHTMOST_SET_BIT
--							      --							    --								  --
def getFirstSetBitPos ( n ) :				      public static int getFirstSetBitPos ( int n ) {		    public static int getFirstSetBitPos ( int n ) {		  error : POSITION_OF_RIGHTMOST_SET_BIT.java:19: err
    return math.log2 ( n & - n ) + 1			      	return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log1   return MathUtils . log2 ( n & - n ) + 1 ;			  or: cannot find symbol   return MathUtils . log2 (
							      }								    }								   n & - n ) + 1 ;	    ^	symbol:	  variable M
							      								    								  athUtils   location: class POSITION_OF_RIGHTMOST_S
							      								    								  ET_BIT 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SEQUENCE_2_22_222					      SUM_SEQUENCE_2_22_222					    SUM_SEQUENCE_2_22_222					  SUM_SEQUENCE_2_22_222
--							      --							    --								  --
def sumOfSeries ( n ) :					      static double sumOfSeries ( int n ) {			    public static double sumOfSeries ( int n ) {		  success : None
    return 0.0246 * ( math.pow ( 10 , n ) - 1 - ( 9 * n ) )   	return 0.0246 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ;   return 0.0246 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ; 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_HEXAGON					      AREA_OF_A_HEXAGON						    AREA_OF_A_HEXAGON						  AREA_OF_A_HEXAGON
--							      --							    --								  --
def hexagonArea ( s ) :					      public static double hexagonArea ( double s ) {		    public static double hexagonArea ( double s ) {		  success : identical to gold
    return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 )	      	return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	      return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
def Circumference ( l , w ) :				      static int Circumference ( int l , int w ) {		    public static Circumference of ( int l , int w ) {		  error : PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENC
    return ( 2 * ( l + w ) )				      	return ( 2 * ( l + w ) ) ;				      return new Circumference ( 2 * ( l + w ) ) ;		  E_SQUARE_RECTANGLE_1.java:18: error: cannot find s
							      }								    }								  ymbol public static Circumference f_filled ( int l
							      								    								   , int w ) {		     ^	 symbol:   class Cir
							      								    								  cumference   location: class PYTHON_PROGRAM_FIND_P
							      								    								  ERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_1 PYTHON_P
							      								    								  ROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANG
							      								    								  LE_1.java:19: error: cannot find symbol   return n
							      								    								  ew Circumference ( 2 * ( l + w ) ) ;
							      								    								  ^   symbol:	class Circumference   location: clas
							      								    								  s PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUA
							      								    								  RE_RECTANGLE_1 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
def factorial ( n ) :					      int factorial ( int n ) {					    public static int factorial ( int n ) {			  error : PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2.java:1
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ;   return 1 == ( n == 1 || n == 0 ) ? n : n * factorial ( n -  9: error: incomparable types: int and boolean	  re
							      }								    }								  turn 1 == ( n == 1 || n == 0 ) ? n : n * f_filled
							      								    								  ( n - 1 ) ;		 ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM	      PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		    PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		  PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM
--							      --							    --								  --
def findVolume ( l , b , h ) :				      static float findVolume ( float l , float b , float h ) {	    static float findVolume ( float l , float b , float h ) {	  success : None
    return ( ( l * b * h ) / 2 )			      	float volume = ( l * b * h ) / 2 ;			      return ( ( l * b * h ) / 2 ) ;				  
							      	return volume ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL					      DOUBLE_FACTORIAL						    DOUBLE_FACTORIAL						  DOUBLE_FACTORIAL
--							      --							    --								  --
def doublefactorial ( n ) :				      static long doublefactorial ( long n ) {			    public static int doublefactorial ( int n ) {		  error : DOUBLE_FACTORIAL.java:40: error: incompati
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return 1 ;			      if ( ( n == 0 || n == 1 ) && ( n > 2 ) ) return 1 ;	  ble types: Long cannot be converted to int
	return 1					      	return n * doublefactorial ( n - 2 ) ;			      return n * doublefactorial ( n - 2 ) ;			   if(f_filled(param0.get(i)) == f_gold(param0.get(i
    return n * doublefactorial ( n - 2 )		      }								    }								  )))				    ^ Note: Some mes
							      								    								  sages have been simplified; recompile with -Xdiags
							      								    								  :verbose to get full output 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_FACTORIALS_TWO_NUMBERS				      GCD_FACTORIALS_TWO_NUMBERS				    GCD_FACTORIALS_TWO_NUMBERS					  GCD_FACTORIALS_TWO_NUMBERS
--							      --							    --								  --
def gcdOfFactorial ( m , n ) :				      static int gcdOfFactorial ( int m , int n ) {		    public static double gcdOfFactorial ( int m , int n ) {	  script_not_found : None
    return math.factorial ( min ( m , n ) )		      	int min = m < n ? m : n ;				      return Math . factorial ( Math . min ( m , n ) ) ;	  
							      	return factorial ( min ) ;				    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
def checkOrigin ( x1 , y1 , x2 , y2 ) :			      static boolean checkOrigin ( int x1 , int y1 , int x2 , int y public static boolean checkOrigin ( float x1 , float y1 , flo success : None
    return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )	      	return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ;	      return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  error : C_PROGRAM_FACTORIAL_NUMBER_1.java:23: erro
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	int res = 1 , i ;					      return 1 == ( n == 1 || n == 0 ) ? n : n * factorial ( n -  r: incomparable types: int and boolean   return 1
							      	for ( i = 2 ;						    }								  == ( n == 1 || n == 0 ) ? n : n * f_filled ( n - 1
							      	i <= n ;						    								   ) ;		  ^ 1 error
							      	i ++ ) res *= i ;					    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
def timeToMeet ( s , v ) :				      static void timeToMeet ( double s , double v ) {		    public static void timeToMeet ( int s , int v ) {		  script_not_found : None
    V = 3 * v / 2					      	double V = 3 * v / 2 ;					      int V = 3 * v / 2 ;					  
    time = s / V					      	double time = s / V ;					      int time = s / V ;					  
    print ( time )					      	System . out . println ( ( float ) time ) ;		      System . out . println ( time ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		      ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		    ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER			  ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  error : ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBE
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ;   return 1 == ( n == 1 || n == 0 ) ? n : n * factorial ( n -  R.java:19: error: incomparable types: int and bool
							      }								    }								  ean	return 1 == ( n == 1 || n == 0 ) ? n : n * f
							      								    								  _filled ( n - 1 ) ;		 ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1
--							      --							    --								  --
def countIntegralSolutions ( n ) :			      static int countIntegralSolutions ( int n ) {		    public static int countIntegralSolutions ( int n ) {	  success : None
    return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )	      	return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;			      return ( int ) ( ( ( n + 1 ) * ( n + 2 ) ) / 2 ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER				      COUNT_SET_BITS_IN_AN_INTEGER				    COUNT_SET_BITS_IN_AN_INTEGER				  COUNT_SET_BITS_IN_AN_INTEGER
--							      --							    --								  --
def countSetBits ( n ) :				      static int countSetBits ( int n ) {			    static int countSetBits ( long n ) {			  failure : #Results:0, 10
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    while ( n ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) && ( n & 1 ) != 0 ) {			  
	count += n & 1					      	  count += n & 1 ;					    	count += n & 1 ;					  
	n >>= 1						      	  n >>= 1 ;						    	n >>>= 1 ;						  
    return count					      	}							      }								  
							      	return count ;						      return count ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2
--							      --							    --								  --
def getRemainder ( num , divisor ) :			      static int getRemainder ( int num , int divisor ) {	    public static int getRemainder ( int num , int divisor ) {	  failure : #Results:4, 10
    while ( num >= divisor ) :				      	while ( num >= divisor ) num -= divisor ;		      while ( ( num >= divisor ) && ( num < 0 ) ) {		  
	num -= divisor					      	return num ;						    	num -= divisor ;					  
    return num						      }								      }								  
							      								      return num ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
def find ( p ) :					      static double find ( double p ) {				    public static double find ( double p ) {			  script_not_found : None
    return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 	return Math . ceil ( Math . sqrt ( 2 * 365 * Math . log ( 1   return Math . ceil ( Math . sqrt ( 2 * 365 * Math . log ( 1 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE
--							      --							    --								  --
def areaOfInscribedCircle ( a ) :			      static double areaOfInscribedCircle ( float a ) {		    public static double areaOfInscribedCircle ( double a ) {	  script_not_found : None
    return ( PI / 4 ) * a * a				      	return ( PI / 4 ) * a * a ;				      return ( PI / 4 ) * a * a ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
def bin ( n ) :						      static void bin ( int n ) {				    public static void bin ( int n ) {				  script_not_found : None
    if n > 1 :						      	if ( n > 1 ) bin ( n / 2 ) ;				      if ( n > 1 ) bin ( n / 2 ) ;				  
	bin ( n // 2 )					      	System . out . print ( n % 2 ) ;			      System . out . print ( n % 2 + " " ) ;			  
    print ( n % 2 , end = "" )				      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
def sumOfSeries ( n ) :					      static int sumOfSeries ( int n ) {			    public static int sumOfSeries ( int n ) {			  success : None
    return ( int ) ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * 	return ( int ) ( 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0   return ( int ) ( 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12_1				      SUM_SERIES_12_32_52_2N_12_1				    SUM_SERIES_12_32_52_2N_12_1					  SUM_SERIES_12_32_52_2N_12_1
--							      --							    --								  --
def sumOfSeries ( n ) :					      static int sumOfSeries ( int n ) {			    static int sumOfSeries ( int n ) {				  success : None
    return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )  	return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;	      return ( int ) ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
def countNumberOfTriangles ( n ) :			      static int countNumberOfTriangles ( int n ) {		    public static int countNumberOfTriangles ( int n ) {	  success : None
    return ( n * ( n - 1 ) * ( n - 2 ) // 6 )		      	return n * ( n - 1 ) * ( n - 2 ) / 6 ;			      return ( n * ( n - 1 ) * ( n - 2 ) / 6 ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_AREA_TETRAHEDRON				      CALCULATE_AREA_TETRAHEDRON				    CALCULATE_AREA_TETRAHEDRON					  CALCULATE_AREA_TETRAHEDRON
--							      --							    --								  --
def vol_tetra ( side ) :				      static double vol_tetra ( int side ) {			    public static int volTetra ( int side ) {			  error : CALCULATE_AREA_TETRAHEDRON.java:21: error:
    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )	      	double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sq   double volume = ( side * side / ( 6 * Math . sqrt ( 2 ) ) )  incompatible types: possible lossy conversion fro
    return round ( volume , 2 )				      	return volume ;						      return Math . round ( volume ) ;				  m long to int	  return Math . round ( volume ) ;
							      }								    }								  		       ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
def findSumSubsets ( n ) :				      static long findSumSubsets ( int n ) {			    static int findSumSubsets ( int n ) {			  success : None
    return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	      	return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) ) ;	      return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
def myCopy ( s1 , s2 ) :				      static void myCopy ( char s1 [ ] , char s2 [ ] ) {	    public static void myCopy ( String s1 , String s2 ) {	  script_not_found : None
    for i in range ( len ( s1 ) ) :			      	int i = 0 ;						      for ( int i = 0 ;						  
	s2 [ i ] = s1 [ i ]				      	for ( i = 0 ;						      i < s1 . length ( ) ;					  
							      	i < s1 . length ;					      i ++ ) {							  
							      	i ++ ) s2 [ i ] = s1 [ i ] ;				    	s2 . charAt ( i ) = s1 . charAt ( i ) ;			  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_MID_POINT_LINE				      PROGRAM_FIND_MID_POINT_LINE				    PROGRAM_FIND_MID_POINT_LINE					  PROGRAM_FIND_MID_POINT_LINE
--							      --							    --								  --
def midpoint ( x1 , x2 , y1 , y2 ) :			      static void midpoint ( int x1 , int x2 , int y1 , int y2 ) {  public static void midpoint ( int x1 , int x2 , int y1 , int  script_not_found : None
    print ( ( x1 + x2 ) // 2 , " , " , ( y1 + y2 ) // 2 )     	System . out . print ( ( x1 + x2 ) / 2 + " , " + ( y1 + y2    System . out . print ( ( x1 + x2 ) / 2 + " , " + ( y1 + y2  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1
--							      --							    --								  --
def compute_average ( a , b ) :				      static int compute_average ( int a , int b ) {		    public static int computeAverage ( int a , int b ) {	  success : None
    return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 	return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;    return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POWER_POWER_MOD_PRIME				      FIND_POWER_POWER_MOD_PRIME				    FIND_POWER_POWER_MOD_PRIME					  FIND_POWER_POWER_MOD_PRIME
--							      --							    --								  --
def calculate ( A , B , C , M ) :			      static int Calculate ( int A , int B , int C , int M ) {	    public static int calculate ( int A , int B , int C , int M ) script_not_found : None
    res = pow ( B , C , M - 1 )				      	int res , ans ;						      int res = pow ( B , C , M - 1 ) ;				  
    ans = pow ( A , res , M )				      	res = power ( B , C , M - 1 ) ;				      int ans = pow ( A , res , M ) ;				  
    return ans						      	ans = power ( A , res , M ) ;				      return ans ;						  
							      	return ans ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1
--							      --							    --								  --
def MaximumHeight ( a , n ) :				      static int MaximumHeight ( int a [ ] , int n ) {		    public static int MaximumHeight ( int a , int n ) {		  error : MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_O
    return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2 	return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8   return ( - 1 + ( int ) Math . sqrt ( 1 + ( 8 * n ) ) ) / 2  F_ARRAY_VALUES_1.java:49: error: incompatible type
							      }								    }								  s: int[] cannot be converted to int	      if(f_f
							      								    								  illed(param0.get(i),param1.get(i)) == f_gold(param
							      								    								  0.get(i),param1.get(i)))
							      								    								       ^ Note: Some messages have been simplified; r
							      								    								  ecompile with -Xdiags:verbose to get full output 1
							      								    								   error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10	      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10
--							      --							    --								  --
def round ( n ) :					      static int round ( int n ) {				    public static int round ( int n ) {				  error : ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE
    a = ( n // 10 ) * 10				      	int a = ( n / 10 ) * 10 ;				      int a = ( n / 10 ) * 10 ;					  _OF_10.java:23: error: incomparable types: int and
    b = a + 10						      	int b = a + 10 ;					      int b = a + 10 ;						   boolean   return ( b == n - a > b - n ) ? a : b ;
    return ( b if n - a > b - n else a )		      	return ( n - a > b - n ) ? b : a ;			      return ( b == n - a > b - n ) ? a : b ;			  		^ 1 error
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER	  WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER
--							      --							    --								  --
def getParity ( n ) :					      static boolean getParity ( int n ) {			    public static int getParity ( int n ) {			  error : WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN
    parity = 0						      	boolean parity = false ;				      int parity = 0 ;						  _UNSIGNED_INTEGER.java:48: error: incomparable typ
    while n :						      	while ( n != 0 ) {					      while ( n > 0 ) {						  es: int and boolean	      if(f_filled(param0.get
	parity = ~ parity				      	  parity = ! parity ;					    	parity = ~ parity ;					  (i)) == f_gold(param0.get(i)))
	n = n & ( n - 1 )				      	  n = n & ( n - 1 ) ;					    	n = n & ( n - 1 ) ;					  		  ^ 1 error
    return parity					      	}							      }								  
							      	return parity ;						      return parity ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
def findIndex ( n ) :					      static int findIndex ( int n ) {				    public static int findIndex ( double n ) {			  error : FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT
    fibo = 2.078087 * math.log ( n ) + 1.672276		      	float fibo = 2.078087F * ( float ) Math . log ( n ) + 1.672   double fibo = 2.078087 * Math . log ( n ) + 1.672276 ;	  _TIME_1.java:21: error: incompatible types: possib
    return round ( fibo )				      	return Math . round ( fibo ) ;				      return Math . round ( fibo ) ;				  le lossy conversion from long to int	 return Math
							      }								    }								   . round ( fibo ) ;			    ^ 1 erro
							      								    								  r
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def sumDigits ( no ) :					      static int sumDigits ( int no ) {				    static int sumDigits ( int no ) {				  success : None
    return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 	return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 ) ;	      return no == 0 ? 0 : ( int ) ( no % 10 ) + sumDigits ( ( in 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_1				      POSITION_OF_RIGHTMOST_SET_BIT_1				    POSITION_OF_RIGHTMOST_SET_BIT_1				  POSITION_OF_RIGHTMOST_SET_BIT_1
--							      --							    --								  --
def PositionRightmostSetbit ( n ) :			      static int PositionRightmostSetbit ( int n ) {		    public static int PositionRightmostSetbit ( int n ) {	  error : POSITION_OF_RIGHTMOST_SET_BIT_1.java:27: e
    position = 1					      	int position = 1 ;					      int position = 1 ;					  rror: bad operand type int for unary operator '!'
    m = 1						      	int m = 1 ;						      int m = 1 ;						    while ( ( ! ( n & m ) ) && ( m & 1 ) != 0 ) {
    while ( not ( n & m ) ) :				      	while ( ( n & m ) == 0 ) {				      while ( ( ! ( n & m ) ) && ( m & 1 ) != 0 ) {		  	    ^ 1 error
	m = m << 1					      	  m = m << 1 ;						    	m = m << 1 ;						  
	position += 1					      	  position ++ ;						    	position ++ ;						  
    return position					      	}							      }								  
							      	return position ;					      return position ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
def linearSearch ( arr , n ) :				      static int linearSearch ( int arr [ ] , int n ) {		    public static int linearSearch ( int [ ] arr , int n ) {	  success : None
    for i in range ( n ) :				      	int i ;							      for ( int i = 0 ;						  
	if arr [ i ] is i :				      	for ( i = 0 ;						      i < n ;							  
	    return i					      	i < n ;							      i ++ ) {							  
    return - 1						      	i ++ ) {						    	if ( arr [ i ] == i ) {					  
							      	  if ( arr [ i ] == i ) return i ;			    	  return i ;						  
							      	}							    	}							  
							      	return - 1 ;						      }								  
							      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
def Add ( x , y ) :					      static int Add ( int x , int y ) {			    public static int Add ( int x , int y ) {			  failure : #Results:9, 10
    while ( y != 0 ) :					      	while ( y != 0 ) {					      while ( ( y != 0 ) && ( y != 1 ) ) {			  
	carry = x & y					      	  int carry = x & y ;					    	int carry = x & y ;					  
	x = x ^ y					      	  x = x ^ y ;						    	x = x ^ y ;						  
	y = carry << 1					      	  y = carry << 1 ;					    	y = carry << 1 ;					  
    return x						      	}							      }								  
							      	return x ;						      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI
--							      --							    --								  --
def numberOfSquares ( base ) :				      public static int numberOfSquares ( int base ) {		    public static int numberOfSquares ( int base ) {		  success : identical to gold
    base = ( base - 2 )					      	base = ( base - 2 ) ;					      base = ( base - 2 ) ;					  
    base = base / 2					      	base = base / 2 ;					      base = base / 2 ;						  
    return base * ( base + 1 ) / 2			      	return base * ( base + 1 ) / 2 ;			      return base * ( base + 1 ) / 2 ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		  SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
def findElement ( arr , n , key ) :			      static int findElement ( int arr [ ] , int n , int key ) {    public static int findElement ( int [ ] arr , int n , int key error : SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_AR
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  RAY.java:79: error: class, interface, or enum expe
	if ( arr [ i ] == key ) :			      	i < n ;							      i < n ;							  cted 11 ^ 1 error
	    return i					      	i ++ ) if ( arr [ i ] == key ) return i ;		      i ++ ) {							  
    return - 1						      	return - 1 ;						    	if ( ( arr [ i ] == key ) && ( arr [ i + 1 ] == key ) ) { 
							      }								    	  return i ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y				    FIND_UNIT_DIGIT_X_RAISED_POWER_Y				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y
--							      --							    --								  --
def unitDigitXRaisedY ( x , y ) :			      static int unitDigitXRaisedY ( int x , int y ) {		    public static int unitDigitXRaisedY ( int x , int y ) {	  success : None
    res = 1						      	int res = 1 ;						      int res = 1 ;						  
    for i in range ( y ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	res = ( res * x ) % 10				      	i < y ;							      i < y ;							  
    return res						      	i ++ ) res = ( res * x ) % 10 ;				      i ++ ) {							  
							      	return res ;						    	res = ( res * x ) % 10 ;				  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum += i * ( n - i )				      	i < n ;							      i < n ;							  
    return 2 * sum					      	i ++ ) sum += i * ( n - i ) ;				      i ++ ) {							  
							      	return 2 * sum ;					    	sum += i * ( n - i ) ;					  
							      }								      }								  
							      								      return 2 * sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_ARRII					      MAXIMIZE_SUM_ARRII					    MAXIMIZE_SUM_ARRII						  MAXIMIZE_SUM_ARRII
--							      --							    --								  --
def maxSum ( arr , n ) :				      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int [ ] arr , int n ) {		  success : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum += arr [ i ] * i				      	i < n ;							      i < n ;							  
    return sum						      	i ++ ) sum += ( arr [ i ] * i ) ;			      i ++ ) {							  
							      	return sum ;						    	sum += arr [ i ] * i ;					  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	      SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE
--							      --							    --								  --
def calculateSum ( n ) :				      static long calculateSum ( int n ) {			    public static int calculateSum ( int n ) {			  success : None
    sum = 0						      	long sum = 0 ;						      int sum = 0 ;						  
    for row in range ( n ) :				      	for ( int row = 0 ;					      for ( int row = 0 ;					  
	sum = sum + ( 1 << row )			      	row < n ;						      row < n ;							  
    return sum						      	row ++ ) {						      row ++ ) {						  
							      	  sum = sum + ( 1 << row ) ;				    	sum = sum + ( 1 << row ) ;				  
							      	}							      }								  
							      	return sum ;						      return sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE_1			      SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				    SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				  SQUARE_ROOT_OF_A_PERFECT_SQUARE_1
--							      --							    --								  --
def squareRoot ( n ) :					      static long squareRoot ( int n ) {			    public static int squareRoot ( int n ) {			  failure : #Results:0, 10
    x = n						      	int x = n ;						      int x = n ;						  
    y = 1						      	int y = 1 ;						      int y = 1 ;						  
    while ( x > y ) :					      	while ( x > y ) {					      while ( ( x > y ) && ( x < y ) ) {			  
	x = ( x + y ) / 2				      	  x = ( x + y ) / 2 ;					    	x = ( x + y ) / 2 ;					  
	y = n / x					      	  y = n / x ;						    	y = n / x ;						  
    return x						      	}							      }								  
							      	return ( long ) x ;					      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_ALL_ODD_AND_EVEN_BITS				      SWAP_ALL_ODD_AND_EVEN_BITS				    SWAP_ALL_ODD_AND_EVEN_BITS					  SWAP_ALL_ODD_AND_EVEN_BITS
--							      --							    --								  --
def swapBits ( x ) :					      static int swapBits ( int x ) {				    public static int swapBits ( int x ) {			  success : None
    even_bits = x & 0xAAAAAAAA				      	int even_bits = x & 0xAAAAAAAA ;			      int evenBits = x & 0xAAAAAAAA ;				  
    odd_bits = x & 0x55555555				      	int odd_bits = x & 0x55555555 ;				      int oddBits = x & 0x55555555 ;				  
    even_bits >>= 1					      	even_bits >>= 1 ;					      evenBits >>>= 1 ;						  
    odd_bits <<= 1					      	odd_bits <<= 1 ;					      oddBits <<= 1 ;						  
    return ( even_bits | odd_bits )			      	return ( even_bits | odd_bits ) ;			      return ( evenBits | oddBits ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2					      SORT_ARRAY_WAVE_FORM_2					    SORT_ARRAY_WAVE_FORM_2					  SORT_ARRAY_WAVE_FORM_2
--							      --							    --								  --
def sortInWave ( arr , n ) :				      void sortInWave ( int arr [ ] , int n ) {			    public static void sortInWave ( int [ ] arr , int n ) {	  script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( 0 , n - 1 , 2 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] 	i < n - 1 ;						      i < n - 1 ;						  
							      	i += 2 ) swap ( arr , i , i + 1 ) ;			      i += 2 ) {						  
							      }								    	arr [ i ] = arr [ i + 1 ] ;				  
							      								    	arr [ i + 1 ] = arr [ i ] ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION_FIBONACCI				      TAIL_RECURSION_FIBONACCI					    TAIL_RECURSION_FIBONACCI					  TAIL_RECURSION_FIBONACCI
--							      --							    --								  --
def fib ( n , a = 0 , b = 1 ) :				      static int fib ( int n , int a , int b ) {		    public static int fib ( int n , int a , int b ) {		  error : TAIL_RECURSION_FIBONACCI.java:24: error: u
    if n == 0 :						      	if ( n == 0 ) return a ;				      if ( n == 0 ) return a ;					  nreachable statement	 ;   ^ 1 error
	return a					      	if ( n == 1 ) return b ;				      if ( n == 1 ) return b ;					  
    if n == 1 :						      	return fib ( n - 1 , b , a + b ) ;			      return fib ( n - 1 , b , a + b ) ;			  
	return b					      }								      ;								  
    return fib ( n - 1 , b , a + b ) ;			      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM
--							      --							    --								  --
def summingSeries ( n ) :				      static int summingSeries ( long n ) {			    public static long summingSeries ( int n ) {		  script_not_found : None
    S = 0						      	int S = 0 ;						      long S = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( i = 1 ;						      for ( int i = 1 ;						  
	S += i * i - ( i - 1 ) * ( i - 1 )		      	i <= n ;						      i <= n ;							  
    return S						      	i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;		      i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;		  
							      	return S ;						      return S ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
def minmaxProduct ( arr1 , arr2 , n1 , n2 ) :		      public static int minMaxProduct ( int arr1 [ ] , int arr2 [ ] public static double minmaxProduct ( double [ ] arr1 , double error : PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
    arr1.sort ( )					      	Arrays . sort ( arr1 ) ;				      Arrays . sort ( arr1 ) ;					  .java:75: error: incompatible types: int[] cannot
    arr2.sort ( )					      	Arrays . sort ( arr2 ) ;				      Arrays . sort ( arr2 ) ;					  be converted to double[]	   if(f_filled(param
    return arr1 [ n1 - 1 ] * arr2 [ 0 ]			      	return arr1 [ n1 - 1 ] * arr2 [ 0 ] ;			      return arr1 [ n1 - 1 ] * arr2 [ 0 ] ;			  0.get(i),param1.get(i),param2.get(i),param3.get(i)
							      }								    }								  ) == f_gold(param0.get(i),param1.get(i),param2.get
							      								    								  (i),param3.get(i)))
							      								    								  ^ Note: Some messages have been simplified; recomp
							      								    								  ile with -Xdiags:verbose to get full output 1 erro
							      								    								  r
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD		  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD
--							      --							    --								  --
def isPrime ( n ) :					      static boolean isPrime ( int n ) {			    public static boolean isPrime ( int n ) {			  success : None
    if n <= 1 :						      	if ( n <= 1 ) return false ;				      if ( n <= 1 ) return false ;				  
	return False					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
    for i in range ( 2 , n ) :				      	i < n ;							      i < n ;							  
	if n % i == 0 :					      	i ++ ) if ( n % i == 0 ) return false ;			      i ++ ) if ( n % i == 0 ) return false ;			  
	    return False				      	return true ;						      return true ;						  
    return True						      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
def calc_Expectation ( a , n ) :			      static float calc_Expectation ( float a [ ] , float n ) {	    public static float calcExpectation ( float [ ] a , int n ) { script_not_found : None
    prb = 1 / n						      	float prb = ( 1 / n ) ;					      float prb = 1 / n ;					  
    sum = 0						      	float sum = 0 ;						      float sum = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum += ( a [ i ] * prb )			      	i < n ;							      i <= n ;							  
    return float ( sum )				      	i ++ ) sum += a [ i ] * prb ;				      i ++ ) {							  
							      	return sum ;						    	sum += ( a [ i ] * prb ) ;				  
							      }								      }								  
							      								      return ( float ) sum ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1
--							      --							    --								  --
def findElements ( arr , n ) :				      static void findElements ( int arr [ ] , int n ) {	    public static void findElements ( int [ ] arr , int n ) {	  script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( 0 , n - 2 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( arr [ i ] , end = " " )			      	i < n - 2 ;						      i <= n - 2 ;						  
							      	i ++ ) System . out . print ( arr [ i ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
def countDyckPaths ( n ) :				      public static int countDyckPaths ( int n ) {		    public static int countDyckPaths ( int n ) {		  failure : #Results:0, 10
    res = 1						      	int res = 1 ;						      int res = 1 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	res *= ( 2 * n - i )				      	i < n ;							      i <= n ;							  
	res /= ( i + 1 )				      	++ i ) {						      i ++ ) {							  
    return res / ( n + 1 )				      	  res *= ( 2 * n - i ) ;				    	res *= ( 2 * n - i ) ;					  
							      	  res /= ( i + 1 ) ;					    	res /= ( i + 1 ) ;					  
							      	}							      }								  
							      	return res / ( n + 1 ) ;				      return res / ( n + 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_N_UNDER_MODULO_P				      COMPUTE_N_UNDER_MODULO_P					    COMPUTE_N_UNDER_MODULO_P					  COMPUTE_N_UNDER_MODULO_P
--							      --							    --								  --
def modFact ( n , p ) :					      static int modFact ( int n , int p ) {			    static int modFact ( int n , int p ) {			  success : identical to gold
    if n >= p :						      	if ( n >= p ) return 0 ;				      if ( n >= p ) return 0 ;					  
	return 0					      	int result = 1 ;					      int result = 1 ;						  
    result = 1						      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    for i in range ( 1 , n + 1 ) :			      	i <= n ;						      i <= n ;							  
	result = ( result * i ) % p			      	i ++ ) result = ( result * i ) % p ;			      i ++ ) result = ( result * i ) % p ;			  
    return result					      	return result ;						      return result ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def myCopy ( s1 , s2 , index ) :			      static void myCopy ( char s1 [ ] , char s2 [ ] , int index )  public static void myCopy ( String s1 , String s2 , int index error : FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
    s2 [ index ] = s1 [ index ]				      	s2 [ index ] = s1 [ index ] ;				      s2 . charAt ( index ) = s1 . charAt ( index ) ;		  .java:23: error: unexpected type   s2 . charAt ( i
    if ( index == len ( s1 ) - 1 ) :			      	if ( index == s1 . length - 1 ) {			      if ( ( index == s1 . length ( ) - 1 ) && ( s2 . charAt ( in ndex ) = s1 . charAt ( index ) ;		 ^
	return						      	  return ;						      myCopy ( s1 , s2 , index + 1 ) ;				   required: variable	found:	  value FUNCTION_COP
    myCopy ( s1 , s2 , index + 1 )			      	}							    }								  Y_STRING_ITERATIVE_RECURSIVE_1.java:99: error: inc
							      	myCopy ( s1 , s2 , index + 1 ) ;			    								  ompatible types: char[] cannot be converted to Str
							      }								    								  ing	      f_filled(filled_function_param0.get(i)
							      								    								  ,filled_function_param1.get(i),filled_function_par
							      								    								  am2.get(i));
							      								    								  	^ Note: Some messages have been simplified;
							      								    								  recompile with -Xdiags:verbose to get full output
							      								    								  2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def getSum ( n ) :					      static int getSum ( int n ) {				    public static int getSum ( int n ) {			  failure : #Results:0, 10
    sum = 0						      	int sum ;						      int sum = 0 ;						  
    while ( n > 0 ) :					      	for ( sum = 0 ;						      while ( ( n > 0 ) && ( n % 10 == 0 ) ) {			  
	sum += int ( n % 10 )				      	n > 0 ;							    	sum += ( int ) ( n % 10 ) ;				  
	n = int ( n / 10 )				      	sum += n % 10 , n /= 10 ) ;				    	n = ( int ) ( n / 10 ) ;				  
    return sum						      	return sum ;						      }								  
							      }								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN
--							      --							    --								  --
def findSum ( N ) :					      static int findSum ( int n ) {				    public static int findSum ( int N ) {			  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for i in range ( 1 , N + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	for j in range ( 1 , N + 1 ) :			      	i <= n ;						      i <= N ;							  
	    ans += i // j				      	i ++ ) for ( int j = 1 ;				      i ++ ) {							  
    return ans						      	j <= n ;						    	for ( int j = 1 ;					  
							      	j ++ ) ans += ( i / j ) ;				    	j <= N ;						  
							      	return ans ;						    	j ++ ) {						  
							      }								    	  ans += i / j ;					  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			    FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1
--							      --							    --								  --
def unitnumber ( x , y ) :				      static int unitnumber ( int x , int y ) {			    public static int unitNumber ( int x , int y ) {		  success : None
    x = x % 10						      	x = x % 10 ;						      x = x % 10 ;						  
    if y != 0 :						      	if ( y != 0 ) y = y % 4 + 4 ;				      if ( y != 0 ) y = y % 4 + 4 ;				  
	y = y % 4 + 4					      	return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;	      return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;	  
    return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )	      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
def pythagorean_quadruple ( a , b , c , d ) :		      static Boolean pythagorean_quadruple ( int a , int b , int c  public static boolean pythagoreanQuadruple ( double a , doubl error : PYTHAGOREAN_QUADRUPLE.java:79: error: bool
    sum = a * a + b * b + c * c				      	int sum = a * a + b * b + c * c ;			      double sum = a * a + b * b + c * c ;			  ean cannot be dereferenced	     if(f_filled(par
    if ( d * d == sum ) :				      	if ( d * d == sum ) return true ;			      if ( ( d * d == sum ) && ( d * d == sum ) ) {		  am0.get(i),param1.get(i),param2.get(i),param3.get(
	return True					      	else return false ;					    	return true ;						  i)).equals(f_gold(param0.get(i),param1.get(i),para
    else :						      }								      }								  m2.get(i),param3.get(i))))
	return False					      								      else {							  
							      								    	return false ;						     ^ 1 error
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
def numberOfWays ( x ) :				      static int numberOfWays ( int x ) {			    public static int numberOfWays ( int x ) {			  script_not_found : None
    if x == 0 or x == 1 :				      	if ( x == 0 || x == 1 ) return 1 ;			      if ( x == 0 || x == 1 ) {					  
	return 1					      	else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWa 	return 1 ;						  
    else :						      }								      }								  
	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 								      else {							  
							      								    	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWay 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT
--							      --							    --								  --
def check ( num ) :					      static boolean check ( String str ) {			    public static boolean check ( int num ) {			  error : CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT.java:49
    digitSum = 0					      	int n = str . length ( ) ;				      int digitSum = 0 ;					  : error: incompatible types: String cannot be conv
    while num > 0 :					      	int digitSum = 0 ;					      while ( num > 0 ) {					  erted to int	       if(f_filled(param0.get(i)) ==
	rem = num % 10					      	for ( int i = 0 ;					    	int rem = num % 10 ;					   f_gold(param0.get(i)))
	digitSum = digitSum + rem			      	i < n ;							    	digitSum = digitSum + rem ;				      ^ Note: Some messages have been simplified; re
	num = num // 10					      	i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	    	num = num / 10 ;					  compile with -Xdiags:verbose to get full output 1
    return ( digitSum % 3 == 0 )			      	return ( digitSum % 3 == 0 ) ;				      }								  error
							      }								      return ( digitSum % 3 == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
def mod ( num , a ) :					      static int mod ( String num , int a ) {			    public static int mod ( String num , int a ) {		  error : Exception in thread "main" java.lang.Numbe
    res = 0						      	int res = 0 ;						      int res = 0 ;						  rFormatException: For input string: "R" 	at java.b
    for i in range ( 0 , len ( num ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  ase/java.lang.NumberFormatException.forInputString
	res = ( res * 10 + int ( num [ i ] ) ) % a	      	i < num . length ( ) ;					      i != num . length ( ) ;					  (NumberFormatException.java:65) 	at java.base/java
    return res						      	i ++ ) res = ( res * 10 + ( int ) num . charAt ( i ) - '0'    i ++ ) {							  .lang.Integer.parseInt(Integer.java:652) 	at java.
							      	return res ;						    	res = ( res * 10 + Integer . parseInt ( num . substring ( base/java.lang.Integer.parseInt(Integer.java:770)
							      }								      }								  	at HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER.f_filled(HO
							      								      return res ;						  W_TO_COMPUTE_MOD_OF_A_BIG_NUMBER.java:27) 	at HOW_
							      								    }								  TO_COMPUTE_MOD_OF_A_BIG_NUMBER.main(HOW_TO_COMPUTE
							      								    								  _MOD_OF_A_BIG_NUMBER.java:59)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH      COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	    COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	  COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH
--							      --							    --								  --
def compute ( graph , N ) :				      static int compute ( int [ ] graph , int N ) {		    public static int compute ( int [ ] [ ] graph , int N ) {	  error : COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISC
    count = 0						      	int count = 0 ;						      int count = 0 ;						  ONNECTED_GRAPH.java:29: error: int cannot be deref
    for i in range ( 1 , N + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  erenced     if ( ( graph [ i ] . length == 0 ) &&
	if ( len ( graph [ i ] ) == 0 ) :		      	i < 7 ;							      i <= N ;							  ( graph [ i ] [ 0 ] . length == 0 ) ) {
	    count += 1					      	i ++ ) {						      i ++ ) {							  
    return count					      	  if ( graph [ i ] == 0 ) count ++ ;			    	if ( ( graph [ i ] . length == 0 ) && ( graph [ i ] [ 0 ]   ^ COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNE
							      	}							    	  count ++ ;						  CTED_GRAPH.java:63: error: incompatible types: int
							      	return count ;						    	}							  [] cannot be converted to int[][]	    if(f_fil
							      }								      }								  led(param0.get(i),param1.get(i)) == f_gold(param0.
							      								      return count ;						  get(i),param1.get(i)))
							      								    }								     ^ Note: Some messages have been simplified; rec
							      								    								  ompile with -Xdiags:verbose to get full output 2 e
							      								    								  rrors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
def countSetBitsRec ( num ) :				      static int countSetBitsRec ( int num ) {			    static int countSetBitsRec ( int num ) {			  script_not_found : None
    nibble = 0						      	int nibble = 0 ;					      int nibble ;						  
    if ( 0 == num ) :					      	if ( 0 == num ) return num_to_bits [ 0 ] ;		      if ( ( 0 == num ) || ( num > 0xffff ) ) {			  
	return num_to_bits [ 0 ]			      	nibble = num & 0xf ;					    	return numToBits [ 0 ] ;				  
    nibble = num & 0xf					      	return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4    }								  
    return num_to_bits [ nibble ] + countSetBitsRec ( num >>  }								      nibble = num & 0xf ;					  
							      								      return numToBits [ nibble ] + countSetBitsRec ( num >> 4 )  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
def findRoot ( arr , n ) :				      static int findRoot ( pair arr [ ] , int n ) {		    public static int findRoot ( int [ ] arr , int n ) {	  script_not_found : None
    root = 0						      	int root = 0 ;						      int root = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	      	i < n ;							      i < n ;							  
    return root						      	i ++ ) {						      i ++ ) {							  
							      	  root += ( arr [ i ] . first - arr [ i ] . second ) ;	    	root += ( arr [ i ] - arr [ i ] ) ;			  
							      	}							      }								  
							      	return root ;						      return root ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE
--							      --							    --								  --
def printCountRec ( dist ) :				      static int printCountRec ( int dist ) {			    public static int printCountRec ( int dist ) {		  script_not_found : None
    if dist < 0 :					      	if ( dist < 0 ) return 0 ;				      if ( dist < 0 ) return 0 ;				  
	return 0					      	if ( dist == 0 ) return 1 ;				      if ( dist == 0 ) return 1 ;				  
    if dist == 0 :					      	return printCountRec ( dist - 1 ) + printCountRec ( dist -    return ( printCountRec ( dist - 1 ) + printCountRec ( dist  
	return 1					      }								    }								  
    return ( printCountRec ( dist - 1 ) + printCountRec ( dis 								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1
--							      --							    --								  --
def transpose ( A , B ) :				      static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {	    public static void transpose ( double [ ] [ ] A , double [ ]  script_not_found : None
    for i in range ( N ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( M ) :				      	for ( i = 0 ;						      i < N ;							  
	    B [ i ] [ j ] = A [ j ] [ i ]		      	i < N ;							      i ++ ) {							  
							      	i ++ ) for ( j = 0 ;					    	for ( int j = 0 ;					  
							      	j < M ;							    	j < M ;							  
							      	j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			    	j ++ ) {						  
							      }								    	  B [ i ] [ j ] = A [ j ] [ i ] ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
def swap ( xp , yp ) :					      static void swap ( int xp , int yp ) {			    public static void swap ( Point xp , Point yp ) {		  script_not_found : None
    if ( xp [ 0 ] == yp [ 0 ] ) :			      	if ( xp == yp ) return ;				      if ( ( xp . x == yp . x ) && ( xp . y == yp . y ) ) return  
	return						      	xp = xp + yp ;						      xp . x = xp . x + yp . x ;				  
    xp [ 0 ] = xp [ 0 ] + yp [ 0 ]			      	yp = xp - yp ;						      yp . x = xp . x - yp . x ;				  
    yp [ 0 ] = xp [ 0 ] - yp [ 0 ]			      	xp = xp - yp ;						      xp . y = xp . y - yp . y ;				  
    xp [ 0 ] = xp [ 0 ] - yp [ 0 ]			      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		      PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		    PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		  PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX
--							      --							    --								  --
def scalarProductMat ( mat , k ) :			      static void scalarProductMat ( int mat [ ] [ ] , int k ) {    public static void scalarProductMat ( double [ ] [ ] mat , do script_not_found : None
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( N ) :				      	i < N ;							      i < N ;							  
	    mat [ i ] [ j ] = mat [ i ] [ j ] * k	      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
							      	j < N ;							    	for ( int j = 0 ;					  
							      	j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;		    	j < N ;							  
							      }								    	j ++ ) {						  
							      								    	  mat [ i ] [ j ] = mat [ i ] [ j ] * k ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
def zigzag ( n , k ) :					      static int zigzag ( int n , int k ) {			    public static int zigzag ( int n , int k ) {		  script_not_found : None
    if ( n == 0 and k == 0 ) :				      	if ( n == 0 && k == 0 ) return 1 ;			      if ( ( n == 0 && k == 0 ) || ( k == 0 ) ) return 1 ;	  
	return 1					      	if ( k == 0 ) return 0 ;				      if ( ( k == 0 ) || ( n == 0 ) ) return 0 ;		  
    if ( k == 0 ) :					      	return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;      return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;	  
	return 0					      }								    }								  
    return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k )    								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
def seiresSum ( n , a ) :				      static int seiresSum ( int n , int [ ] a ) {		    public static double seiresSum ( int n , double [ ] a ) {	  script_not_found : None
    return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [  	return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 *    return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
def isReversible ( str ) :				      static boolean isReversible ( String str ) {		    public static boolean isReversible ( String str ) {		  error : PERFECT_REVERSIBLE_STRING.java:35: error:
    i = 0 j = len ( str ) - 1				      	int i = 0 , j = str . length ( ) - 1 ;			      int i = 0 , j = str . length ( ) - 1 ;			  illegal start of expression public static void mai
    while ( i < j ) :					      	while ( i < j ) {					      while ( ( i < j ) && ( str . charAt ( i ) != str . charAt ( n(String args[]) { ^ 1 error
	if ( str [ i ] != str [ j ] ) :			      	  if ( str . charAt ( i ) != str . charAt ( j ) ) return fa 	if ( ( str . charAt ( i ) != str . charAt ( j ) ) && ( st 
	    return False				      	  i ++ ;						    	  return false ;					  
	i += 1						      	  j -- ;						    	}							  
	j -= 1						      	}							    	i ++ ;							  
    return True						      	return true ;						    	j -- ;							  
							      }								      }								  
-							      -								      return-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SUM_FACTORS_NUMBER				      FIND_MINIMUM_SUM_FACTORS_NUMBER				    FIND_MINIMUM_SUM_FACTORS_NUMBER				  FIND_MINIMUM_SUM_FACTORS_NUMBER
--							      --							    --								  --
def findMinSum ( num ) :				      static int findMinSum ( int num ) {			    public static int findMinSum ( int num ) {			  failure : #Results:9, 10
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    i = 2						      	for ( int i = 2 ;					      int i = 2 ;						  
    while ( i * i <= num ) :				      	i * i <= num ;						      while ( ( i * i <= num ) && ( num % i == 0 ) ) {		  
	while ( num % i == 0 ) :			      	i ++ ) {						    	while ( ( num % i == 0 ) && ( num % i == 0 ) ) {	  
	    sum += i					      	  while ( num % i == 0 ) {				    	  sum += i ;						  
	    num /= i					      	    sum += i ;						    	  num /= i ;						  
	i += 1						      	    num /= i ;						    	}							  
    sum += num						      	  }							    	i ++ ;							  
    return sum						      	}							      }								  
							      	sum += num ;						      sum += num ;						  
							      	return sum ;						      return sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		      PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		    PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER			  PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER
--							      --							    --								  --
def Print ( n , k ) :					      static void print ( int n , int k ) {			    public static void Print ( int n , int k ) {		  script_not_found : None
    rem = 1						      	int rem = 1 ;						      int rem = 1 ;						  
    for i in range ( 0 , k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = " 	i < k ;							      i <= k ;							  
	rem = ( 10 * rem ) % n				      	i ++ ) {						      i ++ ) {							  
							      	  System . out . print ( ( 10 * rem ) / n ) ;		    	System . out . print ( Math . floor ( ( ( 10 * rem ) / n  
							      	  rem = ( 10 * rem ) % n ;				    	rem = ( 10 * rem ) % n ;				  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING		      LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			    LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			  LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING
--							      --							    --								  --
def LexicographicalMaxString ( str ) :			      static String LexicographicalMaxString ( String str ) {	    public static String LexicographicalMaxString ( String str )  error : LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING.j
    mx = ""						      	String mx = "" ;					      String mx = "" ;						  ava:31: error: no suitable method found for max(St
    for i in range ( len ( str ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  ring,String)	   mx = Math . max ( mx , str . subs
	mx = max ( mx , str [ i : ] )			      	i < str . length ( ) ;					      i < str . length ( ) ;					  tring ( i ) ) ;		^     method Math.ma
    return mx						      	++ i ) {						      i ++ ) {							  x(int,int) is not applicable	     (argument misma
							      	  if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) {    	mx = Math . max ( mx , str . substring ( i ) ) ;	  tch; String cannot be converted to int)     method
							      	    mx = str . substring ( i ) ;			      }								   Math.max(long,long) is not applicable       (argu
							      	  }							      return mx ;						  ment mismatch; String cannot be converted to long)
							      	}							    }								       method Math.max(float,float) is not applicabl
							      	return mx ;						    								  e	  (argument mismatch; String cannot be conve
							      }								    								  rted to float)     method Math.max(double,double)
							      								    								  is not applicable	  (argument mismatch; String
							      								    								   cannot be converted to double) 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
def printSeries ( n ) :					      static void printSeries ( int n ) {			    public static void printSeries ( int n ) {			  script_not_found : None
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	num = i * ( i + 1 ) * ( i + 2 ) // 6		      	i <= n ;						      i <= n ;							  
	print ( num , end = ' ' )			      	i ++ ) {						      i ++ ) {							  
							      	  int num = i * ( i + 1 ) * ( i + 2 ) / 6 ;		    	int num = i * ( i + 1 ) * ( i + 2 ) / 6 ;		  
							      	  System . out . print ( num + " " ) ;			    	System . out . print ( num + " " ) ;			  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_2				      FIND_REPETITIVE_ELEMENT_1_N_1_2				    FIND_REPETITIVE_ELEMENT_1_N_1_2				  FIND_REPETITIVE_ELEMENT_1_N_1_2
--							      --							    --								  --
def findRepeating ( arr , n ) :				      static int findRepeating ( int arr [ ] , int n ) {	    public static int findRepeating ( int [ ] arr , int n ) {	  failure : #Results:0, 10
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	res = res ^ ( i + 1 ) ^ arr [ i ]		      	i < n - 1 ;						      i <= n - 1 ;						  
    res = res ^ arr [ n - 1 ]				      	i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;		      i ++ ) {							  
    return res						      	res = res ^ arr [ n - 1 ] ;				    	res = res ^ ( i + 1 ) ^ arr [ i ] ;			  
							      	return res ;						      }								  
							      }								      res = res ^ arr [ n - 1 ] ;				  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE		  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
--							      --							    --								  --
def arraySortedOrNot ( arr ) :				      static int arraySortedOrNot ( int arr [ ] , int n ) {	    public static boolean arraySortedOrNot ( int [ ] arr ) {	  error : PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_R
    n = len ( arr )					      	if ( n == 1 || n == 0 ) return 1 ;			      int n = arr . length ;					  ECURSIVE.java:23: error: method f_filled in class
    if n == 1 or n == 0 :				      	if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ;		      if ( n == 1 || n == 0 ) return true ;			  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
	return True					      	return arraySortedOrNot ( arr , n - 1 ) ;		      return arr [ 0 ] <= arr [ 1 ] && arraySortedOrNot ( arr , 1  cannot be applied to given types;   return arr [
    return arr [ 0 ] <= arr [ 1 ] and arraySortedOrNot ( arr  }								    }								  0 ] <= arr [ 1 ] && f_filled ( arr , 1 ) ;
							      								    								  			      ^	  required: int[]
							      								    								  found: int[],int   reason: actual and formal argum
							      								    								  ent lists differ in length PROGRAM_CHECK_ARRAY_SOR
							      								    								  TED_NOT_ITERATIVE_RECURSIVE.java:53: error: method
							      								    								   f_filled in class PROGRAM_CHECK_ARRAY_SORTED_NOT_
							      								    								  ITERATIVE_RECURSIVE cannot be applied to given typ
							      								    								  es;	      if(f_filled(param0.get(i),param1.get(i
							      								    								  )) == f_gold(param0.get(i),param1.get(i)))
							      								    								      ^	  required: int[]   found: int[],Integer   r
							      								    								  eason: actual and formal argument lists differ in
							      								    								  length 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_SECTOR					      AREA_OF_A_SECTOR						    AREA_OF_A_SECTOR						  AREA_OF_A_SECTOR
--							      --							    --								  --
def SectorArea ( radius , angle ) :			      static void SectorArea ( double radius , double angle ) {	    public static void SectorArea ( int radius , int angle ) {	  script_not_found : None
    pi = 22 / 7						      	if ( angle >= 360 ) System . out . println ( "Angle not pos   int pi = 22 / 7 ;						  
    if angle >= 360 :					      	else {							      if ( angle >= 360 ) {					  
	print ( "Angle not possible" )			      	  double sector = ( ( 22 * radius * radius ) / 7 ) * ( angl 	System . out . println ( "Angle not possible" ) ;	  
	return						      	  System . out . println ( sector ) ;			    	return ;						  
    else :						      	}							      }								  
	sector = ( pi * radius ** 2 ) * ( angle / 360 )	      }								      else {							  
	print ( sector )				      								    	int sector = ( pi * radius * radius ) * ( angle / 360 ) ; 
	return						      								    	System . out . println ( sector ) ;			  
							      								    	return ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_
    count = 0						      	int count = 0 ;						      int count = 0 ;						  TO_N.java:26: error: bad operand type int for unar
    if ( n and not ( n & ( n - 1 ) ) ) :		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( ( n > 0 ) && ! ( n & ( n - 1 ) ) ) return n ;	  y operator '!'   if ( ( n > 0 ) && ! ( n & ( n - 1
	return n					      	while ( n != 0 ) {					      while ( ( n != 0 ) && ( n != 1 ) ) {			   ) ) ) return n ;			^ 1 error
    while ( n != 0 ) :					      	  n >>= 1 ;						    	n >>>= 1 ;						  
	n >>= 1						      	  count += 1 ;						    	count ++ ;						  
	count += 1					      	}							      }								  
    return 1 << count					      	return 1 << count ;					      return 1 << count ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
def isProduct ( arr , n , x ) :				      boolean isProduct ( int arr [ ] , int n , int x ) {	    public static boolean isProduct ( int [ ] arr , int n , int x success : None
    for i in arr :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in arr :					      	i < n - 1 ;						      i < n ;							  
	    if i * j == x :				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		return True				      	j < n ;							    	for ( int j = 0 ;					  
    return False					      	j ++ ) if ( arr [ i ] * arr [ j ] == x ) return true ;	    	j < n ;							  
							      	return false ;						    	j ++ ) {						  
							      }								    	  if ( arr [ i ] * arr [ j ] == x ) {			  
							      								    	    return true ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
def numOfways ( n , k ) :				      static int numOfways ( int n , int k ) {			    public static int numOfways ( int n , int k ) {		  error : NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECT
    p = 1						      	int p = 1 ;						      int p = 1 ;						  ED_COMPLETE_CONNECTED_GRAPH_N_NODES.java:23: error
    if ( k % 2 ) :					      	if ( k % 2 != 0 ) p = - 1 ;				      if ( ( k % 2 ) != 0 ) p = - 1 ;				  : incompatible types: possible lossy conversion fr
	p = - 1						      	return ( int ) ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) )   return ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ;	  om double to int   return ( Math . pow ( n - 1 , k
    return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	      }								    }								   ) + p * ( n - 1 ) ) / n ;
							      								    								  				 ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			      NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			    NUMBER_DAYS_TANK_WILL_BECOME_EMPTY				  NUMBER_DAYS_TANK_WILL_BECOME_EMPTY
--							      --							    --								  --
def minDaysToEmpty ( C , l ) :				      static int minDaysToEmpty ( int C , int l ) {		    public static int minDaysToEmpty ( int C , int l ) {	  error : NUMBER_DAYS_TANK_WILL_BECOME_EMPTY.java:23
    if ( l >= C ) : return C				      	if ( l >= C ) return C ;				      if ( ( l >= C ) && ( l <= C ) ) return C ;		  : error: incompatible types: possible lossy conver
    eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2     	double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 )    double eqRoot = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / sion from double to int   return Math . ceil ( eqR
    return math.ceil ( eq_root ) + l			      	return ( int ) ( Math . ceil ( eq_root ) + l ) ;	      return Math . ceil ( eqRoot ) + l ;			  oot ) + l ;				      ^ 1 er
							      }								    }								  ror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES				      NUMBER_TRIANGLES_N_MOVES					    NUMBER_TRIANGLES_N_MOVES					  NUMBER_TRIANGLES_N_MOVES
--							      --							    --								  --
def numberOfTriangles ( n ) :				      public static int numberOfTriangles ( int n ) {		    public static int numberOfTriangles ( int n ) {		  success : None
    answer = [ None ] * ( n + 1 )			      	int [ ] answer = new int [ n + 1 ] ;			      int [ ] answer = new int [ n + 1 ] ;			  
    answer [ 0 ] = 1					      	answer [ 0 ] = 1 ;					      answer [ 0 ] = 1 ;					  
    i = 1						      	for ( int i = 1 ;					      int i = 1 ;						  
    while i <= n :					      	i <= n ;						      while ( i <= n ) {					  
	answer [ i ] = answer [ i - 1 ] * 3 + 2		      	i ++ ) answer [ i ] = answer [ i - 1 ] * 3 + 2 ;	    	answer [ i ] = answer [ i - 1 ] * 3 + 2 ;		  
	i = i + 1					      	return answer [ n ] ;					    	i = i + 1 ;						  
    return answer [ n ]					      }								      }								  
							      								      return answer [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_
--							      --							    --								  --
def isPossibleToMakeDivisible ( arr , n ) :		      public static boolean isPossibleToMakeDivisible ( int arr [ ] public static boolean isPossibleToMakeDivisible ( int [ ] arr failure : #Results:6, 10
    remainder = 0					      	int remainder = 0 ;					      int remainder = 0 ;					  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	remainder = ( remainder + arr [ i ] ) % 3	      	i < n ;							      i <= n ;							  
    return ( remainder == 0 )				      	i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ;	      i ++ ) {							  
							      	return ( remainder == 0 ) ;				    	remainder = ( remainder + arr [ i ] ) % 3 ;		  
							      }								      }								  
							      								      return ( remainder == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	      FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	    FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	  FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY
--							      --							    --								  --
def findSmallest ( arr , n ) :				      int findSmallest ( int arr [ ] , int n ) {		    public static int findSmallest ( int [ ] arr , int n ) {	  failure : #Results:6, 10
    res = 1						      	int res = 1 ;						      int res = 1 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] <= res :				      	i < n && arr [ i ] <= res ;				      i <= n ;							  
	    res = res + arr [ i ]			      	i ++ ) res = res + arr [ i ] ;				      i ++ ) {							  
	else :						      	return res ;						    	if ( arr [ i ] <= res ) {				  
	    break					      }								    	  res = res + arr [ i ] ;				  
    return res						      								    	}							  
							      								    	else {							  
							      								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION			      PROGRAM_BINARY_DECIMAL_CONVERSION				    PROGRAM_BINARY_DECIMAL_CONVERSION				  PROGRAM_BINARY_DECIMAL_CONVERSION
--							      --							    --								  --
def binaryToDecimal ( n ) :				      static int binaryToDecimal ( int n ) {			    public static int binaryToDecimal ( int n ) {		  failure : #Results:1, 10
    num = n						      	int num = n ;						      int num = n ;						  
    dec_value = 0					      	int dec_value = 0 ;					      int decValue = 0 ;					  
    base = 1						      	int base = 1 ;						      int base = 1 ;						  
    temp = num						      	int temp = num ;					      int temp = num ;						  
    while ( temp ) :					      	while ( temp > 0 ) {					      while ( ( temp = temp % 10 ) != 0 ) {			  
	last_digit = temp % 10				      	  int last_digit = temp % 10 ;				    	int lastDigit = temp % 10 ;				  
	temp = int ( temp / 10 )			      	  temp = temp / 10 ;					    	temp = ( int ) ( temp / 10 ) ;				  
	dec_value += last_digit * base			      	  dec_value += last_digit * base ;			    	decValue += lastDigit * base ;				  
	base = base * 2					      	  base = base * 2 ;					    	base = base * 2 ;					  
    return dec_value					      	}							      }								  
							      	return dec_value ;					      return decValue ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT				      CHECK_TWO_GIVEN_SETS_DISJOINT				    CHECK_TWO_GIVEN_SETS_DISJOINT				  CHECK_TWO_GIVEN_SETS_DISJOINT
--							      --							    --								  --
def areDisjoint ( set1 , set2 , m , n ) :		      boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {	    public static boolean areDisjoint ( int [ ] set1 , int [ ] se script_not_found : None
    for i in range ( 0 , m ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , n ) :			      	i < set1 . length ;					      i <= m ;							  
	    if ( set1 [ i ] == set2 [ j ] ) :		      	i ++ ) {						      i ++ ) {							  
		return False				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    return True						      	  j < set2 . length ;					    	j <= n ;						  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    if ( set1 [ i ] == set2 [ j ] ) return false ;	    	  if ( ( set1 [ i ] == set2 [ j ] ) && ( set1 [ i ] != se 
							      	  }							    	    return false ;					  
							      	}							    	  }							  
							      	return true ;						    	}							  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT
--							      --							    --								  --
def countToMake0lternate ( s ) :			      static int countToMake0lternate ( String s ) {		    public static int countToMake0lternate ( String s ) {	  script_not_found : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( len ( s ) - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( s [ i ] == s [ i + 1 ] ) :			      	i < ( s . length ( ) - 1 ) ;				      i < s . length ( ) - 1 ;					  
	    result += 1					      	i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) resu   i ++ ) {							  
    return result					      	return result ;						    	if ( ( s . charAt ( i ) == s . charAt ( i + 1 ) ) && ( s  
							      }								    	  result ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1
--							      --							    --								  --
def findSum ( N , K ) :					      static int findSum ( int N , int K ) {			    public static int findSum ( int N , int K ) {		  success : None
    ans = 0						      	int ans = 0 ;						      double ans ;						  
    y = N / K						      	int y = N / K ;						      double y = N / K ;					  
    x = N % K						      	int x = N % K ;						      double x = N % K ;					  
    ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 	ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;     ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ) 
    return int ( ans )					      	return ans ;						      return ( int ) ans ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY
--							      --							    --								  --
def countRotations ( arr , n ) :			      static int countRotations ( int arr [ ] , int n ) {	    public static int countRotations ( int [ ] arr , int n ) {	  error : FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY.j
    min = arr [ 0 ]					      	int min = arr [ 0 ] , min_index = - 1 ;			      int min = arr [ 0 ] ;					  ava:34: error: cannot find symbol	  min_index
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  = i ;	      ^	  symbol:   variable min_index	 loc
	if ( min > arr [ i ] ) :			      	i < n ;							      i <= n ;							  ation: class FIND_ROTATION_COUNT_ROTATED_SORTED_AR
	    min = arr [ i ]				      	i ++ ) {						      i ++ ) {							  RAY FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY.java:
	    min_index = i				      	  if ( min > arr [ i ] ) {				    	if ( ( min > arr [ i ] ) && ( min < arr [ i + 1 ] ) ) {	  37: error: cannot find symbol	  return min_index ;
    return min_index					      	    min = arr [ i ] ;					    	  min = arr [ i ] ;					  	    ^	symbol:	  variable min_index   locat
							      	    min_index = i ;					    	  min_index = i ;					  ion: class FIND_ROTATION_COUNT_ROTATED_SORTED_ARRA
							      	  }							    	}							  Y 2 errors
							      	}							      }								  
							      	return min_index ;					      return min_index ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS     SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	    SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS
--							      --							    --								  --
def getTotalNumberOfSequences ( m , n ) :		      static int getTotalNumberOfSequences ( int m , int n ) {	    public static int getTotalNumberOfSequences ( int m , int n ) success : None
    if m < n :						      	if ( m < n ) return 0 ;					      if ( m < n ) return 0 ;					  
	return 0					      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
    if n == 0 :						      	return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNu   int res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTo 
	return 1					      }								      return res ;						  
    res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTota 								    }								  
    return res						      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			      CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			    CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			  CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT
--							      --							    --								  --
def check_duck ( num ) :				      static int check_duck ( String num ) {			    public static int checkDuck ( String num ) {		  error : CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT.java:
    l = len ( num )					      	int len = num . length ( ) ;				      int l = num . length ( ) ;				  35: error: illegal start of expression public stat
    count_zero = 0					      	int count_zero = 0 ;					      int countZero = 0 ;					  ic void main(String args[]) { ^ 1 error
    i = 1						      	char ch ;						      int i = 1 ;						  
    while i < l :					      	for ( int i = 1 ;					      while ( i < l ) {						  
	ch = num [ i ]					      	i < len ;						    	char ch = num . charAt ( i ) ;				  
	if ( ch == "0" ) :				      	i ++ ) {						    	if ( ( ch == '0' ) || ( ch == '1' ) || ( ch == '2' ) || ( 
	    count_zero = count_zero + 1			      	  ch = num . charAt ( i ) ;				    								  
	i = i + 1					      	  if ( ch == '0' ) count_zero ++ ;			    								  
    return count_zero					      	}							    								  
							      	return count_zero ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER						      DELANNOY_NUMBER						    DELANNOY_NUMBER						  DELANNOY_NUMBER
--							      --							    --								  --
def dealnnoy ( n , m ) :				      public static int dealnnoy ( int n , int m ) {		    public static int dealnnoy ( int n , int m ) {		  script_not_found : None
    if ( m == 0 or n == 0 ) :				      	if ( m == 0 || n == 0 ) return 1 ;			      if ( ( m == 0 || n == 0 ) && ( m > 0 ) ) return 1 ;	  
	return 1					      	return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1 )    return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1 )  
    return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
def MaximumHeight ( a , n ) :				      static int MaximumHeight ( int [ ] a , int n ) {		    public static int MaximumHeight ( int a , int n ) {		  error : MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_O
    result = 1						      	int result = 1 ;					      int result = 1 ;						  F_ARRAY_VALUES.java:69: error: incompatible types:
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						   int[] cannot be converted to int	    if(f_fil
	y = ( i * ( i + 1 ) ) / 2			      	i <= n ;						      i < n ;							  led(param0.get(i),param1.get(i)) == f_gold(param0.
	if ( y < n ) :					      	++ i ) {						      i ++ ) {							  get(i),param1.get(i)))
	    result = i					      	  int y = ( i * ( i + 1 ) ) / 2 ;			    	int y = ( i * ( i + 1 ) ) / 2 ;				     ^ Note: Some messages have been simplified; rec
	else :						      	  if ( y < n ) result = i ;				    	if ( ( y < n ) && ( y > a ) ) {				  ompile with -Xdiags:verbose to get full output 1 e
	    break					      	  else break ;						    	  result = i ;						  rror
    return result					      	}							    	}							  
							      	return result ;						    	else {							  
							      }								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_ZEROES_END_ARRAY					      MOVE_ZEROES_END_ARRAY					    MOVE_ZEROES_END_ARRAY					  MOVE_ZEROES_END_ARRAY
--							      --							    --								  --
def pushZerosToEnd ( arr , n ) :			      static void pushZerosToEnd ( int arr [ ] , int n ) {	    public static void pushZerosToEnd ( int [ ] arr , int n ) {	  script_not_found : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] != 0 :				      	i < n ;							      i < n ;							  
	    arr [ count ] = arr [ i ]			      	i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ;   i ++ ) {							  
	    count += 1					      	while ( count < n ) arr [ count ++ ] = 0 ;		    	if ( arr [ i ] != 0 ) {					  
    while count < n :					      }								    	  arr [ count ] = arr [ i ] ;				  
	arr [ count ] = 0				      								    	  count ++ ;						  
	count += 1					      								    	}							  
							      								      }								  
							      								      while ( count < n ) {					  
							      								    	arr [ count ] = 0 ;					  
							      								    	count ++ ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PADOVAN_SEQUENCE					      PADOVAN_SEQUENCE						    PADOVAN_SEQUENCE						  PADOVAN_SEQUENCE
--							      --							    --								  --
def pad ( n ) :						      static int pad ( int n ) {				    public static int pad ( int n ) {				  success : None
    pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	      	int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;	      int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;	  
    for i in range ( 3 , n + 1 ) :			      	for ( int i = 3 ;					      for ( int i = 3 ;						  
	pNext = pPrevPrev + pPrev			      	i <= n ;						      i <= n ;							  
	pPrevPrev = pPrev				      	i ++ ) {						      i ++ ) {							  
	pPrev = pCurr					      	  pNext = pPrevPrev + pPrev ;				    	pNext = pPrevPrev + pPrev ;				  
	pCurr = pNext					      	  pPrevPrev = pPrev ;					    	pPrevPrev = pPrev ;					  
    return pNext ;					      	  pPrev = pCurr ;					    	pPrev = pCurr ;						  
							      	  pCurr = pNext ;					    	pCurr = pNext ;						  
							      	}							      }								  
							      	return pNext ;						      ;								  
							      }								      return pNext ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
def countPairs ( a , n ) :				      static int countPairs ( int a [ ] , int n ) {		    public static int countPairs ( int [ ] a , int n ) {	  failure : #Results:1, 10
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if ( a [ i ] & a [ j ] ) == 0 :		      	i ++ ) {						      i ++ ) {							  
		count += 2				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    return count					      	  j < n ;						    	j <= n ;						  
							      	  j ++ ) if ( ( a [ i ] & a [ j ] ) == 0 ) count += 2 ;	    	j ++ ) {						  
							      	}							    	  if ( ( a [ i ] & a [ j ] ) == 0 ) {			  
							      	return count ;						    	    count += 2 ;					  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		      COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		    COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		  COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME
--							      --							    --								  --
def countFibs ( low , high ) :				      static int countFibs ( int low , int high ) {		    public static int countFibs ( int low , int high ) {	  failure : #Results:7, 10
    f1 , f2 , f3 = 0 , 1 , 1				      	int f1 = 0 , f2 = 1 , f3 = 1 ;				      int f1 = 0 , f2 = 1 , f3 = 1 ;				  
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    while ( f1 <= high ) :				      	while ( f1 <= high ) {					      while ( ( f1 <= high ) && ( f1 >= low ) ) {		  
	if ( f1 >= low ) :				      	  if ( f1 >= low ) result ++ ;				    	if ( ( f1 >= low ) && ( f1 <= high ) ) {		  
	    result += 1					      	  f1 = f2 ;						    	  result ++ ;						  
	f1 = f2						      	  f2 = f3 ;						    	}							  
	f2 = f3						      	  f3 = f1 + f2 ;					    	f1 = f2 ;						  
	f3 = f1 + f2					      	}							    	f2 = f3 ;						  
    return result					      	return result ;						    	f3 = f1 + f2 ;						  
							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
def getMissingNo ( a , n ) :				      static int getMissingNo ( int a [ ] , int n ) {		    static int getMissingNo ( int [ ] a , int n ) {		  failure : #Results:0, 10
    x1 = a [ 0 ]					      	int x1 = a [ 0 ] ;					      int x1 = a [ 0 ] ;					  
    x2 = 1						      	int x2 = 1 ;						      int x2 = 1 ;						  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	x1 = x1 ^ a [ i ]				      	i < n ;							      i < n ;							  
    for i in range ( 2 , n + 2 ) :			      	i ++ ) x1 = x1 ^ a [ i ] ;				      i ++ ) x1 = x1 ^ a [ i ] ;				  
	x2 = x2 ^ i					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
    return x1 ^ x2					      	i <= n + 1 ;						      i < n ;							  
							      	i ++ ) x2 = x2 ^ i ;					      i ++ ) x2 = x2 ^ i ;					  
							      	return ( x1 ^ x2 ) ;					      return x1 ^ x2 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
def isLucky ( n ) :					      static boolean isLucky ( int n ) {			    public static int isLucky ( int n ) {			  script_not_found : None
    next_position = n					      	int next_position = n ;					      int nextPosition = n ;					  
    if isLucky.counter > n :				      	if ( counter > n ) return true ;			      if ( isLucky . counter > n ) return 1 ;			  
	return 1					      	if ( n % counter == 0 ) return false ;			      if ( n % isLucky . counter == 0 ) return 0 ;		  
    if n % isLucky.counter == 0 :			      	next_position -= next_position / counter ;		      nextPosition = nextPosition - nextPosition / isLucky . coun 
	return 0					      	counter ++ ;						      isLucky . counter = isLucky . counter + 1 ;		  
    next_position = next_position - next_position / isLucky.c 	return isLucky ( next_position ) ;			      return isLucky ( nextPosition ) ;				  
    isLucky.counter = isLucky.counter + 1		      }								    }								  
    return isLucky ( next_position )			      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
def countFact ( low , high ) :				      static int countFact ( int low , int high ) {		    public static int countFact ( int low , int high ) {	  success : None
    fact = 1						      	int fact = 1 , x = 1 ;					      int fact = 1 ;						  
    x = 1						      	while ( fact < low ) {					      int x = 1 ;						  
    while ( fact < low ) :				      	  fact = fact * x ;					      while ( ( fact < low ) && ( x < high ) ) {		  
	fact = fact * x					      	  x ++ ;						    	fact = fact * x ;					  
	x += 1						      	}							    	x ++ ;							  
    res = 0						      	int res = 0 ;						      }								  
    while ( fact <= high ) :				      	while ( fact <= high ) {				      int res = 0 ;						  
	res += 1					      	  res ++ ;						      while ( ( fact <= high ) && ( x < high ) ) {		  
	fact = fact * x					      	  fact = fact * x ;					    	res ++ ;						  
	x += 1						      	  x ++ ;						    	fact = fact * x ;					  
    return res						      	}							    	x ++ ;							  
							      	return res ;						      }								  
							      }								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
def ispalindrome ( s ) :				      static boolean ispalindrome ( String s ) {		    public static boolean ispalindrome ( String s ) {		  success : None
    l = len ( s )					      	int l = s . length ( ) ;				      int l = s . length ( ) ;					  
    i = 0						      	for ( int i = 0 , j = l - 1 ;				      int i = 0 ;						  
    j = l - 1						      	i <= j ;						      int j = l - 1 ;						  
    while i <= j :					      	i ++ , j -- ) {						      while ( i <= j ) {					  
	if ( s [ i ] != s [ j ] ) :			      	  if ( s . charAt ( i ) != s . charAt ( j ) ) {		    	if ( ( s . charAt ( i ) != s . charAt ( j ) ) && ( s . ch 
	    return False				      	    return false ;					    	  return false ;					  
	i += 1						      	  }							    	}							  
	j -= 1						      	}							    	i ++ ;							  
    return True						      	return true ;						    	j -- ;							  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1
--							      --							    --								  --
def isSubSequence ( str1 , str2 , m , n ) :		      static boolean isSubSequence ( String str1 , String str2 , in public static boolean isSubSequence ( String str1 , String st script_not_found : None
    j = 0						      	int j = 0 ;						      int j = 0 ;						  
    i = 0						      	for ( int i = 0 ;					      int i = 0 ;						  
    while j < m and i < n :				      	i < n && j < m ;					      while ( j < m && i < n ) {				  
	if str1 [ j ] == str2 [ i ] :			      	i ++ ) if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j  	if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j = j + 
	    j = j + 1					      	return ( j == m ) ;					    	i = i + 1 ;						  
	i = i + 1					      }								      }								  
    return j == m					      								      return j == m ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	      CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	    CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION		  CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION
--							      --							    --								  --
def stirlingFactorial ( n ) :				      public static int stirlingFactorial ( double n ) {	    public static double stirlingFactorial ( double n ) {	  failure : #Results:5, 10
    if ( n == 1 ) :					      	if ( n == 1 ) return 1 ;				      if ( ( n == 1 ) || ( n == - 1 ) ) return 1 ;		  
	return 1					      	double z ;						      double e = 2.71 ;						  
    e = 2.71						      	double e = 2.71 ;					      double z = ( Math . sqrt ( 2 * 3.14 * n ) * Math . pow ( (  
    z = ( math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , 	z = Math . sqrt ( 2 * 3.14 * n ) * Math . pow ( ( n / e ) ,   return Math . floor ( z ) ;				  
    return math.floor ( z )				      	return ( int ) ( z ) ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	      K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	    K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	  K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED
--							      --							    --								  --
def minDiff ( arr , n , k ) :				      static int minDiff ( int arr [ ] , int n , int k ) {	    public static int minDiff ( int [ ] arr , int n , int k ) {	  script_not_found : None
    result = + 2147483647				      	int result = Integer . MAX_VALUE ;			      int result = + 2147483647 ;				  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( n - k + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	result = int ( min ( result , arr [ i + k - 1 ] - arr 	i <= n - k ;						      i < n - k + 1 ;						  
    return result					      	i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - a   i ++ ) {							  
							      	return result ;						    	result = ( int ) Math . min ( result , arr [ i + k - 1 ]  
							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_ELEMENT_STABLE_SORT				      POSITION_ELEMENT_STABLE_SORT				    POSITION_ELEMENT_STABLE_SORT				  POSITION_ELEMENT_STABLE_SORT
--							      --							    --								  --
def getIndexInSortedArray ( arr , n , idx ) :		      static int getIndexInSortedArray ( int arr [ ] , int n , int  public static int getIndexInSortedArray ( int [ ] arr , int n error : POSITION_ELEMENT_STABLE_SORT.java:34: erro
    result = 0						      	int result = 0 ;					      int result = 0 ;						  r: ']' expected     if ( ( arr [ i ] == arr [ idx
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  ] && i < idx ) && ( arr [ i
	if ( arr [ i ] < arr [ idx ] ) :		      	i < n ;							      i < n ;							  					 ^ POSITION_
	    result += 1					      	i ++ ) {						      i ++ ) {							  ELEMENT_STABLE_SORT.java:36: error: illegal start
	if ( arr [ i ] == arr [ idx ] and i < idx ) :	      	  if ( arr [ i ] < arr [ idx ] ) result ++ ;		    	if ( ( arr [ i ] < arr [ idx ] ) && ( arr [ i ] == arr [  of expression public static void main(String args[
	    result += 1					      	  if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;    	  result ++ ;						  ]) { ^ 2 errors
    return result ;					      	}							    	}							  
							      	return result ;						    	;							  
							      }								    	if ( ( arr [ i ] == arr [ idx ] && i < idx ) && ( arr [ i 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
def printPascal ( n ) :					      public static void printPascal ( int n ) {		    public static void printPascal ( int n ) {			  script_not_found : None
    for line in range ( 1 , n + 1 ) :			      	for ( int line = 1 ;					      for ( int line = 1 ;					  
	C = 1						      	line <= n ;						      line <= n ;						  
	for i in range ( 1 , line + 1 ) :		      	line ++ ) {						      line ++ ) {						  
	    print ( C , end = "" )			      	  int C = 1 ;						    	int C = 1 ;						  
	    C = int ( C * ( line - i ) / i )		      	  for ( int i = 1 ;					    	for ( int i = 1 ;					  
	print ( "" )					      	  i <= line ;						    	i <= line ;						  
							      	  i ++ ) {						    	i ++ ) {						  
							      	    System . out . print ( C + " " ) ;			    	  System . out . print ( C + " " ) ;			  
							      	    C = C * ( line - i ) / i ;				    	  C = ( int ) ( C * ( line - i ) / i ) ;		  
							      	  }							    	}							  
							      	  System . out . println ( ) ;				    	System . out . println ( "" ) ;				  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT
--							      --							    --								  --
def countObtuseAngles ( a , b , k ) :			      static int countObtuseAngles ( int a , int b , int k ) {	    public static int countObtuseAngles ( int a , int b , int k ) script_not_found : None
    c1 = ( b - a ) - 1					      	int c1 = ( b - a ) - 1 ;				      int c1 = ( b - a ) - 1 ;					  
    c2 = ( k - b ) + ( a - 1 )				      	int c2 = ( k - b ) + ( a - 1 ) ;			      int c2 = ( k - b ) + ( a - 1 ) ;				  
    if ( c1 == c2 ) :					      	if ( c1 == c2 ) return 0 ;				      if ( ( c1 == c2 ) && ( c1 < 0 ) ) return 0 ;		  
	return 0					      	return min ( c1 , c2 ) ;				      return Math . min ( c1 , c2 ) ;				  
    return min ( c1 , c2 )				      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			      PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			    PROGRAM_FIND_AREA_CIRCULAR_SEGMENT				  PROGRAM_FIND_AREA_CIRCULAR_SEGMENT
--							      --							    --								  --
def area_of_segment ( radius , angle ) :		      static float area_of_segment ( float radius , float angle ) { public static double areaOfSegment ( double radius , double a script_not_found : None
    area_of_sector = pi *				      	float area_of_sector = pi * ( radius * radius ) * ( angle /   double areaOfSector = Math . PI * ( radius * radius ) ;	  
	( radius * radius )				      	float area_of_triangle = ( float ) 1 / 2 * ( radius * radiu   * ( angle / 360 ) = 0 ;					  
	* ( angle / 360 )				      	return area_of_sector - area_of_triangle ;		      double areaOfTriangle = 1 / 2 * ( radius * radius ) ;	  
    area_of_triangle = 1 / 2 *				      }								      * Math . sin ( ( angle * Math . PI ) / 180 ) = 0 ;	  
	( radius * radius ) *				      								      return areaOfSector - areaOfTriangle ;			  
	math.sin ( ( angle * pi ) / 180 )		      								      ;								  
    return area_of_sector - area_of_triangle ;		      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM
--							      --							    --								  --
def findFlips ( str , n ) :				      static int findFlips ( String str , int n ) {		    public static int findFlips ( String str , int n ) {	  script_not_found : None
    last = ' '						      	char last = ' ' ;					      char last = ' ' ;						  
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( last != str [ i ] ) :			      	i < n ;							      i < n ;							  
	    res += 1					      	i ++ ) {						      i ++ ) {							  
	last = str [ i ]				      	  if ( last != str . charAt ( i ) ) res ++ ;		    	if ( ( last != str . charAt ( i ) ) && ( last != ' ' ) )  
    return res // 2					      	  last = str . charAt ( i ) ;				    	  res ++ ;						  
							      	}							    	}							  
							      	return res / 2 ;					    	last = str . charAt ( i ) ;				  
							      }								      }								  
							      								      return res / 2 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	      SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	    SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	  SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST
--							      --							    --								  --
def printSorted ( arr , start , end ) :			      private static void printSorted ( int [ ] arr , int start , i public static void printSorted ( int [ ] arr , int start , in script_not_found : None
    if start > end :					      	if ( start > end ) return ;				      if ( start > end ) return ;				  
	return						      	printSorted ( arr , start * 2 + 1 , end ) ;		      printSorted ( arr , start * 2 + 1 , end ) ;		  
    printSorted ( arr , start * 2 + 1 , end )		      	System . out . print ( arr [ start ] + " " ) ;		      System . out . print ( arr [ start ] + " " ) ;		  
    print ( arr [ start ] , end = " " )			      	printSorted ( arr , start * 2 + 2 , end ) ;		      printSorted ( arr , start * 2 + 2 , end ) ;		  
    printSorted ( arr , start * 2 + 2 , end )		      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
def findDigits ( n ) :					      static long findDigits ( int n ) {			    public static int findDigits ( double n ) {			  script_not_found : None
    if ( n < 0 ) :					      	if ( n < 0 ) return 0 ;					      if ( ( n < 0 ) || ( n <= 1 ) ) return 0 ;			  
	return 0					      	if ( n <= 1 ) return 1 ;				      double x = ( ( n * Math . log10 ( n / Math . e ) + Math . l 
    if ( n <= 1 ) :					      	double x = ( n * Math . log10 ( n / M_E ) + Math . log10 (    return Math . floor ( x ) + 1 ;				  
	return 1					      	return ( long ) Math . floor ( x ) + 1 ;		    }								  
    x = ( ( n * math.log10 ( n / math.e ) + math.log10 ( 2 *  }								    								  
    return math.floor ( x ) + 1				      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
def countP ( n , k ) :					      public static int countP ( int n , int k ) {		    public static int countP ( int n , int k ) {		  script_not_found : None
    if ( n == 0 or k == 0 or k > n ) :			      	if ( n == 0 || k == 0 || k > n ) return 0 ;		      if ( ( n == 0 ) || ( k == 0 ) || k > n ) return 0 ;	  
	return 0					      	if ( k == 1 || k == n ) return 1 ;			      if ( ( k == 1 ) || ( k == n ) ) return 1 ;		  
    if ( k == 1 or k == n ) :				      	return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1    return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1  
	return 1					      }								    }								  
    return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k -  								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING_1			      GENERATE_ROTATIONS_GIVEN_STRING_1				    GENERATE_ROTATIONS_GIVEN_STRING_1				  GENERATE_ROTATIONS_GIVEN_STRING_1
--							      --							    --								  --
def printRotatedString ( string ) :			      static void printRotatedString ( String str ) {		    public static void printRotatedString ( String string ) {	  script_not_found : None
    n = len ( string )					      	int n = str . length ( ) ;				      int n = string . length ( ) ;				  
    temp = string + string				      	StringBuffer sb = new StringBuffer ( str ) ;		      String temp = string + string ;				  
    for i in range ( n ) :				      	sb . append ( str ) ;					      for ( int i = 0 ;						  
	for j in range ( n ) :				      	for ( int i = 0 ;					      i < n ;							  
	    print ( temp [ i + j ] , end = "" )		      	i < n ;							      i ++ ) {							  
	print ( )					      	i ++ ) {						    	for ( int j = 0 ;					  
							      	  for ( int j = 0 ;					    	j < n ;							  
							      	  j != n ;						    	j ++ ) {						  
							      	  j ++ ) System . out . print ( sb . charAt ( i + j ) ) ;   	  System . out . print ( temp . charAt ( i + j ) + " " )  
							      	  System . out . println ( ) ;				    	}							  
							      	}							    	System . out . println ( ) ;				  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		      ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		    ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		  ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION
--							      --							    --								  --
def concatenate ( a , b , c , n1 , n2 ) :		      static void concatenate ( char a [ ] , char b [ ] , char c [  public static void concatenate ( double [ ] a , double [ ] b  script_not_found : None
    i = - 1						      	int i ;							      int i = - 1 ;						  
    for i in range ( n1 ) :				      	for ( i = 0 ;						      for ( i = 0 ;						  
	c [ i ] = a [ i ]				      	i < n1 ;						      i < n1 ;							  
    for j in range ( n2 ) :				      	i ++ ) {						      i ++ ) c [ i ] = a [ i ] ;				  
	c [ i ] = b [ j ]				      	  c [ i ] = a [ i ] ;					      for ( int j = 0 ;						  
	i += 1						      	}							      j < n2 ;							  
							      	for ( int j = 0 ;					      j ++ ) {							  
							      	j < n2 ;						    	c [ i ] = b [ j ] ;					  
							      	j ++ ) {						    	i ++ ;							  
							      	  c [ i ++ ] = b [ j ] ;				      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		      CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		    CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		  CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD
--							      --							    --								  --
def isPowerOfK ( n , k ) :				      static boolean isPowerOfK ( int n , int k ) {		    public static boolean isPowerOfK ( int n , int k ) {	  failure : #Results:4, 10
    oneSeen = False					      	boolean oneSeen = false ;				      boolean oneSeen = false ;					  
    while ( n > 0 ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) && ( n % k == 1 ) ) {			  
	digit = n % k					      	  int digit = n % k ;					    	int digit = n % k ;					  
	if ( digit > 1 ) :				      	  if ( digit > 1 ) return false ;			    	if ( ( digit > 1 ) || ( digit == 1 ) ) {		  
	    return False				      	  if ( digit == 1 ) {					    	  if ( ( oneSeen ) && ( n == 0 ) ) {			  
	if ( digit == 1 ) :				      	    if ( oneSeen ) return false ;			    	    return false ;					  
	    if ( oneSeen ) :				      	    oneSeen = true ;					    	  }							  
		return False				      	  }							    	  oneSeen = true ;					  
	    oneSeen = True				      	  n /= k ;						    	}							  
	n //= k						      	}							    	n /= k ;						  
    return True						      	return true ;						      }								  
							      }								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
def maxSum ( arr , n ) :				      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int [ ] arr , int n ) {		  failure : #Results:8, 10
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( 0 , int ( n / 2 ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum -= ( 2 * arr [ i ] )			      	i < n / 2 ;						      i <= ( int ) ( n / 2 ) ;					  
	sum += ( 2 * arr [ n - i - 1 ] )		      	i ++ ) {						      i ++ ) {							  
    return sum						      	  sum -= ( 2 * arr [ i ] ) ;				    	sum -= ( 2 * arr [ i ] ) ;				  
							      	  sum += ( 2 * arr [ n - i - 1 ] ) ;			    	sum += ( 2 * arr [ n - i - 1 ] ) ;			  
							      	}							      }								  
							      	return sum ;						      return sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		      COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		    COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS			  COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS
--							      --							    --								  --
def findCount ( str ) :					      static int findCount ( String str ) {			    public static int findCount ( String str ) {		  failure : #Results:4, 10
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( len ( str ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i  	i < str . length ( ) ;					      i < str . length ( ) ;					  
	    result += 1					      	i ++ ) {						      i ++ ) {							  
    return result					      	  if ( i == ( str . charAt ( i ) - 'a' ) || i == ( str . ch 	if ( ( ( i == Character . MAX_VALUE ) || ( i == Character 
							      	    result ++ ;						    	  result ++ ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return result ;						      return result ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1
--							      --							    --								  --
def difference ( arr , n ) :				      public static int difference ( int arr [ ] [ ] , int n ) {    public static int difference ( int [ ] [ ] arr , int n ) {	  error : Exception in thread "main" java.lang.Array
    d1 = 0						      	int d1 = 0 , d2 = 0 ;					      int d1 = 0 ;						  IndexOutOfBoundsException: Index -1 out of bounds
    d2 = 0						      	for ( int i = 0 ;					      int d2 = 0 ;						  for length 41 	at FIND_DIFFERENCE_BETWEEN_SUMS_OF_
    for i in range ( 0 , n ) :				      	i < n ;							      for ( int i = 0 ;						  TWO_DIAGONALS_1.f_filled(FIND_DIFFERENCE_BETWEEN_S
	d1 = d1 + arr [ i ] [ i ]			      	i ++ ) {						      i <= n ;							  UMS_OF_TWO_DIAGONALS_1.java:32) 	at FIND_DIFFERENC
	d2 = d2 + arr [ i ] [ n - i - 1 ]		      	  d1 += arr [ i ] [ i ] ;				      i ++ ) {							  E_BETWEEN_SUMS_OF_TWO_DIAGONALS_1.main(FIND_DIFFER
    return abs ( d1 - d2 )				      	  d2 += arr [ i ] [ n - i - 1 ] ;			    	d1 = d1 + arr [ i ] [ i ] ;				  ENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1.java:64)
							      	}							    	d2 = d2 + arr [ i ] [ n - i - 1 ] ;			  
							      	return Math . abs ( d1 - d2 ) ;				      }								  
							      }								      return Math . abs ( d1 - d2 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
def seiresSum ( n , a ) :				      static int seiresSum ( int n , int [ ] a ) {		    public static int seiresSum ( int n , int [ ] a ) {		  script_not_found : None
    res = 0						      	int res = 0 , i ;					      int res = 0 ;						  
    for i in range ( 0 , 2 * n ) :			      	for ( i = 0 ;						      for ( int i = 0 ;						  
	if ( i % 2 == 0 ) :				      	i < 2 * n ;						      i <= 2 * n ;						  
	    res += a [ i ] * a [ i ]			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( i % 2 == 0 ) res += a [ i ] * a [ i ] ;		    	if ( ( i % 2 == 0 ) && ( a [ i ] > 0 ) ) {		  
	    res -= a [ i ] * a [ i ]			      	  else res -= a [ i ] * a [ i ] ;			    	  res += a [ i ] * a [ i ] ;				  
    return res						      	}							    	}							  
							      	return res ;						    	else {							  
							      }								    	  res -= a [ i ] * a [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE_1				      C_PROGRAM_FIND_AREA_TRIANGLE_1				    C_PROGRAM_FIND_AREA_TRIANGLE_1				  C_PROGRAM_FIND_AREA_TRIANGLE_1
--							      --							    --								  --
def polygonArea ( X , Y , n ) :				      static double polygonArea ( double X [ ] , double Y [ ] , int public static double polygonArea ( double [ ] X , double [ ]  script_not_found : None
    area = 0.0						      	double area = 0.0 ;					      double area = 0.0 ;					  
    j = n - 1						      	int j = n - 1 ;						      int j = n - 1 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ 	i < n ;							      i <= n ;							  
	j = i						      	i ++ ) {						      i ++ ) {							  
    return abs ( area // 2.0 )				      	  area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] 
							      	  j = i ;						    	j = i ;							  
							      	}							      }								  
							      	return Math . abs ( area / 2.0 ) ;			      return Math . abs ( area / 2.0 ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
def sortString ( str , n ) :				      static String sortString ( String str , int n ) {		    public static String sortString ( String str , int n ) {	  script_not_found : None
    new_str = ""					      	String new_str = "" ;					      String newStr = "" ;					  
    for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	      	for ( int i = 'a' ;					      for ( int i = Character . MIN_VALUE ;			  
	for j in range ( n ) :				      	i <= 'z' ;						      i <= Character . MAX_VALUE ;				  
	    if ( str [ j ] == chr ( i ) ) :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		new_str += str [ j ]			      	j < n ;							    	for ( int j = 0 ;					  
    return new_str					      	j ++ ) if ( str . charAt ( j ) == i ) new_str += str . char 	j < n ;							  
							      	return new_str ;					    	j ++ ) {						  
							      }								    	  if ( ( str . charAt ( j ) == ( char ) i ) ) {		  
							      								    	    newStr += str . charAt ( j ) ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return newStr ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
def countWays ( n , k ) :				      static long countWays ( int n , int k ) {			    public static int countWays ( int n , int k ) {		  success : None
    total = k						      	long total = k ;					      int total = k ;						  
    mod = 1000000007					      	int mod = 1000000007 ;					      int mod = 1000000007 ;					  
    same , diff = 0 , k					      	int same = 0 , diff = k ;				      int same = 0 , diff = k ;					  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	same = diff					      	i <= n ;						      i <= n ;							  
	diff = total * ( k - 1 )			      	i ++ ) {						      i ++ ) {							  
	diff = diff % mod				      	  same = diff ;						    	same = diff ;						  
	total = ( same + diff ) % mod			      	  diff = ( int ) total * ( k - 1 ) ;			    	diff = total * ( k - 1 ) ;				  
    return total					      	  diff = diff % mod ;					    	diff = diff % mod ;					  
							      	  total = ( same + diff ) % mod ;			    	total = ( same + diff ) % mod ;				  
							      	}							      }								  
							      	return total ;						      return total ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION
--							      --							    --								  --
def pow ( a , b ) :					      static int pow ( int a , int b ) {			    public static double pow ( double a , int b ) {		  failure : #Results:0, 10
    if ( b == 0 ) :					      	if ( b == 0 ) return 1 ;				      if ( ( b == 0 ) || ( b == 1 ) ) return 1 ;		  
	return 1					      	int answer = a ;					      double answer = a ;					  
    answer = a						      	int increment = a ;					      double increment = a ;					  
    increment = a					      	int i , j ;						      for ( int i = 1 ;						  
    for i in range ( 1 , b ) :				      	for ( i = 1 ;						      i <= b ;							  
	for j in range ( 1 , a ) :			      	i < b ;							      i ++ ) {							  
	    answer += increment				      	i ++ ) {						    	for ( int j = 1 ;					  
	increment = answer				      	  for ( j = 1 ;						    	j <= a ;						  
    return answer					      	  j < a ;						    	j ++ ) {						  
							      	  j ++ ) {						    	  answer += increment ;					  
							      	    answer += increment ;				    	}							  
							      	  }							    	increment = answer ;					  
							      	  increment = answer ;					      }								  
							      	}							      return answer ;						  
							      	return answer ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		      FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		    FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		  FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY
--							      --							    --								  --
def findSum ( arr , n ) :				      static int findSum ( int arr [ ] , int n ) {		    public static int findSum ( int [ ] arr , int n ) {		  success : None
    s = set ( )						      	int sum = 0 ;						      Set < Integer > s = new HashSet < Integer > ( ) ;		  
    sum = 0						      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      int sum = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] not in s :				      	i < n ;							      i < n ;							  
	    s.add ( arr [ i ] )				      	i ++ ) {						      i ++ ) {							  
    for i in s :					      	  if ( ! s . contains ( arr [ i ] ) ) {			    	if ( arr [ i ] != 0 ) {					  
	sum = sum + i					      	    sum += arr [ i ] ;					    	  s . add ( arr [ i ] ) ;				  
    return sum						      	    s . add ( arr [ i ] ) ;				    	}							  
							      	  }							      }								  
							      	}							      for ( int i : s ) {					  
							      	return sum ;						    	sum = sum + i ;						  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX				      PROGRAM_PRINT_IDENTITY_MATRIX				    PROGRAM_PRINT_IDENTITY_MATRIX				  PROGRAM_PRINT_IDENTITY_MATRIX
--							      --							    --								  --
def Identity ( size ) :					      static int identity ( int num ) {				    public static void Identity ( int size ) {			  script_not_found : None
    for row in range ( 0 , size ) :			      	int row , col ;						      for ( int row = 0 ;					  
	for col in range ( 0 , size ) :			      	for ( row = 0 ;						      row <= size ;						  
	    if ( row == col ) :				      	row < num ;						      row ++ ) {						  
		print ( "1 " , end = " " )		      	row ++ ) {						    	for ( int col = 0 ;					  
	    else :					      	  for ( col = 0 ;					    	col <= size ;						  
		print ( "0 " , end = " " )		      	  col < num ;						    	col ++ ) {						  
	print ( )					      	  col ++ ) {						    	  if ( ( row == col ) && ( row != col ) ) {		  
							      	    if ( row == col ) System . out . print ( 1 + " " ) ;    	    System . out . print ( "1 " ) ;			  
							      	    else System . out . print ( 0 + " " ) ;		    	  }							  
							      	  }							    	  else {						  
							      	  System . out . println ( ) ;				    	    System . out . print ( "0 " ) ;			  
							      	}							    	  }							  
							      	return 0 ;						    	}							  
							      }								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
def interchangeFirstLast ( mat , n , m ) :		      static void interchangeFirstLast ( int m [ ] [ ] ) {	    public static void interchangeFirstLast ( double [ ] [ ] mat  script_not_found : None
    rows = n						      	int rows = m . length ;					      int rows = n ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	t = mat [ 0 ] [ i ]				      	i < m [ 0 ] . length ;					      i < n ;							  
	mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]	      	i ++ ) {						      i ++ ) {							  
	mat [ rows - 1 ] [ i ] = t			      	  int t = m [ 0 ] [ i ] ;				    	double t = mat [ 0 ] [ i ] ;				  
							      	  m [ 0 ] [ i ] = m [ rows - 1 ] [ i ] ;		    	mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ] ;		  
							      	  m [ rows - 1 ] [ i ] = t ;				    	mat [ rows - 1 ] [ i ] = t ;				  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			      DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			    DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			  DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE
--							      --							    --								  --
def count ( S , m , n ) :				      static int count ( int S [ ] , int m , int n ) {		    public static int count ( int [ ] S , int m , int n ) {	  script_not_found : None
    if ( n == 0 ) :					      	if ( n == 0 ) return 1 ;				      if ( ( n == 0 ) && ( m > 0 ) ) return 1 ;			  
	return 1					      	if ( n < 0 ) return 0 ;					      if ( ( n < 0 ) && ( m > 0 ) ) return 0 ;			  
    if ( n < 0 ) :					      	if ( m <= 0 && n >= 1 ) return 0 ;			      if ( ( m <= 0 && n >= 1 ) && ( n >= 0 ) ) return 0 ;	  
	return 0					      	return count ( S , m - 1 , n ) + count ( S , m , n - S [ m    return count ( S , m - 1 , n ) + count ( S , m , n - S [ m  
    if ( m <= 0 and n >= 1 ) :				      }								    								  
	return 0					      								    								  
    return count ( S , m - 1 , n ) + count ( S , m , n - S [  								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_EQUAL_PAIRS_STRING				      NUMBER_EQUAL_PAIRS_STRING					    NUMBER_EQUAL_PAIRS_STRING					  NUMBER_EQUAL_PAIRS_STRING
--							      --							    --								  --
def countPairs ( s ) :					      static int countPairs ( String s ) {			    public static int countPairs ( String s ) {			  script_not_found : None
    cnt = [ 0 for i in range ( 0 , MAX ) ]		      	int cnt [ ] = new int [ MAX ] ;				      int [ ] cnt = new int [ MAX ] ;				  
    for i in range ( len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	cnt [ ord ( s [ i ] ) - 97 ] += 1		      	i < s . length ( ) ;					      i <= MAX ;						  
    ans = 0						      	i ++ ) cnt [ s . charAt ( i ) ] ++ ;			      i ++ ) {							  
    for i in range ( 0 , MAX ) :			      	int ans = 0 ;						    	cnt [ ( char ) s . charAt ( i ) - 97 ] ++ ;		  
	ans += cnt [ i ] * cnt [ i ]			      	for ( int i = 0 ;					      }								  
    return ans						      	i < MAX ;						      int ans = 0 ;						  
							      	i ++ ) ans += cnt [ i ] * cnt [ i ] ;			      for ( int i = 0 ;						  
							      	return ans ;						      i <= MAX ;						  
							      }								      i ++ ) {							  
							      								    	ans += cnt [ i ] * cnt [ i ] ;				  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
def power ( x , y ) :					      static float power ( float x , int y ) {			    public static double power ( double x , double y ) {	  script_not_found : None
    if ( y == 0 ) : return 1				      	float temp ;						      if ( ( y == 0 ) || ( y == 1 ) ) return 1 ;		  
    temp = power ( x , int ( y / 2 ) )			      	if ( y == 0 ) return 1 ;				      double temp = power ( x , ( int ) ( y / 2 ) ) ;		  
    if ( y % 2 == 0 ) :					      	temp = power ( x , y / 2 ) ;				      if ( ( y % 2 == 0 ) ) return temp * temp ;		  
	return temp * temp				      	if ( y % 2 == 0 ) return temp * temp ;			      else {							  
    else :						      	else {							    	if ( ( y > 0 ) && ( y > 1 ) ) return x * temp * temp ;	  
	if ( y > 0 ) : return x * temp * temp		      	  if ( y > 0 ) return x * temp * temp ;			    	else return ( temp * temp ) / x ;			  
	else : return ( temp * temp ) / x		      	  else return ( temp * temp ) / x ;			      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1
--							      --							    --								  --
def findInteger ( arr , n ) :				      static int findInteger ( int arr [ ] , int n ) {		    public static int findInteger ( int [ ] arr , int n ) {	  failure : #Results:3, 10
    neg = 0						      	int neg = 0 , pos = 0 ;					      int neg = 0 ;						  
    pos = 0						      	int sum = 0 ;						      int pos = 0 ;						  
    sum = 0						      	for ( int i = 0 ;					      int sum = 0 ;						  
    for i in range ( 0 , n ) :				      	i < n ;							      for ( int i = 0 ;						  
	sum += arr [ i ]				      	i ++ ) {						      i <= n ;							  
	if ( arr [ i ] < 0 ) :				      	  sum += arr [ i ] ;					      i ++ ) {							  
	    neg += 1					      	  if ( arr [ i ] < 0 ) neg ++ ;				    	sum += arr [ i ] ;					  
	else :						      	  else pos ++ ;						    	if ( ( arr [ i ] < 0 ) && ( arr [ i ] > 0 ) ) neg ++ ;	  
	    pos += 1					      	}							    	else pos ++ ;						  
    return ( sum / abs ( neg - pos ) )			      	return ( sum / Math . abs ( neg - pos ) ) ;		      }								  
							      }								      return ( sum / Math . abs ( neg - pos ) ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
def countDer ( n ) :					      static int countDer ( int n ) {				    public static int countDer ( int n ) {			  script_not_found : None
    if ( n == 1 ) : return 0				      	if ( n == 1 ) return 0 ;				      if ( ( n == 1 ) || ( n == 0 ) ) return 0 ;		  
    if ( n == 0 ) : return 1				      	if ( n == 0 ) return 1 ;				      if ( ( n == 2 ) || ( n == 1 ) ) return 1 ;		  
    if ( n == 2 ) : return 1				      	if ( n == 2 ) return 1 ;				      return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2  
    return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  	return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2  }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES
--							      --							    --								  --
def maxvolume ( s ) :					      static int maxvolume ( int s ) {				    public static double maxvolume ( int s ) {			  success : None
    maxvalue = 0					      	int maxvalue = 0 ;					      double maxvalue = 0 ;					  
    i = 1						      	for ( int i = 1 ;					      int i ;							  
    for i in range ( s - 1 ) :				      	i <= s - 2 ;						      for ( i = 0 ;						  
	j = 1						      	i ++ ) {						      i < s - 1 ;						  
	for j in range ( s ) :				      	  for ( int j = 1 ;					      i ++ ) {							  
	    k = s - i - j				      	  j <= s - 1 ;						    	int j ;							  
	    maxvalue = max ( maxvalue , i * j * k )	      	  j ++ ) {						    	for ( j = 0 ;						  
    return maxvalue					      	    int k = s - i - j ;					    	j < s ;							  
							      	    maxvalue = Math . max ( maxvalue , i * j * k ) ;	    	j ++ ) {						  
							      	  }							    	  int k = s - i - j ;					  
							      	}							    	  maxvalue = Math . max ( maxvalue , i * j * k ) ;	  
							      	return maxvalue ;					    	}							  
							      }								      }								  
							      								      return maxvalue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_SPARSE_NOT				      CHECK_GIVEN_MATRIX_SPARSE_NOT				    CHECK_GIVEN_MATRIX_SPARSE_NOT				  CHECK_GIVEN_MATRIX_SPARSE_NOT
--							      --							    --								  --
def isSparse ( array , m , n ) :			      static boolean isSparse ( int array [ ] [ ] , int m , int n ) public static boolean isSparse ( int [ ] [ ] array , int m ,  error : CHECK_GIVEN_MATRIX_SPARSE_NOT.java:37: err
    counter = 0						      	int counter = 0 ;					      int counter = 0 ;						  or: ')' expected   return ( counter > ( ( m
    for i in range ( 0 , m ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  		      ^ CHECK_GIVEN_MATRIX_SPARSE_NO
	for j in range ( 0 , n ) :			      	i < m ;							      i <= m ;							  T.java:39: error: illegal start of expression publ
	    if ( array [ i ] [ j ] == 0 ) :		      	++ i ) for ( int j = 0 ;				      i ++ ) {							  ic static void main(String args[]) { ^ 2 errors
		counter = counter + 1			      	j < n ;							    	for ( int j = 0 ;					  
    return ( counter > ( ( m * n ) // 2 ) )		      	++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;	    	j <= n ;						  
							      	return ( counter > ( ( m * n ) / 2 ) ) ;		    	j ++ ) {						  
							      }								    	  if ( ( array [ i ] [ j ] == 0 ) && ( array [ i ] [ j ]  
							      								    	    counter = counter + 1 ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
-							      -								      return ( counter > ( ( m-					  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
def countLattice ( r ) :				      static int countLattice ( int r ) {			    public static int countLattice ( int r ) {			  error : CIRCLE_LATTICE_POINTS.java:38: error: not
    if ( r <= 0 ) :					      	if ( r <= 0 ) return 0 ;				      if ( ( r <= 0 ) || ( r > r ) ) {				  a statement	    result	 ^ CIRCLE_LATTICE_PO
	return 0					      	int result = 4 ;					    	return 0 ;						  INTS.java:38: error: ';' expected	  result
    result = 4						      	for ( int x = 1 ;					      }								  	   ^ CIRCLE_LATTICE_POINTS.java:40: error: i
    for x in range ( 1 , r ) :				      	x < r ;							      int result = 4 ;						  llegal start of expression public static void main
	ySquare = r * r - x * x				      	x ++ ) {						      for ( int x = 1 ;						  (String args[]) { ^ 3 errors
	y = int ( math.sqrt ( ySquare ) )		      	  int ySquare = r * r - x * x ;				      x < r ;							  
	if ( y * y == ySquare ) :			      	  int y = ( int ) Math . sqrt ( ySquare ) ;		      x ++ ) {							  
	    result += 4					      	  if ( y * y == ySquare ) result += 4 ;			    	int ySquare = r * r - x * x ;				  
    return result					      	}							    	int y = ( int ) Math . sqrt ( ySquare ) ;		  
							      	return result ;						    	if ( ( y * y == ySquare ) && ( y * y == ySquare ) ) {	  
							      }								    	  result						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME     MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	    MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	  MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME
--							      --							    --								  --
def maxRemoval ( arr , n ) :				      static int maxRemoval ( int arr [ ] , int n ) {		    public static int maxRemoval ( int [ ] arr , int n ) {	  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    cummulative_sum = 0					      	int cummulative_sum = 0 ;				      int cummulativeSum = 0 ;					  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] >= cummulative_sum :		      	i < n ;							      i < n ;							  
	    count += 1					      	i ++ ) {						      i ++ ) {							  
	    cummulative_sum += arr [ i ]		      	  if ( arr [ i ] >= cummulative_sum ) {			    	if ( arr [ i ] >= cummulativeSum ) {			  
    return count					      	    count ++ ;						    	  count ++ ;						  
							      	    cummulative_sum += arr [ i ] ;			    	  cummulativeSum += arr [ i ] ;				  
							      	  }							    	}							  
							      	}							      }								  
							      	return count ;						      return count ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
def countSubStr ( st , n ) :				      int countSubStr ( char str [ ] , int n ) {		    public static int countSubStr ( String st , int n ) {	  script_not_found : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( st [ i ] == '1' ) :			      	i < n ;							      i <= n ;							  
	    for j in range ( i + 1 , n ) :		      	i ++ ) {						      i ++ ) {							  
		if ( st [ j ] == '1' ) :		      	  if ( str [ i ] == '1' ) {				    	if ( ( st . charAt ( i ) == '1' ) && ( st . charAt ( i +  
		    res = res + 1			      	    for ( int j = i + 1 ;				    	  for ( int j = i + 1 ;					  
    return res						      	    j < n ;						    	  j < n ;						  
							      	    j ++ ) {						    	  j ++ ) {						  
							      	      if ( str [ j ] == '1' ) res ++ ;			    	    if ( ( st . charAt ( j ) == '1' ) && ( st . charAt (  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1		      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1
--							      --							    --								  --
def gcdExtended ( a , b , x , y ) :			      public static int gcdExtended ( int a , int b , int x , int y public static int gcdExtended ( int a , int b , int x , int y success : None
    if a == 0 :						      	if ( a == 0 ) {						      if ( a == 0 ) {						  
	x = 0						      	  x = 0 ;						    	x = 0 ;							  
	y = 1						      	  y = 1 ;						    	y = 1 ;							  
	return b					      	  return b ;						    	return b ;						  
    x1 = 1						      	}							      }								  
    y1 = 1						      	int x1 = 1 , y1 = 1 ;					      int x1 = 1 ;						  
    gcd = gcdExtended ( b % a , a , x1 , y1 )		      	int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;		      int y1 = 1 ;						  
    x = y1 - ( b / a ) * x1				      	x = y1 - ( b / a ) * x1 ;				      int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;		  
    y = x1						      	y = x1 ;						      x = y1 - ( b / a ) * x1 ;					  
    return gcd						      	return gcd ;						      y = x1 ;							  
							      }								      return gcd ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE
--							      --							    --								  --
def checkCount ( arr , n , k ) :			      static boolean checkCount ( int [ ] arr , int n , int k ) {   public static boolean checkCount ( int [ ] arr , int n , int  success : None
    for i in range ( n ) :				      	int count ;						      for ( int i = 0 ;						  
	count = 0					      	for ( int i = 0 ;					      i < n ;							  
	for j in range ( n ) :				      	i < n ;							      i ++ ) {							  
	    if arr [ j ] == arr [ i ] :			      	i ++ ) {						    	int count = 0 ;						  
		count += 1				      	  count = 0 ;						    	for ( int j = 0 ;					  
	    if count > 2 * k :				      	  for ( int j = 0 ;					    	j < n ;							  
		return False				      	  j < n ;						    	j ++ ) {						  
    return True						      	  j ++ ) {						    	  if ( arr [ j ] == arr [ i ] ) {			  
							      	    if ( arr [ j ] == arr [ i ] ) count ++ ;		    	    count ++ ;						  
							      	    if ( count > 2 * k ) return false ;			    	  }							  
							      	  }							    	  if ( count > 2 * k ) {				  
							      	}							    	    return false ;					  
							      	return true ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES			  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES
--							      --							    --								  --
def reorder ( arr , index , n ) :			      static void reorder ( ) {					    public static void reorder ( int [ ] arr , int [ ] index , in script_not_found : None
    temp = [ 0 ] * n					      	int temp [ ] = new int [ arr . length ] ;		      int [ ] temp = new int [ n ] ;				  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	temp [ index [ i ] ] = arr [ i ]		      	i < arr . length ;					      i <= n ;							  
    for i in range ( 0 , n ) :				      	i ++ ) temp [ index [ i ] ] = arr [ i ] ;		      i ++ ) {							  
	arr [ i ] = temp [ i ]				      	for ( int i = 0 ;					    	temp [ index [ i ] ] = arr [ i ] ;			  
	index [ i ] = i					      	i < arr . length ;					      }								  
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  arr [ i ] = temp [ i ] ;				      i <= n ;							  
							      	  index [ i ] = i ;					      i ++ ) {							  
							      	}							    	arr [ i ] = temp [ i ] ;				  
							      }								    	index [ i ] = i ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
def check ( st ) :					      static boolean check ( String str ) {			    public static boolean check ( String st ) {			  error : CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT.java:35
    n = len ( st )					      	int n = str . length ( ) ;				      int n = st . length ( ) ;					  : error: '.class' expected public static void main
    if ( ( ( int ) ( st [ n - 1 ] ) % 2 ) != 0 ) :	      	if ( ( str . charAt ( n - 1 ) - '0' ) % 2 != 0 ) return fal   if ( ( ( ( int ) ( st . charAt ( n - 1 ) ) % 2 ) != 0 ) &&  (String args[]) { ^ 1 error
	return False					      	int digitSum = 0 ;					    	return false ;						  
    digitSum = 0					      	for ( int i = 0 ;					      }								  
    for i in range ( 0 , n ) :				      	i < n ;							      int digitSum = 0 ;					  
	digitSum = digitSum + ( int ) ( st [ i ] )	      	i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      for ( int i = 0 ;						  
    return ( digitSum % 3 == 0 )			      	return ( digitSum % 3 == 0 ) ;				      i <= n ;							  
							      }								      i ++ ) {							  
-							      -								    	digitSum = digitSum + ( int-				  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	      BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		    BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		  BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS
--							      --							    --								  --
def nextfit ( weight , c ) :				      static int nextFit ( int weight [ ] , int n , int c ) {	    public static int nextfit ( int [ ] weight , int c ) {	  error : BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USE
    res = 0						      	int res = 0 , bin_rem = c ;				      int res = 0 ;						  D_BINS.java:83: error: method f_filled in class BI
    rem = c						      	for ( int i = 0 ;					      int rem = c ;						  N_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS can
    for _ in range ( len ( weight ) ) :			      	i < n ;							      for ( ;							  not be applied to given types;	 if(f_filled
	if rem >= weight [ _ ] :			      	i ++ ) {						      ;								  (param0.get(i),param1.get(i),param2.get(i)) == f_g
	    rem = rem - weight [ _ ]			      	  if ( weight [ i ] > bin_rem ) {			      ) {							  old(param0.get(i),param1.get(i),param2.get(i)))
	else :						      	    res ++ ;						    	if ( rem >= weight [ weight . length - 1 ] ) {		  	   ^   required: int[],int   found: int[],In
	    res += 1					      	    bin_rem = c - weight [ i ] ;			    	  rem = rem - weight [ weight . length - 1 ] ;		  teger,Integer	  reason: actual and formal argument
	    rem = c - weight [ _ ]			      	  }							    	}							   lists differ in length 1 error
    return res						      	  else bin_rem -= weight [ i ] ;			    	else {							  
							      	}							    	  res ++ ;						  
							      	return res ;						    	  rem = c - weight [ weight . length - 1 ] ;		  
							      }								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_ARRAY_REVERSE_AROUND_MIDDLE			      SORTING_ARRAY_REVERSE_AROUND_MIDDLE			    SORTING_ARRAY_REVERSE_AROUND_MIDDLE				  SORTING_ARRAY_REVERSE_AROUND_MIDDLE
--							      --							    --								  --
def ifPossible ( arr , n ) :				      static boolean ifPossible ( int arr [ ] , int n ) {	    public static boolean ifPossible ( int [ ] arr , int n ) {	  script_not_found : None
    cp = [ 0 ] * n					      	int copy [ ] = Arrays . copyOf ( arr , arr . length ) ;	      int [ ] cp = {						  
    cp = arr						      	Arrays . sort ( copy ) ;				    	0 }							  
    cp.sort ( )						      	for ( int i = 0 ;					    	;							  
    for i in range ( 0 , n ) :				      	i < n ;							    	cp = arr ;						  
	if ( not ( arr [ i ] == cp [ i ] ) and not ( arr [ n  	i ++ ) {						    	Arrays . sort ( cp ) ;					  
	    return False				      	  if ( ! ( arr [ i ] == copy [ i ] ) && ! ( arr [ n - 1 - i 	for ( int i = 0 ;					  
    return True						      	}							    	i <= n ;						  
							      	return true ;						    	i ++ ) {						  
							      }								    	  if ( ( ! ( arr [ i ] == cp [ i ] ) && ! ( arr [ n - 1 - 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_OCTAL_CONVERSION			      PROGRAM_DECIMAL_OCTAL_CONVERSION				    PROGRAM_DECIMAL_OCTAL_CONVERSION				  PROGRAM_DECIMAL_OCTAL_CONVERSION
--							      --							    --								  --
def decToOctal ( n ) :					      static void decToOctal ( int n ) {			    public static void decToOctal ( int n ) {			  script_not_found : None
    octalNum = [ 0 ] * 100				      	int [ ] octalNum = new int [ 100 ] ;			      int [ ] octalNum = new int [ 100 ] ;			  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( n != 0 ) :					      	while ( n != 0 ) {					      while ( ( n != 0 ) && ( n % 8 == 0 ) ) {			  
	octalNum [ i ] = n % 8				      	  octalNum [ i ] = n % 8 ;				    	octalNum [ i ] = n % 8 ;				  
	n = int ( n / 8 )				      	  n = n / 8 ;						    	n = ( int ) ( n / 8 ) ;					  
	i += 1						      	  i ++ ;						    	i ++ ;							  
    for j in range ( i - 1 , - 1 , - 1 ) :		      	}							      }								  
	print ( octalNum [ j ] , end = "" )		      	for ( int j = i - 1 ;					      for ( int j = i - 1 ;					  
							      	j >= 0 ;						      j >= 0 ;							  
							      	j -- ) System . out . print ( octalNum [ j ] ) ;	      j -- ) {							  
							      }								    	System . out . print ( octal				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
def lexNext ( s , n ) :					      static String lexNext ( String str , int n ) {		    public static String lexNext ( char [ ] s , int n ) {	  script_not_found : None
    for i in range ( n - 1 , - 1 , - 1 ) :		      	char [ ] s = str . toCharArray ( ) ;			      for ( int i = n - 1 ;					  
	if s [ i ] != 'z' :				      	for ( int i = n - 1 ;					      i >= 0 ;							  
	    k = ord ( s [ i ] )				      	i >= 0 ;						      i -- ) {							  
	    s [ i ] = chr ( k + 1 )			      	i -- ) {						    	if ( s [ i ] != 'z' ) {					  
	    return ''.join ( s )			      	  if ( s [ i ] != 'z' ) {				    	  int k = ( int ) s [ i ] ;				  
	s [ i ] = 'a'					      	    s [ i ] ++ ;					    	  s [ i ] = ( char ) ( k + 1 ) ;			  
							      	    return String . valueOf ( s ) ;			    	  return new String ( s , 0 , i ) ;			  
							      	  }							    	}							  
							      	  s [ i ] = 'a' ;					    	s [ i ] = 'a' ;						  
							      	}							      }								  
							      	return null ;						      return null ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
def ceilSearch ( arr , low , high , x ) :		      static int ceilSearch ( int arr [ ] , int low , int high , in public static int ceilSearch ( int [ ] arr , int low , int hi success : None
    if x <= arr [ low ] :				      	int i ;							      if ( x <= arr [ low ] ) return low ;			  
	return low					      	if ( x <= arr [ low ] ) return low ;			      int i ;							  
    i = low						      	for ( i = low ;						      for ( i = low ;						  
    for i in range ( high ) :				      	i < high ;						      i < high ;						  
	if arr [ i ] == x :				      	i ++ ) {						      i ++ ) {							  
	    return i					      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
	if arr [ i ] < x and arr [ i + 1 ] >= x :	      	  if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; 	if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; 
	    return i + 1				      	}							      }								  
    return - 1						      	return - 1 ;						      return - 1 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2
--							      --							    --								  --
def minSum ( a , n ) :					      static int minSum ( int a [ ] , int n ) {			    public static int minSum ( int [ ] a , int n ) {		  success : None
    a = sorted ( a )					      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
    num1 , num2 = 0 , 0					      	int num1 = 0 ;						      int num1 = 0 , num2 = 0 ;					  
    for i in range ( n ) :				      	int num2 = 0 ;						      for ( int i = 0 ;						  
	if i % 2 == 0 :					      	for ( int i = 0 ;					      i < n ;							  
	    num1 = num1 * 10 + a [ i ]			      	i < n ;							      i ++ ) {							  
	else :						      	i ++ ) {						    	if ( i % 2 == 0 ) num1 = num1 * 10 + a [ i ] ;		  
	    num2 = num2 * 10 + a [ i ]			      	  if ( i % 2 == 0 ) num1 = num1 * 10 + a [ i ] ;	    	else num2 = num2 * 10 + a [ i ] ;			  
    return num2 + num1					      	  else num2 = num2 * 10 + a [ i ] ;			      }								  
							      	}							      return num2 + num1 ;					  
							      	return num2 + num1 ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			      FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			    FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			  FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE
--							      --							    --								  --
def dayofweek ( d , m , y ) :				      static int dayofweek ( int d , int m , int y ) {		    public static int dayofweek ( int d , int m , int y ) {	  script_not_found : None
    t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]     	int t [ ] = {						      int [ ] t = {						  
    y -= m < 3						      	  0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 }	    	0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 }		  
    return ( ( y + int ( y / 4 ) - int ( y / 100 ) + int ( y  	  ;							    	;							  
							      	  y -= ( m < 3 ) ? 1 : 0 ;				    	y -= m < 3 ? 1 : 0 ;					  
							      	  return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  	return ( ( y + Integer . MIN_VALUE / 4 ) - Integer . MIN_ 
							      	}							      }								  
-							      	-							      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ALTERNATIVE_SORTING					      ALTERNATIVE_SORTING					    ALTERNATIVE_SORTING						  ALTERNATIVE_SORTING
--							      --							    --								  --
def alternateSort ( arr , n ) :				      static void alternateSort ( int arr [ ] , int n ) {	    public static void alternateSort ( int [ ] arr , int n ) {	  script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    i = 0						      	int i = 0 , j = n - 1 ;					      int i = 0 ;						  
    j = n - 1						      	while ( i < j ) {					      int j = n - 1 ;						  
    while ( i < j ) :					      	  System . out . print ( arr [ j -- ] + " " ) ;		      while ( ( i < j ) && ( i < n ) ) {			  
	print ( arr [ j ] , end = " " )			      	  System . out . print ( arr [ i ++ ] + " " ) ;		    	System . out . print ( arr [ j ] + " " ) ;		  
	j -= 1						      	}							    	j -- ;							  
	print ( arr [ i ] , end = " " )			      	if ( n % 2 != 0 ) System . out . print ( arr [ i ] ) ;	    	System . out . print ( arr [ i ] + " " ) ;		  
	i += 1						      }								    	i ++ ;							  
    if ( n % 2 != 0 ) :					      								      }								  
	print ( arr [ i ] )				      								      if ( ( n % 2 != 0 ) &&					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT     DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	    DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT
--							      --							    --								  --
def maxProd ( n ) :					      static int maxProd ( int n ) {				    static int maxProd ( int n ) {				  script_not_found : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return 0 ;			      if ( ( n == 0 || n == 1 ) && ( n > 0 ) ) return 0 ;	  
	return 0					      	int max_val = 0 ;					      int maxVal = 0 ;						  
    max_val = 0						      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    for i in range ( 1 , n - 1 ) :			      	i < n ;							      i <= n - 1 ;						  
	max_val = max ( max_val , max ( i * ( n - i ) , maxPr 	i ++ ) max_val = Math . max ( max_val , Math . max ( i * (    i ++ ) maxVal = Math . max ( maxVal , Math . max ( i * ( n  
    return max_val					      	return max_val ;					      return maxVal ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
