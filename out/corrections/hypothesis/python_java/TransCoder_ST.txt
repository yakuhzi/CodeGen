========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
def areaSquare ( side ) :				      static int areaSquare ( int side ) {			    public static double areaSquare ( double side ) {		  success : None
    area = side * side					      	int area = side * side ;				      double area = side * side ;				  
    return area						      	return area ;						      return area ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
def fun ( n ) :						      static int fun ( int n ) {				    public static int fun ( int n ) {				  success : None
    return n & ( n - 1 )				      	return n & ( n - 1 ) ;					      return n & ( n - 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
def intersection ( n ) :				      static int intersection ( int n ) {			    public static int intersection ( int n ) {			  success : None
    return n * ( n - 1 )				      	return n * ( n - 1 ) ;					      return n * ( n - 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
def hexagonalNum ( n ) :				      int hexagonalNum ( int n ) {				    public static int hexagonalNum ( int n ) {			  success : None
    return n * ( 2 * n - 1 )				      	return n * ( 2 * n - 1 ) ;				      return n * ( 2 * n - 1 ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CASSINIS_IDENTITY					      CASSINIS_IDENTITY						    CASSINIS_IDENTITY						  CASSINIS_IDENTITY
--							      --							    --								  --
def cassini ( n ) :					      static int cassini ( int n ) {				    public static int cassini ( int n ) {			  success : None
    return - 1 if ( n & 1 ) else 1			      	return ( n & 1 ) != 0 ? - 1 : 1 ;			      return ( n & 1 ) != 0 ? - 1 : 1 ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
def addOne ( x ) :					      static int addOne ( int x ) {				    public static final int addOne ( int x ) {			  success : None
    return ( - ( ~ x ) )				      	return ( - ( ~ x ) ) ;					      return ( - ( ~ x ) ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_HALVES_SORTED				      SORT_ARRAY_TWO_HALVES_SORTED				    SORT_ARRAY_TWO_HALVES_SORTED				  SORT_ARRAY_TWO_HALVES_SORTED
--							      --							    --								  --
def mergeTwoHalf ( A , n ) :				      static void mergeTwoHalf ( int [ ] A , int n ) {		    public static void mergeTwoHalf ( int [ ] A , int n ) {	  success : None
    A.sort ( )						      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUMSCRIBED_CIRCLE			      AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				    AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				  AREA_SQUARE_CIRCUMSCRIBED_CIRCLE
--							      --							    --								  --
def find_Area ( r ) :					      static int find_Area ( int r ) {				    public static double findArea ( double r ) {		  success : None
    return ( 2 * r * r )				      	return ( 2 * r * r ) ;					      return ( 2 * r * r ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
def check ( n ) :					      static boolean check ( int n ) {				    public static boolean check ( int n ) {			  success : None
    return 1162261467 % n == 0				      	return 1162261467 % n == 0 ;				      return 1162261467 % n == 0 ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
def isEven ( n ) :					      public static boolean isEven ( int n ) {			    public static boolean isEven ( int n ) {			  success : identical to gold
    return ( n % 2 == 0 )				      	return ( n % 2 == 0 ) ;					      return ( n % 2 == 0 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
def pentagonalNum ( n ) :				      int pentagonalNum ( int n ) {				    public static double pentagonalNum ( double n ) {		  success : None
    return ( 3 * n * n - n ) / 2			      	return ( 3 * n * n - n ) / 2 ;				      return ( 3 * n * n - n ) / 2 ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
def circumference ( r ) :				      static double circumference ( double r ) {		    public static double circumference ( double r ) {		  success : None
    return ( 2 * PI * r )				      	double PI = 3.1415 ;					      return ( 2 * Math . PI * r ) ;				  
							      	double cir = 2 * PI * r ;				    }								  
							      	return cir ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
def numberOfSticks ( x ) :				      public static int numberOfSticks ( int x ) {		    public static int numberOfSticks ( int x ) {		  success : identical to gold
    return ( 3 * x * ( x + 1 ) ) / 2			      	return ( 3 * x * ( x + 1 ) ) / 2 ;			      return ( 3 * x * ( x + 1 ) ) / 2 ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def binomialCoeffSum ( n ) :				      static int binomialCoeffSum ( int n ) {			    public static int binomialCoeffSum ( int n ) {		  success : None
    return ( 1 << n )					      	return ( 1 << n ) ;					      return ( 1 << n ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
def largest ( arr , n ) :				      static int largest ( int [ ] arr , int n ) {		    public static int largest ( int [ ] arr , int n ) {		  error : C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1.jav
    return max ( arr )					      	Arrays . sort ( arr ) ;					      return Math . max ( arr , n ) ;				  a:20: error: no suitable method found for max(int[
							      	return arr [ n - 1 ] ;					    }								  ],int)   return Math . max ( arr , n ) ;
							      }								    								       ^     method Math.max(int,int) is not applica
							      								    								  ble	    (argument mismatch; int[] cannot be conv
							      								    								  erted to int)	    method Math.max(long,long) is no
							      								    								  t applicable	     (argument mismatch; int[] canno
							      								    								  t be converted to long)     method Math.max(float,
							      								    								  float) is not applicable	 (argument mismatch;
							      								    								   int[] cannot be converted to float)	   method Ma
							      								    								  th.max(double,double) is not applicable	(arg
							      								    								  ument mismatch; int[] cannot be converted to doubl
							      								    								  e) 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
def Circumference ( a ) :				      int Circumference ( int a ) {				    public static double Circumference ( double a ) {		  success : None
    return ( 4 * a )					      	return 4 * a ;						      return ( 4 * a ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
def rangeGCD ( n , m ) :				      static int rangeGCD ( int n , int m ) {			    static int rangeGCD ( int n , int m ) {			  success : identical to gold
    return n if ( n == m ) else 1			      	return ( n == m ) ? n : 1 ;				      return ( n == m ) ? n : 1 ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
def power ( n ) :					      static int power ( int n ) {				    public static int power ( int n ) {				  success : None
    if n == 1 :						      	if ( n == 1 ) return 2 ;				      if ( n == 1 ) {						  
	return 2					      	return 2 * power ( n - 1 ) ;				    	return 2 ;						  
    return 2 * power ( n - 1 )				      }								      }								  
							      								      return 2 * power ( n - 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
def compute_average ( a , b ) :				      static int compute_average ( int a , int b ) {		    public static double computeAverage ( double a , double b ) { success : None
    return floor ( ( a + b ) / 2 )			      	return ( a + b ) / 2 ;					      return Math . floor ( ( a + b ) / 2 ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
def summingSeries ( n ) :				      static int summingSeries ( long n ) {			    public static double summingSeries ( double n ) {		  success : None
    return math.pow ( n , 2 )				      	return ( int ) Math . pow ( n , 2 ) ;			      return Math . pow ( n , 2 ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_AN_INTEGER_WITH_3_5				      MULTIPLY_AN_INTEGER_WITH_3_5				    MULTIPLY_AN_INTEGER_WITH_3_5				  MULTIPLY_AN_INTEGER_WITH_3_5
--							      --							    --								  --
def multiplyWith3Point5 ( x ) :				      static int multiplyWith3Point5 ( int x ) {		    public static int multiplyWith3Point5 ( int x ) {		  success : None
    return ( x << 1 ) + x + ( x >> 1 )			      	return ( x << 1 ) + x + ( x >> 1 ) ;			      return ( x << 1 ) + x + ( x >>> 1 ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
def isEven ( n ) :					      public static boolean isEven ( int n ) {			    public static boolean isEven ( int n ) {			  error : CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1.java
    return ( not ( n & 1 ) )				      	if ( ( n & 1 ) == 0 ) return true ;			      return ( ! ( n & 1 ) ) ;					  :20: error: bad operand type int for unary operato
							      	else return false ;					    }								  r '!'	  return ( ! ( n & 1 ) ) ;	      ^ 1 er
							      }								    								  ror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if ( n == 0 ) return 1 ;				      return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 
							      	return n * factorial ( n - 1 ) ;			    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
def slope ( x1 , y1 , x2 , y2 ) :			      static float slope ( float x1 , float y1 , float x2 , float y public static double slope ( double x1 , double y1 , double x success : None
    return ( float ) ( y2 - y1 ) / ( x2 - x1 )		      	return ( y2 - y1 ) / ( x2 - x1 ) ;			      return ( double ) ( y2 - y1 ) / ( x2 - x1 ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
def getModulo ( n , d ) :				      static int getModulo ( int n , int d ) {			    static int getModulo ( int n , int d ) {			  success : identical to gold
    return ( n & ( d - 1 ) )				      	return ( n & ( d - 1 ) ) ;				      return ( n & ( d - 1 ) ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
def oppositeSigns ( x , y ) :				      static boolean oppositeSigns ( int x , int y ) {		    public static boolean oppositeSigns ( int x , int y ) {	  success : None
    return ( ( x ^ y ) < 0 )				      	return ( ( x ^ y ) < 0 ) ;				      return ( ( x ^ y ) < 0 ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
def height ( N ) :					      static int height ( int N ) {				    public static double height ( double N ) {			  error : HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES.j
    return math.ceil ( math.log2 ( N + 1 ) ) - 1	      	return ( int ) Math . ceil ( Math . log ( N + 1 ) / Math .    return Math . ceil ( Math . log2 ( N + 1 ) ) - 1 ;	  ava:19: error: cannot find symbol   return Math .
							      }								    }								  ceil ( Math . log2 ( N + 1 ) ) - 1 ;
							      								    								  		 ^   symbol:   method log2(double)
							      								    								   location: class Math 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
def swapNibbles ( x ) :					      static int swapNibbles ( int x ) {			    public static int swapNibbles ( int x ) {			  error : SWAP_TWO_NIBBLES_BYTE.java:19: error: ')'
    return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	      	return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	      return ( ( x & 0x0F ) << 4				  expected   return ( ( x & 0x0F ) << 4
							      }								    								  		  ^ SWAP_TWO_NIBBLES_BYTE.java:21: e
							      								    								  rror: illegal start of expression public static vo
							      								    								  id main(String args[]) { ^ 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if ( n == 0 ) return 1 ;				      return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 
							      	return n * factorial ( n - 1 ) ;			    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
def countNonEmptySubstr ( str ) :			      static int countNonEmptySubstr ( String str ) {		    static int countNonEmptySubstr ( String str ) {		  success : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    return int ( n * ( n + 1 ) / 2 )			      	return n * ( n + 1 ) / 2 ;				      return ( int ) ( n * ( n + 1 ) / 2 ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
def nthTerm ( n ) :					      public static int nthTerm ( int n ) {			    public static double nthTerm ( double n ) {			  success : None
    return ( n * n ) + ( n * n * n )			      	return ( n * n ) + ( n * n * n ) ;			      return ( n * n ) + ( n * n * n ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
def getRemainder ( num , divisor ) :			      static int getRemainder ( int num , int divisor ) {	    static int getRemainder ( int num , int divisor ) {		  success : identical to gold
    return ( num - divisor * ( num // divisor ) )	      	return ( num - divisor * ( num / divisor ) ) ;		      return ( num - divisor * ( num / divisor ) ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			      PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES
--							      --							    --								  --
def findMaximumPieces ( n ) :				      static int findMaximumPieces ( int n ) {			    static int findMaximumPieces ( int n ) {			  success : None
    return int ( 1 + n * ( n + 1 ) / 2 )		      	return 1 + n * ( n + 1 ) / 2 ;				      return ( int ) ( 1 + n * ( n + 1 ) / 2 ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE				      LONGEST_INCREASING_SUBSEQUENCE				    LONGEST_INCREASING_SUBSEQUENCE				  LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr ) :					      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int [ ] arr ) {			  script_not_found : None
    global maximum					      	max_ref = 1 ;						      int maximum ;						  
    n = len ( arr )					      	_lis ( arr , n ) ;					      int n = arr . length ;					  
    maximum = 1						      	return max_ref ;					      maximum = 1 ;						  
    _lis ( arr , n )					      }								      java . util . Arrays . sort ( arr ) ;			  
    return maximum					      								      return maximum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
def gcd ( a , b ) :					      public static int gcd ( int a , int b ) {			    public static int gcd ( int a , int b ) {			  success : None
    if a == 0 :						      	if ( a == 0 ) return b ;				      if ( a == 0 ) {						  
	return b					      	return gcd ( b % a , a ) ;				    	return b ;						  
    return gcd ( b % a , a )				      }								      }								  
							      								      return gcd ( b % a , a ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
def rectCount ( n , m ) :				      public static long rectCount ( int n , int m ) {		    public static int rectCount ( int n , int m ) {		  success : None
    return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4	      	return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		      return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def evenbinomialCoeffSum ( n ) :			      static int evenbinomialCoeffSum ( int n ) {		    public static int evenBinomialCoeffSum ( int n ) {		  success : None
    return ( 1 << ( n - 1 ) )				      	return ( 1 << ( n - 1 ) ) ;				      return ( 1 << ( n - 1 ) ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS_1				      BREAK_NUMBER_THREE_PARTS_1				    BREAK_NUMBER_THREE_PARTS_1					  BREAK_NUMBER_THREE_PARTS_1
--							      --							    --								  --
def count_of_ways ( n ) :				      static long count_of_ways ( long n ) {			    public static int countOfWays ( int n ) {			  error : BREAK_NUMBER_THREE_PARTS_1.java:42: error:
    count = 0						      	long count = 0 ;					      int count = 0 ;						   incompatible types: Long cannot be converted to i
    count = ( n + 1 ) * ( n + 2 ) // 2			      	count = ( n + 1 ) * ( n + 2 ) / 2 ;			      count = ( n + 1 ) * ( n + 2 ) / 2 ;			  nt	     if(f_filled(param0.get(i)) == f_gold(pa
    return count					      	return count ;						      return count ;						  ram0.get(i)))				      ^ Note
							      }								    }								  : Some messages have been simplified; recompile wi
							      								    								  th -Xdiags:verbose to get full output 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10
--							      --							    --								  --
def isMultipleOf10 ( n ) :				      static boolean isMultipleOf10 ( int n ) {			    public static boolean isMultipleOf10 ( int n ) {		  success : None
    return ( n % 15 == 0 )				      	if ( n % 15 == 0 ) return true ;			      return ( n % 15 == 0 ) ;					  
							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
def areaOctagon ( side ) :				      static double areaOctagon ( double side ) {		    public static double areaOctagon ( double side ) {		  success : None
    return ( 2 * ( 1 + ( math.sqrt ( 2 ) ) ) * side * side )  	return ( float ) ( 2 * ( 1 + Math . sqrt ( 2 ) ) * side * s   return ( 2 * ( 1 + ( Math . sqrt ( 2 ) ) ) * side * side )  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    static int findSum ( int n ) {				  success : identical to gold
    return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24     	return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	      return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
def reverse ( string ) :				      static void reverse ( char str [ ] ) {			    public static String reverse ( String string ) {		  script_not_found : None
    string = string [ : : - 1 ]				      	int n = str . length , i ;				      string = string . substring ( 0 , string . length ( ) - 1 ) 
    return string					      	for ( i = 0 ;						      return string ;						  
							      	i < n / 2 ;						    }								  
							      	i ++ ) {						    								  
							      	  swap ( str , i , n - i - 1 ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
def sortit ( arr , n ) :				      static void sortit ( int [ ] arr , int n ) {		    public static void sortit ( int [ ] arr , int n ) {		  success : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	arr [ i ] = i + 1				      	i < n ;							      i < n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  arr [ i ] = i + 1 ;					    	arr [ i ] = i + 1 ;					  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	int res = 1 , i ;					      return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 
							      	for ( i = 2 ;						    }								  
							      	i <= n ;						    								  
							      	i ++ ) res *= i ;					    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
def surface_area_octahedron ( side ) :			      static double surface_area_octahedron ( double side ) {	    public static double surfaceAreaOctahedron ( double side ) {  success : None
    return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )      	return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;      return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
def Resources ( process , need ) :			      static int Resources ( int process , int need ) {		    protected static int resources ( int process , int need ) {	  success : None
    minResources = 0					      	int minResources = 0 ;					      int minResources = 0 ;					  
    minResources = process * ( need - 1 ) + 1		      	minResources = process * ( need - 1 ) + 1 ;		      minResources = process * ( need - 1 ) + 1 ;		  
    return minResources					      	return minResources ;					      return minResources ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
def volumeOfEllipsoid ( r1 , r2 , r3 ) :		      public static float volumeOfEllipsoid ( float r1 , float r2 , public static double volumeOfEllipsoid ( double r1 , double r success : None
    return 1.33 * math.pi * r1 * r2 * r3		      	float pi = ( float ) 3.14 ;				      return 1.33 * Math . PI * r1 * r2 * r3 ;			  
							      	return ( float ) 1.33 * pi * r1 * r2 * r3 ;		    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
def procal ( n ) :					      static double procal ( int n ) {				    public static double procal ( double n ) {			  success : None
    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )	      	return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		      return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
def vol_of_octahedron ( side ) :			      static double vol_of_octahedron ( double side ) {		    public static double volOfOctahedron ( double side ) {	  success : None
    return ( ( side * side * side ) * ( math.sqrt ( 2 ) / 3 ) 	return ( ( side * side * side ) * ( Math . sqrt ( 2 ) / 3 )   return ( ( side * side * side ) * ( Math . sqrt ( 2 ) / 3 ) 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
def countSetBits ( n ) :				      static int countSetBits ( int n ) {			    static int countSetBits ( int n ) {				  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    while ( n ) :					      	while ( n > 0 ) {					      while ( ( n ) != 0 ) {					  
	n &= ( n - 1 )					      	  n &= ( n - 1 ) ;					    	n &= ( n - 1 ) ;					  
	count += 1					      	  count ++ ;						    	count ++ ;						  
    return count					      	}							      }								  
							      	return count ;						      return count ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
def calculateSum ( n ) :				      static long calculateSum ( int n ) {			    static int calculateSum ( int n ) {				  success : None
    sum = 0						      	long sum = 0 ;						      int sum = 0 ;						  
    sum = 1 << n					      	sum = 1 << n ;						      sum = 1 << n ;						  
    return ( sum - 1 )					      	return ( sum - 1 ) ;					      return ( sum - 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
def isPowerOfTwo ( x ) :				      static boolean isPowerOfTwo ( int x ) {			    static boolean isPowerOfTwo ( int x ) {			  error : WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_
    return ( x and ( not ( x & ( x - 1 ) ) ) )		      	return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;		      return ( x != 0 && ( ! ( x & ( x - 1 ) ) ) ) ;		  A_NO_IS_POWER_OF_TWO_1.java:19: error: bad operand
							      }								    }								   type int for unary operator '!'   return ( x != 0
							      								    								   && ( ! ( x & ( x - 1 ) ) ) ) ;
							      								    								       ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
def assignValue ( a , b , x ) :				      static int assignValue ( int a , int b , int x ) {	    public static int assignValue ( int a , int b , int x ) {	  script_not_found : None
    arr = [ a , b ]					      	int arr [ ] = {						      int [ ] arr = {						  
    return ( arr [ x ] )				      	  a , b }						    	a , b }							  
							      	  ;							    	;							  
							      	  return ( arr [ x ] ) ;				    	return ( arr [ x ] ) ;					  
							      	}							      }								  
-							      	-							      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
def kthSmallest ( arr , n , k ) :			      public static int kthSmallest ( Integer [ ] arr , int k ) {   public static int kthSmallest ( int [ ] arr , int n , int k ) script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    return arr [ k - 1 ]				      	return arr [ k - 1 ] ;					      return arr [ k - 1 ] ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE      DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr ) :					      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int [ ] arr ) {			  script_not_found : None
    global maximum					      	max_ref = 1 ;						      int maximum ;						  
    n = len ( arr )					      	_lis ( arr , n ) ;					      int n = arr . length ;					  
    maximum = 1						      	return max_ref ;					      maximum = 1 ;						  
    _lis ( arr , n )					      }								      java . util . Arrays . sort ( arr ) ;			  
    return maximum					      								      return maximum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
def sumOfSeries ( n ) :					      static double sumOfSeries ( int n ) {			    public static double sumOfSeries ( int n ) {		  success : None
    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) )	      	return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;	      return ( ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ) ;  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
def countSetBits ( n ) :				      public static int countSetBits ( int n ) {		    static int countSetBits ( int n ) {				  success : None
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) ) {					  
	return 0					      	else return 1 + countSetBits ( n & ( n - 1 ) ) ;	    	return 0 ;						  
    else :						      }								      }								  
	return 1 + countSetBits ( n & ( n - 1 ) )	      								      else {							  
							      								    	return 1 + countSetBits ( n & ( n - 1 ) ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
def repeat ( s , n ) :					      static String repeat ( String s , int n ) {		    public static String repeat ( String s , int n ) {		  success : None
    s1 = s						      	String s1 = s ;						      String s1 = s ;						  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	s += s1						      	i < n ;							      i < n ;							  
    return s						      	i ++ ) s += s1 ;					      i ++ ) {							  
							      	return s ;						    	s += s1 ;						  
							      }								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
def countSetBits ( n ) :				      public static int countSetBits ( int n ) {		    static int countSetBits ( int n ) {				  success : None
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) ) {					  
	return 0					      	else return ( n & 1 ) + countSetBits ( n >> 1 ) ;	    	return 0 ;						  
    else :						      }								      }								  
	return ( n & 1 ) + countSetBits ( n >> 1 )	      								      else {							  
							      								    	return ( n & 1 ) + countSetBits ( n >> 1 ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
def bin ( n ) :						      static void bin ( Integer n ) {				    public static void bin ( int n ) {				  script_not_found : None
    if ( n > 1 ) :					      	if ( n > 1 ) bin ( n >> 1 ) ;				      if ( ( n > 1 ) ) {					  
	bin ( n >> 1 )					      	System . out . printf ( "%d" , n & 1 ) ;		    	bin ( n >> 1 ) ;					  
    print ( n & 1 , end = "" )				      }								      }								  
							      								      System . out . print ( n & 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
def printSubStr ( st , low , high ) :			      static void printSubStr ( String str , int low , int high ) { static String printSubStr ( String st , int low , int high )  script_not_found : None
    sys.stdout.write ( st [ low : high + 1 ] )		      	System . out . println ( str . substring ( low , high + 1 )   System . out . print ( st . substring ( low , high + 1 ) )  
    sys.stdout.flush ( )				      }								      System . out . flush ( ) ;				  
    return ''						      								      return "" ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING      COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
def getAbs ( n ) :					      static int getAbs ( int n ) {				    public static int getAbs ( int n ) {			  script_not_found : None
    mask = n >> ( SIZE_INT * CHARBIT - 1 )		      	int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;		      int mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;		  
    return ( ( n + mask ) ^ mask )			      	return ( ( n + mask ) ^ mask ) ;			      return ( ( n + mask ) ^ mask ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
def maxSquare ( b , m ) :				      static int maxSquare ( int b , int m ) {			    public static double maxSquare ( double b , double m ) {	  failure : #Results:0, 10
    return ( b / m - 1 ) * ( b / m ) / 2		      	return ( b / m - 1 ) * ( b / m ) / 2 ;			      return ( b / m - 1 ) * ( b / m ) / 2 ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I
--							      --							    --								  --
def getArea ( a ) :					      static float getArea ( int a ) {				    public static double getArea ( double a ) {			  success : None
    area = ( math.pi * a * a ) / 4			      	float area = ( float ) ( Math . PI * a * a ) / 4 ;	      double area = ( Math . PI * a * a ) / 4 ;			  
    return area						      	return area ;						      return area ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
def minSum ( A ) :					      static int minSum ( int [ ] A , int n ) {			    public static int minSum ( int [ ] A ) {			  error : MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY.j
    min_val = min ( A ) ;				      	int min_val = Arrays . stream ( A ) . min ( ) . getAsInt (    int minVal = Math . min ( A . length , A [ 0 ] ) ;	  ava:51: error: method f_filled in class MINIMUM_SU
    return min_val * ( len ( A ) - 1 )			      	return ( min_val * ( n - 1 ) ) ;			      return minVal * ( A . length - 1 ) ;			  M_CHOOSING_MINIMUM_PAIRS_ARRAY cannot be applied t
							      }								    }								  o given types;	 if(f_filled(param0.get(i),p
							      								    								  aram1.get(i)) == f_gold(param0.get(i),param1.get(i
							      								    								  )))		 ^   required: int[]   found: int[],
							      								    								  Integer   reason: actual and formal argument lists
							      								    								   differ in length 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
def countStr ( n ) :					      static int countStr ( int n ) {				    static int countStr ( int n ) {				  success : None
    return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) // 2 ) ) 	return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;	      return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ) ;  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		  HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
def turnOffK ( n , k ) :				      static int turnOffK ( int n , int k ) {			    public static int turnOffK ( int n , int k ) {		  success : None
    if ( k <= 0 ) :					      	if ( k <= 0 ) return n ;				      if ( ( k <= 0 ) ) {					  
	return n					      	return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			    	return n ;						  
    return ( n & ~ ( 1 << ( k - 1 ) ) )			      }								      }								  
							      								      return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
def yMod ( y , x ) :					      static long yMod ( long y , long x ) {			    public static int yMod ( int y , int x ) {			  error : FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X.ja
    return ( y % pow ( 2 , x ) )			      	if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y   return ( y % Math . pow ( 2 , x ) ) ;			  va:21: error: incompatible types: possible lossy c
							      	if ( x > 63 ) return y ;				    }								  onversion from double to int	 return ( y % Math .
							      	return ( y % ( 1 << ( int ) x ) ) ;			    								   pow ( 2 , x ) ) ;		  ^ FIND_VALUE_OF_Y_
							      }								    								  MOD_2_RAISED_TO_POWER_X.java:51: error: incompatib
							      								    								  le types: Long cannot be converted to int
							      								    								  if(f_filled(param0.get(i),param1.get(i)) == f_gold
							      								    								  (param0.get(i),param1.get(i)))
							      								    								  	     ^ Note: Some messages have been simplif
							      								    								  ied; recompile with -Xdiags:verbose to get full ou
							      								    								  tput 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
def search ( arr , n , x ) :				      public static int search ( int arr [ ] , int x ) {	    public static int search ( int [ ] arr , int n , int x ) {	  script_not_found : None
    for i in range ( 0 , n ) :				      	int n = arr . length ;					      for ( int i = 0 ;						  
	if ( arr [ i ] == x ) :				      	for ( int i = 0 ;					      i <= n ;							  
	    return i					      	i < n ;							      i ++ ) {							  
    return - 1						      	i ++ ) {						    	if ( ( arr [ i ] == x ) ) {				  
							      	  if ( arr [ i ] == x ) return i ;			    	  return i ;						  
							      	}							    	}							  
							      	return - 1 ;						      }								  
							      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES
--							      --							    --								  --
def fib ( n ) :						      static int fib ( int n ) {				    public static int fib ( int n ) {				  script_not_found : None
    if ( n <= 1 ) :					      	if ( n <= 1 ) return n ;				      if ( ( n <= 1 ) ) {					  
	return n					      	return fib ( n - 1 ) + fib ( n - 2 ) ;			    	return n ;						  
    return fib ( n - 1 ) + fib ( n - 2 )		      }								      }								  
							      								      return fib ( n - 1 ) + fib ( n - 2 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
def maxTripletSum ( arr , n ) :				      static int maxTripletSum ( int arr [ ] , int n ) {	    public static int maxTripletSum ( int [ ] arr , int n ) {	  success : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] )  	return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;	      return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ) ;  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
def isNumber ( s ) :					      static boolean isNumber ( String s ) {			    public static boolean isNumber ( String s ) {		  success : None
    for i in range ( len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if s [ i ].isdigit ( ) != True :		      	i < s . length ( ) ;					      i < s . length ( ) ;					  
	    return False				      	i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == fal   i ++ ) {							  
    return True						      	return true ;						    	if ( Character . isDigit ( s . charAt ( i ) ) != true ) { 
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
def divisorSum ( n ) :					      static int divisorSum ( int n ) {				    public static int divisorSum ( int n ) {			  success : None
    sum = 0						      	int sum = 0 ;						      long sum = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	sum += int ( n / i ) * i			      	i <= n ;						      i <= n ;							  
    return int ( sum )					      	++ i ) sum += ( n / i ) * i ;				      i ++ ) {							  
							      	return sum ;						    	sum += ( long ) ( n / i ) * i ;				  
							      }								      }								  
							      								      return ( int ) sum ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
def addOne ( x ) :					      static int addOne ( int x ) {				    public static int addOne ( int x ) {			  success : None
    m = 1						      	int m = 1 ;						      int m = 1 ;						  
    while ( x & m ) :					      	while ( ( int ) ( x & m ) >= 1 ) {			      while ( ( x & m ) != 0 ) {				  
	x = x ^ m					      	  x = x ^ m ;						    	x = x ^ m ;						  
	m <<= 1						      	  m <<= 1 ;						    	m <<= 1 ;						  
    x = x ^ m						      	}							      }								  
    return x						      	x = x ^ m ;						      x = x ^ m ;						  
							      	return x ;						      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
def findRepeating ( arr , n ) :				      static int findRepeating ( int [ ] arr , int n ) {	    static int findRepeating ( int [ ] arr , int n ) {		  error : FIND_REPETITIVE_ELEMENT_1_N_1.java:23: err
    return sum ( arr ) - ( ( ( n - 1 ) * n ) // 2 )	      	int sum = 0 ;						      return Arrays . stream ( arr ) . filter ( i -> i < n ) . co or: incompatible types: possible lossy conversion
							      	for ( int i = 0 ;					    }								  from long to int   return Arrays . stream ( arr )
							      	i < n ;							    								  . filter ( i -> i < n ) . count ( ) - ( ( ( n - 1
							      	i ++ ) sum += arr [ i ] ;				    								  ) * n ) / 2 ) ;
							      	return sum - ( ( ( n - 1 ) * n ) / 2 ) ;		    								  				     ^ 1 error
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
def findSum ( N , K ) :					      static int findSum ( int N , int K ) {			    static int findSum ( int N , int K ) {			  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for i in range ( 1 , N + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	ans += ( i % K )				      	i <= N ;						      i <= N ;							  
    return ans						      	i ++ ) ans += ( i % K ) ;				      i ++ ) {							  
							      	return ans ;						    	ans += ( i % K ) ;					  
							      }								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
def isPrime ( n ) :					      static boolean isPrime ( int n ) {			    public static boolean isPrime ( int n ) {			  success : None
    if ( n <= 1 ) :					      	if ( n <= 1 ) return false ;				      if ( ( n <= 1 ) ) {					  
	return False					      	for ( int i = 2 ;					    	return false ;						  
    for i in range ( 2 , n ) :				      	i < n ;							      }								  
	if ( n % i == 0 ) :				      	i ++ ) if ( n % i == 0 ) return false ;			      for ( int i = 2 ;						  
	    return False				      	return true ;						      i < n ;							  
    return True						      }								      i ++ ) {							  
							      								    	if ( ( n % i ) == 0 ) {					  
							      								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
def isPossible ( str , n ) :				      static boolean isPossible ( String str , int n ) {	    public static boolean isPossible ( String str , int n ) {	  success : None
    l = len ( str )					      	int len = str . length ( ) ;				      int l = str . length ( ) ;				  
    if ( l >= n ) :					      	if ( len >= n ) return true ;				      if ( ( l >= n ) ) {					  
	return True					      	return false ;						    	return true ;						  
    return False					      }								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
def getOddOccurrence ( arr ) :				      int getOddOccurrence ( int ar [ ] , int ar_size ) {	    static int getOddOccurrence ( int [ ] arr ) {		  error : FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TI
    res = 0						      	int i ;							      int res = 0 ;						  MES_2.java:60: error: method f_filled in class FIN
    for element in arr :				      	int res = 0 ;						      for ( int element : arr ) {				  D_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2 canno
	res = res ^ element				      	for ( i = 0 ;						    	res = res ^ element ;					  t be applied to given types;	       if(f_filled(p
    return res						      	i < ar_size ;						      }								  aram0.get(i),param1.get(i)) == f_gold(param0.get(i
							      	i ++ ) {						      return res ;						  ),param1.get(i)))	       ^   required: int[]
							      	  res = res ^ ar [ i ] ;				    }								   found: int[],Integer	  reason: actual and formal
							      	}							    								  argument lists differ in length 1 error
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
def findArea ( a ) :					      static float findArea ( float a ) {			    static double findArea ( double a ) {			  success : None
    area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a  	float area ;						      double area = ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqrt ( 
    return area						      	area = ( float ) ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqr   return area ;						  
							      	return area ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1
--							      --							    --								  --
def printArray ( a , n ) :				      static void printArray ( int [ ] a , int n ) {		    static void printArray ( int [ ] a , int n ) {		  script_not_found : None
    for i in a :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( i , end = " " )				      	i < n ;							      i < a . length ;						  
    print ( )						      	i ++ ) System . out . print ( a [ i ] + " " ) ;		      i ++ ) {							  
							      	System . out . println ( ) ;				    	System . out . print ( a [ i ] + " " ) ;		  
							      }								      }								  
							      								      System . out . println ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_LENGTH_PALINDROME				      NTH_EVEN_LENGTH_PALINDROME				    NTH_EVEN_LENGTH_PALINDROME					  NTH_EVEN_LENGTH_PALINDROME
--							      --							    --								  --
def evenlength ( n ) :					      static String evenlength ( String n ) {			    public static String evenLength ( String n ) {		  success : None
    res = n						      	String res = n ;					      StringBuffer res = new StringBuffer ( n ) ;		  
    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :	      	for ( int j = n . length ( ) - 1 ;			      for ( int j = n . length ( ) - 1 ;			  
	res += n [ j ]					      	j >= 0 ;						      j >= 0 ;							  
    return res						      	-- j ) res += n . charAt ( j ) ;			      j -- ) {							  
							      	return res ;						    	res . append ( n . charAt ( j ) ) ;			  
							      }								      }								  
							      								      return res . toString ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
def sequence ( n ) :					      static int sequence ( int n ) {				    public static int sequence ( int n ) {			  script_not_found : None
    if n == 1 or n == 2 :				      	if ( n == 1 || n == 2 ) return 1 ;			      if ( n == 1 || n == 2 ) {					  
	return 1					      	else return sequence ( sequence ( n - 1 ) ) + sequence ( n  	return 1 ;						  
    else :						      }								      }								  
	return sequence ( sequence ( n - 1 ) ) + sequence ( n 								      else {							  
							      								    	return sequence ( sequence ( n - 1 ) ) + sequence ( n - s 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    static int nextPowerOf2 ( int n ) {				  error : NEXT_POWER_OF_2_1.java:23: error: bad oper
    p = 1						      	int p = 1 ;						      int p = 1 ;						  and type int for unary operator '!'	if ( ( n !=
    if ( n and not ( n & ( n - 1 ) ) ) :		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( ( n != 0 ) && ! ( ( n & ( n - 1 ) ) ) ) {		  0 ) && ! ( ( n & ( n - 1 ) ) ) ) {
	return n					      	while ( p < n ) p <<= 1 ;				    	return n ;						  	^ 1 error
    while ( p < n ) :					      	return p ;						      }								  
	p <<= 1						      }								      while ( ( p = p ) < n ) {					  
    return p						      								    	p <<= 1 ;						  
							      								      }								  
							      								      return p ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
def isPowerOfFour ( n ) :				      static boolean isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
    return ( n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not (  	return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ( n & 0xAAAA   return ( n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0x 4_OR_NOT_2.java:19: error: bad operand type int fo
							      }								    }								  r unary operator '!'	 return ( n != 0 && ( ( n &
							      								    								  ( n - 1 ) ) == 0 ) && ! ( n & 0xAAAAAAAA ) ) ;
							      								    								  						  ^
							      								    								  1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
def nswp ( n ) :					      static int nswp ( int n ) {				    public static int nswp ( int n ) {				  script_not_found : None
    if n == 0 or n == 1 :				      	if ( n == 0 || n == 1 ) return 1 ;			      if ( n == 0 || n == 1 ) {					  
	return 1					      	return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		    	return 1 ;						  
    return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		      }								      }								  
							      								      return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
def findTrailingZeros ( n ) :				      static int findTrailingZeros ( int n ) {			    static int findTrailingZeros ( double n ) {			  success : None
    count = 0						      	int count = 0 ;						      long count = 0 ;						  
    i = 5						      	for ( int i = 5 ;					      double i = 5 ;						  
    while ( n / i >= 1 ) :				      	n / i >= 1 ;						      while ( ( n / i ) >= 1 ) {				  
	count += int ( n / i )				      	i *= 5 ) count += n / i ;				    	count += ( int ) ( n / i ) ;				  
	i *= 5						      	return count ;						    	i *= 5 ;						  
    return int ( count )				      }								      }								  
							      								      return ( int ) count ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
def find ( n , k ) :					      public static int find ( int n , int k ) {		    public static int indexOf ( int n , int k ) {		  success : None
    if ( n + 1 >= k ) :					      	if ( n + 1 >= k ) return ( k - 1 ) ;			      if ( ( n + 1 >= k ) ) {					  
	return ( k - 1 )				      	else return ( 2 * n + 1 - k ) ;				    	return ( k - 1 ) ;					  
    else :						      }								      }								  
	return ( 2 * n + 1 - k )			      								      else {							  
							      								    	return ( 2 * n + 1 - k ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
def leonardo ( n ) :					      static int leonardo ( int n ) {				    public static int leonardo ( int n ) {			  script_not_found : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return 1 ;			      if ( ( n == 0 ) || ( n == 1 ) ) {				  
	return 1					      	return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;    	return 1 ;						  
    return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 )    }								      }								  
							      								      return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;	  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
def CountSquares ( a , b ) :				      double countSquares ( int a , int b ) {			    public static int CountSquares ( int a , int b ) {		  script_not_found : None
    return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 	return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil (   return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
def countPaths ( n , m ) :				      static int countPaths ( int n , int m ) {			    static int countPaths ( int n , int m ) {			  script_not_found : None
    if ( n == 0 or m == 0 ) :				      	if ( n == 0 || m == 0 ) return 1 ;			      if ( ( n == 0 ) || ( m == 0 ) ) {				  
	return 1					      	return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  	return 1 ;						  
    return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  }								      }								  
							      								      return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    static int nextPowerOf2 ( int n ) {				  success : None
    n -= 1						      	n -- ;							      n -- ;							  
    n |= n >> 1						      	n |= n >> 1 ;						      n |= n >>> 1 ;						  
    n |= n >> 2						      	n |= n >> 2 ;						      n |= n >>> 2 ;						  
    n |= n >> 4						      	n |= n >> 4 ;						      n |= n >>> 4 ;						  
    n |= n >> 8						      	n |= n >> 8 ;						      n |= n >>> 8 ;						  
    n |= n >> 16					      	n |= n >> 16 ;						      n |= n >>> 16 ;						  
    n += 1						      	n ++ ;							      n ++ ;							  
    return n						      	return n ;						      return n ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
def vol_of_dodecahedron ( side ) :			      static double vol_of_dodecahedron ( int side ) {		    public static double volOfDodecahedron ( double side ) {	  success : None
    return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 	return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * (   return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * ( 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
def largestPower ( n , p ) :				      static int Largestpower ( int n , int p ) {		    public static int largestPower ( int n , int p ) {		  success : None
    x = 0						      	int ans = 0 ;						      int x = 0 ;						  
    while n :						      	while ( n > 0 ) {					      while ( n != 0 ) {					  
	n /= p						      	  n /= p ;						    	n /= p ;						  
	x += n						      	  ans += n ;						    	x += n ;						  
    return x						      	}							      }								  
							      	return ans ;						      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
def checkValidity ( a , b , c ) :			      public static int checkValidity ( int a , int b , int c ) {   static boolean checkValidity ( int a , int b , int c ) {	  error : CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIV
    if ( a + b <= c ) or ( a + c <= b ) or ( b + c <= a ) :   	if ( a + b <= c || a + c <= b || b + c <= a ) return 0 ;      if ( ( a + b <= c ) || ( a + c <= b ) || ( b + c <= a ) ) { EN.java:66: error: incomparable types: boolean and
	return False					      	else return 1 ;						    	return false ;						   int	       if(f_filled(param0.get(i),param1.get(
    else :						      }								      }								  i),param2.get(i)) == f_gold(param0.get(i),param1.g
	return True					      								      else {							  et(i),param2.get(i)))
							      								    	return true ;						  				     ^ 1 error
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
def PowerOFPINnfactorial ( n , p ) :			      static int PowerOFPINnfactorial ( int n , int p ) {	    public static int PowerOFPINnfactorial ( int n , int p ) {	  success : None
    ans = 0						      	int ans = 0 ;						      double ans = 0 ;						  
    temp = p						      	int temp = p ;						      double temp = p ;						  
    while ( temp <= n ) :				      	while ( temp <= n ) {					      while ( ( temp <= n ) ) {					  
	ans += n / temp					      	  ans += n / temp ;					    	ans += n / temp ;					  
	temp = temp * p					      	  temp = temp * p ;					    	temp = temp * p ;					  
    return int ( ans )					      	}							      }								  
							      	return ans ;						      return ( int ) ans ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
def find_extra_element_index ( arrA , arrB ) :		      static int find_extra_element_index ( int [ ] arrA , int [ ]  public static int findExtraElementIndex ( int [ ] arrA , int  script_not_found : None
    extra_element = sum ( arrA ) - sum ( arrB )		      	int extra_element = sum ( arrA ) - sum ( arrB ) ;	      int extraElement = Arrays . stream ( arrA ) . mapToInt ( i  
    return arrA.index ( extra_element )			      	return indexOf ( arrA , extra_element ) ;		      return arrA . indexOf ( extraElement ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
def getMissingNo ( A ) :				      static int getMissingNo ( int a [ ] , int n ) {		    public static int getMissingNo ( int [ ] A ) {		  script_not_found : None
    n = len ( A )					      	int i , total ;						      int n = A . length ;					  
    total = ( n + 1 ) * ( n + 2 ) / 2			      	total = ( n + 1 ) * ( n + 2 ) / 2 ;			      int total = ( n + 1 ) * ( n + 2 ) / 2 ;			  
    sum_of_A = sum ( A )				      	for ( i = 0 ;						      int sumOfA = Arrays . stream ( A ) . sum ( ) ;		  
    return total - sum_of_A				      	i < n ;							      return total - sumOfA ;					  
							      	i ++ ) total -= a [ i ] ;				    }								  
							      	return total ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
def findLastIndex ( str , x ) :				      static int findLastIndex ( String str , Character x ) {	    static int findLastIndex ( String str , char x ) {		  script_not_found : None
    index = - 1						      	int index = - 1 ;					      int index = - 1 ;						  
    for i in range ( 0 , len ( str ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if str [ i ] == x :				      	i < str . length ( ) ;					      i <= str . length ( ) ;					  
	    index = i					      	i ++ ) if ( str . charAt ( i ) == x ) index = i ;	      i ++ ) {							  
    return index					      	return index ;						    	if ( str . charAt ( i ) == x ) {			  
							      }								    	  index = i ;						  
							      								    	}							  
							      								      }								  
							      								      return index ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
def findLastIndex ( str , x ) :				      static int findLastIndex ( String str , Character x ) {	    static int findLastIndex ( String str , char x ) {		  script_not_found : None
    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	      	for ( int i = str . length ( ) - 1 ;			      for ( int i = str . length ( ) - 1 ;			  
	if ( str [ i ] == x ) :				      	i >= 0 ;						      i >= 0 ;							  
	    return i					      	i -- ) if ( str . charAt ( i ) == x ) return i ;	      i -- ) {							  
    return - 1						      	return - 1 ;						    	if ( ( str . charAt ( i ) == x ) ) {			  
							      }								    	  return i ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
def getMissingNo ( a , n ) :				      static int getMissingNo ( int a [ ] , int n ) {		    static int getMissingNo ( int [ ] a , int n ) {		  failure : #Results:0, 10
    i , total = 0 , 1					      	int total = 1 ;						      int i , total = 0 ;					  
    for i in range ( 2 , n + 2 ) :			      	for ( int i = 2 ;					      for ( i = 2 ;						  
	total += i					      	i <= ( n + 1 ) ;					      i <= n ;							  
	total -= a [ i - 2 ]				      	i ++ ) {						      i ++ ) {							  
    return total					      	  total += i ;						    	total += i ;						  
							      	  total -= a [ i - 2 ] ;				    	total -= a [ i - 2 ] ;					  
							      	}							      }								  
							      	return total ;						      return total ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
def cost ( a , n ) :					      static int cost ( int [ ] a , int n ) {			    public static int cost ( int [ ] a , int n ) {		  error : MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LA
    return ( ( n - 1 ) * min ( a ) )			      	int min = a [ 0 ] ;					      return ( ( n - 1 ) * Math . min ( a , 0 ) ) ;		  RGER_PAIRS.java:25: error: no suitable method foun
							      	for ( int i = 1 ;					    }								  d for min(int[],int)	 return ( ( n - 1 ) * Math .
							      	i < a . length ;					    								   min ( a , 0 ) ) ;				 ^
							      	i ++ ) {						    								     method Math.min(int,int) is not applicable
							      	  if ( a [ i ] < min ) min = a [ i ] ;			    								    (argument mismatch; int[] cannot be converted to
							      	}							    								   int)	    method Math.min(long,long) is not applic
							      	return ( n - 1 ) * min ;				    								  able	     (argument mismatch; int[] cannot be con
							      }								    								  verted to long)     method Math.min(float,float) i
							      								    								  s not applicable	 (argument mismatch; int[] c
							      								    								  annot be converted to float)	   method Math.min(d
							      								    								  ouble,double) is not applicable	(argument mi
							      								    								  smatch; int[] cannot be converted to double) 1 err
							      								    								  or
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
def largest ( arr , n ) :				      static int largest ( ) {					    public static int largest ( int [ ] arr , int n ) {		  script_not_found : None
    max = arr [ 0 ]					      	int i ;							      int max = arr [ 0 ] ;					  
    for i in range ( 1 , n ) :				      	int max = arr [ 0 ] ;					      for ( int i = 1 ;						  
	if arr [ i ] > max :				      	for ( i = 1 ;						      i < n ;							  
	    max = arr [ i ]				      	i < arr . length ;					      i ++ ) {							  
    return max						      	i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;		    	if ( arr [ i ] > max ) {				  
							      	return max ;						    	  max = arr [ i ] ;					  
							      }								    	}							  
							      								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
def printNos ( n ) :					      static void printNos ( int n ) {				    static void printNos ( int n ) {				  script_not_found : None
    if n > 0 :						      	if ( n > 0 ) {						      if ( n > 0 ) {						  
	printNos ( n - 1 )				      	  printNos ( n - 1 ) ;					    	printNos ( n - 1 ) ;					  
	print ( n , end = ' ' )				      	  System . out . print ( n + " " ) ;			    	System . out . print ( n + " " ) ;			  
							      	}							      }								  
							      	return ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
def numberOfPaths ( m , n ) :				      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  script_not_found : None
    if ( m == 1 or n == 1 ) :				      	if ( m == 1 || n == 1 ) return 1 ;			      if ( ( m == 1 ) || ( n == 1 ) ) {				  
	return 1					      	return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  	return 1 ;						  
    return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m ,  }								      }								  
							      								      return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
def maxvolume ( s ) :					      static int maxvolume ( int s ) {				    public static int maxvolume ( double s ) {			  failure : #Results:9, 10
    length = int ( s / 3 )				      	int length = s / 3 ;					      int length = ( int ) ( s / 3 ) ;				  
    s -= length						      	s -= length ;						      s -= length ;						  
    breadth = s / 2					      	int breadth = s / 2 ;					      double breadth = s / 2 ;					  
    height = s - breadth				      	int height = s - breadth ;				      double height = s - breadth ;				  
    return int ( length * breadth * height )		      	return length * breadth * height ;			      return ( int ) ( length * breadth * height ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
def findLarger ( arr , n ) :				      static void findLarger ( int arr [ ] , int n ) {		    static void findLarger ( int [ ] arr , int n ) {		  script_not_found : None
    x = sorted ( arr )					      	Arrays . sort ( arr ) ;					      int [ ] x = Arrays . copyOf ( arr , arr . length ) ;	  
    for i in range ( n / 2 , n ) :			      	for ( int i = n - 1 ;					      for ( int i = n / 2 ;					  
	print ( x [ i ] ) ,				      	i >= n / 2 ;						      i < n ;							  
							      	i -- ) System . out . print ( arr [ i ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . println ( x [ i ] ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
def playGame ( arr , n ) :				      public static int playGame ( int arr [ ] ) {		    public static int playGame ( int [ ] arr , int n ) {	  script_not_found : None
    s = set ( )						      	HashSet < Integer > set = new HashSet < > ( ) ;		      HashSet < Integer > s = new HashSet < > ( ) ;		  
    for i in range ( n ) :				      	for ( int i : arr ) set . add ( i ) ;			      for ( int i = 0 ;						  
	s.add ( arr [ i ] )				      	return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;		      i < n ;							  
    return 1 if len ( s ) % 2 == 0 else 2		      }								      i ++ ) {							  
							      								    	s . add ( arr [ i ] ) ;					  
							      								      }								  
							      								      return s . size ( ) % 2 == 0 ? 1 : 2 ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY	      QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
def leftRotate ( arr , n , k ) :			      static void leftRotate ( int arr [ ] , int n , int k ) {	    public static void leftRotate ( int [ ] arr , int n , int k ) script_not_found : None
    for i in range ( k , k + n ) :			      	for ( int i = k ;					      for ( int i = k ;						  
	print ( str ( arr [ i % n ] ) , end = " " )	      	i < k + n ;						      i < k + n ;						  
							      	i ++ ) System . out . print ( arr [ i % n ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . print ( arr [ i % n ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
def horner ( poly , n , x ) :				      static int horner ( int poly [ ] , int n , int x ) {	    public static double horner ( double [ ] poly , int n , doubl error : HORNERS_METHOD_POLYNOMIAL_EVALUATION.java:
    result = poly [ 0 ]					      	int result = poly [ 0 ] ;				      double result = poly [ 0 ] ;				  70: error: incompatible types: int[] cannot be con
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  verted to double[]	     if(f_filled(param0.get(
	result = result * x + poly [ i ]		      	i < n ;							      i < n ;							  i),param1.get(i),param2.get(i)) == f_gold(param0.g
    return result					      	i ++ ) result = result * x + poly [ i ] ;		      i ++ ) {							  et(i),param1.get(i),param2.get(i)))
							      	return result ;						    	result = result * x + poly [ i ] ;			  		  ^ Note: Some messages have been si
							      }								      }								  mplified; recompile with -Xdiags:verbose to get fu
							      								      return result ;						  ll output 1 error
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    static int findSum ( int n ) {				  success : None
    sm = 0						      	int sum = 0 ;						      int sm = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	for j in range ( i , n + 1 ) :			      	i <= n ;						      i <= n ;							  
	    sm = sm + i * j				      	i ++ ) for ( int j = i ;				      i ++ ) {							  
    return sm						      	j <= n ;						    	for ( int j = i ;					  
							      	j ++ ) sum = sum + i * j ;				    	j <= n ;						  
							      	return sum ;						    	j ++ ) {						  
							      }								    	  sm = sm + i * j ;					  
							      								    	}							  
							      								      }								  
							      								      return sm ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
def doublefactorial ( n ) :				      static int doublefactorial ( int n ) {			    public static int doublefactorial ( int n ) {		  success : None
    res = 1						      	int res = 1 ;						      int res = 1 ;						  
    for i in range ( n , - 1 , - 2 ) :			      	for ( int i = n ;					      for ( int i = n ;						  
	if ( i == 0 or i == 1 ) :			      	i >= 0 ;						      i >= 0 ;							  
	    return res					      	i = i - 2 ) {						      i -= 2 ) {						  
	else :						      	  if ( i == 0 || i == 1 ) return res ;			    	if ( ( i == 0 ) || ( i == 1 ) ) {			  
	    res *= i					      	  else res *= i ;					    	  return res ;						  
							      	}							    	}							  
							      	return res ;						    	else {							  
							      }								    	  res *= i ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
def printFun ( test ) :					      static void printFun ( int test ) {			    public static void printFun ( int test ) {			  script_not_found : None
    if ( test < 1 ) :					      	if ( test < 1 ) return ;				      if ( ( test < 1 ) ) {					  
	return						      	else {							    	return ;						  
    else :						      	  System . out . printf ( "%d " , test ) ;		      }								  
	print ( test , end = " " )			      	  printFun ( test - 1 ) ;				      else {							  
	printFun ( test - 1 )				      	  System . out . printf ( "%d " , test ) ;		    	System . out . print ( test ) ;				  
	print ( test , end = " " )			      	  return ;						    	printFun ( test - 1 ) ;					  
	return						      	}							    	System . out . print ( test ) ;				  
							      }								    	return ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
def exponential ( n , x ) :				      static float exponential ( int n , float x ) {		    public static void exponential ( int n , double x ) {	  script_not_found : None
    sum = 1.0						      	float sum = 1 ;						      double sum = 1.0 ;					  
    for i in range ( n , 0 , - 1 ) :			      	for ( int i = n - 1 ;					      for ( int i = n ;						  
	sum = 1 + x * sum / i				      	i > 0 ;							      i > 0 ;							  
    print ( "e^x =" , sum )				      	-- i ) sum = 1 + x * sum / i ;				      i -- ) {							  
							      	return sum ;						    	sum = 1 + x * sum / i ;					  
							      }								      }								  
							      								      System . out . println ( "e^x =" + sum ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
def squareRoot ( n ) :					      static float squareRoot ( float n ) {			    public static double squareRoot ( double n ) {		  success : None
    x = n						      	float x = n ;						      double x = n ;						  
    y = 1						      	float y = 1 ;						      double y = 1 ;						  
    e = 0.000001					      	double e = 0.000001 ;					      double e = 0.000001 ;					  
    while ( x - y > e ) :				      	while ( x - y > e ) {					      while ( ( x - y ) > e ) {					  
	x = ( x + y ) / 2				      	  x = ( x + y ) / 2 ;					    	x = ( x + y ) / 2 ;					  
	y = n / x					      	  y = n / x ;						    	y = n / x ;						  
    return x						      	}							      }								  
							      	return x ;						      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
def printFactorialNums ( n ) :				      static void printFactorialNums ( int n ) {		    static void printFactorialNums ( int n ) {			  script_not_found : None
    fact = 1						      	int fact = 1 ;						      int fact = 1 ;						  
    x = 2						      	int x = 2 ;						      int x = 2 ;						  
    while fact <= n :					      	while ( fact <= n ) {					      while ( fact <= n ) {					  
	print ( fact , end = " " )			      	  System . out . print ( fact + " " ) ;			    	System . out . print ( fact + " " ) ;			  
	fact = fact * x					      	  fact = fact * x ;					    	fact = fact * x ;					  
	x += 1						      	  x ++ ;						    	x ++ ;							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
def divisibleBy20 ( num ) :				      static Boolean divisibleBy20 ( String num ) {		    public static boolean divisibleBy20 ( String num ) {	  script_not_found : None
    lastTwoDigits = int ( num [ - 2 : ] )		      	int lastTwoDigits = Integer . parseInt ( num . substring (    int lastTwoDigits = Integer . parseInt ( num . substring (  
    return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 = 	return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4    return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
def floorSqrt ( x ) :					      static int floorSqrt ( int x ) {				    public static int floorSqrt ( int x ) {			  success : None
    if ( x == 0 or x == 1 ) :				      	if ( x == 0 || x == 1 ) return x ;			      if ( ( x == 0 ) || ( x == 1 ) ) {				  
	return x					      	int i = 1 , result = 1 ;				    	return x ;						  
    i = 1 result = 1					      	while ( result <= x ) {					      }								  
    while ( result <= x ) :				      	  i ++ ;						      int i = 1 ;						  
	i += 1						      	  result = i * i ;					      int result = 1 ;						  
	result = i * i					      	}							      while ( ( result <= x ) ) {				  
    return i - 1					      	return i - 1 ;						    	i ++ ;							  
							      }								    	result = i * i ;					  
							      								      }								  
							      								      return i - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
def search ( arr , x ) :				      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int [ ] arr , int x ) {		  error : HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING.
    n = len ( arr )					      	for ( int i = 0 ;					      int n = arr . length ;					  java:73: error: method f_filled in class HOW_TO_BE
    for j in range ( 0 , n ) :				      	i < n ;							      for ( int j = 0 ;						  GIN_WITH_COMPETITIVE_PROGRAMMING cannot be applied
	if ( x == arr [ j ] ) :				      	i ++ ) {						      j <= n ;							   to given types;	   if(f_filled(param0.get(i)
	    return j					      	  if ( arr [ i ] == x ) return i ;			      j ++ ) {							  ,param1.get(i),param2.get(i)) == f_gold(param0.get
    return - 1						      	}							    	if ( ( x == arr [ j ] ) ) {				  (i),param1.get(i),param2.get(i)))	       ^   r
							      	return - 1 ;						    	  return j ;						  equired: int[],int   found: int[],Integer,Integer
							      }								    	}							    reason: actual and formal argument lists differ
							      								      }								  in length 1 error
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			      MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			    MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			  MULTIPLICATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
def modInverse ( a , m ) :				      static int modInverse ( int a , int m ) {			    public static int modInverse ( int a , int m ) {		  script_not_found : None
    a = a % m						      	a = a % m ;						      a = a % m ;						  
    for x in range ( 1 , m ) :				      	for ( int x = 1 ;					      for ( int x = 1 ;						  
	if ( ( a * x ) % m == 1 ) :			      	x < m ;							      x < m ;							  
	    return x					      	x ++ ) if ( ( a * x ) % m == 1 ) return x ;		      x ++ ) {							  
    return 1						      	return 1 ;						    	if ( ( ( a * x ) % m ) == 1 ) {				  
							      }								    	  return x ;						  
							      								    	}							  
							      								      }								  
							      								      return 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
def count ( s , c ) :					      public static int count ( String s , char c ) {		    public static int count ( String s , char c ) {		  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( s [ i ] == c ) :				      	i < s . length ( ) ;					      i < s . length ( ) ;					  
	    res = res + 1				      	i ++ ) {						      i ++ ) {							  
    return res						      	  if ( s . charAt ( i ) == c ) res ++ ;			    	if ( ( s . charAt ( i ) == c ) ) {			  
							      	}							    	  res = res + 1 ;					  
							      	return res ;						    	}							  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
def sumOfSeries ( n ) :					      static int sumOfSeries ( int n ) {			    public static int sumOfSeries ( int n ) {			  success : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )	      	i <= n ;						      i <= n ;							  
    return sum						      	i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;	      i ++ ) {							  
							      	return sum ;						    	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;		  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    static int nextPowerOf2 ( int n ) {				  error : NEXT_POWER_OF_2.java:26: error: bad operan
    count = 0						      	int count = 0 ;						      int count = 0 ;						  d type int for unary operator '!'   if ( ( n != 0
    if ( n and not ( n & ( n - 1 ) ) ) :		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( ( n != 0 ) && ! ( ( n & ( n - 1 ) ) ) ) {		  ) && ! ( ( n & ( n - 1 ) ) ) ) {
	return n					      	while ( n != 0 ) {					    	return n ;						      ^ 1 error
    while ( n != 0 ) :					      	  n >>= 1 ;						      }								  
	n >>= 1						      	  count += 1 ;						      while ( ( n != 0 ) ) {					  
	count += 1					      	}							    	n >>= 1 ;						  
    return 1 << count					      	return 1 << count ;					    	count ++ ;						  
							      }								      }								  
							      								      return 1 << count ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
def isPower ( x , y ) :					      public static boolean isPower ( int x , int y ) {		    public static boolean isPower ( int x , int y ) {		  failure : #Results:6, 10
    if ( x == 1 ) :					      	if ( x == 1 ) return ( y == 1 ) ;			      if ( ( x == 1 ) ) {					  
	return ( y == 1 )				      	int pow = 1 ;						    	return ( y == 1 ) ;					  
    pow = 1						      	while ( pow < y ) pow = pow * x ;			      }								  
    while ( pow < y ) :					      	return ( pow == y ) ;					      int pow = 1 ;						  
	pow = pow * x					      }								      while ( ( pow = pow * x ) < y ) {				  
    return ( pow == y )					      								    	pow = pow * x ;						  
							      								      }								  
							      								      return ( pow == y ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
def allCharactersSame ( s ) :				      static boolean allCharactersSame ( String s ) {		    public static boolean allCharactersSame ( String s ) {	  success : None
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if s [ i ] != s [ 0 ] :				      	i < n ;							      i < n ;							  
	    return False				      	i ++ ) if ( s . charAt ( i ) != s . charAt ( 0 ) ) return f   i ++ ) {							  
    return True						      	return true ;						    	if ( s . charAt ( i ) != s . charAt ( 0 ) ) {		  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER			  FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
def center ( x1 , x2 , y1 , y2 ) :			      static void center ( int x1 , int x2 , int y1 , int y2 ) {    public static void center ( int x1 , int x2 , int y1 , int y2 script_not_found : None
    print ( int ( ( x1 + x2 ) / 2 ) , end = "" )	      	System . out . print ( ( float ) ( x1 + x2 ) / 2 + ", " + (   System . out . print ( ( int ) ( ( x1 + x2 ) / 2 ) ) ;	  
    print ( "," , int ( ( y1 + y2 ) / 2 ) )		      }								      System . out . println ( "," + ( int ) ( ( y1 + y2 ) / 2 )  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
def kthgroupsum ( k ) :					      public static int kthgroupsum ( int k ) {			    public static int kthgroupsum ( int k ) {			  success : None
    cur = int ( ( k * ( k - 1 ) ) + 1 )			      	int cur = ( k * ( k - 1 ) ) + 1 ;			      int cur = ( int ) ( ( k * ( k - 1 ) ) + 1 ) ;		  
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    while k :						      	while ( k -- > 0 ) {					      while ( k > 0 ) {						  
	sum += cur					      	  sum += cur ;						    	sum += cur ;						  
	cur += 2					      	  cur += 2 ;						    	cur += 2 ;						  
	k = k - 1					      	}							    	k = k - 1 ;						  
    return sum						      	return sum ;						      }								  
							      }								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def getSum ( n ) :					      static int getSum ( int n ) {				    static int getSum ( int n ) {				  success : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    while ( n != 0 ) :					      	while ( n != 0 ) {					      while ( ( n != 0 ) ) {					  
	sum = sum + int ( n % 10 )			      	  sum = sum + n % 10 ;					    	sum = sum + ( int ) ( n % 10 ) ;			  
	n = int ( n / 10 )				      	  n = n / 10 ;						    	n = ( int ) ( n / 10 ) ;				  
    return sum						      	}							      }								  
							      	return sum ;						      return sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
def spiralDiaSum ( n ) :				      static int spiralDiaSum ( int n ) {			    public static int spiralDiaSum ( int n ) {			  script_not_found : None
    if n == 1 :						      	if ( n == 1 ) return 1 ;				      if ( n == 1 ) {						  
	return 1					      	return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 	return 1 ;						  
    return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) }								      }								  
							      								      return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
def isDivisible ( n ) :					      static boolean isDivisible ( long n ) {			    static boolean isDivisible ( long n ) {			  success : None
    while ( int ( n / 100 ) ) :				      	while ( n / 100 > 0 ) {					      while ( ( ( long ) n / 100 ) != 0 ) {			  
	last_digit = int ( n % 10 )			      	  int last_digit = ( int ) n % 10 ;			    	int lastDigit = ( int ) n % 10 ;			  
	n = int ( n / 10 )				      	  n /= 10 ;						    	n = ( int ) n / 10 ;					  
	n += last_digit * 3				      	  n += last_digit * 3 ;					    	n += lastDigit * 3 ;					  
    return ( n % 29 == 0 )				      	}							      }								  
							      	return ( n % 29 == 0 ) ;				      return ( n % 29 == 0 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
def countOccurrences ( arr , n , x ) :			      static int countOccurrences ( int arr [ ] , int n , int x ) { static int countOccurrences ( int [ ] arr , int n , int x ) { success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if x == arr [ i ] :				      	i < n ;							      i < n ;							  
	    res += 1					      	i ++ ) if ( x == arr [ i ] ) res ++ ;			      i ++ ) {							  
    return res						      	return res ;						    	if ( x == arr [ i ] ) {					  
							      }								    	  res ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
def Right_most_setbit ( num ) :				      static int Right_most_setbit ( int num ) {		    protected static int rightMostSetBit ( int num ) {		  script_not_found : None
    pos = 1						      	int pos = 1 ;						      int pos = 1 ;						  
    for i in range ( INT_SIZE ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if not ( num & ( 1 << i ) ) :			      	i < INT_SIZE ;						      i < INT_SIZE ;						  
	    pos += 1					      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;		    	if ( ! ( num & ( 1 << i ) ) ) {				  
	    break					      	  else break ;						    	  pos ++ ;						  
    return pos						      	}							    	}							  
							      	return pos ;						    	else {							  
							      }								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return pos ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    static int nextPowerOf2 ( int n ) {				  error : SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_
    p = 1						      	int p = 1 ;						      int p = 1 ;						  TO_N_1.java:23: error: bad operand type int for un
    if ( n and not ( n & ( n - 1 ) ) ) :		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( ( n != 0 ) && ! ( ( n & ( n - 1 ) ) ) ) {		  ary operator '!'   if ( ( n != 0 ) && ! ( ( n & (
	return n					      	while ( p < n ) p <<= 1 ;				    	return n ;						  n - 1 ) ) ) ) {		       ^ 1 error
    while ( p < n ) :					      	return p ;						      }								  
	p <<= 1						      }								      while ( ( p = p ) < n ) {					  
    return p						      								    	p <<= 1 ;						  
							      								      }								  
							      								      return p ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
def numberOfPaths ( m , n ) :				      static int numberOfPaths ( int m , int n ) {		    static int numberOfPaths ( int m , int n ) {		  failure : #Results:0, 10
    for i in range ( n , ( m + n - 1 ) ) :		      	int path = 1 ;						      int i ;							  
	path *= i					      	for ( int i = n ;					      int path = 0 ;						  
	path //= ( i - n + 1 )				      	i < ( m + n - 1 ) ;					      for ( i = n ;						  
    return path						      	i ++ ) {						      i < ( m + n - 1 ) ;					  
							      	  path *= i ;						      i ++ ) {							  
							      	  path /= ( i - n + 1 ) ;				    	path *= i ;						  
							      	}							    	path /= ( i - n + 1 ) ;					  
							      	return path ;						      }								  
							      }								      return path ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
def search ( arr , n , x ) :				      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int [ ] arr , int n , int x ) {	  success : None
    i = 0						      	int i ;							      int i = 0 ;						  
    for i in range ( i , n ) :				      	for ( i = 0 ;						      for ( ;							  
	if ( arr [ i ] == x ) :				      	i < n ;							      i < n ;							  
	    return i					      	i ++ ) {						      i ++ ) {							  
    return - 1						      	  if ( arr [ i ] == x ) {				    	if ( ( arr [ i ] == x ) ) {				  
							      	    return i ;						    	  return i ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return - 1 ;						      return - 1 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
def isPerfectSquare ( n ) :				      static boolean isPerfectSquare ( int n ) {		    public static boolean isPerfectSquare ( int n ) {		  success : None
    i = 1						      	for ( int sum = 0 , i = 1 ;				      int i = 1 ;						  
    the_sum = 0						      	sum < n ;						      int theSum = 0 ;						  
    while the_sum < n :					      	i += 2 ) {						      while ( theSum < n ) {					  
	the_sum += i					      	  sum += i ;						    	theSum += i ;						  
	if the_sum == n :				      	  if ( sum == n ) return true ;				    	if ( theSum == n ) {					  
	    return True					      	}							    	  return true ;						  
	i += 2						      	return false ;						    	}							  
    return False					      }								    	i += 2 ;						  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
def catalan ( n ) :					      int catalan ( int n ) {					    public static int catalan ( int n ) {			  script_not_found : None
    if n <= 1 :						      	int res = 0 ;						      if ( n <= 1 ) {						  
	return 1					      	if ( n <= 1 ) {						    	return 1 ;						  
    res = 0						      	  return 1 ;						      }								  
    for i in range ( n ) :				      	}							      int res = 0 ;						  
	res += catalan ( i ) * catalan ( n - i - 1 )	      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    return res						      	i < n ;							      i < n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  res += catalan ( i ) * catalan ( n - i - 1 ) ;	    	res += catalan ( i ) * catalan ( n - i - 1 ) ;		  
							      	}							      }								  
							      	return res ;						      return res ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
def transpose ( A , B ) :				      static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {	    public static void transpose ( int [ ] [ ] A , int [ ] [ ] B  script_not_found : None
    for i in range ( N ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( N ) :				      	for ( i = 0 ;						      i < N ;							  
	    B [ i ] [ j ] = A [ j ] [ i ]		      	i < N ;							      i ++ ) {							  
							      	i ++ ) for ( j = 0 ;					    	for ( int j = 0 ;					  
							      	j < N ;							    	j < N ;							  
							      	j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			    	j ++ ) {						  
							      }								    	  B [ i ] [ j ] = A [ j ] [ i ] ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
def first ( str ) :					      static char first ( String str ) {			    public static String first ( String [ ] str ) {		  error : FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATI
    for i in range ( 0 , len ( str ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  VE_AND_RECURSIVE.java:29: error: incompatible type
	if ( str [ i ].istitle ( ) ) :			      	i < str . length ( ) ;					      ;								  s: int cannot be converted to String	 return 0 ;
	    return str [ i ]				      	i ++ ) if ( Character . isUpperCase ( str . charAt ( i ) )    i ++ ) {							  	   ^ FIRST_UPPERCASE_LETTER_IN_A_STRING_ITER
    return 0						      	return 0 ;						    	if ( ( str [ i ] . indexOf ( "." ) != - 1 ) ) {		  ATIVE_AND_RECURSIVE.java:48: error: incompatible t
							      }								    	  return str [ i ] ;					  ypes: String cannot be converted to String[]
							      								    	}							     if(f_filled(param0.get(i)) == f_gold(param0.get
							      								      }								  (i)))				      ^ Note: Some m
							      								      return 0 ;						  essages have been simplified; recompile with -Xdia
							      								    }								  gs:verbose to get full output 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
def rotate ( arr , n ) :				      static void rotate ( ) {					    public static void rotate ( int [ ] arr , int n ) {		  script_not_found : None
    x = arr [ n - 1 ]					      	int x = arr [ arr . length - 1 ] , i ;			      int x = arr [ n - 1 ] ;					  
    for i in range ( n - 1 , 0 , - 1 ) :		      	for ( i = arr . length - 1 ;				      for ( int i = n - 1 ;					  
	arr [ i ] = arr [ i - 1 ]			      	i > 0 ;							      i > 0 ;							  
    arr [ 0 ] = x					      	i -- ) arr [ i ] = arr [ i - 1 ] ;			      i -- ) {							  
							      	arr [ 0 ] = x ;						    	arr [ i ] = arr [ i - 1 ] ;				  
							      }								      }								  
							      								      arr [ 0 ] = x ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
def evenFib ( n ) :					      static long evenFib ( int n ) {				    public static int evenFib ( int n ) {			  script_not_found : None
    if ( n < 1 ) :					      	if ( n < 1 ) return n ;					      if ( ( n < 1 ) ) {					  
	return n					      	if ( n == 1 ) return 2 ;				    	return n ;						  
    if ( n == 1 ) :					      	return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;    }								  
	return 2					      }								      if ( ( n == 1 ) ) {					  
    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )  								    	return 2 ;						  
							      								      }								  
							      								      return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
def kLargest ( arr , k ) :				      public static void kLargest ( Integer [ ] arr , int k ) {	    public static void kLargest ( int [ ] arr , int k ) {	  script_not_found : None
    arr.sort ( reverse = True )				      	Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;      Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;	  
    for i in range ( k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( arr [ i ] , end = " " )			      	i < k ;							      i < k ;							  
							      	i ++ ) System . out . print ( arr [ i ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
def compute ( a , b ) :					      static double compute ( int a , int b ) {			    public static double compute ( double a , double b ) {	  failure : #Results:1, 10
    AM = ( a + b ) / 2					      	double AM , GM , HM ;					      double AM = ( a + b ) / 2 ;				  
    GM = math.sqrt ( a * b )				      	AM = ( a + b ) / 2 ;					      double GM = Math . sqrt ( a * b ) ;			  
    HM = ( GM * GM ) / AM				      	GM = Math . sqrt ( a * b ) ;				      double HM = ( GM * GM ) / AM ;				  
    return HM						      	HM = ( GM * GM ) / AM ;					      return HM ;						  
							      	return HM ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			      SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			    SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES				  SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES
--							      --							    --								  --
def findS ( s ) :					      static int findS ( int s ) {				    static int findS ( int s ) {				  success : None
    _sum = 0						      	int sum = 0 ;						      int _sum = 0 ;						  
    n = 1						      	for ( int n = 1 ;					      int n = 1 ;						  
    while ( _sum < s ) :				      	sum < s ;						      while ( ( _sum = _sum ) < s ) {				  
	_sum += n * n					      	n ++ ) {						    	_sum += n * n ;						  
	n += 1						      	  sum += n * n ;					    	n ++ ;							  
    n -= 1						      	  if ( sum == s ) return n ;				      }								  
    if _sum == s :					      	}							      n -- ;							  
	return n					      	return - 1 ;						      if ( _sum == s ) return n ;				  
    return - 1						      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
def isTriangular ( num ) :				      static boolean isTriangular ( int num ) {			    public static boolean isTriangular ( int num ) {		  success : None
    if ( num < 0 ) :					      	if ( num < 0 ) return false ;				      if ( ( num < 0 ) ) {					  
	return False					      	int sum = 0 ;						    	return false ;						  
    sum , n = 0 , 1					      	for ( int n = 1 ;					      }								  
    while ( sum <= num ) :				      	sum <= num ;						      int sum = 0 , n = 1 ;					  
	sum = sum + n					      	n ++ ) {						      while ( ( sum <= num ) ) {				  
	if ( sum == num ) :				      	  sum = sum + n ;					    	sum = sum + n ;						  
	    return True					      	  if ( sum == num ) return true ;			    	if ( ( sum == num ) ) {					  
	n += 1						      	}							    	  return true ;						  
    return False					      	return false ;						    	}							  
							      }								    	n ++ ;							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    static int nextPowerOf2 ( int n ) {				  success : None
    n -= 1						      	n -- ;							      n -- ;							  
    n |= n >> 1						      	n |= n >> 1 ;						      n |= n >>> 1 ;						  
    n |= n >> 2						      	n |= n >> 2 ;						      n |= n >>> 2 ;						  
    n |= n >> 4						      	n |= n >> 4 ;						      n |= n >>> 4 ;						  
    n |= n >> 8						      	n |= n >> 8 ;						      n |= n >>> 8 ;						  
    n |= n >> 16					      	n |= n >> 16 ;						      n |= n >>> 16 ;						  
    n += 1						      	n ++ ;							      n ++ ;							  
    return n						      	return n ;						      return n ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
def PowerOFPINnfactorial ( n , p ) :			      static int PowerOFPINnfactorial ( int n , int p ) {	    public static int PowerOFPINnfactorial ( int n , int p ) {	  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    temp = p						      	for ( int i = 1 ;					      int temp = p ;						  
    while ( temp <= n ) :				      	i <= n ;						      while ( ( temp <= n ) ) {					  
	ans += n / temp					      	i ++ ) {						    	ans += n / temp ;					  
	temp = temp * p					      	  int count = 0 , temp = i ;				    	temp = temp * p ;					  
    return ans						      	  while ( temp % p == 0 ) {				      }								  
							      	    count ++ ;						      return ans ;						  
							      	    temp = temp / p ;					    }								  
							      	  }							    								  
							      	  ans += count ;					    								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
def reverse ( string ) :				      void reverse ( String str ) {				    public static void reverse ( String string ) {		  script_not_found : None
    if len ( string ) == 0 :				      	if ( ( str == null ) || ( str . length ( ) <= 1 ) ) System    if ( string . length ( ) == 0 ) {				  
	return						      	else {							    	return ;						  
    temp = string [ 0 ]					      	  System . out . print ( str . charAt ( str . length ( ) -    }								  
    reverse ( string [ 1 : ] )				      	  reverse ( str . substring ( 0 , str . length ( ) - 1 ) )    char temp = string . charAt ( 0 ) ;			  
    print ( temp , end = '' )				      	}							      reverse ( string . substring ( 1 ) ) ;			  
							      }								      System . out . print ( temp ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
def isPowerOfFour ( n ) :				      static int isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) ) {					  4_OR_NOT.java:52: error: incomparable types: boole
	return False					      	while ( n != 1 ) {					    	return false ;						  an and int	     if(f_filled(param0.get(i)) == f
    while ( n != 1 ) :					      	  if ( n % 4 != 0 ) return 0 ;				      }								  _gold(param0.get(i)))
	if ( n % 4 != 0 ) :				      	  n = n / 4 ;						      while ( ( n != 1 ) ) {					  	 ^ 1 error
	    return False				      	}							    	if ( ( n % 4 != 0 ) ) {					  
	n = n // 4					      	return 1 ;						    	  return false ;					  
    return True						      }								    	}							  
							      								    	n = n / 4 ;						  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
def isPowerOfTwo ( n ) :				      static boolean isPowerOfTwo ( int n ) {			    public static boolean isPowerOfTwo ( int n ) {		  success : None
    if ( n == 0 ) :					      	if ( n == 0 ) return false ;				      if ( ( n == 0 ) ) {					  
	return False					      	while ( n != 1 ) {					    	return false ;						  
    while ( n != 1 ) :					      	  if ( n % 2 != 0 ) return false ;			      }								  
	if ( n % 2 != 0 ) :				      	  n = n / 2 ;						      while ( ( n != 1 ) ) {					  
	    return False				      	}							    	if ( ( n % 2 != 0 ) ) {					  
	n = n // 2					      	return true ;						    	  return false ;					  
    return True						      }								    	}							  
							      								    	n = n / 2 ;						  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
def findMinZero ( p ) :					      static int findMinZero ( int p ) {			    static int findMinZero ( int p ) {				  failure : #Results:0, 10
    first = 1						      	int first = 1 , second = 1 , number = 2 , next = 1 ;	      int first = 1 ;						  
    second = 1						      	while ( next > 0 ) {					      int second = 1 ;						  
    number = 2						      	  next = ( first + second ) % p ;			      int number = 2 ;						  
    next = 1						      	  first = second ;					      int next = 1 ;						  
    while ( next ) :					      	  second = next ;					      while ( ( next = ( first + second ) % p ) != 0 ) {	  
	next = ( first + second ) % p			      	  number ++ ;						    	next = ( first + second ) % p ;				  
	first = second					      	}							    	first = second ;					  
	second = next					      	return number ;						    	second = next ;						  
	number = number + 1				      }								    	number = number + 1 ;					  
    return number					      								      }								  
							      								      return number ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
def findExtra ( arr1 , arr2 , n ) :			      static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n )  static int findExtra ( int [ ] arr1 , int [ ] arr2 , int n )  success : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr1 [ i ] != arr2 [ i ] ) :		      	i < n ;							      i <= n ;							  
	    return i					      	i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;	      i ++ ) {							  
    return n						      	return n ;						    	if ( ( arr1 [ i ] != arr2 [ i ] ) ) {			  
							      }								    	  return i ;						  
							      								    	}							  
							      								      }								  
							      								      return n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1
--							      --							    --								  --
def countDigits ( a , b ) :				      public static int countDigits ( int a , int b ) {		    static int countDigits ( int a , int b ) {			  error : NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1.java:2
    if ( a == 0 or b == 0 ) :				      	if ( a == 0 || b == 0 ) return 1 ;			      if ( ( a == 0 ) || ( b == 0 ) ) {				  3: error: incompatible types: possible lossy conve
	return 1					      	return ( int ) Math . floor ( Math . log10 ( Math . abs ( a 	return 1 ;						  rsion from double to int   return Math . floor ( M
    return math.floor ( math.log10 ( abs ( a ) ) + math.log10 }								      }								  ath . log10 ( Math . abs ( a ) ) + Math . log10 (
							      								      return Math . floor ( Math . log10 ( Math . abs ( a ) ) + M Math . abs ( b ) ) ) + 1 ;
							      								    }								  
							      								    								  			 ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
def isPower ( x , y ) :					      static boolean isPower ( int x , int y ) {		    public static int isPower ( double x , double y ) {		  error : CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMB
    res1 = math.log ( y ) / math.log ( x )		      	int res1 = ( int ) Math . log ( y ) / ( int ) Math . log (    double res1 = Math . log ( y ) / Math . log ( x ) ;	  ER_1.java:53: error: incomparable types: int and b
    res2 = math.log ( y ) / math.log ( x )		      	double res2 = Math . log ( y ) / Math . log ( x ) ;	      double res2 = Math . log ( y ) / Math . log ( x ) ;	  oolean	 if(f_filled(param0.get(i),param1.ge
    return 1 if ( res1 == res2 ) else 0			      	return ( res1 == res2 ) ;				      return ( res1 == res2 ) ? 1 : 0 ;				  t(i)) == f_gold(param0.get(i),param1.get(i)))
							      }								    }								  					       ^ 1 e
							      								    								  rror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
def smallest ( x , y , z ) :				      static int smallest ( int x , int y , int z ) {		    public static int smallest ( int x , int y , int z ) {	  success : None
    c = 0						      	int c = 0 ;						      int c = 0 ;						  
    while ( x and y and z ) :				      	while ( x != 0 && y != 0 && z != 0 ) {			      while ( ( x > 0 && y > 0 && z > 0 ) ) {			  
	x = x - 1					      	  x -- ;						    	x = x - 1 ;						  
	y = y - 1					      	  y -- ;						    	y = y - 1 ;						  
	z = z - 1					      	  z -- ;						    	z = z - 1 ;						  
	c = c + 1					      	  c ++ ;						    	c = c + 1 ;						  
    return c						      	}							      }								  
							      	return c ;						      return c ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
def findS ( s ) :					      static int findS ( int s ) {				    static int findS ( int s ) {				  success : None
    _sum = 0						      	int sum = 0 ;						      int _sum = 0 ;						  
    n = 1						      	for ( int n = 1 ;					      int n = 1 ;						  
    while ( _sum < s ) :				      	sum < s ;						      while ( ( _sum = _sum ) < s ) {				  
	_sum += n * n * n				      	n ++ ) {						    	_sum += n * n * n ;					  
	n += 1						      	  sum += n * n * n ;					    	n ++ ;							  
    n -= 1						      	  if ( sum == s ) return n ;				      }								  
    if _sum == s :					      	}							      n -- ;							  
	return n					      	return - 1 ;						      if ( _sum == s ) return n ;				  
    return - 1						      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
def check ( st ) :					      static boolean check ( String str ) {			    public static boolean check ( String st ) {			  error : Exception in thread "main" java.lang.Strin
    n = len ( st )					      	int n = str . length ( ) ;				      int n = st . length ( ) ;					  gIndexOutOfBoundsException: String index out of ra
    digitSum = 0					      	int digitSum = 0 ;					      int digitSum = 0 ;					  nge: 5 	at java.base/java.lang.StringLatin1.charAt
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  (StringLatin1.java:47) 	at java.base/java.lang.Str
	digitSum = digitSum + ( int ) ( st [ i ] )	      	i < n ;							      i <= n ;							  ing.charAt(String.java:693) 	at CHECK_LARGE_NUMBER
    return ( digitSum % 9 == 0 )			      	i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      i ++ ) digitSum = digitSum + ( int ) st . charAt ( i ) ;	  _DIVISIBLE_9_NOT.f_filled(CHECK_LARGE_NUMBER_DIVIS
							      	return ( digitSum % 9 == 0 ) ;				      return ( digitSum % 9 == 0 ) ;				  IBLE_9_NOT.java:28) 	at CHECK_LARGE_NUMBER_DIVISIB
							      }								    }								  LE_9_NOT.main(CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT.j
							      								    								  ava:48)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS
--							      --							    --								  --
def countDigits ( a , b ) :				      static int countDigits ( int a , int b ) {		    static int countDigits ( int a , int b ) {			  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    p = abs ( a * b )					      	int p = Math . abs ( a * b ) ;				      int p = Math . abs ( a * b ) ;				  
    if ( p == 0 ) :					      	if ( p == 0 ) return 1 ;				      if ( ( p == 0 ) ) {					  
	return 1					      	while ( p > 0 ) {					    	return 1 ;						  
    while ( p > 0 ) :					      	  count ++ ;						      }								  
	count = count + 1				      	  p = p / 10 ;						      while ( ( p > 0 ) ) {					  
	p = p // 10					      	}							    	count = count + 1 ;					  
    return count					      	return count ;						    	p = p / 10 ;						  
							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
def answer_query ( a , n , l , r ) :			      static int answer_query ( int a [ ] , int n , int l , int r ) public static int answerQuery ( int [ ] a , int n , int l , i success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( l , r ) :				      	for ( int i = l ;					      for ( int i = l ;						  
	if ( a [ i ] == a [ i + 1 ] ) :			      	i < r ;							      i < r ;							  
	    count += 1					      	i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;	      i ++ ) {							  
    return count					      	return count ;						    	if ( ( a [ i ] == a [ i + 1 ] ) ) {			  
							      }								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
def swap ( xp , yp ) :					      static void swap ( int [ ] xp , int [ ] yp ) {		    public static void swap ( int [ ] xp , int [ ] yp ) {	  success : None
    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;				  
    yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      	yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;				  
    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
def findFrequency ( arr , n , left , right , element ) :      public static int findFrequency ( int arr [ ] , int n , int l static int findFrequency ( int [ ] arr , int n , int left , i script_not_found : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( left - 1 , right ) :		      	for ( int i = left - 1 ;				      for ( int i = left - 1 ;					  
	if ( arr [ i ] == element ) :			      	i < right ;						      i < right ;						  
	    count += 1					      	++ i ) if ( arr [ i ] == element ) ++ count ;		      i ++ ) {							  
    return count					      	return count ;						    	if ( ( arr [ i ] == element ) ) {			  
							      }								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
def lexSmallest ( a , n ) :				      static String lexsmallest ( String a [ ] , int n ) {	    public static String lexSmallest ( String [ ] a , int n ) {	  script_not_found : None
    a.sort ( reverse = True )				      	sort ( a , n ) ;					      Arrays . sort ( a , Collections . reverseOrder ( ) ) ;	  
    answer = ""						      	String answer = "" ;					      String answer = "" ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	answer += a [ i ]				      	i < n ;							      i < n ;							  
    return answer					      	i ++ ) answer += a [ i ] ;				      i ++ ) {							  
							      	return answer ;						    	answer += a [ i ] ;					  
							      }								      }								  
							      								      return answer ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
def minSum ( n ) :					      static int minSum ( int n ) {				    public static int minSum ( int n ) {			  success : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    while ( n > 0 ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) ) {					  
	sum += ( n % 10 )				      	  sum += ( n % 10 ) ;					    	sum += ( n % 10 ) ;					  
	n //= 10					      	  n /= 10 ;						    	n /= 10 ;						  
    if ( sum == 1 ) :					      	}							      }								  
	return 10					      	if ( sum == 1 ) return 10 ;				      if ( ( sum == 1 ) ) {					  
    return sum						      	return sum ;						    	return 10 ;						  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
def fib ( n ) :						      static int fib ( int n ) {				    public static int fib ( int n ) {				  script_not_found : None
    if n < 6 :						      	if ( n < 6 ) return f [ n ] ;				      if ( n < 6 ) {						  
	return f [ n ]					      	int t = 5 ;						    	return f [ n ] ;					  
    t = 5						      	int fn = 5 ;						      }								  
    fn = 5						      	while ( t < n ) {					      int t = 5 ;						  
    while t < n :					      	  fn = ( int ) Math . round ( fn * PHI ) ;		      int fn = 5 ;						  
	fn = round ( fn * PHI )				      	  t ++ ;						      while ( t < n ) {						  
	t += 1						      	}							    	fn = Math . round ( fn * PHI ) ;			  
    return fn						      	return fn ;						    	t ++ ;							  
							      }								      }								  
							      								      return fn ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
def check ( degree , n ) :				      static boolean check ( int degree [ ] , int n ) {		    public static boolean check ( int [ ] degree , int n ) {	  error : CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRE
    deg_sum = sum ( degree )				      	int deg_sum = 0 ;					      int degsSum = Arrays . stream ( degree ) . mapToInt ( Integ SENT_GRAPH_TREE.java:25: error: cannot find symbol
    if ( 2 * ( n - 1 ) == deg_sum ) :			      	for ( int i = 0 ;					      if ( ( 2 * ( n - 1 ) ) == degsSum ) {			     int degsSum = Arrays . stream ( degree ) . mapT
	return True					      	i < n ;							    	return true ;						  oInt ( Integer :: valueOf ) . sum ( ) ;
    else :						      	i ++ ) {						      }								  				   ^   symbol:	 met
	return False					      	  deg_sum += degree [ i ] ;				      else {							  hod mapToInt(Integer::valueOf)   location: interfa
							      	}							    	return false ;						  ce IntStream 1 error
							      	return ( 2 * ( n - 1 ) == deg_sum ) ;			      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS
--							      --							    --								  --
def squareRootExists ( n , p ) :			      static boolean squareRootExists ( int n , int p ) {	    public static boolean squareRootExists ( int n , int p ) {	  success : None
    n = n % p						      	n = n % p ;						      n = n % p ;						  
    for x in range ( 2 , p , 1 ) :			      	for ( int x = 2 ;					      for ( int x = 2 ;						  
	if ( ( x * x ) % p == n ) :			      	x < p ;							      x < p ;							  
	    return True					      	x ++ ) if ( ( x * x ) % p == n ) return true ;		      x += 1 ) {						  
    return False					      	return false ;						    	if ( ( ( x * x ) % p ) == n ) {				  
							      }								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
def count ( n , x ) :					      static int count ( int n , int x ) {			    public static int count ( int n , int x ) {			  success : None
    cnt = 0						      	int count = 0 ;						      int cnt = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if i <= x :					      	i <= n && i <= x ;					      i <= n ;							  
	    if x // i <= n and x % i == 0 :		      	i ++ ) {						      i ++ ) {							  
		cnt += 1				      	  if ( x / i <= n && x % i == 0 ) count ++ ;		    	if ( i <= x ) {						  
    return cnt						      	}							    	  if ( x / i <= n && x % i == 0 ) {			  
							      	return count ;						    	    cnt ++ ;						  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return cnt ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
def smallest ( x , y , z ) :				      static int smallest ( int x , int y , int z ) {		    public static double smallest ( double x , double y , double  error : SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARI
    if ( not ( y / x ) ) :				      	if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;     if ( ( ! ( y / x ) ) ) {					  SON_OPERATORS_1.java:20: error: bad operand type d
	return y if ( not ( y / z ) ) else z		      	return ( ( x / z ) != 1 ) ? x : z ;			    	return ( ! ( y / z ) ) ? y : z ;			  ouble for unary operator '!'	 if ( ( ! ( y / x )
    return x if ( not ( x / z ) ) else z		      }								      }								  ) ) {		 ^ SMALLEST_OF_THREE_INTEGERS_WITHOU
							      								      return ( ! ( x / z ) ) ? x : z ;				  T_COMPARISON_OPERATORS_1.java:21: error: bad opera
							      								    }								  nd type double for unary operator '!'	    return (
							      								    								   ! ( y / z ) ) ? y : z ;		^ SMALLEST_O
							      								    								  F_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1.ja
							      								    								  va:23: error: bad operand type double for unary op
							      								    								  erator '!'   return ( ! ( x / z ) ) ? x : z ;
							      								    								  	 ^ 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
def binomialCoeff ( n , k ) :				      static int binomialCoeff ( int n , int k ) {		    public static int binomialCoeff ( int n , int k ) {		  script_not_found : None
    if k == 0 or k == n :				      	if ( k == 0 || k == n ) return 1 ;			      if ( k == 0 || k == n ) {					  
	return 1					      	return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n  	return 1 ;						  
    return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff (  }								      }								  
							      								      return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
def sumBetweenTwoKth ( arr , n , k1 , k2 ) :		      static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) public static int sumBetweenTwoKth ( int [ ] arr , int n , in script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( k1 , k2 - 1 ) :			      	for ( int i = k1 ;					      for ( int i = k1 ;					  
	result += arr [ i ]				      	i < k2 - 1 ;						      i <= k2 - 1 ;						  
    return result					      	i ++ ) result += arr [ i ] ;				      i ++ ) {							  
							      	return result ;						    	result += arr [ i ] ;					  
							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
def decimalToBinary ( N ) :				      static int decimalToBinary ( int N ) {			    public static int decimalToBinary ( int N ) {		  success : None
    B_Number = 0					      	int B_Number = 0 ;					      int B_Number = 0 ;					  
    cnt = 0						      	int cnt = 0 ;						      int cnt = 0 ;						  
    while ( N != 0 ) :					      	while ( N != 0 ) {					      while ( ( N != 0 ) ) {					  
	rem = N % 2					      	  int rem = N % 2 ;					    	int rem = N % 2 ;					  
	c = pow ( 10 , cnt )				      	  double c = Math . pow ( 10 , cnt ) ;			    	double c = Math . pow ( 10 , cnt ) ;			  
	B_Number += rem * c				      	  B_Number += rem * c ;					    	B_Number += rem * c ;					  
	N //= 2						      	  N /= 2 ;						    	N /= 2 ;						  
	cnt += 1					      	  cnt ++ ;						    	cnt ++ ;						  
    return B_Number					      	}							      }								  
							      	return B_Number ;					      return B_Number ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
def isOneFlip ( str ) :					      static boolean isOneFlip ( String str ) {			    public static boolean isOneFlip ( String str ) {		  error : Exception in thread "main" java.lang.Strin
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  gIndexOutOfBoundsException: begin 5, end 6, length
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				   5 	at java.base/java.lang.String.checkBoundsBegin
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  End(String.java:3319) 	at java.base/java.lang.Stri
	sum += int ( str [ i ] ) - int ( '0' )		      	i < n ;							      i <= n ;							  ng.substring(String.java:1874) 	at CHANGE_BITS_CAN
    return ( sum == n - 1 or sum == 1 )			      	i ++ ) sum += str . charAt ( i ) - '0' ;		      i ++ ) {							  _MADE_ONE_FLIP_1.f_filled(CHANGE_BITS_CAN_MADE_ONE
							      	return ( sum == n - 1 || sum == 1 ) ;			    	sum += Integer . parseInt ( str . substring ( i , i + 1 ) _FLIP_1.java:29) 	at CHANGE_BITS_CAN_MADE_ONE_FLIP
							      }								      }								  _1.main(CHANGE_BITS_CAN_MADE_ONE_FLIP_1.java:50)
							      								      return ( sum == n - 1 || sum == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
def recursiveReverse ( str , i = 0 ) :			      static void recursiveReverse ( char [ ] str , int i ) {	    static void recursiveReverse ( String [ ] str , int i ) {	  script_not_found : None
    n = len ( str )					      	int n = str . length ;					      int n = str . length ;					  
    if i == n // 2 :					      	if ( i == n / 2 ) return ;				      if ( i == n / 2 ) return ;				  
	return						      	swap ( str , i , n - i - 1 ) ;				      str [ i ] = str [ n - i - 1 ] ;				  
    str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] , str [ 	recursiveReverse ( str , i + 1 ) ;			      recursiveReverse ( str , i + 1 ) ;			  
    recursiveReverse ( str , i + 1 )			      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
def countNonDecreasing ( n ) :				      static long countNonDecreasing ( int n ) {		    static int countNonDecreasing ( int n ) {			  failure : #Results:2, 10
    N = 10						      	int N = 10 ;						      int N = 10 ;						  
    count = 1						      	long count = 1 ;					      int count = 1 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	count = int ( count * ( N + i - 1 ) )		      	i <= n ;						      i <= n ;							  
	count = int ( count / i )			      	i ++ ) {						      i ++ ) {							  
    return count					      	  count *= ( N + i - 1 ) ;				    	count = ( int ) ( count * ( N + i - 1 ) ) ;		  
							      	  count /= i ;						    	count = ( int ) ( count / i ) ;				  
							      	}							      }								  
							      	return count ;						      return count ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
def isPalindrome ( string ) :				      static boolean isPalindrome ( String str ) {		    public static boolean isPalindrome ( String string ) {	  success : None
    l = 0						      	int l = 0 ;						      int l = 0 ;						  
    h = len ( string ) - 1				      	int h = str . length ( ) - 1 ;				      int h = string . length ( ) - 1 ;				  
    while h > l :					      	while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt    while ( h > l ) {						  
	l += 1						      	return true ;						    	l ++ ;							  
	h -= 1						      }								    	h -- ;							  
	if string [ l - 1 ] != string [ h + 1 ] :	      								    	if ( string . charAt ( l - 1 ) != string . charAt ( h + 1 
	    return False				      								    	  return false ;					  
    return True						      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
def countSubStr ( st , n ) :				      int countSubStr ( char str [ ] , int n ) {		    static int countSubStr ( String st , int n ) {		  script_not_found : None
    m = 0						      	int m = 0 ;						      int m = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( st [ i ] == '1' ) :			      	i < n ;							      i <= n ;							  
	    m = m + 1					      	i ++ ) {						      i ++ ) {							  
    return m * ( m - 1 ) // 2				      	  if ( str [ i ] == '1' ) m ++ ;			    	if ( ( st . charAt ( i ) == '1' ) ) {			  
							      	}							    	  m = m + 1 ;						  
							      	return m * ( m - 1 ) / 2 ;				    	}							  
							      }								      }								  
							      								      return m * ( m - 1 ) / 2 ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    static int findSum ( int n ) {				  success : None
    n -= 1						      	n -- ;							      n -- ;							  
    sum = 0						      	int sum = 0 ;						      double sum = 0 ;						  
    sum += ( n * ( n + 1 ) ) / 2			      	sum += ( n * ( n + 1 ) ) / 2 ;				      sum += ( n * ( n + 1 ) ) / 2 ;				  
    sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6	      	sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		      sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		  
    return int ( sum )					      	return sum ;						      return ( int ) sum ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
def decToBinary ( n ) :					      public void decToBinary ( int n ) {			    static void decToBinary ( int n ) {				  script_not_found : None
    for i in range ( 31 , - 1 , - 1 ) :			      	for ( int i = 31 ;					      for ( int i = 31 ;					  
	k = n >> i					      	i >= 0 ;						      i >= 0 ;							  
	if ( k & 1 ) :					      	i -- ) {						      i -- ) {							  
	    print ( "1" , end = "" )			      	  int k = n >> i ;					    	int k = n >> i ;					  
	else :						      	  if ( ( k & 1 ) > 0 ) System . out . print ( "1" ) ;	    	if ( ( k & 1 ) != 0 ) {					  
	    print ( "0" , end = "" )			      	  else System . out . print ( "0" ) ;			    	  System . out . print ( "1" ) ;			  
							      	}							    	}							  
							      }								    	else {							  
							      								    	  System . out . print ( "0" ) ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
def query ( s , i , j ) :				      static void query ( String s , int i , int j ) {		    public static void query ( String s , int i , int j ) {	  script_not_found : None
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    i %= n						      	i %= n ;						      i %= n ;							  
    j %= n						      	j %= n ;						      j %= n ;							  
    print ( "Yes" ) if s [ i ] == s [ j ] else print ( "No" ) 	if ( s . charAt ( i ) == s . charAt ( j ) ) System . out .    System . out . println ( s . charAt ( i ) == s . charAt ( j 
							      	else System . out . println ( "No" ) ;			    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
def isDivBy9 ( n ) :					      static boolean isDivBy9 ( int n ) {			    public static boolean isDivBy9 ( long n ) {			  success : None
    if ( n == 0 or n == 9 ) :				      	if ( n == 0 || n == 9 ) return true ;			      if ( ( n == 0 ) || ( n == 9 ) ) {				  
	return True					      	if ( n < 9 ) return false ;				    	return true ;						  
    if ( n < 9 ) :					      	return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )    }								  
	return False					      }								      if ( ( n < 9 ) ) {					  
    return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 )  								    	return false ;						  
							      								      }								  
							      								      return isDivBy9 ( ( ( int ) ( n >> 3 ) ) - ( ( int ) ( n &  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
def getInvCount ( arr , n ) :				      static int getInvCount ( int n ) {			    static int getInvCount ( int [ ] arr , int n ) {		  script_not_found : None
    inv_count = 0					      	int inv_count = 0 ;					      int invCount = 0 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n - 1 ;						      i < n ;							  
	    if ( arr [ i ] > arr [ j ] ) :		      	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		inv_count += 1				      	j < n ;							    	for ( int j = i + 1 ;					  
    return inv_count					      	j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	    	j < n ;							  
							      	return inv_count ;					    	j ++ ) {						  
							      }								    	  if ( ( arr [ i ] > arr [ j ] ) ) {			  
							      								    	    invCount ++ ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return invCount ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
def isDivisible ( str , k ) :				      static boolean isDivisible ( String str , int k ) {	    public static boolean isDivisible ( String str , int k ) {	  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    c = 0						      	int c = 0 ;						      int c = 0 ;						  
    for i in range ( 0 , k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( str [ n - i - 1 ] == '0' ) :		      	i < k ;							      i <= k ;							  
	    c += 1					      	i ++ ) if ( str . charAt ( n - i - 1 ) == '0' ) c ++ ;	      i ++ ) {							  
    return ( c == k )					      	return ( c == k ) ;					    	if ( ( str . charAt ( n - i - 1 ) == '0' ) ) {		  
							      }								    	  c ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return ( c == k ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
def printSquares ( n ) :				      static void printSquares ( int n ) {			    public static void printSquares ( int n ) {			  script_not_found : None
    square = 0						      	int square = 0 , odd = 1 ;				      int square = 0 ;						  
    odd = 1						      	for ( int x = 0 ;					      int odd = 1 ;						  
    for x in range ( 0 , n ) :				      	x < n ;							      for ( int x = 0 ;						  
	print ( square , end = " " )			      	x ++ ) {						      x <= n ;							  
	square = square + odd				      	  System . out . print ( square + " " ) ;		      x ++ ) {							  
	odd = odd + 2					      	  square = square + odd ;				    	System . out . print ( square + " " ) ;			  
							      	  odd = odd + 2 ;					    	square = square + odd ;					  
							      	}							    	odd = odd + 2 ;						  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
def breakSum ( n ) :					      static int breakSum ( int n ) {				    static int breakSum ( int n ) {				  success : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return n ;			      if ( ( n == 0 ) || ( n == 1 ) ) {				  
	return n					      	return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 	return n ;						  
    return max ( ( breakSum ( n // 2 ) + breakSum ( n // 3 )  }								      }								  
							      								      return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
def findRotations ( str ) :				      static int findRotations ( String str ) {			    static int findRotations ( String str ) {			  success : None
    tmp = str + str					      	String tmp = str + str ;				      String tmp = str + str ;					  
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	substring = tmp [ i : n ]			      	i <= n ;						      i <= n ;							  
	if ( str == substring ) :			      	i ++ ) {						      i ++ ) {							  
	    return i					      	  String substring = tmp . substring ( i , str . length ( ) 	String substring = tmp . substring ( i , n ) ;		  
    return n						      	  if ( str == substring ) return i ;			    	if ( ( str . equals ( substring ) ) ) {			  
							      	}							    	  return i ;						  
							      	return n ;						    	}							  
							      }								      }								  
							      								      return n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
def fib ( n , lookup ) :				      int fib ( int n ) {					    public static int fib ( int n , int [ ] lookup ) {		  script_not_found : None
    if n == 0 or n == 1 :				      	if ( lookup [ n ] == NIL ) {				      if ( n == 0 || n == 1 ) {					  
	lookup [ n ] = n				      	  if ( n <= 1 ) lookup [ n ] = n ;			    	lookup [ n ] = n ;					  
    if lookup [ n ] is None :				      	  else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	      }								  
	lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , 	}							      if ( lookup [ n ] == 0 ) {				  
    return lookup [ n ]					      	return lookup [ n ] ;					    	lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , loo 
							      }								      }								  
							      								      return lookup [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
def selectRandom ( x ) :				      static int selectRandom ( int x ) {			    public static int selectRandom ( int x ) {			  script_not_found : None
    res = 0						      	count ++ ;						      int res = 0 ;						  
    count = 0						      	if ( count == 1 ) res = x ;				      int count = 0 ;						  
    count += 1						      	else {							      count ++ ;						  
    if ( count == 1 ) :					      	  Random r = new Random ( ) ;				      if ( ( count == 1 ) ) {					  
	res = x						      	  int i = r . nextInt ( count ) ;			    	res = x ;						  
    else :						      	  if ( i == count - 1 ) res = x ;			      }								  
	i = random.randrange ( count )			      	}							      else {							  
	if ( i == count - 1 ) :				      	return res ;						    	int i = new Random ( ) . nextInt ( count ) ;		  
	    res = x					      }								    	if ( ( i == count - 1 ) ) {				  
    return res						      								    	  res = x ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_MULTIPLICATION			      CHECK_INTEGER_OVERFLOW_MULTIPLICATION			    CHECK_INTEGER_OVERFLOW_MULTIPLICATION			  CHECK_INTEGER_OVERFLOW_MULTIPLICATION
--							      --							    --								  --
def isOverflow ( a , b ) :				      static Boolean isOverflow ( long a , long b ) {		    public static boolean isOverflow ( int a , int b ) {	  error : CHECK_INTEGER_OVERFLOW_MULTIPLICATION.java
    if ( a == 0 or b == 0 ) :				      	if ( a == 0 || b == 0 ) return false ;			      if ( ( a == 0 ) || ( b == 0 ) ) {				  :26: error: integer number too large	 if ( ( resu
	return False					      	long result = a * b ;					    	return false ;						  lt >= 9223372036854775807 ) || ( result <= - 92233
    result = a * b					      	if ( a == result / b ) return false ;			      }								  72036854775808 ) ) {			  ^ CHECK_IN
    if ( result >= 9223372036854775807 or result <= - 9223372 	else return true ;					      long result = a * b ;					  TEGER_OVERFLOW_MULTIPLICATION.java:26: error: inte
	result = 0					      }								      if ( ( result >= 9223372036854775807 ) || ( result <= - 922 ger number too large	 if ( ( result >= 9223372036
    if ( a == ( result // b ) ) :			      								    	result = 0 ;						  854775807 ) || ( result <= - 9223372036854775808 )
	print ( result // b )				      								      }								   ) {
	return False					      								      if ( ( a == ( result / b ) ) ) {				  	       ^ 2 errors
    else :						      								    	System . out . println ( result / b ) ;			  
	return True					      								    	return false ;						  
							      								      }								  
							      								      else {							  
							      								    	return true ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
def findNth ( n ) :					      public static int findNth ( int n ) {			    static int findNth ( int n ) {				  error : N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2.j
    nthElement = 19 + ( n - 1 ) * 9			      	int nthElement = 19 + ( n - 1 ) * 9 ;			      int nthElement = 19 + ( n - 1 ) * 9 ;			  ava:23: error: cannot find symbol   int outliersCo
    outliersCount = int ( math.log10 ( nthElement ) ) - 1     	int outliersCount = ( int ) Math . log10 ( nthElement ) - 1   int outliersCount = ( int ) log10 ( nthElement ) - 1 ;	  unt = ( int ) log10 ( nthElement ) - 1 ;
    nthElement += 9 * outliersCount			      	nthElement += 9 * outliersCount ;			      nthElement += 9 * outliersCount ;				  		       ^   symbol:   method log10(in
    return nthElement					      	return nthElement ;					      return nthElement ;					  t)   location: class N_TH_NUMBER_WHOSE_SUM_OF_DIGI
							      }								    }								  TS_IS_TEN_2 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
def remainder ( st ) :					      static int remainder ( String str ) {			    public static int remainder ( String st ) {			  error : Exception in thread "main" java.lang.Strin
    ln = len ( st )					      	int len = str . length ( ) ;				      int ln = st . length ( ) ;				  gIndexOutOfBoundsException: String index out of ra
    rem = 0						      	int num , rem = 0 ;					      int rem = 0 ;						  nge: 8 	at java.base/java.lang.StringLatin1.charAt
    for i in range ( 0 , ln ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  (StringLatin1.java:47) 	at java.base/java.lang.Str
	num = rem * 10 + ( int ) ( st [ i ] )		      	i < len ;						      i <= ln ;							  ing.charAt(String.java:693) 	at PROGRAM_FIND_REMAI
	rem = num % 11					      	i ++ ) {						      i ++ ) {							  NDER_LARGE_NUMBER_DIVIDED_11.f_filled(PROGRAM_FIND
    return rem						      	  num = rem * 10 + ( str . charAt ( i ) - '0' ) ;	    	int num = rem * 10 + ( int ) st . charAt ( i ) ;	  _REMAINDER_LARGE_NUMBER_DIVIDED_11.java:32) 	at PR
							      	  rem = num % 11 ;					    	rem = num % 11 ;					  OGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11.main(
							      	}							      }								  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11.jav
							      	return rem ;						      return rem ;						  a:54)
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
def arcLength ( diameter , angle ) :			      static double arcLength ( double diameter , double angle ) {  public static double arcLength ( double diameter , double ang script_not_found : None
    if angle >= 360 :					      	double pi = 22.0 / 7.0 ;				      if ( angle >= 360 ) {					  
	print ( "Angle cannot be formed" )		      	double arc ;						    	System . out . println ( "Angle cannot be formed" ) ;	  
	return 0					      	if ( angle >= 360 ) {					    	return 0 ;						  
    else :						      	  System . out . println ( "Angle cannot" + " be formed" )    }								  
	arc = ( 3.142857142857143 * diameter ) * ( angle / 36 	  return 0 ;						      else {							  
	return arc					      	}							    	double arc = ( 3.142857142857143 * diameter ) * ( angle / 
							      	else {							    	return arc ;						  
							      	  arc = ( pi * diameter ) * ( angle / 360.0 ) ;		      }								  
							      	  return arc ;						    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
def countRect ( n ) :					      static int countRect ( int n ) {				    static int countRect ( int n ) {				  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 	for ( int length = 1 ;					      for ( int length = 1 ;					  
	height = length					      	length <= Math . sqrt ( n ) ;				      length <= ( int ) Math . sqrt ( n ) ;			  
	while ( height * length <= n ) :		      	++ length ) for ( int height = length ;			      length ++ ) {						  
	    ans += 1					      	height * length <= n ;					    	int height = length ;					  
	    height += 1					      	++ height ) ans ++ ;					    	while ( ( height * length <= n ) ) {			  
    return ans						      	return ans ;						    	  ans ++ ;						  
							      }								    	  height ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
def firstFactorialDivisibleNumber ( x ) :		      static int firstFactorialDivisibleNumber ( int x ) {	    public static int firstFactorialDivisibleNumber ( int x ) {	  success : None
    i = 1						      	int i = 1 ;						      int i = 1 ;						  
    fact = 1						      	int fact = 1 ;						      int fact = 1 ;						  
    for i in range ( 1 , x ) :				      	for ( i = 1 ;						      for ( i = 1 ;						  
	fact = fact * i					      	i < x ;							      i < x ;							  
	if ( fact % x == 0 ) :				      	i ++ ) {						      i ++ ) {							  
	    break					      	  fact = fact * i ;					    	fact = fact * i ;					  
    return i						      	  if ( fact % x == 0 ) break ;				    	if ( ( fact % x ) == 0 ) break ;			  
							      	}							      }								  
							      	return i ;						      return i ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
def gcd ( a , b ) :					      static double gcd ( double a , double b ) {		    public static double gcd ( double a , double b ) {		  script_not_found : None
    if ( a < b ) :					      	if ( a < b ) return gcd ( b , a ) ;			      if ( ( a < b ) ) {					  
	return gcd ( b , a )				      	if ( Math . abs ( b ) < 0.001 ) return a ;		    	return gcd ( b , a ) ;					  
    if ( abs ( b ) < 0.001 ) :				      	else return ( gcd ( b , a - Math . floor ( a / b ) * b ) )    }								  
	return a					      }								      if ( ( Math . abs ( b ) < 0.001 ) ) {			  
    else :						      								    	return a ;						  
	return ( gcd ( b , a - math.floor ( a / b ) * b ) )   								      }								  
							      								      else {							  
							      								    	return ( gcd ( b , a - Math . floor ( a / b ) * b ) ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
def isPrime ( n , i = 2 ) :				      static boolean isPrime ( int n , int i ) {		    public static boolean isPrime ( int n , int i ) {		  success : None
    if ( n <= 2 ) :					      	if ( n <= 2 ) return ( n == 2 ) ? true : false ;	      if ( ( n <= 2 ) ) {					  
	return True if ( n == 2 ) else False		      	if ( n % i == 0 ) return false ;			    	return ( n == 2 ) ? true : false ;			  
    if ( n % i == 0 ) :					      	if ( i * i > n ) return true ;				      }								  
	return False					      	return isPrime ( n , i + 1 ) ;				      if ( ( n % i ) == 0 ) {					  
    if ( i * i > n ) :					      }								    	return false ;						  
	return true					      								      }								  
    return isPrime ( n , i + 1 )			      								      if ( ( i * i ) > n ) {					  
							      								    	return true ;						  
							      								      }								  
							      								      return isPrime ( n , i + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
def countPairs ( arr , n ) :				      static int countPairs ( int arr [ ] , int n ) {		    static int countPairs ( int [ ] arr , int n ) {		  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if ( arr [ i ] == arr [ j ] ) :		      	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		ans += 1				      	j < n ;							    	for ( int j = i + 1 ;					  
    return ans						      	j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		    	j < n ;							  
							      	return ans ;						    	j ++ ) {						  
							      }								    	  if ( ( arr [ i ] == arr [ j ] ) ) {			  
							      								    	    ans ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
def countInRange ( arr , n , x , y ) :			      static int countInRange ( int arr [ ] , int n , int x , int y static int countInRange ( int [ ] arr , int n , int x , int y success : None
    count = 0 ;						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] >= x and arr [ i ] <= y ) :	      	i < n ;							      i < n ;							  
	    count += 1					      	i ++ ) {						      i ++ ) {							  
    return count					      	  if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;	    	if ( ( arr [ i ] >= x && arr [ i ] <= y ) ) {		  
							      	}							    	  count ++ ;						  
							      	return count ;						    	}							  
							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
def isSymmetric ( mat , N ) :				      static boolean isSymmetric ( int mat [ ] [ ] , int N ) {	    public static boolean isSymmetric ( int [ ] [ ] mat , int N ) success : None
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( N ) :				      	i < N ;							      i < N ;							  
	    if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :	      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		return False				      	j < N ;							    	for ( int j = 0 ;					  
    return True						      	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal 	j < N ;							  
							      	return true ;						    	j ++ ) {						  
							      }								    	  if ( ( mat [ i ] [ j ] != mat [ j ] [ i ] ) ) {	  
							      								    	    return false ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
def countCommon ( mat , n ) :				      static int countCommon ( int mat [ ] [ ] , int n ) {	    static int countCommon ( int [ ] [ ] mat , int n ) {	  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	      	i < n ;							      i < n ;							  
	    res = res + 1				      	i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re   i ++ ) {							  
    return res						      	return res ;						    	if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) {	  
							      }								    	  res = res + 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
def first ( str , i ) :					      static char first ( String str , int i ) {		    public static int first ( String str , int i ) {		  script_not_found : None
    if ( str [ i ] == '\0' ) :				      	if ( str . charAt ( i ) == '\0' ) return 0 ;		      if ( ( str . charAt ( i ) == '\0' ) ) {			  
	return 0					      	if ( Character . isUpperCase ( str . charAt ( i ) ) ) retur 	return 0 ;						  
    if ( str [ i ].isupper ( ) ) :			      	return first ( str , i + 1 ) ;				      }								  
	return str [ i ]				      }								      if ( ( Character . isUpperCase ( str . charAt ( i ) ) ) ) { 
    return first ( str , i + 1 )			      								    	return str . charAt ( i ) ;				  
							      								      }								  
							      								      return first ( str , i + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2
--							      --							    --								  --
def singleNumber ( nums ) :				      static int singleNumber ( int a [ ] , int n ) {		    public static double singleNumber ( double [ ] nums ) {	  error : FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2.java:
    return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2    	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      return ( 3 * Arrays . stream ( nums ) . boxed ( ) . collect 31: error: method toCollection in class Collectors
							      	for ( int i : a ) {					    }								   cannot be applied to given types;   return ( 3 *
							      	  s . add ( i ) ;					    								  Arrays . stream ( nums ) . boxed ( ) . collect ( C
							      	}							    								  ollectors . toCollection ( ) ) ) . sum ( ) / 2 ;
							      	int arr_sum = 0 ;					    								  
							      	for ( int i : a ) {					    								  			  ^   required: Supplier<C>
							      	  arr_sum += i ;					    								    found: no arguments	  reason: cannot infer type-
							      	}							    								  variable(s) T,C     (actual and formal argument li
							      	int set_sum = 0 ;					    								  sts differ in length)	  where C,T are type-variabl
							      	for ( int i : s ) {					    								  es:	  C extends Collection<T> declared in method
							      	  set_sum += i ;					    								   <T,C>toCollection(Supplier<C>)     T extends Obje
							      	}							    								  ct declared in method <T,C>toCollection(Supplier<C
							      	return ( 3 * set_sum - arr_sum ) / 2 ;			    								  >) FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2.java:61: e
							      }								    								  rror: method f_filled in class FIND_THE_ELEMENT_TH
							      								    								  AT_APPEARS_ONCE_2 cannot be applied to given types
							      								    								  ;	    if(f_filled(param0.get(i),param1.get(i))
							      								    								   == f_gold(param0.get(i),param1.get(i)))
							      								    								    ^	required: double[]   found: int[],Integer
							      								    								  reason: actual and formal argument lists differ in
							      								    								   length 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    static int findSum ( int n ) {				  success : None
    multiTerms = n * ( n + 1 ) // 2			      	int multiTerms = n * ( n + 1 ) / 2 ;			      int multiTerms = n * ( n + 1 ) / 2 ;			  
    sm = multiTerms					      	int sum = multiTerms ;					      int sm = multiTerms ;					  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	multiTerms = multiTerms - ( i - 1 )		      	i <= n ;						      i <= n ;							  
	sm = sm + multiTerms * i			      	i ++ ) {						      i ++ ) {							  
    return sm						      	  multiTerms = multiTerms - ( i - 1 ) ;			    	multiTerms = multiTerms - ( i - 1 ) ;			  
							      	  sum = sum + multiTerms * i ;				    	sm = sm + multiTerms * i ;				  
							      	}							      }								  
							      	return sum ;						      return sm ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
def maxProd ( n ) :					      static int maxProd ( int n ) {				    public static int maxProd ( int n ) {			  success : None
    if ( n == 2 or n == 3 ) :				      	if ( n == 2 || n == 3 ) return ( n - 1 ) ;		      if ( ( n == 2 ) || ( n == 3 ) ) {				  
	return ( n - 1 )				      	int res = 1 ;						    	return ( n - 1 ) ;					  
    res = 1						      	while ( n > 4 ) {					      }								  
    while ( n > 4 ) :					      	  n -= 3 ;						      int res = 1 ;						  
	n -= 3						      	  res *= 3 ;						      while ( ( n > 4 ) ) {					  
	res *= 3					      	}							    	n -= 3 ;						  
    return ( n * res )					      	return ( n * res ) ;					    	res *= 3 ;						  
							      }								      }								  
							      								      return ( n * res ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_OCTAL_DECIMAL_CONVERSION			      PROGRAM_OCTAL_DECIMAL_CONVERSION				    PROGRAM_OCTAL_DECIMAL_CONVERSION				  PROGRAM_OCTAL_DECIMAL_CONVERSION
--							      --							    --								  --
def octalToDecimal ( n ) :				      static int octalToDecimal ( int n ) {			    public static int octalToDecimal ( int n ) {		  success : None
    num = n						      	int num = n ;						      int num = n ;						  
    dec_value = 0					      	int dec_value = 0 ;					      int decValue = 0 ;					  
    base = 1						      	int base = 1 ;						      int base = 1 ;						  
    temp = num						      	int temp = num ;					      int temp = num ;						  
    while ( temp ) :					      	while ( temp > 0 ) {					      while ( ( temp = temp ) != 0 ) {				  
	last_digit = temp % 10				      	  int last_digit = temp % 10 ;				    	int lastDigit = temp % 10 ;				  
	temp = int ( temp / 10 )			      	  temp = temp / 10 ;					    	temp = ( int ) ( temp / 10 ) ;				  
	dec_value += last_digit * base			      	  dec_value += last_digit * base ;			    	decValue += lastDigit * base ;				  
	base = base * 8					      	  base = base * 8 ;					    	base = base * 8 ;					  
    return dec_value					      	}							      }								  
							      	return dec_value ;					      return decValue ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
def minTime ( arr , n , m ) :				      static int minTime ( int [ ] arr , int n , int m ) {	    public static int minTime ( int [ ] arr , int n , int m ) {	  script_not_found : None
    t = 0						      	int t = 0 ;						      int t = 0 ;						  
    while ( 1 ) :					      	while ( true ) {					      while ( ( t = arr [ n ] ) != 0 ) {			  
	items = 0					      	  int items = 0 ;					    	int items = 0 ;						  
	for i in range ( n ) :				      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
	    items += ( t // arr [ i ] )			      	  i < n ;						    	i < n ;							  
	if ( items >= m ) :				      	  i ++ ) items += ( t / arr [ i ] ) ;			    	i ++ ) {						  
	    return t					      	  if ( items >= m ) return t ;				    	  items += ( t / arr [ i ] ) ;				  
	t += 1						      	  t ++ ;						    	}							  
							      	}							    	if ( ( items >= m ) ) {					  
							      }								    	  return t ;						  
							      								    	}							  
							      								    	t ++ ;							  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
def printSquares ( n ) :				      static void printSquares ( int n ) {			    public static void printSquares ( int n ) {			  script_not_found : None
    square = 0 ; prev_x = 0 ;				      	int square = 0 , prev_x = 0 ;				      int square = 0 ;						  
    for x in range ( 0 , n ) :				      	for ( int x = 0 ;					      int prevX = 0 ;						  
	square = ( square + x + prev_x )		      	x < n ;							      for ( int x = 0 ;						  
	print ( square , end = " " )			      	x ++ ) {						      x <= n ;							  
	prev_x = x					      	  square = ( square + x + prev_x ) ;			      x ++ ) {							  
							      	  System . out . print ( square + " " ) ;		    	square = ( square + x + prevX ) ;			  
							      	  prev_x = x ;						    	System . out . print ( square + " " ) ;			  
							      	}							    	prevX = x ;						  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
def isCornerPresent ( str , corner ) :			      static boolean isCornerPresent ( String str , String corner ) public static boolean isCornerPresent ( String str , String c success : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    cl = len ( corner )					      	int cl = corner . length ( ) ;				      int cl = corner . length ( ) ;				  
    if ( n < cl ) :					      	if ( n < cl ) return false ;				      if ( ( n < cl ) ) {					  
	return False					      	return ( str . substring ( 0 , cl ) . equals ( corner ) &&  	return false ;						  
    return ( ( str [ : cl ] == corner ) and ( str [ n - cl :  }								      }								  
							      								      return ( ( str . substring ( 0 , cl ) . equals ( corner ) ) 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
def add ( A , B , C ) :					      static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ public static void add ( int [ ] [ ] A , int [ ] [ ] B , int  script_not_found : None
    for i in range ( N ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( N ) :				      	for ( i = 0 ;						      i < N ;							  
	    C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]     	i < N ;							      i ++ ) {							  
							      	i ++ ) for ( j = 0 ;					    	for ( int j = 0 ;					  
							      	j < N ;							    	j < N ;							  
							      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	    	j ++ ) {						  
							      }								    	  C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
def findStep ( n ) :					      public static int findStep ( int n ) {			    static int findStep ( int n ) {				  script_not_found : None
    if ( n == 1 or n == 0 ) :				      	if ( n == 1 || n == 0 ) return 1 ;			      if ( ( n == 1 ) || ( n == 0 ) ) {				  
	return 1					      	else if ( n == 2 ) return 2 ;				    	return 1 ;						  
    elif ( n == 2 ) :					      	else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS   }								  
	return 2					      }								      else if ( ( n == 2 ) ) {					  
    else :						      								    	return 2 ;						  
	return findStep ( n - 3 ) + findStep ( n - 2 ) + find 								      }								  
							      								      else {							  
							      								    	return findStep ( n - 3 ) + findStep ( n - 2 ) + findStep 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
def isPossibleTriangle ( arr , N ) :			      static boolean isPossibleTriangle ( int [ ] arr , int N ) {   static boolean isPossibleTriangle ( int [ ] arr , int N ) {	  success : None
    if N < 3 :						      	if ( N < 3 ) return false ;				      if ( N < 3 ) {						  
	return False					      	Arrays . sort ( arr ) ;					    	return false ;						  
    arr.sort ( )					      	for ( int i = 0 ;					      }								  
    for i in range ( N - 2 ) :				      	i < N - 2 ;						      Arrays . sort ( arr ) ;					  
	if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	      	i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret   for ( int i = 0 ;						  
	    return True					      	return false ;						      i < N - 2 ;						  
							      }								      i ++ ) {							  
							      								    	if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) {	  
							      								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  success : None
    x = a - b						      	int x = a - b ;						      int x = a - b ;						  
    y = b - c						      	int y = b - c ;						      int y = b - c ;						  
    z = a - c						      	int z = a - c ;						      int z = a - c ;						  
    if x * y > 0 :					      	if ( x * y > 0 ) return b ;				      if ( x * y > 0 ) {					  
	return b					      	else if ( x * z > 0 ) return c ;			    	return b ;						  
    elif ( x * z > 0 ) :				      	else return a ;						      }								  
	return						      }								      else if ( ( x * z > 0 ) ) {				  
    else :						      								    	return c ;						  
	return a					      								      }								  
							      								      else {							  
							      								    	return a ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
def findRepeating ( arr , n ) :				      static int findRepeating ( int arr [ ] , int n ) {	    static int findRepeating ( int [ ] arr , int n ) {		  error : FIND_REPETITIVE_ELEMENT_1_N_1_1.java:35: e
    s = set ( )						      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  rror: cannot find symbol   rteurn = - 1 ;   ^	  sy
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  mbol:	  variable rteurn   location: class FIND_REP
	if arr [ i ] in s :				      	i < n ;							      i < n ;							  ETITIVE_ELEMENT_1_N_1_1 FIND_REPETITIVE_ELEMENT_1_
	    return arr [ i ]				      	i ++ ) {						      i ++ ) {							  N_1_1.java:36: error: cannot find symbol   return
	s.add ( arr [ i ] )				      	  if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;	    	if ( s . contains ( arr [ i ] ) ) {			  rteurn ;	    ^	symbol:	  variable rteurn
    rteurn - 1						      	  s . add ( arr [ i ] ) ;				    	  return arr [ i ] ;					  location: class FIND_REPETITIVE_ELEMENT_1_N_1_1 2
							      	}							    	}							  errors
							      	return - 1 ;						    	s . add ( arr [ i ] ) ;					  
							      }								      }								  
							      								      rteurn = - 1 ;						  
							      								      return rteurn ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET
--							      --							    --								  --
def minRevolutions ( r , x1 , y1 , x2 , y2 ) :		      static double minRevolutions ( double r , int x1 , int y1 , i public static double minRevolutions ( double r , double x1 ,  script_not_found : None
    d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 	double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 -   double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - 
    return math.ceil ( d // ( 2 * r ) )			      	return Math . ceil ( d / ( 2 * r ) ) ;			      return Math . ceil ( d / ( 2 * r ) ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
def maxArea ( a , b , c , d ) :				      static double maxArea ( double a , double b , double c , doub public static double maxArea ( double a , double b , double c script_not_found : None
    semiperimeter = ( a + b + c + d ) / 2		      	double semiperimeter = ( a + b + c + d ) / 2 ;		      double semiPerimeter = ( a + b + c + d ) / 2 ;		  
    return math.sqrt ( ( semiperimeter - a ) * ( semiperimete 	return Math . sqrt ( ( semiperimeter - a ) * ( semiperimete   return Math . sqrt ( ( semiPerimeter - a ) * ( semiPerimete 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
def checkcircle ( r , R , r1 , x1 , y1 ) :		      public static boolean checkcircle ( int r , int R , int r1 ,  public static boolean checkcircle ( int r , int R , int r1 ,  success : identical to gold
    dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )	      	int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;	      int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;	  
    return ( dis - r1 >= R and dis + r1 <= r )		      	return ( dis - r1 >= R && dis + r1 <= r ) ;		      return ( dis - r1 >= R && dis + r1 <= r ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
def isDiagonalMatrix ( mat ) :				      static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {	    public static boolean isDiagonalMatrix ( int [ ] [ ] mat ) {  script_not_found : None
    for i in range ( 0 , N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , N ) :			      	i < N ;							      i <= N ;							  
	    if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		return False				      	j < N ;							    	for ( int j = 0 ;					  
    return True						      	j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 	j <= N ;						  
							      	return true ;						    	j ++ ) {						  
							      }								    	  if ( ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) ) {	  
							      								    	    return false ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	      MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
def minValue ( A , B , n ) :				      static int minValue ( int A [ ] , int B [ ] , int n ) {	    public static int minValue ( int [ ] A , int [ ] B , int n )  success : None
    sorted ( A )					      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
    sorted ( B )					      	Arrays . sort ( B ) ;					      Arrays . sort ( B ) ;					  
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	result += ( A [ i ] * B [ n - i - 1 ] )		      	i < n ;							      i < n ;							  
    return result					      	i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ;	      i ++ ) {							  
							      	return result ;						    	result += ( A [ i ] * B [ n - i - 1 ] ) ;		  
							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
def findMod ( a , b ) :					      static double findMod ( double a , double b ) {		    static int findMod ( int a , int b ) {			  error : MODULUS_TWO_FLOAT_DOUBLE_NUMBERS.java:67:
    if ( a < 0 ) :					      	if ( a < 0 ) a = - a ;					      if ( ( a < 0 ) ) {					  error: incompatible types: Double cannot be conver
	a = - a						      	if ( b < 0 ) b = - b ;					    	a = - a ;						  ted to int	     if(Math.abs(1 - (0.0000001 + Ma
    if ( b < 0 ) :					      	double mod = a ;					      }								  th.abs(f_gold(param0.get(i),param1.get(i))) )/ (Ma
	b = - b						      	while ( mod >= b ) mod = mod - b ;			      if ( ( b < 0 ) ) {					  th.abs(f_filled(param0.get(i),param1.get(i))) + 0.
    mod = a						      	if ( a < 0 ) return - mod ;				    	b = - b ;						  0000001)) < 0.001)
    while ( mod >= b ) :				      	return mod ;						      }								  
	mod = mod - b					      }								      int mod = a ;						  				    ^ Note: Some mes
    if ( a < 0 ) :					      								      while ( ( mod >= b ) ) {					  sages have been simplified; recompile with -Xdiags
	return - mod					      								    	mod = mod - b ;						  :verbose to get full output 1 error
    return mod						      								      }								  
							      								      if ( ( a < 0 ) ) {					  
							      								    	return - mod ;						  
							      								      }								  
							      								      return mod ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def arraySortedOrNot ( arr , n ) :			      static boolean arraySortedOrNot ( int arr [ ] , int n ) {	    static boolean arraySortedOrNot ( int [ ] arr , int n ) {	  success : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return true ;			      if ( ( n == 0 ) || ( n == 1 ) ) {				  
	return True					      	for ( int i = 1 ;					    	return true ;						  
    for i in range ( 1 , n ) :				      	i < n ;							      }								  
	if ( arr [ i - 1 ] > arr [ i ] ) :		      	i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;	      for ( int i = 1 ;						  
	    return False				      	return true ;						      i < n ;							  
    return True						      }								      i ++ ) {							  
							      								    	if ( ( arr [ i - 1 ] > arr [ i ] ) ) {			  
							      								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
def multiply ( A , B , C ) :				      static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C  public static void multiply ( int [ ] [ ] A , int [ ] [ ] B , script_not_found : None
    for i in range ( N ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( N ) :				      	for ( i = 0 ;						      i < N ;							  
	    C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]     	i < N ;							      i ++ ) {							  
							      	i ++ ) for ( j = 0 ;					    	for ( int j = 0 ;					  
							      	j < N ;							    	j < N ;							  
							      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	    	j ++ ) {						  
							      }								    	  C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
def minimumflip ( mat , n ) :				      static int minimumflip ( int mat [ ] [ ] , int n ) {	    public static int minimumFlip ( int [ ] [ ] mat , int n ) {	  success : None
    flip = 0						      	int flip = 0 ;						      int flip = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i ) :				      	i < n ;							      i < n ;							  
	    if mat [ i ] [ j ] != mat [ j ] [ i ] :	      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		flip += 1				      	j < i ;							    	for ( int j = 0 ;					  
    return flip						      	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;  	j < i ;							  
							      	return flip ;						    	j ++ ) {						  
							      }								    	  if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) {		  
							      								    	    flip ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return flip ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
def sumNodes ( l ) :					      static double sumNodes ( int l ) {			    public static int sumNodes ( int l ) {			  failure : #Results:2, 10
    leafNodeCount = math.pow ( 2 , l - 1 )		      	double leafNodeCount = Math . pow ( 2 , l - 1 ) ;	      double leafNodeCount = Math . pow ( 2 , l - 1 ) ;		  
    sumLastLevel = 0					      	double sumLastLevel = 0 ;				      double sumLastLevel = 0 ;					  
    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 )  	sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 ) )  
    sum = sumLastLevel * l				      	double sum = sumLastLevel * l ;				      double sum = sumLastLevel * l ;				  
    return int ( sum )					      	return sum ;						      return ( int ) sum ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			      NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			    NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			  NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
def findPosition ( k , n ) :				      public static int findPosition ( int k , int n ) {	    static int findPosition ( int k , int n ) {			  failure : #Results:8, 10
    f1 = 0						      	long f1 = 0 , f2 = 1 , f3 ;				      int f1 = 0 ;						  
    f2 = 1						      	int i = 2 ;						      int f2 = 1 ;						  
    i = 2						      	while ( i != 0 ) {					      int i = 2 ;						  
    while i != 0 :					      	  f3 = f1 + f2 ;					      while ( i != 0 ) {					  
	f3 = f1 + f2					      	  f1 = f2 ;						    	int f3 = f1 + f2 ;					  
	f1 = f2						      	  f2 = f3 ;						    	f1 = f2 ;						  
	f2 = f3						      	  if ( f2 % k == 0 ) {					    	f2 = f3 ;						  
	if f2 % k == 0 :				      	    return n * i ;					    	if ( f2 % k == 0 ) {					  
	    return n * i				      	  }							    	  return n * i ;					  
	i += 1						      	  i ++ ;						    	}							  
    return						      	}							    	i ++ ;							  
							      	return 0 ;						      }								  
							      }								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
def findIndex ( n ) :					      static int findIndex ( int n ) {				    static int findIndex ( int n ) {				  success : None
    if ( n <= 1 ) :					      	if ( n <= 1 ) return n ;				      if ( ( n <= 1 ) ) {					  
	return n					      	int a = 0 , b = 1 , c = 1 ;				    	return n ;						  
    a = 0						      	int res = 1 ;						      }								  
    b = 1						      	while ( c < n ) {					      int a = 0 ;						  
    c = 1						      	  c = a + b ;						      int b = 1 ;						  
    res = 1						      	  res ++ ;						      int c = 1 ;						  
    while ( c < n ) :					      	  a = b ;						      int res = 1 ;						  
	c = a + b					      	  b = c ;						      while ( ( c = c ) < n ) {					  
	res = res + 1					      	}							    	c = a + b ;						  
	a = b						      	return res ;						    	res = res + 1 ;						  
	b = c						      }								    	a = b ;							  
    return res						      								    	b = c ;							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
def minimumSquare ( a , b ) :				      static int minimumSquare ( int a , int b ) {		    public static int minimumSquare ( int a , int b ) {		  script_not_found : None
    result = 0						      	int result = 0 , rem = 0 ;				      int result = 0 ;						  
    rem = 0						      	if ( a < b ) swap ( a , b ) ;				      int rem = 0 ;						  
    if ( a < b ) :					      	while ( b > 0 ) {					      if ( ( a < b ) ) {					  
	a , b = b , a					      	  result += a / b ;					    	a = b ;							  
    while ( b > 0 ) :					      	  rem = a % b ;						    	b = a ;							  
	result += int ( a / b )				      	  a = b ;						      }								  
	rem = int ( a % b )				      	  b = rem ;						      while ( ( b > 0 ) ) {					  
	a = b						      	}							    	result += ( int ) ( a / b ) ;				  
	b = rem						      	return result ;						    	rem = ( int ) ( a % b ) ;				  
    return result					      }								    	a = b ;							  
							      								    	b = rem ;						  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
def constructArr ( arr , pair , n ) :			      static void constructArr ( int arr [ ] , int pair [ ] , int n static void constructArr ( int [ ] arr , int [ ] pair , int n script_not_found : None
    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] )  	arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		      	i < n ;							      i < n ;							  
							      	i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		      i ++ ) {							  
							      }								    	arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN
--							      --							    --								  --
def findMaximum ( arr , low , high ) :			      static int findMaximum ( int arr [ ] , int low , int high ) { static int findMaximum ( int [ ] arr , int low , int high ) { success : None
    max = arr [ low ]					      	int max = arr [ low ] ;					      int max = arr [ low ] ;					  
    i = low						      	int i ;							      int i = low ;						  
    for i in range ( high + 1 ) :			      	for ( i = low ;						      for ( ;							  
	if arr [ i ] > max :				      	i <= high ;						      i < high + 1 ;						  
	    max = arr [ i ]				      	i ++ ) {						      i ++ ) {							  
    return max						      	  if ( arr [ i ] > max ) max = arr [ i ] ;		    	if ( arr [ i ] > max ) {				  
							      	}							    	  max = arr [ i ] ;					  
							      	return max ;						    	}							  
							      }								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
def minimum_cost ( a , n ) :				      static int minimum_cost ( int a [ ] , int n ) {		    public static double minimumCost ( double [ ] a , int n ) {	  error : MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRES
    mn = sys.maxsize					      	int mn = Integer . MAX_VALUE ;				      double mn = Double . MAX_VALUE ;				  ENTED_ARRAY.java:65: error: incompatible types: in
    sum = 0						      	int sum = 0 ;						      double sum = 0 ;						  t[] cannot be converted to double[]	      if(f_f
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  illed(param0.get(i),param1.get(i)) == f_gold(param
	mn = min ( a [ i ] , mn )			      	i < n ;							      i < n ;							  0.get(i),param1.get(i)))
	sum += a [ i ]					      	i ++ ) {						      i ++ ) {							       ^ Note: Some messages have been simplified; r
    return mn * ( sum - mn )				      	  mn = Math . min ( a [ i ] , mn ) ;			    	mn = Math . min ( a [ i ] , mn ) ;			  ecompile with -Xdiags:verbose to get full output 1
							      	  sum += a [ i ] ;					    	sum += a [ i ] ;					   error
							      	}							      }								  
							      	return mn * ( sum - mn ) ;				      return mn * ( sum - mn ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
def decToBin ( n ) :					      static String decToBin ( int n ) {			    public static String decToBin ( int n ) {			  success : None
    if ( n == 0 ) :					      	if ( n == 0 ) return "0" ;				      if ( ( n == 0 ) ) {					  
	return "0"					      	String bin = "" ;					    	return "0" ;						  
    bin = ""						      	while ( n > 0 ) {					      }								  
    while ( n > 0 ) :					      	  bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;		      String bin = "" ;						  
	if ( n & 1 == 0 ) :				      	  n >>= 1 ;						      while ( ( n ) > 0 ) {					  
	    bin = '0' + bin				      	}							    	if ( ( n & 1 ) == 0 ) {					  
	else :						      	return bin ;						    	  bin = "0" + bin ;					  
	    bin = '1' + bin				      }								    	}							  
	n = n >> 1					      								    	else {							  
    return bin						      								    	  bin = "1" + bin ;					  
							      								    	}							  
							      								    	n = n >> 1 ;						  
							      								      }								  
							      								      return bin ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
def isInorder ( arr , n ) :				      static boolean isInorder ( int [ ] arr , int n ) {	    public static boolean isInorder ( int [ ] arr , int n ) {	  success : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) {				      if ( ( n == 0 ) || ( n == 1 ) ) return true ;		  
	return True					      	  return true ;						      for ( int i = 1 ;						  
    for i in range ( 1 , n , 1 ) :			      	}							      i < n ;							  
	if ( arr [ i - 1 ] > arr [ i ] ) :		      	for ( int i = 1 ;					      i += 1 ) {						  
	    return False				      	i < n ;							    	if ( ( arr [ i - 1 ] > arr [ i ] ) ) return false ;	  
    return True						      	i ++ ) {						      }								  
							      	  if ( arr [ i - 1 ] > arr [ i ] ) {			      return true ;						  
							      	    return false ;					    }								  
							      	  }							    								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
def shuffle ( card , n ) :				      public static void shuffle ( int card [ ] , int n ) {	    public static void shuffle ( int [ ] card , int n ) {	  script_not_found : None
    for i in range ( n ) :				      	Random rand = new Random ( ) ;				      for ( int i = 0 ;						  
	r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )    	for ( int i = 0 ;					      i < n ;							  
	tmp = card [ i ]				      	i < n ;							      i ++ ) {							  
	card [ i ] = card [ r ]				      	i ++ ) {						    	int r = i + ( Math . random ( ) * 55 % ( 52 - i ) ) ;	  
	card [ r ] = tmp				      	  int r = i + rand . nextInt ( 52 - i ) ;		    	int tmp = card [ i ] ;					  
							      	  int temp = card [ r ] ;				    	card [ i ] = card [ r ] ;				  
							      	  card [ r ] = card [ i ] ;				    	card [ r ] = tmp ;					  
							      	  card [ i ] = temp ;					      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
def mirrorImage ( a , b , c , x1 , y1 ) :		      static pair mirrorImage ( double a , double b , double c , do public static int mirrorImage ( int a , int b , int c , int x script_not_found : None
    temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )  	double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b *   double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * 
    x = temp * a + x1					      	double x = temp * a + x1 ;				      double x = temp * a + x1 ;				  
    y = temp * b + y1					      	double y = temp * b + y1 ;				      double y = temp * b + y1 ;				  
    return ( x , y )					      	return new pair ( x , y ) ;				      return ( x ) + ( y ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
def numberOfWays ( x ) :				      static int numberOfWays ( int x ) {			    public static int numberOfWays ( int x ) {			  timeout : None
    if x == 0 or x == 1 :				      	int dp [ ] = new int [ x + 1 ] ;			      if ( x == 0 || x == 1 ) {					  
	return 1					      	dp [ 0 ] = dp [ 1 ] = 1 ;				    	return 1 ;						  
    else :						      	for ( int i = 2 ;					      }								  
	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	i <= x ;						      else {							  
							      	i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWay 
							      	return dp [ x ] ;					      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
def leonardo ( n ) :					      static int leonardo ( int n ) {				    public static int leonardo ( int n ) {			  success : None
    dp = [ ]						      	int dp [ ] = new int [ n + 1 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  
    dp.append ( 1 )					      	dp [ 0 ] = dp [ 1 ] = 1 ;				      dp [ 0 ] = 1 ;						  
    dp.append ( 1 )					      	for ( int i = 2 ;					      dp [ 1 ] = 1 ;						  
    for i in range ( 2 , n + 1 ) :			      	i <= n ;						      for ( int i = 2 ;						  
	dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 )	      	i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;	      i <= n ;							  
    return dp [ n ]					      	return dp [ n ] ;					      i ++ ) {							  
							      }								    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;		  
							      								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
def CountPairs ( n ) :					      static int CountPairs ( int n ) {				    protected static int countPairs ( int n ) {			  success : None
    k = n						      	int k = n ;						      int k = n ;						  
    imin = 1						      	int imin = 1 ;						      int imin = 1 ;						  
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    while ( imin <= n ) :				      	while ( imin <= n ) {					      while ( ( imin <= n ) ) {					  
	imax = n / k					      	  int imax = n / k ;					    	int imax = n / k ;					  
	ans += k * ( imax - imin + 1 )			      	  ans += k * ( imax - imin + 1 ) ;			    	ans += k * ( imax - imin + 1 ) ;			  
	imin = imax + 1					      	  imin = imax + 1 ;					    	imin = imax + 1 ;					  
	k = n / imin					      	  k = n / imin ;					    	k = n / imin ;						  
    return ans						      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION     DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	    DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
def lastPosition ( n , m , k ) :			      static int lastPosition ( int n , int m , int k ) {	    static int lastPosition ( int n , int m , int k ) {		  success : None
    if ( m <= n - k + 1 ) :				      	if ( m <= n - k + 1 ) return m + k - 1 ;		      if ( ( m <= n - k + 1 ) ) {				  
	return m + k - 1				      	m = m - ( n - k + 1 ) ;					    	return m + k - 1 ;					  
    m = m - ( n - k + 1 )				      	return ( m % n == 0 ) ? n : ( m % n ) ;			      }								  
    if ( m % n == 0 ) :					      }								      m = m - ( n - k + 1 ) ;					  
	return n					      								      if ( ( m % n ) == 0 ) {					  
    else :						      								    	return n ;						  
	return m % n					      								      }								  
							      								      else {							  
							      								    	return m % n ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
def kthdigit ( a , b , k ) :				      public static int kthdigit ( int a , int b , int k ) {	    public static int kthdigit ( int a , int b , int k ) {	  failure : #Results:4, 10
    p = a ** b						      	int p = ( int ) Math . pow ( a , b ) ;			      int p = a * b ;						  
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    while ( p > 0 and count < k ) :			      	while ( p > 0 && count < k ) {				      while ( ( p > 0 ) && ( count < k ) ) {			  
	rem = p % 10					      	  int rem = p % 10 ;					    	int rem = p % 10 ;					  
	count = count + 1				      	  count ++ ;						    	count = count + 1 ;					  
	if ( count == k ) :				      	  if ( count == k ) return rem ;			    	if ( ( count == k ) ) {					  
	    return rem					      	  p = p / 10 ;						    	  return rem ;						  
	p = p / 10					      	}							    	}							  
							      	return 0 ;						    	p = p / 10 ;						  
							      }								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
def splitArr ( arr , n , k ) :				      public static void splitArr ( int arr [ ] , int n , int k ) { public static void splitArr ( int [ ] arr , int n , int k ) { error : Exception in thread "main" java.lang.Array
    for i in range ( 0 , k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  IndexOutOfBoundsException: Index -1 out of bounds
	x = arr [ 0 ]					      	i < k ;							      i <= k ;							  for length 1 	at SPLIT_ARRAY_ADD_FIRST_PART_END.f_
	for j in range ( 0 , n - 1 ) :			      	i ++ ) {						      i ++ ) {							  filled(SPLIT_ARRAY_ADD_FIRST_PART_END.java:36) 	at
	    arr [ j ] = arr [ j + 1 ]			      	  int x = arr [ 0 ] ;					    	int x = arr [ 0 ] ;					   SPLIT_ARRAY_ADD_FIRST_PART_END.main(SPLIT_ARRAY_A
	arr [ n - 1 ] = x				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  DD_FIRST_PART_END.java:112)
							      	  j < n - 1 ;						    	j <= n - 1 ;						  
							      	  ++ j ) arr [ j ] = arr [ j + 1 ] ;			    	j ++ ) {						  
							      	  arr [ n - 1 ] = x ;					    	  arr [ j ] = arr [ j + 1 ] ;				  
							      	}							    	}							  
							      }								    	arr [ n - 1 ] = x ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
def rotateMatrix ( mat ) :				      static void rotateMatrix ( int mat [ ] [ ] ) {		    public static void rotateMatrix ( int [ ] [ ] mat ) {	  script_not_found : None
    i = N - 1						      	for ( int i = N - 1 ;					      int i = N - 1 ;						  
    while ( i >= 0 ) :					      	i >= 0 ;						      while ( ( i >= 0 ) ) {					  
	j = N - 1					      	i -- ) {						    	int j = N - 1 ;						  
	while ( j >= 0 ) :				      	  for ( int j = N - 1 ;					    	while ( ( j >= 0 ) ) {					  
	    print ( mat [ i ] [ j ] , end = " " )	      	  j >= 0 ;						    	  System . out . print ( mat [ i ] [ j ] + " " ) ;	  
	    j = j - 1					      	  j -- ) System . out . print ( mat [ i ] [ j ] + " " ) ;   	  j = j - 1 ;						  
	print ( )					      	  System . out . println ( ) ;				    	}							  
	i = i - 1					      	}							    	System . out . println ( ) ;				  
							      }								    	i = i - 1 ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA
--							      --							    --								  --
def russianPeasant ( a , b ) :				      static int russianPeasant ( int a , int b ) {		    public static int russianPeasant ( int a , int b ) {	  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    while ( b > 0 ) :					      	while ( b > 0 ) {					      while ( ( b > 0 ) ) {					  
	if ( b & 1 ) :					      	  if ( ( b & 1 ) != 0 ) res = res + a ;			    	if ( ( b & 1 ) != 0 ) {					  
	    res = res + a				      	  a = a << 1 ;						    	  res = res + a ;					  
	a = a << 1					      	  b = b >> 1 ;						    	}							  
	b = b >> 1					      	}							    	a = a << 1 ;						  
    return res						      	return res ;						    	b = b >> 1 ;						  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
def findDigits ( n ) :					      static int findDigits ( int n ) {				    static int findDigits ( int n ) {				  error : COUNT_DIGITS_FACTORIAL_SET_1.java:37: erro
    if ( n < 0 ) :					      	if ( n < 0 ) return 0 ;					      if ( ( n < 0 ) ) {					  r: incompatible types: possible lossy conversion f
	return 0					      	if ( n <= 1 ) return 1 ;				    	return 0 ;						  rom double to int   return Math . floor ( digits )
    if ( n <= 1 ) :					      	double digits = 0 ;					      }								   + 1 ;				  ^ 1 error
	return 1					      	for ( int i = 2 ;					      if ( ( n <= 1 ) ) {					  
    digits = 0						      	i <= n ;						    	return 1 ;						  
    for i in range ( 2 , n + 1 ) :			      	i ++ ) digits += Math . log10 ( i ) ;			      }								  
	digits += math.log10 ( i )			      	return ( int ) ( Math . floor ( digits ) ) + 1 ;	      double digits = 0 ;					  
    return math.floor ( digits ) + 1			      }								      for ( int i = 2 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	digits += Math . log10 ( i ) ;				  
							      								      }								  
							      								      return Math . floor ( digits ) + 1 ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
def swapDiagonal ( matrix ) :				      static void swapDiagonal ( int matrix [ ] [ ] ) {		    public static void swapDiagonal ( int [ ] [ ] matrix ) {	  script_not_found : None
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \   	i < N ;							      i < N ;							  
	    matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]   	i ++ ) {						      i ++ ) {							  
							      	  int temp = matrix [ i ] [ i ] ;			    	matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] = \ "" ;  
							      	  matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;	      }								  
							      	  matrix [ i ] [ N - i - 1 ] = temp ;			    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
def checkMarkov ( m ) :					      static boolean checkMarkov ( double m [ ] [ ] ) {		    static boolean checkMarkov ( int [ ] [ ] m ) {		  error : MARKOV_MATRIX.java:60: error: incompatible
    for i in range ( 0 , len ( m ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						   types: double[][] cannot be converted to int[][]
	sm = 0						      	i < m . length ;					      i != m . length ;						  	  if(f_filled(param0.get(i)) == f_gold(param
	for j in range ( 0 , len ( m [ i ] ) ) :	      	i ++ ) {						      i ++ ) {							  0.get(i)))				   ^ Note: S
	    sm = sm + m [ i ] [ j ]			      	  double sum = 0 ;					    	int sm = 0 ;						  ome messages have been simplified; recompile with
	if ( sm != 1 ) :				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  -Xdiags:verbose to get full output 1 error
	    return False				      	  j < m [ i ] . length ;				    	j != m [ i ] . length ;					  
    return True						      	  j ++ ) sum = sum + m [ i ] [ j ] ;			    	j ++ ) {						  
							      	  if ( sum != 1 ) return false ;			    	  sm = sm + m [ i ] [ j ] ;				  
							      	}							    	}							  
							      	return true ;						    	if ( ( sm != 1 ) ) {					  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
def search ( arr , n , x ) :				      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int [ ] arr , int n , int x ) {	  success : None
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( i <= n - 1 ) :				      	while ( i <= n - 1 ) {					      while ( ( i <= n - 1 ) ) {				  
	if ( arr [ i ] == x ) :				      	  if ( arr [ i ] == x ) return i ;			    	if ( ( arr [ i ] == x ) ) {				  
	    return i					      	  i += Math . abs ( arr [ i ] - x ) ;			    	  return i ;						  
	i += abs ( arr [ i ] - x )			      	}							    	}							  
    return - 1						      	return - 1 ;						    	i += Math . abs ( arr [ i ] - x ) ;			  
							      }								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS	      MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		    MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		  MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS
--							      --							    --								  --
def findMinSum ( a , b , n ) :				      static long findMinSum ( long a [ ] , long b [ ] , long n ) { static int findMinSum ( int [ ] a , int [ ] b , int n ) {	  script_not_found : None
    a.sort ( )						      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
    b.sort ( )						      	Arrays . sort ( b ) ;					      Arrays . sort ( b ) ;					  
    sum = 0						      	long sum = 0 ;						      int sum = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum = sum + abs ( a [ i ] - b [ i ] )		      	i < n ;							      i < n ;							  
    return sum						      	i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;	      i ++ ) {							  
							      	return sum ;						    	sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;		  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER	  MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
def maxPrefix ( s , t ) :				      static int maxPrefix ( String s , String t ) {		    static int maxPrefix ( String s , String t ) {		  error : Exception in thread "main" java.lang.Strin
    count = 0						      	int count = 0 ;						      int count = 0 ;						  gIndexOutOfBoundsException: String index out of ra
    for i in range ( 0 , len ( t ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  nge: 11 	at java.base/java.lang.StringLatin1.charA
	if ( count == len ( s ) ) :			      	i < t . length ( ) ;					      ;								  t(StringLatin1.java:47) 	at java.base/java.lang.St
	    break					      	i ++ ) {						      i ++ ) {							  ring.charAt(String.java:693) 	at MAXIMUM_LENGTH_PR
	if ( t [ i ] == s [ count ] ) :			      	  if ( count == t . length ( ) ) break ;		    	if ( ( count == s . length ( ) ) ) {			  EFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER.f_fille
	    count = count + 1				      	  if ( t . charAt ( i ) == s . charAt ( count ) ) count ++  	  break ;						  d(MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUE
    return count					      	}							    	}							  NCE_ANOTHER.java:33) 	at MAXIMUM_LENGTH_PREFIX_ONE
							      	return count ;						    	if ( ( t . charAt ( i ) == s . charAt ( count ) ) ) {	  _STRING_OCCURS_SUBSEQUENCE_ANOTHER.main(MAXIMUM_LE
							      }								    	  count = count + 1 ;					  NGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER.
							      								    	}							  java:67)
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
def transpose ( A ) :					      static void transpose ( int A [ ] [ ] ) {			    public static void transpose ( int [ ] [ ] A ) {		  script_not_found : None
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , N ) :			      	i < N ;							      i < N ;							  
	    A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A 	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
							      	j < N ;							    	for ( int j = i + 1 ;					  
							      	j ++ ) {						    	j < N ;							  
							      	  int temp = A [ i ] [ j ] ;				    	j ++ ) {						  
							      	  A [ i ] [ j ] = A [ j ] [ i ] ;			    	  A [ i ] [ j ] = A [ j ] [ i ] ;			  
							      	  A [ j ] [ i ] = temp ;				    	  A [ j ] [ i ] = A [ i ] [ j ] ;			  
							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
def findMinDiff ( arr , n ) :				      static int findMinDiff ( int [ ] arr , int n ) {		    static int findMinDiff ( int [ ] arr , int n ) {		  failure : #Results:9, 10
    arr = sorted ( arr )				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    diff = 10 ** 20					      	int diff = Integer . MAX_VALUE ;			      int diff = 10 * 20 ;					  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i + 1 ] - arr [ i ] < diff :		      	i < n - 1 ;						      i < n - 1 ;						  
	    diff = arr [ i + 1 ] - arr [ i ]		      	i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [   i ++ ) {							  
    return diff						      	return diff ;						    	if ( arr [ i + 1 ] - arr [ i ] < diff ) {		  
							      }								    	  diff = arr [ i + 1 ] - arr [ i ] ;			  
							      								    	}							  
							      								      }								  
							      								      return diff ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
def CountSquares ( a , b ) :				      static int countSquares ( int a , int b ) {		    protected static int countSquares ( int a , int b ) {	  failure : #Results:5, 10
    cnt = 0						      	int cnt = 0 ;						      int cnt = 0 ;						  
    for i in range ( a , b + 1 ) :			      	for ( int i = a ;					      for ( int i = a ;						  
	j = 1 ;						      	i <= b ;						      i <= b ;							  
	while j * j <= i :				      	i ++ ) for ( int j = 1 ;				      i ++ ) {							  
	    if j * j == i :				      	j * j <= i ;						    	int j = 1 ;						  
		cnt = cnt + 1				      	j ++ ) if ( j * j == i ) cnt ++ ;			    	while ( j * j <= i ) {					  
	    j = j + 1					      	return cnt ;						    	  if ( j * j == i ) {					  
	i = i + 1					      }								    	    cnt = cnt + 1 ;					  
    return cnt						      								    	  }							  
							      								    	  j = j + 1 ;						  
							      								    	}							  
							      								    	i = i + 1 ;						  
							      								      }								  
							      								      return cnt ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS				      BREAK_NUMBER_THREE_PARTS					    BREAK_NUMBER_THREE_PARTS					  BREAK_NUMBER_THREE_PARTS
--							      --							    --								  --
def count_of_ways ( n ) :				      static long count_of_ways ( long n ) {			    public static int countOfWays ( int n ) {			  error : BREAK_NUMBER_THREE_PARTS.java:62: error: i
    count = 0						      	long count = 0 ;					      int count = 0 ;						  ncompatible types: Long cannot be converted to int
    for i in range ( 0 , n + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  	   if(f_filled(param0.get(i)) == f_gold(para
	for j in range ( 0 , n + 1 ) :			      	i <= n ;						      i <= n ;							  m0.get(i)))				    ^ Note:
	    for k in range ( 0 , n + 1 ) :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  Some messages have been simplified; recompile with
		if ( i + j + k == n ) :			      	j <= n ;						    	for ( int j = 0 ;					   -Xdiags:verbose to get full output 1 error
		    count = count + 1			      	j ++ ) for ( int k = 0 ;				    	j <= n ;						  
    return count					      	k <= n ;						    	j ++ ) {						  
							      	k ++ ) if ( i + j + k == n ) count ++ ;			    	  for ( int k = 0 ;					  
							      	return count ;						    	  k <= n ;						  
							      }								    	  k ++ ) {						  
							      								    	    if ( ( i + j + k ) == n ) {				  
							      								    	      count = count + 1 ;				  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
def findHeight ( parent , n ) :				      static int findHeight ( int [ ] parent , int n ) {	    static int findHeight ( int [ ] parent , int n ) {		  script_not_found : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	p = i						      	i < n ;							      i < n ;							  
	current = 1					      	i ++ ) {						      i ++ ) {							  
	while ( parent [ p ] != - 1 ) :			      	  int p = i , current = 1 ;				    	int p = i ;						  
	    current += 1				      	  while ( parent [ p ] != - 1 ) {			    	int current = 1 ;					  
	    p = parent [ p ]				      	    current ++ ;					    	while ( ( p = parent [ p ] ) != - 1 ) {			  
	res = max ( res , current )			      	    p = parent [ p ] ;					    	  current ++ ;						  
    return res						      	  }							    	  p = parent [ p ] ;					  
							      	  res = Math . max ( res , current ) ;			    	}							  
							      	}							    	res = Math . max ( res , current ) ;			  
							      	return res ;						      }								  
							      }								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
def countFriendsPairings ( n ) :			      static int countFriendsPairings ( int n ) {		    static int countFriendsPairings ( int n ) {			  success : None
    a , b , c = 1 , 2 , 0				      	int a = 1 , b = 2 , c = 0 ;				      int a = 1 , b = 2 , c = 0 ;				  
    if ( n <= 2 ) :					      	if ( n <= 2 ) {						      if ( ( n <= 2 ) ) {					  
	return n					      	  return n ;						    	return n ;						  
    for i in range ( 3 , n + 1 ) :			      	}							      }								  
	c = b + ( i - 1 ) * a				      	for ( int i = 3 ;					      for ( int i = 3 ;						  
	a = b						      	i <= n ;						      i <= n ;							  
	b = c						      	i ++ ) {						      i ++ ) {							  
    return c						      	  c = b + ( i - 1 ) * a ;				    	c = b + ( i - 1 ) * a ;					  
							      	  a = b ;						    	a = b ;							  
							      	  b = c ;						    	b = c ;							  
							      	}							      }								  
							      	return c ;						      return c ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
def numofsubset ( arr , n ) :				      static int numofsubset ( int arr [ ] , int n ) {		    public static int numofsubset ( int [ ] arr , int n ) {	  failure : #Results:0, 10
    x = sorted ( arr )					      	Arrays . sort ( arr ) ;					      int [ ] x = Arrays . copyOf ( arr , arr . length ) ;	  
    count = 1						      	int count = 1 ;						      int count = 1 ;						  
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( x [ i ] + 1 != x [ i + 1 ] ) :		      	i < n - 1 ;						      i <= n - 1 ;						  
	    count = count + 1				      	i ++ ) {						      i ++ ) {							  
    return count					      	  if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;	    	if ( ( x [ i ] + 1 ) != x [ i + 1 ] ) {			  
							      	}							    	  count = count + 1 ;					  
							      	return count ;						    	}							  
							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
def printFibonacciNumbers ( n ) :			      static void printFibonacciNumbers ( int n ) {		    static void printFibonacciNumbers ( int n ) {		  script_not_found : None
    f1 = 0						      	int f1 = 0 , f2 = 1 , i ;				      int f1 = 0 ;						  
    f2 = 1						      	if ( n < 1 ) return ;					      int f2 = 1 ;						  
    if ( n < 1 ) :					      	for ( i = 1 ;						      if ( ( n < 1 ) ) {					  
	return						      	i <= n ;						    	return ;						  
    for x in range ( 0 , n ) :				      	i ++ ) {						      }								  
	print ( f2 , end = " " )			      	  System . out . print ( f2 + " " ) ;			      for ( int x = 0 ;						  
	next = f1 + f2					      	  int next = f1 + f2 ;					      x <= n ;							  
	f1 = f2						      	  f1 = f2 ;						      x ++ ) {							  
	f2 = next					      	  f2 = next ;						    	System . out . print ( f2 + " " ) ;			  
							      	}							    	int next = f1 + f2 ;					  
							      }								    	f1 = f2 ;						  
							      								    	f2 = next ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1	      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1
--							      --							    --								  --
def exponentiation ( bas , exp ) :			      static long exponentiation ( long base , long exp ) {	    public static int exponentiation ( int bas , int exp ) {	  script_not_found : None
    t = 1						      	long t = 1L ;						      int t = 1 ;						  
    while ( exp > 0 ) :					      	while ( exp > 0 ) {					      while ( ( exp > 0 ) ) {					  
	if ( exp % 2 != 0 ) :				      	  if ( exp % 2 != 0 ) t = ( t * base ) % N ;		    	if ( ( exp % 2 != 0 ) ) {				  
	    t = ( t * bas ) % N				      	  base = ( base * base ) % N ;				    	  t = ( t * bas ) % N ;					  
	bas = ( bas * bas ) % N				      	  exp /= 2 ;						    	}							  
	exp = int ( exp / 2 )				      	}							    	bas = ( bas * bas ) % N ;				  
    return t % N					      	return t % N ;						    	exp = ( int ) ( exp / 2 ) ;				  
							      }								      }								  
							      								      return t % N ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
def countSolutions ( n ) :				      static int countSolutions ( int n ) {			    static int countSolutions ( int n ) {			  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    x = 0						      	for ( int x = 0 ;					      int x = 0 ;						  
    while ( x * x < n ) :				      	x * x < n ;						      while ( ( x * x < n ) ) {					  
	y = 0						      	x ++ ) for ( int y = 0 ;				    	int y = 0 ;						  
	while ( x * x + y * y < n ) :			      	x * x + y * y < n ;					    	while ( ( x * x + y * y < n ) ) {			  
	    res = res + 1				      	y ++ ) res ++ ;						    	  res = res + 1 ;					  
	    y = y + 1					      	return res ;						    	  y = y + 1 ;						  
	x = x + 1					      }								    	}							  
    return res						      								    	x = x + 1 ;						  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
def randomize ( arr , n ) :				      static void randomize ( int arr [ ] , int n ) {		    public static int [ ] randomize ( int [ ] arr , int n ) {	  script_not_found : None
    for i in range ( n - 1 , 0 , - 1 ) :		      	Random r = new Random ( ) ;				      for ( int i = n - 1 ;					  
	j = random.randint ( 0 , i + 1 )		      	for ( int i = n - 1 ;					      i > 0 ;							  
	arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	      	i > 0 ;							      i -- ) {							  
    return arr						      	i -- ) {						    	int j = Math . random ( ) ;				  
							      	  int j = r . nextInt ( i + 1 ) ;			    	arr [ i ] = arr [ j ] ;					  
							      	  int temp = arr [ i ] ;				    	arr [ j ] = arr [ i ] ;					  
							      	  arr [ i ] = arr [ j ] ;				      }								  
							      	  arr [ j ] = temp ;					      return arr ;						  
							      	}							    }								  
							      	System . out . println ( Arrays . toString ( arr ) ) ;	    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
def isDivisibleBy7 ( num ) :				      static boolean isDivisibleBy7 ( int num ) {		    public static boolean isDivisibleBy7 ( int num ) {		  success : None
    if num < 0 :					      	if ( num < 0 ) return isDivisibleBy7 ( - num ) ;	      if ( num < 0 ) {						  
	return isDivisibleBy7 ( - num )			      	if ( num == 0 || num == 7 ) return true ;		    	return isDivisibleBy7 ( - num ) ;			  
    if ( num == 0 or num == 7 ) :			      	if ( num < 10 ) return false ;				      }								  
	return True					      	return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1   if ( ( num == 0 ) || ( num == 7 ) ) {			  
    if ( num < 10 ) :					      }								    	return true ;						  
	return False					      								      }								  
    return isDivisibleBy7 ( num // 10 - 2 * ( num - num // 10 								      if ( ( num < 10 ) ) {					  
							      								    	return false ;						  
							      								      }								  
							      								      return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		      MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		    MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO			  MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
def moduloMultiplication ( a , b , mod ) :		      static long moduloMultiplication ( long a , long b , long mod public static int moduloMultiplication ( int a , int b , int  error : MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
    res = 0 ;						      	long res = 0 ;						      int res = 0 ;						  .java:78: error: incompatible types: Long cannot b
    a = a % mod ;					      	a %= mod ;						      a = a % mod ;						  e converted to int	     if(f_filled(param0.get(
    while ( b ) :					      	while ( b > 0 ) {					      while ( ( b ) != 0 ) {					  i),param1.get(i),param2.get(i)) == f_gold(param0.g
	if ( b & 1 ) :					      	  if ( ( b & 1 ) > 0 ) {				    	if ( ( b & 1 ) != 0 ) {					  et(i),param1.get(i),param2.get(i)))
	    res = ( res + a ) % mod ;			      	    res = ( res + a ) % mod ;				    	  res = ( res + a ) % mod ;				  		  ^ Note: Some messages have been si
	a = ( 2 * a ) % mod ;				      	  }							    	}							  mplified; recompile with -Xdiags:verbose to get fu
	b >>= 1 ;					      	  a = ( 2 * a ) % mod ;					    	a = ( 2 * a ) % mod ;					  ll output 1 error
    return res ;					      	  b >>= 1 ;						    	b >>= 1 ;						  
							      	}							      }								  
							      	return res ;						      return res ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
def maximizecube ( l , b , h ) :			      static void maximizecube ( int l , int b , int h ) {	    public static void maximizecube ( int l , int b , int h ) {	  script_not_found : None
    side = gcd ( l , gcd ( b , h ) )			      	int side = gcd ( l , gcd ( b , h ) ) ;			      int side = Math . gcd ( l , Math . gcd ( b , h ) ) ;	  
    num = int ( l / side )				      	int num = l / side ;					      int num = ( int ) ( l / side ) ;				  
    num = int ( num * b / side )			      	num = ( num * b / side ) ;				      num = ( int ) ( num * b / side ) ;			  
    num = int ( num * h / side )			      	num = ( num * h / side ) ;				      num = ( int ) ( num * h / side ) ;			  
    print ( side , num )				      	System . out . println ( side + " " + num ) ;		      System . out . println ( side + " " + num ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
def recSearch ( arr , l , r , x ) :			      static int recSearch ( int arr [ ] , int l , int r , int x )  public static int recSearch ( int [ ] arr , int l , int r , i success : None
    if r < l :						      	if ( r < l ) return - 1 ;				      if ( r < l ) return - 1 ;					  
	return - 1					      	if ( arr [ l ] == x ) return l ;			      if ( arr [ l ] == x ) return l ;				  
    if arr [ l ] == x :					      	if ( arr [ r ] == x ) return r ;			      if ( arr [ r ] == x ) return r ;				  
	return l					      	return recSearch ( arr , l + 1 , r - 1 , x ) ;		      return recSearch ( arr , l + 1 , r - 1 , x ) ;		  
    if arr [ r ] == x :					      }								    }								  
	return r					      								    								  
    return recSearch ( arr , l + 1 , r - 1 , x )	      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def reverseStr ( str ) :				      static void reverseStr ( String str ) {			    static void reverseStr ( int [ ] str ) {			  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ;					  
    i , j = 0 , n - 1					      	char [ ] ch = str . toCharArray ( ) ;			      int i = 0 , j = n - 1 ;					  
    while i < j :					      	char temp ;						      while ( i < j ) {						  
	str [ i ] , str [ j ] = str [ j ] , str [ i ]	      	for ( int i = 0 , j = n - 1 ;				    	str [ i ] = str [ j ] ;					  
	i += 1						      	i < j ;							    	i ++ ;							  
	j -= 1						      	i ++ , j -- ) {						    	j -- ;							  
							      	  temp = ch [ i ] ;					      }								  
							      	  ch [ i ] = ch [ j ] ;					    }								  
							      	  ch [ j ] = temp ;					    								  
							      	}							    								  
							      	System . out . println ( ch ) ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
def eulerian ( n , m ) :				      public static int eulerian ( int n , int m ) {		    public static int eulerian ( int n , int m ) {		  script_not_found : None
    if ( m >= n or n == 0 ) :				      	if ( m >= n || n == 0 ) return 0 ;			      if ( ( m >= n ) || ( n == 0 ) ) {				  
	return 0					      	if ( m == 0 ) return 1 ;				    	return 0 ;						  
    if ( m == 0 ) :					      	return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) *   }								  
	return 1					      }								      if ( ( m == 0 ) ) {					  
    return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 								    	return 1 ;						  
							      								      }								  
							      								      return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
def minLexRotation ( str_ ) :				      static String minLexRotation ( String str ) {		    public static int minLexRotation ( String str_ ) {		  error : LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION.
    n = len ( str_ )					      	int n = str . length ( ) ;				      int n = str_ . length ( ) ;				  java:34: error: incompatible types: String cannot
    arr = [ 0 ] * n					      	String arr [ ] = new String [ n ] ;			      int [ ] arr = new int [ n ] ;				  be converted to int	  arr [ i ] = concat . subst
    concat = str_ + str_				      	String concat = str + str ;				      String concat = str_ + str_ ;				  ring ( i , n + i ) ;
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  	^ LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION.
	arr [ i ] = concat [ i : n + i ]		      	i < n ;							      i < n ;							  java:56: error: int cannot be dereferenced
    arr.sort ( )					      	i ++ ) {						      i ++ ) {							   if(f_filled(param0.get(i)).equals(f_gold(param0.g
    return arr [ 0 ]					      	  arr [ i ] = concat . substring ( i , i + n ) ;	    	arr [ i ] = concat . substring ( i , n + i ) ;		  et(i))))				     ^ 2 err
							      	}							      }								  ors
							      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
							      	return arr [ 0 ] ;					      return arr [ 0 ] ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		    PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
def isPossible ( a , b , n , k ) :			      static boolean isPossible ( Integer a [ ] , int b [ ] , int n static boolean isPossible ( int [ ] a , int [ ] b , int n , i error : PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_
    a.sort ( reverse = True )				      	Arrays . sort ( a , Collections . reverseOrder ( ) ) ;	      Arrays . sort ( a ) ;					  EQUAL_K.java:85: error: incompatible types: Intege
    b.sort ( )						      	Arrays . sort ( b ) ;					      Arrays . sort ( b ) ;					  r[] cannot be converted to int[]	   if(f_fill
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  ed(param0.get(i),param1.get(i),param2.get(i),param
	if ( a [ i ] + b [ i ] < k ) :			      	i < n ;							      i < n ;							  3.get(i)) == f_gold(param0.get(i),param1.get(i),pa
	    return False				      	i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	      i ++ ) {							  ram2.get(i),param3.get(i)))
    return True						      	return true ;						    	if ( ( a [ i ] + b [ i ] ) < k ) {			  	  ^ Note: Some messages have been simplified
							      }								    	  return false ;					  ; recompile with -Xdiags:verbose to get full outpu
							      								    	}							  t 1 error
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
def maxProduct ( arr , n ) :				      static int maxProduct ( int arr [ ] , int n ) {		    public static int maxProduct ( int [ ] arr , int n ) {	  success : None
    if n < 3 :						      	if ( n < 3 ) {						      if ( n < 3 ) {						  
	return - 1					      	  return - 1 ;						    	return - 1 ;						  
    arr.sort ( )					      	}							      }								  
    return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr  	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
							      	return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] ,   return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
def canMakeAllSame ( str ) :				      static boolean canMakeAllSame ( String str ) {		    public static boolean canMakeAllSame ( String str ) {	  success : None
    zeros = 0						      	int zeros = 0 , ones = 0 ;				      int zeros = 0 ;						  
    ones = 0						      	for ( int i = 0 ;					      int ones = 0 ;						  
    for i in range ( 0 , len ( str ) ) :		      	i < str . length ( ) ;					      for ( int i = 0 ;						  
	ch = str [ i ]					      	i ++ ) {						      ( i != str . length ( ) ) && ( i < str . length ( ) ) ;	  
	if ( ch == '0' ) :				      	  char ch = str . charAt ( i ) ;			      i ++ ) {							  
	    zeros = zeros + 1				      	  if ( ch == '0' ) ++ zeros ;				    	char ch = str . charAt ( i ) ;				  
	else :						      	  else ++ ones ;					    	if ( ( ch == '0' ) ) {					  
	    ones = ones + 1				      	}							    	  zeros = zeros + 1 ;					  
    return ( zeros == 1 or ones == 1 )			      	return ( zeros == 1 || ones == 1 ) ;			    	}							  
							      }								    	else {							  
							      								    	  ones = ones + 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return ( zeros == 1 || ones == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  success : None
    if ( ( a < b and b < c ) or ( c < b and b < a ) ) :	      	if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;    if ( ( ( a < b && b < c ) || ( c < b && b < a ) ) ) {	  
	return b					      	else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return 	return b ;						  
    if ( ( b < a and a < c ) or ( c < a and a < b ) ) :	      	else return c ;						      }								  
	return a					      }								      if ( ( ( b < a && a < c ) || ( c < a && a < b ) ) ) {	  
    else :						      								    	return a ;						  
	return c					      								      }								  
							      								      else {							  
							      								    	return c ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
def binaryToDecimal ( n ) :				      static int binaryToDecimal ( String n ) {			    static int binaryToDecimal ( int n ) {			  error : PROGRAM_BINARY_DECIMAL_CONVERSION_1.java:6
    num = n						      	String num = n ;					      String num = String . valueOf ( n ) ;			  0: error: incompatible types: String cannot be con
    dec_value = 0					      	int dec_value = 0 ;					      int decValue = 0 ;					  verted to int		if(f_filled(param0.get(i)) =
    base1 = 1						      	int base = 1 ;						      int base1 = 1 ;						  = f_gold(param0.get(i)))
    len1 = len ( num )					      	int len = num . length ( ) ;				      int len1 = num . length ( ) ;				       ^ Note: Some messages have been simplified; r
    for i in range ( len1 - 1 , - 1 , - 1 ) :		      	for ( int i = len - 1 ;					      for ( int i = len1 - 1 ;					  ecompile with -Xdiags:verbose to get full output 1
	if ( num [ i ] == '1' ) :			      	i >= 0 ;						      i >= 0 ;							   error
	    dec_value += base1				      	i -- ) {						      i -- ) {							  
	base1 = base1 * 2				      	  if ( num . charAt ( i ) == '1' ) dec_value += base ;	    	if ( ( num . charAt ( i ) == '1' ) ) {			  
    return dec_value					      	  base = base * 2 ;					    	  decValue += base1 ;					  
							      	}							    	}							  
							      	return dec_value ;					    	base1 = base1 * 2 ;					  
							      }								      }								  
							      								      return decValue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
def minXOR ( arr , n ) :				      static int minXOR ( int arr [ ] , int n ) {		    public static int minXOR ( int [ ] arr , int n ) {		  success : None
    arr.sort ( )					      	int min_xor = Integer . MAX_VALUE ;			      Arrays . sort ( arr ) ;					  
    min_xor = 999999					      	for ( int i = 0 ;					      int minXor = 999999 ;					  
    val = 0						      	i < n ;							      int val = 0 ;						  
    for i in range ( 0 , n - 1 ) :			      	i ++ ) for ( int j = i + 1 ;				      for ( int i = 0 ;						  
	for j in range ( i + 1 , n - 1 ) :		      	j < n ;							      i <= n - 1 ;						  
	    val = arr [ i ] ^ arr [ j ]			      	j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j   i ++ ) {							  
	    min_xor = min ( min_xor , val )		      	return min_xor ;					    	for ( int j = i + 1 ;					  
    return min_xor					      }								    	j <= n - 1 ;						  
							      								    	j ++ ) {						  
							      								    	  val = arr [ i ] ^ arr [ j ] ;				  
							      								    	  minXor = Math . min ( minXor , val ) ;		  
							      								    	}							  
							      								      }								  
							      								      return minXor ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION
--							      --							    --								  --
def mulmod ( a , b , mod ) :				      static long mulmod ( long a , long b , long mod ) {	    public static int mulmod ( int a , int b , int mod ) {	  error : HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLIC
    res = 0						      	long res = 0 ;						      int res = 0 ;						  ATION.java:78: error: incompatible types: Long can
    a = a % mod						      	a = a % mod ;						      a = a % mod ;						  not be converted to int	  if(f_filled(param0
    while ( b > 0 ) :					      	while ( b > 0 ) {					      while ( ( b > 0 ) ) {					  .get(i),param1.get(i),param2.get(i)) == f_gold(par
	if ( b % 2 == 1 ) :				      	  if ( b % 2 == 1 ) {					    	if ( ( b % 2 ) == 1 ) {					  am0.get(i),param1.get(i),param2.get(i)))
	    res = ( res + a ) % mod			      	    res = ( res + a ) % mod ;				    	  res = ( res + a ) % mod ;				  		       ^ Note: Some messages have be
	a = ( a * 2 ) % mod				      	  }							    	}							  en simplified; recompile with -Xdiags:verbose to g
	b //= 2						      	  a = ( a * 2 ) % mod ;					    	a = ( a * 2 ) % mod ;					  et full output 1 error
    return res % mod					      	  b /= 2 ;						    	b /= 2 ;						  
							      	}							      }								  
							      	return res % mod ;					      return res % mod ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE			  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
def recursiveReverse ( str ) :				      public static String recursiveReverse ( char [ ] str ) {	    static void recursiveReverse ( int [ ] str ) {		  script_not_found : None
    stack = [ ]						      	Stack < Character > st = new Stack < > ( ) ;		      Stack < Integer > stack = new Stack < > ( ) ;		  
    for i in range ( len ( str ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	stack.append ( str [ i ] )			      	i < str . length ;					      i < str . length ;					  
    for i in range ( len ( str ) ) :			      	i ++ ) st . push ( str [ i ] ) ;			      i ++ ) {							  
	str [ i ] = stack.pop ( )			      	for ( int i = 0 ;					    	stack . push ( str [ i ] ) ;				  
							      	i < str . length ;					      }								  
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  str [ i ] = st . peek ( ) ;				      i < str . length ;					  
							      	  st . pop ( ) ;					      i ++ ) {							  
							      	}							    	str [ i ] = stack . pop ( ) ;				  
							      	return String . valueOf ( str ) ;			      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
def nonFibonacci ( n ) :				      static int nonFibonacci ( int n ) {			    public static int nonFibonacci ( int n ) {			  success : None
    prevPrev = 1					      	int prevPrev = 1 , prev = 2 , curr = 3 ;		      int prevPrev = 1 ;					  
    prev = 2						      	while ( n > 0 ) {					      int prev = 2 ;						  
    curr = 3						      	  prevPrev = prev ;					      int curr = 3 ;						  
    while n > 0 :					      	  prev = curr ;						      while ( n > 0 ) {						  
	prevPrev = prev					      	  curr = prevPrev + prev ;				    	prevPrev = prev ;					  
	prev = curr					      	  n = n - ( curr - prev - 1 ) ;				    	prev = curr ;						  
	curr = prevPrev + prev				      	}							    	curr = prevPrev + prev ;				  
	n = n - ( curr - prev - 1 )			      	n = n + ( curr - prev - 1 ) ;				    	n = n - ( curr - prev - 1 ) ;				  
    n = n + ( curr - prev - 1 )				      	return prev + n ;					      }								  
    return prev + n					      }								      n = n + ( curr - prev - 1 ) ;				  
							      								      return prev + n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_
--							      --							    --								  --
def multiply ( x , y ) :				      static int multiply ( int x , int y ) {			    public static int multiply ( int x , int y ) {		  success : None
    if ( y == 0 ) :					      	if ( y == 0 ) return 0 ;				      if ( ( y == 0 ) ) {					  
	return 0					      	if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	    	return 0 ;						  
    if ( y > 0 ) :					      	if ( y < 0 ) return - multiply ( x , - y ) ;		      }								  
	return ( x + multiply ( x , y - 1 ) )		      	return - 1 ;						      if ( ( y > 0 ) ) {					  
    if ( y < 0 ) :					      }								    	return ( x + multiply ( x , y - 1 ) ) ;			  
	return - multiply ( x , - y )			      								      }								  
							      								      if ( ( y < 0 ) ) {					  
							      								    	return - multiply ( x , - y ) ;				  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
def firstNonRepeating ( arr , n ) :			      static int firstNonRepeating ( int arr [ ] , int n ) {	    static int firstNonRepeating ( int [ ] arr , int n ) {	  success : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	j = 0						      	i < n ;							      i < n ;							  
	while ( j < n ) :				      	i ++ ) {						      i ++ ) {							  
	    if ( i != j and arr [ i ] == arr [ j ] ) :	      	  int j ;						    	int j = 0 ;						  
		break					      	  for ( j = 0 ;						    	while ( ( j < n ) ) {					  
	    j += 1					      	  j < n ;						    	  if ( ( i != j ) && arr [ i ] == arr [ j ] ) break ;	  
	if ( j == n ) :					      	  j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;    	  j ++ ;						  
	    return arr [ i ]				      	  if ( j == n ) return arr [ i ] ;			    	}							  
    return - 1						      	}							    	if ( ( j == n ) ) return arr [ i ] ;			  
							      	return - 1 ;						      }								  
							      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
def countSubstringWithEqualEnds ( s ) :			      static int countSubstringWithEqualEnds ( String s ) {	    static int countSubstringWithEqualEnds ( String s ) {	  success : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i , n ) :			      	i < n ;							      i < n ;							  
	    if ( s [ i ] == s [ j ] ) :			      	i ++ ) for ( int j = i ;				      i ++ ) {							  
		result = result + 1			      	j < n ;							    	for ( int j = i ;					  
    return result					      	j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result + 	j < n ;							  
							      	return result ;						    	j ++ ) {						  
							      }								    	  if ( ( s . charAt ( i ) == s . charAt ( j ) ) ) {	  
							      								    	    result = result + 1 ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				      EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				    EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				  EQUILIBRIUM_INDEX_OF_AN_ARRAY_1
--							      --							    --								  --
def equilibrium ( arr ) :				      int equilibrium ( int arr [ ] , int n ) {			    public static int equilibrium ( int [ ] arr ) {		  error : EQUILIBRIUM_INDEX_OF_AN_ARRAY_1.java:31: e
    total_sum = sum ( arr )				      	int sum = 0 ;						      int totalSum = Arrays . stream ( arr ) . mapToInt ( Integer rror: cannot find symbol   int totalSum = Arrays .
    leftsum = 0						      	int leftsum = 0 ;					      int leftsum = 0 ;						   stream ( arr ) . mapToInt ( Integer :: intValue )
    for i , num in enumerate ( arr ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						   . sum ( ) ;
	total_sum -= num				      	i < n ;							      i < arr . length ;					      ^	  symbol:   method mapToInt(Integer::intValu
	if leftsum == total_sum :			      	++ i ) sum += arr [ i ] ;				      i ++ ) {							  e)   location: interface IntStream EQUILIBRIUM_IND
	    return i					      	for ( int i = 0 ;					    	int num = arr [ i ] ;					  EX_OF_AN_ARRAY_1.java:73: error: method f_filled i
	leftsum += num					      	i < n ;							    	totalSum -= num ;					  n class EQUILIBRIUM_INDEX_OF_AN_ARRAY_1 cannot be
    return - 1						      	++ i ) {						    	if ( leftsum == totalSum ) {				  applied to given types;	  if(f_filled(param0
							      	  sum -= arr [ i ] ;					    	  return i ;						  .get(i),param1.get(i)) == f_gold(param0.get(i),par
							      	  if ( leftsum == sum ) return i ;			    	}							  am1.get(i)))		  ^   required: int[]	foun
							      	  leftsum += arr [ i ] ;				    	leftsum += num ;					  d: int[],Integer   reason: actual and formal argum
							      	}							      }								  ent lists differ in length 2 errors
							      	return - 1 ;						      return - 1 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
def countNegative ( M , n , m ) :			      static int countNegative ( int M [ ] [ ] , int n , int m ) {  static int countNegative ( int [ ] [ ] M , int n , int m ) {  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( m ) :				      	i < n ;							      i < n ;							  
	    if M [ i ] [ j ] < 0 :			      	i ++ ) {						      i ++ ) {							  
		count += 1				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    else :					      	  j < m ;						    	j < m ;							  
		break					      	  j ++ ) {						    	j ++ ) {						  
    return count					      	    if ( M [ i ] [ j ] < 0 ) count += 1 ;		    	  if ( M [ i ] [ j ] < 0 ) {				  
							      	    else break ;					    	    count ++ ;						  
							      	  }							    	  }							  
							      	}							    	  else {						  
							      	return count ;						    	    break ;						  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
def countSeq ( n ) :					      static int countSeq ( int n ) {				    static int countSeq ( int n ) {				  success : None
    nCr = 1						      	int nCr = 1 , res = 1 ;					      int nCr = 1 ;						  
    res = 1						      	for ( int r = 1 ;					      int res = 1 ;						  
    for r in range ( 1 , n + 1 ) :			      	r <= n ;						      for ( int r = 1 ;						  
	nCr = ( nCr * ( n + 1 - r ) ) / r ;		      	r ++ ) {						      r <= n ;							  
	res += nCr * nCr ;				      	  nCr = ( nCr * ( n + 1 - r ) ) / r ;			      r ++ ) {							  
    return res ;					      	  res += nCr * nCr ;					    	nCr = ( nCr * ( n + 1 - r ) ) / r ;			  
							      	}							    	res += nCr * nCr ;					  
							      	return res ;						      }								  
							      }								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
def isPrime ( p ) :					      static boolean isPrime ( int p ) {			    public static boolean isPrime ( int p ) {			  failure : #Results:9, 10
    checkNumber = 2 ** p - 1				      	double checkNumber = Math . pow ( 2 , p ) - 1 ;		      int checkNumber = 2 * p - 1 ;				  
    nextval = 4 % checkNumber				      	double nextval = 4 % checkNumber ;			      int nextVal = 4 % checkNumber ;				  
    for i in range ( 1 , p - 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	nextval = ( nextval * nextval - 2 ) % checkNumber     	i < p - 1 ;						      i <= p - 1 ;						  
    if ( nextval == 0 ) : return True			      	i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ;    i ++ ) {							  
    else : return False					      	return ( nextval == 0 ) ;				    	nextVal = ( nextVal * nextVal - 2 ) % checkNumber ;	  
							      }								      }								  
							      								      if ( ( nextVal == 0 ) ) return true ;			  
							      								      else return false ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
def minXOR ( arr , n ) :				      static int minXOR ( int arr [ ] , int n ) {		    public static int minXOR ( float [ ] arr , int n ) {	  error : MINIMUM_XOR_VALUE_PAIR_1.java:34: error: b
    arr.sort ( )					      	Arrays . parallelSort ( arr ) ;				      Arrays . sort ( arr ) ;					  ad operand types for binary operator '^'     val =
    minXor = int ( sys.float_info.max )			      	int minXor = Integer . MAX_VALUE ;			      int minXor = ( int ) Math . max ( 0 , arr . length ) ;	   arr [ i ] ^ arr [ i + 1 ] ;			   ^
    val = 0						      	int val = 0 ;						      float val = 0 ;						     first type:  float	  second type: float MINIMUM
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  _XOR_VALUE_PAIR_1.java:35: error: incompatible typ
	val = arr [ i ] ^ arr [ i + 1 ]			      	i < n - 1 ;						      i <= n - 1 ;						  es: possible lossy conversion from float to int
	minXor = min ( minXor , val )			      	i ++ ) {						      i ++ ) {							    minXor = Math . min ( minXor , val ) ;
    return minXor					      	  val = arr [ i ] ^ arr [ i + 1 ] ;			    	val = arr [ i ] ^ arr [ i + 1 ] ;			  		 ^ MINIMUM_XOR_VALUE_PAIR_1.java:67:
							      	  minXor = Math . min ( minXor , val ) ;		    	minXor = Math . min ( minXor , val ) ;			   error: incompatible types: int[] cannot be conver
							      	}							      }								  ted to float[]	 if(f_filled(param0.get(i),p
							      	return minXor ;						      return minXor ;						  aram1.get(i)) == f_gold(param0.get(i),param1.get(i
							      }								    }								  )))				    ^ Note: Some mes
							      								    								  sages have been simplified; recompile with -Xdiags
							      								    								  :verbose to get full output 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      int binarySearch ( int arr [ ] , int x ) {		    static int binarySearch ( int [ ] arr , int l , int r , int x script_not_found : None
    while l <= r :					      	int l = 0 , r = arr . length - 1 ;			      while ( l <= r ) {					  
	mid = l + ( r - l ) // 2			      	while ( l <= r ) {					    	int mid = l + ( r - l ) / 2 ;				  
	if arr [ mid ] == x :				      	  int m = l + ( r - l ) / 2 ;				    	if ( arr [ mid ] == x ) {				  
	    return mid					      	  if ( arr [ m ] == x ) return m ;			    	  return mid ;						  
	elif arr [ mid ] < x :				      	  if ( arr [ m ] < x ) l = m + 1 ;			    	}							  
	    l = mid + 1					      	  else r = m - 1 ;					    	else if ( arr [ mid ] < x ) {				  
	else :						      	}							    	  l = mid + 1 ;						  
	    r = mid - 1					      	return - 1 ;						    	}							  
    return - 1						      }								    	else {							  
							      								    	  r = mid - 1 ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
def countIntegralSolutions ( n ) :			      static int countIntegralSolutions ( int n ) {		    static int countIntegralSolutions ( int n ) {		  failure : #Results:0, 10
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n + 1 ) :			      	i <= n ;						      i < n + 1 ;						  
	    for k in range ( n + 1 ) :			      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		if i + j + k == n :			      	j <= n - i ;						    	for ( int j = 0 ;					  
		    result += 1				      	j ++ ) for ( int k = 0 ;				    	j < n + 1 ;						  
    return result					      	k <= ( n - i - j ) ;					    	j ++ ) {						  
							      	k ++ ) if ( i + j + k == n ) result ++ ;		    	  for ( int k = 0 ;					  
							      	return result ;						    	  k < n ;						  
							      }								    	  k ++ ) {						  
							      								    	    if ( i + j + k == n ) {				  
							      								    	      result ++ ;					  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
def power ( x , y , p ) :				      static int power ( int x , int y , int p ) {		    public static int power ( int x , int y , int p ) {		  error : MODULAR_EXPONENTIATION_POWER_IN_MODULAR_AR
    res = 1						      	int res = 1 ;						      int res = 1 ;						  ITHMETIC.java:28: error: incomparable types: boole
    x = x % p						      	x = x % p ;						      x = x % p ;						  an and int   while ( ( y > 0 ) != 0 ) {
    while ( y > 0 ) :					      	while ( y > 0 ) {					      while ( ( y > 0 ) != 0 ) {				  	    ^ 1 error
	if ( ( y & 1 ) == 1 ) :				      	  if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;		    	if ( ( ( y & 1 ) == 1 ) ) {				  
	    res = ( res * x ) % p			      	  y = y >> 1 ;						    	  res = ( res * x ) % p ;				  
	y = y >> 1					      	  x = ( x * x ) % p ;					    	}							  
	x = ( x * x ) % p				      	}							    	y = y >> 1 ;						  
    return res						      	return res ;						    	x = ( x * x ) % p ;					  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
def minPerimeter ( n ) :				      public static long minPerimeter ( int n ) {		    public static double minPerimeter ( double n ) {		  failure : #Results:0, 10
    l = math.sqrt ( n )					      	int l = ( int ) Math . sqrt ( n ) ;			      double l = Math . sqrt ( n ) ;				  
    sq = l * l						      	int sq = l * l ;					      double sq = l * l ;					  
    if ( sq == n ) :					      	if ( sq == n ) return l * 4 ;				      if ( ( sq == n ) ) {					  
	return l * 4					      	else {							    	return l * 4 ;						  
    else :						      	  long row = n / l ;					      }								  
	row = n / l					      	  long perimeter = 2 * ( l + row ) ;			      else {							  
	perimeter = 2 * ( l + row )			      	  if ( n % l != 0 ) perimeter += 2 ;			    	double row = n / l ;					  
	if ( n % l != 0 ) :				      	  return perimeter ;					    	double perimeter = 2 * ( l + row ) ;			  
	    perimeter += 2				      	}							    	if ( ( n % l != 0 ) ) {					  
	return perimeter				      }								    	  perimeter += 2 ;					  
							      								    	}							  
							      								    	return perimeter ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2
--							      --							    --								  --
def numberOfPaths ( p , q ) :				      static int numberOfPaths ( int m , int n ) {		    static int numberOfPaths ( int p , int q ) {		  success : None
    dp = [ 1 for i in range ( q ) ]			      	int [ ] dp = new int [ n ] ;				      int [ ] dp = new int [ q ] ;				  
    for i in range ( p - 1 ) :				      	dp [ 0 ] = 1 ;						      for ( int i = 0 ;						  
	for j in range ( 1 , q ) :			      	for ( int i = 0 ;					      i < dp . length ;						  
	    dp [ j ] += dp [ j - 1 ]			      	i < m ;							      i ++ ) dp [ i ] = 1 ;					  
    return dp [ q - 1 ]					      	i ++ ) {						      for ( int i = 0 ;						  
							      	  for ( int j = 1 ;					      i < p - 1 ;						  
							      	  j < n ;						      i ++ ) {							  
							      	  j ++ ) {						    	for ( int j = 1 ;					  
							      	    dp [ j ] += dp [ j - 1 ] ;				    	j < q ;							  
							      	  }							    	j ++ ) dp [ j ] += dp [ j - 1 ] ;			  
							      	}							      }								  
							      	return dp [ n - 1 ] ;					      return dp [ q - 1 ] ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
def isPowerOfFour ( n ) :				      static int isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
    count = 0						      	int count = 0 ;						      int count = 0 ;						  4_OR_NOT_1.java:29: error: bad operand type int fo
    if ( n and ( not ( n & ( n - 1 ) ) ) ) :		      	int x = n & ( n - 1 ) ;					      if ( ( n != 0 ) && ( ! ( n & ( n - 1 ) ) ) ) {		  r unary operator '!'	 if ( ( n != 0 ) && ( ! ( n
	while ( n > 1 ) :				      	if ( n > 0 && x == 0 ) {				    	while ( ( n > 1 ) ) {					  & ( n - 1 ) ) ) ) {			     ^ FIND_
	    n >>= 1					      	  while ( n > 1 ) {					    	  n >>= 1 ;						  WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1.ja
	    count += 1					      	    n >>= 1 ;						    	  count ++ ;						  va:60: error: incomparable types: boolean and int
	if ( count % 2 == 0 ) :				      	    count += 1 ;					    	}							  	  if(f_filled(param0.get(i)) == f_gold(param
	    return True					      	  }							    	if ( ( count % 2 ) == 0 ) {				  0.get(i)))					^ 2
	else :						      	  return ( count % 2 == 0 ) ? 1 : 0 ;			    	  return true ;						  errors
	    return False				      	}							    	}							  
							      	return 0 ;						    	else {							  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
def subArray ( arr , n ) :				      static void subArray ( int n ) {				    public static void subArray ( int [ ] arr , int n ) {	  script_not_found : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i , n ) :			      	i < n ;							      i <= n ;							  
	    for k in range ( i , j + 1 ) :		      	i ++ ) {						      i ++ ) {							  
		print ( arr [ k ] , end = "" )		      	  for ( int j = i ;					    	for ( int j = i ;					  
	    print ( "\n" , end = "" )			      	  j < n ;						    	j < n ;							  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    for ( int k = i ;					    	  for ( int k = i ;					  
							      	    k <= j ;						    	  k <= j ;						  
							      	    k ++ ) System . out . print ( arr [ k ] + " " ) ;	    	  k ++ ) {						  
							      	  }							    	    System . out . print ( arr [ k ] + " " ) ;		  
							      	}							    	  }							  
							      }								    	  System . out . print ( "\n" ) ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
def countDivisibles ( arr , n ) :			      static int countDivisibles ( int arr [ ] , int n ) {	    static int countDivisibles ( int [ ] arr , int n ) {	  script_not_found : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if ( arr [ i ] % arr [ j ] == 0 or arr [ j ] % ar 	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		res += 1				      	j < n ;							    	for ( int j = i + 1 ;					  
    return res						      	j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ 	j < n ;							  
							      	return res ;						    	j ++ ) {						  
							      }								    	  if ( ( arr [ i ] % arr [ j ] == 0 ) || ( arr [ j ] % ar 
							      								    	    res ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
def findCombinations ( string , index , out ) :		      static void findCombinations ( String str , int index , Strin static void findCombinations ( String string , int index , St script_not_found : None
    if index == len ( string ) :			      	if ( index == str . length ( ) ) System . out . println ( o   if ( index == string . length ( ) ) {			  
	print ( out )					      	for ( int i = index ;					    	System . out . println ( out ) ;			  
    for i in range ( index , len ( string ) , 1 ) :	      	i < str . length ( ) ;					      }								  
	findCombinations ( string , i + 1 , out + "(" + strin 	i ++ ) findCombinations ( str , i + 1 , out + "(" + str . s   for ( int i = index ;					  
							      }								      i < string . length ( ) ;					  
							      								      i += 1 ) {						  
							      								    	findCombinations ( string , i + 1 , out + "(" + string .  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
def decToBinary ( n ) :					      static void decToBinary ( int n ) {			    static void decToBinary ( int n ) {				  script_not_found : None
    binaryNum = [ 0 ] * n				      	int [ ] binaryNum = new int [ 32 ] ;			      int [ ] binaryNum = new int [ n ] ;			  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( n > 0 ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) ) {					  
	binaryNum [ i ] = n % 2				      	  binaryNum [ i ] = n % 2 ;				    	binaryNum [ i ] = n % 2 ;				  
	n = int ( n / 2 )				      	  n = n / 2 ;						    	n = ( int ) ( n / 2 ) ;					  
	i += 1						      	  i ++ ;						    	i ++ ;							  
    for j in range ( i - 1 , - 1 , - 1 ) :		      	}							      }								  
	print ( binaryNum [ j ] , end = "" )		      	for ( int j = i - 1 ;					      for ( int j = i - 1 ;					  
							      	j >= 0 ;						      j >= 0 ;							  
							      	j -- ) System . out . print ( binaryNum [ j ] ) ;	      j -- ) {							  
							      }								    	System . out . print ( binaryNum [ j ] + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
def printDistinct ( arr , n ) :				      static void printDistinct ( int arr [ ] ) {		    static void printDistinct ( int [ ] arr , int n ) {		  script_not_found : None
    s = dict ( )					      	HashSet < Integer > set = new HashSet < > ( ) ;		      Map < Integer , Integer > s = new HashMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] not in s.keys ( ) ) :		      	i < arr . length ;					      i < n ;							  
	    s [ arr [ i ] ] = arr [ i ]			      	i ++ ) {						      i ++ ) {							  
	    print ( arr [ i ] , end = " " )		      	  if ( ! set . contains ( arr [ i ] ) ) {		    	if ( ( arr [ i ] ) != null && ! s . keySet ( ) . contains 
							      	    set . add ( arr [ i ] ) ;				    	  s . put ( arr [ i ] , arr [ i ] ) ;			  
							      	    System . out . print ( arr [ i ] + " " ) ;		    	  System . out . print ( arr [ i ] + " " ) ;		  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
def nearestSmallerEqFib ( n ) :				      public static int nearestSmallerEqFib ( int n ) {		    public static int nearestSmallerEqFib ( int n ) {		  success : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return n ;			      if ( ( n == 0 ) || ( n == 1 ) ) return n ;		  
	return n					      	int f1 = 0 , f2 = 1 , f3 = 1 ;				      int f1 = 0 , f2 = 1 , f3 = 1 ;				  
    f1 , f2 , f3 = 0 , 1 , 1				      	while ( f3 <= n ) {					      while ( ( f3 <= n ) ) {					  
    while ( f3 <= n ) :					      	  f1 = f2 ;						    	f1 = f2 ;						  
	f1 = f2 ;					      	  f2 = f3 ;						    	f2 = f3 ;						  
	f2 = f3 ;					      	  f3 = f1 + f2 ;					    	f3 = f1 + f2 ;						  
	f3 = f1 + f2 ;					      	}							      }								  
    return f2 ;						      	return f2 ;						      return f2 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
def maxTasks ( high , low , n ) :			      static int maxTasks ( int high [ ] , int low [ ] , int n ) {  static int maxTasks ( int [ ] high , int [ ] low , int n ) {  success : None
    if ( n <= 0 ) :					      	if ( n <= 0 ) return 0 ;				      if ( ( n <= 0 ) ) {					  
	return 0					      	return Math . max ( high [ n - 1 ] + maxTasks ( high , low  	return 0 ;						  
    return max ( high [ n - 1 ] + maxTasks ( high , low , ( n }								      }								  
							      								      return Math . max ( high [ n - 1 ] + maxTasks ( high , low  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
def sequence ( n ) :					      static int sequence ( int n ) {				    public static int sequence ( int n ) {			  error : NEWMAN_CONWAY_SEQUENCE_1.java:36: error: c
    f = array.array ( 'i' , [ 0 , 1 , 1 ] )		      	int f [ ] = new int [ n + 1 ] ;				      int [ ] f = new int [ ] {					  annot find symbol	return r ;	      ^	  sy
    for i in range ( 3 , n + 1 ) :			      	f [ 0 ] = 0 ;						    	0 , 1 , 1 }						  mbol:	  variable r   location: class NEWMAN_CONWAY
	r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]	      	f [ 1 ] = 1 ;						    	;							  _SEQUENCE_1 1 error
	f.append ( r ) ;				      	f [ 2 ] = 1 ;						    	for ( int i = 3 ;					  
    return r						      	int i ;							    	i <= n ;						  
							      	for ( i = 3 ;						    	i ++ ) {						  
							      	i <= n ;						    	  int r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	  
							      	i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  	  f [ i ] = r ;						  
							      	return f [ n ] ;					    	}							  
							      }								    	return r ;						  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_GAMES_PLAYED_WINNER				      MAXIMUM_GAMES_PLAYED_WINNER				    MAXIMUM_GAMES_PLAYED_WINNER					  MAXIMUM_GAMES_PLAYED_WINNER
--							      --							    --								  --
def maxGameByWinner ( N ) :				      static int maxGameByWinner ( int N ) {			    public static int maxGameByWinner ( int N ) {		  success : None
    dp = [ 0 for i in range ( N ) ]			      	int [ ] dp = new int [ N ] ;				      int [ ] dp = new int [ N ] ;				  
    dp [ 0 ] = 1					      	dp [ 0 ] = 1 ;						      for ( int i = 0 ;						  
    dp [ 1 ] = 2					      	dp [ 1 ] = 2 ;						      i < dp . length ;						  
    i = 1						      	int i = 2 ;						      i ++ ) dp [ i ] = 0 ;					  
    while dp [ i ] <= N :				      	do {							      dp [ 0 ] = 1 ;						  
	i = i + 1					      	  dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		      dp [ 1 ] = 2 ;						  
	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ]		      	}							      int i = 1 ;						  
    return ( i - 1 )					      	while ( dp [ i ++ ] <= N ) ;				      while ( dp [ i ] <= N ) {					  
							      	return ( i - 2 ) ;					    	i = i + 1 ;						  
							      }								    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		  
							      								      }								  
							      								      return ( i - 1 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OPERATIONS_MAKE_STRINGAB_FREE			      COUNT_OPERATIONS_MAKE_STRINGAB_FREE			    COUNT_OPERATIONS_MAKE_STRINGAB_FREE				  COUNT_OPERATIONS_MAKE_STRINGAB_FREE
--							      --							    --								  --
def abFree ( s ) :					      static int abFree ( char [ ] s ) {			    public static int abFree ( String s ) {			  error : COUNT_OPERATIONS_MAKE_STRINGAB_FREE.java:6
    b_count = 0						      	int b_count = 0 ;					      int bCount = 0 ;						  4: error: incompatible types: char[] cannot be con
    res = 0						      	int res = 0 ;						      int res = 0 ;						  verted to String	   if(f_filled(param0.get(i)
    for i in range ( len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  ) == f_gold(param0.get(i)))
	if s [ ~ i ] == 'a' :				      	i < s . length ;					      i < s . length ( ) ;					  	  ^ Note: Some messages have been simplified
	    res = ( res + b_count )			      	i ++ ) {						      i ++ ) {							  ; recompile with -Xdiags:verbose to get full outpu
	    b_count = ( b_count * 2 )			      	  if ( s [ s . length - i - 1 ] == 'a' ) {		    	if ( s . charAt ( ~ i ) == 'a' ) {			  t 1 error
	else :						      	    res = ( res + b_count ) ;				    	  res = ( res + bCount ) ;				  
	    b_count += 1				      	    b_count = ( b_count * 2 ) ;				    	  bCount = ( bCount * 2 ) ;				  
    return res						      	  }							    	}							  
							      	  else {						    	else {							  
							      	    b_count += 1 ;					    	  bCount ++ ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return res ;						      return res ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING	      CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		    CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		  CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING
--							      --							    --								  --
def findSum ( str1 ) :					      static int findSum ( String str ) {			    public static int findSum ( String str1 ) {			  script_not_found : None
    temp = ""						      	String temp = "" ;					      String temp = "" ;					  
    Sum = 0						      	int sum = 0 ;						      int Sum = 0 ;						  
    for ch in str1 :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( ch.isdigit ( ) ) :				      	i < str . length ( ) ;					      i < str1 . length ( ) ;					  
	    temp += ch					      	i ++ ) {						      i ++ ) {							  
	else :						      	  char ch = str . charAt ( i ) ;			    	char ch = str1 . charAt ( i ) ;				  
	    Sum += int ( temp )				      	  if ( Character . isDigit ( ch ) ) temp += ch ;	    	if ( ( Character . isDigit ( ch ) ) ) {			  
	    temp = "0"					      	  else {						    	  temp += ch ;						  
    return Sum + int ( temp )				      	    sum += Integer . parseInt ( temp ) ;		    	}							  
							      	    temp = "0" ;					    	else {							  
							      	  }							    	  Sum += Integer . parseInt ( temp ) ;			  
							      	}							    	  temp = "0" ;						  
							      	return sum + Integer . parseInt ( temp ) ;		    	}							  
							      }								      }								  
							      								      return Sum + Integer . parseInt ( temp ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
def printDistinct ( arr , n ) :				      static void printDistinct ( int arr [ ] , int n ) {	    static void printDistinct ( int [ ] arr , int n ) {		  script_not_found : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	d = 0						      	i < n ;							      i <= n ;							  
	for j in range ( 0 , i ) :			      	i ++ ) {						      i ++ ) {							  
	    if ( arr [ i ] == arr [ j ] ) :		      	  int j ;						    	int d = 0 ;						  
		d = 1					      	  for ( j = 0 ;						    	for ( int j = 0 ;					  
		break					      	  j < i ;						    	j <= i ;						  
	if ( d == 0 ) :					      	  j ++ ) if ( arr [ i ] == arr [ j ] ) break ;		    	j ++ ) {						  
	    print ( arr [ i ] )				      	  if ( i == j ) System . out . print ( arr [ i ] + " " ) ;  	  if ( ( arr [ i ] == arr [ j ] ) ) {			  
							      	}							    	    d = 1 ;						  
							      }								    	    break ;						  
							      								    	  }							  
							      								    	}							  
							      								    	if ( ( d == 0 ) ) {					  
							      								    	  System . out . println ( arr [ i ] ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
def findElements ( arr , n ) :				      static void findElements ( int arr [ ] , int n ) {	    static void findElements ( int [ ] arr , int n ) {		  script_not_found : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count = 0					      	i < n ;							      i < n ;							  
	for j in range ( 0 , n ) :			      	i ++ ) {						      i ++ ) {							  
	    if arr [ j ] > arr [ i ] :			      	  int count = 0 ;					    	int count = 0 ;						  
		count = count + 1			      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	if count >= 2 :					      	  j < n ;						    	j <= n ;						  
	    print ( arr [ i ] , end = " " )		      	  j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;	    	j ++ ) {						  
							      	  if ( count >= 2 ) System . out . print ( arr [ i ] + " "  	  if ( arr [ j ] > arr [ i ] ) {			  
							      	}							    	    count = count + 1 ;					  
							      }								    	  }							  
							      								    	}							  
							      								    	if ( count >= 2 ) {					  
							      								    	  System . out . print ( arr [ i ] + " " ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
def isIdentity ( mat , N ) :				      static boolean isIdentity ( int mat [ ] [ ] , int N ) {	    public static boolean isIdentity ( int [ ] [ ] mat , int N )  success : None
    for row in range ( N ) :				      	for ( int row = 0 ;					      for ( int row = 0 ;					  
	for col in range ( N ) :			      	row < N ;						      row < N ;							  
	    if ( row == col and mat [ row ] [ col ] != 1 ) :  	row ++ ) {						      row ++ ) {						  
		return False				      	  for ( int col = 0 ;					    	for ( int col = 0 ;					  
	    elif ( row != col and mat [ row ] [ col ] != 0 )  	  col < N ;						    	col < N ;						  
		return False				      	  col ++ ) {						    	col ++ ) {						  
    return True						      	    if ( row == col && mat [ row ] [ col ] != 1 ) return fa 	  if ( ( row == col ) && ( mat [ row ] [ col ] != 1 ) ) { 
							      	    else if ( row != col && mat [ row ] [ col ] != 0 ) retu 	    return false ;					  
							      	  }							    	  }							  
							      	}							    	  else if ( ( row != col ) && ( mat [ row ] [ col ] != 0  
							      	return true ;						    	    return false ;					  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
def insertSorted ( arr , n , key , capacity ) :		      static int insertSorted ( int arr [ ] , int n , int key , int static int insertSorted ( int [ ] arr , int n , int key , int success : None
    if ( n >= capacity ) :				      	if ( n >= capacity ) return n ;				      if ( ( n >= capacity ) ) {				  
	return n					      	int i ;							    	return n ;						  
    i = n - 1						      	for ( i = n - 1 ;					      }								  
    while i >= 0 and arr [ i ] > key :			      	( i >= 0 && arr [ i ] > key ) ;				      int i = n - 1 ;						  
	arr [ i + 1 ] = arr [ i ]			      	i -- ) arr [ i + 1 ] = arr [ i ] ;			      while ( i >= 0 && arr [ i ] > key ) {			  
	i -= 1						      	arr [ i + 1 ] = key ;					    	arr [ i + 1 ] = arr [ i ] ;				  
    arr [ i + 1 ] = key					      	return ( n + 1 ) ;					    	i -- ;							  
    return ( n + 1 )					      }								      }								  
							      								      arr [ i + 1 ] = key ;					  
							      								      return ( n + 1 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
def solve ( arr , n ) :					      static int solve ( int arr [ ] , int n ) {		    public static int solve ( int [ ] arr , int n ) {		  success : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    a = 0 b = 0						      	int a = 0 , b = 0 ;					      int a = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      int b = 0 ;						  
	if ( i % 2 != 0 ) :				      	i < n ;							      for ( int i = 0 ;						  
	    a = a * 10 + arr [ i ]			      	i ++ ) {						      i < n ;							  
	else :						      	  if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;		      i ++ ) {							  
	    b = b * 10 + arr [ i ]			      	  else b = b * 10 + arr [ i ] ;				    	if ( ( i % 2 != 0 ) ) {					  
    return a + b					      	}							    	  a = a * 10 + arr [ i ] ;				  
							      	return a + b ;						    	}							  
							      }								    	else {							  
							      								    	  b = b * 10 + arr [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return a + b ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER					      SUM_FACTORS_NUMBER					    SUM_FACTORS_NUMBER						  SUM_FACTORS_NUMBER
--							      --							    --								  --
def divSum ( n ) :					      static int divSum ( int n ) {				    public static int divSum ( int n ) {			  success : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :  	for ( int i = 2 ;					      for ( int i = 2 ;						  
	if ( n % i == 0 ) :				      	i <= Math . sqrt ( n ) ;				      i <= ( ( int ) Math . sqrt ( n ) ) ;			  
	    if ( i == ( n / i ) ) :			      	i ++ ) {						      i ++ ) {							  
		result = result + i			      	  if ( n % i == 0 ) {					    	if ( ( n % i ) == 0 ) {					  
	    else :					      	    if ( i == ( n / i ) ) result += i ;			    	  if ( ( i == ( n / i ) ) ) {				  
		result = result + ( i + n // i )	      	    else result += ( i + n / i ) ;			    	    result = result + i ;				  
    return ( result + n + 1 )				      	  }							    	  }							  
							      	}							    	  else {						  
							      	return ( result + n + 1 ) ;				    	    result = result + ( i + n / i ) ;			  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( result + n + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	      WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	    WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	  WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS
--							      --							    --								  --
def CountWays ( n ) :					      static int countWays ( int n ) {				    protected static int countWays ( int n ) {			  success : None
    table = [ 0 ] * ( n + 1 )				      	int table [ ] = new int [ n + 1 ] ;			      int [ ] table = new int [ n + 1 ] ;			  
    table [ 0 ] = 1					      	Arrays . fill ( table , 0 ) ;				      table [ 0 ] = 1 ;						  
    for i in range ( 1 , n ) :				      	table [ 0 ] = 1 ;					      for ( int i = 1 ;						  
	for j in range ( i , n + 1 ) :			      	for ( int i = 1 ;					      i < n ;							  
	    table [ j ] += table [ j - i ]		      	i < n ;							      i ++ ) {							  
    return table [ n ]					      	i ++ ) for ( int j = i ;				    	for ( int j = i ;					  
							      	j <= n ;						    	j <= n ;						  
							      	j ++ ) table [ j ] += table [ j - i ] ;			    	j ++ ) {						  
							      	return table [ n ] ;					    	  table [ j ] += table [ j - i ] ;			  
							      }								    	}							  
							      								      }								  
							      								      return table [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRING_BINARY_SEQUENCE				      CONVERT_STRING_BINARY_SEQUENCE				    CONVERT_STRING_BINARY_SEQUENCE				  CONVERT_STRING_BINARY_SEQUENCE
--							      --							    --								  --
def strToBinary ( s ) :					      static void strToBinary ( String s ) {			    public static String strToBinary ( String s ) {		  script_not_found : None
    bin_conv = [ ]					      	int n = s . length ( ) ;				      StringBuilder binConv = new StringBuilder ( ) ;		  
    for c in s :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	ascii_val = ord ( c )				      	i < n ;							      i < s . length ( ) ;					  
	binary_val = bin ( ascii_val )			      	i ++ ) {						      i ++ ) {							  
	bin_conv.append ( binary_val [ 2 : ] )		      	  int val = Integer . valueOf ( s . charAt ( i ) ) ;	    	char c = s . charAt ( i ) ;				  
    return ( ' '.join ( bin_conv ) )			      	  String bin = "" ;					    	int asciiVal = ( int ) c ;				  
							      	  while ( val > 0 ) {					    	int binaryVal = Integer . toBinaryString ( asciiVal ) ;	  
							      	    if ( val % 2 == 1 ) {				    	binConv . append ( binaryVal . substring ( 2 ) ) ;	  
							      	      bin += '1' ;					      }								  
							      	    }							      return ( binConv . toString ( ) ) ;			  
							      	    else bin += '0' ;					    }								  
							      	    val /= 2 ;						    								  
							      	  }							    								  
							      	  bin = reverse ( bin ) ;				    								  
							      	  System . out . print ( bin + " " ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	      MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	    MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS		  MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS
--							      --							    --								  --
def minProduct ( arr , n , k ) :			      public static int minProduct ( int [ ] arr , int n , int k )  public static int minProduct ( int [ ] arr , int n , int k )  failure : #Results:1, 10
    heapq.heapify ( arr )				      	PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;    int x ;							  
    count = 0						      	for ( int i = 0 ;					      int count = 0 ;						  
    ans = 1						      	i < n ;							      int ans = 1 ;						  
    while ( arr ) and count < k :			      	i ++ ) pq . add ( arr [ i ] ) ;				      while ( ( x = arr [ n ] ) != 0 && count < k ) {		  
	x = heapq.heappop ( arr )			      	int count = 0 , ans = 1 ;				    	x = x ;							  
	ans = ans * x					      	while ( pq . isEmpty ( ) == false && count < k ) {	    	ans = ans * x ;						  
	count = count + 1				      	  ans = ans * pq . element ( ) ;			    	count = count + 1 ;					  
    return ans						      	  pq . remove ( ) ;					      }								  
							      	  count ++ ;						      return ans ;						  
							      	}							    }								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION
--							      --							    --								  --
def findMinX ( num , rem , k ) :			      static int findMinX ( int num [ ] , int rem [ ] , int k ) {   static int findMinX ( int [ ] num , int [ ] rem , int k ) {	  script_not_found : None
    x = 1						      	int x = 1 ;						      int x = 1 ;						  
    while ( True ) :					      	while ( true ) {					      while ( ( x = findMinX ( num , rem , k ) ) != 0 ) {	  
	j = 0						      	  int j ;						    	int j = 0 ;						  
	while ( j < k ) :				      	  for ( j = 0 ;						    	while ( ( j < k ) ) {					  
	    if ( x % num [ j ] != rem [ j ] ) :		      	  j < k ;						    	  if ( ( x % num [ j ] != rem [ j ] ) != 0 ) break ;	  
		break					      	  j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	    	  j ++ ;						  
	    j += 1					      	  if ( j == k ) return x ;				    	}							  
	if ( j == k ) :					      	  x ++ ;						    	if ( ( j == k ) ) return x ;				  
	    return x					      	}							    	x ++ ;							  
	x += 1						      }								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		      FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		    FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		  FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY
--							      --							    --								  --
def maxSubarrayXOR ( arr , n ) :			      static int maxSubarrayXOR ( int arr [ ] , int n ) {	    public static int maxSubarrayXOR ( int [ ] arr , int n ) {	  success : None
    ans = - 2147483648					      	int ans = Integer . MIN_VALUE ;				      int ans = - 2147483648 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	curr_xor = 0					      	i < n ;							      i < n ;							  
	for j in range ( i , n ) :			      	i ++ ) {						      i ++ ) {							  
	    curr_xor = curr_xor ^ arr [ j ]		      	  int curr_xor = 0 ;					    	int currXor = 0 ;					  
	    ans = max ( ans , curr_xor )		      	  for ( int j = i ;					    	for ( int j = i ;					  
    return ans						      	  j < n ;						    	j < n ;							  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    curr_xor = curr_xor ^ arr [ j ] ;			    	  currXor = currXor ^ arr [ j ] ;			  
							      	    ans = Math . max ( ans , curr_xor ) ;		    	  ans = Math . max ( ans , currXor ) ;			  
							      	  }							    	}							  
							      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			      SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			    SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			  SUM_MANHATTAN_DISTANCES_PAIRS_POINTS
--							      --							    --								  --
def distancesum ( x , y , n ) :				      static int distancesum ( int x [ ] , int y [ ] , int n ) {    public static int distancesum ( int [ ] x , int [ ] y , int n success : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i < n ;							  
	    sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i  	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
    return sum						      	j < n ;							    	for ( int j = i + 1 ;					  
							      	j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . a 	j < n ;							  
							      	return sum ;						    	j ++ ) {						  
							      }								    	  sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
def countNegative ( M , n , m ) :			      static int countNegative ( int M [ ] [ ] , int n , int m ) {  static int countNegative ( int [ ] [ ] M , int n , int m ) {  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    j = m - 1						      	int j = m - 1 ;						      int j = m - 1 ;						  
    while j >= 0 and i < n :				      	while ( j >= 0 && i < n ) {				      while ( j >= 0 && i < n ) {				  
	if M [ i ] [ j ] < 0 :				      	  if ( M [ i ] [ j ] < 0 ) {				    	if ( M [ i ] [ j ] < 0 ) {				  
	    count += ( j + 1 )				      	    count += j + 1 ;					    	  count += ( j + 1 ) ;					  
	    i += 1					      	    i += 1 ;						    	  i ++ ;						  
	else :						      	  }							    	}							  
	    j -= 1					      	  else j -= 1 ;						    	else {							  
    return count					      	}							    	  j -- ;						  
							      	return count ;						    	}							  
							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
def to_upper ( string ) :				      static String to_upper ( char [ ] in ) {			    public static String toUpperCase ( String string ) {	  error : LOWER_CASE_UPPER_CASE_INTERESTING_FACT.jav
    for i in range ( len ( string ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  a:52: error: incompatible types: char[] cannot be
	if ( 'a' <= string [ i ] <= 'z' ) :		      	i < in . length ;					      i < string . length ( ) ;					  converted to String	      if(f_filled(param0.get
	    string = ( string [ 0 : i ] + chr ( ord ( string  	i ++ ) {						      i ++ ) {							  (i)).equals(f_gold(param0.get(i))))
    return string					      	  if ( 'a' <= in [ i ] & in [ i ] <= 'z' ) {		    	if ( ( 'a' <= string . charAt ( i ) && string . charAt (  		  ^ Note: Some messages have been si
							      	    in [ i ] = ( char ) ( in [ i ] - 'a' + 'A' ) ;	    	  string = ( string . substring ( 0 , i ) + ( char ) ( st mplified; recompile with -Xdiags:verbose to get fu
							      	  }							    	}							  ll output 1 error
							      	}							      }								  
							      	return String . valueOf ( in ) ;			      return string ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
def countPairsWithDiffK ( arr , n , k ) :		      static int countPairsWithDiffK ( int arr [ ] , int n , int k  static int countPairsWithDiffK ( int [ ] arr , int n , int k  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  	i ++ ) {						      i ++ ) {							  
		count += 1				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    return count					      	  j < n ;						    	j < n ;							  
							      	  j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 	j ++ ) {						  
							      	}							    	  if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr [ i  
							      	return count ;						    	    count ++ ;						  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_BITS_IN_A_GIVEN_NUMBER				      SWAP_BITS_IN_A_GIVEN_NUMBER				    SWAP_BITS_IN_A_GIVEN_NUMBER					  SWAP_BITS_IN_A_GIVEN_NUMBER
--							      --							    --								  --
def swapBits ( x , p1 , p2 , n ) :			      static int swapBits ( int x , int p1 , int p2 , int n ) {	    public static int swapBits ( int x , int p1 , int p2 , int n  error : SWAP_BITS_IN_A_GIVEN_NUMBER.java:27: error
    set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 )		      	int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ;		      int set1 = ( x >>> p1 ) & ( ( 1 << n ) - 1 ) ;		  : ';' expected   xor = ( xor << p1 )
    set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 )		      	int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ;		      int set2 = ( x >>> p2 ) & ( ( 1 << n ) - 1 ) ;		  	  ^ SWAP_BITS_IN_A_GIVEN_NUMBER.java:29: err
    xor = ( set1 ^ set2 )				      	int xor = ( set1 ^ set2 ) ;				      int xor = ( set1 ^ set2 ) ;				  or: illegal start of expression public static void
    xor = ( xor << p1 ) | ( xor << p2 )			      	xor = ( xor << p1 ) | ( xor << p2 ) ;			      xor = ( xor << p1 )					   main(String args[]) { ^ 2 errors
    result = x ^ xor					      	int result = x ^ xor ;					    								  
    return result					      	return result ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  success : None
    if a > b :						      	if ( a > b ) {						      if ( a > b ) {						  
	if ( b > c ) :					      	  if ( b > c ) return b ;				    	if ( ( b > c ) ) {					  
	    return b					      	  else if ( a > c ) return c ;				    	  return b ;						  
	elif ( a > c ) :				      	  else return a ;					    	}							  
	    return c					      	}							    	else if ( ( a > c ) ) {					  
	else :						      	else {							    	  return c ;						  
	    return a					      	  if ( a > c ) return a ;				    	}							  
    else :						      	  else if ( b > c ) return c ;				    	else {							  
	if ( a > c ) :					      	  else return b ;					    	  return a ;						  
	    return a					      	}							    	}							  
	elif ( b > c ) :				      }								      }								  
	    return c					      								      else {							  
	else :						      								    	if ( ( a > c ) ) {					  
	    return b					      								    	  return a ;						  
							      								    	}							  
							      								    	else if ( ( b > c ) ) {					  
							      								    	  return c ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  return b ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
def maxLen ( arr ) :					      static int maxLen ( int arr [ ] , int n ) {		    public static int maxLen ( int [ ] arr ) {			  error : FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM.java:
    max_len = 0						      	int max_len = 0 ;					      int maxLen = 0 ;						  75: error: method f_filled in class FIND_THE_LARGE
    for i in range ( len ( arr ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  ST_SUBARRAY_WITH_0_SUM cannot be applied to given
	curr_sum = 0					      	i < n ;							      i < arr . length ;					  types;	 if(f_filled(param0.get(i),param1.ge
	for j in range ( i , len ( arr ) ) :		      	i ++ ) {						      i ++ ) {							  t(i)) == f_gold(param0.get(i),param1.get(i)))
	    curr_sum += arr [ j ]			      	  int curr_sum = 0 ;					    	int currSum = 0 ;					  	 ^   required: int[]   found: int[],Integer
	    if curr_sum == 0 :				      	  for ( int j = i ;					    	for ( int j = i ;					    reason: actual and formal argument lists differ
		max_len = max ( max_len , j - i + 1 )	      	  j < n ;						    	j < arr . length ;					  in length 1 error
    return max_len					      	  j ++ ) {						    	j ++ ) {						  
							      	    curr_sum += arr [ j ] ;				    	  currSum += arr [ j ] ;				  
							      	    if ( curr_sum == 0 ) max_len = Math . max ( max_len , j 	  if ( currSum == 0 ) {					  
							      	  }							    	    maxLen = Math . max ( maxLen , j - i + 1 ) ;	  
							      	}							    	  }							  
							      	return max_len ;					    	}							  
							      }								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN
--							      --							    --								  --
def findNth ( n ) :					      public static int findNth ( int n ) {			    static int findNth ( int n ) {				  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for curr in itertools.count ( ) :			      	for ( int curr = 1 ;					      for ( int curr = 0 ;					  
	sum = 0						      	;							      curr < Integer . MAX_VALUE ;				  
	x = curr					      	curr ++ ) {						      curr ++ ) {						  
	while ( x ) :					      	  int sum = 0 ;						    	int sum = 0 ;						  
	    sum = sum + x % 10				      	  for ( int x = curr ;					    	int x = curr ;						  
	    x = x // 10					      	  x > 0 ;						    	while ( ( x = x ) != 0 ) {				  
	if ( sum == 10 ) :				      	  x = x / 10 ) sum = sum + x % 10 ;			    	  sum = sum + x % 10 ;					  
	    count = count + 1				      	  if ( sum == 10 ) count ++ ;				    	  x = x / 10 ;						  
	if ( count == n ) :				      	  if ( count == n ) return curr ;			    	}							  
	    return curr					      	}							    	if ( ( sum == 10 ) ) {					  
    return - 1						      }								    	  count = count + 1 ;					  
							      								    	}							  
							      								    	if ( ( count == n ) ) {					  
							      								    	  return curr ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT						      BUBBLE_SORT						    BUBBLE_SORT							  BUBBLE_SORT
--							      --							    --								  --
def bubbleSort ( arr ) :				      void bubbleSort ( int arr [ ] ) {				    public static void bubbleSort ( int [ ] arr ) {		  script_not_found : None
    n = len ( arr )					      	int n = arr . length ;					      int n = arr . length ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , n - i - 1 ) :		      	i < n - 1 ;						      i < n ;							  
	    if arr [ j ] > arr [ j + 1 ] :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 	j < n - i - 1 ;						    	for ( int j = 0 ;					  
							      	j ++ ) if ( arr [ j ] > arr [ j + 1 ] ) {		    	j <= n - i - 1 ;					  
							      	  int temp = arr [ j ] ;				    	j ++ ) {						  
							      	  arr [ j ] = arr [ j + 1 ] ;				    	  if ( arr [ j ] > arr [ j + 1 ] ) {			  
							      	  arr [ j + 1 ] = temp ;				    	    arr [ j ] = arr [ j + 1 ] ;				  
							      	}							    	    arr [ j + 1 ] = arr [ j ] ;				  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR				      FIND_MINIMUM_DIFFERENCE_PAIR				    FIND_MINIMUM_DIFFERENCE_PAIR				  FIND_MINIMUM_DIFFERENCE_PAIR
--							      --							    --								  --
def findMinDiff ( arr , n ) :				      static int findMinDiff ( int [ ] arr , int n ) {		    static int findMinDiff ( int [ ] arr , int n ) {		  success : None
    diff = 10 ** 20					      	int diff = Integer . MAX_VALUE ;			      int diff = 10 * 20 ;					  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n - 1 ;						      i < n - 1 ;						  
	    if abs ( arr [ i ] - arr [ j ] ) < diff :	      	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		diff = abs ( arr [ i ] - arr [ j ] )	      	j < n ;							    	for ( int j = i + 1 ;					  
    return diff						      	j ++ ) if ( Math . abs ( ( arr [ i ] - arr [ j ] ) ) < diff 	j < n ;							  
							      	return diff ;						    	j ++ ) {						  
							      }								    	  if ( Math . abs ( arr [ i ] - arr [ j ] ) < diff ) {	  
							      								    	    diff = Math . abs ( arr [ i ] - arr [ j ] ) ;	  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return diff ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	      FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	    FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	  FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE
--							      --							    --								  --
def minRadius ( k , x , y , n ) :			      static int minRadius ( int k , int [ ] x , int [ ] y , int n  public static int minRadius ( int k , int [ ] x , int [ ] y , script_not_found : None
    dis = [ 0 ] * n					      	int [ ] dis = new int [ n ] ;				      int [ ] dis = new int [ n ] ;				  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]     	i < n ;							      i <= n ;							  
    dis.sort ( )					      	i ++ ) dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ;    i ++ ) {							  
    return dis [ k - 1 ]				      	Arrays . sort ( dis ) ;					    	dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ;	  
							      	return dis [ k - 1 ] ;					      }								  
							      }								      Arrays . sort ( dis ) ;					  
							      								      return dis [ k - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7	      FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		    FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		  FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7
--							      --							    --								  --
def findpos ( n ) :					      static int findpos ( String n ) {				    public static int findpos ( String n ) {			  success : None
    i = 0						      	int k = 0 , pos = 0 , i = 0 ;				      int i = 0 ;						  
    j = len ( n )					      	while ( k != n . length ( ) ) {				      int j = n . length ( ) ;					  
    pos = 0						      	  switch ( n . charAt ( i ) ) {				      int pos = 0 ;						  
    while ( i < j ) :					      	    case '4' : pos = pos * 2 + 1 ;			      while ( ( i < j ) ) {					  
	if ( n [ i ] == '4' ) :				      	    break ;						    	if ( ( n . charAt ( i ) == '4' ) ) {			  
	    pos = pos * 2 + 1				      	    case '7' : pos = pos * 2 + 2 ;			    	  pos = pos * 2 + 1 ;					  
	if ( n [ i ] == '7' ) :				      	    break ;						    	}							  
	    pos = pos * 2 + 2				      	  }							    	if ( ( n . charAt ( i ) == '7' ) ) {			  
	i = i + 1					      	  i ++ ;						    	  pos = pos * 2 + 2 ;					  
    return pos						      	  k ++ ;						    	}							  
							      	}							    	i = i + 1 ;						  
							      	return pos ;						      }								  
							      }								      return pos ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_FIRST_MISSING_NUMBER				      FIND_THE_FIRST_MISSING_NUMBER				    FIND_THE_FIRST_MISSING_NUMBER				  FIND_THE_FIRST_MISSING_NUMBER
--							      --							    --								  --
def findFirstMissing ( array , start , end ) :		      int findFirstMissing ( int array [ ] , int start , int end )  static int findFirstMissing ( int [ ] array , int start , int success : None
    if ( start > end ) :				      	if ( start > end ) return end + 1 ;			      if ( ( start > end ) ) {					  
	return end + 1					      	if ( start != array [ start ] ) return start ;		    	return end + 1 ;					  
    if ( start != array [ start ] ) :			      	int mid = ( start + end ) / 2 ;				      }								  
	return start					      	if ( array [ mid ] == mid ) return findFirstMissing ( array   if ( ( start != array [ start ] ) ) {			  
    mid = int ( ( start + end ) / 2 )			      	return findFirstMissing ( array , start , mid ) ;	    	return start ;						  
    if ( array [ mid ] == mid ) :			      }								      }								  
	return findFirstMissing ( array , mid + 1 , end )     								      int mid = ( int ) ( ( start + end ) / 2 ) ;		  
    return findFirstMissing ( array , start , mid )	      								      if ( ( array [ mid ] == mid ) ) {				  
							      								    	return findFirstMissing ( array , mid + 1 , end ) ;	  
							      								      }								  
							      								      return findFirstMissing ( array , start , mid ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
def checkIsAP ( arr , n ) :				      static boolean checkIsAP ( int arr [ ] , int n ) {	    static boolean checkIsAP ( int [ ] arr , int n ) {		  success : None
    if ( n == 1 ) : return True				      	if ( n == 1 ) return true ;				      if ( ( n == 1 ) ) return true ;				  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    d = arr [ 1 ] - arr [ 0 ]				      	int d = arr [ 1 ] - arr [ 0 ] ;				      int d = arr [ 1 ] - arr [ 0 ] ;				  
    for i in range ( 2 , n ) :				      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	if ( arr [ i ] - arr [ i - 1 ] != d ) :		      	i < n ;							      i < n ;							  
	    return False				      	i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;   i ++ ) {							  
    return True						      	return true ;						    	if ( ( arr [ i ] - arr [ i - 1 ] != d ) ) return false ;  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
def insertionSortRecursive ( arr , n ) :		      static void insertionSortRecursive ( int arr [ ] , int n ) {  public static void insertionSortRecursive ( int [ ] arr , int script_not_found : None
    if n <= 1 :						      	if ( n <= 1 ) return ;					      if ( n <= 1 ) return ;					  
	return						      	insertionSortRecursive ( arr , n - 1 ) ;		      insertionSortRecursive ( arr , n - 1 ) ;			  
    insertionSortRecursive ( arr , n - 1 )		      	int last = arr [ n - 1 ] ;				      int last = arr [ n - 1 ] ;				  
    last = arr [ n - 1 ]				      	int j = n - 2 ;						      int j = n - 2 ;						  
    j = n - 2						      	while ( j >= 0 && arr [ j ] > last ) {			      while ( ( j >= 0 ) && arr [ j ] > last ) {		  
    while ( j >= 0 and arr [ j ] > last ) :		      	  arr [ j + 1 ] = arr [ j ] ;				    	arr [ j + 1 ] = arr [ j ] ;				  
	arr [ j + 1 ] = arr [ j ]			      	  j -- ;						    	j = j - 1 ;						  
	j = j - 1					      	}							      }								  
    arr [ j + 1 ] = last				      	arr [ j + 1 ] = last ;					      arr [ j + 1 ] = last ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		      AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		    AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		  AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES
--							      --							    --								  --
def polygonArea ( X , Y , n ) :				      public static double polygonArea ( double X [ ] , double Y [  public static int polygonArea ( double [ ] X , double [ ] Y , script_not_found : None
    area = 0.0						      	double area = 0.0 ;					      double area = 0.0 ;					  
    j = n - 1						      	int j = n - 1 ;						      int j = n - 1 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) 	i < n ;							      i <= n ;							  
	j = i						      	i ++ ) {						      i ++ ) {							  
    return int ( abs ( area / 2.0 ) )			      	  area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;	  
							      	  j = i ;						    	j = i ;							  
							      	}							      }								  
							      	return Math . abs ( area / 2.0 ) ;			      return ( int ) Math . abs ( area / 2.0 ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES
--							      --							    --								  --
def countSol ( coeff , start , end , rhs ) :		      static int countSol ( int coeff [ ] , int start , int end , i static int countSol ( int [ ] coeff , int start , int end , i script_not_found : None
    if ( rhs == 0 ) :					      	if ( rhs == 0 ) return 1 ;				      if ( ( rhs == 0 ) ) {					  
	return 1					      	int result = 0 ;					    	return 1 ;						  
    result = 0						      	for ( int i = start ;					      }								  
    for i in range ( start , end + 1 ) :		      	i <= end ;						      int result = 0 ;						  
	if ( coeff [ i ] <= rhs ) :			      	i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff   for ( int i = start ;					  
	    result += countSol ( coeff , i , end , rhs - coef 	return result ;						      i <= end ;						  
    return result					      }								      i ++ ) {							  
							      								    	if ( ( coeff [ i ] <= rhs ) ) {				  
							      								    	  result += countSol ( coeff , i , end , rhs - coeff [ i  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM					      FRIENDS_PAIRING_PROBLEM					    FRIENDS_PAIRING_PROBLEM					  FRIENDS_PAIRING_PROBLEM
--							      --							    --								  --
def countFriendsPairings ( n ) :			      static int countFriendsPairings ( int n ) {		    public static int countFriendsPairings ( int n ) {		  success : None
    dp = [ 0 for i in range ( n + 1 ) ]			      	int dp [ ] = new int [ n + 1 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( i <= 2 ) :					      	i <= n ;						      i < n ;							  
	    dp [ i ] = i				      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( i <= 2 ) dp [ i ] = i ;				    	dp [ i ] = 0 ;						  
	    dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2  	  else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;   }								  
    return dp [ n ]					      	}							      for ( int i = 0 ;						  
							      	return dp [ n ] ;					      i < n + 1 ;						  
							      }								      i ++ ) {							  
							      								    	if ( ( i <= 2 ) ) {					  
							      								    	  dp [ i ] = i ;					  
							      								    	}							  
							      								    	else {							  
							      								    	  dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;	  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION		      DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			    DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			  DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION
--							      --							    --								  --
def distributingBalls ( k , n , string ) :		      static boolean distributingBalls ( long k , long n , String s public static boolean distributingBalls ( int k , int n , Str script_not_found : None
    a = [ 0 ] * MAX_CHAR				      	int [ ] a = new int [ MAX_CHAR ] ;			      int [ ] a = new int [ MAX_CHAR ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	a [ ord ( string [ i ] ) - ord ( 'a' ) ] += 1	      	i < n ;							      i < n ;							  
    for i in range ( MAX_CHAR ) :			      	i ++ ) {						      i ++ ) {							  
	if ( a [ i ] > k ) :				      	  a [ str . charAt ( i ) - 'a' ] ++ ;			    	a [ ( int ) string . charAt ( i ) - 'a' ] ++ ;		  
	    return False				      	}							      }								  
    return True						      	for ( int i = 0 ;					      for ( int i = 0 ;						  
							      	i < MAX_CHAR ;						      i < MAX_CHAR ;						  
							      	i ++ ) if ( a [ i ] > k ) return false ;		      i ++ ) {							  
							      	return true ;						    	if ( ( a [ i ] > k ) ) return false ;			  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS	  GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS
--							      --							    --								  --
def generate ( ones , zeroes , str , len1 ) :		      static void generate ( int ones , int zeroes , String str , i public static void generate ( int ones , int zeroes , String  script_not_found : None
    if ( len1 == len ( str ) ) :			      	if ( len == str . length ( ) ) {			      if ( ( len1 == str . length ( ) ) ) {			  
	print ( str , end = " " )			      	  System . out . print ( str + " " ) ;			    	System . out . print ( str ) ;				  
	return						      	  return ;						    	return ;						  
    generate ( ones + 1 , zeroes , str + "1" , len1 )	      	}							      }								  
    if ( ones > zeroes ) :				      	generate ( ones + 1 , zeroes , str + "1" , len ) ;	      generate ( ones + 1 , zeroes , str + "1" , len1 ) ;	  
	generate ( ones , zeroes + 1 , str + "0" , len1 )     	if ( ones > zeroes ) {					      if ( ( ones > zeroes ) ) {				  
							      	  generate ( ones , zeroes + 1 , str + "0" , len ) ;	    	generate ( ones , zeroes + 1 , str + "0" , len1 ) ;	  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X	  COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X
--							      --							    --								  --
def countPairs ( arr1 , arr2 , m , n , x ) :		      static int countPairs ( int [ ] arr1 , int [ ] arr2 , int m , static int countPairs ( int [ ] arr1 , int [ ] arr2 , int m , success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( m ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n ) :				      	i < m ;							      i < m ;							  
	    if arr1 [ i ] + arr2 [ j ] == x :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		count = count + 1			      	j < n ;							    	for ( int j = 0 ;					  
    return count					      	j ++ ) if ( ( arr1 [ i ] + arr2 [ j ] ) == x ) count ++ ;   	j < n ;							  
							      	return count ;						    	j ++ ) {						  
							      }								    	  if ( arr1 [ i ] + arr2 [ j ] == x ) {			  
							      								    	    count = count + 1 ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
--							      --							    --								  --
def getOddOccurrence ( arr , arr_size ) :		      static int getOddOccurrence ( int arr [ ] , int arr_size ) {  static int getOddOccurrence ( int [ ] arr , int arrSize ) {	  failure : #Results:9, 10
    for i in range ( 0 , arr_size ) :			      	int i ;							      for ( int i = 0 ;						  
	count = 0					      	for ( i = 0 ;						      i <= arrSize ;						  
	for j in range ( 0 , arr_size ) :		      	i < arr_size ;						      i ++ ) {							  
	    if arr [ i ] == arr [ j ] :			      	i ++ ) {						    	int count = 0 ;						  
		count += 1				      	  int count = 0 ;					    	for ( int j = 0 ;					  
	if ( count % 2 != 0 ) :				      	  for ( int j = 0 ;					    	j <= arrSize ;						  
	    return arr [ i ]				      	  j < arr_size ;					    	j ++ ) {						  
    return - 1						      	  j ++ ) {						    	  if ( arr [ i ] == arr [ j ] ) {			  
							      	    if ( arr [ i ] == arr [ j ] ) count ++ ;		    	    count ++ ;						  
							      	  }							    	  }							  
							      	  if ( count % 2 != 0 ) return arr [ i ] ;		    	}							  
							      	}							    	if ( ( count % 2 != 0 ) ) {				  
							      	return - 1 ;						    	  return arr [ i ] ;					  
							      }								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N
--							      --							    --								  --
def getMinSquares ( n ) :				      static int getMinSquares ( int n ) {			    static int getMinSquares ( int n ) {			  script_not_found : None
    if n <= 3 :						      	if ( n <= 3 ) return n ;				      if ( n <= 3 ) {						  
	return n ;					      	int res = n ;						    	return n ;						  
    res = n						      	for ( int x = 1 ;					      }								  
    for x in range ( 1 , n + 1 ) :			      	x <= n ;						      int res = n ;						  
	temp = x * x ;					      	x ++ ) {						      for ( int x = 1 ;						  
	if temp > n :					      	  int temp = x * x ;					      x <= n ;							  
	    break					      	  if ( temp > n ) break ;				      x ++ ) {							  
	else :						      	  else res = Math . min ( res , 1 + getMinSquares ( n - tem 	int temp = x * x ;					  
	    res = min ( res , 1 + getMinSquares ( n - temp )  	}							    	if ( temp > n ) {					  
    return res ;					      	return res ;						    	  break ;						  
							      }								    	}							  
							      								    	else {							  
							      								    	  res = Math . min ( res , 1 + getMinSquares ( n - temp ) 
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI
--							      --							    --								  --
def isLucky ( n ) :					      static boolean isLucky ( int n ) {			    static int isLucky ( int n ) {				  error : PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCK
    ar = [ 0 ] * 10					      	boolean arr [ ] = new boolean [ 10 ] ;			      int [ ] ar = new int [ 10 ] ;				  Y_ALL_DIGITS_ARE_DIFFERENT.java:31: error: incompa
    while ( n > 0 ) :					      	for ( int i = 0 ;					      while ( ( n > 0 ) ) {					  tible types: possible lossy conversion from double
	digit = math.floor ( n % 10 )			      	i < 10 ;						    	int digit = Math . floor ( n % 10 ) ;			   to int     int digit = Math . floor ( n % 10 ) ;
	if ( ar [ digit ] ) :				      	i ++ ) arr [ i ] = false ;				    	if ( ( ar [ digit ] ) != 0 ) {				  			       ^ PROGRAM_TO_CHECK_IF
	    return 0					      	while ( n > 0 ) {					    	  return 0 ;						  _A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DIFFERENT.
	ar [ digit ] = 1				      	  int digit = n % 10 ;					    	}							  java:57: error: incomparable types: int and boolea
	n = n / 10					      	  if ( arr [ digit ] ) return false ;			    	ar [ digit ] = 1 ;					  n	    if(f_filled(param0.get(i)) == f_gold(par
    return 1						      	  arr [ digit ] = true ;				    	n = n / 10 ;						  am0.get(i)))					  ^
							      	  n = n / 10 ;						      }								  2 errors
							      	}							      return 1 ;						  
							      	return true ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SINK_NODES_GRAPH					      NUMBER_SINK_NODES_GRAPH					    NUMBER_SINK_NODES_GRAPH					  NUMBER_SINK_NODES_GRAPH
--							      --							    --								  --
def countSink ( n , m , edgeFrom , edgeTo ) :		      static int countSink ( int n , int m , int edgeFrom [ ] , int static int countSink ( int n , int m , int [ ] edgeFrom , int script_not_found : None
    mark = [ 0 ] * ( n + 1 )				      	int [ ] mark = new int [ n + 1 ] ;			      int [ ] mark = new int [ n + 1 ] ;			  
    for i in range ( m ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	mark [ edgeFrom [ i ] ] = 1			      	i < m ;							      i < m ;							  
    count = 0						      	i ++ ) mark [ edgeFrom [ i ] ] = 1 ;			      i ++ ) {							  
    for i in range ( 1 , n + 1 ) :			      	int count = 0 ;						    	mark [ edgeFrom [ i ] ] = 1 ;				  
	if ( not mark [ i ] ) :				      	for ( int i = 1 ;					      }								  
	    count += 1					      	i <= n ;						      int count = 0 ;						  
    return count					      	i ++ ) if ( mark [ i ] == 0 ) count ++ ;		      for ( int i = 1 ;						  
							      	return count ;						      i <= n ;							  
							      }								      i ++ ) {							  
							      								    	if ( ( ! mark [ i ] ) ) {				  
							      								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND
--							      --							    --								  --
def isSubSequence ( string1 , string2 , m , n ) :	      static boolean isSubSequence ( String str1 , String str2 , in static boolean isSubSequence ( String string1 , String string script_not_found : None
    if m == 0 : return True				      	if ( m == 0 ) return true ;				      if ( m == 0 ) return true ;				  
    if n == 0 : return False				      	if ( n == 0 ) return false ;				      if ( n == 0 ) return false ;				  
    if string1 [ m - 1 ] == string2 [ n - 1 ] :		      	if ( str1 . charAt ( m - 1 ) == str2 . charAt ( n - 1 ) ) r   if ( string1 . charAt ( m - 1 ) == string2 . charAt ( n - 1 
	return isSubSequence ( string1 , string2 , m - 1 , n  	return isSubSequence ( str1 , str2 , m , n - 1 ) ;	      return isSubSequence ( string1 , string2 , m , n - 1 ) ;	  
    return isSubSequence ( string1 , string2 , m , n - 1 )    }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			      CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			    CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			  CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT
--							      --							    --								  --
def areEqual ( arr1 , arr2 , n , m ) :			      public static boolean areEqual ( int arr1 [ ] , int arr2 [ ]  public static boolean areEqual ( int [ ] arr1 , int [ ] arr2  script_not_found : None
    if ( n != m ) :					      	int n = arr1 . length ;					      if ( ( n != m ) ) return false ;				  
	return False ;					      	int m = arr2 . length ;					      Arrays . sort ( arr1 ) ;					  
    arr1.sort ( ) ;					      	if ( n != m ) return false ;				      Arrays . sort ( arr2 ) ;					  
    arr2.sort ( ) ;					      	Arrays . sort ( arr1 ) ;				      for ( int i = 0 ;						  
    for i in range ( 0 , n - 1 ) :			      	Arrays . sort ( arr2 ) ;				      i <= n - 1 ;						  
	if ( arr1 [ i ] != arr2 [ i ] ) :		      	for ( int i = 0 ;					      i ++ ) {							  
	    return False ;				      	i < n ;							    	if ( ( arr1 [ i ] != arr2 [ i ] ) ) return false ;	  
    return True ;					      	i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ;	      }								  
							      	return true ;						      return true ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS
--							      --							    --								  --
def subset ( ar , n ) :					      public static int subset ( int ar [ ] , int n ) {		    public static int subset ( int [ ] ar , int n ) {		  failure : #Results:3, 10
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    ar.sort ( )						      	Arrays . sort ( ar ) ;					      Arrays . sort ( ar ) ;					  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count = 1					      	i < n ;							      i <= n ;							  
	for i in range ( n - 1 ) :			      	i ++ ) {						      i ++ ) {							  
	    if ar [ i ] == ar [ i + 1 ] :		      	  int count = 1 ;					    	int count = 1 ;						  
		count += 1				      	  for ( ;						    	for ( int j = 0 ;					  
	    else :					      	  i < n - 1 ;						    	j < n - 1 ;						  
		break					      	  i ++ ) {						    	j ++ ) {						  
	res = max ( res , count )			      	    if ( ar [ i ] == ar [ i + 1 ] ) count ++ ;		    	  if ( ar [ j ] == ar [ j + 1 ] ) {			  
    return res						      	    else break ;					    	    count ++ ;						  
							      	  }							    	  }							  
							      	  res = Math . max ( res , count ) ;			    	  else {						  
							      	}							    	    break ;						  
							      	return res ;						    	  }							  
							      }								    	}							  
							      								    	res = Math . max ( res , count ) ;			  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE
--							      --							    --								  --
def search ( arr , n , x ) :				      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int [ ] arr , int n , int x ) {	  success : None
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( i < n ) :					      	while ( i < n ) {					      while ( ( i < n ) ) {					  
	if ( arr [ i ] == x ) :				      	  if ( arr [ i ] == x ) return i ;			    	if ( ( arr [ i ] == x ) ) {				  
	    return i					      	  i = i + Math . abs ( arr [ i ] - x ) ;		    	  return i ;						  
	i = i + abs ( arr [ i ] - x )			      	}							    	}							  
    print ( "number is not present!" )			      	System . out . println ( "number is not" + " present!" ) ;  	i = i + Math . abs ( arr [ i ] - x ) ;			  
    return - 1						      	return - 1 ;						      }								  
							      }								      System . out . println ( "number is not present!" ) ;	  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE				  FIND_THE_ELEMENT_THAT_APPEARS_ONCE
--							      --							    --								  --
def getSingle ( arr , n ) :				      static int getSingle ( int arr [ ] , int n ) {		    static int getSingle ( int [ ] arr , int n ) {		  success : None
    ones = 0						      	int ones = 0 , twos = 0 ;				      int ones = 0 ;						  
    twos = 0						      	int common_bit_mask ;					      int twos = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	twos = twos | ( ones & arr [ i ] )		      	i < n ;							      i < n ;							  
	ones = ones ^ arr [ i ]				      	i ++ ) {						      i ++ ) {							  
	common_bit_mask = ~ ( ones & twos )		      	  twos = twos | ( ones & arr [ i ] ) ;			    	twos = twos = twos | ( ones & arr [ i ] ) ;		  
	ones &= common_bit_mask				      	  ones = ones ^ arr [ i ] ;				    	ones = ones ^ arr [ i ] ;				  
	twos &= common_bit_mask				      	  common_bit_mask = ~ ( ones & twos ) ;			    	int commonBitMask = ~ ( ones & twos ) ;			  
    return ones						      	  ones &= common_bit_mask ;				    	ones &= commonBitMask ;					  
							      	  twos &= common_bit_mask ;				    	twos &= commonBitMask ;					  
							      	}							      }								  
							      	return ones ;						      return ones ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_EXTRA_CHARACTER_STRING_1			      FIND_ONE_EXTRA_CHARACTER_STRING_1				    FIND_ONE_EXTRA_CHARACTER_STRING_1				  FIND_ONE_EXTRA_CHARACTER_STRING_1
--							      --							    --								  --
def findExtraCharcter ( strA , strB ) :			      static char findExtraCharcter ( String strA , String strB ) { static char findExtraCharcter ( String strA , String strB ) { success : None
    res = 0						      	int res = 0 , i ;					      int res = 0 ;						  
    for i in range ( 0 , len ( strA ) ) :		      	for ( i = 0 ;						      for ( int i = 0 ;						  
	res = res ^ ( ord ) ( strA [ i ] )		      	i < strA . length ( ) ;					      strA . length ( ) > i ;					  
    for i in range ( 0 , len ( strB ) ) :		      	i ++ ) {						      i ++ ) {							  
	res = res ^ ( ord ) ( strB [ i ] )		      	  res ^= strA . charAt ( i ) ;				    	res = res ^ ( ( int ) strA . charAt ( i ) ) ;		  
    return ( ( chr ) ( res ) ) ;			      	}							      }								  
							      	for ( i = 0 ;						      for ( int i = 0 ;						  
							      	i < strB . length ( ) ;					      strB . length ( ) > i ;					  
							      	i ++ ) {						      i ++ ) {							  
							      	  res ^= strB . charAt ( i ) ;				    	res = res ^ ( ( int ) strB . charAt ( i ) ) ;		  
							      	}							      }								  
							      	return ( ( char ) ( res ) ) ;				      return ( ( char ) res ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1
--							      --							    --								  --
def printDistinct ( arr , n ) :				      static void printDistinct ( int arr [ ] , int n ) {	    static void printDistinct ( int [ ] arr , int n ) {		  script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( i < n - 1 and arr [ i ] == arr [ i + 1 ] ) :     	i < n ;							      i < n ;							  
	    while ( i < n - 1 and ( arr [ i ] == arr [ i + 1  	i ++ ) {						      i ++ ) {							  
		i += 1					      	  while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) i ++ ;  	if ( ( i < n - 1 ) && arr [ i ] == arr [ i + 1 ] ) {	  
	else :						      	  System . out . print ( arr [ i ] + " " ) ;		    	  while ( ( i < n - 1 ) && ( arr [ i ] == arr [ i + 1 ] ) 
	    print ( arr [ i ] , end = " " )		      	}							    	    i ++ ;						  
							      }								    	  }							  
							      								    	}							  
							      								    	else {							  
							      								    	  System . out . print ( arr [ i ] + " " ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		      FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		    FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		  FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B
--							      --							    --								  --
def computeLastDigit ( A , B ) :			      static int computeLastDigit ( long A , long B ) {		    static int computeLastDigit ( int A , int B ) {		  error : FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIA
    variable = 1					      	int variable = 1 ;					      int variable = 1 ;					  L_B.java:71: error: incompatible types: Long canno
    if ( A == B ) :					      	if ( A == B ) return 1 ;				      if ( ( A == B ) ) {					  t be converted to int		if(f_filled(param0.g
	return 1					      	else if ( ( B - A ) >= 5 ) return 0 ;			    	return 1 ;						  et(i),param1.get(i)) == f_gold(param0.get(i),param
    elif ( ( B - A ) >= 5 ) :				      	else {							      }								  1.get(i)))				   ^ Note: S
	return 0					      	  for ( long i = A + 1 ;				      else if ( ( ( B - A ) >= 5 ) ) {				  ome messages have been simplified; recompile with
    else :						      	  i <= B ;						    	return 0 ;						  -Xdiags:verbose to get full output 1 error
	for i in range ( A + 1 , B + 1 ) :		      	  i ++ ) variable = ( int ) ( variable * ( i % 10 ) ) % 10    }								  
	    variable = ( variable * ( i % 10 ) ) % 10	      	  return variable % 10 ;				      else {							  
	return variable % 10				      	}							    	for ( int i = A + 1 ;					  
							      }								    	i <= B ;						  
							      								    	i ++ ) {						  
							      								    	  variable = ( variable * ( i % 10 ) ) % 10 ;		  
							      								    	}							  
							      								    	return variable % 10 ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_ARRAY_ADJACENT_DIFFER_K			      SEARCHING_ARRAY_ADJACENT_DIFFER_K				    SEARCHING_ARRAY_ADJACENT_DIFFER_K				  SEARCHING_ARRAY_ADJACENT_DIFFER_K
--							      --							    --								  --
def search ( arr , n , x , k ) :			      static int search ( int arr [ ] , int n , int x , int k ) {   public static int search ( int [ ] arr , int n , int x , int  success : None
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( i < n ) :					      	while ( i < n ) {					      while ( ( i < n ) ) {					  
	if ( arr [ i ] == x ) :				      	  if ( arr [ i ] == x ) return i ;			    	if ( ( arr [ i ] == x ) ) {				  
	    return i					      	  i = i + Math . max ( 1 , Math . abs ( arr [ i ] - x ) / k 	  return i ;						  
	i = i + max ( 1 , int ( abs ( arr [ i ] - x ) / k ) ) 	}							    	}							  
    print ( "number is not present!" )			      	System . out . println ( "number is " + "not present!" ) ;  	i = i + Math . max ( 1 , ( int ) ( Math . abs ( arr [ i ] 
    return - 1						      	return - 1 ;						      }								  
							      }								      System . out . println ( "number is not present!" ) ;	  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	      MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	    MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL		  MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL
--							      --							    --								  --
def minOps ( arr , n , k ) :				      static int minOps ( int arr [ ] , int n , int k ) {	    public static int minOps ( int [ ] arr , int n , int k ) {	  error : Exception in thread "main" java.lang.Array
    max1 = max ( arr )					      	Arrays . sort ( arr ) ;					      int max1 = Math . max ( arr . length , arr [ 0 ] ) ;	  IndexOutOfBoundsException: Index 4 out of bounds f
    res = 0						      	int max = arr [ arr . length - 1 ] ;			      double res = 0 ;						  or length 4 	at MINIMUM_INCREMENT_K_OPERATIONS_MAK
    for i in range ( 0 , n ) :				      	int res = 0 ;						      for ( int i = 0 ;						  E_ELEMENTS_EQUAL.f_filled(MINIMUM_INCREMENT_K_OPER
	if ( ( max1 - arr [ i ] ) % k != 0 ) :		      	for ( int i = 0 ;					      i <= n ;							  ATIONS_MAKE_ELEMENTS_EQUAL.java:33) 	at MINIMUM_IN
	    return - 1					      	i < n ;							      i ++ ) {							  CREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL.main(MINI
	else :						      	i ++ ) {						    	if ( ( ( max1 - arr [ i ] ) % k != 0 ) ) {		  MUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL.jav
	    res += ( max1 - arr [ i ] ) / k		      	  if ( ( max - arr [ i ] ) % k != 0 ) return - 1 ;	    	  return - 1 ;						  a:81)
    return int ( res )					      	  else res += ( max - arr [ i ] ) / k ;			    	}							  
							      	}							    	else {							  
							      	return res ;						    	  res += ( max1 - arr [ i ] ) / k ;			  
							      }								    	}							  
							      								      }								  
							      								      return ( int ) res ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	    COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	  COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
def countZeroes ( mat ) :				      static int countZeroes ( int mat [ ] [ ] ) {		    public static int countZeroes ( int [ ] [ ] mat ) {		  script_not_found : None
    N = 5 ;						      	int row = N - 1 , col = 0 ;				      int N = 5 ;						  
    row = N - 1 ;					      	int count = 0 ;						      int row = N - 1 ;						  
    col = 0 ;						      	while ( col < N ) {					      int col = 0 ;						  
    count = 0 ;						      	  while ( mat [ row ] [ col ] > 0 ) if ( -- row < 0 ) retur   int count = 0 ;						  
    while ( col < N ) :					      	  count += ( row + 1 ) ;				      while ( ( col < N ) ) {					  
	while ( mat [ row ] [ col ] ) :			      	  col ++ ;						    	while ( ( mat [ row ] [ col ] ) != 0 ) {		  
	    if ( row < 0 ) :				      	}							    	  if ( ( row < 0 ) ) {					  
		return count ;				      	return count ;						    	    return count ;					  
	    row = row - 1 ;				      }								    	  }							  
	count = count + ( row + 1 ) ;			      								    	  row = row - 1 ;					  
	col = col + 1 ;					      								    	}							  
    return count ;					      								    	count = count + ( row + 1 ) ;				  
							      								    	col = col + 1 ;						  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_CONSECUTIVE_DUPLICATES_STRING			      REMOVE_CONSECUTIVE_DUPLICATES_STRING			    REMOVE_CONSECUTIVE_DUPLICATES_STRING			  REMOVE_CONSECUTIVE_DUPLICATES_STRING
--							      --							    --								  --
def removeDuplicates ( S ) :				      static void removeDuplicates ( char [ ] S ) {		    public static String removeDuplicates ( String S ) {	  script_not_found : None
    n = len ( S )					      	int n = S . length ;					      int n = S . length ( ) ;					  
    if ( n < 2 ) :					      	if ( n < 2 ) {						      if ( ( n < 2 ) ) return null ;				  
	return						      	  return ;						      int j = 0 ;						  
    j = 0						      	}							      for ( int i = 0 ;						  
    for i in range ( n ) :				      	int j = 0 ;						      i < n ;							  
	if ( S [ j ] != S [ i ] ) :			      	for ( int i = 1 ;					      i ++ ) {							  
	    j += 1					      	i < n ;							    	if ( ( S . charAt ( j ) != S . charAt ( i ) ) ) {	  
	    S [ j ] = S [ i ]				      	i ++ ) {						    	  j ++ ;						  
    j += 1						      	  if ( S [ j ] != S [ i ] ) {				    	  S . charAt ( j ) = S . charAt ( i ) ;			  
    S = S [ : j ]					      	    j ++ ;						    	}							  
    return S						      	    S [ j ] = S [ i ] ;					      }								  
							      	  }							      j ++ ;							  
							      	}							      S = S . substring ( 0 , j ) ;				  
							      	System . out . println ( Arrays . copyOfRange ( S , 0 , j +   return S ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS		  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS
--							      --							    --								  --
def countPairs ( str1 ) :				      static int countPairs ( String str ) {			    static int countPairs ( String str1 ) {			  success : None
    result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
    n = len ( str1 )					      	int n = str . length ( ) ;				      int n = str1 . length ( ) ;				  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ]  	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		result += 1 ;				      	j < n ;							    	for ( int j = i + 1 ;					  
    return result ;					      	j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt  	j < n ;							  
							      	return result ;						    	j ++ ) {						  
							      }								    	  if ( ( Math . abs ( str1 . charAt ( i ) - str1 . charAt 
							      								    	    result ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	      WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	    WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	  WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO
--							      --							    --								  --
def xorZero ( str ) :					      static int xorZero ( String s ) {				    public static int xorZero ( String str ) {			  success : None
    one_count = 0					      	int one_count = 0 , zero_count = 0 ;			      int oneCount = 0 ;					  
    zero_count = 0					      	char [ ] str = s . toCharArray ( ) ;			      int zeroCount = 0 ;					  
    n = len ( str )					      	int n = str . length ;					      int n = str . length ( ) ;				  
    for i in range ( 0 , n , 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( str [ i ] == '1' ) :			      	i < n ;							      i < n ;							  
	    one_count += 1				      	i ++ ) if ( str [ i ] == '1' ) one_count ++ ;		      i += 1 ) {						  
	else :						      	else zero_count ++ ;					    	if ( ( str . charAt ( i ) == '1' ) ) {			  
	    zero_count += 1				      	if ( one_count % 2 == 0 ) return zero_count ;		    	  oneCount ++ ;						  
    if ( one_count % 2 == 0 ) :				      	return one_count ;					    	}							  
	return zero_count				      }								    	else {							  
    return one_count					      								    	  zeroCount ++ ;					  
							      								    	}							  
							      								      }								  
							      								      if ( ( oneCount % 2 ) == 0 ) {				  
							      								    	return zeroCount ;					  
							      								      }								  
							      								      return oneCount ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			      CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			    CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			  CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT
--							      --							    --								  --
def isAnBn ( str ) :					      public static boolean isAnBn ( String s ) {		    public static boolean isAnBn ( String str ) {		  error : CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT.java
    n = len ( str )					      	int l = s . length ( ) ;				      int n = str . length ( ) ;				  :38: error: cannot find symbol   if ( ( i * 2 ) !=
    for i in range ( n ) :				      	if ( l % 2 == 1 ) {					      for ( int i = 0 ;						   n ) return false ;	       ^   symbol:   variabl
	if ( str [ i ] != 'a' ) :			      	  return false ;					      i < n ;							  e i	location: class CHECK_STRING_FOLLOWS_ANBN_PA
	    break					      	}							      i ++ ) {							  TTERN_NOT CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT.ja
    if ( i * 2 != n ) :					      	int i = 0 ;						    	if ( ( str . charAt ( i ) != 'a' ) ) break ;		  va:39: error: cannot find symbol   for ( int j = i
	return False					      	int j = l - 1 ;						      }								   ;		     ^	 symbol:   variable i	loca
    for j in range ( i , n ) :				      	while ( i < j ) {					      if ( ( i * 2 ) != n ) return false ;			  tion: class CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT
	if ( str [ j ] != 'b' ) :			      	  if ( s . charAt ( i ) != 'a' || s . charAt ( j ) != 'b' )   for ( int j = i ;						  2 errors
	    return False				      	    return false ;					      j < n ;							  
    return True						      	  }							      j ++ ) {							  
							      	  i ++ ;						    	if ( ( str . charAt ( j ) != 'b' ) ) return false ;	  
							      	  j -- ;						      }								  
							      	}							      return true ;						  
							      	return true ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			      COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			    COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			  COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N
--							      --							    --								  --
def countOfBinaryNumberLessThanN ( N ) :		      static int countOfBinaryNumberLessThanN ( int N ) {	    static int countOfBinaryNumberLessThanN ( int N ) {		  success : None
    q = deque ( )					      	Queue < Integer > q = new LinkedList < > ( ) ;		      Queue < Integer > q = new LinkedList < > ( ) ;		  
    q.append ( 1 )					      	q . add ( 1 ) ;						      q . add ( 1 ) ;						  
    cnt = 0						      	int cnt = 0 ;						      int cnt = 0 ;						  
    while ( q ) :					      	int t ;							      while ( ( q . size ( ) ) > 0 ) {				  
	t = q.popleft ( )				      	while ( q . size ( ) > 0 ) {				    	int t = q . poll ( ) ;					  
	if ( t <= N ) :					      	  t = q . peek ( ) ;					    	if ( ( t <= N ) ) {					  
	    cnt = cnt + 1				      	  q . remove ( ) ;					    	  cnt = cnt + 1 ;					  
	    q.append ( t * 10 )				      	  if ( t <= N ) {					    	  q . add ( t * 10 ) ;					  
	    q.append ( t * 10 + 1 )			      	    cnt ++ ;						    	  q . add ( t * 10 + 1 ) ;				  
    return cnt						      	    q . add ( t * 10 ) ;				    	}							  
							      	    q . add ( t * 10 + 1 ) ;				      }								  
							      	  }							      return cnt ;						  
							      	}							    }								  
							      	return cnt ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_1				      FRIENDS_PAIRING_PROBLEM_1					    FRIENDS_PAIRING_PROBLEM_1					  FRIENDS_PAIRING_PROBLEM_1
--							      --							    --								  --
def countFriendsPairings ( n ) :			      static int countFriendsPairings ( int n ) {		    public static int countFriendsPairings ( int n ) {		  script_not_found : None
    dp = [ - 1 ] * 100					      	if ( dp [ n ] != - 1 ) return dp [ n ] ;		      int [ ] dp = new int [ 100 ] ;				  
    if ( dp [ n ] != - 1 ) :				      	if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1   for ( int i = 0 ;						  
	return dp [ n ]					      	else return dp [ n ] = n ;				      i < dp . length ;						  
    if ( n > 2 ) :					      }								      i ++ ) {							  
	dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 								    	dp [ i ] = - 1 ;					  
	return dp [ n ]					      								      }								  
    else :						      								      if ( ( dp [ n ] != - 1 ) ) {				  
	dp [ n ] = n					      								    	return dp [ n ] ;					  
	return dp [ n ]					      								      }								  
							      								      if ( ( n > 2 ) ) {					  
							      								    	dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 ) * 
							      								    	return dp [ n ] ;					  
							      								      }								  
							      								      else {							  
							      								    	dp [ n ] = n ;						  
							      								    	return dp [ n ] ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH						      BINARY_SEARCH						    BINARY_SEARCH						  BINARY_SEARCH
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      int binarySearch ( int arr [ ] , int l , int r , int x ) {    static int binarySearch ( int [ ] arr , int l , int r , int x success : None
    if r >= l :						      	if ( r >= l ) {						      if ( r >= l ) {						  
	mid = l + ( r - l ) // 2			      	  int mid = l + ( r - l ) / 2 ;				    	int mid = l + ( r - l ) / 2 ;				  
	if arr [ mid ] == x :				      	  if ( arr [ mid ] == x ) return mid ;			    	if ( arr [ mid ] == x ) {				  
	    return mid					      	  if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 	  return mid ;						  
	elif arr [ mid ] > x :				      	  return binarySearch ( arr , mid + 1 , r , x ) ;	    	}							  
	    return binarySearch ( arr , l , mid - 1 , x )     	}							    	else if ( arr [ mid ] > x ) {				  
	else :						      	return - 1 ;						    	  return binarySearch ( arr , l , mid - 1 , x ) ;	  
	    return binarySearch ( arr , mid + 1 , r , x )     }								    	}							  
    else :						      								    	else {							  
	return - 1					      								    	  return binarySearch ( arr , mid + 1 , r , x ) ;	  
							      								    	}							  
							      								      }								  
							      								      else {							  
							      								    	return - 1 ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1
--							      --							    --								  --
def findMissing ( a , b , n , m ) :			      static void findMissing ( int a [ ] , int b [ ] , int n , int static void findMissing ( String [ ] a , String [ ] b , int n script_not_found : None
    s = dict ( )					      	HashSet < Integer > s = new HashSet < > ( ) ;		      Map < String , Integer > s = new HashMap < > ( ) ;	  
    for i in range ( m ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	s [ b [ i ] ] = 1				      	i < m ;							      i < m ;							  
    for i in range ( n ) :				      	i ++ ) s . add ( b [ i ] ) ;				      i ++ ) {							  
	if a [ i ] not in s.keys ( ) :			      	for ( int i = 0 ;					    	s . put ( b [ i ] , 1 ) ;				  
	    print ( a [ i ] , end = " " )		      	i < n ;							      }								  
							      	i ++ ) if ( ! s . contains ( a [ i ] ) ) System . out . pri   for ( int i = 0 ;						  
							      }								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( ! s . keySet ( ) . contains ( a [ i ] ) ) {	  
							      								    	  System . out . print ( a [ i ] + " " ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL		      MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			    MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			  MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL
--							      --							    --								  --
def moveSpaceInFront ( s ) :				      static void moveSpaceInFront ( char str [ ] ) {		    public static String moveSpaceInFront ( String s ) {	  script_not_found : None
    i = len ( s ) - 1					      	int i = str . length - 1 ;				      int i = s . length ( ) - 1 ;				  
    for j in range ( i , - 1 , - 1 ) :			      	for ( int j = i ;					      for ( int j = i ;						  
	if ( s [ j ] != ' ' ) :				      	j >= 0 ;						      j >= 0 ;							  
	    s = s [ : i ] + s [ j ] + s [ i + 1 : ]	      	j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ] ;     j -- ) {							  
	    i -= 1					      	while ( i >= 0 ) str [ i -- ] = ' ' ;			    	if ( ( s . charAt ( j ) != ' ' ) ) {			  
    while ( i >= 0 ) :					      }								    	  s = s . substring ( 0 , i ) + s . charAt ( j ) + s . su 
	s = s [ : i ] + ' ' + s [ i + 1 : ]		      								    	  i -- ;						  
	i -= 1						      								    	}							  
    return s						      								      }								  
							      								      while ( ( i >= 0 ) ) {					  
							      								    	s = s . substring ( 0 , i ) + ' ' + s . substring ( i + 1 
							      								    	i -- ;							  
							      								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_ELEMENT					      NEXT_GREATER_ELEMENT					    NEXT_GREATER_ELEMENT					  NEXT_GREATER_ELEMENT
--							      --							    --								  --
def printNGE ( arr ) :					      static void printNGE ( int arr [ ] , int n ) {		    static void printNGE ( int [ ] arr ) {			  script_not_found : None
    for i in range ( 0 , len ( arr ) , 1 ) :		      	int next , i , j ;					      for ( int i = 0 ;						  
	next = - 1					      	for ( i = 0 ;						      i < arr . length ;					  
	for j in range ( i + 1 , len ( arr ) , 1 ) :	      	i < n ;							      i += 1 ) {						  
	    if arr [ i ] < arr [ j ] :			      	i ++ ) {						    	int next = - 1 ;					  
		next = arr [ j ]			      	  next = - 1 ;						    	for ( int j = i + 1 ;					  
		break					      	  for ( j = i + 1 ;					    	j < arr . length ;					  
	print ( str ( arr [ i ] ) + " -- " + str ( next ) )   	  j < n ;						    	j += 1 ) {						  
							      	  j ++ ) {						    	  if ( arr [ i ] < arr [ j ] ) {			  
							      	    if ( arr [ i ] < arr [ j ] ) {			    	    next = arr [ j ] ;					  
							      	      next = arr [ j ] ;				    	    break ;						  
							      	      break ;						    	  }							  
							      	    }							    	}							  
							      	  }							    	System . out . println ( arr [ i ] + " -- " + next ) ;	  
							      	  System . out . println ( arr [ i ] + " -- " + next ) ;      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN
--							      --							    --								  --
def checkDuplicatesWithinK ( arr , n , k ) :		      static boolean checkDuplicatesWithinK ( int arr [ ] , int k ) public static boolean checkDuplicatesWithinK ( int [ ] arr ,  script_not_found : None
    myset = [ ]						      	HashSet < Integer > set = new HashSet < > ( ) ;		      HashSet < Integer > mySet = new HashSet < > ( ) ;		  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] in myset :				      	i < arr . length ;					      i < n ;							  
	    return True					      	i ++ ) {						      i ++ ) {							  
	myset.append ( arr [ i ] )			      	  if ( set . contains ( arr [ i ] ) ) return true ;	    	if ( mySet . contains ( arr [ i ] ) ) {			  
	if ( i >= k ) :					      	  set . add ( arr [ i ] ) ;				    	  return true ;						  
	    myset.remove ( arr [ i - k ] )		      	  if ( i >= k ) set . remove ( arr [ i - k ] ) ;	    	}							  
    return False					      	}							    	mySet . add ( arr [ i ] ) ;				  
							      	return false ;						    	if ( ( i >= k ) && ( arr [ i - k ] != 0 ) ) {		  
							      }								    	  mySet . remove ( arr [ i - k ] ) ;			  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LAST_NON_ZERO_DIGIT_FACTORIAL				      LAST_NON_ZERO_DIGIT_FACTORIAL				    LAST_NON_ZERO_DIGIT_FACTORIAL				  LAST_NON_ZERO_DIGIT_FACTORIAL
--							      --							    --								  --
def lastNon0Digit ( n ) :				      static int lastNon0Digit ( int n ) {			    static int lastNon0Digit ( int n ) {			  script_not_found : None
    if ( n < 10 ) :					      	if ( n < 10 ) return dig [ n ] ;			      if ( ( n < 10 ) ) {					  
	return dig [ n ]				      	if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Di 	return dig [ n ] ;					  
    if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :		      	else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ]    }								  
	return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10  }								      if ( ( ( ( n / 10 ) % 10 ) % 2 ) == 0 ) {			  
    else :						      								    	return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 
	return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10  								      }								  
    return 0						      								      else {							  
							      								    	return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY
--							      --							    --								  --
def printRepeating ( arr , size ) :			      void printRepeating ( int arr [ ] , int size ) {		    static void printRepeating ( int [ ] arr , int size ) {	  script_not_found : None
    print ( "Repeating elements are " , end = '' )	      	int i , j ;						      System . out . print ( "Repeating elements are " ) ;	  
    for i in range ( 0 , size ) :			      	System . out . println ( "Repeated Elements are :" ) ;	      for ( int i = 0 ;						  
	for j in range ( i + 1 , size ) :		      	for ( i = 0 ;						      i <= size ;						  
	    if arr [ i ] == arr [ j ] :			      	i < size ;						      i ++ ) {							  
		print ( arr [ i ] , end = ' ' )		      	i ++ ) {						    	for ( int j = i + 1 ;					  
							      	  for ( j = i + 1 ;					    	j < size ;						  
							      	  j < size ;						    	j ++ ) {						  
							      	  j ++ ) {						    	  if ( arr [ i ] == arr [ j ] ) {			  
							      	    if ( arr [ i ] == arr [ j ] ) System . out . print ( ar 	    System . out . print ( arr [ i ] + " " ) ;		  
							      	  }							    	  }							  
							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		      MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		    MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		  MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY
--							      --							    --								  --
def maxDistance ( arr , n ) :				      static int maxDistance ( int [ ] arr , int n ) {		    public static int maxDistance ( int [ ] arr , int n ) {	  success : None
    mp = { }						      	HashMap < Integer , Integer > map = new HashMap < > ( ) ;     HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
    maxDict = 0						      	int max_dist = 0 ;					      int maxMap = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] not in mp.keys ( ) :		      	i < n ;							      i < n ;							  
	    mp [ arr [ i ] ] = i			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( ! map . containsKey ( arr [ i ] ) ) map . put ( arr  	if ( ! mp . keySet ( ) . contains ( arr [ i ] ) ) {	  
	    maxDict = max ( maxDict , i - mp [ arr [ i ] ] )  	  else max_dist = Math . max ( max_dist , i - map . get ( a 	  mp . put ( arr [ i ] , i ) ;				  
    return maxDict					      	}							    	}							  
							      	return max_dist ;					    	else {							  
							      }								    	  maxMap = Math . max ( maxMap , i - mp . get ( arr [ i ] 
							      								    	}							  
							      								      }								  
							      								      return maxMap ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVEN_FIBONACCI_NUMBERS_SUM				      EVEN_FIBONACCI_NUMBERS_SUM				    EVEN_FIBONACCI_NUMBERS_SUM					  EVEN_FIBONACCI_NUMBERS_SUM
--							      --							    --								  --
def evenFibSum ( limit ) :				      static int evenFibSum ( int limit ) {			    public static int evenFibSum ( int limit ) {		  success : None
    if ( limit < 2 ) :					      	if ( limit < 2 ) return 0 ;				      if ( ( limit < 2 ) ) {					  
	return 0					      	long ef1 = 0 , ef2 = 2 ;				    	return 0 ;						  
    ef1 = 0						      	long sum = ef1 + ef2 ;					      }								  
    ef2 = 2						      	while ( ef2 <= limit ) {				      int ef1 = 0 ;						  
    sm = ef1 + ef2					      	  long ef3 = 4 * ef2 + ef1 ;				      int ef2 = 2 ;						  
    while ( ef2 <= limit ) :				      	  if ( ef3 > limit ) break ;				      int sm = ef1 + ef2 ;					  
	ef3 = 4 * ef2 + ef1				      	  ef1 = ef2 ;						      while ( ( ef2 <= limit ) ) {				  
	if ( ef3 > limit ) :				      	  ef2 = ef3 ;						    	int ef3 = 4 * ef2 + ef1 ;				  
	    break					      	  sum += ef2 ;						    	if ( ( ef3 > limit ) ) {				  
	ef1 = ef2					      	}							    	  break ;						  
	ef2 = ef3					      	return ( int ) sum ;					    	}							  
	sm = sm + ef2					      }								    	ef1 = ef2 ;						  
    return sm						      								    	ef2 = ef3 ;						  
							      								    	sm = sm + ef2 ;						  
							      								      }								  
							      								      return sm ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED	      WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED	    WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED		  WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED
--							      --							    --								  --
def countWays ( arr , m , N ) :				      static int countWays ( int N ) {				    static int countWays ( int [ ] arr , int m , int N ) {	  script_not_found : None
    count = [ 0 for i in range ( N + 1 ) ]		      	int count [ ] = new int [ N + 1 ] ;			      int [ ] count = new int [ N + 1 ] ;			  
    count [ 0 ] = 1					      	count [ 0 ] = 1 ;					      count [ 0 ] = 0 ;						  
    for i in range ( 1 , N + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 0 ;						  
	for j in range ( m ) :				      	i <= N ;						      i < N ;							  
	    if ( i >= arr [ j ] ) :			      	i ++ ) for ( int j = 0 ;				      i ++ ) count [ i ] = 0 ;					  
		count [ i ] += count [ i - arr [ j ] ]	      	j < arr . length ;					      count [ 0 ] = 1 ;						  
    return count [ N ]					      	j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr   for ( int i = 1 ;						  
							      	return count [ N ] ;					      i <= N ;							  
							      }								      i ++ ) {							  
							      								    	for ( int j = 0 ;					  
							      								    	j < m ;							  
							      								    	j ++ ) {						  
							      								    	  if ( ( i >= arr [ j ] ) && ( j >= arr [ j ] ) ) count [ 
							      								    	}							  
							      								      }								  
							      								      return count [ N ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT
--							      --							    --								  --
def check ( st ) :					      static boolean check ( String str ) {			    public static boolean check ( String st ) {			  success : None
    n = len ( st )					      	int n = str . length ( ) ;				      int n = st . length ( ) ;					  
    if ( n == 0 ) :					      	if ( n == 0 ) return false ;				      if ( ( n == 0 ) ) {					  
	return False					      	if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 4 ==  	return false ;						  
    if ( n == 1 ) :					      	int last = str . charAt ( n - 1 ) - '0' ;		      }								  
	return ( ( st [ 0 ] - '0' ) % 4 == 0 )		      	int second_last = str . charAt ( n - 2 ) - '0' ;	      if ( ( n == 1 ) ) {					  
    last = ( int ) ( st [ n - 1 ] )			      	return ( ( second_last * 10 + last ) % 4 == 0 ) ;	    	return ( ( st . charAt ( 0 ) - '0' ) % 4 == 0 ) ;	  
    second_last = ( int ) ( st [ n - 2 ] )		      }								      }								  
    return ( ( second_last * 10 + last ) % 4 == 0 )	      								      int last = ( ( int ) st . charAt ( n - 1 ) ) ;		  
							      								      int secondLast = ( ( int ) st . charAt ( n - 2 ) ) ;	  
							      								      return ( ( secondLast * 10 + last ) % 4 == 0 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GNOME_SORT_A_STUPID_ONE					      GNOME_SORT_A_STUPID_ONE					    GNOME_SORT_A_STUPID_ONE					  GNOME_SORT_A_STUPID_ONE
--							      --							    --								  --
def gnomeSort ( arr , n ) :				      static void gnomeSort ( int arr [ ] , int n ) {		    public static int [ ] gnomeSort ( int [ ] arr , int n ) {	  script_not_found : None
    index = 0						      	int index = 0 ;						      int index = 0 ;						  
    while index < n :					      	while ( index < n ) {					      while ( index < n ) {					  
	if index == 0 :					      	  if ( index == 0 ) index ++ ;				    	if ( index == 0 ) {					  
	    index = index + 1				      	  if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ;	    	  index = index + 1 ;					  
	if arr [ index ] >= arr [ index - 1 ] :		      	  else {						    	}							  
	    index = index + 1				      	    int temp = 0 ;					    	if ( arr [ index ] >= arr [ index - 1 ] ) {		  
	else :						      	    temp = arr [ index ] ;				    	  index = index + 1 ;					  
	    arr [ index ] , arr [ index - 1 ] = arr [ index - 	    arr [ index ] = arr [ index - 1 ] ;			    	}							  
	    index = index - 1				      	    arr [ index - 1 ] = temp ;				    	else {							  
    return arr						      	    index -- ;						    	  arr [ index ] = arr [ index - 1 ] ;			  
							      	  }							    	  arr [ index - 1 ] = arr [ index ] ;			  
							      	}							    	  index = index - 1 ;					  
							      	return ;						    	}							  
							      }								      }								  
							      								      return arr ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1
--							      --							    --								  --
def isHeap ( arr , n ) :				      static boolean isHeap ( int arr [ ] , int n ) {		    public static boolean isHeap ( int [ ] arr , int n ) {	  success : None
    for i in range ( int ( ( n - 2 ) / 2 ) + 1 ) :	      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ 2 * i + 1 ] > arr [ i ] :		      	i <= ( n - 2 ) / 2 ;					      i < ( int ) ( ( n - 2 ) / 2 ) + 1 ;			  
	    return False				      	i ++ ) {						      i ++ ) {							  
	if ( 2 * i + 2 < n and arr [ 2 * i + 2 ] > arr [ i ]  	  if ( arr [ 2 * i + 1 ] > arr [ i ] ) {		    	if ( arr [ 2 * i + 1 ] > arr [ i ] ) {			  
	    return False				      	    return false ;					    	  return false ;					  
    return True						      	  }							    	}							  
							      	  if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) {   	if ( ( 2 * i + 2 < n ) && arr [ 2 * i + 2 ] > arr [ i ] ) 
							      	    return false ;					    	  return false ;					  
							      	  }							    	}							  
							      	}							      }								  
							      	return true ;						      return true ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION	  SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION
--							      --							    --								  --
def printSorted ( a , b , c ) :				      static void printSorted ( int a , int b , int c ) {	    public static void printSorted ( int a , int b , int c ) {	  script_not_found : None
    get_max = max ( a , max ( b , c ) )			      	int get_max = Math . max ( a , Math . max ( b , c ) ) ;	      int getMax = Math . max ( a , Math . max ( b , c ) ) ;	  
    get_min = - max ( - a , max ( - b , - c ) )		      	int get_min = - Math . max ( - a , Math . max ( - b , - c )   int getMin = - Math . max ( - a , Math . max ( - b , - c )  
    get_mid = ( a + b + c ) - ( get_max + get_min )	      	int get_mid = ( a + b + c ) - ( get_max + get_min ) ;	      int getMid = ( a + b + c ) - ( getMax + getMin ) ;	  
    print ( get_min , " " , get_mid , " " , get_max )	      	System . out . print ( get_min + " " + get_mid + " " + get_   System . out . println ( getMin + " " + getMid + " " + getM 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY
--							      --							    --								  --
def findGreatest ( arr , n ) :				      static int findGreatest ( int [ ] arr , int n ) {		    static int findGreatest ( int [ ] arr , int n ) {		  success : None
    result = - 1					      	int result = - 1 ;					      int result = - 1 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n - 1 ) :			      	i < n ;							      i < n ;							  
	    for k in range ( j + 1 , n ) :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		if ( arr [ j ] * arr [ k ] == arr [ i ] ) :   	j < n - 1 ;						    	for ( int j = 0 ;					  
		    result = max ( result , arr [ i ] )	      	j ++ ) for ( int k = j + 1 ;				    	j < n - 1 ;						  
    return result					      	k < n ;							    	j ++ ) {						  
							      	k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = M 	  for ( int k = j + 1 ;					  
							      	return result ;						    	  k < n ;						  
							      }								    	  k ++ ) {						  
							      								    	    if ( ( arr [ j ] * arr [ k ] == arr [ i ] ) ) {	  
							      								    	      result = Math . max ( result , arr [ i ] ) ;	  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PAIRS_ARRAY_XOR_0_1				      FIND_NUMBER_PAIRS_ARRAY_XOR_0_1				    FIND_NUMBER_PAIRS_ARRAY_XOR_0_1				  FIND_NUMBER_PAIRS_ARRAY_XOR_0_1
--							      --							    --								  --
def calculate ( a ) :					      static int calculate ( int a [ ] , int n ) {		    public static int calculate ( int [ ] a ) {			  script_not_found : None
    maximum = max ( a )					      	int maximum = Arrays . stream ( a ) . max ( ) . getAsInt (    int maximum = Math . max ( a . length , 0 ) ;		  
    frequency = [ 0 for x in range ( maximum + 1 ) ]	      	int frequency [ ] = new int [ maximum + 1 ] ;		      int [ ] frequency = new int [ maximum + 1 ] ;		  
    for i in a :					      	for ( int i = 0 ;					      for ( int x = 0 ;						  
	frequency [ i ] += 1				      	i < n ;							      x < a . length ;						  
    answer = 0						      	i ++ ) {						      x ++ ) frequency [ x ] = 0 ;				  
    for i in frequency :				      	  frequency [ a [ i ] ] += 1 ;				      for ( int i = 0 ;						  
	answer = answer + i * ( i - 1 ) // 2		      	}							      i < a . length ;						  
    return answer					      	int answer = 0 ;					      i ++ ) frequency [ a [ i ] ] ++ ;				  
							      	for ( int i = 0 ;					      int answer = 0 ;						  
							      	i < ( maximum ) + 1 ;					      for ( int i = 0 ;						  
							      	i ++ ) {						      i < frequency . length ;					  
							      	  answer = answer + frequency [ i ] * ( frequency [ i ] - 1   i ++ ) answer = answer + frequency [ i ] * ( i - 1 ) / 2 ;  
							      	}							      return answer ;						  
							      	return answer / 2 ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION
--							      --							    --								  --
def exponentiation ( bas , exp ) :			      static long exponentiation ( long base , long exp ) {	    public static int exponentiation ( int bas , int exp ) {	  script_not_found : None
    if ( exp == 0 ) :					      	if ( exp == 0 ) return 1 ;				      if ( ( exp == 0 ) ) {					  
	return 1					      	if ( exp == 1 ) return base % N ;			    	return 1 ;						  
    if ( exp == 1 ) :					      	long t = exponentiation ( base , exp / 2 ) ;		      }								  
	return bas % N					      	t = ( t * t ) % N ;					      if ( ( exp == 1 ) ) {					  
    t = exponentiation ( bas , int ( exp / 2 ) )	      	if ( exp % 2 == 0 ) return t ;				    	return bas % N ;					  
    t = ( t * t ) % N					      	else return ( ( base % N ) * t ) % N ;			      }								  
    if ( exp % 2 == 0 ) :				      }								      int t = exponentiation ( bas , ( int ) ( exp / 2 ) ) ;	  
	return t					      								      t = ( t * t ) % N ;					  
    else :						      								      if ( ( exp % 2 ) == 0 ) {					  
	return ( ( bas % N ) * t ) % N			      								    	return t ;						  
							      								      }								  
							      								      else {							  
							      								    	return ( ( bas % N ) * t ) % N ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE	  CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE
--							      --							    --								  --
def printSequence ( arr , input ) :			      static String printSequence ( String arr [ ] , String input ) static String printSequence ( String arr , String input ) {	  script_not_found : None
    n = len ( input )					      	String output = "" ;					      int n = input . length ( ) ;				  
    output = ""						      	int n = input . length ( ) ;				      String output = "" ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( input [ i ] == ' ' ) :			      	i < n ;							      i < n ;							  
	    output = output + "0"			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( input . charAt ( i ) == ' ' ) output = output + "0"  	if ( ( input . charAt ( i ) == ' ' ) ) {		  
	    position = ord ( input [ i ] ) - ord ( 'A' )      	  else {						    	  output = output + "0" ;				  
	    output = output + arr [ position ]		      	    int position = input . charAt ( i ) - 'A' ;		    	}							  
    return output					      	    output = output + arr [ position ] ;		    	else {							  
							      	  }							    	  int position = ( int ) input . charAt ( i ) - ( int ) ' 
							      	}							    	  output = output + arr . charAt ( position ) ;		  
							      	return output ;						    	}							  
							      }								      }								  
							      								      return output ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_PRIME_FACTOR_NUMBER			      FIND_LARGEST_PRIME_FACTOR_NUMBER				    FIND_LARGEST_PRIME_FACTOR_NUMBER				  FIND_LARGEST_PRIME_FACTOR_NUMBER
--							      --							    --								  --
def maxPrimeFactors ( n ) :				      static long maxPrimeFactors ( long n ) {			    public static int maxPrimeFactors ( long n ) {		  success : None
    maxPrime = - 1					      	long maxPrime = - 1 ;					      long maxPrime = - 1 ;					  
    while n % 2 == 0 :					      	while ( n % 2 == 0 ) {					      while ( n % 2 == 0 ) {					  
	maxPrime = 2					      	  maxPrime = 2 ;					    	maxPrime = 2 ;						  
	n >>= 1						      	  n >>= 1 ;						    	n >>= 1 ;						  
    for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 , 2 ) :  	}							      }								  
	while n % i == 0 :				      	for ( int i = 3 ;					      for ( long i = 3 ;					  
	    maxPrime = i				      	i <= Math . sqrt ( n ) ;				      i <= ( long ) Math . sqrt ( n ) ;				  
	    n = n / i					      	i += 2 ) {						      i += 2 ) {						  
    if n > 2 :						      	  while ( n % i == 0 ) {				    	while ( n % i == 0 ) {					  
	maxPrime = n					      	    maxPrime = i ;					    	  maxPrime = i ;					  
    return int ( maxPrime )				      	    n = n / i ;						    	  n = n / i ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	if ( n > 2 ) maxPrime = n ;				      if ( n > 2 ) {						  
							      	return maxPrime ;					    	maxPrime = n ;						  
							      }								      }								  
							      								      return ( int ) maxPrime ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY
--							      --							    --								  --
def maxSum ( arr , n ) :				      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int [ ] arr , int n ) {		  failure : #Results:0, 10
    res = - sys.maxsize					      	int res = Integer . MIN_VALUE ;				      int res = - Integer . MAX_VALUE ;				  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	curr_sum = 0					      	i < n ;							      i <= n ;							  
	for j in range ( 0 , n ) :			      	i ++ ) {						      i ++ ) {							  
	    index = int ( ( i + j ) % n )		      	  int curr_sum = 0 ;					    	int currSum = 0 ;					  
	    curr_sum += j * arr [ index ]		      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	res = max ( res , curr_sum )			      	  j < n ;						    	j <= n ;						  
    return res						      	  j ++ ) {						    	j ++ ) {						  
							      	    int index = ( i + j ) % n ;				    	  int index = ( int ) ( ( i + j ) % n ) ;		  
							      	    curr_sum += j * arr [ index ] ;			    	  currSum += j * arr [ index ] ;			  
							      	  }							    	}							  
							      	  res = Math . max ( res , curr_sum ) ;			    	res = Math . max ( res , currSum ) ;			  
							      	}							      }								  
							      	return res ;						      return res ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I
--							      --							    --								  --
def squareRoot ( n , p ) :				      static void squareRoot ( int n , int p ) {		    public static void squareRoot ( int n , int p ) {		  script_not_found : None
    n = n % p						      	n = n % p ;						      n = n % p ;						  
    for x in range ( 2 , p ) :				      	for ( int x = 2 ;					      for ( int x = 2 ;						  
	if ( ( x * x ) % p == n ) :			      	x < p ;							      x < p ;							  
	    print ( "Square root is " , x )		      	x ++ ) {						      x ++ ) {							  
	    return					      	  if ( ( x * x ) % p == n ) {				    	if ( ( ( x * x ) % p ) == n ) {				  
    print ( "Square root doesn't exist" )		      	    System . out . println ( "Square " + "root is " + x ) ; 	  System . out . println ( "Square root is " + x ) ;	  
							      	    return ;						    	  return ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	System . out . println ( "Square root " + "doesn't exist" )   System . out . println ( "Square root doesn't exist" ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			      REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			    REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			  REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S
--							      --							    --								  --
def replace ( s , c1 , c2 ) :				      static String replace ( String s , char c1 , char c2 ) {	    public static String replace ( String s , char c1 , char c2 ) success : None
    l = len ( s )					      	int l = s . length ( ) ;				      int l = s . length ( ) ;					  
    for i in range ( l ) :				      	char [ ] arr = s . toCharArray ( ) ;			      for ( int i = 0 ;						  
	if ( s [ i ] == c1 ) :				      	for ( int i = 0 ;					      i < l ;							  
	    s = s [ 0 : i ] + c2 + s [ i + 1 : ]	      	i < l ;							      i ++ ) {							  
	elif ( s [ i ] == c2 ) :			      	i ++ ) {						    	if ( ( s . charAt ( i ) == c1 ) ) {			  
	    s = s [ 0 : i ] + c1 + s [ i + 1 : ]	      	  if ( arr [ i ] == c1 ) arr [ i ] = c2 ;		    	  s = s . substring ( 0 , i ) + c2 + s . substring ( i +  
    return s						      	  else if ( arr [ i ] == c2 ) arr [ i ] = c1 ;		    	}							  
							      	}							    	else if ( ( s . charAt ( i ) == c2 ) ) {		  
							      	return String . valueOf ( arr ) ;			    	  s = s . substring ( 0 , i ) + c1 + s . substring ( i +  
							      }								    	}							  
							      								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES
--							      --							    --								  --
def firstLetterWord ( str ) :				      static String firstLetterWord ( String str ) {		    public static String firstLetterWord ( String str ) {	  success : None
    result = ""						      	String result = "" ;					      String result = "" ;					  
    v = True						      	boolean v = true ;					      boolean v = true ;					  
    for i in range ( len ( str ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( str [ i ] == ' ' ) :			      	i < str . length ( ) ;					      i < str . length ( ) ;					  
	    v = True					      	i ++ ) {						      i ++ ) {							  
	elif ( str [ i ] != ' ' and v == True ) :	      	  if ( str . charAt ( i ) == ' ' ) {			    	if ( ( str . charAt ( i ) == ' ' ) ) {			  
	    result += ( str [ i ] )			      	    v = true ;						    	  v = true ;						  
	    v = False					      	  }							    	}							  
    return result					      	  else if ( str . charAt ( i ) != ' ' && v == true ) {	    	else if ( ( str . charAt ( i ) != ' ' ) && v == true ) {  
							      	    result += ( str . charAt ( i ) ) ;			    	  result += ( str . charAt ( i ) ) ;			  
							      	    v = false ;						    	  v = false ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return result ;						      return result ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1		    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1
--							      --							    --								  --
def subset ( arr , n ) :				      static int subset ( int arr [ ] , int n ) {		    public static int subset ( int [ ] arr , int n ) {		  failure : #Results:3, 10
    mp = { i : 0 for i in range ( 10 ) }		      	HashMap < Integer , Integer > mp = new HashMap < > ( ) ;      HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	mp [ arr [ i ] ] += 1				      	i < n ;							      i < 10 ;							  
    res = 0						      	i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == nul   i ++ ) {							  
    for key , value in mp.items ( ) :			      	int res = 0 ;						    	mp . put ( i , 0 ) ;					  
	res = max ( res , value )			      	for ( Map . Entry < Integer , Integer > entry : mp . entryS   }								  
    return res						      	return res ;						      for ( int i = 0 ;						  
							      }								      i < n ;							  
							      								      i ++ ) {							  
							      								    	mp . put ( arr [ i ] , 1 ) ;				  
							      								      }								  
							      								      int res = 0 ;						  
							      								      for ( Map . Entry < Integer , Integer > entry : mp . entryS 
							      								    	res = Math . max ( res , entry . getValue ( ) ) ;	  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			      MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			    MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			  MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK
--							      --							    --								  --
def minRotation ( input , unlock_code ) :		      static int minRotation ( int input , int unlock_code ) {	    public static int minRotation ( int input , int unlockCode )  success : None
    rotation = 0					      	int rotation = 0 ;					      int rotation = 0 ;					  
    while ( input > 0 or unlock_code > 0 ) :		      	int input_digit , code_digit ;				      while ( ( input > 0 ) || ( unlockCode > 0 ) ) {		  
	input_digit = input % 10			      	while ( input > 0 || unlock_code > 0 ) {		    	int inputDigit = input % 10 ;				  
	code_digit = unlock_code % 10			      	  input_digit = input % 10 ;				    	int codeDigit = unlockCode % 10 ;			  
	rotation += min ( abs ( input_digit - code_digit ) ,  	  code_digit = unlock_code % 10 ;			    	rotation += Math . min ( Math . abs ( inputDigit - codeDi 
	input = int ( input / 10 )			      	  rotation += Math . min ( Math . abs ( input_digit - code_ 	input = ( int ) ( input / 10 ) ;			  
	unlock_code = int ( unlock_code / 10 )		      	  input /= 10 ;						    	unlockCode = ( int ) ( unlockCode / 10 ) ;		  
    return rotation					      	  unlock_code /= 10 ;					      }								  
							      	}							      return rotation ;						  
							      	return rotation ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_MAJORITY_ELEMENT				      CHECK_ARRAY_MAJORITY_ELEMENT				    CHECK_ARRAY_MAJORITY_ELEMENT				  CHECK_ARRAY_MAJORITY_ELEMENT
--							      --							    --								  --
def isMajority ( a ) :					      static boolean isMajority ( int a [ ] , int n ) {		    public static boolean isMajority ( String [ ] a ) {		  error : CHECK_ARRAY_MAJORITY_ELEMENT.java:69: erro
    mp = { }						      	HashMap < Integer , Integer > mp = new HashMap < Integer ,    HashMap < String , Integer > mp = new HashMap < > ( ) ;	  r: method f_filled in class CHECK_ARRAY_MAJORITY_E
    for i in a :					      	for ( int i = 0 ;					      for ( String i : a ) {					  LEMENT cannot be applied to given types;	   i
	if i in mp : mp [ i ] += 1			      	i < n ;							    	if ( mp . containsKey ( i ) ) {				  f(f_filled(param0.get(i),param1.get(i)) == f_gold(
	else : mp [ i ] = 1				      	i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i 	  mp . put ( i , 1 ) ;					  param0.get(i),param1.get(i)))		   ^   requi
    for x in mp :					      	else mp . put ( a [ i ] , 1 ) ;				    	}							  red: String[]	  found: int[],Integer	 reason: act
	if mp [ x ] >= len ( a ) // 2 :			      	for ( Map . Entry < Integer , Integer > x : mp . entrySet ( 	else {							  ual and formal argument lists differ in length 1 e
	    return True					      	return false ;						    	  mp . put ( i , 1 ) ;					  rror
    return False					      }								    	}							  
							      								      }								  
							      								      for ( String s : mp . keySet ( ) ) {			  
							      								    	if ( mp . get ( s ) >= a . length / 2 ) {		  
							      								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	      CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	    CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	  CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING
--							      --							    --								  --
def calcMaxValue ( str ) :				      static int calcMaxValue ( String str ) {			    public static int calcMaxValue ( String str ) {		  success : None
    res = ord ( str [ 0 ] ) - 48			      	int res = str . charAt ( 0 ) - '0' ;			      int res = ( int ) str . charAt ( 0 ) - 48 ;		  
    for i in range ( 1 , len ( str ) ) :		      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if ( str [ i ] == '0' or str [ i ] == '1' or res < 2  	i < str . length ( ) ;					      i < str . length ( ) ;					  
	    res += ord ( str [ i ] ) - 48		      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( str . charAt ( i ) == '0' || str . charAt ( i ) == ' 	if ( ( str . charAt ( i ) == '0' ) || ( str . charAt ( i  
	    res *= ord ( str [ i ] ) - 48		      	  else res *= ( str . charAt ( i ) - '0' ) ;		    	  res += ( int ) str . charAt ( i ) - 48 ;		  
    return res						      	}							    	}							  
							      	return res ;						    	else {							  
							      }								    	  res *= ( int ) str . charAt ( i ) - 48 ;		  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	      NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	    NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	  NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT
--							      --							    --								  --
def sumEqualProduct ( a , n ) :				      static int sumEqualProduct ( int a [ ] , int n ) {	    static int sumEqualProduct ( int [ ] a , int n ) {		  error : NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQU
    zero = 0						      	int zero = 0 , two = 0 ;				      int zero = 0 ;						  AL_TO_PRODUCT.java:39: error: illegal character: '
    two = 0						      	for ( int i = 0 ;					      int two = 0 ;						  \'   int cnt = ( zero * ( zero - 1 ) ) / 2 + \ ;
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  					   ^ NUMBER_
	if a [ i ] == 0 :				      	i ++ ) {						      i < n ;							  OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT.j
	    zero += 1					      	  if ( a [ i ] == 0 ) {					      i ++ ) {							  ava:41: error: not a statement     ( two * ( two -
	if a [ i ] == 2 :				      	    zero ++ ;						    	if ( a [ i ] == 0 ) zero ++ ;				   1 ) ) / 2 ;				 ^ 2 errors
	    two += 1					      	  }							    	if ( a [ i ] == 2 ) two ++ ;				  
    cnt = ( zero * ( zero - 1 ) ) // 2 + \		      	  if ( a [ i ] == 2 ) {					      }								  
	( two * ( two - 1 ) ) // 2			      	    two ++ ;						      int cnt = ( zero * ( zero - 1 ) ) / 2 + \ ;		  
    return cnt						      	  }							      {								  
							      	}							    	( two * ( two - 1 ) ) / 2 ;				  
							      	int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 )   }								  
							      	return cnt ;						      return cnt ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES		      ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			    ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			  ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES
--							      --							    --								  --
def winner ( a , n , k ) :				      static int winner ( int a [ ] , int n , int k ) {		    public static int winner ( int [ ] a , int n , int k ) {	  error : ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES.j
    if k >= n - 1 :					      	if ( k >= n - 1 ) return n ;				      if ( k >= n - 1 ) return n ;				  ava:39: error: incomparable types: int and boolean
	return n					      	int best = 0 , times = 0 ;				      int best = 0 ;						  	 if ( i == true ) times = 1 ;		   ^
    best = 0						      	for ( int i = 0 ;					      int times = 0 ;						   1 error
    times = 0						      	i < n ;							      for ( int i = 0 ;						  
    for i in range ( n ) :				      	i ++ ) {						      i < n ;							  
	if a [ i ] > best :				      	  if ( a [ i ] > best ) {				      i ++ ) {							  
	    best = a [ i ]				      	    best = a [ i ] ;					    	if ( a [ i ] > best ) {					  
	    if i == True :				      	    if ( i == 1 ) times = 1 ;				    	  best = a [ i ] ;					  
		times = 1				      	  }							    	  if ( i == true ) times = 1 ;				  
	else :						      	  else times += 1 ;					    	}							  
	    times += 1					      	  if ( times >= k ) return best ;			    	else times ++ ;						  
	if times >= k :					      	}							    	if ( times >= k ) return best ;				  
	    return best					      	return best ;						      }								  
    return best						      }								      return best ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1
--							      --							    --								  --
def maxSumPairWithDifferenceLessThanK ( arr , N , k ) :	      static int maxSumPairWithDifferenceLessThanK ( int arr [ ] ,  public static int maxSumPairWithDifferenceLessThanK ( int [ ] error : Exception in thread "main" java.lang.Array
    maxSum = 0						      	int maxSum = 0 ;					      int maxSum = 0 ;						  IndexOutOfBoundsException: Index -1 out of bounds
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  for length 32 	at MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFE
    i = N - 1						      	for ( int i = N - 1 ;					      int i = N - 1 ;						  RENCE_1.f_filled(MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFER
    while ( i >= 0 ) :					      	i > 0 ;							      while ( ( i >= 0 ) && ( arr [ i ] - arr [ i - 1 ] ) < k ) { ENCE_1.java:33) 	at MAXIMUM_SUM_PAIRS_SPECIFIC_DIF
	if ( arr [ i ] - arr [ i - 1 ] < k ) :		      	-- i ) {						    	maxSum += arr [ i ] ;					  FERENCE_1.main(MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFEREN
	    maxSum += arr [ i ]				      	  if ( arr [ i ] - arr [ i - 1 ] < k ) {		    	maxSum += arr [ i - 1 ] ;				  CE_1.java:80)
	    maxSum += arr [ i - 1 ]			      	    maxSum += arr [ i ] ;				    	i -- ;							  
	    i -= 1					      	    maxSum += arr [ i - 1 ] ;				      }								  
	i -= 1						      	    -- i ;						      i -- ;							  
    return maxSum					      	  }							      return maxSum ;						  
							      	}							    }								  
							      	return maxSum ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1
--							      --							    --								  --
def breakSum ( n ) :					      static int breakSum ( int n ) {				    static int breakSum ( int n ) {				  success : None
    dp = [ 0 ] * ( n + 1 )				      	int dp [ ] = new int [ n + 1 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  
    dp [ 0 ] = 0					      	dp [ 0 ] = 0 ;						      dp [ 0 ] = 0 ;						  
    dp [ 1 ] = 1					      	dp [ 1 ] = 1 ;						      dp [ 1 ] = 1 ;						  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	dp [ i ] = max ( dp [ int ( i / 2 ) ] + dp [ int ( i  	i <= n ;						      i <= n ;							  
    return dp [ n ]					      	i ++ ) dp [ i ] = Math . max ( dp [ i / 2 ] + dp [ i / 3 ]    i ++ ) {							  
							      	return dp [ n ] ;					    	dp [ i ] = Math . max ( dp [ ( int ) i / 2 ] + dp [ ( int 
							      }								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING
--							      --							    --								  --
def twoWaySort ( arr , n ) :				      static void twoWaySort ( int arr [ ] , int n ) {		    public static void twoWaySort ( int [ ] arr , int n ) {	  success : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] & 1 ) :				      	i < n ;							      i != n ;							  
	    arr [ i ] *= - 1				      	i ++ ) if ( ( arr [ i ] & 1 ) != 0 ) arr [ i ] *= - 1 ;	      i ++ ) {							  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					    	if ( ( arr [ i ] & 1 ) != 0 ) {				  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					    	  arr [ i ] *= - 1 ;					  
	if ( arr [ i ] & 1 ) :				      	i < n ;							    	}							  
	    arr [ i ] *= - 1				      	i ++ ) if ( ( arr [ i ] & 1 ) != 0 ) arr [ i ] *= - 1 ;	      }								  
							      }								      Arrays . sort ( arr ) ;					  
							      								      for ( int i = 0 ;						  
							      								      i != n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( arr [ i ] & 1 ) != 0 ) {				  
							      								    	  arr [ i ] *= - 1 ;					  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1
--							      --							    --								  --
def getSingle ( arr , n ) :				      static int getSingle ( int arr [ ] , int n ) {		    public static int getSingle ( int [ ] arr , int n ) {	  script_not_found : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( 0 , INT_SIZE ) :			      	int x , sum ;						      for ( int i = 0 ;						  
	sm = 0						      	for ( int i = 0 ;					      i <= INT_SIZE ;						  
	x = ( 1 << i )					      	i < INT_SIZE ;						      i ++ ) {							  
	for j in range ( 0 , n ) :			      	i ++ ) {						    	int sm = 0 ;						  
	    if ( arr [ j ] & x ) :			      	  sum = 0 ;						    	int x = ( 1 << i ) ;					  
		sm = sm + 1				      	  x = ( 1 << i ) ;					    	for ( int j = 0 ;					  
	if ( sm % 3 ) :					      	  for ( int j = 0 ;					    	j <= n ;						  
	    result = result | x				      	  j < n ;						    	j ++ ) {						  
    return result					      	  j ++ ) {						    	  if ( ( arr [ j ] & x ) != 0 ) {			  
							      	    if ( ( arr [ j ] & x ) == 0 ) sum ++ ;		    	    sm = sm + 1 ;					  
							      	  }							    	  }							  
							      	  if ( ( sum % 3 ) == 0 ) result |= x ;			    	}							  
							      	}							    	if ( ( sm % 3 ) != 0 ) {				  
							      	return result ;						    	  result = result | x ;					  
							      }								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIAGONALLY_DOMINANT_MATRIX				      DIAGONALLY_DOMINANT_MATRIX				    DIAGONALLY_DOMINANT_MATRIX					  DIAGONALLY_DOMINANT_MATRIX
--							      --							    --								  --
def isDDM ( m , n ) :					      static boolean isDDM ( int m [ ] [ ] , int n ) {		    public static boolean isDDM ( int [ ] [ ] m , int n ) {	  error : Exception in thread "main" java.lang.Array
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  IndexOutOfBoundsException: Index 2 out of bounds f
	sum = 0						      	i < n ;							      i <= n ;							  or length 2 	at DIAGONALLY_DOMINANT_MATRIX.f_fille
	for j in range ( 0 , n ) :			      	i ++ ) {						      i ++ ) {							  d(DIAGONALLY_DOMINANT_MATRIX.java:36) 	at DIAGONAL
	    sum = sum + abs ( m [ i ] [ j ] )		      	  int sum = 0 ;						    	int sum = 0 ;						  LY_DOMINANT_MATRIX.main(DIAGONALLY_DOMINANT_MATRIX
	sum = sum - abs ( m [ i ] [ i ] )		      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  .java:73)
	if ( abs ( m [ i ] [ i ] ) < sum ) :		      	  j < n ;						    	j <= n ;						  
	    return False				      	  j ++ ) sum += Math . abs ( m [ i ] [ j ] ) ;		    	j ++ ) {						  
    return True						      	  sum -= Math . abs ( m [ i ] [ i ] ) ;			    	  sum = sum + Math . abs ( m [ i ] [ j ] ) ;		  
							      	  if ( Math . abs ( m [ i ] [ i ] ) < sum ) return false ;  	}							  
							      	}							    	sum = sum - Math . abs ( m [ i ] [ i ] ) ;		  
							      	return true ;						    	if ( ( Math . abs ( m [ i ] [ i ] ) < sum ) ) {		  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
def countNum ( arr , n ) :				      static int countNum ( int [ ] arr , int n ) {		    static int countNum ( int [ ] arr , int n ) {		  failure : #Results:4, 10
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr  	i < n - 1 ;						      i <= n - 1 ;						  
	    count += arr [ i + 1 ] - arr [ i ] - 1	      	i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr    i ++ ) {							  
    return count					      	return count ;						    	if ( ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i 
							      }								    	  count += arr [ i + 1 ] - arr [ i ] - 1 ;		  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
def printSubsequences ( arr , n ) :			      static void printSubsequences ( int n ) {			    static void printSubsequences ( int [ ] arr , int n ) {	  script_not_found : None
    opsize = math.pow ( 2 , n )				      	int opsize = ( int ) Math . pow ( 2 , n ) ;		      double opsize = Math . pow ( 2 , n ) ;			  
    for counter in range ( 1 , ( int ) ( opsize ) ) :	      	for ( int counter = 1 ;					      for ( int counter = 1 ;					  
	for j in range ( 0 , n ) :			      	counter < opsize ;					      counter < ( int ) opsize ;				  
	    if ( counter & ( 1 << j ) ) :		      	counter ++ ) {						      counter ++ ) {						  
		print ( arr [ j ] , end = " " )		      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	print ( )					      	  j < n ;						    	j <= n ;						  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    if ( BigInteger . valueOf ( counter ) . testBit ( j ) ) 	  if ( ( counter & ( 1 << j ) ) != 0 ) {		  
							      	  }							    	    System . out . print ( arr [ j ] + " " ) ;		  
							      	  System . out . println ( ) ;				    	  }							  
							      	}							    	}							  
							      }								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_3				      FIND_REPETITIVE_ELEMENT_1_N_1_3				    FIND_REPETITIVE_ELEMENT_1_N_1_3				  FIND_REPETITIVE_ELEMENT_1_N_1_3
--							      --							    --								  --
def findRepeating ( arr , n ) :				      static int findRepeating ( int arr [ ] , int n ) {	    static int findRepeating ( int [ ] arr , int n ) {		  script_not_found : None
    missingElement = 0					      	int missingElement = 0 ;				      int missingElement = 0 ;					  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	element = arr [ abs ( arr [ i ] ) ]		      	i < n ;							      i <= n ;							  
	if ( element < 0 ) :				      	i ++ ) {						      i ++ ) {							  
	    missingElement = arr [ i ]			      	  int element = arr [ Math . abs ( arr [ i ] ) ] ;	    	int element = arr [ Math . abs ( arr [ i ] ) ] ;	  
	    break					      	  if ( element < 0 ) {					    	if ( ( element < 0 ) ) {				  
	arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) 	    missingElement = arr [ i ] ;			    	  missingElement = arr [ i ] ;				  
    return abs ( missingElement )			      	    break ;						    	  break ;						  
							      	  }							    	}							  
							      	  arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( a 	arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( a 
							      	}							      }								  
							      	return Math . abs ( missingElement ) ;			      return Math . abs ( missingElement ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BALANCED_BINARY_TREES_HEIGHT_H			      COUNT_BALANCED_BINARY_TREES_HEIGHT_H			    COUNT_BALANCED_BINARY_TREES_HEIGHT_H			  COUNT_BALANCED_BINARY_TREES_HEIGHT_H
--							      --							    --								  --
def countBT ( h ) :					      public static long countBT ( int h ) {			    public static int countBT ( int h ) {			  script_not_found : None
    MOD = 1000000007					      	long [ ] dp = new long [ h + 1 ] ;			      final int MOD = 1000000007 ;				  
    dp = [ 0 for i in range ( h + 1 ) ]			      	dp [ 0 ] = 1 ;						      int [ ] dp = new int [ h + 1 ] ;				  
    dp [ 0 ] = 1					      	dp [ 1 ] = 1 ;						      for ( int i = 0 ;						  
    dp [ 1 ] = 1					      	for ( int i = 2 ;					      i < dp . length ;						  
    for i in range ( 2 , h + 1 ) :			      	i <= h ;						      i ++ ) dp [ i ] = 0 ;					  
	dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) %  	++ i ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) %   dp [ 0 ] = 1 ;						  
    return dp [ h ]					      	return dp [ h ] ;					      dp [ 1 ] = 1 ;						  
							      }								      for ( int i = 2 ;						  
							      								      i <= h ;							  
							      								      i ++ ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % 
							      								      return dp [ h ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP	  GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP
--							      --							    --								  --
def isMinHeap ( level , n ) :				      static boolean isMinHeap ( int [ ] level ) {		    static boolean isMinHeap ( int [ ] level , int n ) {	  script_not_found : None
    for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :	      	int n = level . length - 1 ;				      for ( int i = ( int ) ( n / 2 ) - 1 ;			  
	if level [ i ] > level [ 2 * i + 1 ] :		      	for ( int i = ( n / 2 - 1 ) ;				      i >= 0 ;							  
	    return False				      	i >= 0 ;						      i -- ) {							  
	if 2 * i + 2 < n :				      	i -- ) {						    	if ( level [ i ] > level [ 2 * i + 1 ] ) {		  
	    if level [ i ] > level [ 2 * i + 2 ] :	      	  if ( level [ i ] > level [ 2 * i + 1 ] ) return false ;   	  return false ;					  
		return False				      	  if ( 2 * i + 2 < n ) {				    	}							  
    return True						      	    if ( level [ i ] > level [ 2 * i + 2 ] ) return false ; 	if ( 2 * i + 2 < n ) {					  
							      	  }							    	  if ( level [ i ] > level [ 2 * i + 2 ] ) {		  
							      	}							    	    return false ;					  
							      	return true ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSEQUENCE_GCD_GREATER_1			      LARGEST_SUBSEQUENCE_GCD_GREATER_1				    LARGEST_SUBSEQUENCE_GCD_GREATER_1				  LARGEST_SUBSEQUENCE_GCD_GREATER_1
--							      --							    --								  --
def largestGCDSubsequence ( arr , n ) :			      static int largestGCDSubsequence ( int arr [ ] , int n ) {    public static int largestGCDSubsequence ( int [ ] arr , int n failure : #Results:7, 10
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    maxele = max ( arr )				      	int maxele = Arrays . stream ( arr ) . max ( ) . getAsInt (   int maxele = Math . max ( arr . length , arr [ 0 ] ) ;	  
    for i in range ( 2 , maxele + 1 ) :			      	;							      for ( int i = 2 ;						  
	count = 0					      	for ( int i = 2 ;					      i <= maxele ;						  
	for j in range ( n ) :				      	i <= maxele ;						      i ++ ) {							  
	    if ( arr [ j ] % i == 0 ) :			      	++ i ) {						    	int count = 0 ;						  
		count += 1				      	  int count = 0 ;					    	for ( int j = 0 ;					  
	ans = max ( ans , count )			      	  for ( int j = 0 ;					    	j < n ;							  
    return ans						      	  j < n ;						    	j ++ ) {						  
							      	  ++ j ) {						    	  if ( ( arr [ j ] % i ) == 0 ) {			  
							      	    if ( arr [ j ] % i == 0 ) ++ count ;		    	    count ++ ;						  
							      	  }							    	  }							  
							      	  ans = Math . max ( ans , count ) ;			    	}							  
							      	}							    	ans = Math . max ( ans , count ) ;			  
							      	return ans ;						      }								  
							      }								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PATTERNS_101_GIVEN_STRING				      FIND_PATTERNS_101_GIVEN_STRING				    FIND_PATTERNS_101_GIVEN_STRING				  FIND_PATTERNS_101_GIVEN_STRING
--							      --							    --								  --
def patternCount ( str ) :				      static int patternCount ( String str ) {			    public static int patternCount ( String str ) {		  script_not_found : None
    last = str [ 0 ]					      	char last = str . charAt ( 0 ) ;			      char last = str . charAt ( 0 ) ;				  
    i = 1 counter = 0					      	int i = 1 , counter = 0 ;				      int i = 1 ;						  
    while ( i < len ( str ) ) :				      	while ( i < str . length ( ) ) {			      int counter = 0 ;						  
	if ( str [ i ] == '0' and last == '1' ) :	      	  if ( str . charAt ( i ) == '0' && last == '1' ) {	      while ( ( i < str . length ( ) ) ) {			  
	    while ( str [ i ] == '0' ) :		      	    while ( str . charAt ( i ) == '0' ) i ++ ;		    	if ( ( str . charAt ( i ) == '0' ) && ( last == '1' ) ) { 
		i += 1					      	    if ( str . charAt ( i ) == '1' ) counter ++ ;	    	  while ( ( str . charAt ( i ) == '0' ) ) {		  
		if ( str [ i ] == '1' ) :		      	  }							    	    i ++ ;						  
		    counter += 1			      	  last = str . charAt ( i ) ;				    	    if ( ( str . charAt ( i ) == '1' ) ) counter ++ ;	  
	last = str [ i ]				      	  i ++ ;						    	  }							  
	i += 1						      	}							    	}							  
    return counter					      	return counter ;					    	last = str . charAt ( i ) ;				  
							      }								    	i ++ ;							  
							      								      }								  
							      								      return counter ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_ FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_ FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_ FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_
--							      --							    --								  --
def countSol ( coeff , n , rhs ) :			      static int countSol ( int coeff [ ] , int n , int rhs ) {	    static int countSol ( int [ ] coeff , int n , int rhs ) {	  script_not_found : None
    dp = [ 0 for i in range ( rhs + 1 ) ]		      	int dp [ ] = new int [ rhs + 1 ] ;			      int [ ] dp = new int [ rhs + 1 ] ;			  
    dp [ 0 ] = 1					      	Arrays . fill ( dp , 0 ) ;				      dp [ 0 ] = 0 ;						  
    for i in range ( n ) :				      	dp [ 0 ] = 1 ;						      for ( int i = 0 ;						  
	for j in range ( coeff [ i ] , rhs + 1 ) :	      	for ( int i = 0 ;					      i < n ;							  
	    dp [ j ] += dp [ j - coeff [ i ] ]		      	i < n ;							      i ++ ) {							  
    return dp [ rhs ]					      	i ++ ) for ( int j = coeff [ i ] ;			    	for ( int j = coeff [ i ] ;				  
							      	j <= rhs ;						    	j <= rhs ;						  
							      	j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;		    	j ++ ) {						  
							      	return dp [ rhs ] ;					    	  dp [ j ] += dp [ j - coeff [ i ] ] ;			  
							      }								    	}							  
							      								      }								  
							      								      return dp [ rhs ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES			  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES
--							      --							    --								  --
def fib ( n ) :						      static void fib ( int n ) {				    public static void fib ( int n ) {				  script_not_found : None
    a = 0						      	int a = 0 , b = 1 , c ;					      int a = 0 ;						  
    b = 1						      	if ( n >= 0 ) System . out . print ( a + " " ) ;	      int b = 1 ;						  
    if ( n >= 0 ) :					      	if ( n >= 1 ) System . out . print ( b + " " ) ;	      if ( ( n >= 0 ) && ( n >= 1 ) ) {				  
	print ( a , end = ' ' )				      	for ( int i = 2 ;					    	System . out . print ( a ) ;				  
    if ( n >= 1 ) :					      	i <= n ;						      }								  
	print ( b , end = ' ' )				      	i ++ ) {						      if ( ( n >= 1 ) && ( n >= 2 ) ) {				  
    for i in range ( 2 , n + 1 ) :			      	  c = a + b ;						    	System . out . print ( b ) ;				  
	c = a + b					      	  System . out . print ( c + " " ) ;			      }								  
	print ( c , end = ' ' )				      	  a = b ;						      for ( int i = 2 ;						  
	a = b						      	  b = c ;						      i <= n ;							  
	b = c						      	}							      i ++ ) {							  
							      }								    	int c = a + b ;						  
							      								    	System . out . print ( c ) ;				  
							      								    	a = b ;							  
							      								    	b = c ;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER
--							      --							    --								  --
def flipsPossible ( a , n ) :				      static boolean flipsPossible ( int [ ] a , int n ) {	    public static boolean flipsPossible ( int [ ] a , int n ) {	  success : None
    count_odd = 0 count_even = 0			      	int count_odd = 0 , count_even = 0 ;			      int countOdd = 0 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      int countEven = 0 ;					  
	if ( a [ i ] & 1 ) :				      	i < n ;							      for ( int i = 0 ;						  
	    count_odd += 1				      	i ++ ) {						      i < n ;							  
	else :						      	  if ( ( a [ i ] & 1 ) == 1 ) count_odd ++ ;		      i ++ ) {							  
	    count_even += 1				      	  else count_even ++ ;					    	if ( ( a [ i ] & 1 ) != 0 ) {				  
    if ( count_odd % 2 and count_even % 2 ) :		      	}							    	  countOdd ++ ;						  
	return False					      	if ( count_odd % 2 == 1 && count_even % 2 == 1 ) return fal 	}							  
    else :						      	else return true ;					    	else {							  
	return True					      }								    	  countEven ++ ;					  
							      								    	}							  
							      								      }								  
							      								      if ( ( countOdd % 2 != 0 ) && ( countEven % 2 != 0 ) ) {	  
							      								    	return false ;						  
							      								      }								  
							      								      else {							  
							      								    	return true ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_ROOT_NUMBER					      N_TH_ROOT_NUMBER						    N_TH_ROOT_NUMBER						  N_TH_ROOT_NUMBER
--							      --							    --								  --
def nthRoot ( A , N ) :					      static double nthRoot ( int A , int N ) {			    public static double nthRoot ( double A , int N ) {		  error : N_TH_ROOT_NUMBER.java:28: error: incompati
    xPre = random.randint ( 1 , 101 ) % 10		      	double xPre = Math . random ( ) % 10 ;			      int xPre = Math . random ( ) % 101 ;			  ble types: possible lossy conversion from double t
    eps = 0.001						      	double eps = 0.001 ;					      double eps = 0.001 ;					  o int	  int xPre = Math . random ( ) % 101 ;
    delX = 2147483647					      	double delX = 2147483647 ;				      int delX = 2147483647 ;					  			    ^ N_TH_ROOT_NUMBER.java:
    xK = 0.0						      	double xK = 0.0 ;					      double xK = 0.0 ;						  34: error: incompatible types: possible lossy conv
    while ( delX > eps ) :				      	while ( delX > eps ) {					      while ( ( delX ) > eps ) {				  ersion from double to int	delX = Math . abs (
	xK = ( ( N - 1.0 ) * xPre + A / pow ( xPre , N - 1 )  	  xK = ( ( N - 1.0 ) * xPre + ( double ) A / Math . pow ( x 	xK = ( ( N - 1.0 ) * xPre + A / Math . pow ( xPre , N - 1 xK - xPre ) ;			      ^ N_TH_ROOT_NU
	delX = abs ( xK - xPre )			      	  delX = Math . abs ( xK - xPre ) ;			    	delX = Math . abs ( xK - xPre ) ;			  MBER.java:35: error: incompatible types: possible
	xPre = xK					      	  xPre = xK ;						    	xPre = xK ;						  lossy conversion from double to int	  xPre = xK
    return xK						      	}							      }								  ;	       ^ 3 errors
							      	return xK ;						      return xK ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY
--							      --							    --								  --
def countPairs ( arr , n ) :				      static int countPairs ( int arr [ ] , int n ) {		    static int countPairs ( int [ ] arr , int n ) {		  failure : #Results:4, 10
    result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    product = arr [ i ] * arr [ j ] ;		      	i ++ ) {						      i ++ ) {							  
	    for k in range ( 0 , n ) :			      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
		if ( arr [ k ] == product ) :		      	  j < n ;						    	j <= n ;						  
		    result = result + 1 ;		      	  j ++ ) {						    	j ++ ) {						  
		    break ;				      	    int product = arr [ i ] * arr [ j ] ;		    	  int product = arr [ i ] * arr [ j ] ;			  
    return result ;					      	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
							      	    k < n ;						    	  k <= n ;						  
							      	    k ++ ) {						    	  k ++ ) {						  
							      	      if ( arr [ k ] == product ) {			    	    if ( ( arr [ k ] == product ) ) {			  
							      		result ++ ;					    	      result = result + 1 ;				  
							      		break ;						    	      break ;						  
							      	      }							    	    }							  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return result ;						      return result ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_23_45_67_89_UPTO_N_TERMS			      SUM_SERIES_23_45_67_89_UPTO_N_TERMS			    SUM_SERIES_23_45_67_89_UPTO_N_TERMS				  SUM_SERIES_23_45_67_89_UPTO_N_TERMS
--							      --							    --								  --
def seriesSum ( n ) :					      static double seriesSum ( int n ) {			    public static double seriesSum ( int n ) {			  failure : #Results:0, 10
    i = 1						      	int i = 1 ;						      int i = 1 ;						  
    res = 0.0						      	double res = 0.0 ;					      double res = 0.0 ;					  
    sign = True						      	boolean sign = true ;					      boolean sign = true ;					  
    while ( n > 0 ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) ) {					  
	n = n - 1					      	  n -- ;						    	n = n - 1 ;						  
	if ( sign ) :					      	  if ( sign ) {						    	if ( ( sign ) ) {					  
	    sign = False				      	    sign = ! sign ;					    	  sign = false ;					  
	    res = res + ( i + 1 ) / ( i + 2 )		      	    res = res + ( double ) ++ i / ++ i ;		    	  res = res + ( i + 1 ) / ( i + 2 ) ;			  
	    i = i + 2					      	  }							    	  i = i + 2 ;						  
	else :						      	  else {						    	}							  
	    sign = True					      	    sign = ! sign ;					    	else {							  
	    res = res - ( i + 1 ) / ( i + 2 )		      	    res = res - ( double ) ++ i / ++ i ;		    	  sign = true ;						  
	    i = i + 2					      	  }							    	  res = res - ( i + 1 ) / ( i + 2 ) ;			  
    return res						      	}							    	  i = i + 2 ;						  
							      	return res ;						    	}							  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_ELEMENT_ROW_MATRIX				      FIND_MAXIMUM_ELEMENT_ROW_MATRIX				    FIND_MAXIMUM_ELEMENT_ROW_MATRIX				  FIND_MAXIMUM_ELEMENT_ROW_MATRIX
--							      --							    --								  --
def maxelement ( arr ) :				      public static void maxelement ( int no_of_rows , int [ ] [ ]  public static void maxelement ( int [ ] [ ] arr ) {		  script_not_found : None
    no_of_rows = len ( arr )				      	int i = 0 ;						      int noOfRows = arr . length ;				  
    no_of_column = len ( arr [ 0 ] )			      	int max = 0 ;						      int noOfColumn = arr [ 0 ] . length ;			  
    for i in range ( no_of_rows ) :			      	int [ ] result = new int [ no_of_rows ] ;		      for ( int i = 0 ;						  
	max1 = 0					      	while ( i < no_of_rows ) {				      i < noOfRows ;						  
	for j in range ( no_of_column ) :		      	  for ( int j = 0 ;					      i ++ ) {							  
	    if arr [ i ] [ j ] > max1 :			      	  j < arr [ i ] . length ;				    	int max1 = 0 ;						  
		max1 = arr [ i ] [ j ]			      	  j ++ ) {						    	for ( int j = 0 ;					  
	print ( max1 )					      	    if ( arr [ i ] [ j ] > max ) {			    	j < noOfColumn ;					  
							      	      max = arr [ i ] [ j ] ;				    	j ++ ) {						  
							      	    }							    	  if ( arr [ i ] [ j ] > max1 ) {			  
							      	  }							    	    max1 = arr [ i ] [ j ] ;				  
							      	  result [ i ] = max ;					    	  }							  
							      	  max = 0 ;						    	}							  
							      	  i ++ ;						    	System . out . println ( max1 ) ;			  
							      	}							      }								  
							      	printArray ( result ) ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_X_Y_SATISFYING_AX_N				      FIND_X_Y_SATISFYING_AX_N					    FIND_X_Y_SATISFYING_AX_N					  FIND_X_Y_SATISFYING_AX_N
--							      --							    --								  --
def solution ( a , b , n ) :				      static void solution ( int a , int b , int n ) {		    public static int solution ( int a , int b , int n ) {	  script_not_found : None
    i = 0						      	for ( int i = 0 ;					      int i = 0 ;						  
    while i * a <= n :					      	i * a <= n ;						      while ( i * a <= n ) {					  
	if ( n - ( i * a ) ) % b == 0 :			      	i ++ ) {						    	if ( ( n - ( i * a ) ) % b == 0 ) {			  
	    print ( "x = " , i , ", y = " , int ( ( n - ( i * 	  if ( ( n - ( i * a ) ) % b == 0 ) {			    	  System . out . println ( "x = " + i + ", y = " + ( int  
	    return 0					      	    System . out . println ( "x = " + i + ", y = " + ( n -  	  return 0 ;						  
	i = i + 1					      	    return ;						    	}							  
    print ( "No solution" )				      	  }							    	i = i + 1 ;						  
							      	}							      }								  
							      	System . out . println ( "No solution" ) ;		      System . out . println ( "No solution" ) ;		  
							      }								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    static int findSum ( int n ) {				  success : None
    ans = 0 temp = 0					      	int ans = 0 , temp = 0 , num ;				      int ans = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      int temp = 0 ;						  
	if temp < n :					      	i <= n && temp < n ;					      for ( int i = 1 ;						  
	    temp = i - 1				      	i ++ ) {						      i <= n ;							  
	    num = 1					      	  temp = i - 1 ;					      i ++ ) {							  
	    while temp < n :				      	  num = 1 ;						    	if ( temp < n ) {					  
		if temp + i <= n :			      	  while ( temp < n ) {					    	  temp = i - 1 ;					  
		    ans += i * num			      	    if ( temp + i <= n ) ans += ( i * num ) ;		    	  int num = 1 ;						  
		else :					      	    else ans += ( ( n - temp ) * num ) ;		    	  while ( temp < n ) {					  
		    ans += ( n - temp ) * num		      	    temp += i ;						    	    if ( temp + i <= n ) {				  
		temp += i				      	    num ++ ;						    	      ans += i * num ;					  
		num += 1				      	  }							    	    }							  
    return ans						      	}							    	    else {						  
							      	return ans ;						    	      ans += ( n - temp ) * num ;			  
							      }								    	    }							  
							      								    	    temp += i ;						  
							      								    	    num ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1	  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1
--							      --							    --								  --
def isPrime ( n ) :					      static boolean isPrime ( int n ) {			    public static boolean isPrime ( int n ) {			  success : None
    if ( n <= 1 ) :					      	if ( n <= 1 ) return false ;				      if ( ( n <= 1 ) ) {					  
	return False					      	if ( n <= 3 ) return true ;				    	return false ;						  
    if ( n <= 3 ) :					      	if ( n % 2 == 0 || n % 3 == 0 ) return false ;		      }								  
	return True					      	for ( int i = 5 ;					      if ( ( n <= 3 ) ) {					  
    if ( n % 2 == 0 or n % 3 == 0 ) :			      	i * i <= n ;						    	return true ;						  
	return False					      	i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return    }								  
    i = 5						      	return true ;						      if ( ( n % 2 ) == 0 || ( n % 3 ) == 0 ) {			  
    while ( i * i <= n ) :				      }								    	return false ;						  
	if ( n % i == 0 or n % ( i + 2 ) == 0 ) :	      								      }								  
	    return False				      								      int i = 5 ;						  
	i = i + 6					      								      while ( ( i * i <= n ) ) {				  
    return True						      								    	if ( ( n % i ) == 0 || ( n % ( i + 2 ) ) == 0 ) {	  
							      								    	  return false ;					  
							      								    	}							  
							      								    	i = i + 6 ;						  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_FUNCTIONS					      RECURSIVE_FUNCTIONS					    RECURSIVE_FUNCTIONS						  RECURSIVE_FUNCTIONS
--							      --							    --								  --
def tower ( n , sourcePole , destinationPole , auxiliaryPole  static void tower ( int n , char sourcePole , char destinatio public static void tower ( int n , String sourcePole , String script_not_found : None
    if ( 0 == n ) :					      	if ( 0 == n ) return ;					      if ( ( 0 == n ) ) return ;				  
	return						      	tower ( n - 1 , sourcePole , auxiliaryPole , destinationPol   tower ( n - 1 , sourcePole , auxiliaryPole , destinationPol 
    tower ( n - 1 , sourcePole , auxiliaryPole , destinationP 	System . out . printf ( "Move the disk %d from %c to %c\n"    System . out . println ( "Move the disk" + sourcePole + "fr 
    print ( "Move the disk" , sourcePole , "from" , sourcePol 	tower ( n - 1 , auxiliaryPole , destinationPole , sourcePol   tower ( n - 1 , auxiliaryPole , destinationPole , sourcePol 
    tower ( n - 1 , auxiliaryPole , destinationPole , sourceP }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			      CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			    CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			  CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT
--							      --							    --								  --
def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :		      static int circle ( int x1 , int y1 , int x2 , int y2 , int r public static int circle ( int x1 , int y1 , int x2 , int y2  success : None
    distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - 	int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1   double distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( 
    radSumSq = ( r1 + r2 ) * ( r1 + r2 )		      	int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		      double radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		  
    if ( distSq == radSumSq ) :				      	if ( distSq == radSumSq ) return 1 ;			      if ( ( distSq == radSumSq ) ) {				  
	return 1					      	else if ( distSq > radSumSq ) return - 1 ;		    	return 1 ;						  
    elif ( distSq > radSumSq ) :			      	else return 0 ;						      }								  
	return - 1					      }								      else if ( ( distSq > radSumSq ) ) {			  
    else :						      								    	return - 1 ;						  
	return 0					      								      }								  
							      								      else {							  
							      								    	return 0 ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		      NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		    NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		  NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER
--							      --							    --								  --
def minimumBox ( arr , n ) :				      static int minimumBox ( int [ ] arr , int n ) {		    public static int minimumBox ( int [ ] arr , int n ) {	  error : NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_AN
    q = collections.deque ( [ ] )			      	Queue < Integer > q = new LinkedList < > ( ) ;		      PriorityQueue < Integer > q = new PriorityQueue < > ( ) ;	  OTHER.java:35: error: cannot find symbol     int n
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  ow = q . get ( 0 ) ;		       ^   symbol:
    q.append ( arr [ 0 ] )				      	q . add ( arr [ 0 ] ) ;					      q . add ( arr [ 0 ] ) ;					   method get(int)   location: variable q of type Pr
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  iorityQueue<Integer> 1 error
	now = q [ 0 ]					      	i < n ;							      i < n ;							  
	if ( arr [ i ] >= 2 * now ) :			      	i ++ ) {						      i ++ ) {							  
	    q.popleft ( )				      	  int now = q . element ( ) ;				    	int now = q . get ( 0 ) ;				  
	q.append ( arr [ i ] )				      	  if ( arr [ i ] >= 2 * now ) q . remove ( ) ;		    	if ( ( arr [ i ] >= 2 * now ) ) {			  
    return len ( q )					      	  q . add ( arr [ i ] ) ;				    	  q . remove ( 0 ) ;					  
							      	}							    	}							  
							      	return q . size ( ) ;					    	q . add ( arr [ i ] ) ;					  
							      }								      }								  
							      								      return q . size ( ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1
--							      --							    --								  --
def fib ( n ) :						      static void fib ( int n ) {				    public static void fib ( int n ) {				  script_not_found : None
    a = 0						      	int a = 0 , b = 1 ;					      int a = 0 ;						  
    b = 1						      	if ( n >= 0 ) System . out . print ( a + " " ) ;	      int b = 1 ;						  
    if ( n >= 0 ) :					      	if ( n >= 1 ) System . out . print ( b + " " ) ;	      if ( ( n >= 0 ) && ( n >= 1 ) ) {				  
	print ( a , end = ' ' )				      	for ( int i = 2 ;					    	System . out . print ( a ) ;				  
    if ( n >= 1 ) :					      	i <= n ;						      }								  
	print ( b , end = ' ' )				      	i ++ ) {						      if ( ( n >= 1 ) && ( n >= 2 ) ) {				  
    for i in range ( 2 , n + 1 ) :			      	  System . out . print ( a + b + " " ) ;		    	System . out . print ( b ) ;				  
	print ( a + b , end = ' ' )			      	  b = a + b ;						      }								  
	b = a + b					      	  a = b - a ;						      for ( int i = 2 ;						  
	a = b - a					      	}							      i <= n ;							  
							      }								      i ++ ) {							  
							      								    	System . out . print ( a + b ) ;			  
							      								    	b = a + b ;						  
							      								    	a = b - a ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K_1			      COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				    COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				  COUNT_PAIRS_DIFFERENCE_EQUAL_K_1
--							      --							    --								  --
def countPairsWithDiffK ( arr , n , k ) :		      static int countPairsWithDiffK ( int arr [ ] , int n , int k  static int countPairsWithDiffK ( int [ ] arr , int n , int k  success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    l = 0						      	int l = 0 ;						      int l = 0 ;						  
    r = 0						      	int r = 0 ;						      int r = 0 ;						  
    while r < n :					      	while ( r < n ) {					      while ( r < n ) {						  
	if arr [ r ] - arr [ l ] == k :			      	  if ( arr [ r ] - arr [ l ] == k ) {			    	if ( arr [ r ] - arr [ l ] == k ) {			  
	    count += 1					      	    count ++ ;						    	  count ++ ;						  
	    l += 1					      	    l ++ ;						    	  l ++ ;						  
	    r += 1					      	    r ++ ;						    	  r ++ ;						  
	elif arr [ r ] - arr [ l ] > k :		      	  }							    	}							  
	    l += 1					      	  else if ( arr [ r ] - arr [ l ] > k ) l ++ ;		    	else if ( arr [ r ] - arr [ l ] > k ) {			  
	else :						      	  else r ++ ;						    	  l ++ ;						  
	    r += 1					      	}							    	}							  
    return count					      	return count ;						    	else {							  
							      }								    	  r ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2_1				      SORT_ARRAY_WAVE_FORM_2_1					    SORT_ARRAY_WAVE_FORM_2_1					  SORT_ARRAY_WAVE_FORM_2_1
--							      --							    --								  --
def sortInWave ( arr , n ) :				      void sortInWave ( int arr [ ] , int n ) {			    static void sortInWave ( int [ ] arr , int n ) {		  script_not_found : None
    for i in range ( 0 , n , 2 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :	      	i < n ;							      i < n ;							  
	    arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ 	i += 2 ) {						      i += 2 ) {						  
	if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :      	  if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( arr , i  	if ( ( i > 0 ) && ( arr [ i ] < arr [ i - 1 ] ) ) {	  
	    arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ 	  if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( arr  	  arr [ i ] = arr [ i - 1 ] ;				  
							      	}							    	}							  
							      }								    	if ( ( i < n - 1 ) && ( arr [ i ] < arr [ i + 1 ] ) ) {	  
							      								    	  arr [ i ] = arr [ i + 1 ] ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE				      LONGEST_COMMON_SUBSEQUENCE				    LONGEST_COMMON_SUBSEQUENCE					  LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
def lcs ( X , Y , m , n ) :				      int lcs ( char [ ] X , char [ ] Y , int m , int n ) {	    public static int lcs ( int [ ] X , int [ ] Y , int m , int n script_not_found : None
    if m == 0 or n == 0 :				      	if ( m == 0 || n == 0 ) return 0 ;			      if ( m == 0 || n == 0 ) {					  
	return 0 ;					      	if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,  	return 0 ;						  
    elif X [ m - 1 ] == Y [ n - 1 ] :			      	else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y ,   }								  
	return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	      }								      else if ( X [ m - 1 ] == Y [ n - 1 ] ) {			  
    else :						      								    	return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;		  
	return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  								      }								  
							      								      else {							  
							      								    	return Math . max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS	  REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS
--							      --							    --								  --
def psuedoBinary ( n ) :				      public static void psuedoBinary ( int n ) {		    public static void psuedoBinary ( int n ) {			  script_not_found : None
    while ( n > 0 ) :					      	while ( n != 0 ) {					      while ( ( n > 0 ) ) {					  
	temp = n					      	  int temp = n , m = 0 , p = 1 ;			    	int temp = n ;						  
	m = 0						      	  while ( temp != 0 ) {					    	int m = 0 ;						  
	p = 1						      	    int rem = temp % 10 ;				    	int p = 1 ;						  
	while ( temp ) :				      	    temp = temp / 10 ;					    	while ( ( temp ) != 0 ) {				  
	    rem = temp % 10				      	    if ( rem != 0 ) m += p ;				    	  int rem = temp % 10 ;					  
	    temp = int ( temp / 10 )			      	    p *= 10 ;						    	  temp = ( int ) ( temp / 10 ) ;			  
	    if ( rem != 0 ) :				      	  }							    	  if ( ( rem != 0 ) ) {					  
		m += p					      	  System . out . print ( m + " " ) ;			    	    m += p ;						  
	    p *= 10					      	  n = n - m ;						    	  }							  
	print ( m , end = " " )				      	}							    	  p *= 10 ;						  
	n = n - m					      	System . out . println ( " " ) ;			    	}							  
							      }								    	System . out . print ( m + " " ) ;			  
							      								    	n = n - m ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT_1					      NON_REPEATING_ELEMENT_1					    NON_REPEATING_ELEMENT_1					  NON_REPEATING_ELEMENT_1
--							      --							    --								  --
def firstNonRepeating ( arr , n ) :			      static int firstNonRepeating ( int arr [ ] , int n ) {	    static int firstNonRepeating ( int [ ] arr , int n ) {	  failure : #Results:7, 10
    mp = defaultdict ( lambda : 0 )			      	Map < Integer , Integer > m = new HashMap < > ( ) ;	      Map < Integer , Integer > mp = new TreeMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	mp [ arr [ i ] ] += 1				      	i < n ;							      i < n ;							  
    for i in range ( n ) :				      	i ++ ) {						      i ++ ) {							  
	if mp [ arr [ i ] ] == 1 :			      	  if ( m . containsKey ( arr [ i ] ) ) {		    	mp . put ( arr [ i ] , 1 ) ;				  
	    return arr [ i ]				      	    m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ;	      }								  
    return - 1						      	  }							      for ( int i = 0 ;						  
							      	  else {						      i < n ;							  
							      	    m . put ( arr [ i ] , 1 ) ;				      i ++ ) {							  
							      	  }							    	if ( mp . get ( arr [ i ] ) == 1 ) {			  
							      	}							    	  return arr [ i ] ;					  
							      	for ( int i = 0 ;					    	}							  
							      	i < n ;							      }								  
							      	i ++ ) if ( m . get ( arr [ i ] ) == 1 ) return arr [ i ] ;   return - 1 ;						  
							      	return - 1 ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1
--							      --							    --								  --
def countPairs ( str1 ) :				      static int countPairs ( String str ) {			    static int countPairs ( String str1 ) {			  script_not_found : None
    result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
    n = len ( str1 )					      	int n = str . length ( ) ;				      int n = str1 . length ( ) ;				  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 1 , MAX_CHAR + 1 ) :		      	i < n ;							      i <= n ;							  
	    if ( ( i + j ) < n ) :			      	i ++ ) for ( int j = 1 ;				      i ++ ) {							  
		if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( s 	( i + j ) < n && j <= MAX_CHAR ;			    	for ( int j = 1 ;					  
		    result += 1 ;			      	j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . c 	j <= MAX_CHAR ;						  
    return result					      	return result ;						    	j ++ ) {						  
							      }								    	  if ( ( ( i + j ) < n ) ) {				  
							      								    	    if ( ( ( Math . abs ( ( int ) str1 . charAt ( i + j ) 
							      								    	      result ++ ;					  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		      FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		    FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		  FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S
--							      --							    --								  --
def findMax ( arr ) :					      static void findMax ( int arr [ ] [ ] ) {			    static void findMax ( int [ ] [ ] arr ) {			  script_not_found : None
    row = 0						      	int row = 0 , i , j ;					      int row = 0 ;						  
    j = N - 1						      	for ( i = 0 , j = N - 1 ;				      int j = N - 1 ;						  
    for i in range ( 0 , N ) :				      	i < N ;							      for ( int i = 0 ;						  
	while ( arr [ i ] [ j ] == 1 and j >= 0 ) :	      	i ++ ) {						      i <= N ;							  
	    row = i					      	  while ( j >= 0 && arr [ i ] [ j ] == 1 ) {		      i ++ ) {							  
	    j -= 1					      	    row = i ;						    	while ( ( arr [ i ] [ j ] == 1 ) && j >= 0 ) {		  
    print ( "Row number = " , row + 1 , ", MaxCount = " , N - 	    j -- ;						    	  row = i ;						  
							      	  }							    	  j -- ;						  
							      	}							    	}							  
							      	System . out . print ( "Row number = " + ( row + 1 ) ) ;      }								  
							      	System . out . print ( ", MaxCount = " + ( N - 1 - j ) ) ;    System . out . println ( "Row number = " + ( row + 1 ) + ", 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY			  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY
--							      --							    --								  --
def binarySearch ( arr , low , high , key ) :		      static int binarySearch ( int arr [ ] , int low , int high ,  static int binarySearch ( int [ ] arr , int low , int high ,  success : None
    if ( high < low ) :					      	if ( high < low ) return - 1 ;				      if ( ( high < low ) ) {					  
	return - 1					      	int mid = ( low + high ) / 2 ;				    	return - 1 ;						  
    mid = ( low + high ) / 2				      	if ( key == arr [ mid ] ) return mid ;			      }								  
    if ( key == arr [ int ( mid ) ] ) :			      	if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid    int mid = ( low + high ) / 2 ;				  
	return mid					      	return binarySearch ( arr , low , ( mid - 1 ) , key ) ;	      if ( ( key == arr [ ( int ) mid ] ) ) {			  
    if ( key > arr [ int ( mid ) ] ) :			      }								    	return mid ;						  
	return binarySearch ( arr , ( mid + 1 ) , high , key  								      }								  
    return ( binarySearch ( arr , low , ( mid - 1 ) , key ) ) 								      if ( ( key > arr [ ( int ) mid ] ) ) {			  
							      								    	return binarySearch ( arr , ( mid + 1 ) , high , key ) ;  
							      								      }								  
							      								      return ( binarySearch ( arr , low , ( mid - 1 ) , key ) ) ; 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY				      MAXIMUM_TRIPLET_SUM_ARRAY					    MAXIMUM_TRIPLET_SUM_ARRAY					  MAXIMUM_TRIPLET_SUM_ARRAY
--							      --							    --								  --
def maxTripletSum ( arr , n ) :				      static int maxTripletSum ( int arr [ ] , int n ) {	    static int maxTripletSum ( int [ ] arr , int n ) {		  success : None
    sm = - 1000000					      	int sum = - 1000000 ;					      int sm = - 1000000 ;					  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    for k in range ( j + 1 , n ) :		      	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] 	j < n ;							    	for ( int j = i + 1 ;					  
		    sm = arr [ i ] + arr [ j ] + arr [ k ]    	j ++ ) for ( int k = j + 1 ;				    	j < n ;							  
    return sm						      	k < n ;							    	j ++ ) {						  
							      	k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = 	  for ( int k = j + 1 ;					  
							      	return sum ;						    	  k < n ;						  
							      }								    	  k ++ ) {						  
							      								    	    if ( ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) ) 
							      								    	      sm = arr [ i ] + arr [ j ] + arr [ k ] ;		  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return sm ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			      CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			    CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX				  CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX
--							      --							    --								  --
def areSumSame ( a , n , m ) :				      static boolean areSumSame ( int a [ ] [ ] , int n , int m ) { static int areSumSame ( int [ ] [ ] a , int n , int m ) {	  script_not_found : None
    sum1 = 0						      	int sum1 = 0 , sum2 = 0 ;				      int sum1 = 0 ;						  
    sum2 = 0						      	for ( int i = 0 ;					      int sum2 = 0 ;						  
    for i in range ( 0 , n ) :				      	i < n ;							      for ( int i = 0 ;						  
	sum1 = 0					      	i ++ ) {						      i <= n ;							  
	sum2 = 0					      	  sum1 = 0 ;						      i ++ ) {							  
	for j in range ( 0 , m ) :			      	  sum2 = 0 ;						    	sum1 = 0 ;						  
	    sum1 += a [ i ] [ j ]			      	  for ( int j = 0 ;					    	sum2 = 0 ;						  
	    sum2 += a [ j ] [ i ]			      	  j < m ;						    	for ( int j = 0 ;					  
	if ( sum1 == sum2 ) :				      	  j ++ ) {						    	j <= m ;						  
	    return 1					      	    sum1 += a [ i ] [ j ] ;				    	j ++ ) {						  
    return 0						      	    sum2 += a [ j ] [ i ] ;				    	  sum1 += a [ i ] [ j ] ;				  
							      	  }							    	  sum2 += a [ j ] [ i ] ;				  
							      	  if ( sum1 == sum2 ) return true ;			    	}							  
							      	}							    	if ( ( sum1 == sum2 ) ) {				  
							      	return false ;						    	  return 1 ;						  
							      }								    	}							  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGOREAN_TRIPLETS				      GENERATE_PYTHAGOREAN_TRIPLETS				    GENERATE_PYTHAGOREAN_TRIPLETS				  GENERATE_PYTHAGOREAN_TRIPLETS
--							      --							    --								  --
def pythagoreanTriplets ( limits ) :			      static void pythagoreanTriplets ( int limit ) {		    public static void pythagoreanTriplets ( int limits ) {	  script_not_found : None
    c , m = 0 , 2					      	int a , b , c = 0 ;					      int c = 0 , m = 2 ;					  
    while c < limits :					      	int m = 2 ;						      while ( c < limits ) {					  
	for n in range ( 1 , m ) :			      	while ( c < limit ) {					    	for ( int n = 1 ;					  
	    a = m * m - n * n				      	  for ( int n = 1 ;					    	n < m ;							  
	    b = 2 * m * n				      	  n < m ;						    	n ++ ) {						  
	    c = m * m + n * n				      	  ++ n ) {						    	  int a = m * m - n * n ;				  
	    if c > limits :				      	    a = m * m - n * n ;					    	  int b = 2 * m * n ;					  
		break					      	    b = 2 * m * n ;					    	  c = m * m + n * n ;					  
	    print ( a , b , c )				      	    c = m * m + n * n ;					    	  if ( c > limits ) break ;				  
	m = m + 1					      	    if ( c > limit ) break ;				    	  System . out . println ( a + b + c ) ;		  
							      	    System . out . println ( a + " " + b + " " + c ) ;	    	}							  
							      	  }							    	m = m + 1 ;						  
							      	  m ++ ;						      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		      CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		    CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		  CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE
--							      --							    --								  --
def convertOpposite ( str ) :				      static void convertOpposite ( StringBuffer str ) {	    static void convertOpposite ( StringBuffer str ) {		  script_not_found : None
    ln = len ( str )					      	int ln = str . length ( ) ;				      int ln = str . length ( ) ;				  
    for i in range ( ln ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if str [ i ] >= 'a' and str [ i ] <= 'z' :	      	i < ln ;						      i < ln ;							  
	    str [ i ] = chr ( ord ( str [ i ] ) - 32 )	      	i ++ ) {						      i ++ ) {							  
	elif str [ i ] >= 'A' and str [ i ] <= 'Z' :	      	  Character c = str . charAt ( i ) ;			    	if ( str . charAt ( i ) >= 'a' && str . charAt ( i ) <= ' 
	    str [ i ] = chr ( ord ( str [ i ] ) + 32 )	      	  if ( Character . isLowerCase ( c ) ) str . replace ( i ,  	  str . setCharAt ( i , ( char ) ( str . charAt ( i ) - 3 
							      	  else str . replace ( i , i + 1 , Character . toLowerCase  	}							  
							      	}							    	else if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) 
							      }								    	  str . setCharAt ( i , ( char ) ( str . charAt ( i ) + 3 
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		      COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		    COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		  COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N
--							      --							    --								  --
def countSetBits ( n ) :				      static int countSetBits ( int n ) {			    static int countSetBits ( int n ) {				  error : COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1
    i = 0						      	int i = 0 ;						      int i = 0 ;						  _TO_N.java:49: error: bad operand type int for una
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  ry operator '!'	  k = ! k ;		^ 1
    while ( ( 1 << i ) <= n ) :				      	while ( ( 1 << i ) <= n ) {				      while ( ( ( 1 << i ) <= n ) ) {				  error
	k = 0						      	  boolean k = false ;					    	int k = 0 ;						  
	change = 1 << i					      	  int change = 1 << i ;					    	int change = 1 << i ;					  
	for j in range ( 0 , n + 1 ) :			      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    ans += k					      	  j <= n ;						    	j <= n ;						  
	    if change == 1 :				      	  j ++ ) {						    	j ++ ) {						  
		k = not k				      	    if ( k == true ) ans += 1 ;				    	  ans += k ;						  
		change = 1 << i				      	    else ans += 0 ;					    	  if ( change == 1 ) {					  
	    else :					      	    if ( change == 1 ) {				    	    k = ! k ;						  
		change -= 1				      	      k = ! k ;						    	    change = 1 << i ;					  
	i += 1						      	      change = 1 << i ;					    	  }							  
    return ans						      	    }							    	  else {						  
							      	    else {						    	    change -- ;						  
							      	      change -- ;					    	  }							  
							      	    }							    	}							  
							      	  }							    	i ++ ;							  
							      	  i ++ ;						      }								  
							      	}							      return ans ;						  
							      	return ans ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIRROR_CHARACTERS_STRING				      MIRROR_CHARACTERS_STRING					    MIRROR_CHARACTERS_STRING					  MIRROR_CHARACTERS_STRING
--							      --							    --								  --
def compute ( st , n ) :				      static String compute ( String str , int n ) {		    public static String compute ( String st , int n ) {	  script_not_found : None
    reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba"	      	String reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba" ;	      String reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba" ;	  
    l = len ( st )					      	int l = str . length ( ) ;				      int l = st . length ( ) ;					  
    answer = ""						      	String answer = "" ;					      String answer = "" ;					  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	answer = answer + st [ i ]			      	i < n ;							      i <= n ;							  
    for i in range ( n , l ) :				      	i ++ ) answer = answer + str . charAt ( i ) ;		      i ++ ) {							  
	answer = ( answer + reverseAlphabet [ ord ( st [ i ]  	for ( int i = n ;					    	answer = answer + st . charAt ( i ) ;			  
    return answer					      	i < l ;							      }								  
							      	i ++ ) answer = answer + reverseAlphabet . charAt ( str . c   for ( int i = n ;						  
							      	return answer ;						      i < l ;							  
							      }								      i ++ ) {							  
							      								    	answer = ( answer + reverseAlphabet . charAt ( ( int ) st 
							      								      }								  
							      								      return answer ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		      FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		    FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N			  FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N
--							      --							    --								  --
def findRepeatingElement ( arr , low , high ) :		      static int findRepeatingElement ( int arr [ ] , int low , int static int findRepeatingElement ( int [ ] arr , int low , int success : None
    if low > high :					      	if ( low > high ) return - 1 ;				      if ( low > high ) {					  
	return - 1					      	int mid = ( low + high ) / 2 ;				    	return - 1 ;						  
    mid = ( low + high ) / 2				      	if ( arr [ mid ] != mid + 1 ) {				      }								  
    if ( arr [ mid ] != mid + 1 ) :			      	  if ( mid > 0 && arr [ mid ] == arr [ mid - 1 ] ) return m   int mid = ( low + high ) / 2 ;				  
	if ( mid > 0 and arr [ mid ] == arr [ mid - 1 ] ) :   	  return findRepeatingElement ( arr , low , mid - 1 ) ;	      if ( ( arr [ mid ] != mid + 1 ) ) {			  
	    return mid					      	}							    	if ( ( mid > 0 ) && ( arr [ mid ] == arr [ mid - 1 ] ) )  
	return findRepeatingElement ( arr , low , mid - 1 )   	return findRepeatingElement ( arr , mid + 1 , high ) ;	    	  return mid ;						  
    return findRepeatingElement ( arr , mid + 1 , high )      }								    	}							  
							      								    	return findRepeatingElement ( arr , low , mid - 1 ) ;	  
							      								      }								  
							      								      return findRepeatingElement ( arr , mid + 1 , high ) ;	  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			      REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM
--							      --							    --								  --
def rearrange ( arr , n ) :				      static void rearrange ( int [ ] arr , int n ) {		    public static int [ ] rearrange ( int [ ] arr , int n ) {	  script_not_found : None
    temp = n * [ None ]					      	int temp [ ] = new int [ n ] ;				      int [ ] temp = n * new int [ n ] ;			  
    small , large = 0 , n - 1				      	int small = 0 , large = n - 1 ;				      int small = 0 , large = n - 1 ;				  
    flag = True						      	boolean flag = true ;					      boolean flag = true ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if flag is True :				      	i < n ;							      i < n ;							  
	    temp [ i ] = arr [ large ]			      	i ++ ) {						      i ++ ) {							  
	    large -= 1					      	  if ( flag ) temp [ i ] = arr [ large -- ] ;		    	if ( flag == true ) {					  
	else :						      	  else temp [ i ] = arr [ small ++ ] ;			    	  temp [ i ] = arr [ large ] ;				  
	    temp [ i ] = arr [ small ]			      	  flag = ! flag ;					    	  large -- ;						  
	    small += 1					      	}							    	}							  
	flag = bool ( 1 - flag )			      	arr = temp . clone ( ) ;				    	else {							  
    for i in range ( n ) :				      }								    	  temp [ i ] = arr [ small ] ;				  
	arr [ i ] = temp [ i ]				      								    	  small ++ ;						  
    return arr						      								    	}							  
							      								    	flag = ( boolean ) ( 1 - flag ) ;			  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	arr [ i ] = temp [ i ] ;				  
							      								      }								  
							      								      return arr ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY
--							      --							    --								  --
def findArea ( arr , n ) :				      static int findArea ( Integer arr [ ] , int n ) {		    static int findArea ( int [ ] arr , int n ) {		  error : MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_
    arr.sort ( reverse = True )				      	Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;      Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;	  ARRAY.java:25: error: no suitable method found for
    dimension = [ 0 , 0 ]				      	int [ ] dimension = {					      int [ ] dimension = {					   sort(int[],Comparator<Object>)   Arrays . sort (
    i = 0						      	  0 , 0 }						    	0 , 0 }							  arr , Collections . reverseOrder ( ) ) ;
    j = 0						      	  ;							    	;							  ^	method Arrays.<T#1>sort(T#1[],Comparator<? s
    while ( i < n - 1 and j < 2 ) :			      	  for ( int i = 0 , j = 0 ;				    	int i = 0 ;						  uper T#1>) is not applicable	     (inference vari
	if ( arr [ i ] == arr [ i + 1 ] ) :		      	  i < n - 1 && j < 2 ;					    	int j = 0 ;						  able T#1 has incompatible bounds	   equality
	    dimension [ j ] = arr [ i ]			      	  i ++ ) if ( arr [ i ] == arr [ i + 1 ] ) dimension [ j ++ 	while ( ( i < n - 1 ) && ( j < 2 ) ) {			  constraints: int	   lower bounds: Object)
	    j += 1					      	  return ( dimension [ 0 ] * dimension [ 1 ] ) ;	    	  if ( ( arr [ i ] == arr [ i + 1 ] ) ) {		   method Arrays.<T#2>sort(T#2[],int,int,Comparator<
	    i += 1					      	}							    	    dimension [ j ] = arr [ i ] ;			  ? super T#2>) is not applicable	(cannot infe
	i += 1						      								    	    j ++ ;						  r type-variable(s) T#2	 (actual and formal
    return ( dimension [ 0 ] * dimension [ 1 ] )	      								    	    i ++ ;						  argument lists differ in length))   where T#1,T#2
							      								    	  }							  are type-variables:	  T#1 extends Object declare
							      								    	  i ++ ;						  d in method <T#1>sort(T#1[],Comparator<? super T#1
							      								    	}							  >)	 T#2 extends Object declared in method <T#2>
							      								    	return ( dimension [ 0 ] * dimension [ 1 ] ) ;		  sort(T#2[],int,int,Comparator<? super T#2>) MAXIMU
							      								      }								  M_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY.java:69:
							      								    								   error: incompatible types: Integer[] cannot be co
							      								    								  nverted to int[]	   if(f_filled(param0.get(i)
							      								    								  ,param1.get(i)) == f_gold(param0.get(i),param1.get
							      								    								  (i)))				      ^ Note: Some m
							      								    								  essages have been simplified; recompile with -Xdia
							      								    								  gs:verbose to get full output 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM
--							      --							    --								  --
def isSubsetSum ( set , n , sum ) :			      static boolean isSubsetSum ( int set [ ] , int n , int sum )  static boolean isSubsetSum ( int [ ] set , int n , int sum )  script_not_found : None
    if ( sum == 0 ) :					      	if ( sum == 0 ) return true ;				      if ( ( sum == 0 ) ) {					  
	return True					      	if ( n == 0 && sum != 0 ) return false ;		    	return true ;						  
    if ( n == 0 and sum != 0 ) :			      	if ( set [ n - 1 ] > sum ) return isSubsetSum ( set , n - 1   }								  
	return False					      	return isSubsetSum ( set , n - 1 , sum ) || isSubsetSum ( s   if ( ( n == 0 ) && ( sum != 0 ) ) {			  
    if ( set [ n - 1 ] > sum ) :			      }								    	return false ;						  
	return isSubsetSum ( set , n - 1 , sum )	      								      }								  
    return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( 								      if ( ( set [ n - 1 ] ) > sum ) {				  
							      								    	return isSubsetSum ( set , n - 1 , sum ) ;		  
							      								      }								  
							      								      return isSubsetSum ( set , n - 1 , sum ) || isSubsetSum ( s 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1
--							      --							    --								  --
def checkCount ( arr , n , k ) :			      static boolean checkCount ( int arr [ ] , int n , int k ) {   static boolean checkCount ( int [ ] arr , int n , int k ) {	  failure : #Results:8, 10
    mp = defaultdict ( lambda : 0 )			      	HashMap < Integer , Integer > hash = new HashMap < > ( ) ;    Map < Integer , Integer > mp = new TreeMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	mp [ arr [ i ] ] += 1				      	i < n ;							      i < n ;							  
    for key , values in mp.items ( ) :			      	i ++ ) {						      i ++ ) {							  
	if values > 2 * k :				      	  if ( ! hash . containsKey ( arr [ i ] ) ) hash . put ( ar 	mp . put ( arr [ i ] , 1 ) ;				  
	    return False				      	  hash . put ( arr [ i ] , hash . get ( arr [ i ] ) + 1 ) ;   }								  
    return True						      	}							      for ( Map . Entry < Integer , Integer > entry : mp . entryS 
							      	for ( Map . Entry x : hash . entrySet ( ) ) if ( ( int ) x  	if ( entry . getValue ( ) > 2 * k ) {			  
							      	return true ;						    	  return false ;					  
							      }								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			      COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			    COUNT_GFG_SUBSEQUENCES_GIVEN_STRING				  COUNT_GFG_SUBSEQUENCES_GIVEN_STRING
--							      --							    --								  --
def countSubsequence ( s , n ) :			      static void countSubsequence ( String s , int n ) {	    static int countSubsequence ( String s , int n ) {		  script_not_found : None
    cntG = 0						      	int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;		      int cntG = 0 ;						  
    cntF = 0						      	for ( int i = 0 ;					      int cntF = 0 ;						  
    result = 0						      	i < n ;							      int result = 0 ;						  
    C = 0						      	i ++ ) {						      int C = 0 ;						  
    for i in range ( n ) :				      	  switch ( s . charAt ( i ) ) {				      for ( int i = 0 ;						  
	if ( s [ i ] == 'G' ) :				      	    case 'G' : cntG ++ ;				      i < n ;							  
	    cntG += 1					      	    result += C ;					      i ++ ) {							  
	    result += C					      	    break ;						    	if ( ( s . charAt ( i ) == 'G' ) ) {			  
	    continue					      	    case 'F' : cntF ++ ;				    	  cntG ++ ;						  
	if ( s [ i ] == 'F' ) :				      	    C += cntG ;						    	  result += C ;						  
	    cntF += 1					      	    break ;						    	  continue ;						  
	    C += cntG					      	    default : continue ;				    	}							  
	    continue					      	  }							    	if ( ( s . charAt ( i ) == 'F' ) ) {			  
	else :						      	}							    	  cntF ++ ;						  
	    continue					      	System . out . println ( result ) ;			    	  C += cntG ;						  
    print ( result )					      }								    	  continue ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  continue ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( result ) ;			  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING	      MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		    MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		  MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING
--							      --							    --								  --
def maxDP ( n ) :					      static int maxDP ( int n ) {				    public static int maxDP ( int n ) {				  success : None
    res = list ( )					      	int res [ ] = new int [ n + 1 ] ;			      int [ ] res = new int [ n + 1 ] ;				  
    res.append ( 0 )					      	res [ 0 ] = 0 ;						      res [ 0 ] = 0 ;						  
    res.append ( 1 )					      	res [ 1 ] = 1 ;						      res [ 1 ] = 1 ;						  
    i = 2						      	for ( int i = 2 ;					      int i = 2 ;						  
    while i < n + 1 :					      	i <= n ;						      while ( i < n + 1 ) {					  
	res.append ( max ( i , ( res [ int ( i / 2 ) ] + res  	i ++ ) res [ i ] = Math . max ( i , ( res [ i / 2 ] + res [ 	res [ i ] = Math . max ( i , ( res [ ( int ) i / 2 ] + re 
	i = i + 1					      	return res [ n ] ;					    	i = i + 1 ;						  
    return res [ n ]					      }								      }								  
							      								      return res [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_COMMON_SUPERSEQUENCE				      SHORTEST_COMMON_SUPERSEQUENCE				    SHORTEST_COMMON_SUPERSEQUENCE				  SHORTEST_COMMON_SUPERSEQUENCE
--							      --							    --								  --
def superSeq ( X , Y , m , n ) :			      static int superSeq ( String X , String Y , int m , int n ) { public static int superSeq ( String X , String Y , int m , in script_not_found : None
    if ( not m ) : return n				      	if ( m == 0 ) return n ;				      if ( ( m == 0 ) ) return n ;				  
    if ( not n ) : return m				      	if ( n == 0 ) return m ;				      if ( ( n == 0 ) ) return m ;				  
    if ( X [ m - 1 ] == Y [ n - 1 ] ) :			      	if ( X . charAt ( m - 1 ) == Y . charAt ( n - 1 ) ) return    if ( ( X . charAt ( m - 1 ) == Y . charAt ( n - 1 ) ) ) ret 
	return 1 + superSeq ( X , Y , m - 1 , n - 1 )	      	return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , su   return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , su 
    return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSe }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE
--							      --							    --								  --
def minCoins ( coins , m , V ) :			      static int minCoins ( int coins [ ] , int m , int V ) {	    public static int minCoins ( int [ ] coins , int m , int V )  script_not_found : None
    if ( V == 0 ) :					      	if ( V == 0 ) return 0 ;				      if ( ( V == 0 ) ) {					  
	return 0					      	int res = Integer . MAX_VALUE ;				    	return 0 ;						  
    res = sys.maxsize					      	for ( int i = 0 ;					      }								  
    for i in range ( 0 , m ) :				      	i < m ;							      int res = Integer . MAX_VALUE ;				  
	if ( coins [ i ] <= V ) :			      	i ++ ) {						      for ( int i = 0 ;						  
	    sub_res = minCoins ( coins , m , V - coins [ i ]  	  if ( coins [ i ] <= V ) {				      i <= m ;							  
	    if ( sub_res != sys.maxsize and sub_res + 1 < res 	    int sub_res = minCoins ( coins , m , V - coins [ i ] )    i ++ ) {							  
		res = sub_res + 1			      	    if ( sub_res != Integer . MAX_VALUE && sub_res + 1 < re 	if ( ( coins [ i ] <= V ) ) {				  
    return res						      	  }							    	  int subRes = minCoins ( coins , m , V - coins [ i ] ) ; 
							      	}							    	  if ( ( subRes != Integer . MAX_VALUE ) && ( subRes + 1  
							      	return res ;						    	    res = subRes + 1 ;					  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		      UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		    UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		  UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1
--							      --							    --								  --
def printIntersection ( arr1 , arr2 , m , n ) :		      static void printIntersection ( int arr1 [ ] , int arr2 [ ] , static void printIntersection ( int [ ] arr1 , int [ ] arr2 , script_not_found : None
    i , j = 0 , 0					      	int i = 0 , j = 0 ;					      int i = 0 , j = 0 ;					  
    while i < m and j < n :				      	while ( i < m && j < n ) {				      while ( i < m && j < n ) {				  
	if arr1 [ i ] < arr2 [ j ] :			      	  if ( arr1 [ i ] < arr2 [ j ] ) i ++ ;			    	if ( arr1 [ i ] < arr2 [ j ] ) {			  
	    i += 1					      	  else if ( arr2 [ j ] < arr1 [ i ] ) j ++ ;		    	  i ++ ;						  
	elif arr2 [ j ] < arr1 [ i ] :			      	  else {						    	}							  
	    j += 1					      	    System . out . print ( arr2 [ j ++ ] + " " ) ;	    	else if ( arr2 [ j ] < arr1 [ i ] ) {			  
	else :						      	    i ++ ;						    	  j ++ ;						  
	    print ( arr2 [ j ] )			      	  }							    	}							  
	    j += 1					      	}							    	else {							  
	    i += 1					      }								    	  System . out . println ( arr2 [ j ] ) ;		  
							      								    	  j ++ ;						  
							      								    	  i ++ ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1
--							      --							    --								  --
def countPairs ( arr1 , arr2 , m , n , x ) :		      static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , static int countPairs ( int [ ] arr1 , int [ ] arr2 , int m , success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    us = set ( )					      	HashSet < Integer > us = new HashSet < Integer > ( ) ;	      HashSet < Integer > us = new HashSet < > ( ) ;		  
    for i in range ( m ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	us.add ( arr1 [ i ] )				      	i < m ;							      i < m ;							  
    for j in range ( n ) :				      	i ++ ) us . add ( arr1 [ i ] ) ;			      i ++ ) {							  
	if x - arr2 [ j ] in us :			      	for ( int j = 0 ;					    	us . add ( arr1 [ i ] ) ;				  
	    count += 1					      	j < n ;							      }								  
    return count					      	j ++ ) if ( us . contains ( x - arr2 [ j ] ) ) count ++ ;     for ( int j = 0 ;						  
							      	return count ;						      j < n ;							  
							      }								      j ++ ) {							  
							      								    	if ( us . contains ( x - arr2 [ j ] ) ) {		  
							      								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	      POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	    POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	  POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS
--							      --							    --								  --
def isPresent ( s , q ) :				      static boolean isPresent ( String s , String q ) {	    public static boolean isPresent ( String s , String q ) {	  script_not_found : None
    freq = [ 0 ] * MAX_CHAR				      	int [ ] freq = new int [ MAX_CHAR ] ;			      int [ ] freq = new int [ MAX_CHAR ] ;			  
    for i in range ( 0 , len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	freq [ ord ( s [ i ] ) ] += 1			      	i < s . length ( ) ;					      ( i < s . length ( ) ) && ( i < q . length ( ) ) ;	  
    for i in range ( 0 , len ( q ) ) :			      	i ++ ) freq [ s . charAt ( i ) ] ++ ;			      i ++ ) {							  
	freq [ ord ( q [ i ] ) ] -= 1			      	for ( int i = 0 ;					    	freq [ ( int ) s . charAt ( i ) ] ++ ;			  
	if ( freq [ ord ( q [ i ] ) ] < 0 ) :		      	i < q . length ( ) ;					      }								  
	    return False				      	i ++ ) {						      for ( int i = 0 ;						  
    return True						      	  freq [ q . charAt ( i ) ] -- ;			      ( i < q . length ( ) ) && ( i < s . length ( ) ) && ( i < q 
							      	  if ( freq [ q . charAt ( i ) ] < 0 ) return false ;	      i ++ ) {							  
							      	}							    	freq [ ( int ) q . charAt ( i ) ] -- ;			  
							      	return true ;						    	if ( ( freq [ ( int ) q . charAt ( i ) ] < 0 ) ) return f 
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			      PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			    PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			  PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE
--							      --							    --								  --
def censor ( text , word ) :				      static String censor ( String text , String word ) {	    public static String censor ( String text , String word ) {	  error : PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE.jav
    word_list = text.split ( )				      	String [ ] word_list = text . split ( "\\s+" ) ;	      char [ ] wordArray = text . toCharArray ( ) ;		  a:39: error: bad operand types for binary operator
    result = ''						      	String result = "" ;					      StringBuffer result = new StringBuffer ( ) ;		   '=='	    if ( wordArray [ i ] == word ) {
    stars = '*' * len ( word )				      	String stars = "" ;					      char stars = '*' ;					  		    ^	first type:  char   second t
    count = 0						      	for ( int i = 0 ;					      int count = 0 ;						  ype: String 1 error
    index = 0						      	i < word . length ( ) ;					      int index = 0 ;						  
    for i in word_list :				      	i ++ ) stars += '*' ;					      for ( int i = 0 ;						  
	if i == word :					      	int index = 0 ;						      i < wordArray . length ;					  
	    word_list [ index ] = stars			      	for ( String i : word_list ) {				      i ++ ) {							  
	index += 1					      	  if ( i . compareTo ( word ) == 0 ) word_list [ index ] =  	if ( wordArray [ i ] == word ) {			  
    result = ' '.join ( word_list )			      	  index ++ ;						    	  wordArray [ index ] = stars ;				  
    return result					      	}							    	}							  
							      	for ( String i : word_list ) result += i + ' ' ;	    	index ++ ;						  
							      	return result ;						      }								  
							      }								      result . append ( wordArray [ count ] ) ;			  
							      								      return result . toString ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT
--							      --							    --								  --
def check ( st ) :					      static boolean check ( String str ) {			    public static boolean check ( String st ) {			  error : Exception in thread "main" java.lang.Strin
    n = len ( st )					      	int n = str . length ( ) ;				      int n = st . length ( ) ;					  gIndexOutOfBoundsException: String index out of ra
    oddDigSum = 0					      	int oddDigSum = 0 , evenDigSum = 0 ;			      int oddDigSum = 0 ;					  nge: 1 	at java.base/java.lang.StringLatin1.charAt
    evenDigSum = 0					      	for ( int i = 0 ;					      int evenDigSum = 0 ;					  (StringLatin1.java:47) 	at java.base/java.lang.Str
    for i in range ( 0 , n ) :				      	i < n ;							      for ( int i = 0 ;						  ing.charAt(String.java:693) 	at CHECK_LARGE_NUMBER
	if ( i % 2 == 0 ) :				      	i ++ ) {						      i <= n ;							  _DIVISIBLE_11_NOT.f_filled(CHECK_LARGE_NUMBER_DIVI
	    oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )  	  if ( i % 2 == 0 ) oddDigSum += ( str . charAt ( i ) - '0'   i ++ ) {							  SIBLE_11_NOT.java:37) 	at CHECK_LARGE_NUMBER_DIVIS
	else :						      	  else evenDigSum += ( str . charAt ( i ) - '0' ) ;	    	if ( ( i % 2 ) == 0 ) {					  IBLE_11_NOT.main(CHECK_LARGE_NUMBER_DIVISIBLE_11_N
	    evenDigSum = evenDigSum + ( ( int ) ( st [ i ] )  	}							    	  oddDigSum = oddDigSum + ( ( int ) st . charAt ( i ) ) ; OT.java:59)
    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )	      	return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;	    	}							  
							      }								    	else {							  
							      								    	  evenDigSum = evenDigSum + ( ( int ) st . charAt ( i ) ) 
							      								    	}							  
							      								      }								  
							      								      return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		      NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		    NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		  NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES
--							      --							    --								  --
def countOccurrences ( s , K ) :			      static int countOccurrences ( String s , int K ) {	    static int countOccurrences ( String s , int K ) {		  success : None
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    c1 = 0						      	int C = 0 , c1 = 0 , c2 = 0 ;				      int c1 = 0 ;						  
    c2 = 0						      	for ( int i = 0 ;					      int c2 = 0 ;						  
    C = 0						      	i < n ;							      int C = 0 ;						  
    for i in range ( n ) :				      	i ++ ) {						      for ( int i = 0 ;						  
	if s [ i ] == 'a' :				      	  if ( s . charAt ( i ) == 'a' ) c1 ++ ;		      i < n ;							  
	    c1 += 1					      	  if ( s . charAt ( i ) == 'b' ) {			      i ++ ) {							  
	if s [ i ] == 'b' :				      	    c2 ++ ;						    	if ( s . charAt ( i ) == 'a' ) {			  
	    c2 += 1					      	    C += c1 ;						    	  c1 ++ ;						  
	    C += c1					      	  }							    	}							  
    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2	      	}							    	if ( s . charAt ( i ) == 'b' ) {			  
							      	return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;	    	  c2 ++ ;						  
							      }								    	  C += c1 ;						  
							      								    	}							  
							      								      }								  
							      								      return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
def printRepeating ( arr , size ) :			      void printRepeating ( int arr [ ] , int size ) {		    static void printRepeating ( int [ ] arr , int size ) {	  script_not_found : None
    count = [ 0 ] * size				      	int count [ ] = new int [ size ] ;			      int [ ] count = new int [ size ] ;			  
    print ( " Repeating elements are " , end = "" )	      	int i ;							      System . out . print ( " Repeating elements are " ) ;	  
    for i in range ( 0 , size ) :			      	System . out . println ( "Repeated elements are : " ) ;	      for ( int i = 0 ;						  
	if ( count [ arr [ i ] ] == 1 ) :		      	for ( i = 0 ;						      i <= size ;						  
	    print ( arr [ i ] , end = " " )		      	i < size ;						      i ++ ) {							  
	else :						      	i ++ ) {						    	if ( ( count [ arr [ i ] ] == 1 ) ) {			  
	    count [ arr [ i ] ] = count [ arr [ i ] ] + 1     	  if ( count [ arr [ i ] ] == 1 ) System . out . print ( ar 	  System . out . print ( arr [ i ] + " " ) ;		  
							      	  else count [ arr [ i ] ] ++ ;				    	}							  
							      	}							    	else {							  
							      }								    	  count [ arr [ i ] ] = count [ arr [ i ] ] + 1 ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1
--							      --							    --								  --
def countSubstringWithEqualEnds ( s ) :			      static int countSubstringWithEqualEnds ( String s ) {	    static int countSubstringWithEqualEnds ( String s ) {	  script_not_found : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    count = [ 0 ] * MAX_CHAR				      	int [ ] count = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ MAX_CHAR ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	      	i < n ;							      i < n ;							  
    for i in range ( MAX_CHAR ) :			      	i ++ ) count [ s . charAt ( i ) - 'a' ] ++ ;		      i ++ ) {							  
	result += ( count [ i ] * ( count [ i ] + 1 ) / 2 )   	for ( int i = 0 ;					    	count [ ( int ) s . charAt ( i ) - 'a' ] ++ ;		  
    return result					      	i < MAX_CHAR ;						      }								  
							      	i ++ ) result += ( count [ i ] * ( count [ i ] + 1 ) / 2 )    for ( int i = 0 ;						  
							      	return result ;						      i < MAX_CHAR ;						  
							      }								      i ++ ) {							  
							      								    	result += ( count [ i ] * ( count [ i ] + 1 ) / 2 ) ;	  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEGREGATE_EVEN_ODD_NUMBERS_SET_3			      SEGREGATE_EVEN_ODD_NUMBERS_SET_3				    SEGREGATE_EVEN_ODD_NUMBERS_SET_3				  SEGREGATE_EVEN_ODD_NUMBERS_SET_3
--							      --							    --								  --
def arrayEvenAndOdd ( arr , n ) :			      static void arrayEvenAndOdd ( int arr [ ] , int n ) {	    static void arrayEvenAndOdd ( int [ ] arr , int n ) {	  script_not_found : None
    i = - 1						      	int i = - 1 , j = 0 ;					      int i = - 1 ;						  
    j = 0						      	while ( j != n ) {					      int j = 0 ;						  
    while ( j != n ) :					      	  if ( arr [ j ] % 2 == 0 ) {				      while ( ( j != n ) ) {					  
	if ( arr [ j ] % 2 == 0 ) :			      	    i ++ ;						    	if ( ( arr [ j ] % 2 ) == 0 ) {				  
	    i = i + 1					      	    int temp = arr [ i ] ;				    	  i = i + 1 ;						  
	    arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]     	    arr [ i ] = arr [ j ] ;				    	  arr [ i ] = arr [ j ] ;				  
	j = j + 1					      	    arr [ j ] = temp ;					    	  arr [ j ] = arr [ i ] ;				  
    for i in arr :					      	  }							    	}							  
	print ( str ( i ) + " " , end = '' )		      	  j ++ ;						    	j = j + 1 ;						  
							      	}							      }								  
							      	for ( int k = 0 ;					      for ( i = 0 ;						  
							      	k < n ;							      i < arr . length ;					  
							      	k ++ ) System . out . print ( arr [ k ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	      REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	    REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE		  REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE
--							      --							    --								  --
def reversingString ( str , start , end ) :		      static String reversingString ( char [ ] str , int start , in public static String reversingString ( String str , int start script_not_found : None
    while ( start < end ) :				      	while ( start < end ) {					      while ( ( start < end ) ) {				  
	str = ( str [ : start ] + chr ( ord ( str [ start ] ) 	  str [ start ] ^= str [ end ] ;			    	str = ( str . substring ( 0 , start ) + ( char ) ( str .  
	str = ( str [ : end ] + chr ( ord ( str [ start ] ) ^ 	  str [ end ] ^= str [ start ] ;			    	str = ( str . substring ( 0 , end ) + ( char ) ( str . ch 
	str = ( str [ : start ] + chr ( ord ( str [ start ] ) 	  str [ start ] ^= str [ end ] ;			    	str = ( str . substring ( 0 , start ) + ( char ) ( str .  
	start += 1					      	  ++ start ;						    	start ++ ;						  
	end -= 1					      	  -- end ;						    	end -- ;						  
    return str						      	}							      }								  
							      	return String . valueOf ( str ) ;			      return str ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	      RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	    RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	  RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING
--							      --							    --								  --
def getMaxOccuringChar ( str ) :			      static char getMaxOccuringChar ( String str ) {		    static char getMaxOccuringChar ( String str ) {		  script_not_found : None
    count = [ 0 ] * ASCII_SIZE				      	int count [ ] = new int [ ASCII_SIZE ] ;		      int [ ] count = new int [ ASCII_SIZE ] ;			  
    max = - 1						      	int len = str . length ( ) ;				      int max = - 1 ;						  
    c = ''						      	for ( int i = 0 ;					      char c = '\0' ;						  
    for i in str :					      	i < len ;						      for ( int i = 0 ;						  
	count [ ord ( i ) ] += 1 ;			      	i ++ ) count [ str . charAt ( i ) ] ++ ;		      i < str . length ( ) ;					  
    for i in str :					      	int max = - 1 ;						      i ++ ) {							  
	if max < count [ ord ( i ) ] :			      	char result = ' ' ;					    	count [ ( int ) str . charAt ( i ) ] ++ ;		  
	    max = count [ ord ( i ) ]			      	for ( int i = 0 ;					      }								  
	    c = i					      	i < len ;						      for ( int i = 0 ;						  
    return c						      	i ++ ) {						      i < str . length ( ) ;					  
							      	  if ( max < count [ str . charAt ( i ) ] ) {		      i ++ ) {							  
							      	    max = count [ str . charAt ( i ) ] ;		    	if ( max < count [ ( int ) str . charAt ( i ) ] ) {	  
							      	    result = str . charAt ( i ) ;			    	  max = count [ ( int ) str . charAt ( i ) ] ;		  
							      	  }							    	  c = str . charAt ( i ) ;				  
							      	}							    	}							  
							      	return result ;						      }								  
							      }								      return c ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_1S_SORTED_BINARY_ARRAY				      COUNT_1S_SORTED_BINARY_ARRAY				    COUNT_1S_SORTED_BINARY_ARRAY				  COUNT_1S_SORTED_BINARY_ARRAY
--							      --							    --								  --
def countOnes ( arr , low , high ) :			      int countOnes ( bool arr [ ] , int low , int high ) {	    static int countOnes ( int [ ] arr , int low , int high ) {	  success : None
    if high >= low :					      	if ( high >= low ) {					      if ( high >= low ) {					  
	mid = low + ( high - low ) / 2			      	  int mid = low + ( high - low ) / 2 ;			    	int mid = low + ( high - low ) / 2 ;			  
	if ( ( mid == high or arr [ mid + 1 ] == 0 ) and ( ar 	  if ( ( mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ m 	if ( ( ( mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ 
	    return mid + 1				      	  if ( arr [ mid ] == 1 ) return countOnes ( arr , ( mid +  	  return mid + 1 ;					  
	if arr [ mid ] == 1 :				      	  return countOnes ( arr , low , ( mid - 1 ) ) ;	    	}							  
	    return countOnes ( arr , ( mid + 1 ) , high )     	}							    	if ( arr [ mid ] == 1 ) {				  
	return countOnes ( arr , low , mid - 1 )	      	return 0 ;						    	  return countOnes ( arr , ( mid + 1 ) , high ) ;	  
    return 0						      }								    	}							  
							      								    	return countOnes ( arr , low , mid - 1 ) ;		  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C
--							      --							    --								  --
def fitOrNotFit ( R , r , x , y , rad ) :		      static void fitOrNotFit ( int R , int r , int x , int y , int public static void fitOrNotFit ( double R , double r , double script_not_found : None
    val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) 	double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . po   double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . po 
    if ( val + rad <= R and val - rad >= R - r ) :	      	if ( val + rad <= R && val - rad >= R - r ) System . out .    if ( ( val + rad <= R && val - rad >= R - r ) ) {		  
	print ( "Fits\n" )				      	else System . out . println ( "Doesn't Fit" ) ;		    	System . out . println ( "Fits\n" ) ;			  
    else :						      }								      }								  
	print ( "Doesn't Fit" )				      								      else {							  
							      								    	System . out . println ( "Doesn't Fit" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY				      EQUILIBRIUM_INDEX_OF_AN_ARRAY				    EQUILIBRIUM_INDEX_OF_AN_ARRAY				  EQUILIBRIUM_INDEX_OF_AN_ARRAY
--							      --							    --								  --
def equilibrium ( arr ) :				      int equilibrium ( int arr [ ] , int n ) {			    public static int equilibrium ( int [ ] arr ) {		  error : EQUILIBRIUM_INDEX_OF_AN_ARRAY.java:86: err
    leftsum = 0						      	int i , j ;						      int leftsum = 0 ;						  or: method f_filled in class EQUILIBRIUM_INDEX_OF_
    rightsum = 0					      	int leftsum , rightsum ;				      int rightsum = 0 ;					  AN_ARRAY cannot be applied to given types;
    n = len ( arr )					      	for ( i = 0 ;						      int n = arr . length ;					   if(f_filled(param0.get(i),param1.get(i)) == f_gol
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  d(param0.get(i),param1.get(i)))	     ^	 req
	leftsum = 0					      	++ i ) {						      i < n ;							  uired: int[]	 found: int[],Integer	reason: actu
	rightsum = 0					      	  leftsum = 0 ;						      i ++ ) {							  al and formal argument lists differ in length 1 er
	for j in range ( i ) :				      	  for ( j = 0 ;						    	leftsum = 0 ;						  ror
	    leftsum += arr [ j ]			      	  j < i ;						    	rightsum = 0 ;						  
	for j in range ( i + 1 , n ) :			      	  j ++ ) leftsum += arr [ j ] ;				    	for ( int j = 0 ;					  
	    rightsum += arr [ j ]			      	  rightsum = 0 ;					    	j < i ;							  
	if leftsum == rightsum :			      	  for ( j = i + 1 ;					    	j ++ ) {						  
	    return i					      	  j < n ;						    	  leftsum += arr [ j ] ;				  
    return - 1						      	  j ++ ) rightsum += arr [ j ] ;			    	}							  
							      	  if ( leftsum == rightsum ) return i ;			    	for ( int j = i + 1 ;					  
							      	}							    	j < n ;							  
							      	return - 1 ;						    	j ++ ) {						  
							      }								    	  rightsum += arr [ j ] ;				  
							      								    	}							  
							      								    	if ( leftsum == rightsum ) {				  
							      								    	  return i ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		      MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		    MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		  MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX
--							      --							    --								  --
def maxDecimalValue ( mat , i , j , p ) :		      static int maxDecimalValue ( int mat [ ] [ ] , int i , int j  public static int maxDecimalValue ( int [ ] [ ] mat , int i , script_not_found : None
    if i >= N or j >= N :				      	if ( i >= N || j >= N ) {				      if ( i >= N || j >= N ) return 0 ;			  
	return 0					      	  return 0 ;						      int result = Math . max ( maxDecimalValue ( mat , i , j + 1 
    result = max ( maxDecimalValue ( mat , i , j + 1 , p + 1  	}							      if ( mat [ i ] [ j ] == 1 ) return Math . pow ( 2 , p ) + r 
    if mat [ i ] [ j ] == 1 :				      	int result = Math . max ( maxDecimalValue ( mat , i , j + 1   else return result ;					  
	return pow ( 2 , p ) + result			      	if ( mat [ i ] [ j ] == 1 ) {				    }								  
    else :						      	  return ( int ) ( Math . pow ( 2 , p ) + result ) ;	    								  
	return result					      	}							    								  
							      	else {							    								  
							      	  return result ;					    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP
--							      --							    --								  --
def isHeap ( arr , i , n ) :				      static boolean isHeap ( int arr [ ] , int i , int n ) {	    public static boolean isHeap ( int [ ] arr , int i , int n )  success : None
    if i > int ( ( n - 2 ) / 2 ) :			      	if ( i > ( n - 2 ) / 2 ) {				      if ( i > ( int ) ( ( n - 2 ) / 2 ) ) return true ;	  
	return True					      	  return true ;						      if ( ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 
    if ( arr [ i ] >= arr [ 2 * i + 1 ] and arr [ i ] >= arr  	}							      return false ;						  
	return True					      	if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 }								  
    return False					      	  return true ;						    								  
							      	}							    								  
							      	return false ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION	      DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION	    DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION	  DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION
--							      --							    --								  --
def MatrixChainOrder ( p , i , j ) :			      static int MatrixChainOrder ( int p [ ] , int i , int j ) {   public static int MatrixChainOrder ( int [ ] p , int i , int  success : None
    if i == j :						      	if ( i == j ) return 0 ;				      if ( i == j ) {						  
	return 0					      	int min = Integer . MAX_VALUE ;				    	return 0 ;						  
    _min = sys.maxsize					      	for ( int k = i ;					      }								  
    for k in range ( i , j ) :				      	k < j ;							      int min = Integer . MAX_VALUE ;				  
	count = ( MatrixChainOrder ( p , i , k ) + MatrixChai 	k ++ ) {						      for ( int k = i ;						  
	if count < _min :				      	  int count = MatrixChainOrder ( p , i , k ) + MatrixChainO   k < j ;							  
	    _min = count				      	  if ( count < min ) min = count ;			      k ++ ) {							  
    return _min						      	}							    	int count = ( MatrixChainOrder ( p , i , k ) + MatrixChai 
							      	return min ;						    	if ( count < min ) {					  
							      }								    	  min = count ;						  
							      								    	}							  
							      								      }								  
							      								      return min ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FIBONACCI_NUMBERS					      SUM_FIBONACCI_NUMBERS					    SUM_FIBONACCI_NUMBERS					  SUM_FIBONACCI_NUMBERS
--							      --							    --								  --
def calculateSum ( n ) :				      static int calculateSum ( int n ) {			    static int calculateSum ( int n ) {				  success : None
    if ( n <= 0 ) :					      	if ( n <= 0 ) return 0 ;				      if ( ( n <= 0 ) ) {					  
	return 0					      	int fibo [ ] = new int [ n + 1 ] ;			    	return 0 ;						  
    fibo = [ 0 ] * ( n + 1 )				      	fibo [ 0 ] = 0 ;					      }								  
    fibo [ 1 ] = 1					      	fibo [ 1 ] = 1 ;					      int [ ] fibo = new int [ n + 1 ] ;			  
    sm = fibo [ 0 ] + fibo [ 1 ]			      	int sum = fibo [ 0 ] + fibo [ 1 ] ;			      fibo [ 1 ] = 1 ;						  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      int sm = fibo [ 0 ] + fibo [ 1 ] ;			  
	fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]	      	i <= n ;						      for ( int i = 2 ;						  
	sm = sm + fibo [ i ]				      	i ++ ) {						      i <= n ;							  
    return sm						      	  fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;	      i ++ ) {							  
							      	  sum += fibo [ i ] ;					    	fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;		  
							      	}							    	sm = sm + fibo [ i ] ;					  
							      	return sum ;						      }								  
							      }								      return sm ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
def countDer ( n ) :					      static int countDer ( int n ) {				    static int countDer ( int n ) {				  success : None
    der = [ 0 for i in range ( n + 1 ) ]		      	int der [ ] = new int [ n + 1 ] ;			      int [ ] der = new int [ n + 1 ] ;				  
    der [ 0 ] = 1					      	der [ 0 ] = 1 ;						      for ( int i = 0 ;						  
    der [ 1 ] = 0					      	der [ 1 ] = 0 ;						      i < n ;							  
    der [ 2 ] = 1					      	der [ 2 ] = 1 ;						      i ++ ) {							  
    for i in range ( 3 , n + 1 ) :			      	for ( int i = 3 ;					    	der [ i ] = 0 ;						  
	der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 	i <= n ;						      }								  
    return der [ n ]					      	++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i -    der [ 0 ] = 1 ;						  
							      	return der [ n ] ;					      der [ 1 ] = 0 ;						  
							      }								      der [ 2 ] = 1 ;						  
							      								      for ( int i = 3 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) 
							      								      }								  
							      								      return der [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_WITH_CONSECUTIVE_1S			      COUNT_STRINGS_WITH_CONSECUTIVE_1S				    COUNT_STRINGS_WITH_CONSECUTIVE_1S				  COUNT_STRINGS_WITH_CONSECUTIVE_1S
--							      --							    --								  --
def countStrings ( n ) :				      static int countStrings ( int n ) {			    static int countStrings ( int n ) {				  script_not_found : None
    a = [ 0 ] * n					      	int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;	      int [ ] a = new int [ n ] ;				  
    b = [ 0 ] * n					      	a [ 0 ] = b [ 0 ] = 1 ;					      int [ ] b = new int [ n ] ;				  
    a [ 0 ] = b [ 0 ] = 1				      	for ( int i = 1 ;					      a [ 0 ] = b [ 0 ] = 1 ;					  
    for i in range ( 1 , n ) :				      	i < n ;							      for ( int i = 1 ;						  
	a [ i ] = a [ i - 1 ] + b [ i - 1 ]		      	i ++ ) {						      i < n ;							  
	b [ i ] = a [ i - 1 ]				      	  a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			      i ++ ) {							  
    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]	      	  b [ i ] = a [ i - 1 ] ;				    	a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			  
							      	}							    	b [ i ] = a [ i - 1 ] ;					  
							      	from 2 ^ n return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;    }								  
							      }								      return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYS_DISTINCT_ELEMENTS				      SUBARRAYS_DISTINCT_ELEMENTS				    SUBARRAYS_DISTINCT_ELEMENTS					  SUBARRAYS_DISTINCT_ELEMENTS
--							      --							    --								  --
def sumoflength ( arr , n ) :				      public static int sumoflength ( int [ ] arr , int n ) {	    public static int sumoflength ( int [ ] arr , int n ) {	  error : Note: SUBARRAYS_DISTINCT_ELEMENTS.java use
    s = [ ]						      	Set < Integer > s = new HashSet < > ( ) ;		      ArrayList < Integer > s = new ArrayList ( ) ;		  s unchecked or unsafe operations. Note: Recompile
    j = 0						      	int j = 0 , ans = 0 ;					      int j = 0 ;						  with -Xlint:unchecked for details. Exception in th
    ans = 0						      	for ( int i = 0 ;					      int ans = 0 ;						  read "main" java.lang.IndexOutOfBoundsException: I
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  ndex 6 out of bounds for length 6 	at java.base/jd
	while ( j < n and ( arr [ j ] not in s ) ) :	      	i ++ ) {						      i < n ;							  k.internal.util.Preconditions.outOfBounds(Precondi
	    s.append ( arr [ j ] )			      	  while ( j < n && ! s . contains ( arr [ j ] ) ) {	      i ++ ) {							  tions.java:64) 	at java.base/jdk.internal.util.Pre
	    j += 1					      	    s . add ( arr [ i ] ) ;				    	while ( ( j < n ) && ( ! s . contains ( arr [ j ] ) ) ) { conditions.outOfBoundsCheckIndex(Preconditions.jav
	ans += ( ( j - i ) * ( j - i + 1 ) ) // 2	      	    j ++ ;						    	  s . add ( arr [ j ] ) ;				  a:70) 	at java.base/jdk.internal.util.Precondition
	s.remove ( arr [ i ] )				      	  }							    	  j ++ ;						  s.checkIndex(Preconditions.java:248) 	at java.base
    return ans						      	  ans += ( ( j - i ) * ( j - i + 1 ) ) / 2 ;		    	}							  /java.util.Objects.checkIndex(Objects.java:372) 	a
							      	  s . remove ( arr [ i ] ) ;				    	ans += ( ( j - i ) * ( j - i + 1 ) ) / 2 ;		  t java.base/java.util.ArrayList.remove(ArrayList.j
							      	}							    	s . remove ( arr [ i ] ) ;				  ava:536) 	at SUBARRAYS_DISTINCT_ELEMENTS.f_filled(
							      	return ans ;						      }								  SUBARRAYS_DISTINCT_ELEMENTS.java:42) 	at SUBARRAYS
							      }								      return ans ;						  _DISTINCT_ELEMENTS.main(SUBARRAYS_DISTINCT_ELEMENT
							      								    }								  S.java:74)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
def nobleInteger ( arr ) :				      public static int nobleInteger ( int arr [ ] ) {		    public static int nobleInteger ( int [ ] arr ) {		  script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    n = len ( arr )					      	int n = arr . length ;					      int n = arr . length ;					  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] == arr [ i + 1 ] :			      	i < n - 1 ;						      i < n - 1 ;						  
	    continue					      	i ++ ) {						      i ++ ) {							  
	if arr [ i ] == n - i - 1 :			      	  if ( arr [ i ] == arr [ i + 1 ] ) continue ;		    	if ( arr [ i ] == arr [ i + 1 ] ) continue ;		  
	    return arr [ i ]				      	  if ( arr [ i ] == n - i - 1 ) return arr [ i ] ;	    	if ( arr [ i ] == n - i - 1 ) return arr [ i ] ;	  
    if arr [ n - 1 ] == 0 :				      	}							      }								  
	return arr [ n - 1 ]				      	if ( arr [ n - 1 ] == 0 ) return arr [ n - 1 ] ;	      if ( arr [ n - 1 ] == 0 ) return arr [ n - 1 ] ;		  
    return - 1						      	return - 1 ;						      return - 1 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S	      COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S	    COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S		  COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S
--							      --							    --								  --
def countStrings ( n ) :				      static int countStrings ( int n ) {			    static int countStrings ( int n ) {				  success : None
    a = [ 0 for i in range ( n ) ]			      	int a [ ] = new int [ n ] ;				      int [ ] a = new int [ n ] ;				  
    b = [ 0 for i in range ( n ) ]			      	int b [ ] = new int [ n ] ;				      int [ ] b = new int [ n ] ;				  
    a [ 0 ] = b [ 0 ] = 1				      	a [ 0 ] = b [ 0 ] = 1 ;					      for ( int i = 0 ;						  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      i < n ;							  
	a [ i ] = a [ i - 1 ] + b [ i - 1 ]		      	i < n ;							      i ++ ) {							  
	b [ i ] = a [ i - 1 ]				      	i ++ ) {						    	a [ i ] = 0 ;						  
    return a [ n - 1 ] + b [ n - 1 ]			      	  a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			    	b [ i ] = 0 ;						  
							      	  b [ i ] = a [ i - 1 ] ;				      }								  
							      	}							      a [ 0 ] = b [ 0 ] = 1 ;					  
							      	return a [ n - 1 ] + b [ n - 1 ] ;			      for ( int i = 1 ;						  
							      }								      i < n ;							  
							      								      i ++ ) {							  
							      								    	a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			  
							      								    	b [ i ] = a [ i - 1 ] ;					  
							      								      }								  
							      								      return a [ n - 1 ] + b [ n - 1 ] ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	      DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
def lcs ( X , Y , m , n ) :				      int lcs ( char [ ] X , char [ ] Y , int m , int n ) {	    public static int lcs ( int [ ] X , int [ ] Y , int m , int n script_not_found : None
    if m == 0 or n == 0 :				      	if ( m == 0 || n == 0 ) return 0 ;			      if ( m == 0 || n == 0 ) {					  
	return 0 ;					      	if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,  	return 0 ;						  
    elif X [ m - 1 ] == Y [ n - 1 ] :			      	else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y ,   }								  
	return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;	      }								      else if ( X [ m - 1 ] == Y [ n - 1 ] ) {			  
    else :						      								    	return 1 + lcs ( X , Y , m - 1 , n - 1 ) ;		  
	return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y  								      }								  
							      								      else {							  
							      								    	return Math . max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_REACHING_POINT_2_3_STEPS_TIME		      PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			    PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			  PROBABILITY_REACHING_POINT_2_3_STEPS_TIME
--							      --							    --								  --
def find_prob ( N , P ) :				      static float find_prob ( int N , float P ) {		    public static int findProb ( int N , int P ) {		  script_not_found : None
    dp = [ 0 ] * ( n + 1 )				      	double dp [ ] = new double [ N + 1 ] ;			      int [ ] dp = new int [ ( n + 1 ) ] ;			  
    dp [ 0 ] = 1					      	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
    dp [ 1 ] = 0					      	dp [ 1 ] = 0 ;						      dp [ 1 ] = 0 ;						  
    dp [ 2 ] = P					      	dp [ 2 ] = P ;						      dp [ 2 ] = P ;						  
    dp [ 3 ] = 1 - P					      	dp [ 3 ] = 1 - P ;					      dp [ 3 ] = 1 - P ;					  
    for i in range ( 4 , N + 1 ) :			      	for ( int i = 4 ;					      for ( int i = 4 ;						  
	dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i  	i <= N ;						      i <= N ;							  
    return dp [ N ]					      	++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i   i ++ ) {							  
							      	return ( ( float ) ( dp [ N ] ) ) ;			    	dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3  
							      }								      }								  
							      								      return dp [ N ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE
--							      --							    --								  --
def find ( a , b , k , n1 , n2 ) :			      static int find ( int a [ ] , int b [ ] , int k , int n1 , in public static int indexOf ( int [ ] a , int [ ] b , int k , i success : None
    s = set ( )						      	LinkedHashSet < Integer > s = new LinkedHashSet < > ( ) ;     HashSet < Integer > s = new HashSet < > ( ) ;		  
    for i in range ( n2 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	s.add ( b [ i ] )				      	i < n2 ;						      i < n2 ;							  
    missing = 0						      	i ++ ) s . add ( b [ i ] ) ;				      i ++ ) {							  
    for i in range ( n1 ) :				      	int missing = 0 ;					    	s . add ( b [ i ] ) ;					  
	if a [ i ] not in s :				      	for ( int i = 0 ;					      }								  
	    missing += 1				      	i < n1 ;						      int missing = 0 ;						  
	if missing == k :				      	i ++ ) {						      for ( int i = 0 ;						  
	    return a [ i ]				      	  if ( ! s . contains ( a [ i ] ) ) missing ++ ;	      i < n1 ;							  
    return - 1						      	  if ( missing == k ) return a [ i ] ;			      i ++ ) {							  
							      	}							    	if ( ! s . contains ( a [ i ] ) ) {			  
							      	return - 1 ;						    	  missing ++ ;						  
							      }								    	}							  
							      								    	if ( missing == k ) {					  
							      								    	  return a [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG
--							      --							    --								  --
def generate ( st , s ) :				      static void generate ( Set < String > st , String s ) {	    public static void generate ( Set < String > st , String s )  script_not_found : None
    if len ( s ) == 0 :					      	if ( s . length ( ) == 0 ) {				      if ( s . length ( ) == 0 ) {				  
	return						      	  return ;						    	return ;						  
    if s not in st :					      	}							      }								  
	st.add ( s )					      	if ( ! st . contains ( s ) ) {				      if ( ! st . contains ( s ) ) {				  
	for i in range ( len ( s ) ) :			      	  st . add ( s ) ;					    	st . add ( s ) ;					  
	    t = list ( s ).copy ( )			      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
	    t.remove ( s [ i ] )			      	  i < s . length ( ) ;					    	i < s . length ( ) ;					  
	    t = ''.join ( t )				      	  i ++ ) {						    	i ++ ) {						  
	    generate ( st , t )				      	    String t = s ;					    	  String t = s . substring ( i , i + 1 ) ;		  
    return						      	    t = t . substring ( 0 , i ) + t . substring ( i + 1 ) ; 	  t = t . trim ( ) ;					  
							      	    generate ( st , t ) ;				    	  generate ( st , t ) ;					  
							      	  }							    	}							  
							      	}							      }								  
							      	return ;						      return ;							  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI
--							      --							    --								  --
def canRepresentBST ( pre ) :				      boolean canRepresentBST ( int pre [ ] , int n ) {		    public static boolean canRepresentBST ( int [ ] pre ) {	  error : CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREOR
    s = [ ]						      	Stack < Integer > s = new Stack < Integer > ( ) ;	      Stack < Integer > s = new Stack < > ( ) ;			  DER_TRAVERSAL_OF_BINARY_SEARCH_TREE.java:74: error
    root = INT_MIN					      	int root = Integer . MIN_VALUE ;			      int root = Integer . MIN_VALUE ;				  : method f_filled in class CHECK_IF_A_GIVEN_ARRAY_
    for value in pre :					      	for ( int i = 0 ;					      for ( int value : pre ) {					  CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BINARY_SEARCH_
	if value < root :				      	i < n ;							    	if ( value < root ) {					  TREE cannot be applied to given types;	 if(
	    return False				      	i ++ ) {						    	  return false ;					  f_filled(param0.get(i),param1.get(i)) == f_gold(pa
	while ( len ( s ) > 0 and s [ - 1 ] < value ) :	      	  if ( pre [ i ] < root ) {				    	}							  ram0.get(i),param1.get(i)))		 ^   require
	    root = s.pop ( )				      	    return false ;					    	while ( ( s . size ( ) > 0 ) && s . peek ( ) < value ) {  d: int[]   found: int[],Integer   reason: actual a
	s.append ( value )				      	  }							    	  root = s . pop ( ) ;					  nd formal argument lists differ in length 1 error
    return True						      	  while ( ! s . empty ( ) && s . peek ( ) < pre [ i ] ) {   	}							  
							      	    root = s . peek ( ) ;				    	s . push ( value ) ;					  
							      	    s . pop ( ) ;					      }								  
							      	  }							      return true ;						  
							      	  s . push ( pre [ i ] ) ;				    }								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_NEXT_STRING				      LEXICOGRAPHICALLY_NEXT_STRING				    LEXICOGRAPHICALLY_NEXT_STRING				  LEXICOGRAPHICALLY_NEXT_STRING
--							      --							    --								  --
def nextWord ( s ) :					      public static String nextWord ( String str ) {		    public static String nextWord ( String s ) {		  failure : #Results:5, 10
    if ( s == " " ) :					      	if ( str == "" ) return "a" ;				      if ( ( s . equals ( "" ) ) ) {				  
	return "a"					      	int i = str . length ( ) - 1 ;				    	return "a" ;						  
    i = len ( s ) - 1					      	while ( str . charAt ( i ) == 'z' && i >= 0 ) i -- ;	      }								  
    while ( s [ i ] == 'z' and i >= 0 ) :		      	if ( i == - 1 ) str = str + 'a' ;			      int i = s . length ( ) - 1 ;				  
	i -= 1						      	else str = str . substring ( 0 , i ) + ( char ) ( ( int ) (   while ( ( s . charAt ( i ) == 'z' ) && ( i >= 0 ) ) {	  
    if ( i == - 1 ) :					      	return str ;						    	i -- ;							  
	s = s + 'a'					      }								      }								  
    else :						      								      if ( ( i == - 1 ) ) {					  
	s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) 								    	s = s + 'a' ;						  
    return s						      								      }								  
							      								      else {							  
							      								    	s = s . replace ( s . charAt ( i ) , ( char ) ( s . charA 
							      								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CAESAR_CIPHER						      CAESAR_CIPHER						    CAESAR_CIPHER						  CAESAR_CIPHER
--							      --							    --								  --
def encrypt ( text , s ) :				      public static StringBuffer encrypt ( String text , int s ) {  public static String encrypt ( String text , int s ) {	  script_not_found : None
    result = ""						      	StringBuffer result = new StringBuffer ( ) ;		      String result = "" ;					  
    for i in range ( len ( text ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	char = text [ i ]				      	i < text . length ( ) ;					      i < text . length ( ) ;					  
	if ( char.isupper ( ) ) :			      	i ++ ) {						      i ++ ) {							  
	    result += chr ( ( ord ( char ) + s - 65 ) % 26 +  	  if ( Character . isUpperCase ( text . charAt ( i ) ) ) {  	char c = text . charAt ( i ) ;				  
	else :						      	    char ch = ( char ) ( ( ( int ) text . charAt ( i ) + s  	if ( ( Character . isUpperCase ( c ) ) ) {		  
	    result += chr ( ( ord ( char ) + s - 97 ) % 26 +  	    result . append ( ch ) ;				    	  result += ( char ) ( ( ( int ) c + s - 65 ) % 26 + 65 ) 
    return result					      	  }							    	}							  
							      	  else {						    	else {							  
							      	    char ch = ( char ) ( ( ( int ) text . charAt ( i ) + s  	  result += ( char ) ( ( ( int ) c + s - 97 ) % 26 + 97 ) 
							      	    result . append ( ch ) ;				    	}							  
							      	  }							      }								  
							      	}							      return result ;						  
							      	return result ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			      FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			    FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE				  FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE
--							      --							    --								  --
def Dragon_Curve_Sequence ( n ) :			      static String Dragon_Curve_Sequence ( int n ) {		    public static String DragonCurveSequence ( int n ) {	  script_not_found : None
    s = "1"						      	String s = "1" ;					      String s = "1" ;						  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	temp = "1"					      	i <= n ;						      i <= n ;							  
	prev = '1'					      	i ++ ) {						      i ++ ) {							  
	zero = '0'					      	  String temp = "1" ;					    	String temp = "1" ;					  
	one = '1'					      	  char prev = '1' , zero = '0' , one = '1' ;		    	char prev = '1' ;					  
	for j in range ( len ( s ) ) :			      	  for ( int j = 0 ;					    	char zero = '0' ;					  
	    temp += s [ j ]				      	  j < s . length ( ) ;					    	char one = '1' ;					  
	    if ( prev == '0' ) :			      	  j ++ ) {						    	for ( int j = 0 ;					  
		temp += one				      	    temp += s . charAt ( j ) ;				    	j < s . length ( ) ;					  
		prev = one				      	    if ( prev == '0' ) {				    	j ++ ) {						  
	    else :					      	      temp += one ;					    	  temp += s . charAt ( j ) ;				  
		temp += zero				      	      prev = one ;					    	  if ( ( prev == '0' ) ) {				  
		prev = zero				      	    }							    	    temp += one ;					  
	s = temp					      	    else {						    	    prev = one ;					  
    return s						      	      temp += zero ;					    	  }							  
							      	      prev = zero ;					    	  else {						  
							      	    }							    	    temp += zero ;					  
							      	  }							    	    prev = zero ;					  
							      	  s = temp ;						    	  }							  
							      	}							    	}							  
							      	return s ;						    	s = temp ;						  
							      }								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1
--							      --							    --								  --
def isScalarMatrix ( mat ) :				      static boolean isScalarMatrix ( int mat [ ] [ ] ) {	    public static boolean isScalarMatrix ( int [ ] [ ] mat ) {	  script_not_found : None
    for i in range ( 0 , N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , N ) :			      	i < N ;							      i <= N ;							  
	    if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		return False				      	j < N ;							    	for ( int j = 0 ;					  
    for i in range ( 0 , N - 1 ) :			      	j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 	j <= N ;						  
	if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) :   	for ( int i = 0 ;					    	j ++ ) {						  
	    return False				      	i < N - 1 ;						    	  if ( ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) ) {	  
    return True						      	i ++ ) if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) re 	    return false ;					  
							      	return true ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i <= N - 1 ;						  
							      								      i ++ ) {							  
							      								    	if ( ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) ) {	  
							      								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE				    FIND_NUMBER_OF_TRIANGLES_POSSIBLE				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE
--							      --							    --								  --
def findnumberofTriangles ( arr ) :			      static int findNumberOfTriangles ( int arr [ ] ) {	    public static int findnumberofTriangles ( int [ ] arr ) {	  script_not_found : None
    n = len ( arr )					      	int n = arr . length ;					      int n = arr . length ;					  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( 0 , n - 2 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	k = i + 2					      	i < n - 2 ;						      i <= n - 2 ;						  
	for j in range ( i + 1 , n ) :			      	++ i ) {						      i ++ ) {							  
	    while ( k < n and arr [ i ] + arr [ j ] > arr [ k 	  int k = i + 2 ;					    	int k = i + 2 ;						  
		k += 1					      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
	    if ( k > j ) :				      	  j < n ;						    	j < n ;							  
		count += k - j - 1			      	  ++ j ) {						    	j ++ ) {						  
    return count					      	    while ( k < n && arr [ i ] + arr [ j ] > arr [ k ] ) ++ 	  while ( ( k < n ) && arr [ i ] + arr [ j ] > arr [ k ]  
							      	    if ( k > j ) count += k - j - 1 ;			    	    k ++ ;						  
							      	  }							    	  }							  
							      	}							    	  if ( ( k > j ) ) {					  
							      	return count ;						    	    count += k - j - 1 ;				  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		      NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		    NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		  NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS
--							      --							    --								  --
def snoob ( x ) :					      static int snoob ( int x ) {				    public static int snoob ( int x ) {				  success : None
    next = 0						      	int rightOne , nextHigherOneBit , rightOnesPattern , next =   int next = 0 ;						  
    if ( x ) :						      	if ( x > 0 ) {						      if ( ( x != 0 ) ) {					  
	rightOne = x & - ( x )				      	  rightOne = x & - x ;					    	int rightOne = x & - ( x ) ;				  
	nextHigherOneBit = x + int ( rightOne )		      	  nextHigherOneBit = x + rightOne ;			    	int nextHigherOneBit = x + ( int ) rightOne ;		  
	rightOnesPattern = x ^ int ( nextHigherOneBit )	      	  rightOnesPattern = x ^ nextHigherOneBit ;		    	int rightOnesPattern = x ^ ( int ) nextHigherOneBit ;	  
	rightOnesPattern = ( int ( rightOnesPattern ) / int ( 	  rightOnesPattern = ( rightOnesPattern ) / rightOne ;	    	rightOnesPattern = ( ( int ) rightOnesPattern ) / ( int ) 
	rightOnesPattern = int ( rightOnesPattern ) >> 2      	  rightOnesPattern >>= 2 ;				    	rightOnesPattern = ( ( int ) rightOnesPattern ) >> 2 ;	  
	next = nextHigherOneBit | rightOnesPattern	      	  next = nextHigherOneBit | rightOnesPattern ;		    	next = nextHigherOneBit | rightOnesPattern ;		  
    return next						      	}							      }								  
							      	return next ;						      return next ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUPER_PRIME						      SUPER_PRIME						    SUPER_PRIME							  SUPER_PRIME
--							      --							    --								  --
def SieveOfEratosthenes ( n , isPrime ) :		      static void SieveOfEratosthenes ( int n , boolean isPrime [ ] public static void SieveOfEratosthenes ( int n , boolean [ ]  script_not_found : None
    isPrime [ 0 ] = isPrime [ 1 ] = False		      	isPrime [ 0 ] = isPrime [ 1 ] = false ;			      isPrime [ 0 ] = isPrime [ 1 ] = false ;			  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	isPrime [ i ] = True				      	i <= n ;						      i <= n ;							  
    for p in range ( 2 , n + 1 ) :			      	i ++ ) isPrime [ i ] = true ;				      i ++ ) {							  
	if ( p * p <= n and isPrime [ p ] == True ) :	      	for ( int p = 2 ;					    	isPrime [ i ] = true ;					  
	    for i in range ( p * 2 , n + 1 , p ) :	      	p * p <= n ;						      }								  
		isPrime [ i ] = False			      	p ++ ) {						      for ( int p = 2 ;						  
		p += 1					      	  if ( isPrime [ p ] == true ) {			      p <= n ;							  
							      	    for ( int i = p * 2 ;				      p ++ ) {							  
							      	    i <= n ;						    	if ( ( p * p <= n ) && isPrime [ p ] == true ) {	  
							      	    i += p ) isPrime [ i ] = false ;			    	  for ( int i = p * 2 ;					  
							      	  }							    	  i <= n ;						  
							      	}							    	  i += p ) {						  
							      }								    	    isPrime [ i ] = false ;				  
							      								    	    p ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	      SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	    SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1		  SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1
--							      --							    --								  --
def KnapSack ( val , wt , n , W ) :			      static int KnapSack ( int val [ ] , int wt [ ] , int n , int  public static int KnapSack ( int [ ] val , int [ ] wt , int n script_not_found : None
    dp = [ 0 ] * ( W + 1 )				      	int [ ] dp = new int [ W + 1 ] ;			      int [ ] dp = new int [ W + 1 ] ;				  
    for i in range ( n ) :				      	Arrays . fill ( dp , 0 ) ;				      for ( int i = 0 ;						  
	for j in range ( W , wt [ i ] , - 1 ) :		      	for ( int i = 0 ;					      i < n ;							  
	    dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j -  	i < n ;							      i ++ ) {							  
    return dp [ W ]					      	i ++ ) for ( int j = W ;				    	for ( int j = W ;					  
							      	j >= wt [ i ] ;						    	j >= wt [ i ] ;						  
							      	j -- ) dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [  	j -- ) {						  
							      	return dp [ W ] ;					    	  dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [ j - 
							      }								    	}							  
							      								      }								  
							      								      return dp [ W ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS
--							      --							    --								  --
def rearrange ( a , size ) :				      static void rearrange ( int a [ ] , int size ) {		    public static void rearrange ( int [ ] a , int size ) {	  error : Exception in thread "main" java.lang.Array
    positive = 0					      	int positive = 0 , negative = 1 , temp ;		      int positive = 0 ;					  IndexOutOfBoundsException: Index -98 out of bounds
    negative = 1					      	while ( true ) {					      int negative = 1 ;					   for length 9 	at POSITIVE_ELEMENTS_EVEN_NEGATIVE_
    while ( True ) :					      	  while ( positive < size && a [ positive ] >= 0 ) positive   while ( ( positive = a [ positive ] ) != 0 ) {		  ODD_POSITIONS.f_filled(POSITIVE_ELEMENTS_EVEN_NEGA
	while ( positive < size and a [ positive ] >= 0 ) :   	  while ( negative < size && a [ negative ] <= 0 ) negative 	while ( ( positive < size ) && ( a [ positive ] >= 0 ) )  TIVE_ODD_POSITIONS.java:32) 	at POSITIVE_ELEMENTS_
	    positive = positive + 2			      	  if ( positive < size && negative < size ) {		    	  positive = positive + 2 ;				  EVEN_NEGATIVE_ODD_POSITIONS.main(POSITIVE_ELEMENTS
	while ( negative < size and a [ negative ] <= 0 ) :   	    temp = a [ positive ] ;				    	}							  _EVEN_NEGATIVE_ODD_POSITIONS.java:98)
	    negative = negative + 2			      	    a [ positive ] = a [ negative ] ;			    	while ( ( negative < size ) && ( a [ negative ] <= 0 ) )  
	if ( positive < size and negative < size ) :	      	    a [ negative ] = temp ;				    	  negative = negative + 2 ;				  
	    temp = a [ positive ]			      	  }							    	}							  
	    a [ positive ] = a [ negative ]		      	  else break ;						    	if ( ( positive < size ) && ( negative < size ) ) {	  
	    a [ negative ] = temp			      	}							    	  int temp = a [ positive ] ;				  
	else :						      }								    	  a [ positive ] = a [ negative ] ;			  
	    break					      								    	  a [ negative ] = temp ;				  
							      								    	}							  
							      								    	else {							  
							      								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY			  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY
--							      --							    --								  --
def maxProduct ( arr , n ) :				      static int maxProduct ( int [ ] arr , int n ) {		    public static int maxProduct ( int [ ] arr , int n ) {	  failure : #Results:6, 10
    if n < 3 :						      	if ( n < 3 ) return - 1 ;				      if ( n < 3 ) {						  
	return - 1					      	int max_product = Integer . MIN_VALUE ;			    	return - 1 ;						  
    max_product = - ( sys.maxsize - 1 )			      	for ( int i = 0 ;					      }								  
    for i in range ( 0 , n - 2 ) :			      	i < n - 2 ;						      int maxProduct = - ( Integer . MAX_VALUE - 1 ) ;		  
	for j in range ( i + 1 , n - 1 ) :		      	i ++ ) for ( int j = i + 1 ;				      for ( int i = 0 ;						  
	    for k in range ( j + 1 , n ) :		      	j < n - 1 ;						      i <= n - 2 ;						  
		max_product = max ( max_product , arr [ i ] * 	j ++ ) for ( int k = j + 1 ;				      i ++ ) {							  
    return max_product					      	k < n ;							    	for ( int j = i + 1 ;					  
							      	k ++ ) max_product = Math . max ( max_product , arr [ i ] * 	j <= n - 1 ;						  
							      	return max_product ;					    	j ++ ) {						  
							      }								    	  for ( int k = j + 1 ;					  
							      								    	  k <= n ;						  
							      								    	  k ++ ) {						  
							      								    	    maxProduct = Math . max ( maxProduct , arr [ i ] * ar 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return maxProduct ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1
--							      --							    --								  --
def reorder ( arr , index , n ) :			      static void reorder ( ) {					    public static void reorder ( int [ ] arr , int [ ] index , in script_not_found : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	while ( index [ i ] != i ) :			      	i < arr . length ;					      i <= n ;							  
	    oldTargetI = index [ index [ i ] ]		      	i ++ ) {						      i ++ ) {							  
	    oldTargetE = arr [ index [ i ] ]		      	  while ( index [ i ] != i ) {				    	while ( ( index [ i ] != i ) ) {			  
	    arr [ index [ i ] ] = arr [ i ]		      	    int oldTargetI = index [ index [ i ] ] ;		    	  int oldTargetI = index [ index [ i ] ] ;		  
	    index [ index [ i ] ] = index [ i ]		      	    char oldTargetE = ( char ) arr [ index [ i ] ] ;	    	  int oldTargetE = arr [ index [ i ] ] ;		  
	    index [ i ] = oldTargetI			      	    arr [ index [ i ] ] = arr [ i ] ;			    	  arr [ index [ i ] ] = arr [ i ] ;			  
	    arr [ i ] = oldTargetE			      	    index [ index [ i ] ] = index [ i ] ;		    	  index [ index [ i ] ] = index [ i ] ;			  
							      	    index [ i ] = oldTargetI ;				    	  index [ i ] = oldTargetI ;				  
							      	    arr [ i ] = oldTargetE ;				    	  arr [ i ] = oldTargetE ;				  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1
--							      --							    --								  --
def maxDiff ( arr , n ) :				      static int maxDiff ( int [ ] arr , int n ) {		    public static int maxDiff ( int [ ] arr , int n ) {		  script_not_found : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :   	i < n - 1 ;						      i < n - 1 ;						  
	    result += abs ( arr [ i ] )			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( arr [ i ] != arr [ i + 1 ] ) result += Math . abs (  	if ( ( Math . abs ( arr [ i ] ) != Math . abs ( arr [ i + 
	    pass					      	  else i ++ ;						    	  result += Math . abs ( arr [ i ] ) ;			  
    if ( arr [ n - 2 ] != arr [ n - 1 ] ) :		      	}							    	}							  
	result += abs ( arr [ n - 1 ] )			      	if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += Math . abs  	else {							  
    return result					      	return result ;						    	}							  
							      }								      }								  
							      								      if ( ( arr [ n - 2 ] != arr [ n - 1 ] ) ) {		  
							      								    	result += Math . abs ( arr [ n - 1 ] ) ;		  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			      LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			    LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS				  LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS
--							      --							    --								  --
def longestCommonSum ( arr1 , arr2 , n ) :		      static int longestCommonSum ( int n ) {			    public static int longestCommonSum ( int [ ] arr1 , int [ ] a script_not_found : None
    maxLen = 0						      	int maxLen = 0 ;					      int maxLen = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum1 = 0					      	i < n ;							      i <= n ;							  
	sum2 = 0					      	i ++ ) {						      i ++ ) {							  
	for j in range ( i , n ) :			      	  int sum1 = 0 , sum2 = 0 ;				    	int sum1 = 0 ;						  
	    sum1 += arr1 [ j ]				      	  for ( int j = i ;					    	int sum2 = 0 ;						  
	    sum2 += arr2 [ j ]				      	  j < n ;						    	for ( int j = i ;					  
	    if ( sum1 == sum2 ) :			      	  j ++ ) {						    	j < n ;							  
		len = j - i + 1				      	    sum1 += arr1 [ j ] ;				    	j ++ ) {						  
		if ( len > maxLen ) :			      	    sum2 += arr2 [ j ] ;				    	  sum1 += arr1 [ j ] ;					  
		    maxLen = len			      	    if ( sum1 == sum2 ) {				    	  sum2 += arr2 [ j ] ;					  
    return maxLen					      	      int len = j - i + 1 ;				    	  if ( ( sum1 == sum2 ) ) {				  
							      	      if ( len > maxLen ) maxLen = len ;		    	    int len = j - i + 1 ;				  
							      	    }							    	    if ( ( len > maxLen ) ) {				  
							      	  }							    	      maxLen = len ;					  
							      	}							    	    }							  
							      	return maxLen ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE
--							      --							    --								  --
def eggDrop ( n , k ) :					      static int eggDrop ( int n , int k ) {			    public static int eggDrop ( int n , int k ) {		  script_not_found : None
    if ( k == 1 or k == 0 ) :				      	if ( k == 1 || k == 0 ) return k ;			      if ( ( k == 1 ) || ( k == 0 ) ) {				  
	return k					      	if ( n == 1 ) return k ;				    	return k ;						  
    if ( n == 1 ) :					      	int min = Integer . MAX_VALUE ;				      }								  
	return k					      	int x , res ;						      if ( ( n == 1 ) ) {					  
    min = sys.maxsize					      	for ( x = 1 ;						    	return k ;						  
    for x in range ( 1 , k + 1 ) :			      	x <= k ;						      }								  
	res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , 	x ++ ) {						      int min = Integer . MAX_VALUE ;				  
	if ( res < min ) :				      	  res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDrop (    for ( int x = 1 ;						  
	    min = res					      	  if ( res < min ) min = res ;				      x <= k ;							  
    return min + 1					      	}							      x ++ ) {							  
							      	return min + 1 ;					    	int res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDro 
							      }								    	if ( ( res < min ) ) {					  
							      								    	  min = res ;						  
							      								    	}							  
							      								      }								  
							      								      return min + 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			  LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1
--							      --							    --								  --
def maxLength ( s , n ) :				      static int maxLength ( String s , int n ) {		    public static int maxLength ( String s , int n ) {		  script_not_found : None
    invalidOpenBraces = 0				      	int invalidOpenBraces = 0 ;				      int invalidOpenBraces = 0 ;				  
    invalidCloseBraces = 0				      	int invalidCloseBraces = 0 ;				      int invalidCloseBraces = 0 ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( s [ i ] == '(' ) :				      	i < n ;							      i < n ;							  
	    invalidOpenBraces += 1			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( s . charAt ( i ) == '(' ) {			    	if ( ( s . charAt ( i ) == '(' ) ) {			  
	    if ( invalidOpenBraces == 0 ) :		      	    invalidOpenBraces ++ ;				    	  invalidOpenBraces ++ ;				  
		invalidCloseBraces += 1			      	  }							    	}							  
	    else :					      	  else {						    	else {							  
		invalidOpenBraces -= 1			      	    if ( invalidOpenBraces == 0 ) {			    	  if ( ( invalidOpenBraces == 0 ) ) {			  
    return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) 	      invalidCloseBraces ++ ;				    	    invalidCloseBraces ++ ;				  
							      	    }							    	  }							  
							      	    else {						    	  else {						  
							      	      invalidOpenBraces -- ;				    	    invalidOpenBraces -- ;				  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) ;   return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) ; 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1
--							      --							    --								  --
def countPairs ( arr , n ) :				      static int countPairs ( int arr [ ] , int n ) {		    static int countPairs ( int [ ] arr , int n ) {		  success : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    Hash = set ( )					      	HashSet < Integer > Hash = new HashSet < > ( ) ;	      HashSet < Integer > Hash = new HashSet < > ( ) ;		  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	Hash.add ( arr [ i ] )				      	i < n ;							      i < n ;							  
    for i in range ( n ) :				      	i ++ ) {						      i ++ ) Hash . add ( arr [ i ] ) ;				  
	for j in range ( i + 1 , n ) :			      	  Hash . add ( arr [ i ] ) ;				      for ( int i = 0 ;						  
	    product = arr [ i ] * arr [ j ]		      	}							      i < n ;							  
	    if product in ( Hash ) :			      	for ( int i = 0 ;					      i ++ ) {							  
		result += 1				      	i < n ;							    	for ( int j = i + 1 ;					  
    return result					      	i ++ ) {						    	j < n ;							  
							      	  for ( int j = i + 1 ;					    	j ++ ) {						  
							      	  j < n ;						    	  int product = arr [ i ] * arr [ j ] ;			  
							      	  j ++ ) {						    	  if ( Hash . contains ( product ) ) result ++ ;	  
							      	    int product = arr [ i ] * arr [ j ] ;		    	}							  
							      	    if ( Hash . contains ( product ) ) {		      }								  
							      	      result ++ ;					      return result ;						  
							      	    }							    }								  
							      	  }							    								  
							      	}							    								  
							      	return result ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		      SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		    SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM			  SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM
--							      --							    --								  --
def computeLPSArray ( pat , M , lps ) :			      void computeLPSArray ( String pat , int M , int lps [ ] ) {   static void computeLPSArray ( String pat , int M , int [ ] lp script_not_found : None
    len = 0						      	int len = 0 ;						      int len = 0 ;						  
    lps [ 0 ]						      	int i = 1 ;						      lps [ 0 ] = 0 ;						  
    i = 1						      	lps [ 0 ] = 0 ;						      int i = 1 ;						  
    while i < M :					      	while ( i < M ) {					      while ( i < M ) {						  
	if pat [ i ] == pat [ len ] :			      	  if ( pat . charAt ( i ) == pat . charAt ( len ) ) {	    	if ( pat . charAt ( i ) == pat . charAt ( len ) ) {	  
	    len += 1					      	    len ++ ;						    	  len ++ ;						  
	    lps [ i ] = len				      	    lps [ i ] = len ;					    	  lps [ i ] = len ;					  
	    i += 1					      	    i ++ ;						    	  i ++ ;						  
	else :						      	  }							    	}							  
	    if len != 0 :				      	  else {						    	else {							  
		len = lps [ len - 1 ]			      	    if ( len != 0 ) {					    	  if ( len != 0 ) {					  
	    else :					      	      len = lps [ len - 1 ] ;				    	    len = lps [ len - 1 ] ;				  
		lps [ i ] = 0				      	    }							    	  }							  
		i += 1					      	    else {						    	  else {						  
							      	      lps [ i ] = len ;					    	    lps [ i ] = 0 ;					  
							      	      i ++ ;						    	    i ++ ;						  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			      MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			    MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			  MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1
--							      --							    --								  --
def calculateEnergy ( mat , n ) :			      public static int calculateEnergy ( int mat [ ] [ ] , int n ) static int calculateEnergy ( int [ ] [ ] mat , int n ) {	  success : None
    tot_energy = 0					      	int i_des , j_des , q ;					      int tot_energy = 0 ;					  
    for i in range ( n ) :				      	int tot_energy = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n ) :				      	for ( int i = 0 ;					      i < n ;							  
	    q = mat [ i ] [ j ] // n			      	i < n ;							      i ++ ) {							  
	    i_des = q					      	i ++ ) {						    	for ( int j = 0 ;					  
	    j_des = mat [ i ] [ j ] - ( n * q )		      	  for ( int j = 0 ;					    	j < n ;							  
	    tot_energy += ( abs ( i_des - i ) + abs ( j_des - 	  j < n ;						    	j ++ ) {						  
    return tot_energy					      	  j ++ ) {						    	  int q = mat [ i ] [ j ] / n ;				  
							      	    q = mat [ i ] [ j ] / n ;				    	  int iDes = q ;					  
							      	    i_des = q ;						    	  int jDes = mat [ i ] [ j ] - ( n * q ) ;		  
							      	    j_des = mat [ i ] [ j ] - ( n * q ) ;		    	  tot_energy += ( Math . abs ( iDes - i ) + Math . abs (  
							      	    tot_energy += Math . abs ( i_des - i ) + Math . abs ( j 	}							  
							      	  }							      }								  
							      	}							      return tot_energy ;					  
							      	return tot_energy ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY					      FLOOR_IN_A_SORTED_ARRAY					    FLOOR_IN_A_SORTED_ARRAY					  FLOOR_IN_A_SORTED_ARRAY
--							      --							    --								  --
def floorSearch ( arr , low , high , x ) :		      static int floorSearch ( int arr [ ] , int n , int x ) {	    public static int floorSearch ( int [ ] arr , int low , int h script_not_found : None
    if ( low > high ) :					      	if ( x >= arr [ n - 1 ] ) return n - 1 ;		      if ( ( low > high ) ) {					  
	return - 1					      	if ( x < arr [ 0 ] ) return - 1 ;			    	return - 1 ;						  
    if ( x >= arr [ high ] ) :				      	for ( int i = 1 ;					      }								  
	return high					      	i < n ;							      if ( ( x >= arr [ high ] ) ) {				  
    mid = int ( ( low + high ) / 2 )			      	i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;		    	return high ;						  
    if ( arr [ mid ] == x ) :				      	return - 1 ;						      }								  
	return mid					      }								      int mid = ( int ) ( ( low + high ) / 2 ) ;		  
    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] 								      if ( ( arr [ mid ] == x ) ) {				  
	return mid - 1					      								    	return mid ;						  
    if ( x < arr [ mid ] ) :				      								      }								  
	return floorSearch ( arr , low , mid - 1 , x )	      								      if ( ( mid > 0 ) && ( arr [ mid - 1 ] <= x ) && ( x < arr [ 
    return floorSearch ( arr , mid + 1 , high , x )	      								    	return mid - 1 ;					  
							      								      }								  
							      								      if ( ( x < arr [ mid ] ) ) {				  
							      								    	return floorSearch ( arr , low , mid - 1 , x ) ;	  
							      								      }								  
							      								      return floorSearch ( arr , mid + 1 , high , x ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY		      MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY		    MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY			  MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY
--							      --							    --								  --
def minOperation ( arr , n ) :				      public static int minOperation ( int arr [ ] , int n ) {	    public static int minOperation ( int [ ] arr , int n ) {	  failure : #Results:4, 10
    Hash = defaultdict ( lambda : 0 )			      	HashMap < Integer , Integer > hash = new HashMap < Integer    Map < Integer , Integer > Hash = new TreeMap < > ( ) ;	  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	Hash [ arr [ i ] ] += 1				      	i < n ;							      i <= n ;							  
    max_count = 0					      	i ++ ) if ( hash . containsKey ( arr [ i ] ) ) hash . put (   i ++ ) {							  
    for i in Hash :					      	else hash . put ( arr [ i ] , 1 ) ;			    	Hash . put ( arr [ i ] , 1 ) ;				  
	if max_count < Hash [ i ] :			      	int max_count = 0 ;					      }								  
	    max_count = Hash [ i ]			      	Set < Integer > s = hash . keySet ( ) ;			      int maxCount = 0 ;					  
    return n - max_count				      	for ( int i : s ) if ( max_count < hash . get ( i ) ) max_c   for ( Integer i : Hash . keySet ( ) ) {			  
							      	return ( n - max_count ) ;				    	if ( maxCount < Hash . get ( i ) ) {			  
							      }								    	  maxCount = Hash . get ( i ) ;				  
							      								    	}							  
							      								      }								  
							      								      return n - maxCount ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1	      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1
--							      --							    --								  --
def maxRepeating ( str ) :				      static char maxRepeating ( String str ) {			    public static String maxRepeating ( String str ) {		  error : MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_ST
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  RING_1.java:53: error: incompatible types: char ca
    count = 0						      	int count = 0 ;						      int count = 0 ;						  nnot be converted to String	return res ;
    res = str [ 0 ]					      	char res = str . charAt ( 0 ) ;				      char res = str . charAt ( 0 ) ;				    ^ MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING
    cur_count = 1					      	int cur_count = 1 ;					      int curCount = 1 ;					  _1.java:72: error: bad operand types for binary op
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  erator '=='	      if(f_filled(param0.get(i)) ==
	if ( i < n - 1 and str [ i ] == str [ i + 1 ] ) :     	i < n ;							      i < n ;							  f_gold(param0.get(i)))
	    cur_count += 1				      	i ++ ) {						      i ++ ) {							  	  ^   first type:  String   second type: cha
	else :						      	  if ( i < n - 1 && str . charAt ( i ) == str . charAt ( i  	if ( ( i < n - 1 ) && str . charAt ( i ) == str . charAt  r 2 errors
	    if cur_count > count :			      	  else {						    	  curCount ++ ;						  
		count = cur_count			      	    if ( cur_count > count ) {				    	}							  
		res = str [ i ]				      	      count = cur_count ;				    	else {							  
	    cur_count = 1				      	      res = str . charAt ( i ) ;			    	  if ( curCount > count ) {				  
    return res						      	    }							    	    count = curCount ;					  
							      	    cur_count = 1 ;					    	    res = str . charAt ( i ) ;				  
							      	  }							    	  }							  
							      	}							    	  curCount = 1 ;					  
							      	return res ;						    	}							  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ARRANGEMENT_QUEUE_GIVEN_TIME			      FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				    FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				  FIND_ARRANGEMENT_QUEUE_GIVEN_TIME
--							      --							    --								  --
def solve ( n , t , p ) :				      static void solve ( int n , int t , char s [ ] ) {	    public static void solve ( int n , int t , String p ) {	  script_not_found : None
    s = list ( p )					      	for ( int i = 0 ;					      StringBuilder sb = new StringBuilder ( p ) ;		  
    for i in range ( 0 , t ) :				      	i < t ;							      for ( int i = 0 ;						  
	for j in range ( 0 , n - 1 ) :			      	i ++ ) for ( int j = 0 ;				      i <= t ;							  
	    if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :    	j < n - 1 ;						      i ++ ) {							  
		temp = s [ j ]				      	j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {	    	for ( int j = 0 ;					  
		s [ j ] = s [ j + 1 ]			      	  char temp = s [ j ] ;					    	j <= n - 1 ;						  
		s [ j + 1 ] = temp			      	  s [ j ] = s [ j + 1 ] ;				    	j ++ ) {						  
		j = j + 1				      	  s [ j + 1 ] = temp ;					    	  if ( ( sb . charAt ( j ) == 'B' ) && ( sb . charAt ( j  
    print ( ''.join ( s ) )				      	  j ++ ;						    	    char temp = sb . charAt ( j ) ;			  
							      	}							    	    sb . setCharAt ( j , sb . charAt ( j + 1 ) ) ;	  
							      	System . out . print ( s ) ;				    	    sb . setCharAt ( j + 1 , temp ) ;			  
							      }								    	    j = j + 1 ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( sb . toString ( ) ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
def sumAtKthLevel ( tree , k ) :			      static int sumAtKthLevel ( String tree , int k ) {	    static int sumAtKthLevel ( String tree , int k ) {		  success : None
    level = - 1						      	int level = - 1 ;					      int level = - 1 ;						  
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    n = len ( tree )					      	int n = tree . length ( ) ;				      int n = tree . length ( ) ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( tree [ i ] == '(' ) :			      	i < n ;							      i < n ;							  
	    level += 1					      	i ++ ) {						      i ++ ) {							  
	elif ( tree [ i ] == ')' ) :			      	  if ( tree . charAt ( i ) == '(' ) level ++ ;		    	if ( ( tree . charAt ( i ) == '(' ) ) {			  
	    level -= 1					      	  else if ( tree . charAt ( i ) == ')' ) level -- ;	    	  level ++ ;						  
	else :						      	  else {						    	}							  
	    if ( level == k ) :				      	    if ( level == k ) sum += ( tree . charAt ( i ) - '0' )  	else if ( ( tree . charAt ( i ) == ')' ) ) {		  
		sum += ( ord ( tree [ i ] ) - ord ( '0' ) )   	  }							    	  level -- ;						  
    return sum						      	}							    	}							  
							      	return sum ;						    	else {							  
							      }								    	  if ( ( level == k ) ) {				  
							      								    	    sum += ( ( int ) tree . charAt ( i ) - '0' ) ;	  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT		      FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			    FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			  FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT
--							      --							    --								  --
def findDuplicateparenthesis ( string ) :		      static boolean findDuplicateparenthesis ( String s ) {	    public static boolean findDuplicateParenthesis ( String strin success : None
    Stack = [ ]						      	Stack < Character > Stack = new Stack < > ( ) ;		      Stack < Character > Stack = new Stack < > ( ) ;		  
    for ch in string :					      	char [ ] str = s . toCharArray ( ) ;			      for ( int i = 0 ;						  
	if ch == ')' :					      	for ( char ch : str ) {					      i < string . length ( ) ;					  
	    top = Stack.pop ( )				      	  if ( ch == ')' ) {					      i ++ ) {							  
	    elementsInside = 0				      	    char top = Stack . peek ( ) ;			    	char ch = string . charAt ( i ) ;			  
	    while top != '(' :				      	    Stack . pop ( ) ;					    	if ( ch == ')' ) {					  
		elementsInside += 1			      	    int elementsInside = 0 ;				    	  char top = Stack . pop ( ) ;				  
		top = Stack.pop ( )			      	    while ( top != '(' ) {				    	  int elementsInside = 0 ;				  
	    if elementsInside < 1 :			      	      elementsInside ++ ;				    	  while ( top != '(' ) {				  
		return True				      	      top = Stack . peek ( ) ;				    	    elementsInside ++ ;					  
	else :						      	      Stack . pop ( ) ;					    	    top = Stack . pop ( ) ;				  
	    Stack.append ( ch )				      	    }							    	  }							  
    return False					      	    if ( elementsInside < 1 ) {				    	  if ( elementsInside < 1 ) {				  
							      	      return true ;					    	    return true ;					  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	  else {						    	else {							  
							      	    Stack . push ( ch ) ;				    	  Stack . push ( ch ) ;					  
							      	  }							    	}							  
							      	}							      }								  
							      	return false ;						      return false ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MIDDLE_ROW_COLUMN_MATRIX				      SUM_MIDDLE_ROW_COLUMN_MATRIX				    SUM_MIDDLE_ROW_COLUMN_MATRIX				  SUM_MIDDLE_ROW_COLUMN_MATRIX
--							      --							    --								  --
def middlesum ( mat , n ) :				      static void middlesum ( int mat [ ] [ ] , int n ) {	    public static void middleSum ( int [ ] [ ] mat , int n ) {	  script_not_found : None
    row_sum = 0						      	int row_sum = 0 , col_sum = 0 ;				      int rowSum = 0 ;						  
    col_sum = 0						      	for ( int i = 0 ;					      int colSum = 0 ;						  
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  
	row_sum += mat [ n // 2 ] [ i ]			      	i ++ ) row_sum += mat [ n / 2 ] [ i ] ;			      i < n ;							  
    print ( "Sum of middle row = " , row_sum )		      	System . out . println ( "Sum of middle row = " + row_sum )   i ++ ) {							  
    for i in range ( n ) :				      	for ( int i = 0 ;					    	rowSum += mat [ n / 2 ] [ i ] ;				  
	col_sum += mat [ i ] [ n // 2 ]			      	i < n ;							      }								  
    print ( "Sum of middle column = " , col_sum )	      	i ++ ) col_sum += mat [ i ] [ n / 2 ] ;			      System . out . println ( "Sum of middle row = " + rowSum )  
							      	System . out . println ( "Sum of middle column = " + col_su   for ( int i = 0 ;						  
							      }								      i < n ;							  
							      								      i ++ ) {							  
							      								    	colSum += mat [ i ] [ n / 2 ] ;				  
							      								      }								  
							      								      System . out . println ( "Sum of middle column = " + colSum 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	      COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		    COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		  COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES
--							      --							    --								  --
def countarray ( n , k , x ) :				      public static int countarray ( int n , int k , int x ) {	    public static int countarray ( int n , int k , int x ) {	  success : None
    dp = list ( )					      	int [ ] dp = new int [ 109 ] ;				      int [ ] dp = new int [ n ] ;				  
    dp.append ( 0 )					      	dp [ 0 ] = 0 ;						      dp [ 0 ] = 0 ;						  
    dp.append ( 1 )					      	dp [ 1 ] = 1 ;						      dp [ 1 ] = 1 ;						  
    i = 2						      	for ( int i = 2 ;					      int i = 2 ;						  
    while i < n :					      	i < n ;							      while ( i < n ) {						  
	dp.append ( ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp 	i ++ ) dp [ i ] = ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp 	dp [ i ] = ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp [ i  
	i = i + 1					      	return ( x == 1 ? ( k - 1 ) * dp [ n - 2 ] : dp [ n - 1 ] ) 	i = i + 1 ;						  
    return ( ( k - 1 ) * dp [ n - 2 ] if x == 1 else dp [ n - }								      }								  
							      								      return ( x == 1 ) ? ( ( k - 1 ) * dp [ n - 2 ] ) : dp [ n - 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	      WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	    WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	  WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER
--							      --							    --								  --
def countWays ( s ) :					      static int countWays ( String s ) {			    static int countWays ( String s ) {				  script_not_found : None
    count = [ 0 ] * 26					      	int count [ ] = new int [ 26 ] ;			      int [ ] count = new int [ 26 ] ;				  
    for x in s :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count [ ord ( x ) - ord ( 'a' ) ] = ( count [ ord ( x 	i < s . length ( ) ;					      i < s . length ( ) ;					  
    count [ ord ( s [ 0 ] ) - ord ( 'a' ) ] = 1		      	i ++ ) count [ s . charAt ( i ) - 'a' ] ++ ;		      i ++ ) {							  
    ans = 1						      	count [ s . charAt ( 0 ) - 'a' ] = 1 ;			    	count [ s . charAt ( i ) - 'a' ] = ( count [ s . charAt ( 
    for i in range ( 26 ) :				      	int ans = 1 ;						      }								  
	if ( count [ i ] != 0 ) :			      	for ( int i = 0 ;					      count [ s . charAt ( 0 ) - 'a' ] = 1 ;			  
	    ans *= count [ i ]				      	i < 26 ;						      int ans = 1 ;						  
    return ans						      	++ i ) if ( count [ i ] != 0 ) ans *= count [ i ] ;	      for ( int i = 0 ;						  
							      	return ans ;						      i < 26 ;							  
							      }								      i ++ ) {							  
							      								    	if ( ( count [ i ] != 0 ) ) {				  
							      								    	  ans *= count [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		      EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		    EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		  EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND
--							      --							    --								  --
def calculateSum ( arr , n ) :				      public static int calculateSum ( String arr [ ] , int n ) {   static int calculateSum ( String [ ] arr , int n ) {	  script_not_found : None
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) ) {					  
	return 0					      	String s = arr [ 0 ] ;					    	return 0 ;						  
    s = arr [ 0 ]					      	int value = Integer . parseInt ( s ) ;			      }								  
    value = int ( s )					      	int sum = value ;					      String s = arr [ 0 ] ;					  
    sum = value						      	for ( int i = 2 ;					      int value = Integer . parseInt ( s ) ;			  
    for i in range ( 2 , n , 2 ) :			      	i < n ;							      int sum = value ;						  
	s = arr [ i ]					      	i = i + 2 ) {						      for ( int i = 2 ;						  
	value = int ( s )				      	  s = arr [ i ] ;					      i < n ;							  
	operation = arr [ i - 1 ] [ 0 ]			      	  value = Integer . parseInt ( s ) ;			      i += 2 ) {						  
	if ( operation == '+' ) :			      	  char operation = arr [ i - 1 ] . charAt ( 0 ) ;	    	s = arr [ i ] ;						  
	    sum += value				      	  if ( operation == '+' ) sum += value ;		    	value = Integer . parseInt ( s ) ;			  
	else :						      	  else sum -= value ;					    	char operation = arr [ i - 1 ] . charAt ( 0 ) ;		  
	    sum -= value				      	}							    	if ( ( operation == '+' ) ) {				  
    return sum						      	return sum ;						    	  sum += value ;					  
							      }								    	}							  
							      								    	else {							  
							      								    	  sum -= value ;					  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
def countSolutions ( n ) :				      static int countSolutions ( int n ) {			    static int countSolutions ( int n ) {			  success : None
    x = 0						      	int x = 0 , yCount , res = 0 ;				      int x = 0 ;						  
    res = 0						      	for ( yCount = 0 ;					      int res = 0 ;						  
    yCount = 0						      	yCount * yCount < n ;					      int yCount = 0 ;						  
    while ( yCount * yCount < n ) :			      	yCount ++ ) ;						      while ( ( yCount * yCount ) < n ) {			  
	yCount = yCount + 1				      	while ( yCount != 0 ) {					    	yCount = yCount + 1 ;					  
    while ( yCount != 0 ) :				      	  res += yCount ;					      }								  
	res = res + yCount				      	  x ++ ;						      while ( ( yCount != 0 ) ) {				  
	x = x + 1					      	  while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCoun 	res = res + yCount ;					  
	while ( yCount != 0 and ( x * x + ( yCount - 1 ) * (  	}							    	x = x + 1 ;						  
	    yCount = yCount - 1				      	return res ;						    	while ( ( yCount != 0 ) && ( x * x + ( yCount - 1 ) * ( y 
    return res						      }								    	  yCount = yCount - 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU
--							      --							    --								  --
def nCrModp ( n , r , p ) :				      static int nCrModp ( int n , int r , int p ) {		    public static int nCrModp ( int n , int r , int p ) {	  success : None
    C = [ 0 for i in range ( r + 1 ) ]			      	int C [ ] = new int [ r + 1 ] ;				      int [ ] C = new int [ r + 1 ] ;				  
    C [ 0 ] = 1						      	Arrays . fill ( C , 0 ) ;				      for ( int i = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	C [ 0 ] = 1 ;						      i < r ;							  
	for j in range ( min ( i , r ) , 0 , - 1 ) :	      	for ( int i = 1 ;					      i ++ ) {							  
	    C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p	      	i <= n ;						    	C [ i ] = 0 ;						  
    return C [ r ]					      	i ++ ) {						      }								  
							      	  for ( int j = Math . min ( i , r ) ;			      C [ 0 ] = 1 ;						  
							      	  j > 0 ;						      for ( int i = 1 ;						  
							      	  j -- ) C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p ;	      i <= n ;							  
							      	}							      i ++ ) {							  
							      	return C [ r ] ;					    	for ( int j = Math . min ( i , r ) ;			  
							      }								    	j > 0 ;							  
							      								    	j -- ) {						  
							      								    	  C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p ;		  
							      								    	}							  
							      								      }								  
							      								      return C [ r ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE   MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE   MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE	  MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE
--							      --							    --								  --
def findMinRooms ( slots , n , m ) :			      static int findMinRooms ( String slots [ ] , int n , int m )  static int findMinRooms ( int [ ] [ ] slots , int n , int m ) script_not_found : None
    counts = [ 0 ] * m					      	int counts [ ] = new int [ m ] ;			      int [ ] counts = new int [ m ] ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( m ) :				      	i < m ;							      i < n ;							  
	    if ( slots [ i ] [ j ] == '1' ) :		      	i ++ ) counts [ i ] = 0 ;				      i ++ ) {							  
		counts [ j ] += 1			      	for ( int i = 0 ;					    	for ( int j = 0 ;					  
    return max ( counts )				      	i < n ;							    	j < m ;							  
							      	i ++ ) for ( int j = 0 ;				    	j ++ ) {						  
							      	j < m ;							    	  if ( ( slots [ i ] [ j ] == '1' ) ) {			  
							      	j ++ ) if ( slots [ i ] . charAt ( j ) == '1' ) counts [ j  	    counts [ j ] ++ ;					  
							      	int max = - 1 ;						    	  }							  
							      	for ( int i = 0 ;					    	}							  
							      	i < m ;							      }								  
							      	i ++ ) if ( max < counts [ i ] ) max = counts [ i ] ;	      return Collections . max ( counts ) ;			  
							      	return max ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			      DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			    DELETE_CONSECUTIVE_WORDS_SEQUENCE_1				  DELETE_CONSECUTIVE_WORDS_SEQUENCE_1
--							      --							    --								  --
def removeConsecutiveSame ( v ) :			      static int removeConsecutiveSame ( Vector < String > v ) {    public static int removeConsecutiveSame ( String [ ] v ) {	  script_not_found : None
    st = [ ]						      	Stack < String > st = new Stack < > ( ) ;		      Stack < String > st = new Stack < > ( ) ;			  
    for i in range ( len ( v ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( len ( st ) == 0 ) :			      	i < v . size ( ) ;					      i < v . length ;						  
	    st.append ( v [ i ] )			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( st . empty ( ) ) st . push ( v . get ( i ) ) ;	    	if ( ( st . size ( ) == 0 ) ) {				  
	    Str = st [ - 1 ]				      	  else {						    	  st . push ( v [ i ] ) ;				  
	    if ( Str == v [ i ] ) :			      	    String str = st . peek ( ) ;			    	}							  
		st.pop ( )				      	    if ( str . equals ( v . get ( i ) ) ) st . pop ( ) ;    	else {							  
	    else :					      	    else st . push ( v . get ( i ) ) ;			    	  String Str = st . peek ( ) ;				  
		st.append ( v [ i ] )			      	  }							    	  if ( ( Str == v [ i ] ) ) {				  
    return len ( st )					      	}							    	    st . pop ( ) ;					  
							      	return st . size ( ) ;					    	  }							  
							      }								    	  else {						  
							      								    	    st . push ( v [ i ] ) ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return st . size ( ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		      FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		    FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		  FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS
--							      --							    --								  --
def minDist ( arr , n , x , y ) :			      int minDist ( int arr [ ] , int n , int x , int y ) {	    public static int minDist ( int [ ] arr , int n , int x , int failure : #Results:7, 10
    min_dist = 99999999					      	int i , j ;						      int minDist = 99999999 ;					  
    for i in range ( n ) :				      	int min_dist = Integer . MAX_VALUE ;			      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	for ( i = 0 ;						      i < n ;							  
	    if ( x == arr [ i ] and y == arr [ j ] or y == ar 	i < n ;							      i ++ ) {							  
		min_dist = abs ( i - j )		      	i ++ ) {						    	for ( int j = i + 1 ;					  
	return min_dist					      	  for ( j = i + 1 ;					    	j < n ;							  
							      	  j < n ;						    	j ++ ) {						  
							      	  j ++ ) {						    	  if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i 
							      	    if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i 	    minDist = Math . abs ( i - j ) ;			  
							      	  }							    	  }							  
							      	}							    	}							  
							      	return min_dist ;					      }								  
							      }								      return minDist ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS     SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS	    SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    static int findSum ( int n ) {				  success : None
    arr = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] 	int [ ] [ ] arr = new int [ n ] [ n ] ;			      int arr [ ] [ ] = new int [ n ] [ n ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int x = 0 ;						  
	for j in range ( n ) :				      	i < n ;							      x < n ;							  
	    arr [ i ] [ j ] = abs ( i - j )		      	i ++ ) for ( int j = 0 ;				      x ++ ) for ( int y = 0 ;					  
    sum = 0						      	j < n ;							      y < n ;							  
    for i in range ( n ) :				      	j ++ ) arr [ i ] [ j ] = Math . abs ( i - j ) ;		      y ++ ) arr [ x ] [ y ] = 0 ;				  
	for j in range ( n ) :				      	int sum = 0 ;						      for ( int i = 0 ;						  
	    sum += arr [ i ] [ j ]			      	for ( int i = 0 ;					      i < n ;							  
    return sum						      	i < n ;							      i ++ ) for ( int j = 0 ;					  
							      	i ++ ) for ( int j = 0 ;				      j < n ;							  
							      	j < n ;							      j ++ ) arr [ i ] [ j ] = Math . abs ( i - j ) ;		  
							      	j ++ ) sum += arr [ i ] [ j ] ;				      int sum = 0 ;						  
							      	return sum ;						      for ( int i = 0 ;						  
							      }								      i < n ;							  
							      								      i ++ ) for ( int j = 0 ;					  
							      								      j < n ;							  
							      								      j ++ ) sum += arr [ i ] [ j ] ;				  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		      ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		    ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		  ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE
--							      --							    --								  --
def solveQuery ( start , end , arr ) :			      static int solveQuery ( int start , int end , int arr [ ] ) { static int solveQuery ( int start , int end , int [ ] arr ) { failure : #Results:8, 10
    frequency = dict ( )				      	Map < Integer , Integer > mp = new HashMap < > ( ) ;	      Map < Integer , Integer > frequency = new HashMap < > ( ) ; 
    for i in range ( start , end + 1 ) :		      	for ( int i = start ;					      for ( int i = start ;					  
	if arr [ i ] in frequency.keys ( ) :		      	i <= end ;						      i <= end ;						  
	    frequency [ arr [ i ] ] += 1		      	i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == nul   i ++ ) {							  
	else :						      	int count = 0 ;						    	if ( frequency . keySet ( ) . contains ( arr [ i ] ) ) {  
	    frequency [ arr [ i ] ] = 1			      	for ( Map . Entry < Integer , Integer > entry : mp . entryS 	  frequency . put ( arr [ i ] , 1 ) ;			  
    count = 0						      	return count ;						    	}							  
    for x in frequency :				      }								    	else {							  
	if x == frequency [ x ] :			      								    	  frequency . put ( arr [ i ] , 1 ) ;			  
	    count += 1					      								    	}							  
    return count					      								      }								  
							      								      int count = 0 ;						  
							      								      for ( Integer x : frequency . keySet ( ) ) {		  
							      								    	if ( x == frequency . get ( x ) ) {			  
							      								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM					      KNAPSACK_PROBLEM						    KNAPSACK_PROBLEM						  KNAPSACK_PROBLEM
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int [ ] wt , int [ ] val script_not_found : None
    if n == 0 or W == 0 :				      	if ( n == 0 || W == 0 ) return 0 ;			      if ( n == 0 || W == 0 ) return 0 ;			  
	return 0					      	if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n    if ( ( wt [ n - 1 ] ) > W ) return knapSack ( W , wt , val  
    if ( wt [ n - 1 ] > W ) :				      	else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1   else return Math . max ( val [ n - 1 ] + knapSack ( W - wt  
	return knapSack ( W , wt , val , n - 1 )	      }								    }								  
    else :						      								    								  
	return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			      NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			    NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			  NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS
--							      --							    --								  --
def numberOfPermWithKInversion ( N , K ) :		      static int numberOfPermWithKInversion ( int N , int K ) {	    public static int numberOfPermWithKInversion ( int N , int K  script_not_found : None
    if ( N == 0 ) : return 0				      	if ( N == 0 ) return 0 ;				      if ( ( N == 0 ) ) return 0 ;				  
    if ( K == 0 ) : return 1				      	if ( K == 0 ) return 1 ;				      if ( ( K == 0 ) ) return 1 ;				  
    if ( memo [ N ] [ K ] != 0 ) :			      	if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ] ;	      if ( ( memo [ N ] [ K ] != 0 ) ) return memo [ N ] [ K ] ;  
	return memo [ N ] [ K ]				      	int sum = 0 ;						      int sum = 0 ;						  
    sum = 0						      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for i in range ( K + 1 ) :				      	i <= K ;						      i <= K ;							  
	if ( i <= N - 1 ) :				      	i ++ ) {						      i ++ ) {							  
	    sum += numberOfPermWithKInversion ( N - 1 , K - i 	  if ( i <= N - 1 ) sum += numberOfPermWithKInversion ( N - 	if ( ( i <= N - 1 ) ) {					  
    memo [ N ] [ K ] = sum				      	}							    	  sum += numberOfPermWithKInversion ( N - 1 , K - i ) ;	  
    return sum						      	memo [ N ] [ K ] = sum ;				    	}							  
							      	return sum ;						      }								  
							      }								      memo [ N ] [ K ] = sum ;					  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			      K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			    K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			  K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS
--							      --							    --								  --
def KMaxCombinations ( A , B , N , K ) :		      static void KMaxCombinations ( int A [ ] , int B [ ] , int N  public static void KMaxCombinations ( int [ ] A , int [ ] B , script_not_found : None
    pq = PriorityQueue ( )				      	PriorityQueue < Integer > pq = new PriorityQueue < Integer    PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;  
    for i in range ( 0 , N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , N ) :			      	i < N ;							      i <= N ;							  
	    a = A [ i ] + B [ j ]			      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
	    pq.put ( ( - a , a ) )			      	j < N ;							    	for ( int j = 0 ;					  
    count = 0						      	j ++ ) pq . add ( A [ i ] + B [ j ] ) ;			    	j <= N ;						  
    while ( count < K ) :				      	int count = 0 ;						    	j ++ ) {						  
	print ( pq.get ( ) [ 1 ] )			      	while ( count < K ) {					    	  int a = A [ i ] + B [ j ] ;				  
	count = count + 1				      	  System . out . println ( pq . peek ( ) ) ;		    	  pq . add ( new Integer ( - a ) ) ;			  
							      	  pq . remove ( ) ;					    	}							  
							      	  count ++ ;						      }								  
							      	}							      int count = 0 ;						  
							      }								      while ( ( count < K ) ) {					  
							      								    	System . out . println ( pq . poll ( ) . intValue ( ) ) ; 
							      								    	count = count + 1 ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_BONACCI_NUMBERS_1					      N_BONACCI_NUMBERS_1					    N_BONACCI_NUMBERS_1						  N_BONACCI_NUMBERS_1
--							      --							    --								  --
def bonacciseries ( n , m ) :				      static void bonacciseries ( int n , int m ) {		    public static void bonacciSeries ( int n , int m ) {	  script_not_found : None
    a = [ 0 for i in range ( m ) ]			      	int a [ ] = new int [ m ] ;				      int [ ] a = new int [ m ] ;				  
    a [ n - 1 ] = 1					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    a [ n ] = 1						      	i < m ;							      i < m ;							  
    for i in range ( n + 1 , m ) :			      	i ++ ) a [ i ] = 0 ;					      i ++ ) a [ i ] = 0 ;					  
	a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ]	      	a [ n - 1 ] = 1 ;					      a [ n - 1 ] = 1 ;						  
    for i in range ( 0 , m ) :				      	a [ n ] = 1 ;						      a [ n ] = 1 ;						  
	print ( a [ i ] , end = " " )			      	for ( int i = n + 1 ;					      for ( int i = n + 1 ;					  
							      	i < m ;							      i < m ;							  
							      	i ++ ) a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ;	      i ++ ) a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ;	  
							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
							      	i < m ;							      i <= m ;							  
							      	i ++ ) System . out . print ( a [ i ] + " " ) ;		      i ++ ) System . out . print ( a [ i ] + " " ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			      PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			    PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			  PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
def sequence ( n ) :					      public static void sequence ( int n ) {			    public static void sequence ( int n ) {			  script_not_found : None
    f = [ 0 , 1 , 1 ]					      	int f [ ] = new int [ n + 1 ] ;				      int [ ] f = {						  
    print ( f [ 1 ] , end = " " ) ,			      	f [ 0 ] = 0 ;						    	0 , 1 , 1 }						  
    print ( f [ 2 ] , end = " " ) ,			      	f [ 1 ] = 1 ;						    	;							  
    for i in range ( 3 , n + 1 ) :			      	f [ 2 ] = 1 ;						    	System . out . print ( f [ 1 ] + " " ) ;		  
	f.append ( f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  	System . out . print ( f [ 1 ] + " " + f [ 2 ] + " " ) ;    	System . out . print ( f [ 2 ] + " " ) ;		  
	print ( f [ i ] , end = " " ) ,			      	for ( int i = 3 ;					    	for ( int i = 3 ;					  
							      	i <= n ;						    	i <= n ;						  
							      	i ++ ) {						    	i ++ ) {						  
							      	  f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	    	  f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	  
							      	  System . out . print ( f [ i ] + " " ) ;		    	  System . out . print ( f [ i ] + " " ) ;		  
							      	}							    	}							  
							      }								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION     MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	    MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	  MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION
--							      --							    --								  --
def maxSubArraySumRepeated ( a , n , k ) :		      static int maxSubArraySumRepeated ( int a [ ] , int n , int k public static int maxSubArraySumRepeated ( int [ ] a , int n  failure : #Results:8, 10
    max_so_far = - 2147483648				      	int max_so_far = 0 ;					      int maxSoFar = - 2147483648 ;				  
    max_ending_here = 0					      	int INT_MIN , max_ending_here = 0 ;			      int maxEndingHere = 0 ;					  
    for i in range ( n * k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	max_ending_here = max_ending_here + a [ i % n ]	      	i < n * k ;						      i < n * k ;						  
	if ( max_so_far < max_ending_here ) :		      	i ++ ) {						      i ++ ) {							  
	    max_so_far = max_ending_here		      	  max_ending_here = max_ending_here + a [ i % n ] ;	    	maxEndingHere = maxEndingHere + a [ i % n ] ;		  
	if ( max_ending_here < 0 ) :			      	  if ( max_so_far < max_ending_here ) max_so_far = max_endi 	if ( ( maxSoFar < maxEndingHere ) ) {			  
	    max_ending_here = 0				      	  if ( max_ending_here < 0 ) max_ending_here = 0 ;	    	  maxSoFar = maxEndingHere ;				  
    return max_so_far					      	}							    	}							  
							      	return max_so_far ;					    	if ( ( maxEndingHere < 0 ) ) {				  
							      }								    	  maxEndingHere = 0 ;					  
							      								    	}							  
							      								      }								  
							      								      return maxSoFar ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL
--							      --							    --								  --
def findMinimumAngle ( arr , n ) :			      public static int findMinimumAngle ( int arr [ ] , int n ) {  static int findMinimumAngle ( int [ ] arr , int n ) {	  success : None
    l = 0						      	int l = 0 , sum = 0 , ans = 360 ;			      int l = 0 ;						  
    _sum = 0						      	for ( int i = 0 ;					      int _sum = 0 ;						  
    ans = 360						      	i < n ;							      int ans = 360 ;						  
    for i in range ( n ) :				      	i ++ ) {						      for ( int i = 0 ;						  
	_sum += arr [ i ]				      	  sum += arr [ i ] ;					      i < n ;							  
	while _sum >= 180 :				      	  while ( sum >= 180 ) {				      i ++ ) {							  
	    ans = min ( ans , 2 * abs ( 180 - _sum ) )	      	    ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) 	_sum += arr [ i ] ;					  
	    _sum -= arr [ l ]				      	    sum -= arr [ l ] ;					    	while ( _sum >= 180 ) {					  
	    l += 1					      	    l ++ ;						    	  ans = Math . min ( ans , 2 * Math . abs ( 180 - _sum )  
	ans = min ( ans , 2 * abs ( 180 - _sum ) )	      	  }							    	  _sum -= arr [ l ] ;					  
    return ans						      	  ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ; 	  l ++ ;						  
							      	}							    	}							  
							      	return ans ;						    	ans = Math . min ( ans , 2 * Math . abs ( 180 - _sum ) )  
							      }								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION			      SORTING_USING_TRIVIAL_HASH_FUNCTION			    SORTING_USING_TRIVIAL_HASH_FUNCTION				  SORTING_USING_TRIVIAL_HASH_FUNCTION
--							      --							    --								  --
def sortUsingHash ( a , n ) :				      static void sortUsingHash ( int a [ ] , int n ) {		    static void sortUsingHash ( int [ ] a , int n ) {		  script_not_found : None
    Max = max ( a )					      	int max = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ;    int Max = Math . max ( a . length , 0 ) ;			  
    Hash = [ 0 ] * ( Max + 1 )				      	int hash [ ] = new int [ max + 1 ] ;			      int [ ] Hash = new int [ Max + 1 ] ;			  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	Hash [ a [ i ] ] += 1				      	i < n ;							      i <= n ;							  
    for i in range ( 0 , Max + 1 ) :			      	i ++ ) hash [ a [ i ] ] += 1 ;				      i ++ ) {							  
	if Hash [ i ] != 0 :				      	for ( int i = 0 ;					    	Hash [ a [ i ] ] ++ ;					  
	    for j in range ( 0 , Hash [ i ] ) :		      	i <= max ;						      }								  
		print ( i , end = " " )			      	i ++ ) {						      for ( int i = 0 ;						  
							      	  if ( hash [ i ] != 0 ) {				      i <= Max ;						  
							      	    for ( int j = 0 ;					      i ++ ) {							  
							      	    j < hash [ i ] ;					    	if ( Hash [ i ] != 0 ) {				  
							      	    j ++ ) {						    	  for ( int j = 0 ;					  
							      	      System . out . print ( i + " " ) ;		    	  j <= Hash [ i ] ;					  
							      	    }							    	  j ++ ) {						  
							      	  }							    	    System . out . print ( i + " " ) ;			  
							      	}							    	  }							  
							      }								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		      FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		    FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		  FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING
--							      --							    --								  --
def count ( a , b , m , n ) :				      static int count ( String a , String b , int m , int n ) {    public static int count ( String a , String b , int m , int n script_not_found : None
    if ( ( m == 0 and n == 0 ) or n == 0 ) :		      	if ( ( m == 0 && n == 0 ) || n == 0 ) return 1 ;	      if ( ( ( m == 0 && n == 0 ) || n == 0 ) ) {		  
	return 1					      	if ( m == 0 ) return 0 ;				    	return 1 ;						  
    if ( m == 0 ) :					      	if ( a . charAt ( m - 1 ) == b . charAt ( n - 1 ) ) return    }								  
	return 0					      	else return count ( a , b , m - 1 , n ) ;		      if ( ( m == 0 ) ) {					  
    if ( a [ m - 1 ] == b [ n - 1 ] ) :			      }								    	return 0 ;						  
	return ( count ( a , b , m - 1 , n - 1 ) + count ( a  								      }								  
    else :						      								      if ( ( a . charAt ( m - 1 ) == b . charAt ( n - 1 ) ) ) {	  
	return count ( a , b , m - 1 , n )		      								    	return ( count ( a , b , m - 1 , n - 1 ) + count ( a , b  
							      								      }								  
							      								      else {							  
							      								    	return count ( a , b , m - 1 , n ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS	      COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		    COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		  COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS
--							      --							    --								  --
def countWords ( stri , n ) :				      static int countWords ( String str [ ] , int n ) {	    static int countWords ( String [ ] stri , int n ) {		  success : None
    m = dict ( )					      	HashMap < String , Integer > m = new HashMap < > ( ) ;	      Map < String , Integer > m = new HashMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	m [ stri [ i ] ] = m.get ( stri [ i ] , 0 ) + 1	      	i < n ;							      i < n ;							  
    res = 0						      	i ++ ) {						      i ++ ) {							  
    for i in m.values ( ) :				      	  if ( m . containsKey ( str [ i ] ) ) {		    	m . put ( stri [ i ] , m . getOrDefault ( stri [ i ] , 0  
	if i == 2 :					      	    int get = m . get ( str [ i ] ) ;			      }								  
	    res += 1					      	    m . put ( str [ i ] , get + 1 ) ;			      int res = 0 ;						  
    return res						      	  }							      for ( Integer i : m . values ( ) ) {			  
							      	  else {						    	if ( i == 2 ) {						  
							      	    m . put ( str [ i ] , 1 ) ;				    	  res ++ ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	int res = 0 ;						      return res ;						  
							      	for ( Map . Entry < String , Integer > it : m . entrySet (  }								  
							      	  if ( it . getValue ( ) == 2 ) res ++ ;		    								  
							      	}							    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU
--							      --							    --								  --
def canMakeStr2 ( s1 , s2 ) :				      static boolean canMakeStr2 ( String str1 , String str2 ) {    public static boolean canMakeStr2 ( String s1 , String s2 ) { script_not_found : None
    count = { s1 [ i ] : 0 for i in range ( len ( s1 ) ) }    	int [ ] count = new int [ MAX ] ;			      Map < Character , Integer > count = new HashMap < > ( ) ;	  
    for i in range ( len ( s1 ) ) :			      	char [ ] str3 = str1 . toCharArray ( ) ;		      for ( int i = 0 ;						  
	count [ s1 [ i ] ] += 1				      	for ( int i = 0 ;					      i < s1 . length ( ) ;					  
    for i in range ( len ( s2 ) ) :			      	i < str3 . length ;					      i ++ ) count . put ( s1 . charAt ( i ) , 0 ) ;		  
	if count [ s2 [ i ] ] == 0 :			      	i ++ ) count [ str3 [ i ] ] ++ ;			      for ( int i = 0 ;						  
	    return False				      	char [ ] str4 = str2 . toCharArray ( ) ;		      i < s2 . length ( ) ;					  
	count [ s2 [ i ] ] -= 1				      	for ( int i = 0 ;					      i ++ ) {							  
    return True						      	i < str4 . length ;					    	if ( count . get ( s2 . charAt ( i ) ) == 0 ) return fals 
							      	i ++ ) {						    	count . get ( s2 . charAt ( i ) ) -- ;			  
							      	  if ( count [ str4 [ i ] ] == 0 ) return false ;	      }								  
							      	  count [ str4 [ i ] ] -- ;				      return true ;						  
							      	}							    }								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1
--							      --							    --								  --
def sortedAfterSwap ( A , B , n ) :			      static int sortedAfterSwap ( int [ ] A , int [ ] B , int n )  public static boolean sortedAfterSwap ( int [ ] A , int [ ] B script_not_found : None
    for i in range ( 0 , n - 1 ) :			      	int t = 0 ;						      for ( int i = 0 ;						  
	if B [ i ] :					      	for ( int i = 0 ;					      i <= n - 1 ;						  
	    if A [ i ] != i + 1 :			      	i < n - 1 ;						      i ++ ) {							  
		A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ] 	i ++ ) {						    	if ( B [ i ] ) {					  
    for i in range ( n ) :				      	  if ( B [ i ] != 0 ) {					    	  if ( A [ i ] != i + 1 ) {				  
	if A [ i ] != i + 1 :				      	    if ( A [ i ] != i + 1 ) t = A [ i ] ;		    	    A [ i ] = A [ i + 1 ] ;				  
	    return False				      	    A [ i ] = A [ i + 1 ] ;				    	    A [ i + 1 ] = A [ i ] ;				  
    return True						      	    A [ i + 1 ] = t ;					    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
							      	i < n ;							      i < n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  if ( A [ i ] != i + 1 ) return 0 ;			    	if ( A [ i ] != i + 1 ) {				  
							      	}							    	  return false ;					  
							      	return 1 ;						    	}							  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTISTAGE_GRAPH_SHORTEST_PATH				      MULTISTAGE_GRAPH_SHORTEST_PATH				    MULTISTAGE_GRAPH_SHORTEST_PATH				  MULTISTAGE_GRAPH_SHORTEST_PATH
--							      --							    --								  --
def shortestDist ( graph ) :				      public static int shortestDist ( int [ ] [ ] graph ) {	    public static int shortestDist ( int [ ] [ ] graph ) {	  script_not_found : None
    global INF						      	int [ ] dist = new int [ N ] ;				      int i ;							  
    dist = [ 0 ] * N					      	dist [ N - 1 ] = 0 ;					      int [ ] dist = new int [ N ] ;				  
    dist [ N - 1 ] = 0					      	for ( int i = N - 2 ;					      dist [ N - 1 ] = 0 ;					  
    for i in range ( N - 2 , - 1 , - 1 ) :		      	i >= 0 ;						      for ( i = N - 2 ;						  
	dist [ i ] = INF				      	i -- ) {						      i >= 0 ;							  
	for j in range ( N ) :				      	  dist [ i ] = INF ;					      -- i ) {							  
	    if graph [ i ] [ j ] == INF :		      	  for ( int j = i ;					    	dist [ i ] = INF ;					  
		continue				      	  j < N ;						    	for ( j = 0 ;						  
	    dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] 	  j ++ ) {						    	j < N ;							  
    return dist [ 0 ]					      	    if ( graph [ i ] [ j ] == INF ) {			    	++ j ) {						  
							      	      continue ;					    	  if ( graph [ i ] [ j ] == INF ) continue ;		  
							      	    }							    	  dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j  
							      	    dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j  	}							  
							      	  }							      }								  
							      	}							      return dist [ 0 ] ;					  
							      	return dist [ 0 ] ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME		      COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME			    COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME			  COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME
--							      --							    --								  --
def count ( n ) :					      static int count ( int n ) {				    public static int count ( int n ) {				  success : None
    table = [ 0 for i in range ( n + 1 ) ]		      	int table [ ] = new int [ n + 1 ] , i ;			      int [ ] table = new int [ n + 1 ] ;			  
    table [ 0 ] = 1					      	Arrays . fill ( table , 0 ) ;				      for ( int i = 0 ;						  
    for i in range ( 3 , n + 1 ) :			      	table [ 0 ] = 1 ;					      i < table . length ;					  
	table [ i ] += table [ i - 3 ]			      	for ( i = 3 ;						      i ++ ) {							  
    for i in range ( 5 , n + 1 ) :			      	i <= n ;						    	table [ i ] = 0 ;					  
	table [ i ] += table [ i - 5 ]			      	i ++ ) table [ i ] += table [ i - 3 ] ;			      }								  
    for i in range ( 10 , n + 1 ) :			      	for ( i = 5 ;						      table [ 0 ] = 1 ;						  
	table [ i ] += table [ i - 10 ]			      	i <= n ;						      for ( int i = 3 ;						  
    return table [ n ]					      	i ++ ) table [ i ] += table [ i - 5 ] ;			      i <= n ;							  
							      	for ( i = 10 ;						      i ++ ) {							  
							      	i <= n ;						    	table [ i ] += table [ i - 3 ] ;			  
							      	i ++ ) table [ i ] += table [ i - 10 ] ;		      }								  
							      	return table [ n ] ;					      for ( int i = 5 ;						  
							      }								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	table [ i ] += table [ i - 5 ] ;			  
							      								      }								  
							      								      for ( int i = 10 ;					  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	table [ i ] += table [ i - 10 ] ;			  
							      								      }								  
							      								      return table [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			    FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1
--							      --							    --								  --
def CountTriangles ( A ) :				      static void CountTriangles ( int [ ] A ) {		    protected static int countTriangles ( int [ ] A ) {		  script_not_found : None
    n = len ( A )					      	int n = A . length ;					      int n = A . length ;					  
    A.sort ( )						      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( n - 1 , 0 , - 1 ) :		      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
	l = 0						      	i >= 1 ;						      i > 0 ;							  
	r = i - 1					      	i -- ) {						      i -- ) {							  
	while ( l < r ) :				      	  int l = 0 , r = i - 1 ;				    	int l = 0 ;						  
	    if ( A [ l ] + A [ r ] > A [ i ] ) :	      	  while ( l < r ) {					    	int r = i - 1 ;						  
		count += r - l				      	    if ( A [ l ] + A [ r ] > A [ i ] ) {		    	while ( ( l < r ) && ( ( A [ l ] + A [ r ] ) > A [ i ] )  
		r -= 1					      	      count += r - l ;					    	  count += r - l ;					  
	    else :					      	      r -- ;						    	  r -- ;						  
		l += 1					      	    }							    	}							  
    print ( "No of possible solutions: " , count )	      	    else {						    	else {							  
							      	      l ++ ;						    	  l ++ ;						  
							      	    }							    	}							  
							      	  }							      }								  
							      	}							      System . out . println ( "No of possible solutions: " + cou 
							      	System . out . print ( "No of possible solutions: " + count   return count ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS	      GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		    GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		  GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS
--							      --							    --								  --
def findMin ( V ) :					      static void findMin ( int V ) {				    static void findMin ( int V ) {				  script_not_found : None
    deno = [ 1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 ]    	Vector < Integer > ans = new Vector < > ( ) ;		      int [ ] deno = {						  
    n = len ( deno )					      	for ( int i = n - 1 ;					    	1 , 2 , 5 , 10 , 20 , 50 , 100 , 500 , 1000 }		  
    ans = [ ]						      	i >= 0 ;						    	;							  
    i = n - 1						      	i -- ) {						    	int n = deno . length ;					  
    while ( i >= 0 ) :					      	  while ( V >= deno [ i ] ) {				    	ArrayList < Integer > ans = new ArrayList < > ( ) ;	  
	while ( V >= deno [ i ] ) :			      	    V -= deno [ i ] ;					    	int i = n - 1 ;						  
	    V -= deno [ i ]				      	    ans . add ( deno [ i ] ) ;				    	while ( ( i >= 0 ) ) {					  
	    ans.append ( deno [ i ] )			      	  }							    	  while ( ( V >= deno [ i ] ) ) {			  
	i -= 1						      	}							    	    V -= deno [ i ] ;					  
    for i in range ( len ( ans ) ) :			      	for ( int i = 0 ;					    	    ans . add ( deno [ i ] ) ;				  
	print ( ans [ i ] , end = " " )			      	i < ans . size ( ) ;					    	  }							  
							      	i ++ ) {						    	  i -- ;						  
							      	  System . out . print ( " " + ans . elementAt ( i ) ) ;    	}							  
							      	}							    	for ( i = 0 ;						  
							      }								    	i < ans . size ( ) ;					  
							      								    	i ++ ) {						  
							      								    	  System . out . print ( ans . get ( i ) + " " ) ;	  
							      								    	}							  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY  DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY  DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY  DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY
--							      --							    --								  --
def findDiff ( arr , n ) :				      static int findDiff ( int arr [ ] , int n ) {		    static int findDiff ( int [ ] arr , int n ) {		  success : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    count = 0 max_count = 0 min_count = n		      	int count = 0 , max_count = 0 , min_count = n ;		      int count = 0 , maxCount = 0 , minCount = n ;		  
    for i in range ( 0 , ( n - 1 ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] == arr [ i + 1 ] :			      	i < ( n - 1 ) ;						      i <= ( n - 1 ) ;						  
	    count += 1					      	i ++ ) {						      i ++ ) {							  
	    continue					      	  if ( arr [ i ] == arr [ i + 1 ] ) {			    	if ( arr [ i ] == arr [ i + 1 ] ) {			  
	else :						      	    count += 1 ;					    	  count ++ ;						  
	    max_count = max ( max_count , count )	      	    continue ;						    	  continue ;						  
	    min_count = min ( min_count , count )	      	  }							    	}							  
	    count = 0					      	  else {						    	else {							  
    return max_count - min_count			      	    max_count = Math . max ( max_count , count ) ;	    	  maxCount = Math . max ( maxCount , count ) ;		  
							      	    min_count = Math . min ( min_count , count ) ;	    	  minCount = Math . min ( minCount , count ) ;		  
							      	    count = 0 ;						    	  count = 0 ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return ( max_count - min_count ) ;			      return maxCount - minCount ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE			      CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE			    CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE			  CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE
--							      --							    --								  --
def areConsecutive ( arr , n ) :			      boolean areConsecutive ( int arr [ ] , int n ) {		    static boolean areConsecutive ( int [ ] arr , int n ) {	  script_not_found : None
    if ( n < 1 ) :					      	if ( n < 1 ) return false ;				      if ( ( n < 1 ) ) {					  
	return False					      	int min = getMin ( arr , n ) ;				    	return false ;						  
    Min = min ( arr )					      	int max = getMax ( arr , n ) ;				      }								  
    Max = max ( arr )					      	if ( max - min + 1 == n ) {				      int Min = Math . min ( arr . length , 1 ) ;		  
    if ( Max - Min + 1 == n ) :				      	  boolean visited [ ] = new boolean [ n ] ;		      int Max = Math . max ( arr . length , 1 ) ;		  
	visited = [ False for i in range ( n ) ]	      	  int i ;						      if ( ( Max - Min + 1 ) == n ) {				  
	for i in range ( n ) :				      	  for ( i = 0 ;						    	boolean [ ] visited = new boolean [ n ] ;		  
	    if ( visited [ arr [ i ] - Min ] != False ) :     	  i < n ;						    	for ( int i = 0 ;					  
		return False				      	  i ++ ) {						    	i < n ;							  
	    visited [ arr [ i ] - Min ] = True		      	    if ( visited [ arr [ i ] - min ] != false ) return fals 	i ++ ) {						  
	return True					      	    visited [ arr [ i ] - min ] = true ;		    	  visited [ i ] = false ;				  
    return False					      	  }							    	}							  
							      	  return true ;						    	for ( int i = 0 ;					  
							      	}							    	i < n ;							  
							      	return false ;						    	i ++ ) {						  
							      }								    	  if ( ( visited [ arr [ i ] - Min ] ) != false ) {	  
							      								    	    return false ;					  
							      								    	  }							  
							      								    	  visited [ arr [ i ] - Min ] = true ;			  
							      								    	}							  
							      								    	return true ;						  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE				      C_PROGRAM_FIND_AREA_TRIANGLE				    C_PROGRAM_FIND_AREA_TRIANGLE				  C_PROGRAM_FIND_AREA_TRIANGLE
--							      --							    --								  --
def findArea ( a , b , c ) :				      static float findArea ( float a , float b , float c ) {	    public static void findArea ( int a , int b , int c ) {	  script_not_found : None
    if ( a < 0 or b < 0 or c < 0 or ( a + b <= c ) or ( a + c 	if ( a < 0 || b < 0 || c < 0 || ( a + b <= c ) || a + c <=    if ( ( a < 0 ) || ( b < 0 ) || ( c < 0 ) || ( a + b <= c )  
	print ( 'Not a valid trianglen' )		      	  System . out . println ( "Not a valid triangle" ) ;	    	System . out . println ( "Not a valid trianglen" ) ;	  
	return						      	  System . exit ( 0 ) ;					    	return ;						  
    s = ( a + b + c ) / 2				      	}							      }								  
    area = ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ** 0.5   	float s = ( a + b + c ) / 2 ;				      double s = ( a + b + c ) / 2 ;				  
    print ( 'Area of a traingle is %f' % area )		      	return ( float ) Math . sqrt ( s * ( s - a ) * ( s - b ) *    double area = ( s * ( s - a ) * ( s - b ) * ( s - c ) ) * 0 
							      }								      System . out . println ( "Area of a traingle is " + area )  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2	      PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		    PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		  PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2
--							      --							    --								  --
def printSubsequences ( str ) :				      static void printSubsequences ( String s ) {		    static void printSubsequences ( String str ) {		  script_not_found : None
    n = len ( str )					      	char [ ] str = s . toCharArray ( ) ;			      int n = str . length ( ) ;				  
    opsize = int ( pow ( 2 , n - 1 ) )			      	int n = str . length ;					      int opsize = ( int ) Math . pow ( 2 , n - 1 ) ;		  
    for counter in range ( opsize ) :			      	int opsize = ( int ) ( Math . pow ( 2 , n - 1 ) ) ;	      for ( int counter = 0 ;					  
	for j in range ( n ) :				      	for ( int counter = 0 ;					      counter < opsize ;					  
	    print ( str [ j ] , end = "" )		      	counter < opsize ;					      counter ++ ) {						  
	    if ( counter & ( 1 << j ) ) :		      	counter ++ ) {						    	for ( int j = 0 ;					  
		print ( "" , end = "" )			      	  for ( int j = 0 ;					    	j < n ;							  
	print ( "\n" , end = "" )			      	  j < n ;						    	j ++ ) {						  
							      	  j ++ ) {						    	  System . out . print ( str . charAt ( j ) ) ;		  
							      	    System . out . print ( str [ j ] ) ;		    	  if ( ( counter & ( 1 << j ) ) != 0 ) {		  
							      	    if ( ( counter & ( 1 << j ) ) > 0 ) System . out . prin 	    System . out . print ( " " ) ;			  
							      	  }							    	  }							  
							      	  System . out . println ( ) ;				    	}							  
							      	}							    	System . out . print ( "\n" ) ;				  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			      FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			    FREQUENCY_ELEMENT_UNSORTED_ARRAY_1				  FREQUENCY_ELEMENT_UNSORTED_ARRAY_1
--							      --							    --								  --
def countFreq ( a , n ) :				      static void countFreq ( int a [ ] , int n ) {		    static void countFreq ( int [ ] a , int n ) {		  script_not_found : None
    hm = dict ( )					      	int hm [ ] = new int [ n ] ;				      HashMap < Integer , Integer > hm = new HashMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	      	i < n ;							      i < n ;							  
    cumul = 0						      	i ++ ) hm [ a [ i ] ] ++ ;				      i ++ ) {							  
    for i in range ( n ) :				      	int cumul = 0 ;						    	hm . put ( a [ i ] , hm . getOrDefault ( a [ i ] , 0 ) +  
	cumul += hm [ a [ i ] ]				      	for ( int i = 0 ;					      }								  
	if ( hm [ a [ i ] ] > 0 ) :			      	i < n ;							      int cumul = 0 ;						  
	    print ( a [ i ] , "->" , cumul )		      	i ++ ) {						      for ( int i = 0 ;						  
	hm [ a [ i ] ] = 0				      	  cumul += hm [ a [ i ] ] ;				      i < n ;							  
							      	  if ( hm [ a [ i ] ] != 0 ) {				      i ++ ) {							  
							      	    System . out . println ( a [ i ] + "->" + cumul ) ;	    	cumul += hm . get ( a [ i ] ) ;				  
							      	  }							    	if ( ( hm . get ( a [ i ] ) ) > 0 ) {			  
							      	  hm [ a [ i ] ] = 0 ;					    	  System . out . println ( a [ i ] + "->" + cumul ) ;	  
							      	}							    	}							  
							      }								    	hm . put ( a [ i ] , 0 ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE	      COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		    COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		  COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE
--							      --							    --								  --
def countIslands ( mat ) :				      static int countIslands ( int mat [ ] [ ] , int m , int n ) { public static int countIslands ( char [ ] [ ] mat ) {	  script_not_found : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( 0 , M ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , N ) :			      	i < m ;							      i <= M ;							  
	    if ( mat [ i ] [ j ] == 'X' ) :		      	i ++ ) {						      i ++ ) {							  
		if ( ( i == 0 or mat [ i - 1 ] [ j ] == 'O' ) 	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
		    count = count + 1			      	  j < n ;						    	j <= N ;						  
    return count					      	  j ++ ) {						    	j ++ ) {						  
							      	    if ( mat [ i ] [ j ] == 'X' ) {			    	  if ( ( mat [ i ] [ j ] == 'X' ) ) {			  
							      	      if ( ( i == 0 || mat [ i - 1 ] [ j ] == 'O' ) && ( j  	    if ( ( ( i == 0 || mat [ i - 1 ] [ j ] == 'O' ) && (  
							      	    }							    	      count = count + 1 ;				  
							      	  }							    	    }							  
							      	}							    	  }							  
							      	return count ;						    	}							  
							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_PRIME_FACTOR_GIVEN_NUMBER				      K_TH_PRIME_FACTOR_GIVEN_NUMBER				    K_TH_PRIME_FACTOR_GIVEN_NUMBER				  K_TH_PRIME_FACTOR_GIVEN_NUMBER
--							      --							    --								  --
def kPrimeFactor ( n , k ) :				      static int kPrimeFactor ( int n , int k ) {		    public static int kPrimeFactor ( int n , int k ) {		  success : None
    while ( n % 2 == 0 ) :				      	while ( n % 2 == 0 ) {					      while ( ( n % 2 ) == 0 ) {				  
	k = k - 1					      	  k -- ;						    	k = k - 1 ;						  
	n = n / 2					      	  n = n / 2 ;						    	n = n / 2 ;						  
	if ( k == 0 ) :					      	  if ( k == 0 ) return 2 ;				    	if ( ( k == 0 ) ) {					  
	    return 2					      	}							    	  return 2 ;						  
    i = 3						      	for ( int i = 3 ;					    	}							  
    while i <= math.sqrt ( n ) :			      	i <= Math . sqrt ( n ) ;				      }								  
	while ( n % i == 0 ) :				      	i = i + 2 ) {						      int i = 3 ;						  
	    if ( k == 1 ) :				      	  while ( n % i == 0 ) {				      while ( i <= Math . sqrt ( n ) ) {			  
		return i				      	    if ( k == 1 ) return i ;				    	while ( ( n % i ) == 0 ) {				  
	    k = k - 1					      	    k -- ;						    	  if ( ( k == 1 ) ) {					  
	    n = n / i					      	    n = n / i ;						    	    return i ;						  
	i = i + 2					      	  }							    	  }							  
    if ( n > 2 and k == 1 ) :				      	}							    	  k = k - 1 ;						  
	return n					      	if ( n > 2 && k == 1 ) return n ;			    	  n = n / i ;						  
    return - 1						      	return - 1 ;						    	}							  
							      }								    	i = i + 2 ;						  
							      								      }								  
							      								      if ( ( n > 2 ) && ( k == 1 ) ) {				  
							      								    	return n ;						  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		      FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		    FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		  FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES
--							      --							    --								  --
def findSDSFunc ( n ) :					      static int findSDSFunc ( int n ) {			    public static int findSDSFunc ( int n ) {			  success : None
    DP = [ 0 ] * ( n + 1 )				      	int DP [ ] = new int [ n + 1 ] ;			      int [ ] DP = new int [ n + 1 ] ;				  
    DP [ 0 ] = 0					      	DP [ 0 ] = 0 ;						      DP [ 0 ] = 0 ;						  
    DP [ 1 ] = 1					      	DP [ 1 ] = 1 ;						      DP [ 1 ] = 1 ;						  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	if ( int ( i % 2 ) == 0 ) :			      	i <= n ;						      i <= n ;							  
	    DP [ i ] = DP [ int ( i / 2 ) ]		      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ;		    	if ( ( ( int ) i % 2 ) == 0 ) DP [ i ] = DP [ ( int ) ( i 
	    DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [  	  else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 	else DP [ i ] = ( DP [ ( int ) ( i - 1 ) / 2 ] + DP [ ( i 
    return DP [ n ]					      	}							      }								  
							      	return DP [ n ] ;					      return DP [ n ] ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TILING_WITH_DOMINOES					      TILING_WITH_DOMINOES					    TILING_WITH_DOMINOES					  TILING_WITH_DOMINOES
--							      --							    --								  --
def countWays ( n ) :					      static int countWays ( int n ) {				    static int countWays ( int n ) {				  success : identical to gold
    A = [ 0 ] * ( n + 1 )				      	int [ ] A = new int [ n + 1 ] ;				      int [ ] A = new int [ n + 1 ] ;				  
    B = [ 0 ] * ( n + 1 )				      	int [ ] B = new int [ n + 1 ] ;				      int [ ] B = new int [ n + 1 ] ;				  
    A [ 0 ] = 1						      	A [ 0 ] = 1 ;						      A [ 0 ] = 1 ;						  
    A [ 1 ] = 0						      	A [ 1 ] = 0 ;						      A [ 1 ] = 0 ;						  
    B [ 0 ] = 0						      	B [ 0 ] = 0 ;						      B [ 0 ] = 0 ;						  
    B [ 1 ] = 1						      	B [ 1 ] = 1 ;						      B [ 1 ] = 1 ;						  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]		      	i <= n ;						      i <= n ;							  
	B [ i ] = A [ i - 1 ] + B [ i - 2 ]		      	i ++ ) {						      i ++ ) {							  
    return A [ n ]					      	  A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;		    	A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;		  
							      	  B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;			    	B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;			  
							      	}							      }								  
							      	return A [ n ] ;					      return A [ n ] ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS     RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	    RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	  RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS
--							      --							    --								  --
def countSubstrs ( str , i , j , n ) :			      static int countSubstrs ( String str , int i , int j , int n  static int countSubstrs ( String str , int i , int j , int n  script_not_found : None
    if ( n == 1 ) :					      	if ( n == 1 ) return 1 ;				      if ( ( n == 1 ) ) {					  
	return 1					      	if ( n <= 0 ) return 0 ;				    	return 1 ;						  
    if ( n <= 0 ) :					      	int res = countSubstrs ( str , i + 1 , j , n - 1 ) + countS   }								  
	return 0					      	if ( str . charAt ( i ) == str . charAt ( j ) ) res ++ ;      if ( ( n <= 0 ) ) {					  
    res = ( countSubstrs ( str , i + 1 , j , n - 1 ) + countS 	return res ;						    	return 0 ;						  
    if ( str [ i ] == str [ j ] ) :			      }								      }								  
	res += 1					      								      int res = ( countSubstrs ( str , i + 1 , j , n - 1 ) + coun 
    return res						      								      if ( ( str . charAt ( i ) == str . charAt ( j ) ) ) {	  
							      								    	res ++ ;						  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3
--							      --							    --								  --
def printRepeating ( arr , size ) :			      void printRepeating ( int arr [ ] , int size ) {		    static void printRepeating ( int [ ] arr , int size ) {	  script_not_found : None
    print ( " The repeating elements are" , end = " " )	      	int i ;							      System . out . print ( " The repeating elements are" ) ;	  
    for i in range ( 0 , size ) :			      	System . out . println ( "The repeating elements are : " )    for ( int i = 0 ;						  
	if ( arr [ abs ( arr [ i ] ) ] > 0 ) :		      	for ( i = 0 ;						      i <= size ;						  
	    arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( 	i < size ;						      i ++ ) {							  
	else :						      	i ++ ) {						    	if ( ( arr [ Math . abs ( arr [ i ] ) ] ) > 0 ) {	  
	    print ( abs ( arr [ i ] ) , end = " " )	      	  if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math .  	  arr [ Math . abs ( arr [ i ] ) ] = ( - 1 ) * arr [ Math 
							      	  else System . out . print ( Math . abs ( arr [ i ] ) + "  	}							  
							      	}							    	else {							  
							      }								    	  System . out . print ( Math . abs ( arr [ i ] ) + " " ) 
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE_1					      RECAMANS_SEQUENCE_1					    RECAMANS_SEQUENCE_1						  RECAMANS_SEQUENCE_1
--							      --							    --								  --
def recaman ( n ) :					      static void recaman ( int n ) {				    public static void recaman ( int n ) {			  script_not_found : None
    if ( n <= 0 ) :					      	if ( n <= 0 ) return ;					      if ( ( n <= 0 ) ) return ;				  
	return						      	System . out . printf ( "%d, " , 0 ) ;			      System . out . print ( 0 + "," ) ;			  
    print ( 0 , "," , end = '' )			      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  
    s = set ( [ ] )					      	s . add ( 0 ) ;						      s . add ( 0 ) ;						  
    s.add ( 0 )						      	int prev = 0 ;						      int prev = 0 ;						  
    prev = 0						      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    for i in range ( 1 , n ) :				      	i < n ;							      i < n ;							  
	curr = prev - i					      	i ++ ) {						      i ++ ) {							  
	if ( curr < 0 or curr in s ) :			      	  int curr = prev - i ;					    	int curr = prev - i ;					  
	    curr = prev + i				      	  if ( curr < 0 || s . contains ( curr ) ) curr = prev + i  	if ( ( curr < 0 ) || s . contains ( curr ) ) {		  
	s.add ( curr )					      	  s . add ( curr ) ;					    	  curr = prev + i ;					  
	print ( curr , "," , end = '' )			      	  System . out . printf ( "%d, " , curr ) ;		    	}							  
	prev = curr					      	  prev = curr ;						    	s . add ( curr ) ;					  
							      	}							    	System . out . print ( curr + "," ) ;			  
							      }								    	prev = curr ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT					      MAJORITY_ELEMENT						    MAJORITY_ELEMENT						  MAJORITY_ELEMENT
--							      --							    --								  --
def findMajority ( arr , n ) :				      static void findMajority ( int arr [ ] , int n ) {	    static void findMajority ( int [ ] arr , int n ) {		  script_not_found : None
    maxCount = 0 ;					      	int maxCount = 0 ;					      int maxCount = 0 ;					  
    index = - 1						      	int index = - 1 ;					      int index = - 1 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count = 0					      	i < n ;							      i < n ;							  
	for j in range ( n ) :				      	i ++ ) {						      i ++ ) {							  
	    if ( arr [ i ] == arr [ j ] ) :		      	  int count = 0 ;					    	int count = 0 ;						  
		count += 1				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	if ( count > maxCount ) :			      	  j < n ;						    	j < n ;							  
	    maxCount = count				      	  j ++ ) {						    	j ++ ) {						  
	    index = i					      	    if ( arr [ i ] == arr [ j ] ) count ++ ;		    	  if ( ( arr [ i ] == arr [ j ] ) ) {			  
    if ( maxCount > n // 2 ) :				      	  }							    	    count ++ ;						  
	print ( arr [ index ] )				      	  if ( count > maxCount ) {				    	  }							  
    else :						      	    maxCount = count ;					    	}							  
	print ( "No Majority Element" )			      	    index = i ;						    	if ( ( count > maxCount ) ) {				  
							      	  }							    	  maxCount = count ;					  
							      	}							    	  index = i ;						  
							      	if ( maxCount > n / 2 ) System . out . println ( arr [ inde 	}							  
							      	else System . out . println ( "No Majority Element" ) ;	      }								  
							      }								      if ( ( maxCount > n / 2 ) ) {				  
							      								    	System . out . println ( arr [ index ] ) ;		  
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "No Majority Element" ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_ODD_FACTORS_NUMBER				      FIND_SUM_ODD_FACTORS_NUMBER				    FIND_SUM_ODD_FACTORS_NUMBER					  FIND_SUM_ODD_FACTORS_NUMBER
--							      --							    --								  --
def sumofoddFactors ( n ) :				      static int sumofoddFactors ( int n ) {			    public static int sumofoddFactors ( int n ) {		  success : None
    res = 1						      	int res = 1 ;						      int res = 1 ;						  
    while n % 2 == 0 :					      	while ( n % 2 == 0 ) n = n / 2 ;			      while ( n % 2 == 0 ) {					  
	n = n // 2					      	for ( int i = 3 ;					    	n = n / 2 ;						  
    for i in range ( 3 , int ( math.sqrt ( n ) + 1 ) ) :      	i <= Math . sqrt ( n ) ;				      }								  
	count = 0					      	i ++ ) {						      for ( int i = 3 ;						  
	curr_sum = 1					      	  int count = 0 , curr_sum = 1 ;			      i < ( int ) Math . sqrt ( n ) + 1 ;			  
	curr_term = 1					      	  int curr_term = 1 ;					      i ++ ) {							  
	while n % i == 0 :				      	  while ( n % i == 0 ) {				    	int count = 0 ;						  
	    count += 1					      	    count ++ ;						    	int currSum = 1 ;					  
	    n = n // i					      	    n = n / i ;						    	int currTerm = 1 ;					  
	    curr_term *= i				      	    curr_term *= i ;					    	while ( n % i == 0 ) {					  
	    curr_sum += curr_term			      	    curr_sum += curr_term ;				    	  count ++ ;						  
	res *= curr_sum					      	  }							    	  n = n / i ;						  
    if n >= 2 :						      	  res *= curr_sum ;					    	  currTerm *= i ;					  
	res *= ( 1 + n )				      	}							    	  currSum += currTerm ;					  
    return res						      	if ( n >= 2 ) res *= ( 1 + n ) ;			    	}							  
							      	return res ;						    	res *= currSum ;					  
							      }								      }								  
							      								      if ( n >= 2 ) {						  
							      								    	res *= ( 1 + n ) ;					  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS      COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS	    COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS	  COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS
--							      --							    --								  --
def chordCnt ( A ) :					      static int chordCnt ( int A ) {				    public static int chordCnt ( int A ) {			  error : Exception in thread "main" java.lang.Array
    n = 2 * A						      	int n = 2 * A ;						      int n = 2 * A ;						  IndexOutOfBoundsException: Index -2 out of bounds
    dpArray = [ 0 ] * ( n + 1 )				      	int [ ] dpArray = new int [ n + 1 ] ;			      int [ ] dpArray = new int [ n + 1 ] ;			  for length 65 	at COUNT_WAYS_DIVIDE_CIRCLE_USING_N
    dpArray [ 0 ] = 1					      	dpArray [ 0 ] = 1 ;					      dpArray [ 0 ] = 1 ;					  _NON_INTERSECTING_CHORDS.f_filled(COUNT_WAYS_DIVID
    dpArray [ 2 ] = 1					      	dpArray [ 2 ] = 1 ;					      dpArray [ 2 ] = 1 ;					  E_CIRCLE_USING_N_NON_INTERSECTING_CHORDS.java:42)
    for i in range ( 4 , n + 1 , 2 ) :			      	for ( int i = 4 ;					      for ( int i = 4 ;						  	at COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECT
	for j in range ( 0 , i - 1 , 2 ) :		      	i <= n ;						      i <= n ;							  ING_CHORDS.main(COUNT_WAYS_DIVIDE_CIRCLE_USING_N_N
	    dpArray [ i ] += ( dpArray [ j ] * dpArray [ i -  	i += 2 ) {						      i += 2 ) {						  ON_INTERSECTING_CHORDS.java:64)
    return int ( dpArray [ n ] )			      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
							      	  j < i - 1 ;						    	j <= i ;						  
							      	  j += 2 ) {						    	j += 2 ) {						  
							      	    dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 - j  	  dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 - j  
							      	  }							    	}							  
							      	}							      }								  
							      	return dpArray [ n ] ;					      return ( int ) dpArray [ n ] ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE
--							      --							    --								  --
def countWays ( n , m ) :				      static int countWays ( int n , int m ) {			    static int countWays ( int n , int m ) {			  success : None
    count = [ ]						      	int count [ ] = new int [ n + 1 ] ;			      int [ ] count = new int [ n + 2 ] ;			  
    for i in range ( n + 2 ) :				      	count [ 0 ] = 0 ;					      for ( int i = 0 ;						  
	count.append ( 0 )				      	int i ;							      i < count . length ;					  
    count [ 0 ] = 0					      	for ( i = 1 ;						      i ++ ) count [ i ] = 0 ;					  
    for i in range ( 1 , n + 1 ) :			      	i <= n ;						      count [ 0 ] = 0 ;						  
	if ( i > m ) :					      	i ++ ) {						      for ( int i = 1 ;						  
	    count [ i ] = count [ i - 1 ] + count [ i - m ]   	  if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i -    i <= n ;							  
	elif ( i < m ) :				      	  else if ( i < m ) count [ i ] = 1 ;			      i ++ ) {							  
	    count [ i ] = 1				      	  else count [ i ] = 2 ;				    	if ( ( i > m ) ) count [ i ] = count [ i - 1 ] + count [  
	else :						      	}							    	else if ( ( i < m ) ) count [ i ] = 1 ;			  
	    count [ i ] = 2				      	return count [ n ] ;					    	else count [ i ] = 2 ;					  
    return count [ n ]					      }								      }								  
							      								      return count [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMAINDER_7_LARGE_NUMBERS				      REMAINDER_7_LARGE_NUMBERS					    REMAINDER_7_LARGE_NUMBERS					  REMAINDER_7_LARGE_NUMBERS
--							      --							    --								  --
def remainderWith7 ( num ) :				      static int remainderWith7 ( String num ) {		    public static int remainderWith7 ( String num ) {		  success : None
    series = [ 1 , 3 , 2 , - 1 , - 3 , - 2 ]		      	int series [ ] = {					      int [ ] series = {					  
    series_index = 0					      	  1 , 3 , 2 , - 1 , - 3 , - 2 }				    	1 , 3 , 2 , - 1 , - 3 , - 2 }				  
    result = 0						      	  ;							    	;							  
    for i in range ( ( len ( num ) - 1 ) , - 1 , - 1 ) :      	  int series_index = 0 ;				    	int seriesIndex = 0 ;					  
	digit = ord ( num [ i ] ) - 48			      	  int result = 0 ;					    	int result = 0 ;					  
	result += digit * series [ series_index ]	      	  for ( int i = num . length ( ) - 1 ;			    	for ( int i = ( num . length ( ) - 1 ) ;		  
	series_index = ( series_index + 1 ) % 6		      	  i >= 0 ;						    	i >= 0 ;						  
	result %= 7					      	  i -- ) {						    	i -- ) {						  
    if ( result < 0 ) :					      	    int digit = num . charAt ( i ) - '0' ;		    	  int digit = ( int ) num . charAt ( i ) - 48 ;		  
	result = ( result + 7 ) % 7			      	    result += digit * series [ series_index ] ;		    	  result += digit * series [ seriesIndex ] ;		  
    return result					      	    series_index = ( series_index + 1 ) % 6 ;		    	  seriesIndex = ( seriesIndex + 1 ) % 6 ;		  
							      	    result %= 7 ;					    	  result %= 7 ;						  
							      	  }							    	}							  
							      	  if ( result < 0 ) result = ( result + 7 ) % 7 ;	    	if ( ( result < 0 ) ) {					  
							      	  return result ;					    	  result = ( result + 7 ) % 7 ;				  
							      	}							    	}							  
							      								    	return result ;						  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_TRIANGLE				      MAXIMUM_PATH_SUM_TRIANGLE					    MAXIMUM_PATH_SUM_TRIANGLE					  MAXIMUM_PATH_SUM_TRIANGLE
--							      --							    --								  --
def maxPathSum ( tri , m , n ) :			      static int maxPathSum ( int tri [ ] [ ] , int m , int n ) {   public static int maxPathSum ( int [ ] [ ] tri , int m , int  script_not_found : None
    for i in range ( m - 1 , - 1 , - 1 ) :		      	for ( int i = m - 1 ;					      for ( int i = m - 1 ;					  
	for j in range ( i + 1 ) :			      	i >= 0 ;						      i >= 0 ;							  
	    if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1  	i -- ) {						      i -- ) {							  
		tri [ i ] [ j ] += tri [ i + 1 ] [ j ]	      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    else :					      	  j <= i ;						    	j < i + 1 ;						  
		tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]    	  j ++ ) {						    	j ++ ) {						  
    return tri [ 0 ] [ 0 ]				      	    if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tr 	  if ( ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] )  
							      	    else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;	    	    tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ;		  
							      	  }							    	  }							  
							      	}							    	  else {						  
							      	return tri [ 0 ] [ 0 ] ;				    	    tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;	  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return tri [ 0 ] [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	      GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	    GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	  GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT
--							      --							    --								  --
def findSymPairs ( arr , row ) :			      static void findSymPairs ( int arr [ ] [ ] ) {		    static void findSymPairs ( int [ ] [ ] arr , int row ) {	  script_not_found : None
    hM = dict ( )					      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    HashMap < Integer , Integer > hM = new HashMap < > ( ) ;	  
    for i in range ( row ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	first = arr [ i ] [ 0 ]				      	i < arr . length ;					      i < row ;							  
	sec = arr [ i ] [ 1 ]				      	i ++ ) {						      i ++ ) {							  
	if ( sec in hM.keys ( ) and hM [ sec ] == first ) :   	  int first = arr [ i ] [ 0 ] ;				    	int first = arr [ i ] [ 0 ] ;				  
	    print ( "(" , sec , "," , first , ")" )	      	  int sec = arr [ i ] [ 1 ] ;				    	int sec = arr [ i ] [ 1 ] ;				  
	else :						      	  Integer val = hM . get ( sec ) ;			    	if ( ( hM . keySet ( ) . contains ( sec ) ) && ( hM . get 
	    hM [ first ] = sec				      	  if ( val != null && val == first ) System . out . println 	  System . out . println ( "(" + sec + "," + first + ")"  
							      	  else hM . put ( first , sec ) ;			    	}							  
							      	}							    	else {							  
							      }								    	  hM . put ( first , sec ) ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY		      MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			    MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			  MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY
--							      --							    --								  --
def findLongestConseqSubseq ( arr , n ) :		      static int findLongestConseqSubseq ( int arr [ ] , int n ) {  static int findLongestConseqSubseq ( int [ ] arr , int n ) {  success : None
    S = set ( )						      	HashSet < Integer > S = new HashSet < Integer > ( ) ;	      HashSet < Integer > S = new HashSet < > ( ) ;		  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	S.add ( arr [ i ] )				      	i < n ;							      i < n ;							  
    ans = 0						      	i ++ ) S . add ( arr [ i ] ) ;				      i ++ ) {							  
    for i in range ( n ) :				      	int ans = 0 ;						    	S . add ( arr [ i ] ) ;					  
	if S.__contains__ ( arr [ i ] ) :		      	for ( int i = 0 ;					      }								  
	    j = arr [ i ]				      	i < n ;							      int ans = 0 ;						  
	    while ( S.__contains__ ( j ) ) :		      	i ++ ) {						      for ( int i = 0 ;						  
		j += 1					      	  if ( S . contains ( arr [ i ] ) ) {			      i < n ;							  
	    ans = max ( ans , j - arr [ i ] )		      	    int j = arr [ i ] ;					      i ++ ) {							  
    return ans						      	    while ( S . contains ( j ) ) j ++ ;			    	if ( S . contains ( arr [ i ] ) ) {			  
							      	    ans = Math . max ( ans , j - arr [ i ] ) ;		    	  int j = arr [ i ] ;					  
							      	  }							    	  while ( ( S . contains ( j ) ) ) {			  
							      	}							    	    j ++ ;						  
							      	return ans ;						    	  }							  
							      }								    	  ans = Math . max ( ans , j - arr [ i ] ) ;		  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES	      COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES		    COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES		  COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES
--							      --							    --								  --
def countOfSubstringWithKOnes ( s , K ) :		      static int countOfSubstringWithKOnes ( String s , int K ) {   public static int countOfSubstringWithKOnes ( String s , int  script_not_found : None
    N = len ( s )					      	int N = s . length ( ) ;				      int N = s . length ( ) ;					  
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    countOfOne = 0					      	int countOfOne = 0 ;					      int countOfOne = 0 ;					  
    freq = [ 0 for i in range ( N + 1 ) ]		      	int [ ] freq = new int [ N + 1 ] ;			      int [ ] freq = new int [ N + 1 ] ;			  
    freq [ 0 ] = 1					      	freq [ 0 ] = 1 ;					      for ( int i = 0 ;						  
    for i in range ( 0 , N , 1 ) :			      	for ( int i = 0 ;					      i < N ;							  
	countOfOne += ord ( s [ i ] ) - ord ( '0' )	      	i < N ;							      i += 1 ) {						  
	if ( countOfOne >= K ) :			      	i ++ ) {						    	countOfOne += s . charAt ( i ) - '0' ;			  
	    res += freq [ countOfOne - K ]		      	  countOfOne += ( s . charAt ( i ) - '0' ) ;		    	if ( ( countOfOne >= K ) ) {				  
	freq [ countOfOne ] += 1			      	  if ( countOfOne >= K ) {				    	  res += freq [ countOfOne - K ] ;			  
    return res						      	    res += freq [ countOfOne - K ] ;			    	}							  
							      	  }							    	freq [ countOfOne ] ++ ;				  
							      	  freq [ countOfOne ] ++ ;				      }								  
							      	}							      return res ;						  
							      	return res ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STERN_BROCOT_SEQUENCE					      STERN_BROCOT_SEQUENCE					    STERN_BROCOT_SEQUENCE					  STERN_BROCOT_SEQUENCE
--							      --							    --								  --
def SternSequenceFunc ( BrocotSequence , n ) :		      static void SternSequenceFunc ( Vector < Integer > BrocotSequ public static void SternSequenceFunc ( int [ ] BrocotSequence script_not_found : None
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	considered_element = BrocotSequence [ i ]	      	BrocotSequence . size ( ) < n ;				      i < n ;							  
	precedent = BrocotSequence [ i - 1 ]		      	i ++ ) {						      i ++ ) {							  
	BrocotSequence.append ( considered_element + preceden 	  int considered_element = BrocotSequence . get ( i ) ;	    	int consideredElement = BrocotSequence [ i ] ;		  
	BrocotSequence.append ( considered_element )	      	  int precedent = BrocotSequence . get ( i - 1 ) ;	    	int precedent = BrocotSequence [ i - 1 ] ;		  
    for i in range ( 0 , 15 ) :				      	  BrocotSequence . add ( considered_element + precedent ) ; 	BrocotSequence [ i ] = consideredElement + precedent ;	  
	print ( BrocotSequence [ i ] , end = " " )	      	  BrocotSequence . add ( considered_element ) ;		    	BrocotSequence [ i ] = consideredElement ;		  
							      	}							      }								  
							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
							      	i < 15 ;						      i <= 15 ;							  
							      	++ i ) System . out . print ( BrocotSequence . get ( i ) +    i ++ ) {							  
							      }								    	System . out . print ( BrocotSequence [ i ] + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	      HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	    HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	  HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS
--							      --							    --								  --
def findoptimal ( N ) :					      static int findoptimal ( int N ) {			    public static int findoptimal ( int N ) {			  success : None
    if ( N <= 6 ) :					      	if ( N <= 6 ) return N ;				      if ( ( N <= 6 ) ) {					  
	return N					      	int [ ] screen = new int [ N ] ;			    	return N ;						  
    screen = [ 0 ] * N					      	int b ;							      }								  
    for n in range ( 1 , 7 ) :				      	int n ;							      int [ ] screen = new int [ N ] ;				  
	screen [ n - 1 ] = n				      	for ( n = 1 ;						      for ( int n = 1 ;						  
    for n in range ( 7 , N + 1 ) :			      	n <= 6 ;						      n <= 7 ;							  
	screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 	n ++ ) screen [ n - 1 ] = n ;				      n ++ ) {							  
    return screen [ N - 1 ]				      	for ( n = 7 ;						    	screen [ n - 1 ] = n ;					  
							      	n <= N ;						      }								  
							      	n ++ ) {						      for ( int n = 7 ;						  
							      	  screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Ma   n <= N ;							  
							      	}							      n ++ ) {							  
							      	return screen [ N - 1 ] ;				    	screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Ma 
							      }								      }								  
							      								      return screen [ N - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1		      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1
--							      --							    --								  --
def countPairs ( arr , n ) :				      public static int countPairs ( int arr [ ] , int n ) {	    static int countPairs ( int [ ] arr , int n ) {		  failure : #Results:4, 10
    mp = dict ( )					      	HashMap < Integer , Integer > hm = new HashMap < > ( ) ;      Map < Integer , Integer > mp = new HashMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] in mp.keys ( ) :			      	i < n ;							      i < n ;							  
	    mp [ arr [ i ] ] += 1			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( hm . containsKey ( arr [ i ] ) ) hm . put ( arr [ i  	if ( mp . keySet ( ) . contains ( arr [ i ] ) ) {	  
	    mp [ arr [ i ] ] = 1			      	  else hm . put ( arr [ i ] , 1 ) ;			    	  mp . put ( arr [ i ] , 1 ) ;				  
    ans = 0						      	}							    	}							  
    for it in mp :					      	int ans = 0 ;						    	else {							  
	count = mp [ it ]				      	for ( Map . Entry < Integer , Integer > it : hm . entrySet  	  mp . put ( arr [ i ] , 1 ) ;				  
	ans += ( count * ( count - 1 ) ) // 2		      	  int count = it . getValue ( ) ;			    	}							  
    return ans						      	  ans += ( count * ( count - 1 ) ) / 2 ;		      }								  
							      	}							      int ans = 0 ;						  
							      	return ans ;						      for ( Integer it : mp . keySet ( ) ) {			  
							      }								    	int count = mp . get ( it ) ;				  
							      								    	ans += ( count * ( count - 1 ) ) / 2 ;			  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2
--							      --							    --								  --
def findElements ( arr , n ) :				      static void findElements ( int arr [ ] , int n ) {	    static void findElements ( int [ ] arr , int n ) {		  script_not_found : None
    first = - sys.maxsize				      	int first = Integer . MIN_VALUE ;			      int first = - Integer . MAX_VALUE ;			  
    second = - sys.maxsize				      	int second = Integer . MAX_VALUE ;			      int second = - Integer . MAX_VALUE ;			  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] > first ) :			      	i < n ;							      ( i < n ) && ( arr [ i ] > first ) ;			  
	    second = first				      	i ++ ) {						      i ++ ) {							  
	    first = arr [ i ]				      	  if ( arr [ i ] > first ) {				    	second = first ;					  
	elif ( arr [ i ] > second ) :			      	    second = first ;					    	first = arr [ i ] ;					  
	    second = arr [ i ]				      	    first = arr [ i ] ;					      }								  
    for i in range ( 0 , n ) :				      	  }							      else if ( ( arr [ i ] > second ) ) {			  
	if ( arr [ i ] < second ) :			      	  else if ( arr [ i ] > second ) second = arr [ i ] ;	    	second = arr [ i ] ;					  
	    print ( arr [ i ] , end = " " )		      	}							      }								  
							      	for ( int i = 0 ;					    }								  
							      	i < n ;							    for ( int i = 0 ;						  
							      	i ++ ) if ( arr [ i ] < second ) System . out . print ( arr ( i < n ) && ( arr [ i ] < second ) ;			  
							      }								    i ++ ) {							  
							      								      System . out . print ( arr [ i ] + " " ) ;		  
							      								    }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		      NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		    NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		  NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3
--							      --							    --								  --
def divisible ( num ) :					      static int divisible ( String num ) {			    public static int divisible ( String [ ] num ) {		  error : NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBL
    n = len ( num )					      	int n = num . length ( ) ;				      int n = num . length ;					  E_3.java:72: error: incompatible types: String can
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  not be converted to String[]	       if(f_filled(p
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  aram0.get(i)) == f_gold(param0.get(i)))
	sum += int ( num [ i ] )			      	i < n ;							      i < n ;							  		      ^ Note: Some messages have bee
    if ( sum % 3 == 0 ) :				      	i ++ ) sum += ( int ) ( num . charAt ( i ) ) ;		      i ++ ) {							  n simplified; recompile with -Xdiags:verbose to ge
	return 0					      	if ( sum % 3 == 0 ) return 0 ;				    	sum += Integer . parseInt ( num [ i ] ) ;		  t full output 1 error
    if ( n == 1 ) :					      	if ( n == 1 ) return - 1 ;				      }								  
	return - 1					      	for ( int i = 0 ;					      if ( ( sum % 3 ) == 0 ) {					  
    for i in range ( n ) :				      	i < n ;							    	return 0 ;						  
	if ( sum % 3 == int ( num [ i ] ) % 3 ) :	      	i ++ ) if ( sum % 3 == ( num . charAt ( i ) - '0' ) % 3 ) r   }								  
	    return 1					      	if ( n == 2 ) return - 1 ;				      if ( ( n ) == 1 ) {					  
    if ( n == 2 ) :					      	return 2 ;						    	return - 1 ;						  
	return - 1					      }								      }								  
    return 2						      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( sum % 3 ) == Integer . parseInt ( num [ i ] ) % 3  
							      								    	  return 1 ;						  
							      								    	}							  
							      								      }								  
							      								      if ( ( n ) == 2 ) {					  
							      								    	return - 1 ;						  
							      								      }								  
							      								      return 2 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	      COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	    COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	  COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES
--							      --							    --								  --
def countwalks ( graph , u , v , k ) :			      int countwalks ( int graph [ ] [ ] , int u , int v , int k )  public static int countwalks ( int [ ] [ ] graph , int u , in script_not_found : None
    if ( k == 0 and u == v ) :				      	if ( k == 0 && u == v ) return 1 ;			      if ( ( k == 0 ) && ( u == v ) ) return 1 ;		  
	return 1					      	if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ;	      if ( ( k == 1 ) && ( graph [ u ] [ v ] ) ) return 1 ;	  
    if ( k == 1 and graph [ u ] [ v ] ) :		      	if ( k <= 0 ) return 0 ;				      if ( ( k <= 0 ) ) return 0 ;				  
	return 1					      	int count = 0 ;						      int count = 0 ;						  
    if ( k <= 0 ) :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	return 0					      	i < V ;							      ;								  
    count = 0						      	i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks (    i <= V ;							  
    for i in range ( 0 , V ) :				      	return count ;						      i ++ ) {							  
	if ( graph [ u ] [ i ] == 1 ) :			      }								    	if ( ( graph [ u ] [ i ] == 1 ) ) count += countwalks ( g 
	    count += countwalks ( graph , i , v , k - 1 )     								      }								  
    return count					      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_BRACKET_NUMBER					      PRINT_BRACKET_NUMBER					    PRINT_BRACKET_NUMBER					  PRINT_BRACKET_NUMBER
--							      --							    --								  --
def printBracketNumber ( exp , n ) :			      static void printBracketNumber ( String exp , int n ) {	    static void printBracketNumber ( String exp , int n ) {	  script_not_found : None
    left_bnum = 1					      	int left_bnum = 1 ;					      int leftBNum = 1 ;					  
    right_bnum = list ( )				      	Stack < Integer > right_bnum = new Stack < Integer > ( ) ;    LinkedList < Integer > rightBNum = new LinkedList < > ( ) ; 
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if exp [ i ] == '(' :				      	i < n ;							      i < n ;							  
	    print ( left_bnum , end = " " )		      	i ++ ) {						      i ++ ) {							  
	    right_bnum.append ( left_bnum )		      	  if ( exp . charAt ( i ) == '(' ) {			    	if ( exp . charAt ( i ) == '(' ) {			  
	    left_bnum += 1				      	    System . out . print ( left_bnum + " " ) ;		    	  System . out . print ( leftBNum + " " ) ;		  
	elif exp [ i ] == ')' :				      	    right_bnum . push ( left_bnum ) ;			    	  rightBNum . add ( leftBNum ) ;			  
	    print ( right_bnum [ - 1 ] , end = " " )	      	    left_bnum ++ ;					    	  leftBNum ++ ;						  
	    right_bnum.pop ( )				      	  }							    	}							  
							      	  else if ( exp . charAt ( i ) == ')' ) {		    	else if ( exp . charAt ( i ) == ')' ) {			  
							      	    System . out . print ( right_bnum . peek ( ) + " " ) ;  	  System . out . print ( rightBNum . get ( rightBNum . si 
							      	    right_bnum . pop ( ) ;				    	  rightBNum . removeFirst ( ) ;				  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS		      PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			    PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			  PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS
--							      --							    --								  --
def amendSentence ( string ) :				      public static void amendSentence ( String sstr ) {	    public static void amendSentence ( String string ) {	  script_not_found : None
    string = list ( string )				      	char [ ] str = sstr . toCharArray ( ) ;			      int len = string . length ( ) ;				  
    for i in range ( len ( string ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if string [ i ] >= 'A' and string [ i ] <= 'Z' :      	i < str . length ;					      i < len ;							  
	    string [ i ] = chr ( ord ( string [ i ] ) + 32 )  	i ++ ) {						      i ++ ) {							  
	    if i != 0 :					      	  if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {		    	if ( string . charAt ( i ) >= 'A' && string . charAt ( i  
		print ( "" , end = "" )			      	    str [ i ] = ( char ) ( str [ i ] + 32 ) ;		    	  string . setChar ( ( char ) ( string . charAt ( i ) + 3 
	    print ( string [ i ] , end = "" )		      	    if ( i != 0 ) System . out . print ( " " ) ;	    	  if ( i != 0 ) {					  
	else :						      	    System . out . print ( str [ i ] ) ;		    	    System . out . print ( " " ) ;			  
	    print ( string [ i ] , end = "" )		      	  }							    	  }							  
							      	  else System . out . print ( str [ i ] ) ;		    	  System . out . print ( string . charAt ( i ) ) ;	  
							      	}							    	}							  
							      }								    	else {							  
							      								    	  System . out . print ( string . charAt ( i ) ) ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		      DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		    DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		  DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int [ ] wt , int [ ] val script_not_found : None
    if n == 0 or W == 0 :				      	if ( n == 0 || W == 0 ) return 0 ;			      if ( n == 0 || W == 0 ) return 0 ;			  
	return 0					      	if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n    if ( ( wt [ n - 1 ] ) > W ) return knapSack ( W , wt , val  
    if ( wt [ n - 1 ] > W ) :				      	else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1   else return Math . max ( val [ n - 1 ] + knapSack ( W - wt  
	return knapSack ( W , wt , val , n - 1 )	      }								    }								  
    else :						      								    								  
	return max ( val [ n - 1 ] + knapSack ( W - wt [ n -  								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			      CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			    CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			  CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND
--							      --							    --								  --
def calcAngle ( h , m ) :				      static int calcAngle ( double h , double m ) {		    public static double calcAngle ( int h , int m ) {		  error : CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND.java
    if ( h < 0 or m < 0 or h > 12 or m > 60 ) :		      	if ( h < 0 || m < 0 || h > 12 || m > 60 ) System . out . pr   if ( ( h < 0 ) || ( m < 0 ) || ( h > 12 ) || ( m > 60 ) ) { :69: error: incompatible types: Double cannot be c
	print ( 'Wrong input' )				      	if ( h == 12 ) h = 0 ;					    	System . out . println ( "Wrong input" ) ;		  onverted to int	  if(f_filled(param0.get(i),
    if ( h == 12 ) :					      	if ( m == 60 ) m = 0 ;					      }								  param1.get(i)) == f_gold(param0.get(i),param1.get(
	h = 0						      	int hour_angle = ( int ) ( 0.5 * ( h * 60 + m ) ) ;	      if ( ( h == 12 ) ) {					  i)))				     ^ Note: Some me
    if ( m == 60 ) :					      	int minute_angle = ( int ) ( 6 * m ) ;			    	h = 0 ;							  ssages have been simplified; recompile with -Xdiag
	m = 0						      	int angle = Math . abs ( hour_angle - minute_angle ) ;	      }								  s:verbose to get full output 1 error
    hour_angle = 0.5 * ( h * 60 + m )			      	angle = Math . min ( 360 - angle , angle ) ;		      if ( ( m == 60 ) ) {					  
    minute_angle = 6 * m				      	return angle ;						    	m = 0 ;							  
    angle = abs ( hour_angle - minute_angle )		      }								      }								  
    angle = min ( 360 - angle , angle )			      								      double hourAngle = 0.5 * ( h * 60 + m ) ;			  
    return angle					      								      double minuteAngle = 6 * m ;				  
							      								      double angle = Math . abs ( hourAngle - minuteAngle ) ;	  
							      								      angle = Math . min ( 360 - angle , angle ) ;		  
							      								      return angle ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_SPECIFIC_PAIR_IN_MATRIX				      FIND_A_SPECIFIC_PAIR_IN_MATRIX				    FIND_A_SPECIFIC_PAIR_IN_MATRIX				  FIND_A_SPECIFIC_PAIR_IN_MATRIX
--							      --							    --								  --
def findMaxValue ( mat ) :				      static int findMaxValue ( int N , int mat [ ] [ ] ) {	    static int findMaxValue ( int [ ] [ ] mat ) {		  script_not_found : None
    maxValue = 0					      	int maxValue = Integer . MIN_VALUE ;			      int maxValue = 0 ;					  
    for a in range ( N - 1 ) :				      	for ( int a = 0 ;					      for ( int a = 0 ;						  
	for b in range ( N - 1 ) :			      	a < N - 1 ;						      a < N - 1 ;						  
	    for d in range ( a + 1 , N ) :		      	a ++ ) for ( int b = 0 ;				      a ++ ) {							  
		for e in range ( b + 1 , N ) :		      	b < N - 1 ;						    	for ( int b = 0 ;					  
		    if maxValue < int ( mat [ d ] [ e ] - mat 	b ++ ) for ( int d = a + 1 ;				    	b < N - 1 ;						  
			maxValue = int ( mat [ d ] [ e ] - ma 	d < N ;							    	b ++ ) {						  
    return maxValue ;					      	d ++ ) for ( int e = b + 1 ;				    	  for ( int d = a + 1 ;					  
							      	e < N ;							    	  d < N ;						  
							      	e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ]  	  d ++ ) {						  
							      	return maxValue ;					    	    for ( int e = b + 1 ;				  
							      }								    	    e < N ;						  
							      								    	    e ++ ) {						  
							      								    	      if ( maxValue < ( int ) ( mat [ d ] [ e ] - mat [ a 
							      								    		maxValue = ( int ) ( mat [ d ] [ e ] - mat [ a ]  
							      								    	      }							  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return maxValue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HARDY_RAMANUJAN_THEOREM					      HARDY_RAMANUJAN_THEOREM					    HARDY_RAMANUJAN_THEOREM					  HARDY_RAMANUJAN_THEOREM
--							      --							    --								  --
def exactPrimeFactorCount ( n ) :			      static int exactPrimeFactorCount ( int n ) {		    public static int exactPrimeFactorCount ( int n ) {		  error : HARDY_RAMANUJAN_THEOREM.java:50: error: in
    count = 0						      	int count = 0 ;						      int count = 0 ;						  comparable types: boolean and int   if ( ( n > 2 )
    if ( n % 2 == 0 ) :					      	if ( n % 2 == 0 ) {					      if ( ( n % 2 ) == 0 ) {					   != 0 ) {		     ^ 1 error
	count = count + 1				      	  count ++ ;						    	count = count + 1 ;					  
	while ( n % 2 == 0 ) :				      	  while ( n % 2 == 0 ) n = n / 2 ;			    	while ( ( n % 2 ) == 0 ) {				  
	    n = int ( n / 2 )				      	}							    	  n = ( int ) ( n / 2 ) ;				  
    i = 3						      	for ( int i = 3 ;					    	}							  
    while ( i <= int ( math.sqrt ( n ) ) ) :		      	i <= Math . sqrt ( n ) ;				      }								  
	if ( n % i == 0 ) :				      	i = i + 2 ) {						      int i = 3 ;						  
	    count = count + 1				      	  if ( n % i == 0 ) {					      while ( ( i <= ( int ) Math . sqrt ( n ) ) ) {		  
	    while ( n % i == 0 ) :			      	    count ++ ;						    	if ( ( n % i ) == 0 ) {					  
		n = int ( n / i )			      	    while ( n % i == 0 ) n = n / i ;			    	  count = count + 1 ;					  
	i = i + 2					      	  }							    	  while ( ( n % i ) == 0 ) {				  
    if ( n > 2 ) :					      	}							    	    n = ( int ) ( n / i ) ;				  
	count = count + 1				      	if ( n > 2 ) count ++ ;					    	  }							  
    return count					      	return count ;						    	}							  
							      }								    	i = i + 2 ;						  
							      								      }								  
							      								      if ( ( n > 2 ) != 0 ) {					  
							      								    	count = count + 1 ;					  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_REVERSE_STRING_REMOVING_VOWELS			      PRINT_REVERSE_STRING_REMOVING_VOWELS			    PRINT_REVERSE_STRING_REMOVING_VOWELS			  PRINT_REVERSE_STRING_REMOVING_VOWELS
--							      --							    --								  --
def replaceOriginal ( s , n ) :				      static void replaceOriginal ( String s , int n ) {	    static void replaceOriginal ( String s , int n ) {		  script_not_found : None
    r = [ ' ' ] * n					      	char r [ ] = new char [ n ] ;				      char [ ] r = new char [ n ] ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	r [ i ] = s [ n - 1 - i ]			      	i < n ;							      i < n ;							  
	if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] != 	i ++ ) {						      i ++ ) {							  
	    print ( r [ i ] , end = "" )		      	  r [ i ] = s . charAt ( n - 1 - i ) ;			    	r [ i ] = ' ' ;						  
    print ( )						      	  if ( s . charAt ( i ) != 'a' && s . charAt ( i ) != 'e' &   }								  
							      	    System . out . print ( r [ i ] ) ;			      for ( int i = 0 ;						  
							      	  }							      i < n ;							  
							      	}							      i ++ ) {							  
							      	System . out . println ( "" ) ;				    	r [ i ] = s . charAt ( n - 1 - i ) ;			  
							      }								    	if ( ( s . charAt ( i ) != 'a' ) && ( s . charAt ( i ) != 
							      								    	  System . out . print ( r [ i ] ) ;			  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PANGRAM_CHECKING					      PANGRAM_CHECKING						    PANGRAM_CHECKING						  PANGRAM_CHECKING
--							      --							    --								  --
def checkPangram ( s ) :				      public static boolean checkPangram ( String str ) {	    public static boolean checkPangram ( String s ) {		  error : PANGRAM_CHECKING.java:38: error: bad opera
    List = [ ]						      	boolean [ ] mark = new boolean [ 26 ] ;			      boolean [ ] List = new boolean [ 26 ] ;			  nd type char for unary operator '!'	  if ( ! c =
    for i in range ( 26 ) :				      	int index = 0 ;						      for ( int i = 0 ;						  = ' ' ) {	     ^ 1 error
	List.append ( False )				      	for ( int i = 0 ;					      i < 26 ;							  
    for c in s.lower ( ) :				      	i < str . length ( ) ;					      i ++ ) {							  
	if not c == " " :				      	i ++ ) {						    	List [ i ] = false ;					  
	    List [ ord ( c ) - ord ( 'a' ) ] = True	      	  if ( 'A' <= str . charAt ( i ) && str . charAt ( i ) <= '   }								  
    for ch in List :					      	  else if ( 'a' <= str . charAt ( i ) && str . charAt ( i )   for ( char c : s . toLowerCase ( ) . toCharArray ( ) ) {	  
	if ch == False :				      	  mark [ index ] = true ;				    	if ( ! c == ' ' ) {					  
	    return False				      	}							    	  List [ ( int ) c - 'a' ] = true ;			  
    return True						      	for ( int i = 0 ;					    	}							  
							      	i <= 25 ;						      }								  
							      	i ++ ) if ( mark [ i ] == false ) return ( false ) ;	      for ( boolean ch : List ) {				  
							      	return ( true ) ;					    	if ( ch == false ) {					  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		      MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		    MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		  MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT
--							      --							    --								  --
def maxSum ( grid , n ) :				      public static int maxSum ( int grid [ ] [ ] , int n ) {	    public static int maxSum ( int [ ] [ ] grid , int n ) {	  success : None
    incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )	      	int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ]   int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] 
    excl = 0						      	int excl = 0 , excl_new ;				      int excl = 0 ;						  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	excl_new = max ( excl , incl )			      	i < n ;							      i < n ;							  
	incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i 	i ++ ) {						      i ++ ) {							  
	excl = excl_new					      	  excl_new = Math . max ( excl , incl ) ;		    	int exclNew = Math . max ( excl , incl ) ;		  
    return max ( excl , incl )				      	  incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ]  	incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ]  
							      	  excl = excl_new ;					    	excl = exclNew ;					  
							      	}							      }								  
							      	return Math . max ( excl , incl ) ;			      return Math . max ( excl , incl ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		      PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		    PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		  PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N
--							      --							    --								  --
def findConsecutive ( N ) :				      static void findConsecutive ( int N ) {			    static int findConsecutive ( int N ) {			  script_not_found : None
    start = 1						      	int start = 1 ;						      int start = 1 ;						  
    end = ( N + 1 ) // 2				      	int end = ( N + 1 ) / 2 ;				      int end = ( N + 1 ) / 2 ;					  
    while ( start < end ) :				      	while ( start < end ) {					      while ( ( start < end ) ) {				  
	Sum = 0						      	  int sum = 0 ;						    	int Sum = 0 ;						  
	for i in range ( start , end + 1 ) :		      	  for ( int i = start ;					    	for ( int i = start ;					  
	    Sum = Sum + i				      	  i <= end ;						    	i <= end ;						  
	    if ( Sum == N ) :				      	  i ++ ) {						    	i ++ ) {						  
		for j in range ( start , i + 1 ) :	      	    sum = sum + i ;					    	  Sum = Sum + i ;					  
		    print ( j , end = " " )		      	    if ( sum == N ) {					    	  if ( ( Sum == N ) ) {					  
		print ( )				      	      for ( int j = start ;				    	    for ( int j = start ;				  
		break					      	      j <= i ;						    	    j <= i ;						  
	    if ( Sum > N ) :				      	      j ++ ) System . out . print ( j + " " ) ;		    	    j ++ ) {						  
		break					      	      System . out . println ( ) ;			    	      System . out . print ( j + " " ) ;		  
	Sum = 0						      	      break ;						    	    }							  
	start += 1					      	    }							    	    System . out . println ( ) ;			  
							      	    if ( sum > N ) break ;				    	    break ;						  
							      	  }							    	  }							  
							      	  sum = 0 ;						    	}							  
							      	  start ++ ;						    	if ( ( Sum > N ) ) break ;				  
							      	}							      }								  
							      }								      Sum = 0 ;							  
							      								      start ++ ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY
--							      --							    --								  --
def minJumps ( arr , l , h ) :				      static int minJumps ( int arr [ ] , int l , int h ) {	    public static double minJumps ( double [ ] arr , int l , int  script_not_found : None
    if ( h == l ) :					      	if ( h == l ) return 0 ;				      if ( ( h == l ) ) {					  
	return 0					      	if ( arr [ l ] == 0 ) return Integer . MAX_VALUE ;	    	return 0 ;						  
    if ( arr [ l ] == 0 ) :				      	int min = Integer . MAX_VALUE ;				      }								  
	return float ( 'inf' )				      	for ( int i = l + 1 ;					      if ( ( arr [ l ] == 0 ) ) {				  
    min = float ( 'inf' )				      	i <= h && i <= l + arr [ l ] ;				    	return Double . MAX_VALUE ;				  
    for i in range ( l + 1 , h + 1 ) :			      	i ++ ) {						      }								  
	if ( i < l + arr [ l ] + 1 ) :			      	  int jumps = minJumps ( arr , i , h ) ;		      double min = Double . MIN_VALUE ;				  
	    jumps = minJumps ( arr , i , h )		      	  if ( jumps != Integer . MAX_VALUE && jumps + 1 < min ) mi   for ( int i = l + 1 ;					  
	    if ( jumps != float ( 'inf' ) and jumps + 1 < min 	}							      i <= h ;							  
		min = jumps + 1				      	return min ;						      i ++ ) {							  
    return min						      }								    	if ( ( i < l + arr [ l ] + 1 ) ) {			  
							      								    	  double jumps = minJumps ( arr , i , h ) ;		  
							      								    	  if ( ( jumps != Double . MAX_VALUE ) && ( jumps + 1 < m 
							      								    	    min = jumps + 1 ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return min ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FITTING_SHELVES_PROBLEM					      FITTING_SHELVES_PROBLEM					    FITTING_SHELVES_PROBLEM					  FITTING_SHELVES_PROBLEM
--							      --							    --								  --
def minSpacePreferLarge ( w , m , n ) :			      static void minSpacePreferLarge ( int wall , int m , int n )  public static void minSpacePreferLarge ( int w , int m , int  script_not_found : None
    num_m = 0						      	int num_m = 0 , num_n = 0 , min_empty = wall ;		      int numM = 0 ;						  
    num_n = 0						      	int p = 0 , q = 0 , rem ;				      int numN = 0 ;						  
    rem = w						      	while ( wall >= n ) {					      int rem = w ;						  
    p = 0						      	  p = wall / m ;					      int p = 0 ;						  
    q = 0						      	  rem = wall % m ;					      int q = 0 ;						  
    r = 0						      	  if ( rem <= min_empty ) {				      int r = 0 ;						  
    while ( w >= n ) :					      	    num_m = p ;						      while ( ( w >= n ) ) {					  
	p = w / m					      	    num_n = q ;						    	p = w / m ;						  
	r = w % m					      	    min_empty = rem ;					    	r = w % m ;						  
	if ( r <= rem ) :				      	  }							    	if ( ( r <= rem ) ) {					  
	    num_m = p					      	  q += 1 ;						    	  numM = p ;						  
	    num_n = q					      	  wall = wall - n ;					    	  numN = q ;						  
	    rem = r					      	}							    	  rem = r ;						  
	q += 1						      	System . out . println ( num_m + " " + num_n + " " + min_em 	}							  
	w -= n						      }								    	q ++ ;							  
    print ( str ( int ( num_m ) ) + " " + str ( num_n ) + " " 								    	w -= n ;						  
							      								      }								  
							      								      System . out . println ( Integer . toString ( numM ) + " "  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIZE_SUBARRAY_MAXIMUM_SUM				      SIZE_SUBARRAY_MAXIMUM_SUM					    SIZE_SUBARRAY_MAXIMUM_SUM					  SIZE_SUBARRAY_MAXIMUM_SUM
--							      --							    --								  --
def maxSubArraySum ( a , size ) :			      static int maxSubArraySum ( int a [ ] , int size ) {	    static int maxSubArraySum ( int [ ] a , int size ) {	  failure : #Results:2, 10
    max_so_far = - maxsize - 1				      	int max_so_far = Integer . MIN_VALUE , max_ending_here = 0    int maxSoFar = - Integer . MAX_VALUE - 1 ;		  
    max_ending_here = 0					      	for ( int i = 0 ;					      int maxEndsHere = 0 ;					  
    start = 0						      	i < size ;						      int start = 0 ;						  
    end = 0						      	i ++ ) {						      int end = 0 ;						  
    s = 0						      	  max_ending_here += a [ i ] ;				      int s = 0 ;						  
    for i in range ( 0 , size ) :			      	  if ( max_so_far < max_ending_here ) {			      for ( int i = 0 ;						  
	max_ending_here += a [ i ]			      	    max_so_far = max_ending_here ;			      i <= size ;						  
	if max_so_far < max_ending_here :		      	    start = s ;						      i ++ ) {							  
	    max_so_far = max_ending_here		      	    end = i ;						    	maxEndsHere += a [ i ] ;				  
	    start = s					      	  }							    	if ( maxSoFar < maxEndsHere ) {				  
	    end = i					      	  if ( max_ending_here < 0 ) {				    	  maxSoFar = maxEndsHere ;				  
	if max_ending_here < 0 :			      	    max_ending_here = 0 ;				    	  start = s ;						  
	    max_ending_here = 0				      	    s = i + 1 ;						    	  end = i ;						  
	    s = i + 1					      	  }							    	}							  
    return ( end - start + 1 )				      	}							    	if ( maxEndsHere < 0 ) {				  
							      	return ( end - start + 1 ) ;				    	  maxEndsHere = 0 ;					  
							      }								    	  s = i + 1 ;						  
							      								    	}							  
							      								      }								  
							      								      return ( end - start + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING	      SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING	    SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING		  SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING
--							      --							    --								  --
def sortByPattern ( str , pat ) :			      static void sortByPattern ( char [ ] str , char [ ] pat ) {   public static String sortByPattern ( String str , String pat  script_not_found : None
    global MAX_CHAR					      	int count [ ] = new int [ MAX_CHAR ] ;			      int i ;							  
    count = [ 0 ] * MAX_CHAR				      	for ( int i = 0 ;					      int [ ] count = new int [ MAX_CHAR ] ;			  
    for i in range ( 0 , len ( str ) ) :		      	i < str . length ;					      for ( i = 0 ;						  
	count [ ord ( str [ i ] ) - 97 ] += 1		      	i ++ ) {						      ( i = str . length ( ) ) != 0 ;				  
    index = 0						      	  count [ str [ i ] - 'a' ] ++ ;			      i ++ ) {							  
    str = ""						      	}							    	count [ ( int ) str . charAt ( i ) - 97 ] ++ ;		  
    for i in range ( 0 , len ( pat ) ) :		      	int index = 0 ;						      }								  
	j = 0						      	for ( int i = 0 ;					      int index = 0 ;						  
	while ( j < count [ ord ( pat [ i ] ) - ord ( 'a' ) ] 	i < pat . length ;					      str = "" ;						  
	    str += pat [ i ]				      	i ++ ) {						      for ( i = 0 ;						  
	    j = j + 1					      	  for ( int j = 0 ;					      ( i = pat . length ( ) ) != 0 ;				  
	    index += 1					      	  j < count [ pat [ i ] - 'a' ] ;			      i ++ ) {							  
    return str						      	  j ++ ) {						    	int j = 0 ;						  
							      	    str [ index ++ ] = pat [ i ] ;			    	while ( ( j < count [ ( int ) pat . charAt ( i ) - 'a' ]  
							      	  }							    	  str += pat . charAt ( i ) ;				  
							      	}							    	  j = j + 1 ;						  
							      }								    	  index ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return str ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY
--							      --							    --								  --
def findPair ( arr , n ) :				      static void findPair ( int [ ] arr , int n ) {		    static void findPair ( int [ ] arr , int n ) {		  script_not_found : None
    found = False					      	boolean found = false ;					      boolean found = false ;					  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    for k in range ( 0 , n ) :			      	i ++ ) {						      i ++ ) {							  
		if ( arr [ i ] + arr [ j ] == arr [ k ] ) :   	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
		    print ( arr [ i ] , arr [ j ] )	      	  j < n ;						    	j <= n ;						  
		    found = True			      	  j ++ ) {						    	j ++ ) {						  
    if ( found == False ) :				      	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
	print ( "Not exist" )				      	    k < n ;						    	  k <= n ;						  
							      	    k ++ ) {						    	  k ++ ) {						  
							      	      if ( arr [ i ] + arr [ j ] == arr [ k ] ) {	    	    if ( ( arr [ i ] + arr [ j ] ) == arr [ k ] ) {	  
							      		System . out . println ( arr [ i ] + " " + arr [ j  	      System . out . println ( arr [ i ] + arr [ j ] ) ;  
							      		found = true ;					    	      found = true ;					  
							      	      }							    	    }							  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	if ( found == false ) System . out . println ( "Not exist"    if ( ( found == false ) ) {				  
							      }								    	System . out . println ( "Not exist" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS				  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS
--							      --							    --								  --
def sortedAfterSwap ( A , B , n ) :			      static boolean sortedAfterSwap ( int A [ ] , boolean B [ ] ,  public static boolean sortedAfterSwap ( int [ ] A , int [ ] B script_not_found : None
    for i in range ( 0 , n - 1 ) :			      	int i , j ;						      for ( int i = 0 ;						  
	if ( B [ i ] == 1 ) :				      	for ( i = 0 ;						      i <= n - 1 ;						  
	    j = i					      	i < n - 1 ;						      i ++ ) {							  
	    while ( B [ j ] == 1 ) :			      	i ++ ) {						    	if ( ( B [ i ] == 1 ) ) {				  
		j = j + 1				      	  if ( B [ i ] ) {					    	  int j = i ;						  
	    A = A [ 0 : i ] + sorted ( A [ i : j + 1 ] ) + A  	    j = i ;						    	  while ( ( B [ j ] == 1 ) ) {				  
	    i = j					      	    while ( B [ j ] ) {					    	    j = j + 1 ;						  
    for i in range ( 0 , n ) :				      	      j ++ ;						    	  }							  
	if ( A [ i ] != i + 1 ) :			      	    }							    	  A = Arrays . copyOfRange ( A , 0 , i ) + Arrays . copyO 
	    return False				      	    Arrays . sort ( A , i , 1 + j ) ;			    	  i = j ;						  
    return True						      	    i = j ;						    	}							  
							      	  }							      }								  
							      	}							      for ( int i = 0 ;						  
							      	for ( i = 0 ;						      i <= n ;							  
							      	i < n ;							      i ++ ) {							  
							      	i ++ ) {						    	if ( ( A [ i ] != i + 1 ) ) {				  
							      	  if ( A [ i ] != i + 1 ) {				    	  return false ;					  
							      	    return false ;					    	}							  
							      	  }							      }								  
							      	}							      return true ;						  
							      	return true ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_
--							      --							    --								  --
def longestSubseqWithK ( str , k ) :			      static void longestSubseqWithK ( String str , int k ) {	    public static void longestSubseqWithK ( String str , int k )  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    freq = [ 0 ] * MAX_CHARS				      	int freq [ ] = new int [ MAX_CHARS ] ;			      int [ ] freq = new int [ MAX_CHARS ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	freq [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	      	i < n ;							      i < n ;							  
    for i in range ( n ) :				      	i ++ ) {						      i ++ ) {							  
	if ( freq [ ord ( str [ i ] ) - ord ( 'a' ) ] >= k )  	  freq [ str . charAt ( i ) - 'a' ] ++ ;		    	freq [ ( int ) str . charAt ( i ) - ( int ) 'a' ] ++ ;	  
	    print ( str [ i ] , end = "" )		      	}							      }								  
							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
							      	i < n ;							      i < n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  if ( freq [ str . charAt ( i ) - 'a' ] >= k ) {	    	if ( ( freq [ ( int ) str . charAt ( i ) - ( int ) 'a' )  
							      	    System . out . print ( str . charAt ( i ) ) ;	    	  System . out . print ( str . charAt ( i ) + "" ) ;	  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	      FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	    FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	  FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE
--							      --							    --								  --
def findMinNumber ( n ) :				      static int findMinNumber ( int n ) {			    static int findMinNumber ( int n ) {			  success : None
    count = 0						      	int count = 0 , ans = 1 ;				      int count = 0 ;						  
    ans = 1						      	while ( n % 2 == 0 ) {					      int ans = 1 ;						  
    while n % 2 == 0 :					      	  count ++ ;						      while ( n % 2 == 0 ) {					  
	count += 1					      	  n /= 2 ;						    	count ++ ;						  
	n //= 2						      	}							    	n /= 2 ;						  
    if count % 2 is not 0 :				      	if ( count % 2 == 1 ) ans *= 2 ;			      }								  
	ans *= 2					      	for ( int i = 3 ;					      if ( count % 2 != 0 ) {					  
    for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2  	i <= Math . sqrt ( n ) ;				    	ans *= 2 ;						  
	count = 0					      	i += 2 ) {						      }								  
	while n % i == 0 :				      	  count = 0 ;						      for ( int i = 3 ;						  
	    count += 1					      	  while ( n % i == 0 ) {				      i <= ( ( int ) Math . sqrt ( n ) ) ;			  
	    n //= i					      	    count ++ ;						      i += 2 ) {						  
	if count % 2 is not 0 :				      	    n /= i ;						    	count = 0 ;						  
	    ans *= i					      	  }							    	while ( n % i == 0 ) {					  
    if n > 2 :						      	  if ( count % 2 == 1 ) ans *= i ;			    	  count ++ ;						  
	ans *= n					      	}							    	  n /= i ;						  
    return ans						      	if ( n > 2 ) ans *= n ;					    	}							  
							      	return ans ;						    	if ( count % 2 != 0 ) {					  
							      }								    	  ans *= i ;						  
							      								    	}							  
							      								      }								  
							      								      if ( n > 2 ) {						  
							      								    	ans *= n ;						  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU
--							      --							    --								  --
def returnMaxSum ( A , B , n ) :			      static int returnMaxSum ( int A [ ] , int B [ ] , int n ) {   static int returnMaxSum ( int [ ] A , int [ ] B , int n ) {	  failure : #Results:7, 10
    mp = set ( )					      	Set < Integer > mp = new HashSet < Integer > ( ) ;	      HashSet < Integer > mp = new HashSet < > ( ) ;		  
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    curr_sum = curr_begin = 0				      	int curr_sum = 0 , curr_begin = 0 ;			      int currSum = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      int currBegin = 0 ;					  
	while A [ i ] in mp :				      	i < n ;							      for ( int i = 0 ;						  
	    mp.remove ( A [ curr_begin ] )		      	++ i ) {						      i <= n ;							  
	    curr_sum -= B [ curr_begin ]		      	  while ( mp . contains ( A [ i ] ) ) {			      i ++ ) {							  
	    curr_begin += 1				      	    mp . remove ( A [ curr_begin ] ) ;			    	while ( mp . contains ( A [ i ] ) ) {			  
	mp.add ( A [ i ] )				      	    curr_sum -= B [ curr_begin ] ;			    	  mp . remove ( A [ currBegin ] ) ;			  
	curr_sum += B [ i ]				      	    curr_begin ++ ;					    	  currSum -= B [ currBegin ] ;				  
	result = max ( result , curr_sum )		      	  }							    	  currBegin ++ ;					  
    return result					      	  mp . add ( A [ i ] ) ;				    	}							  
							      	  curr_sum += B [ i ] ;					    	mp . add ( A [ i ] ) ;					  
							      	  result = Integer . max ( result , curr_sum ) ;	    	currSum += B [ i ] ;					  
							      	}							    	result = Math . max ( result , currSum ) ;		  
							      	return result ;						      }								  
							      }								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1	      COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		    COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		  COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1
--							      --							    --								  --
def getInvCount ( arr , n ) :				      int getInvCount ( int arr [ ] , int n ) {			    static int getInvCount ( int [ ] arr , int n ) {		  success : None
    invcount = 0					      	int invcount = 0 ;					      int invCount = 0 ;					  
    for i in range ( 1 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 1 ;						  
	small = 0					      	i < n - 1 ;						      i < n - 1 ;						  
	for j in range ( i + 1 , n ) :			      	i ++ ) {						      i ++ ) {							  
	    if ( arr [ i ] > arr [ j ] ) :		      	  int small = 0 ;					    	int small = 0 ;						  
		small += 1				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
	great = 0					      	  j < n ;						    	j < n ;							  
	for j in range ( i - 1 , - 1 , - 1 ) :		      	  j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;	    	j ++ ) {						  
	    if ( arr [ i ] < arr [ j ] ) :		      	  int great = 0 ;					    	  if ( ( arr [ i ] > arr [ j ] ) ) {			  
		great += 1				      	  for ( int j = i - 1 ;					    	    small ++ ;						  
	invcount += great * small			      	  j >= 0 ;						    	  }							  
    return invcount					      	  j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;	    	}							  
							      	  invcount += great * small ;				    	int great = 0 ;						  
							      	}							    	for ( int j = i - 1 ;					  
							      	return invcount ;					    	j >= 0 ;						  
							      }								    	j -- ) {						  
							      								    	  if ( ( arr [ i ] < arr [ j ] ) ) {			  
							      								    	    great ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								    	invCount += great * small ;				  
							      								      }								  
							      								      return invCount ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1
--							      --							    --								  --
def isProduct ( arr , n , x ) :				      static boolean isProduct ( int arr [ ] , int n , int x ) {    static boolean isProduct ( int [ ] arr , int n , int x ) {	  success : None
    if n < 2 :						      	HashSet < Integer > hset = new HashSet < > ( ) ;	      if ( n < 2 ) {						  
	return False					      	if ( n < 2 ) return false ;				    	return false ;						  
    s = set ( )						      	for ( int i = 0 ;					      }								  
    for i in range ( 0 , n ) :				      	i < n ;							      HashSet < Integer > s = new HashSet < > ( ) ;		  
	if arr [ i ] == 0 :				      	i ++ ) {						      for ( int i = 0 ;						  
	    if x == 0 :					      	  if ( arr [ i ] == 0 ) {				      i <= n ;							  
		return True				      	    if ( x == 0 ) return true ;				      i ++ ) {							  
	    else :					      	    else continue ;					    	if ( arr [ i ] == 0 ) {					  
		continue				      	  }							    	  if ( x == 0 ) {					  
	if x % arr [ i ] == 0 :				      	  if ( x % arr [ i ] == 0 ) {				    	    return true ;					  
	    if x // arr [ i ] in s :			      	    if ( hset . contains ( x / arr [ i ] ) ) return true ;  	  }							  
		return True				      	    hset . add ( arr [ i ] ) ;				    	  else {						  
	    s.add ( arr [ i ] )				      	  }							    	    continue ;						  
    return False					      	}							    	  }							  
							      	return false ;						    	}							  
							      }								    	if ( x % arr [ i ] == 0 ) {				  
							      								    	  if ( s . contains ( x / arr [ i ] ) ) {		  
							      								    	    return true ;					  
							      								    	  }							  
							      								    	  s . add ( arr [ i ] ) ;				  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1
--							      --							    --								  --
def findMaxAverage ( arr , n , k ) :			      static int findMaxAverage ( int arr [ ] , int n , int k ) {   static int findMaxAverage ( int [ ] arr , int n , int k ) {	  success : None
    if ( k > n ) :					      	if ( k > n ) return - 1 ;				      if ( ( k > n ) ) {					  
	return - 1					      	int sum = arr [ 0 ] ;					    	return - 1 ;						  
    sum = arr [ 0 ]					      	for ( int i = 1 ;					      }								  
    for i in range ( 1 , k ) :				      	i < k ;							      int sum = arr [ 0 ] ;					  
	sum += arr [ i ]				      	i ++ ) sum += arr [ i ] ;				      for ( int i = 1 ;						  
    max_sum = sum					      	int max_sum = sum , max_end = k - 1 ;			      i < k ;							  
    max_end = k - 1					      	for ( int i = k ;					      i ++ ) {							  
    for i in range ( k , n ) :				      	i < n ;							    	sum += arr [ i ] ;					  
	sum = sum + arr [ i ] - arr [ i - k ]		      	i ++ ) {						      }								  
	if ( sum > max_sum ) :				      	  sum = sum + arr [ i ] - arr [ i - k ] ;		      int maxSum = sum ;					  
	    max_sum = sum				      	  if ( sum > max_sum ) {				      int maxEnd = k - 1 ;					  
	    max_end = i					      	    max_sum = sum ;					      for ( int i = k ;						  
    return max_end - k + 1				      	    max_end = i ;					      i < n ;							  
							      	  }							      i ++ ) {							  
							      	}							    	sum = sum + arr [ i ] - arr [ i - k ] ;			  
							      	return max_end - k + 1 ;				    	if ( ( sum > maxSum ) ) {				  
							      }								    	  maxSum = sum ;					  
							      								    	  maxEnd = i ;						  
							      								    	}							  
							      								      }								  
							      								      return maxEnd - k + 1 ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		      MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		    MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		  MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS
--							      --							    --								  --
def maximumSum ( arr , n , k ) :			      static int maximumSum ( int arr [ ] , int n , int k ) {	    public static int maximumSum ( int [ ] arr , int n , int k )  script_not_found : None
    for i in range ( 1 , k + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	min = + 2147483647				      	i <= k ;						      i <= k ;							  
	index = - 1					      	i ++ ) {						      i ++ ) {							  
	for j in range ( n ) :				      	  int min = + 2147483647 ;				    	int min = + 2147483647 ;				  
	    if ( arr [ j ] < min ) :			      	  int index = - 1 ;					    	int index = - 1 ;					  
		min = arr [ j ]				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
		index = j				      	  j < n ;						    	j < n ;							  
	if ( min == 0 ) :				      	  j ++ ) {						    	j ++ ) {						  
	    break					      	    if ( arr [ j ] < min ) {				    	  if ( ( arr [ j ] < min ) ) {				  
	arr [ index ] = - arr [ index ]			      	      min = arr [ j ] ;					    	    min = arr [ j ] ;					  
    sum = 0						      	      index = j ;					    	    index = j ;						  
    for i in range ( n ) :				      	    }							    	  }							  
	sum += arr [ i ]				      	  }							    	}							  
    return sum						      	  if ( min == 0 ) break ;				    	if ( ( min == 0 ) ) break ;				  
							      	  arr [ index ] = - arr [ index ] ;			    	arr [ index ] = - arr [ index ] ;			  
							      	}							      }								  
							      	int sum = 0 ;						      int sum = 0 ;						  
							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
							      	i < n ;							      i < n ;							  
							      	i ++ ) sum += arr [ i ] ;				      i ++ ) sum += arr [ i ] ;					  
							      	return sum ;						      return sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES	  CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES
--							      --							    --								  --
def isRotated ( str1 , str2 ) :				      static boolean isRotated ( String str1 , String str2 ) {	    public static boolean isRotated ( String str1 , String str2 ) success : None
    if ( len ( str1 ) != len ( str2 ) ) :		      	if ( str1 . length ( ) != str2 . length ( ) ) return false    if ( ( str1 . length ( ) != str2 . length ( ) ) ) {	  
	return False					      	String clock_rot = "" ;					    	return false ;						  
    clock_rot = ""					      	String anticlock_rot = "" ;				      }								  
    anticlock_rot = ""					      	int len = str2 . length ( ) ;				      String clockRot = "" ;					  
    l = len ( str2 )					      	anticlock_rot = anticlock_rot + str2 . substring ( len - 2    String anotherRotrot = "" ;				  
    anticlock_rot = ( anticlock_rot + str2 [ l - 2 : ] + str2 	clock_rot = clock_rot + str2 . substring ( 2 ) + str2 . sub   int l = str2 . length ( ) ;				  
    clock_rot = clock_rot + str2 [ 2 : ] + str2 [ 0 : 2 ]     	return ( str1 . equals ( clock_rot ) || str1 . equals ( ant   anotherRotrot = ( anotherRotrot + str2 . substring ( l - 2  
    return ( str1 == clock_rot or str1 == anticlock_rot )     }								      clockRot = clockRot + str2 . substring ( 2 ) + str2 . subst 
							      								      return ( str1 . equals ( clockRot ) || str1 . equals ( anot 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1	      CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		    CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		  CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1
--							      --							    --								  --
def checkCorrectOrNot ( s ) :				      static boolean checkCorrectOrNot ( String s ) {		    static boolean checkCorrectOrNot ( String s ) {		  script_not_found : None
    global MAX_CHAR					      	int [ ] count = new int [ MAX_CHAR ] ;			      int i ;							  
    count = [ 0 ] * MAX_CHAR				      	int n = s . length ( ) ;				      int [ ] count = new int [ MAX_CHAR ] ;			  
    n = len ( s )					      	if ( n == 1 ) return true ;				      int n = s . length ( ) ;					  
    if n == 1 :						      	for ( int i = 0 , j = n - 1 ;				      if ( n == 1 ) return true ;				  
	return true					      	i < j ;							      i = 0 ;							  
    i = 0 j = n - 1					      	i ++ , j -- ) {						      j = n - 1 ;						  
    while i < j :					      	  count [ s . charAt ( i ) - 'a' ] ++ ;			      while ( i < j ) {						  
	count [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	      	  count [ s . charAt ( j ) - 'a' ] -- ;			    	count [ ( int ) s . charAt ( i ) - 'a' ] ++ ;		  
	count [ ord ( s [ j ] ) - ord ( 'a' ) ] -= 1	      	}							    	count [ ( int ) s . charAt ( j ) - 'a' ] -- ;		  
	i += 1 j -= 1					      	for ( int i = 0 ;					    	i ++ ;							  
    for i in range ( MAX_CHAR ) :			      	i < MAX_CHAR ;						    	j -- ;							  
	if count [ i ] != 0 :				      	i ++ ) if ( count [ i ] != 0 ) return false ;		      }								  
	    return False				      	return true ;						      for ( i = 0 ;						  
    return True						      }								      i < MAX_CHAR ;						  
							      								      i ++ ) if ( count [ i ] != 0 ) return false ;		  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
JUMP_SEARCH						      JUMP_SEARCH						    JUMP_SEARCH							  JUMP_SEARCH
--							      --							    --								  --
def jumpSearch ( arr , x , n ) :			      public static int jumpSearch ( int [ ] arr , int x ) {	    public static int jumpSearch ( int [ ] arr , int x , int n )  script_not_found : None
    step = math.sqrt ( n )				      	int n = arr . length ;					      double step = Math . sqrt ( n ) ;				  
    prev = 0						      	int step = ( int ) Math . floor ( Math . sqrt ( n ) ) ;	      double prev = 0 ;						  
    while arr [ int ( min ( step , n ) - 1 ) ] < x :	      	int prev = 0 ;						      while ( arr [ ( int ) Math . min ( step , n ) - 1 ] < x ) { 
	prev = step					      	while ( arr [ Math . min ( step , n ) - 1 ] < x ) {	    	prev = step ;						  
	step += math.sqrt ( n )				      	  prev = step ;						    	step += Math . sqrt ( n ) ;				  
	if prev >= n :					      	  step += ( int ) Math . floor ( Math . sqrt ( n ) ) ;	    	if ( prev >= n ) {					  
	    return - 1					      	  if ( prev >= n ) return - 1 ;				    	  return - 1 ;						  
    while arr [ int ( prev ) ] < x :			      	}							    	}							  
	prev += 1					      	while ( arr [ prev ] < x ) {				      }								  
	if prev == min ( step , n ) :			      	  prev ++ ;						      while ( arr [ ( int ) prev ] < x ) {			  
	    return - 1					      	  if ( prev == Math . min ( step , n ) ) return - 1 ;	    	prev ++ ;						  
    if arr [ int ( prev ) ] == x :			      	}							    	if ( prev == Math . min ( step , n ) ) {		  
	return prev					      	if ( arr [ prev ] == x ) return prev ;			    	  return - 1 ;						  
    return - 1						      	return - 1 ;						    	}							  
							      }								      }								  
							      								      if ( arr [ ( int ) prev ] == x ) {			  
							      								    	return prev ;						  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA
--							      --							    --								  --
def noAdjacentDup ( s ) :				      public static String noAdjacentDup ( String s1 ) {	    static String noAdjacentDup ( String s ) {			  error : PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTA
    n = len ( s )					      	int n = s1 . length ( ) ;				      int n = s . length ( ) ;					  IN_ADJACENT_DUPLICATES.java:35: error: unexpected
    for i in range ( 1 , n ) :				      	char [ ] s = s1 . toCharArray ( ) ;			      for ( int i = 1 ;						  type	     s . charAt ( i ) = "a" ;
	if ( s [ i ] == s [ i - 1 ] ) :			      	for ( int i = 1 ;					      i < n ;							     ^	 required: variable   found:	value PRINT_
	    s [ i ] = "a"				      	i < n ;							      ) {							  A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DU
	    while ( s [ i ] == s [ i - 1 ] or ( i + 1 < n and 	i ++ ) {						    	if ( ( s . charAt ( i ) == s . charAt ( i - 1 ) ) ) {	  PLICATES.java:37: error: unexpected type	   s
		s [ i ] += 1				      	  if ( s [ i ] == s [ i - 1 ] ) {			    	  s . charAt ( i ) = "a" ;				   . charAt ( i ) ++ ;			  ^   requir
	    i += 1					      	    s [ i ] = 'a' ;					    	  while ( ( s . charAt ( i ) == s . charAt ( i - 1 ) ) || ed: variable	 found:	   value 2 errors
    return s						      	    while ( s [ i ] == s [ i - 1 ] || ( i + 1 < n && s [ i  	    s . charAt ( i ) ++ ;				  
							      	    i ++ ;						    	  }							  
							      	  }							    	  i ++ ;						  
							      	}							    	}							  
							      	return ( new String ( s ) ) ;				      }								  
							      }								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1
--							      --							    --								  --
def minheapify ( a , index ) :				      static void minheapify ( int [ ] a , int index ) {	    public static void minheapify ( int [ ] a , int index ) {	  script_not_found : None
    small = index					      	int small = index ;					      int small = index ;					  
    l = 2 * index + 1					      	int l = 2 * index + 1 ;					      int l = 2 * index + 1 ;					  
    r = 2 * index + 2					      	int r = 2 * index + 2 ;					      int r = 2 * index + 2 ;					  
    if ( l < n and a [ l ] < a [ small ] ) :		      	if ( l < n && a [ l ] < a [ small ] ) small = l ;	      if ( ( l < n ) && ( a [ l ] < a [ small ] ) ) {		  
	small = l					      	if ( r < n && a [ r ] < a [ small ] ) small = r ;	    	small = l ;						  
    if ( r < n and a [ r ] < a [ small ] ) :		      	if ( small != index ) {					      }								  
	small = r					      	  int t = a [ small ] ;					      if ( ( r < n ) && ( a [ r ] < a [ small ] ) ) {		  
    if ( small != index ) :				      	  a [ small ] = a [ index ] ;				    	small = r ;						  
	( a [ small ] , a [ index ] ) = ( a [ index ] , a [ s 	  a [ index ] = t ;					      }								  
	minheapify ( a , small )			      	  minheapify ( a , small ) ;				      if ( ( small != index ) ) {				  
							      	}							    	( a [ small ] ) . swap ( index , index ) ;		  
							      }								    	minheapify ( a , small ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BRESENHAMS_LINE_GENERATION_ALGORITHM			      BRESENHAMS_LINE_GENERATION_ALGORITHM			    BRESENHAMS_LINE_GENERATION_ALGORITHM			  BRESENHAMS_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
def bresenham ( x1 , y1 , x2 , y2 ) :			      static void bresenham ( int x1 , int y1 , int x2 , int y2 ) { public static void bresenham ( int x1 , int y1 , int x2 , int script_not_found : None
    m_new = 2 * ( y2 - y1 )				      	int m_new = 2 * ( y2 - y1 ) ;				      int mNew = 2 * ( y2 - y1 ) ;				  
    slope_error_new = m_new - ( x2 - x1 )		      	int slope_error_new = m_new - ( x2 - x1 ) ;		      int slopeErrorNew = mNew - ( x2 - x1 ) ;			  
    y = y1						      	for ( int x = x1 , y = y1 ;				      int y = y1 ;						  
    for x in range ( x1 , x2 + 1 ) :			      	x <= x2 ;						      for ( int x = x1 ;					  
	print ( "(" , x , "," , y , ")\n" )		      	x ++ ) {						      x <= x2 ;							  
	slope_error_new = slope_error_new + m_new	      	  System . out . print ( "(" + x + "," + y + ")\n" ) ;	      x ++ ) {							  
	if ( slope_error_new >= 0 ) :			      	  slope_error_new += m_new ;				    	System . out . printf ( "(%d,%d)\n" , x , y , ")\n" ) ;	  
	    y = y + 1					      	  if ( slope_error_new >= 0 ) {				    	slopeErrorNew = slopeErrorNew + mNew ;			  
	    slope_error_new = slope_error_new - 2 * ( x2 - x1 	    y ++ ;						    	if ( ( slopeErrorNew >= 0 ) ) {				  
							      	    slope_error_new -= 2 * ( x2 - x1 ) ;		    	  y = y + 1 ;						  
							      	  }							    	  slopeErrorNew = slopeErrorNew - 2 * ( x2 - x1 ) ;	  
							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	      NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	    NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	  NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS
--							      --							    --								  --
def countTriangle ( g , isDirected ) :			      int countTriangle ( int graph [ ] [ ] , boolean isDirected )  static int countTriangle ( int [ ] [ ] g , boolean isDirected script_not_found : None
    nodes = len ( g )					      	int count_Triangle = 0 ;				      int nodes = g . length ;					  
    count_Triangle = 0					      	for ( int i = 0 ;					      int countTriangle = 0 ;					  
    for i in range ( nodes ) :				      	i < V ;							      for ( int i = 0 ;						  
	for j in range ( nodes ) :			      	i ++ ) {						      i < nodes ;						  
	    for k in range ( nodes ) :			      	  for ( int j = 0 ;					      i ++ ) {							  
		if ( i != j and i != k and j != k and g [ i ] 	  j < V ;						    	for ( int j = 0 ;					  
		    count_Triangle += 1			      	  j ++ ) {						    	j < nodes ;						  
    return count_Triangle / 3 if isDirected else count_Triang 	    for ( int k = 0 ;					    	j ++ ) {						  
							      	    k < V ;						    	  for ( int k = 0 ;					  
							      	    k ++ ) {						    	  k < nodes ;						  
							      	      if ( graph [ i ] [ j ] == 1 && graph [ j ] [ k ] == 1 	  k ++ ) {						  
							      	    }							    	    if ( ( i != j && i != k && j != k && g [ i ] [ j ] != 
							      	  }							    	      countTriangle ++ ;				  
							      	}							    	    }							  
							      	if ( isDirected == true ) {				    	  }							  
							      	  count_Triangle /= 3 ;					    	}							  
							      	}							      }								  
							      	else {							      return isDirected ? countTriangle / 3 : countTriangle / 6 ; 
							      	  count_Triangle /= 6 ;					    }								  
							      	}							    								  
							      	return count_Triangle ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			      FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			    FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			  FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE
--							      --							    --								  --
def findDimen ( H , A ) :				      static void findDimen ( int H , int A ) {			    static void findDimen ( int H , int A ) {			  script_not_found : None
    if H * H < 4 * A :					      	if ( H * H < 4 * A ) {					      if ( H * H < 4 * A ) {					  
	print ( "Not Possible" )			      	  System . out . println ( "Not Possible" ) ;		    	System . out . println ( "Not Possible" ) ;		  
	return						      	  return ;						    	return ;						  
    apb = sqrt ( H * H + 4 * A )			      	}							      }								  
    asb = sqrt ( H * H - 4 * A )			      	double apb = Math . sqrt ( H * H + 4 * A ) ;		      double apb = Math . sqrt ( H * H + 4 * A ) ;		  
    print ( "P = " , "%.2f" % ( ( apb - asb ) / 2.0 ) )	      	double asb = Math . sqrt ( H * H - 4 * A ) ;		      double asb = Math . sqrt ( H * H - 4 * A ) ;		  
    print ( "B = " , "%.2f" % ( ( apb + asb ) / 2.0 ) )	      	System . out . println ( "P = " + Math . round ( ( ( apb -    System . out . println ( "P = " + ( ( apb - asb ) / 2.0 ) ) 
							      	System . out . print ( "B = " + Math . round ( ( ( apb + as   System . out . println ( "B = " + ( ( apb + asb ) / 2.0 ) ) 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF
--							      --							    --								  --
def isMultipleOf3 ( n ) :				      static int isMultipleOf3 ( int n ) {			    public static boolean isMultipleOf3 ( int n ) {		  error : WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NU
    odd_count = 0					      	int odd_count = 0 ;					      int oddCount = 0 ;					  MBER_IS_MULTIPLE_OF_3.java:68: error: incomparable
    even_count = 0					      	int even_count = 0 ;					      int evenCount = 0 ;					   types: boolean and int	  if(f_filled(param0
    if ( n < 0 ) :					      	if ( n < 0 ) n = - n ;					      if ( ( n < 0 ) ) {					  .get(i)) == f_gold(param0.get(i)))
	n = - n						      	if ( n == 0 ) return 1 ;				    	n = - n ;						  		      ^ 1 error
    if ( n == 0 ) :					      	if ( n == 1 ) return 0 ;				      }								  
	return 1					      	while ( n != 0 ) {					      if ( ( n == 0 ) ) {					  
    if ( n == 1 ) :					      	  if ( ( n & 1 ) != 0 ) odd_count ++ ;			    	return true ;						  
	return 0					      	  if ( ( n & 2 ) != 0 ) even_count ++ ;			      }								  
    while ( n ) :					      	  n = n >> 2 ;						      if ( ( n == 1 ) ) {					  
	if ( n & 1 ) :					      	}							    	return false ;						  
	    odd_count += 1				      	return isMultipleOf3 ( Math . abs ( odd_count - even_count    }								  
	if ( n & 2 ) :					      }								      while ( ( n ) != 0 ) {					  
	    even_count += 1				      								    	if ( ( n & 1 ) != 0 ) {					  
	n = n >> 2					      								    	  oddCount ++ ;						  
    return isMultipleOf3 ( abs ( odd_count - even_count ) )   								    	}							  
							      								    	if ( ( n & 2 ) != 0 ) {					  
							      								    	  evenCount ++ ;					  
							      								    	}							  
							      								    	n = n >> 2 ;						  
							      								      }								  
							      								      return isMultipleOf3 ( Math . abs ( oddCount - evenCount )  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL			  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL
--							      --							    --								  --
def substringConversions ( s , k , b ) :		      static void substringConversions ( String str , int k , int b public static void substringConversions ( String s , int k ,  script_not_found : None
    l = len ( s )					      	for ( int i = 0 ;					      int l = s . length ( ) ;					  
    for i in range ( l ) :				      	i + k <= str . length ( ) ;				      for ( int i = 0 ;						  
	if ( ( i + k ) < l + 1 ) :			      	i ++ ) {						      i < l ;							  
	    sub = s [ i : i + k ]			      	  String sub = str . substring ( i , i + k ) ;		      i ++ ) {							  
	    sum , counter = 0 , 0			      	  int sum = 0 , counter = 0 ;				    	if ( ( ( i + k ) < l + 1 ) ) {				  
	    for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :  	  for ( int j = sub . length ( ) - 1 ;			    	  String sub = s . substring ( i , i + k ) ;		  
		sum = sum + ( ( ord ( sub [ i ] ) - ord ( '0' 	  j >= 0 ;						    	  int sum = 0 , counter = 0 ;				  
		counter += 1				      	  j -- ) {						    	  for ( int j = sub . length ( ) - 1 ;			  
	    print ( sum , end = " " )			      	    sum = ( int ) ( sum + ( ( sub . charAt ( j ) - '0' ) *  	  j >= 0 ;						  
							      	    counter ++ ;					    	  j -- ) {						  
							      	  }							    	    sum = sum + ( ( ( int ) sub . charAt ( j ) - '0' ) *  
							      	  System . out . print ( sum + " " ) ;			    	    counter ++ ;					  
							      	}							    	  }							  
							      }								    	  System . out . print ( sum + " " ) ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY
--							      --							    --								  --
def longestAlternating ( arr , n ) :			      public static void longestAlternating ( int arr [ ] , int n ) public static void longestAlternating ( int [ ] arr , int n ) script_not_found : None
    count = [ None ] * n				      	int [ ] count = new int [ n ] ;				      int [ ] count = new int [ n ] ;				  
    count [ n - 1 ] = 1					      	count [ n - 1 ] = 1 ;					      count [ n - 1 ] = 1 ;					  
    i = n - 2						      	for ( int i = n - 2 ;					      int i = n - 2 ;						  
    while i >= 0 :					      	i >= 0 ;						      while ( i >= 0 ) {					  
	if ( arr [ i ] * arr [ i + 1 ] < 0 ) :		      	i -- ) {						    	if ( ( arr [ i ] * arr [ i + 1 ] ) < 0 ) {		  
	    count [ i ] = count [ i + 1 ] + 1		      	  if ( arr [ i ] * arr [ i + 1 ] < 0 ) count [ i ] = count  	  count [ i ] = count [ i + 1 ] + 1 ;			  
	else :						      	  else count [ i ] = 1 ;				    	}							  
	    count [ i ] = 1				      	}							    	else {							  
	i = i - 1					      	for ( int i = 0 ;					    	  count [ i ] = 1 ;					  
    i = 0						      	i < n ;							    	}							  
    while i < n :					      	i ++ ) System . out . print ( count [ i ] + " " ) ;	    	i = i - 1 ;						  
	print ( count [ i ] , end = " " )		      }								      }								  
	i = i + 1					      								      i = 0 ;							  
							      								      while ( i < n ) {						  
							      								    	System . out . print ( count [ i ] + " " ) ;		  
							      								    	i = i + 1 ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_AN_ARRAY_OF_0S_1S_AND_2S				      SORT_AN_ARRAY_OF_0S_1S_AND_2S				    SORT_AN_ARRAY_OF_0S_1S_AND_2S				  SORT_AN_ARRAY_OF_0S_1S_AND_2S
--							      --							    --								  --
def sort012 ( a , arr_size ) :				      static void sort012 ( int a [ ] , int arr_size ) {	    public static void sort012 ( int [ ] a , int arrSize ) {	  script_not_found : None
    lo = 0						      	int lo = 0 ;						      int lo = 0 ;						  
    hi = arr_size - 1					      	int hi = arr_size - 1 ;					      int hi = arrSize - 1 ;					  
    mid = 0						      	int mid = 0 , temp = 0 ;				      int mid = 0 ;						  
    while mid <= hi :					      	while ( mid <= hi ) {					      while ( mid <= hi ) {					  
	if a [ mid ] == 0 :				      	  switch ( a [ mid ] ) {				    	if ( a [ mid ] == 0 ) {					  
	    a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]	      	    case 0 : {						    	  a [ lo ] = a [ mid ] ;				  
	    lo = lo + 1					      	      temp = a [ lo ] ;					    	  a [ mid ] = a [ lo ] ;				  
	    mid = mid + 1				      	      a [ lo ] = a [ mid ] ;				    	  lo = lo + 1 ;						  
	elif a [ mid ] == 1 :				      	      a [ mid ] = temp ;				    	  mid = mid + 1 ;					  
	    mid = mid + 1				      	      lo ++ ;						    	}							  
	else :						      	      mid ++ ;						    	else if ( a [ mid ] == 1 ) {				  
	    a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]	      	      break ;						    	  mid = mid + 1 ;					  
	    hi = hi - 1					      	    }							    	}							  
							      	    case 1 : mid ++ ;					    	else {							  
							      	    break ;						    	  a [ mid ] = a [ hi ] ;				  
							      	    case 2 : {						    	  a [ hi ] = a [ mid ] ;				  
							      	      temp = a [ mid ] ;				    	  hi = hi - 1 ;						  
							      	      a [ mid ] = a [ hi ] ;				    	}							  
							      	      a [ hi ] = temp ;					      }								  
							      	      hi -- ;						    }								  
							      	      break ;						    								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD
--							      --							    --								  --
def assign ( a , n ) :					      static void assign ( int a [ ] , int n ) {		    public static void assign ( int [ ] a , int n ) {		  script_not_found : None
    a.sort ( )						      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
    ans = [ 0 ] * n					      	int ans [ ] = new int [ n ] ;				      int [ ] ans = new int [ n ] ;				  
    p = 0						      	int p = 0 , q = n - 1 ;					      int p = 0 ;						  
    q = n - 1						      	for ( int i = 0 ;					      int q = n - 1 ;						  
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  
	if ( i + 1 ) % 2 == 0 :				      	i ++ ) {						      i < n ;							  
	    ans [ i ] = a [ q ]				      	  if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ;	      i ++ ) {							  
	    q = q - 1					      	  else ans [ i ] = a [ p ++ ] ;				    	if ( ( i + 1 ) % 2 == 0 ) {				  
	else :						      	}							    	  ans [ i ] = a [ q ] ;					  
	    ans [ i ] = a [ p ]				      	for ( int i = 0 ;					    	  q = q - 1 ;						  
	    p = p + 1					      	i < n ;							    	}							  
    for i in range ( n ) :				      	i ++ ) System . out . print ( ans [ i ] + " " ) ;	    	else {							  
	print ( ans [ i ] , end = " " )			      }								    	  ans [ i ] = a [ p ] ;					  
							      								    	  p = p + 1 ;						  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( ans [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		      FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		    FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS			  FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS
--							      --							    --								  --
def printFirstRepeating ( arr , n ) :			      static void printFirstRepeating ( int arr [ ] ) {		    static void printFirstRepeating ( int [ ] arr , int n ) {	  script_not_found : None
    Min = - 1						      	int min = - 1 ;						      int Min = - 1 ;						  
    myset = dict ( )					      	HashSet < Integer > set = new HashSet < > ( ) ;		      Map < Integer , Integer > myset = new HashMap < > ( ) ;	  
    for i in range ( n - 1 , - 1 , - 1 ) :		      	for ( int i = arr . length - 1 ;			      for ( int i = n - 1 ;					  
	if arr [ i ] in myset.keys ( ) :		      	i >= 0 ;						      i >= 0 ;							  
	    Min = i					      	i -- ) {						      i -- ) {							  
	else :						      	  if ( set . contains ( arr [ i ] ) ) min = i ;		    	if ( myset . keySet ( ) . contains ( arr [ i ] ) ) {	  
	    myset [ arr [ i ] ] = 1			      	  else set . add ( arr [ i ] ) ;			    	  Min = i ;						  
    if ( Min != - 1 ) :					      	}							    	}							  
	print ( "The first repeating element is" , arr [ Min  	if ( min != - 1 ) System . out . println ( "The first repea 	else {							  
    else :						      	else System . out . println ( "There are no repeating eleme 	  myset . put ( arr [ i ] , 1 ) ;			  
	print ( "There are no repeating elements" )	      }								    	}							  
							      								      }								  
							      								      if ( ( Min != - 1 ) ) {					  
							      								    	System . out . println ( "The first repeating element is" 
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "There are no repeating elements 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH		      REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH		    REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH		  REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH
--							      --							    --								  --
def rearrange ( arr , n ) :				      static void rearrange ( int arr [ ] , int n ) {		    public static void rearrange ( int [ ] arr , int n ) {	  failure : #Results:7, 10
    i = - 1						      	int i = - 1 , temp = 0 ;				      int i = - 1 ;						  
    for j in range ( n ) :				      	for ( int j = 0 ;					      for ( int j = 0 ;						  
	if ( arr [ j ] < 0 ) :				      	j < n ;							      j < n ;							  
	    i += 1					      	j ++ ) {						      j ++ ) {							  
	    arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]     	  if ( arr [ j ] < 0 ) {				    	if ( ( arr [ j ] < 0 ) ) {				  
    pos , neg = i + 1 , 0				      	    i ++ ;						    	  i ++ ;						  
    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :     	    temp = arr [ i ] ;					    	  arr [ i ] = arr [ j ] ;				  
	arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ] 	    arr [ i ] = arr [ j ] ;				    	  arr [ j ] = arr [ i ] ;				  
	pos += 1					      	    arr [ j ] = temp ;					    	}							  
	neg += 2					      	  }							      }								  
							      	}							      int pos = i + 1 , neg = 0 ;				  
							      	int pos = i + 1 , neg = 0 ;				      while ( ( pos < n ) && ( neg < pos ) && ( arr [ neg ] < 0 ) 
							      	while ( pos < n && neg < pos && arr [ neg ] < 0 ) {	    	arr [ neg ] = arr [ pos ] ;				  
							      	  temp = arr [ neg ] ;					    	arr [ pos ] = arr [ neg ] ;				  
							      	  arr [ neg ] = arr [ pos ] ;				    	pos ++ ;						  
							      	  arr [ pos ] = temp ;					    	neg += 2 ;						  
							      	  pos ++ ;						      }								  
							      	  neg += 2 ;						    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	      SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	    SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	  SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER
--							      --							    --								  --
def sumOfSubstrings ( num ) :				      public static int sumOfSubstrings ( String num ) {	    public static String sumOfSubstrings ( String num ) {	  error : SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESEN
    n = len ( num )					      	int n = num . length ( ) ;				      int n = num . length ( ) ;				  TING_A_NUMBER.java:33: error: incompatible types:
    sumofdigit = [ ]					      	int sumofdigit [ ] = new int [ n ] ;			      int [ ] sumofdigit = new int [ n ] ;			  int cannot be converted to String   String res = s
    sumofdigit.append ( int ( num [ 0 ] ) )		      	sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ;		      sumofdigit [ 0 ] = Integer . parseInt ( num . substring ( 0 umofdigit [ 0 ] ;			      ^ SUM_
    res = sumofdigit [ 0 ]				      	int res = sumofdigit [ 0 ] ;				      String res = sumofdigit [ 0 ] ;				  OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBE
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  R.java:60: error: bad operand types for binary ope
	numi = int ( num [ i ] )			      	i < n ;							      i < n ;							  rator '=='	     if(f_filled(param0.get(i)) == f
	sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigi 	i ++ ) {						      i ++ ) {							  _gold(param0.get(i)))
	res += sumofdigit [ i ]				      	  int numi = num . charAt ( i ) - '0' ;			    	int numi = Integer . parseInt ( num . substring ( i , i + 	 ^   first type:  String   second type: int
    return res						      	  sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i 	sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i 2 errors
							      	  res += sumofdigit [ i ] ;				    	res += sumofdigit [ i ] ;				  
							      	}							      }								  
							      	return res ;						      return res ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE		      NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE		    NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE		  NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE
--							      --							    --								  --
def getNumStrictMonotone ( ln ) :			      static int getNumStrictMonotone ( int len ) {		    static int getNumStrictMonotone ( int ln ) {		  script_not_found : None
    DP = [ [ 0 ] * DP_s for _ in range ( ln ) ]		      	int [ ] [ ] DP = new int [ len ] [ DP_s ] ;		      int [ ] [ ] DP = new int [ ln ] [ DP_s ] ;		  
    for i in range ( DP_s ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	DP [ 0 ] [ i ] = i + 1				      	i < DP_s ;						      i < DP_s ;						  
    for i in range ( 1 , ln ) :				      	++ i ) DP [ 0 ] [ i ] = i + 1 ;				      i ++ ) DP [ 0 ] [ i ] = i + 1 ;				  
	for j in range ( 1 , DP_s ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	    DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i  	i < len ;						      i < ln ;							  
    return DP [ ln - 1 ] [ DP_s - 1 ]			      	++ i ) for ( int j = 1 ;				      i ++ ) {							  
							      	j < DP_s ;						    	for ( int j = 1 ;					  
							      	++ j ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] [ 	j < DP_s ;						  
							      	return DP [ len - 1 ] [ DP_s - 1 ] ;			    	j ++ ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] 
							      }								      }								  
							      								      return DP [ ln - 1 ] [ DP_s - 1 ] ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	      SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	    SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS		  SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS
--							      --							    --								  --
def findSmallestDifference ( A , B , m , n ) :		      static int findSmallestDifference ( int A [ ] , int B [ ] , i static int findSmallestDifference ( int [ ] A , int [ ] B , i success : None
    A.sort ( )						      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
    B.sort ( )						      	Arrays . sort ( B ) ;					      Arrays . sort ( B ) ;					  
    a = 0						      	int a = 0 , b = 0 ;					      int a = 0 ;						  
    b = 0						      	int result = Integer . MAX_VALUE ;			      int b = 0 ;						  
    result = sys.maxsize				      	while ( a < m && b < n ) {				      int result = Integer . MAX_VALUE ;			  
    while ( a < m and b < n ) :				      	  if ( Math . abs ( A [ a ] - B [ b ] ) < result ) result =   while ( ( a < m ) && ( b < n ) ) {			  
	if ( abs ( A [ a ] - B [ b ] ) < result ) :	      	  if ( A [ a ] < B [ b ] ) a ++ ;			    	if ( ( Math . abs ( A [ a ] - B [ b ] ) < result ) ) {	  
	    result = abs ( A [ a ] - B [ b ] )		      	  else b ++ ;						    	  result = Math . abs ( A [ a ] - B [ b ] ) ;		  
	if ( A [ a ] < B [ b ] ) :			      	}							    	}							  
	    a += 1					      	return result ;						    	if ( ( A [ a ] < B [ b ] ) ) {				  
	else :						      }								    	  a ++ ;						  
	    b += 1					      								    	}							  
    return result					      								    	else {							  
							      								    	  b ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT		      REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT		    REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT		  REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT
--							      --							    --								  --
def solve ( dp , a , low , high , turn ) :		      static int solve ( int dp [ ] [ ] , int a [ ] , int low , int public static int solve ( int [ ] [ ] dp , int [ ] a , int lo success : None
    if ( low == high ) :				      	if ( low == high ) {					      if ( ( low == high ) ) {					  
	return a [ low ] * turn				      	  return a [ low ] * turn ;				    	return a [ low ] * turn ;				  
    if ( dp [ low ] [ high ] != 0 ) :			      	}							      }								  
	return dp [ low ] [ high ]			      	if ( dp [ low ] [ high ] != 0 ) {			      if ( ( dp [ low ] [ high ] != 0 ) ) {			  
    dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp 	  return dp [ low ] [ high ] ;				    	return dp [ low ] [ high ] ;				  
    return dp [ low ] [ high ]				      	}							      }								  
							      	dp [ low ] [ high ] = Math . max ( a [ low ] * turn + solve   dp [ low ] [ high ] = Math . max ( a [ low ] * turn + solve 
							      	return dp [ low ] [ high ] ;				      return dp [ low ] [ high ] ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STOOGE_SORT						      STOOGE_SORT						    STOOGE_SORT							  STOOGE_SORT
--							      --							    --								  --
def stoogesort ( arr , l , h ) :			      static void stoogesort ( int arr [ ] , int l , int h ) {	    public static void stoogesort ( int [ ] arr , int l , int h ) success : None
    if l >= h :						      	if ( l >= h ) return ;					      if ( l >= h ) return ;					  
	return						      	if ( arr [ l ] > arr [ h ] ) {				      if ( arr [ l ] > arr [ h ] ) {				  
    if arr [ l ] > arr [ h ] :				      	  int t = arr [ l ] ;					    	int t = arr [ l ] ;					  
	t = arr [ l ]					      	  arr [ l ] = arr [ h ] ;				    	arr [ l ] = arr [ h ] ;					  
	arr [ l ] = arr [ h ]				      	  arr [ h ] = t ;					    	arr [ h ] = t ;						  
	arr [ h ] = t					      	}							      }								  
    if h - l + 1 > 2 :					      	if ( h - l + 1 > 2 ) {					      if ( h - l + 1 > 2 ) {					  
	t = ( int ) ( ( h - l + 1 ) / 3 )		      	  int t = ( h - l + 1 ) / 3 ;				    	int t = ( int ) ( ( h - l + 1 ) / 3 ) ;			  
	stoogesort ( arr , l , ( h - t ) )		      	  stoogesort ( arr , l , h - t ) ;			    	stoogesort ( arr , l , ( h - t ) ) ;			  
	stoogesort ( arr , l + t , ( h ) )		      	  stoogesort ( arr , l + t , h ) ;			    	stoogesort ( arr , l + t , ( h ) ) ;			  
	stoogesort ( arr , l , ( h - t ) )		      	  stoogesort ( arr , l , h - t ) ;			    	stoogesort ( arr , l , ( h - t ) ) ;			  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE_1			      LONGEST_INCREASING_SUBSEQUENCE_1				    LONGEST_INCREASING_SUBSEQUENCE_1				  LONGEST_INCREASING_SUBSEQUENCE_1
--							      --							    --								  --
def lis ( arr ) :					      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int [ ] arr ) {			  error : LONGEST_INCREASING_SUBSEQUENCE_1.java:81:
    n = len ( arr )					      	int lis [ ] = new int [ n ] ;				      int n = arr . length ;					  error: method f_filled in class LONGEST_INCREASING
    lis = [ 1 ] * n					      	int i , j , max = 0 ;					      int [ ] lis = new int [ n ] ;				  _SUBSEQUENCE_1 cannot be applied to given types;
    for i in range ( 1 , n ) :				      	for ( i = 0 ;						      for ( int i = 1 ;						  	 if(f_filled(param0.get(i),param1.get(i)) ==
	for j in range ( 0 , i ) :			      	i < n ;							      i < n ;							   f_gold(param0.get(i),param1.get(i)))		   ^
	    if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  	i ++ ) lis [ i ] = 1 ;					      i ++ ) {							     required: int[]   found: int[],Integer   reason
		lis [ i ] = lis [ j ] + 1		      	for ( i = 1 ;						    	for ( int j = 0 ;					  : actual and formal argument lists differ in lengt
    maximum = 0						      	i < n ;							    	j <= i ;						  h 1 error
    for i in range ( n ) :				      	i ++ ) for ( j = 0 ;					    	j ++ ) {						  
	maximum = max ( maximum , lis [ i ] )		      	j < i ;							    	  if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 
    return maximum					      	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]  	    lis [ i ] = lis [ j ] + 1 ;				  
							      	for ( i = 0 ;						    	  }							  
							      	i < n ;							    	}							  
							      	i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;		      }								  
							      	return max ;						      int maximum = 0 ;						  
							      }								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	maximum = Math . max ( maximum , lis [ i ] ) ;		  
							      								      }								  
							      								      return maximum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES      PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	    PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	  PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES
--							      --							    --								  --
def printString ( str , ch , count ) :			      static void printString ( String str , char ch , int count )  static void printString ( String str , char ch , int count )  script_not_found : None
    occ , i = 0 , 0					      	int occ = 0 , i ;					      int occ = 0 , i ;						  
    if ( count == 0 ) :					      	if ( count == 0 ) {					      if ( ( count == 0 ) ) {					  
	print ( str )					      	  System . out . println ( str ) ;			    	System . out . println ( str ) ;			  
    for i in range ( len ( str ) ) :			      	  return ;						      }								  
	if ( str [ i ] == ch ) :			      	}							      for ( i = 0 ;						  
	    occ += 1					      	for ( i = 0 ;						      i < str . length ( ) ;					  
	if ( occ == count ) :				      	i < str . length ( ) ;					      i ++ ) {							  
	    break					      	i ++ ) {						    	if ( ( str . charAt ( i ) == ch ) ) {			  
    if ( i < len ( str ) - 1 ) :			      	  if ( str . charAt ( i ) == ch ) occ ++ ;		    	  occ ++ ;						  
	print ( str [ i + 1 : len ( str ) - i + 2 ] )	      	  if ( occ == count ) break ;				    	}							  
    else :						      	}							    	if ( ( occ == count ) ) {				  
	print ( "Empty string" )			      	if ( i < str . length ( ) - 1 ) System . out . println ( st 	  break ;						  
							      	else System . out . println ( "Empty string" ) ;	    	}							  
							      }								      }								  
							      								      if ( ( i < str . length ( ) - 1 ) ) {			  
							      								    	System . out . println ( str . substring ( i + 1 , str .  
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "Empty string" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	      COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	    COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	  COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER
--							      --							    --								  --
def countNumber ( n ) :					      static int countNumber ( int n ) {			    static int countNumber ( int n ) {				  failure : #Results:1, 10
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( 1 , 10 ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	s = [ ]						      	i <= 9 ;						      i <= 10 ;							  
	if ( i <= n ) :					      	i ++ ) {						      i ++ ) {							  
	    s.append ( i )				      	  Stack < Integer > s = new Stack < > ( ) ;		    	Stack < Integer > s = new Stack ( ) ;			  
	    result += 1					      	  if ( i <= n ) {					    	if ( ( i <= n ) ) {					  
	while len ( s ) != 0 :				      	    s . push ( i ) ;					    	  s . push ( i ) ;					  
	    tp = s [ - 1 ]				      	    result ++ ;						    	  result ++ ;						  
	    s.pop ( )					      	  }							    	}							  
	    for j in range ( tp % 10 , 10 ) :		      	  while ( ! s . empty ( ) ) {				    	while ( s . size ( ) != 0 ) {				  
		x = tp * 10 + j				      	    int tp = s . peek ( ) ;				    	  int tp = s . peek ( ) ;				  
		if ( x <= n ) :				      	    s . pop ( ) ;					    	  s . pop ( ) ;						  
		    s.append ( x )			      	    for ( int j = tp % 10 ;				    	  for ( int j = tp % 10 ;				  
		    result += 1				      	    j <= 9 ;						    	  j <= 10 ;						  
    return result					      	    j ++ ) {						    	  j ++ ) {						  
							      	      int x = tp * 10 + j ;				    	    int x = tp * 10 + j ;				  
							      	      if ( x <= n ) {					    	    if ( ( x <= n ) ) {					  
							      		s . push ( x ) ;				    	      s . push ( x ) ;					  
							      		result ++ ;					    	      result ++ ;					  
							      	      }							    	    }							  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return result ;						      return result ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			      KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			    KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			  KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT
--							      --							    --								  --
def printkthnode ( adj , wt , n , k ) :			      static void printkthnode ( Vector < pair > adj [ ] , int wt [ public static void printkthnode ( int [ ] [ ] adj , int wt ,  script_not_found : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	adj [ i ].sort ( )				      	i < n ;							      i < n ;							  
    for i in range ( n ) :				      	i ++ ) Collections . sort ( adj [ i ] , new Comparator < pa   i ++ ) adj [ i ] [ 0 ] = adj [ i ] [ 0 ] ;		  
	if ( len ( adj [ i ] ) >= k ) :			      	  public int compare ( pair p1 , pair p2 ) {		      for ( int i = 0 ;						  
	    print ( adj [ i ] [ len ( adj [ i ] ) - k ] [ 1 ] 	    return p1 . first - p2 . first ;			      i < n ;							  
	else :						      	  }							      i ++ ) {							  
	    print ( "-1" , end = " " )			      	}							    	if ( ( adj [ i ] . length ) >= k ) System . out . print ( 
							      	) ;							    	else System . out . print ( "-1" + " " ) ;		  
							      	for ( int i = 0 ;					      }								  
							      	i < n ;							    }								  
							      	i ++ ) {						    								  
							      	  if ( adj [ i ] . size ( ) >= k ) System . out . print ( a 								  
							      	  else System . out . print ( "-1" ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			      FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			    FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			  FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY
--							      --							    --								  --
def firstElement ( arr , n , k ) :			      static int firstElement ( int arr [ ] , int n , int k ) {	    public static int firstElement ( int [ ] arr , int n , int k  failure : #Results:6, 10
    count_map = { }					      	HashMap < Integer , Integer > count_map = new HashMap < > (   HashMap < Integer , Integer > countMap = new HashMap ( ) ;  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] in count_map.keys ( ) ) :	      	i < n ;							      i <= n ;							  
	    count_map [ arr [ i ] ] += 1		      	i ++ ) {						      ) {							  
	else :						      	  int a = 0 ;						    	if ( ( countMap . keySet ( ) . contains ( arr [ i ] ) ) ) 
	    count_map [ arr [ i ] ] = 1			      	  if ( count_map . get ( arr [ i ] ) != null ) {	    	  countMap . put ( arr [ i ] , 1 ) ;			  
	i += 1						      	    a = count_map . get ( arr [ i ] ) ;			    	}							  
    for i in range ( 0 , n ) :				      	  }							    	else {							  
	if ( count_map [ arr [ i ] ] == k ) :		      	  count_map . put ( arr [ i ] , a + 1 ) ;		    	  countMap . put ( arr [ i ] , 1 ) ;			  
	    return arr [ i ]				      	}							    	}							  
	i += 1						      	for ( int i = 0 ;					    	i ++ ;							  
    return - 1						      	i < n ;							      }								  
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  if ( count_map . get ( arr [ i ] ) == k ) {		      i <= n ;							  
							      	    return arr [ i ] ;					      ) {							  
							      	  }							    	if ( ( countMap . get ( arr [ i ] ) ) == k ) {		  
							      	}							    	  return arr [ i ] ;					  
							      	return - 1 ;						    	}							  
							      }								    	i ++ ;							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1
--							      --							    --								  --
def maxLen ( arr ) :					      static int maxLen ( int arr [ ] ) {			    public static int maxLen ( int [ ] arr ) {			  script_not_found : None
    hash_map = { }					      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    HashMap < Integer , Integer > hashMap = new HashMap < > ( ) 
    max_len = 0						      	int sum = 0 ;						      int maxLen = 0 ;						  
    curr_sum = 0					      	int max_len = 0 ;					      int currSum = 0 ;						  
    for i in range ( len ( arr ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	curr_sum += arr [ i ]				      	i < arr . length ;					      i < arr . length ;					  
	if arr [ i ] is 0 and max_len is 0 :		      	i ++ ) {						      i ++ ) {							  
	    max_len = 1					      	  sum += arr [ i ] ;					    	currSum += arr [ i ] ;					  
	if curr_sum is 0 :				      	  if ( arr [ i ] == 0 && max_len == 0 ) max_len = 1 ;	    	if ( arr [ i ] == 0 && maxLen == 0 ) {			  
	    max_len = i + 1				      	  if ( sum == 0 ) max_len = i + 1 ;			    	  maxLen = 1 ;						  
	if curr_sum in hash_map :			      	  Integer prev_i = hM . get ( sum ) ;			    	}							  
	    max_len = max ( max_len , i - hash_map [ curr_sum 	  if ( prev_i != null ) max_len = Math . max ( max_len , i  	if ( currSum == 0 ) {					  
	else :						      	  else hM . put ( sum , i ) ;				    	  maxLen = i + 1 ;					  
	    hash_map [ curr_sum ] = i			      	}							    	}							  
    return max_len					      	return max_len ;					    	if ( hashMap . containsKey ( currSum ) ) {		  
							      }								    	  maxLen = Math . max ( maxLen , i - hashMap . get ( curr 
							      								    	}							  
							      								    	else {							  
							      								    	  hashMap . put ( currSum , i ) ;			  
							      								    	}							  
							      								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K     GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	    GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	  GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K
--							      --							    --								  --
def printSumSimple ( mat , k ) :			      static void printSumSimple ( int mat [ ] [ ] , int k ) {	    static void printSumSimple ( int [ ] [ ] mat , int k ) {	  script_not_found : None
    if ( k > n ) :					      	if ( k > n ) return ;					      if ( ( k > n ) ) {					  
	return						      	for ( int i = 0 ;					    	return ;						  
    for i in range ( n - k + 1 ) :			      	i < n - k + 1 ;						      }								  
	for j in range ( n - k + 1 ) :			      	i ++ ) {						      for ( int i = 0 ;						  
	    sum = 0					      	  for ( int j = 0 ;					      i < n - k + 1 ;						  
	    for p in range ( i , k + i ) :		      	  j < n - k + 1 ;					      i ++ ) {							  
		for q in range ( j , k + j ) :		      	  j ++ ) {						    	for ( int j = 0 ;					  
		    sum += mat [ p ] [ q ]		      	    int sum = 0 ;					    	j < n - k + 1 ;						  
	    print ( sum , end = " " )			      	    for ( int p = i ;					    	j ++ ) {						  
	print ( )					      	    p < k + i ;						    	  int sum = 0 ;						  
							      	    p ++ ) for ( int q = j ;				    	  for ( int p = i ;					  
							      	    q < k + j ;						    	  p < k + i ;						  
							      	    q ++ ) sum += mat [ p ] [ q ] ;			    	  p ++ ) {						  
							      	    System . out . print ( sum + " " ) ;		    	    for ( int q = j ;					  
							      	  }							    	    q < k + j ;						  
							      	  System . out . println ( ) ;				    	    q ++ ) {						  
							      	}							    	      sum += mat [ p ] [ q ] ;				  
							      }								    	    }							  
							      								    	  }							  
							      								    	  System . out . print ( sum + " " ) ;			  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_
--							      --							    --								  --
def findCount ( n , sum ) :				      private static void findCount ( int n , int sum ) {	    static int findCount ( int n , int sum ) {			  script_not_found : None
    start = math.pow ( 10 , n - 1 )			      	int start = ( int ) Math . pow ( 10 , n - 1 ) ;		      double start = Math . pow ( 10 , n - 1 ) ;		  
    end = math.pow ( 10 , n ) - 1			      	int end = ( int ) Math . pow ( 10 , n ) - 1 ;		      double end = Math . pow ( 10 , n ) - 1 ;			  
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    i = start						      	int i = start ;						      double i = start ;					  
    while ( i <= end ) :				      	while ( i < end ) {					      while ( ( i <= end ) ) {					  
	cur = 0						      	  int cur = 0 ;						    	int cur = 0 ;						  
	temp = i					      	  int temp = i ;					    	int temp = i ;						  
	while ( temp != 0 ) :				      	  while ( temp != 0 ) {					    	while ( ( temp != 0 ) ) {				  
	    cur += temp % 10				      	    cur += temp % 10 ;					    	  cur += temp % 10 ;					  
	    temp = temp // 10				      	    temp = temp / 10 ;					    	  temp = temp / 10 ;					  
	if ( cur == sum ) :				      	  }							    	}							  
	    count = count + 1				      	  if ( cur == sum ) {					    	if ( ( cur == sum ) ) {					  
	    i += 9					      	    count ++ ;						    	  count = count + 1 ;					  
	else :						      	    i += 9 ;						    	  i += 9 ;						  
	    i = i + 1					      	  }							    	}							  
    print ( count )					      	  else i ++ ;						    	else {							  
							      	}							    	  i = i + 1 ;						  
							      	System . out . println ( count ) ;			    	}							  
							      }								      }								  
							      								      System . out . println ( count ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY		      FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			    FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			  FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY
--							      --							    --								  --
def findSubarraySum ( arr , n ) :			      static int findSubarraySum ( int [ ] arr , int n ) {	    static int findSubarraySum ( int [ ] arr , int n ) {	  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    m = dict ( )					      	HashMap < Integer , Integer > m = new HashMap < Integer , I   Map < Integer , Integer > m = new HashMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	Sum = 0						      	i < n ;							      i < n ;							  
	for j in range ( i , n ) :			      	i ++ ) {						      i ++ ) {							  
	    Sum += arr [ j ]				      	  int sum = 0 ;						    	int Sum = 0 ;						  
	    m [ Sum ] = m.get ( Sum , 0 ) + 1		      	  for ( int j = i ;					    	for ( int j = i ;					  
    for x in m :					      	  j < n ;						    	j < n ;							  
	if m [ x ] == 1 :				      	  j ++ ) {						    	j ++ ) {						  
	    res += x					      	    sum += arr [ j ] ;					    	  Sum += arr [ j ] ;					  
    return res						      	    if ( m . containsKey ( sum ) ) {			    	  m . put ( Sum , m . getOrDefault ( Sum , 0 ) + 1 ) ;	  
							      	      m . put ( sum , m . get ( sum ) + 1 ) ;		    	}							  
							      	    }							      }								  
							      	    else {						      for ( Integer x : m . keySet ( ) ) {			  
							      	      m . put ( sum , 1 ) ;				    	if ( m . get ( x ) == 1 ) {				  
							      	    }							    	  res += x ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	for ( Map . Entry < Integer , Integer > x : m . entrySet (    return res ;						  
							      	return res ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN
--							      --							    --								  --
def printMaxOfMin ( arr , n ) :				      static void printMaxOfMin ( int n ) {			    static void printMaxOfMin ( int [ ] arr , int n ) {		  script_not_found : None
    for k in range ( 1 , n + 1 ) :			      	for ( int k = 1 ;					      for ( int k = 1 ;						  
	maxOfMin = INT_MIN				      	k <= n ;						      k <= n ;							  
	for i in range ( n - k + 1 ) :			      	k ++ ) {						      k ++ ) {							  
	    min = arr [ i ]				      	  int maxOfMin = Integer . MIN_VALUE ;			    	int maxOfMin = INT_MIN ;				  
	    for j in range ( k ) :			      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
		if ( arr [ i + j ] < min ) :		      	  i <= n - k ;						    	i < n - k + 1 ;						  
		    min = arr [ i + j ]			      	  i ++ ) {						    	i ++ ) {						  
	    if ( min > maxOfMin ) :			      	    int min = arr [ i ] ;				    	  int min = arr [ i ] ;					  
		maxOfMin = min				      	    for ( int j = 1 ;					    	  for ( int j = 0 ;					  
	print ( maxOfMin , end = " " )			      	    j < k ;						    	  j < k ;						  
							      	    j ++ ) {						    	  j ++ ) {						  
							      	      if ( arr [ i + j ] < min ) min = arr [ i + j ] ;	    	    if ( ( arr [ i + j ] < min ) ) {			  
							      	    }							    	      min = arr [ i + j ] ;				  
							      	    if ( min > maxOfMin ) maxOfMin = min ;		    	    }							  
							      	  }							    	  }							  
							      	  System . out . print ( maxOfMin + " " ) ;		    	  if ( ( min > maxOfMin ) ) {				  
							      	}							    	    maxOfMin = min ;					  
							      }								    	  }							  
							      								    	}							  
							      								    	System . out . print ( maxOfMin + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_DIVISIBLE_PAIRS_SUBSET				      LARGEST_DIVISIBLE_PAIRS_SUBSET				    LARGEST_DIVISIBLE_PAIRS_SUBSET				  LARGEST_DIVISIBLE_PAIRS_SUBSET
--							      --							    --								  --
def largestSubset ( a , n ) :				      static int largestSubset ( int [ ] a , int n ) {		    public static int largestSubset ( int [ ] a , int n ) {	  script_not_found : None
    a.sort ( )						      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
    dp = [ 0 for i in range ( n ) ]			      	int [ ] dp = new int [ n ] ;				      int [ ] dp = new int [ n ] ;				  
    dp [ n - 1 ] = 1					      	dp [ n - 1 ] = 1 ;					      for ( int i = 0 ;						  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	for ( int i = n - 2 ;					      i < dp . length ;						  
	mxm = 0						      	i >= 0 ;						      i ++ ) dp [ i ] = 0 ;					  
	for j in range ( i + 1 , n ) :			      	i -- ) {						      dp [ n - 1 ] = 1 ;					  
	    if a [ j ] % a [ i ] == 0 :			      	  int mxm = 0 ;						      for ( int i = n - 2 ;					  
		mxm = max ( mxm , dp [ j ] )		      	  for ( int j = i + 1 ;					      i >= 0 ;							  
	dp [ i ] = 1 + mxm				      	  j < n ;						      i -- ) {							  
    return max ( dp )					      	  j ++ ) {						    	int mxm = 0 ;						  
							      	    if ( a [ j ] % a [ i ] == 0 ) {			    	for ( int j = i + 1 ;					  
							      	      mxm = Math . max ( mxm , dp [ j ] ) ;		    	j < n ;							  
							      	    }							    	j ++ ) if ( a [ j ] % a [ i ] == 0 ) {			  
							      	  }							    	  mxm = Math . max ( mxm , dp [ j ] ) ;			  
							      	  dp [ i ] = 1 + mxm ;					    	}							  
							      	}							      }								  
							      	return Arrays . stream ( dp ) . max ( ) . getAsInt ( ) ;      dp [ i ] = 1 + mxm ;					  
							      }								      return Math . max ( dp [ 0 ] , dp [ 1 ] ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE					      RECAMANS_SEQUENCE						    RECAMANS_SEQUENCE						  RECAMANS_SEQUENCE
--							      --							    --								  --
def recaman ( n ) :					      static void recaman ( int n ) {				    public static void recaman ( int n ) {			  script_not_found : None
    arr = [ 0 ] * n					      	int arr [ ] = new int [ n ] ;				      int arr [ ] = new int [ n ] ;				  
    arr [ 0 ] = 0					      	arr [ 0 ] = 0 ;						      arr [ 0 ] = 0 ;						  
    print ( arr [ 0 ] , end = ", " )			      	System . out . print ( arr [ 0 ] + " ," ) ;		      System . out . print ( arr [ 0 ] + ", " ) ;		  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	curr = arr [ i - 1 ] - i			      	i < n ;							      i < n ;							  
	for j in range ( 0 , i ) :			      	i ++ ) {						      i ++ ) {							  
	    if ( ( arr [ j ] == curr ) or curr < 0 ) :	      	  int curr = arr [ i - 1 ] - i ;			    	int curr = arr [ i - 1 ] - i ;				  
		curr = arr [ i - 1 ] + i		      	  int j ;						    	for ( int j = 0 ;					  
		break					      	  for ( j = 0 ;						    	j <= i ;						  
	arr [ i ] = curr				      	  j < i ;						    	j ++ ) {						  
	print ( arr [ i ] , end = ", " )		      	  j ++ ) {						    	  if ( ( ( arr [ j ] == curr ) || curr < 0 ) ) {	  
							      	    if ( ( arr [ j ] == curr ) || curr < 0 ) {		    	    curr = arr [ i - 1 ] + i ;				  
							      	      curr = arr [ i - 1 ] + i ;			    	    break ;						  
							      	      break ;						    	  }							  
							      	    }							    	}							  
							      	  }							    	arr [ i ] = curr ;					  
							      	  arr [ i ] = curr ;					    	System . out . print ( arr [ i ] + ", " ) ;		  
							      	  System . out . print ( arr [ i ] + ", " ) ;		      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_PATH_TRIANGLE				      MINIMUM_SUM_PATH_TRIANGLE					    MINIMUM_SUM_PATH_TRIANGLE					  MINIMUM_SUM_PATH_TRIANGLE
--							      --							    --								  --
def minSumPath ( A ) :					      static int minSumPath ( ) {				    public static int minSumPath ( int [ ] [ ] A ) {		  script_not_found : None
    memo = [ None ] * len ( A )				      	int [ ] memo = new int [ A . length ] ;			      int [ ] memo = new int [ A . length ] ;			  
    n = len ( A ) - 1					      	int n = A . length - 1 ;				      int n = A . length - 1 ;					  
    for i in range ( len ( A [ n ] ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	memo [ i ] = A [ n ] [ i ]			      	i < A [ n ] . length ;					      i < A [ n ] . length ;					  
    for i in range ( len ( A ) - 2 , - 1 , - 1 ) :	      	i ++ ) memo [ i ] = A [ n ] [ i ] ;			      i ++ ) memo [ i ] = A [ n ] [ i ] ;			  
	for j in range ( len ( A [ i ] ) ) :		      	for ( int i = A . length - 2 ;				      for ( int i = A . length - 2 ;				  
	    memo [ j ] = A [ i ] [ j ] + min ( memo [ j ] , m 	i >= 0 ;						      i >= 0 ;							  
    return memo [ 0 ]					      	i -- ) for ( int j = 0 ;				      i -- ) {							  
							      	j < A [ i ] . length ;					    	for ( int j = 0 ;					  
							      	j ++ ) memo [ j ] = A [ i ] [ j ] + ( int ) Math . min ( me 	j < A [ i ] . length ;					  
							      	return memo [ 0 ] ;					    	j ++ ) memo [ j ] = A [ i ] [ j ] + Math . min ( memo [ j 
							      }								      }								  
							      								      return memo [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER		      C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			    C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			  C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER
--							      --							    --								  --
def getSecondMostFreq ( str ) :				      static char getSecondMostFreq ( String str ) {		    public static char getSecondMostFreq ( String str ) {	  script_not_found : None
    NO_OF_CHARS = 256					      	int [ ] count = new int [ NO_OF_CHARS ] ;		      final int NO_OF_CHARS = 256 ;				  
    count = [ 0 ] * NO_OF_CHARS				      	int i ;							      int [ ] count = new int [ NO_OF_CHARS ] ;			  
    for i in range ( len ( str ) ) :			      	for ( i = 0 ;						      for ( int i = 0 ;						  
	count [ ord ( str [ i ] ) ] += 1		      	i < str . length ( ) ;					      i < str . length ( ) ;					  
    first , second = 0 , 0				      	i ++ ) ( count [ str . charAt ( i ) ] ) ++ ;		      i ++ ) {							  
    for i in range ( NO_OF_CHARS ) :			      	int first = 0 , second = 0 ;				    	count [ ( int ) str . charAt ( i ) ] ++ ;		  
	if count [ i ] > count [ first ] :		      	for ( i = 0 ;						      }								  
	    second = first				      	i < NO_OF_CHARS ;					      int first = 0 , second = 0 ;				  
	    first = i					      	i ++ ) {						      for ( int i = 0 ;						  
	elif ( count [ i ] > count [ second ] and count [ i ] 	  if ( count [ i ] > count [ first ] ) {		      i < NO_OF_CHARS ;						  
	    second = i					      	    second = first ;					      i ++ ) {							  
    return chr ( second )				      	    first = i ;						    	if ( count [ i ] > count [ first ] ) {			  
							      	  }							    	  second = first ;					  
							      	  else if ( count [ i ] > count [ second ] && count [ i ] ! 	  first = i ;						  
							      	}							    	}							  
							      	return ( char ) second ;				    	else if ( ( count [ i ] > count [ second ] ) && count [ i 
							      }								    	  second = i ;						  
							      								    	}							  
							      								      }								  
							      								      return ( char ) second ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY_1				      FREQUENT_ELEMENT_ARRAY_1					    FREQUENT_ELEMENT_ARRAY_1					  FREQUENT_ELEMENT_ARRAY_1
--							      --							    --								  --
def mostFrequent ( arr , n ) :				      static int mostFrequent ( int arr [ ] , int n ) {		    public static int mostFrequent ( int [ ] arr , int n ) {	  script_not_found : None
    Hash = dict ( )					      	Map < Integer , Integer > hp = new HashMap < Integer , Inte   Map < Integer , Integer > Hash = Maps . newHashMap ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] in Hash.keys ( ) :			      	i < n ;							      i < n ;							  
	    Hash [ arr [ i ] ] += 1			      	i ++ ) {						      i ++ ) {							  
	else :						      	  int key = arr [ i ] ;					    	if ( Hash . keySet ( ) . contains ( arr [ i ] ) ) {	  
	    Hash [ arr [ i ] ] = 1			      	  if ( hp . containsKey ( key ) ) {			    	  Hash . put ( arr [ i ] , 1 ) ;			  
    max_count = 0					      	    int freq = hp . get ( key ) ;			    	}							  
    res = - 1						      	    freq ++ ;						    	else {							  
    for i in Hash :					      	    hp . put ( key , freq ) ;				    	  Hash . put ( arr [ i ] , 1 ) ;			  
	if ( max_count < Hash [ i ] ) :			      	  }							    	}							  
	    res = i					      	  else {						      }								  
	    max_count = Hash [ i ]			      	    hp . put ( key , 1 ) ;				      int maxCount = 0 ;					  
    return res						      	  }							      int res = - 1 ;						  
							      	}							      for ( Integer i : Hash . keySet ( ) ) {			  
							      	int max_count = 0 , res = - 1 ;				    	if ( ( maxCount < Hash . get ( i ) ) ) {		  
							      	for ( Entry < Integer , Integer > val : hp . entrySet ( ) ) 	  res = i ;						  
							      	  if ( max_count < val . getValue ( ) ) {		    	  maxCount = Hash . get ( i ) ;				  
							      	    res = val . getKey ( ) ;				    	}							  
							      	    max_count = val . getValue ( ) ;			      }								  
							      	  }							      return res ;						  
							      	}							    }								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			      MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			    MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			  MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM
--							      --							    --								  --
def maximumSumSubarray ( arr , n ) :			      static int maximumSumSubarray ( int arr [ ] , int n ) {	    public static double maximumSumSubarray ( double [ ] arr , in error : MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM.java
    min_prefix_sum = 0					      	int min_prefix_sum = 0 ;				      double minPrefixSum = 0 ;					  :77: error: incompatible types: int[] cannot be co
    res = - math.inf					      	int res = Integer . MIN_VALUE ;				      double res = - Double . MAX_VALUE ;			  nverted to double[]	      if(f_filled(param0.get
    prefix_sum = [ ]					      	int prefix_sum [ ] = new int [ n ] ;			      double [ ] prefixSum = new double [ n ] ;			  (i),param1.get(i)) == f_gold(param0.get(i),param1.
    prefix_sum.append ( arr [ 0 ] )			      	prefix_sum [ 0 ] = arr [ 0 ] ;				      prefixSum [ 0 ] = arr [ 0 ] ;				  get(i)))				 ^ Note: Som
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  e messages have been simplified; recompile with -X
	prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ]  	i < n ;							      i < n ;							  diags:verbose to get full output 1 error
    for i in range ( n ) :				      	i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ]    i ++ ) {							  
	res = max ( res , prefix_sum [ i ] - min_prefix_sum ) 	for ( int i = 0 ;					    	prefixSum [ i ] = prefixSum [ i - 1 ] + arr [ i ] ;	  
	min_prefix_sum = min ( min_prefix_sum , prefix_sum [  	i < n ;							      }								  
    return res						      	i ++ ) {						      for ( int i = 0 ;						  
							      	  res = Math . max ( res , prefix_sum [ i ] - min_prefix_su   i < n ;							  
							      	  min_prefix_sum = Math . min ( min_prefix_sum , prefix_sum   i ++ ) {							  
							      	}							    	res = Math . max ( res , prefixSum [ i ] - minPrefixSum ) 
							      	return res ;						    	minPrefixSum = Math . min ( minPrefixSum , prefixSum [ i  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1
--							      --							    --								  --
def findPair ( arr , n ) :				      public static void findPair ( int [ ] arr , int n ) {	    static void findPair ( int [ ] arr , int n ) {		  script_not_found : None
    s = { i : 1 for i in arr }				      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashMap < Integer , Integer > s = new HashMap < > ( ) ;	  
    found = False					      	for ( Integer i : arr ) {				      for ( int i = 0 ;						  
    for i in range ( n ) :				      	  s . add ( i ) ;					      i < arr . length ;					  
	for j in range ( i + 1 , n ) :			      	}							      i ++ ) {							  
	    if arr [ i ] + arr [ j ] in s.keys ( ) :	      	boolean found = false ;					    	s . put ( arr [ i ] , 1 ) ;				  
		print ( arr [ i ] , arr [ j ] )		      	for ( int i = 0 ;					      }								  
		found = True				      	i < n - 1 ;						      boolean found = false ;					  
    if found == False :					      	i ++ ) {						      for ( int i = 0 ;						  
	print ( "Not exist" )				      	  for ( int j = i + 1 ;					      i < n ;							  
							      	  j < n ;						      i ++ ) {							  
							      	  j ++ ) {						    	for ( int j = i + 1 ;					  
							      	    int sum = arr [ i ] + arr [ j ] ;			    	j < n ;							  
							      	    if ( s . contains ( sum ) ) {			    	j ++ ) {						  
							      	      found = true ;					    	  if ( s . keySet ( ) . contains ( arr [ i ] + arr [ j ]  
							      	      System . out . println ( arr [ i ] + " " + arr [ j ]  	    System . out . println ( arr [ i ] + arr [ j ] ) ;	  
							      	    }							    	    found = true ;					  
							      	  }							    	  }							  
							      	}							    	}							  
							      	if ( found == false ) System . out . println ( "Not Exist "   }								  
							      }								      if ( found == false ) {					  
							      								    	System . out . println ( "Not exist" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS	      MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS		    MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS		  MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS
--							      --							    --								  --
def maxSum ( arr , N , k ) :				      static int maxSum ( int arr [ ] , int N , int k ) {	    public static int maxSum ( int [ ] arr , int N , int k ) {	  success : None
    MS = [ 0 for i in range ( N ) ]			      	int MS [ ] = new int [ N ] ;				      int [ ] MS = new int [ N ] ;				  
    MS [ N - 1 ] = arr [ N - 1 ]			      	MS [ N - 1 ] = arr [ N - 1 ] ;				      for ( int i = 0 ;						  
    for i in range ( N - 2 , - 1 , - 1 ) :		      	for ( int i = N - 2 ;					      i < N ;							  
	if ( i + k + 1 >= N ) :				      	i >= 0 ;						      i ++ ) {							  
	    MS [ i ] = max ( arr [ i ] , MS [ i + 1 ] )	      	i -- ) {						    	MS [ i ] = 0 ;						  
	else :						      	  if ( i + k + 1 >= N ) MS [ i ] = Math . max ( arr [ i ] ,   }								  
	    MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , M 	  else MS [ i ] = Math . max ( arr [ i ] + MS [ i + k + 1 ]   MS [ N - 1 ] = arr [ N - 1 ] ;				  
    return MS [ 0 ]					      	}							      for ( int i = N - 2 ;					  
							      	return MS [ 0 ] ;					      i >= 0 ;							  
							      }								      i -- ) {							  
							      								    	if ( ( i + k + 1 ) >= N ) {				  
							      								    	  MS [ i ] = Math . max ( arr [ i ] , MS [ i + 1 ] ) ;	  
							      								    	}							  
							      								    	else {							  
							      								    	  MS [ i ] = Math . max ( arr [ i ] + MS [ i + k + 1 ] ,  
							      								    	}							  
							      								      }								  
							      								      return MS [ 0 ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	      FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	    FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	  FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE
--							      --							    --								  --
def printDuplicates ( arr ) :				      private static void printDuplicates ( int [ ] arr , int n ) { static void printDuplicates ( int [ ] arr ) {		  script_not_found : None
    dict = { }						      	Map < Integer , Integer > map = new HashMap < > ( ) ;	      HashMap < Integer , Integer > map = new HashMap < > ( ) ;	  
    for ele in arr :					      	int count = 0 ;						      for ( int ele : arr ) {					  
	try :						      	boolean dup = false ;					    	try {							  
	    dict [ ele ] += 1				      	for ( int i = 0 ;					    	  map . put ( ele , 1 ) ;				  
	except :					      	i < n ;							    	}							  
	    dict [ ele ] = 1				      	i ++ ) {						    	catch ( Exception e ) {					  
    for item in dict :					      	  if ( map . containsKey ( arr [ i ] ) ) {		    	  map . put ( ele , 1 ) ;				  
	if ( dict [ item ] > 1 ) :			      	    count = map . get ( arr [ i ] ) ;			    	}							  
	    print ( item , end = " " )			      	    map . put ( arr [ i ] , count + 1 ) ;		      }								  
    print ( "\n" )					      	  }							      for ( Integer item : map . keySet ( ) ) {			  
							      	  else {						    	if ( ( map . get ( item ) ) > 1 ) {			  
							      	    map . put ( arr [ i ] , 1 ) ;			    	  System . out . print ( item + " " ) ;			  
							      	  }							    	}							  
							      	}							      }								  
							      	for ( Entry < Integer , Integer > entry : map . entrySet (    System . out . println ( "\n" ) ;				  
							      	  if ( entry . getValue ( ) > 1 ) {			    }								  
							      	    System . out . print ( entry . getKey ( ) + " " ) ;	    								  
							      	    dup = true ;					    								  
							      	  }							    								  
							      	}							    								  
							      	if ( ! dup ) {						    								  
							      	  System . out . println ( "-1" ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		      LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		    LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		  LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING
--							      --							    --								  --
def lexicographicSubConcat ( s ) :			      static String lexicographicSubConcat ( String s ) {	    public static String lexicographicSubConcat ( String s ) {	  error : LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_S
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  TRING.java:45: error: incompatible types: String c
    sub_count = ( n * ( n + 1 ) ) // 2			      	int sub_count = n * ( n + 1 ) / 2 ;			      int subCount = ( n * ( n + 1 ) ) / 2 ;			  annot be converted to int	  arr [ index ] = s
    arr = [ 0 ] * sub_count				      	String [ ] arr = new String [ sub_count ] ;		      int [ ] arr = new int [ subCount ] ;			  . substring ( i , i + j ) ;
    index = 0						      	int index = 0 ;						      int index = 0 ;						  		^ 1 error
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 1 , n - i + 1 ) :		      	i < n ;							      i < n ;							  
	    arr [ index ] = s [ i : i + j ]		      	i ++ ) for ( int len = 1 ;				      i ++ ) {							  
	    index += 1					      	len <= n - i ;						    	for ( int j = 1 ;					  
    arr.sort ( )					      	len ++ ) {						    	j <= n - i ;						  
    res = ""						      	  arr [ index ++ ] = s . substring ( i , i + len ) ;	    	j ++ ) {						  
    for i in range ( sub_count ) :			      	}							    	  arr [ index ] = s . substring ( i , i + j ) ;		  
	res += arr [ i ]				      	Arrays . sort ( arr ) ;					    	  index ++ ;						  
    return res						      	String res = "" ;					    	}							  
							      	for ( int i = 0 ;					      }								  
							      	i < sub_count ;						      Arrays . sort ( arr ) ;					  
							      	i ++ ) res += arr [ i ] ;				      String res = "" ;						  
							      	return res ;						      for ( int i = 0 ;						  
							      }								      i < subCount ;						  
							      								      i ++ ) res += arr [ i ] ;					  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			      PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			    PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP				  PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP
--							      --							    --								  --
def printAllAPTriplets ( arr , n ) :			      static void printAllAPTriplets ( int [ ] arr , int n ) {	    static void printAllAPTriplets ( int [ ] arr , int n ) {	  script_not_found : None
    s = [ ]						      	ArrayList < Integer > s = new ArrayList < Integer > ( ) ;     StringBuilder sb = new StringBuilder ( ) ;		  
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n - 1 ;						      i <= n - 1 ;						  
	    diff = arr [ j ] - arr [ i ]		      	i ++ ) {						      i ++ ) {							  
	    if ( ( arr [ i ] - diff ) in arr ) :	      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
		print ( "{} {} {}".format ( ( arr [ i ] - dif 	  j < n ;						    	j < n ;							  
    s.append ( arr [ i ] )				      	  j ++ ) {						    	j ++ ) {						  
							      	    int diff = arr [ j ] - arr [ i ] ;			    	  int diff = arr [ j ] - arr [ i ] ;			  
							      	    boolean exists = s . contains ( arr [ i ] - diff ) ;    	  if ( ( ( arr [ i ] - diff ) != 0 ) ) {		  
							      	    if ( exists ) System . out . println ( arr [ i ] - diff 	    sb . append ( ( arr [ i ] - diff ) + " " + arr [ i ]  
							      	  }							    	  }							  
							      	  s . add ( arr [ i ] ) ;				    	}							  
							      	}							      }								  
							      }								      sb . append ( arr [ i ] ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR
--							      --							    --								  --
def alternateSubarray ( arr , n ) :			      static void alternateSubarray ( boolean arr [ ] , int n ) {   public static void alternateSubarray ( boolean [ ] arr , int  script_not_found : None
    len = [ ]						      	int len [ ] = new int [ n ] ;				      int [ ] len = new int [ n + 1 ] ;				  
    for i in range ( n + 1 ) :				      	len [ n - 1 ] = 1 ;					      for ( int i = 0 ;						  
	len.append ( 0 )				      	for ( int i = n - 2 ;					      i < n ;							  
    len [ n - 1 ] = 1					      	i >= 0 ;						      i ++ ) {							  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	-- i ) {						    	len [ i ] = 0 ;						  
	if ( arr [ i ] ^ arr [ i + 1 ] == True ) :	      	  if ( arr [ i ] ^ arr [ i + 1 ] == true ) len [ i ] = len    }								  
	    len [ i ] = len [ i + 1 ] + 1		      	  else len [ i ] = 1 ;					      len [ n - 1 ] = 1 ;					  
	else :						      	}							      for ( int i = n - 2 ;					  
	    len [ i ] = 1				      	for ( int i = 0 ;					      i >= 0 ;							  
    for i in range ( n ) :				      	i < n ;							      i -- ) {							  
	print ( len [ i ] , "" , end = "" )		      	++ i ) System . out . print ( len [ i ] + " " ) ;	    	if ( ( arr [ i ] ^ arr [ i + 1 ] ) == true ) {		  
							      }								    	  len [ i ] = len [ i + 1 ] + 1 ;			  
							      								    	}							  
							      								    	else {							  
							      								    	  len [ i ] = 1 ;					  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( len [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHIFT_MATRIX_ELEMENTS_K					      SHIFT_MATRIX_ELEMENTS_K					    SHIFT_MATRIX_ELEMENTS_K					  SHIFT_MATRIX_ELEMENTS_K
--							      --							    --								  --
def shiftMatrixByK ( mat , k ) :			      static void shiftMatrixByK ( int [ ] [ ] mat , int k ) {	    public static void shiftMatrixByK ( int [ ] [ ] mat , int k ) script_not_found : None
    if ( k > N ) :					      	if ( k > N ) {						      if ( ( k > N ) ) {					  
	print ( "shifting is"" not possible" )		      	  System . out . print ( "Shifting is" + " not possible" )  	System . out . println ( "shifting is" + " not possible"  
	return						      	  return ;						    	return ;						  
    j = 0						      	}							      }								  
    while ( j < N ) :					      	int j = 0 ;						      int j = 0 ;						  
	for i in range ( k , N ) :			      	while ( j < N ) {					      while ( ( j < N ) ) {					  
	    print ( "{} ".format ( mat [ j ] [ i ] ) , end =  	  for ( int i = k ;					    	for ( int i = k ;					  
	for i in range ( 0 , k ) :			      	  i < N ;						    	i < N ;							  
	    print ( "{} ".format ( mat [ j ] [ i ] ) , end =  	  i ++ ) System . out . print ( mat [ j ] [ i ] + " " ) ;   	i ++ ) {						  
	print ( "" )					      	  for ( int i = 0 ;					    	  System . out . print ( mat [ j ] [ i ] + " " ) ;	  
	j = j + 1					      	  i < k ;						    	}							  
							      	  i ++ ) System . out . print ( mat [ j ] [ i ] + " " ) ;   	for ( int i = 0 ;					  
							      	  System . out . println ( ) ;				    	i <= k ;						  
							      	  j ++ ;						    	i ++ ) {						  
							      	}							    	  System . out . print ( mat [ j ] [ i ] + " " ) ;	  
							      }								    	}							  
							      								    	System . out . println ( "" ) ;				  
							      								    	j = j + 1 ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			      PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			    PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			  PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION
--							      --							    --								  --
def decToHexa ( n ) :					      static void decToHexa ( int n ) {				    public static void decToHexa ( int n ) {			  script_not_found : None
    hexaDeciNum = [ '0' ] * 100				      	char [ ] hexaDeciNum = new char [ 100 ] ;		      char [ ] hexaDeciNum = new char [ 100 ] ;			  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( n != 0 ) :					      	while ( n != 0 ) {					      while ( ( n != 0 ) ) {					  
	temp = 0					      	  int temp = 0 ;					    	int temp = 0 ;						  
	temp = n % 16					      	  temp = n % 16 ;					    	temp = n % 16 ;						  
	if ( temp < 10 ) :				      	  if ( temp < 10 ) {					    	if ( ( temp < 10 ) ) {					  
	    hexaDeciNum [ i ] = chr ( temp + 48 )	      	    hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ;	    	  hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ;		  
	    i = i + 1					      	    i ++ ;						    	  i = i + 1 ;						  
	else :						      	  }							    	}							  
	    hexaDeciNum [ i ] = chr ( temp + 55 )	      	  else {						    	else {							  
	    i = i + 1					      	    hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ;	    	  hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ;		  
	n = int ( n / 16 )				      	    i ++ ;						    	  i = i + 1 ;						  
    j = i - 1						      	  }							    	}							  
    while ( j >= 0 ) :					      	  n = n / 16 ;						    	n = ( int ) ( n / 16 ) ;				  
	print ( ( hexaDeciNum [ j ] ) , end = "" )	      	}							      }								  
	j = j - 1					      	for ( int j = i - 1 ;					      int j = i - 1 ;						  
							      	j >= 0 ;						      while ( ( j >= 0 ) ) {					  
							      	j -- ) System . out . print ( hexaDeciNum [ j ] ) ;	    	System . out . print ( ( hexaDeciNum [ j ] ) ) ;	  
							      }								    	j = j - 1 ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A
--							      --							    --								  --
def findmin ( p , n ) :					      static int findmin ( Point p [ ] , int n ) {		    public static int findmin ( int [ ] [ ] p , int n ) {	  script_not_found : None
    a , b , c , d = 0 , 0 , 0 , 0			      	int a = 0 , b = 0 , c = 0 , d = 0 ;			      int a = 0 , b = 0 , c = 0 , d = 0 ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( p [ i ] [ 0 ] <= 0 ) :			      	i < n ;							      i < n ;							  
	    a += 1					      	i ++ ) {						      i ++ ) {							  
	elif ( p [ i ] [ 0 ] >= 0 ) :			      	  if ( p [ i ] . x <= 0 ) a ++ ;			    	if ( ( p [ i ] [ 0 ] <= 0 ) ) {				  
	    b += 1					      	  else if ( p [ i ] . x >= 0 ) b ++ ;			    	  a ++ ;						  
	if ( p [ i ] [ 1 ] >= 0 ) :			      	  if ( p [ i ] . y >= 0 ) c ++ ;			    	}							  
	    c += 1					      	  else if ( p [ i ] . y <= 0 ) d ++ ;			    	else if ( ( p [ i ] [ 0 ] >= 0 ) ) {			  
	elif ( p [ i ] [ 1 ] <= 0 ) :			      	}							    	  b ++ ;						  
	    d += 1					      	return Math . min ( Math . min ( a , b ) , Math . min ( c , 	}							  
    return min ( [ a , b , c , d ] )			      }								    	if ( ( p [ i ] [ 1 ] >= 0 ) ) {				  
							      								    	  c ++ ;						  
							      								    	}							  
							      								    	else if ( ( p [ i ] [ 1 ] <= 0 ) ) {			  
							      								    	  d ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return Math . min ( new int [ ] {				  
							      								    	a , b , c , d }						  
							      								    	) ;							  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			      CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			    CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			  CONVERT_DECIMAL_FRACTION_BINARY_NUMBER
--							      --							    --								  --
def decimalToBinary ( num , k_prec ) :			      static String decimalToBinary ( double num , int k_prec ) {   public static String decimalToBinary ( String num , int kPrec script_not_found : None
    binary = ""						      	String binary = "" ;					      String binary = "" ;					  
    Integral = int ( num )				      	int Integral = ( int ) num ;				      int Integral = Integer . parseInt ( num ) ;		  
    fractional = num - Integral				      	double fractional = num - Integral ;			      double fractional = num . minus ( Integral ) ;		  
    while ( Integral ) :				      	while ( Integral > 0 ) {				      while ( ( Integral = Integral ) != 0 ) {			  
	rem = Integral % 2				      	  int rem = Integral % 2 ;				    	int rem = Integral % 2 ;				  
	binary += str ( rem )				      	  binary += ( ( char ) ( rem + '0' ) ) ;		    	binary += String . valueOf ( rem ) ;			  
	Integral //= 2					      	  Integral /= 2 ;					    	Integral /= 2 ;						  
    binary = binary [ : : - 1 ]				      	}							      }								  
    binary += '.'					      	binary = reverse ( binary ) ;				      binary = binary . substring ( 0 , binary . length ( ) - 1 ) 
    while ( k_prec ) :					      	binary += ( '.' ) ;					      binary += '.' ;						  
	fractional *= 2					      	while ( k_prec -- > 0 ) {				      while ( ( kPrec = kPrec ) != 0 ) {			  
	fract_bit = int ( fractional )			      	  fractional *= 2 ;					    	fractional *= 2 ;					  
	if ( fract_bit == 1 ) :				      	  int fract_bit = ( int ) fractional ;			    	int fractBit = ( int ) fractional ;			  
	    fractional -= fract_bit			      	  if ( fract_bit == 1 ) {				    	if ( ( fractBit == 1 ) ) {				  
	    binary += '1'				      	    fractional -= fract_bit ;				    	  fractional -= fractBit ;				  
	else :						      	    binary += ( char ) ( 1 + '0' ) ;			    	  binary += '1' ;					  
	    binary += '0'				      	  }							    	}							  
	k_prec -= 1					      	  else {						    	else {							  
    return binary					      	    binary += ( char ) ( 0 + '0' ) ;			    	  binary += '0' ;					  
							      	  }							    	}							  
							      	}							    	kPrec -- ;						  
							      	return binary ;						      }								  
							      }								      return binary ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT
--							      --							    --								  --
def minCost ( cost ) :					      static int minCost ( int cost [ ] [ ] ) {			    public static int minCost ( int [ ] [ ] cost ) {		  script_not_found : None
    dist = [ 0 for i in range ( N ) ]			      	int dist [ ] = new int [ N ] ;				      int [ ] dist = new int [ N ] ;				  
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	dist [ i ] = INF				      	i < N ;							      i < N ;							  
    dist [ 0 ] = 0					      	i ++ ) dist [ i ] = INF ;				      i ++ ) {							  
    for i in range ( N ) :				      	dist [ 0 ] = 0 ;					    	dist [ i ] = 0 ;					  
	for j in range ( i + 1 , N ) :			      	for ( int i = 0 ;					      }								  
	    if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) 	i < N ;							      for ( int i = 0 ;						  
		dist [ j ] = dist [ i ] + cost [ i ] [ j ]    	i ++ ) for ( int j = i + 1 ;				      i < N ;							  
    return dist [ N - 1 ]				      	j < N ;							      i ++ ) {							  
							      	j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) di 	dist [ i ] = INF ;					  
							      	return dist [ N - 1 ] ;					      }								  
							      }								      dist [ 0 ] = 0 ;						  
							      								      for ( int i = 0 ;						  
							      								      i < N ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = i + 1 ;					  
							      								    	j < N ;							  
							      								    	j ++ ) {						  
							      								    	  if ( ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) ) { 
							      								    	    dist [ j ] = dist [ i ] + cost [ i ] [ j ] ;	  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dist [ N - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_ DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_ DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_ DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_
--							      --							    --								  --
def findDiff ( arr , n ) :				      static int findDiff ( int arr [ ] , int n ) {		    static int findDiff ( int [ ] arr , int n ) {		  error : DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQU
    mp = defaultdict ( lambda : 0 )			      	Map < Integer , Integer > mp = new HashMap < > ( ) ;	      Map < Integer , Integer > mp = new TreeMap < > ( ) ;	  ENCIES_IN_AN_ARRAY_1.java:42: error: variable maxC
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  ount is already defined in method f_filled(int[],i
	mp [ arr [ i ] ] += 1				      	i < n ;							      i < n ;							  nt)	int maxCount = n ;	 ^ 1 error
    max_count = 0 min_count = n				      	i ++ ) {						      i ++ ) {							  
    for key , values in mp.items ( ) :			      	  if ( mp . containsKey ( arr [ i ] ) ) {		    	mp . put ( arr [ i ] , 1 ) ;				  
	max_count = max ( max_count , values )		      	    mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;     }								  
	min_count = min ( min_count , values )		      	  }							      int maxCount = 0 ;					  
    return max_count - min_count			      	  else {						      int maxCount = n ;					  
							      	    mp . put ( arr [ i ] , 1 ) ;			      for ( Map . Entry < Integer , Integer > entry : mp . entryS 
							      	  }							    	maxCount = Math . max ( maxCount , entry . getValue ( ) ) 
							      	}							    	maxCount = Math . min ( maxCount , entry . getValue ( ) ) 
							      	int max_count = 0 , min_count = n ;			      }								  
							      	for ( Map . Entry < Integer , Integer > x : mp . entrySet (   return maxCount - maxCount ;				  
							      	  max_count = Math . max ( max_count , x . getValue ( ) ) ; }								  
							      	  min_count = Math . min ( min_count , x . getValue ( ) ) ; 								  
							      	}							    								  
							      	return ( max_count - min_count ) ;			    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER_1					      ENTRINGER_NUMBER_1					    ENTRINGER_NUMBER_1						  ENTRINGER_NUMBER_1
--							      --							    --								  --
def zigzag ( n , k ) :					      static int zigzag ( int n , int k ) {			    public static int zigzag ( int n , int k ) {		  script_not_found : None
    dp = [ [ 0 for x in range ( k + 1 ) ] for y in range ( n  	int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;		      int [ ] [ ] dp = new int [ k + 1 ] [ n + 1 ] ;		  
    dp [ 0 ] [ 0 ] = 1					      	dp [ 0 ] [ 0 ] = 1 ;					      for ( int x = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      x < dp . length ;						  
	dp [ i ] [ 0 ] = 0				      	i <= n ;						      x ++ ) {							  
    for i in range ( 1 , n + 1 ) :			      	i ++ ) dp [ i ] [ 0 ] = 0 ;				    	dp [ x ] [ 0 ] = 0 ;					  
	for j in range ( 1 , k + 1 ) :			      	for ( int i = 1 ;					      }								  
	    dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i -  	i <= n ;						      for ( int y = 0 ;						  
    return dp [ n ] [ k ]				      	i ++ ) {						      y < dp . length ;						  
							      	  for ( int j = 1 ;					      y ++ ) {							  
							      	  j <= Math . min ( i , k ) ;				    	dp [ y ] [ 0 ] = 0 ;					  
							      	  j ++ ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ]   }								  
							      	}							      dp [ 0 ] [ 0 ] = 1 ;					  
							      	return dp [ n ] [ k ] ;					      for ( int i = 1 ;						  
							      }								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	dp [ i ] [ 0 ] = 0 ;					  
							      								      }								  
							      								      for ( int i = 1 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j <= k ;						  
							      								    	j ++ ) {						  
							      								    	  dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1 ] [  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] [ k ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		      FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		    FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2			  FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2
--							      --							    --								  --
def printDivisors ( n ) :				      static void printDivisors ( int n ) {			    static void printDivisors ( int n ) {			  script_not_found : None
    list = [ ]						      	Vector < Integer > v = new Vector < > ( ) ;		      ArrayList < Integer > list = new ArrayList < > ( ) ;	  
    for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if ( n % i == 0 ) :				      	i <= Math . sqrt ( n ) ;				      i <= ( int ) ( Math . sqrt ( n ) + 1 ) ;			  
	    if ( n / i == i ) :				      	i ++ ) {						      i ++ ) {							  
		print ( i , end = " " )			      	  if ( n % i == 0 ) {					    	if ( ( n % i ) == 0 ) {					  
	    else :					      	    if ( n / i == i ) System . out . printf ( "%d " , i ) ; 	  if ( ( n / i ) == i ) {				  
		print ( i , end = " " )			      	    else {						    	    System . out . print ( i + " " ) ;			  
		list.append ( int ( n / i ) )		      	      System . out . printf ( "%d " , i ) ;		    	  }							  
    for i in list [ : : - 1 ] :				      	      v . add ( n / i ) ;				    	  else {						  
	print ( i , end = " " )				      	    }							    	    System . out . print ( i + " " ) ;			  
							      	  }							    	    list . add ( ( int ) ( n / i ) ) ;			  
							      	}							    	  }							  
							      	for ( int i = v . size ( ) - 1 ;			    	}							  
							      	i >= 0 ;						      }								  
							      	i -- ) System . out . printf ( "%d " , v . get ( i ) ) ;      for ( int i = list . size ( ) - 1 ;			  
							      }								      i >= 0 ;							  
							      								      i -- ) {							  
							      								    	System . out . print ( list . get ( i ) + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1
--							      --							    --								  --
def lis ( arr ) :					      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int [ ] arr ) {			  error : DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASI
    n = len ( arr )					      	int lis [ ] = new int [ n ] ;				      int n = arr . length ;					  NG_SUBSEQUENCE_1.java:81: error: method f_filled i
    lis = [ 1 ] * n					      	int i , j , max = 0 ;					      int [ ] lis = new int [ n ] ;				  n class DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASI
    for i in range ( 1 , n ) :				      	for ( i = 0 ;						      for ( int i = 1 ;						  NG_SUBSEQUENCE_1 cannot be applied to given types;
	for j in range ( 0 , i ) :			      	i < n ;							      i < n ;							  	   if(f_filled(param0.get(i),param1.get(i))
	    if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j  	i ++ ) lis [ i ] = 1 ;					      i ++ ) {							  == f_gold(param0.get(i),param1.get(i)))
		lis [ i ] = lis [ j ] + 1		      	for ( i = 1 ;						    	for ( int j = 0 ;					   ^   required: int[]	 found: int[],Integer	reas
    maximum = 0						      	i < n ;							    	j <= i ;						  on: actual and formal argument lists differ in len
    for i in range ( n ) :				      	i ++ ) for ( j = 0 ;					    	j ++ ) {						  gth 1 error
	maximum = max ( maximum , lis [ i ] )		      	j < i ;							    	  if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 
    return maximum					      	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]  	    lis [ i ] = lis [ j ] + 1 ;				  
							      	for ( i = 0 ;						    	  }							  
							      	i < n ;							    	}							  
							      	i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;		      }								  
							      	return max ;						      int maximum = 0 ;						  
							      }								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	maximum = Math . max ( maximum , lis [ i ] ) ;		  
							      								      }								  
							      								      return maximum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
def solve ( i , par , a , n , k , current_ans ) :	      static void solve ( int i , int par , int a [ ] , int n , int public static int solve ( int i , int par , int [ ] a , int n script_not_found : None
    if ( par > k ) :					      	if ( par > k ) return ;					      if ( ( par > k ) ) {					  
	return 0					      	if ( par == k && i == n - 1 ) {				    	return 0 ;						  
    global ans						      	  ans = Math . min ( ans , current_ans ) ;		      }								  
    if ( par == k and i == n - 1 ) :			      	  return ;						      int ans ;							  
	ans = min ( ans , current_ans )			      	}							      if ( ( par == k ) && ( i == n - 1 ) ) {			  
	return 0					      	for ( int j = i + 1 ;					    	ans = Math . min ( ans , currentAns ) ;			  
    for j in range ( i + 1 , n ) :			      	j < n ;							    	return 0 ;						  
	solve ( j , par + 1 , a , n , k , current_ans + ( a [ 	j ++ ) solve ( j , par + 1 , a , n , k , current_ans + ( a    }								  
							      }								      for ( int j = i + 1 ;					  
							      								      j < n ;							  
							      								      j ++ ) {							  
							      								    	solve ( j , par + 1 , a , n , k , currentAns + ( a [ j ]  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED		      MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED		    MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED		  MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED
--							      --							    --								  --
def segregateElements ( arr , n ) :			      static void segregateElements ( int arr [ ] , int n ) {	    public static void segregateElements ( int [ ] arr , int n )  script_not_found : None
    temp = [ 0 for k in range ( n ) ]			      	int temp [ ] = new int [ n ] ;				      int [ ] temp = new int [ n ] ;				  
    j = 0						      	int j = 0 ;						      for ( int k = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      k < n ;							  
	if ( arr [ i ] >= 0 ) :				      	i < n ;							      k ++ ) {							  
	    temp [ j ] = arr [ i ]			      	i ++ ) if ( arr [ i ] >= 0 ) temp [ j ++ ] = arr [ i ] ;    	temp [ k ] = 0 ;					  
	    j += 1					      	if ( j == n || j == 0 ) return ;			      }								  
    if ( j == n or j == 0 ) :				      	for ( int i = 0 ;					      int j = 0 ;						  
	return						      	i < n ;							      for ( int i = 0 ;						  
    for i in range ( n ) :				      	i ++ ) if ( arr [ i ] < 0 ) temp [ j ++ ] = arr [ i ] ;	      i < n ;							  
	if ( arr [ i ] < 0 ) :				      	for ( int i = 0 ;					      i ++ ) {							  
	    temp [ j ] = arr [ i ]			      	i < n ;							    	if ( ( arr [ i ] >= 0 ) ) {				  
	    j += 1					      	i ++ ) arr [ i ] = temp [ i ] ;				    	  temp [ j ] = arr [ i ] ;				  
    for k in range ( n ) :				      }								    	  j ++ ;						  
	arr [ k ] = temp [ k ]				      								    	}							  
							      								      }								  
							      								      if ( ( j == n ) || ( j == 0 ) ) {				  
							      								    	return ;						  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( arr [ i ] < 0 ) ) {				  
							      								    	  temp [ j ] = arr [ i ] ;				  
							      								    	  j ++ ;						  
							      								    	}							  
							      								      }								  
							      								      for ( int k = 0 ;						  
							      								      k < n ;							  
							      								      k ++ ) {							  
							      								    	arr [ k ] = temp [ k ] ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	      LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	    LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	  LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS
--							      --							    --								  --
def findFibSubset ( arr , n ) :				      public static void findFibSubset ( Integer [ ] x ) {	    static void findFibSubset ( int [ ] arr , int n ) {		  script_not_found : None
    m = max ( arr )					      	Integer max = Collections . max ( Arrays . asList ( x ) ) ;   int m = Math . max ( arr . length , arr [ 0 ] ) ;		  
    a = 0						      	List < Integer > fib = new ArrayList < Integer > ( ) ;	      int a = 0 ;						  
    b = 1						      	List < Integer > result = new ArrayList < Integer > ( ) ;     int b = 1 ;						  
    hash = [ ]						      	Integer a = 0 ;						      int [ ] hash = new int [ n ] ;				  
    hash.append ( a )					      	Integer b = 1 ;						      hash [ 0 ] = a ;						  
    hash.append ( b )					      	while ( b < max ) {					      hash [ 1 ] = b ;						  
    while ( b < m ) :					      	  Integer c = a + b ;					      while ( ( b = b ) < m ) {					  
	c = a + b					      	  a = b ;						    	int c = a + b ;						  
	a = b						      	  b = c ;						    	a = b ;							  
	b = c						      	  fib . add ( c ) ;					    	b = c ;							  
	hash.append ( b )				      	}							    	hash [ 1 ] = b ;					  
    for i in range ( n ) :				      	for ( Integer i = 0 ;					      }								  
	if arr [ i ] in hash :				      	i < x . length ;					      for ( int i = 0 ;						  
	    print ( arr [ i ] , end = " " )		      	i ++ ) {						      i < n ;							  
							      	  if ( fib . contains ( x [ i ] ) ) {			      i ++ ) {							  
							      	    result . add ( x [ i ] ) ;				    	if ( hash [ i ] >= arr [ i ] ) {			  
							      	  }							    	  System . out . print ( arr [ i ] + " " ) ;		  
							      	}							    	}							  
							      	System . out . println ( result ) ;			      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT_1					      MAJORITY_ELEMENT_1					    MAJORITY_ELEMENT_1						  MAJORITY_ELEMENT_1
--							      --							    --								  --
def findMajority ( arr , size ) :			      private static void findMajority ( int [ ] arr ) {	    static void findMajority ( int [ ] arr , int size ) {	  script_not_found : None
    m = { }						      	HashMap < Integer , Integer > map = new HashMap < Integer ,   HashMap < Integer , Integer > m = new HashMap < > ( ) ;	  
    for i in range ( size ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i ] in m :				      	i < arr . length ;					      i < size ;						  
	    m [ arr [ i ] ] += 1			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( map . containsKey ( arr [ i ] ) ) {		    	if ( m . containsKey ( arr [ i ] ) ) {			  
	    m [ arr [ i ] ] = 1				      	    int count = map . get ( arr [ i ] ) + 1 ;		    	  m . put ( arr [ i ] , 1 ) ;				  
    count = 0						      	    if ( count > arr . length / 2 ) {			    	}							  
    for key in m :					      	      System . out . println ( "Majority found :- " + arr [ 	else {							  
	if m [ key ] > size / 2 :			      	      return ;						    	  m . put ( arr [ i ] , 1 ) ;				  
	    count = 1					      	    }							    	}							  
	    print ( "Majority found :-" , key )		      	    else map . put ( arr [ i ] , count ) ;		      }								  
	    break					      	  }							      int count = 0 ;						  
    if ( count == 0 ) :					      	  else map . put ( arr [ i ] , 1 ) ;			      for ( Integer key : m . keySet ( ) ) {			  
	print ( "No Majority element" )			      	}							    	if ( m . get ( key ) > size / 2 ) {			  
							      	System . out . println ( " No Majority element" ) ;	    	  count = 1 ;						  
							      }								    	  System . out . println ( "Majority found :-" + key ) ;  
							      								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      if ( ( count == 0 ) ) {					  
							      								    	System . out . println ( "No Majority element" ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS		      COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS		    COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS		  COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS
--							      --							    --								  --
def countNums ( n , x , y ) :				      static int countNums ( int n , int x , int y ) {		    static int countNums ( int n , int x , int y ) {		  success : None
    arr = [ False for i in range ( n + 2 ) ]		      	boolean [ ] arr = new boolean [ n + 1 ] ;		      boolean [ ] arr = new boolean [ n + 2 ] ;			  
    if ( x <= n ) :					      	if ( x <= n ) arr [ x ] = true ;			      for ( int i = 0 ;						  
	arr [ x ] = True				      	if ( y <= n ) arr [ y ] = true ;			      i < arr . length ;					  
    if ( y <= n ) :					      	int result = 0 ;					      i ++ ) {							  
	arr [ y ] = True				      	for ( int i = Math . min ( x , y ) ;			    	arr [ i ] = false ;					  
    result = 0						      	i <= n ;						      }								  
    for i in range ( min ( x , y ) , n + 1 ) :		      	i ++ ) {						      if ( ( x <= n ) && ( x <= n ) ) {				  
	if ( arr [ i ] ) :				      	  if ( arr [ i ] ) {					    	arr [ x ] = true ;					  
	    if ( i + x <= n ) :				      	    if ( i + x <= n ) arr [ i + x ] = true ;		      }								  
		arr [ i + x ] = True			      	    if ( i + y <= n ) arr [ i + y ] = true ;		      if ( ( y <= n ) && ( y <= n ) ) {				  
	    if ( i + y <= n ) :				      	    result ++ ;						    	arr [ y ] = true ;					  
		arr [ i + y ] = True			      	  }							      }								  
	    result = result + 1				      	}							      int result = 0 ;						  
    return result					      	return result ;						      for ( int i = Math . min ( x , y ) ;			  
							      }								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( arr [ i ] ) ) {					  
							      								    	  if ( ( i + x <= n ) && ( i + x <= n ) ) {		  
							      								    	    arr [ i + x ] = true ;				  
							      								    	  }							  
							      								    	  if ( ( i + y <= n ) && ( i + y <= n ) ) {		  
							      								    	    arr [ i + y ] = true ;				  
							      								    	  }							  
							      								    	  result = result + 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		      MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		    MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		  MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION
--							      --							    --								  --
def getMinSteps ( n ) :					      static int getMinSteps ( int n ) {			    static int getMinSteps ( int n ) {				  error : MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITI
    table = [ 0 ] * ( n + 1 )				      	int table [ ] = new int [ n + 1 ] ;			      int [ ] table = new int [ n + 1 ] ;			  ON.java:38: error: bad operand type int for unary
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  operator '!'	   if ( ( ! ( i % 2 ) ) ) {
	table [ i ] = n - i				      	i <= n ;						      i < n + 1 ;						     ^ MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION.
    for i in range ( n , 0 , - 1 ) :			      	i ++ ) table [ i ] = n - i ;				      i ++ ) {							  java:41: error: bad operand type int for unary ope
	if ( not ( i % 2 ) ) :				      	for ( int i = n ;					    	table [ i ] = n - i ;					  rator '!'	if ( ( ! ( i % 3 ) ) ) {
	    table [ i // 2 ] = min ( table [ i ] + 1 , table  	i >= 1 ;						      }								  ^ 2 errors
	if ( not ( i % 3 ) ) :				      	i -- ) {						      for ( int i = n ;						  
	    table [ i // 3 ] = min ( table [ i ] + 1 , table  	  if ( ! ( i % 2 > 0 ) ) table [ i / 2 ] = Math . min ( tab   i > 0 ;							  
    return table [ 1 ]					      	  if ( ! ( i % 3 > 0 ) ) table [ i / 3 ] = Math . min ( tab   i -- ) {							  
							      	}							    	if ( ( ! ( i % 2 ) ) ) {				  
							      	return table [ 1 ] ;					    	  table [ i / 2 ] = Math . min ( table [ i ] + 1 , table  
							      								    	}							  
							      								    	if ( ( ! ( i % 3 ) ) ) {				  
							      								    	  table [ i / 3 ] = Math . min ( table [ i ] + 1 , table  
							      								    	}							  
							      								      }								  
							      								      return table [ 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_
--							      --							    --								  --
def countManipulations ( s1 , s2 ) :			      static int countManipulations ( String s1 , String s2 ) {	    public static int countManipulations ( String s1 , String s2  script_not_found : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    char_count = [ 0 ] * 26				      	int char_count [ ] = new int [ 26 ] ;			      int [ ] charCount = new int [ 26 ] ;			  
    for i in range ( 26 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	char_count [ i ] = 0				      	i < s1 . length ( ) ;					      i < 26 ;							  
    for i in range ( len ( s1 ) ) :			      	i ++ ) char_count [ s1 . charAt ( i ) - 'a' ] ++ ;	      i ++ ) {							  
	char_count [ ord ( s1 [ i ] ) - ord ( 'a' ) ] += 1    	for ( int i = 0 ;					    	charCount [ i ] = 0 ;					  
    for i in range ( len ( s2 ) ) :			      	i < s2 . length ( ) ;					      }								  
	char_count [ ord ( s2 [ i ] ) - ord ( 'a' ) ] -= 1    	i ++ ) if ( char_count [ s2 . charAt ( i ) - 'a' ] -- <= 0    for ( int i = 0 ;						  
	if ( char_count [ ord ( s2 [ i ] ) - ord ( 'a' ) ] <  	return count ;						      i < s1 . length ( ) ;					  
	    count += 1					      }								      i ++ ) {							  
    return count					      								    	charCount [ ( int ) s1 . charAt ( i ) - 'a' ] ++ ;	  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < s2 . length ( ) ;					  
							      								      i ++ ) {							  
							      								    	charCount [ ( int ) s2 . charAt ( i ) - 'a' ] -- ;	  
							      								    	if ( ( charCount [ ( int ) s2 . charAt ( i ) - 'a' ] < 0  
							      								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI
--							      --							    --								  --
def stringReduction ( str ) :				      static int stringReduction ( String str ) {		    public static int stringReduction ( String str ) {		  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    count = [ 0 ] * 3					      	int count [ ] = new int [ 3 ] ;				      int [ ] count = new int [ 3 ] ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	      	i < n ;							      i < n ;							  
    if ( count [ 0 ] == n or count [ 1 ] == n or count [ 2 ]  	++ i ) {						      i ++ ) count [ ( int ) str . charAt ( i ) - ( int ) 'a' ] + 
	return n					      	  count [ str . charAt ( i ) - 'a' ] ++ ;		      if ( ( count [ 0 ] == n ) || ( count [ 1 ] == n ) || ( coun 
    if ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) and ( cou 	}							      if ( ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) ) && ( (  
	return 2					      	if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ] ==   return 1 ;						  
    return 1						      	  return n ;						    }								  
							      	}							    								  
							      	if ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) && ( count  								  
							      	  return 2 ;						    								  
							      	}							    								  
							      	return 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS		      COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS			    COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS			  COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS
--							      --							    --								  --
def countWays ( n ) :					      static long countWays ( int n ) {				    static int countWays ( int n ) {				  failure : #Results:2, 10
    dp = [ [ 0 ] * ( n + 1 ) for i in range ( 2 ) ]	      	long dp [ ] [ ] = new long [ 2 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ 2 ] [ n + 1 ] ;		  
    dp [ 0 ] [ 1 ] = 1					      	dp [ 0 ] [ 1 ] = 1 ;					      dp [ 0 ] [ 1 ] = 1 ;					  
    dp [ 1 ] [ 1 ] = 2					      	dp [ 1 ] [ 1 ] = 2 ;					      dp [ 1 ] [ 1 ] = 2 ;					  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i -  	i <= n ;						      i <= n ;							  
	dp [ 1 ] [ i ] = ( dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ]  	i ++ ) {						      i ++ ) {							  
    return dp [ 0 ] [ n ] + dp [ 1 ] [ n ]		      	  dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]  	dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]  
							      	  dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i -  	dp [ 1 ] [ i ] = ( dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i  
							      	}							      }								  
							      	return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;		      return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	      DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	    DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M		  DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M
--							      --							    --								  --
def numberofways ( n , m ) :				      static int numberofways ( int n , int m ) {		    public static int numberofways ( int n , int m ) {		  script_not_found : None
    dp = np.zeros ( ( n + 2 , n + 2 ) )			      	int dp [ ] [ ] = new int [ n + 2 ] [ n + 2 ] ;		      int [ ] [ ] dp = new int [ n + 2 ] [ n + 2 ] ;		  
    dp [ 0 ] [ n + 1 ] = 1				      	dp [ 0 ] [ n + 1 ] = 1 ;				      dp [ 0 ] [ n + 1 ] = 1 ;					  
    for k in range ( n , m - 1 , - 1 ) :		      	for ( int k = n ;					      for ( int k = n ;						  
	for i in range ( n + 1 ) :			      	k >= m ;						      k >= m ;							  
	    dp [ i ] [ k ] = dp [ i ] [ k + 1 ]		      	k -- ) {						      k -- ) {							  
	    if ( i - k >= 0 ) :				      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
		dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i -  	  i <= n ;						    	i < n + 1 ;						  
    return dp [ n ] [ m ]				      	  i ++ ) {						    	i ++ ) {						  
							      	    dp [ i ] [ k ] = dp [ i ] [ k + 1 ] ;		    	  dp [ i ] [ k ] = dp [ i ] [ k + 1 ] ;			  
							      	    if ( i - k >= 0 ) dp [ i ] [ k ] = ( dp [ i ] [ k ] + d 	  if ( ( i - k ) >= 0 ) {				  
							      	  }							    	    dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k  
							      	}							    	  }							  
							      	return dp [ n ] [ m ] ;					    	}							  
							      }								      }								  
							      								      return dp [ n ] [ m ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			      DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			    DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			  DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER
--							      --							    --								  --
def isDvisibleBy12 ( num ) :				      static boolean isDvisibleBy12 ( String num ) {		    public static boolean isDvisibleBy12 ( String num ) {	  error : Exception in thread "main" java.lang.Strin
    if ( len ( num ) >= 3 ) :				      	if ( num . length ( ) >= 3 ) {				      if ( ( num . length ( ) >= 3 ) ) {			  gIndexOutOfBoundsException: begin 20, end 21, leng
	d1 = int ( num [ len ( num ) - 1 ] )		      	  int d1 = ( int ) num . charAt ( num . length ( ) - 1 ) ;  	int d1 = Integer . parseInt ( num . substring ( num . len th 20 	at java.base/java.lang.String.checkBoundsBe
	if ( d1 % 2 != 0 ) :				      	  if ( d1 % 2 != 0 ) return false ;			    	if ( ( d1 % 2 != 0 ) ) {				  ginEnd(String.java:3319) 	at java.base/java.lang.S
	    return False				      	  int d2 = ( int ) num . charAt ( num . length ( ) - 2 ) ;  	  return false ;					  tring.substring(String.java:1874) 	at DIVISIBILITY
	d2 = int ( num [ len ( num ) - 2 ] )		      	  int sum = 0 ;						    	}							  _BY_12_FOR_A_LARGE_NUMBER.f_filled(DIVISIBILITY_BY
	sum = 0						      	  for ( int i = 0 ;					    	int d2 = Integer . parseInt ( num . substring ( num . len _12_FOR_A_LARGE_NUMBER.java:42) 	at DIVISIBILITY_B
	for i in range ( 0 , len ( num ) ) :		      	  i < num . length ( ) ;				    	int sum = 0 ;						  Y_12_FOR_A_LARGE_NUMBER.main(DIVISIBILITY_BY_12_FO
	    sum += int ( num [ i ] )			      	  i ++ ) sum += num . charAt ( i ) ;			    	for ( int i = 0 ;					  R_A_LARGE_NUMBER.java:68)
	return ( sum % 3 == 0 and ( d2 * 10 + d1 ) % 4 == 0 ) 	  return ( sum % 3 == 0 && ( d2 * 10 + d1 ) % 4 == 0 ) ;    	i <= num . length ( ) ;					  
    else :						      	}							    	i ++ ) {						  
	number = int ( num )				      	else {							    	  sum += Integer . parseInt ( num . substring ( i , i + 1 
	return ( number % 12 == 0 )			      	  int number = Integer . parseInt ( num ) ;		    	}							  
							      	  return ( number % 12 == 0 ) ;				    	return ( sum % 3 == 0 && ( d2 * 10 + d1 ) % 4 == 0 ) ;	  
							      	}							      }								  
							      }								      else {							  
							      								    	int number = Integer . parseInt ( num ) ;		  
							      								    	return ( number % 12 == 0 ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
OVERLAPPING_SUM_TWO_ARRAY				      OVERLAPPING_SUM_TWO_ARRAY					    OVERLAPPING_SUM_TWO_ARRAY					  OVERLAPPING_SUM_TWO_ARRAY
--							      --							    --								  --
def findSum ( A , B , n ) :				      static int findSum ( int [ ] A , int [ ] B , int n ) {	    static int findSum ( int [ ] A , int [ ] B , int n ) {	  failure : #Results:0, 10
    Hash = defaultdict ( lambda : 0 )			      	HashMap < Integer , Integer > hash = new HashMap < > ( ) ;    Map < Integer , Integer > Hash = new TreeMap < > ( ) ;	  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	Hash [ A [ i ] ] += 1				      	i < n ;							      i <= n ;							  
	Hash [ B [ i ] ] += 1				      	i ++ ) {						      i ++ ) {							  
    Sum = 0						      	  if ( hash . containsKey ( A [ i ] ) ) hash . put ( A [ i  	Hash . put ( A [ i ] , 1 ) ;				  
    for x in Hash :					      	  else hash . put ( A [ i ] , 1 ) ;			    	Hash . put ( B [ i ] , 1 ) ;				  
	if Hash [ x ] == 1 :				      	  if ( hash . containsKey ( B [ i ] ) ) hash . put ( B [ i    }								  
	    Sum += x					      	  else hash . put ( B [ i ] , 1 ) ;			      int Sum = 0 ;						  
    return Sum						      	}							      for ( Integer x : Hash . keySet ( ) ) {			  
							      	int sum = 0 ;						    	if ( Hash . get ( x ) == 1 ) {				  
							      	for ( Map . Entry entry : hash . entrySet ( ) ) {	    	  Sum += x ;						  
							      	  if ( Integer . parseInt ( ( entry . getValue ( ) ) . toSt 	}							  
							      	}							      }								  
							      	return sum ;						      return Sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	      MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	    MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	  MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX
--							      --							    --								  --
def minOperation ( arr ) :				      static int minOperation ( boolean arr [ ] [ ] ) {		    public static int minOperation ( int [ ] [ ] arr ) {	  script_not_found : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for i in range ( N - 1 , - 1 , - 1 ) :		      	for ( int i = N - 1 ;					      for ( int i = N - 1 ;					  
	for j in range ( M - 1 , - 1 , - 1 ) :		      	i >= 0 ;						      i >= 0 ;							  
	    if ( arr [ i ] [ j ] == 0 ) :		      	i -- ) {						      i -- ) {							  
		ans += 1				      	  for ( int j = M - 1 ;					    	for ( int j = M - 1 ;					  
		for k in range ( i + 1 ) :		      	  j >= 0 ;						    	j >= 0 ;						  
		    for h in range ( j + 1 ) :		      	  j -- ) {						    	j -- ) {						  
			if ( arr [ k ] [ h ] == 1 ) :	      	    if ( arr [ i ] [ j ] == false ) {			    	  if ( ( arr [ i ] [ j ] == 0 ) ) {			  
			    arr [ k ] [ h ] = 0		      	      ans ++ ;						    	    ans ++ ;						  
			else :				      	      for ( int k = 0 ;					    	    for ( int k = 0 ;					  
			    arr [ k ] [ h ] = 1		      	      k <= i ;						    	    k < i + 1 ;						  
    return ans						      	      k ++ ) {						    	    k ++ ) {						  
							      		for ( int h = 0 ;				    	      for ( int h = 0 ;					  
							      		h <= j ;					    	      h < j + 1 ;					  
							      		h ++ ) {					    	      h ++ ) {						  
							      		  if ( arr [ k ] [ h ] == true ) {		    		if ( ( arr [ k ] [ h ] == 1 ) ) {		  
							      		    arr [ k ] [ h ] = false ;			    		  arr [ k ] [ h ] = 0 ;				  
							      		  }						    		}						  
							      		  else {					    		else {						  
							      		    arr [ k ] [ h ] = true ;			    		  arr [ k ] [ h ] = 1 ;				  
							      		  }						    		}						  
							      		}						    	      }							  
							      	      }							    	    }							  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DICE_THROW_PROBLEM					      DICE_THROW_PROBLEM					    DICE_THROW_PROBLEM						  DICE_THROW_PROBLEM
--							      --							    --								  --
def findWays ( m , n , x ) :				      public static long findWays ( int m , int n , int x ) {	    static int findWays ( int m , int n , int x ) {		  error : Exception in thread "main" java.lang.Array
    table = [ [ 0 ] * ( x + 1 ) for i in range ( n + 1 ) ]    	long [ ] [ ] table = new long [ n + 1 ] [ x + 1 ] ;	      int [ ] [ ] table = new int [ n + 1 ] [ x + 1 ] ;		  IndexOutOfBoundsException: Index 44 out of bounds
    for j in range ( 1 , min ( m + 1 , x + 1 ) ) :	      	for ( int j = 1 ;					      for ( int i = 0 ;						  for length 25 	at DICE_THROW_PROBLEM.f_filled(DICE
	table [ 1 ] [ j ] = 1				      	j <= m && j <= x ;					      i < table . length ;					  _THROW_PROBLEM.java:57) 	at DICE_THROW_PROBLEM.mai
    for i in range ( 2 , n + 1 ) :			      	j ++ ) table [ 1 ] [ j ] = 1 ;				      i ++ ) {							  n(DICE_THROW_PROBLEM.java:98)
	for j in range ( 1 , x + 1 ) :			      	for ( int i = 2 ;					    	for ( int j = 1 ;					  
	    for k in range ( 1 , min ( m + 1 , j ) ) :	      	i <= n ;						    	j < Math . min ( m + 1 , x + 1 ) ;			  
		table [ i ] [ j ] += table [ i - 1 ] [ j - k  	i ++ ) {						    	j ++ ) {						  
    return table [ - 1 ] [ - 1 ]			      	  for ( int j = 1 ;					    	  table [ 1 ] [ j ] = 1 ;				  
							      	  j <= x ;						    	}							  
							      	  j ++ ) {						      }								  
							      	    for ( int k = 1 ;					      for ( int i = 2 ;						  
							      	    k < j && k <= m ;					      i < n + 1 ;						  
							      	    k ++ ) table [ i ] [ j ] += table [ i - 1 ] [ j - k ] ;   i ++ ) {							  
							      	  }							    	for ( int j = 1 ;					  
							      	}							    	j < x ;							  
							      	return table [ n ] [ x ] ;				    	j ++ ) {						  
							      }								    	  for ( int k = 1 ;					  
							      								    	  k < Math . min ( m + 1 , j ) ;			  
							      								    	  k ++ ) {						  
							      								    	    table [ i ] [ j ] += table [ i - 1 ] [ j - k ] ;	  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return table [ table . length - 1 ] [ table . length - 1 ]  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE
--							      --							    --								  --
def find3Numbers ( A , arr_size , sum ) :		      boolean find3Numbers ( int A [ ] , int arr_size , int sum ) { public static boolean find3Numbers ( int [ ] A , int arrSize  success : None
    for i in range ( 0 , arr_size - 2 ) :		      	int l , r ;						      for ( int i = 0 ;						  
	for j in range ( i + 1 , arr_size - 1 ) :	      	for ( int i = 0 ;					      i <= arrSize - 2 ;					  
	    for k in range ( j + 1 , arr_size ) :	      	i < arr_size - 2 ;					      i ++ ) {							  
		if A [ i ] + A [ j ] + A [ k ] == sum :	      	i ++ ) {						    	for ( int j = i + 1 ;					  
		    print ( "Triplet is" , A [ i ] , ", " , A 	  for ( int j = i + 1 ;					    	j <= arrSize - 1 ;					  
		    return True				      	  j < arr_size - 1 ;					    	j ++ ) {						  
    return False					      	  j ++ ) {						    	  for ( int k = j + 1 ;					  
							      	    for ( int k = j + 1 ;				    	  k <= arrSize ;					  
							      	    k < arr_size ;					    	  k ++ ) {						  
							      	    k ++ ) {						    	    if ( A [ i ] + A [ j ] + A [ k ] == sum ) {		  
							      	      if ( A [ i ] + A [ j ] + A [ k ] == sum ) {	    	      System . out . println ( "Triplet is" + A [ i ] + " 
							      		System . out . print ( "Triplet is " + A [ i ] + ", 	      return true ;					  
							      		return true ;					    	    }							  
							      	      }							    	  }							  
							      	    }							    	}							  
							      	  }							      }								  
							      	}							      return false ;						  
							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S	      FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S		    FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S		  FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S
--							      --							    --								  --
def MaxDotProduct ( A , B , m , n ) :			      static int MaxDotProduct ( int A [ ] , int B [ ] , int m , in public static int MaxDotProduct ( int [ ] A , int [ ] B , int error : Exception in thread "main" java.lang.Array
    dp = [ [ 0 for i in range ( m + 1 ) ] for j in range ( n  	int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		      int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		  IndexOutOfBoundsException: Index -1 out of bounds
    for i in range ( 1 , n + 1 , 1 ) :			      	for ( int [ ] row : dp ) Arrays . fill ( row , 0 ) ;	      for ( int i = 0 ;						  for length 4 	at FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRA
	for j in range ( i , m + 1 , 1 ) :		      	for ( int i = 1 ;					      i < dp . length ;						  YS_INSERTION_0S.f_filled(FIND_MAXIMUM_DOT_PRODUCT_
	    dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + 	i <= n ;						      i ++ ) {							  TWO_ARRAYS_INSERTION_0S.java:33) 	at FIND_MAXIMUM_
    return dp [ n ] [ m ]				      	i ++ ) for ( int j = i ;				    	for ( int j = 0 ;					  DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S.main(FIND_MAXI
							      	j <= m ;						    	j < dp [ i ] . length ;					  MUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S.java:88)
							      	j ++ ) dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 	j ++ ) {						  
							      	return dp [ n ] [ m ] ;					    	  dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ]  
							      }								    	}							  
							      								      }								  
							      								      return dp [ n ] [ m ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_ALMOST_SORTED_ARRAY				      SEARCH_ALMOST_SORTED_ARRAY				    SEARCH_ALMOST_SORTED_ARRAY					  SEARCH_ALMOST_SORTED_ARRAY
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      int binarySearch ( int arr [ ] , int l , int r , int x ) {    static int binarySearch ( int [ ] arr , int l , int r , int x success : None
    if ( r >= l ) :					      	if ( r >= l ) {						      if ( ( r >= l ) ) {					  
	mid = int ( l + ( r - l ) / 2 )			      	  int mid = l + ( r - l ) / 2 ;				    	int mid = ( int ) ( l + ( r - l ) / 2 ) ;		  
	if ( arr [ mid ] == x ) : return mid		      	  if ( arr [ mid ] == x ) return mid ;			    	if ( ( arr [ mid ] == x ) ) return mid ;		  
	if ( mid > l and arr [ mid - 1 ] == x ) :	      	  if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) 	if ( ( mid > l ) && ( arr [ mid - 1 ] == x ) ) return ( m 
	    return ( mid - 1 )				      	  if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) 	if ( ( mid < r ) && ( arr [ mid + 1 ] == x ) ) return ( m 
	if ( mid < r and arr [ mid + 1 ] == x ) :	      	  if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 	if ( ( arr [ mid ] > x ) ) return binarySearch ( arr , l  
	    return ( mid + 1 )				      	  return binarySearch ( arr , mid + 2 , r , x ) ;	    	return binarySearch ( arr , mid + 2 , r , x ) ;		  
	if ( arr [ mid ] > x ) :			      	}							      }								  
	    return binarySearch ( arr , l , mid - 2 , x )     	return - 1 ;						      return - 1 ;						  
	return binarySearch ( arr , mid + 2 , r , x )	      }								    }								  
    return - 1						      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_N_DIGITS_NON_DECREASING_INTEGERS			      NUMBER_N_DIGITS_NON_DECREASING_INTEGERS			    NUMBER_N_DIGITS_NON_DECREASING_INTEGERS			  NUMBER_N_DIGITS_NON_DECREASING_INTEGERS
--							      --							    --								  --
def nonDecNums ( n ) :					      static int nonDecNums ( int n ) {				    public static int nonDecNums ( int n ) {			  success : None
    a = np.zeros ( ( n + 1 , 10 ) )			      	int [ ] [ ] a = new int [ n + 1 ] [ 10 ] ;		      int [ ] [ ] a = new int [ n + 1 ] [ 10 ] ;		  
    for i in range ( 10 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	a [ 0 ] [ i ] = 1				      	i <= 9 ;						      i < 10 ;							  
    for i in range ( 1 , n + 1 ) :			      	i ++ ) a [ 0 ] [ i ] = 1 ;				      i ++ ) a [ 0 ] [ i ] = 1 ;				  
	a [ i ] [ 9 ] = 1				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    for i in range ( 1 , n + 1 ) :			      	i <= n ;						      i <= n ;							  
	for j in range ( 8 , - 1 , - 1 ) :		      	i ++ ) a [ i ] [ 9 ] = 1 ;				      i ++ ) a [ i ] [ 9 ] = 1 ;				  
	    a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 	for ( int i = 1 ;					      for ( int i = 1 ;						  
    return int ( a [ n ] [ 0 ] )			      	i <= n ;						      i <= n ;							  
							      	i ++ ) for ( int j = 8 ;				      i ++ ) for ( int j = 8 ;					  
							      	j >= 0 ;						      j >= 0 ;							  
							      	j -- ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1    j -- ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1  
							      	return a [ n ] [ 0 ] ;					      return ( int ) a [ n ] [ 0 ] ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE     REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE
--							      --							    --								  --
def rearrange ( arr , n ) :				      public static void rearrange ( int arr [ ] , int n ) {	    public static void rearrange ( int [ ] arr , int n ) {	  failure : #Results:2, 10
    max_idx = n - 1					      	int max_idx = n - 1 , min_idx = 0 ;			      int maxIdx = n - 1 ;					  
    min_idx = 0						      	int max_elem = arr [ n - 1 ] + 1 ;			      int minIdx = 0 ;						  
    max_elem = arr [ n - 1 ] + 1			      	for ( int i = 0 ;					      int maxElem = arr [ n - 1 ] + 1 ;				  
    for i in range ( 0 , n ) :				      	i < n ;							      for ( int i = 0 ;						  
	if i % 2 == 0 :					      	i ++ ) {						      i <= n ;							  
	    arr [ i ] += ( arr [ max_idx ] % max_elem ) * max 	  if ( i % 2 == 0 ) {					      i ++ ) {							  
	    max_idx -= 1				      	    arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem  	if ( i % 2 == 0 ) {					  
	else :						      	    max_idx -- ;					    	  arr [ i ] += ( arr [ maxIdx ] % maxElem ) * maxElem ;	  
	    arr [ i ] += ( arr [ min_idx ] % max_elem ) * max 	  }							    	  maxIdx -- ;						  
	    min_idx += 1				      	  else {						    	}							  
    for i in range ( 0 , n ) :				      	    arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem  	else {							  
	arr [ i ] = arr [ i ] / max_elem		      	    min_idx ++ ;					    	  arr [ i ] += ( arr [ minIdx ] % maxElem ) * maxElem ;	  
							      	  }							    	  minIdx ++ ;						  
							      	}							    	}							  
							      	for ( int i = 0 ;					      }								  
							      	i < n ;							      for ( int i = 0 ;						  
							      	i ++ ) arr [ i ] = arr [ i ] / max_elem ;		      i <= n ;							  
							      }								      i ++ ) {							  
							      								    	arr [ i ] = arr [ i ] / maxElem ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TEMPLE_OFFERINGS					      TEMPLE_OFFERINGS						    TEMPLE_OFFERINGS						  TEMPLE_OFFERINGS
--							      --							    --								  --
def offeringNumber ( n , templeHeight ) :		      static int offeringNumber ( int n , int templeHeight [ ] ) {  public static int offeringNumber ( int n , int [ ] templeHeig success : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	left = 0					      	i < n ;							      i < n ;							  
	right = 0					      	++ i ) {						      i ++ ) {							  
	for j in range ( i - 1 , - 1 , - 1 ) :		      	  int left = 0 , right = 0 ;				    	int left = 0 ;						  
	    if ( templeHeight [ j ] < templeHeight [ j + 1 ]  	  for ( int j = i - 1 ;					    	int right = 0 ;						  
		left += 1				      	  j >= 0 ;						    	for ( int j = i - 1 ;					  
	    else :					      	  -- j ) {						    	j >= 0 ;						  
		break					      	    if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) ++ l 	j -- ) {						  
	for j in range ( i + 1 , n ) :			      	    else break ;					    	  if ( ( templeHeight [ j ] < templeHeight [ j + 1 ] ) )  
	    if ( templeHeight [ j ] < templeHeight [ j - 1 ]  	  }							    	    left ++ ;						  
		right += 1				      	  for ( int j = i + 1 ;					    	  }							  
	    else :					      	  j < n ;						    	  else {						  
		break					      	  ++ j ) {						    	    break ;						  
	sum += max ( right , left ) + 1			      	    if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) ++ r 	  }							  
    return sum						      	    else break ;					    	}							  
							      	  }							    	for ( int j = i + 1 ;					  
							      	  sum += Math . max ( right , left ) + 1 ;		    	j < n ;							  
							      	}							    	j ++ ) {						  
							      	return sum ;						    	  if ( ( templeHeight [ j ] < templeHeight [ j - 1 ] ) )  
							      }								    	    right ++ ;						  
							      								    	  }							  
							      								    	  else {						  
							      								    	    break ;						  
							      								    	  }							  
							      								    	}							  
							      								    	sum += Math . max ( right , left ) + 1 ;		  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			      FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			    FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT				  FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT
--							      --							    --								  --
def possibleOrNot ( a1 , a2 , b1 , b2 , c1 , c2 ) :	      static void possibleOrNot ( long a1 , long a2 , long b1 , lon public static String possibleOrNot ( int a1 , int a2 , int b1 script_not_found : None
    dis1 = ( pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 ) )      	long dis1 = ( long ) Math . pow ( b1 - a1 , 2 ) + ( long )    double dis1 = ( Math . pow ( b1 - a1 , 2 ) + Math . pow ( b 
    dis2 = ( pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 ) )      	long dis2 = ( long ) Math . pow ( c1 - b1 , 2 ) + ( long )    double dis2 = ( Math . pow ( c1 - b1 , 2 ) + Math . pow ( c 
    if ( dis1 != dis2 ) :				      	if ( dis1 != dis2 ) System . out . print ( "No" ) ;	      if ( ( dis1 != dis2 ) ) {					  
	print ( "No" )					      	else if ( b1 == ( ( a1 + c1 ) / 2.0 ) && b2 == ( ( a2 + c2  	System . out . println ( "No" ) ;			  
    elif ( b1 == ( ( a1 + c1 ) // 2.0 ) and b2 == ( ( a2 + c2 	else System . out . print ( "Yes" ) ;			      }								  
	print ( "No" )					      }								      else if ( ( b1 == ( ( a1 + c1 ) / 2.0 ) ) && ( b2 == ( ( a2 
    else :						      								    	System . out . println ( "No" ) ;			  
	print ( "Yes" )					      								      }								  
							      								      else {							  
							      								    	System . out . println ( "Yes" ) ;			  
							      								      }								  
							      								      return null ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1	      MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		    MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		  MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1
--							      --							    --								  --
def smallestSubWithSum ( arr , n , x ) :		      static int smallestSubWithSum ( int arr [ ] , int n , int x ) public static int smallestSubWithSum ( int [ ] arr , int n ,  success : None
    curr_sum = 0					      	int curr_sum = 0 , min_len = n + 1 ;			      int currSum = 0 ;						  
    min_len = n + 1					      	int start = 0 , end = 0 ;				      int minLen = n + 1 ;					  
    start = 0						      	while ( end < n ) {					      int start = 0 ;						  
    end = 0						      	  while ( curr_sum <= x && end < n ) {			      int end = 0 ;						  
    while ( end < n ) :					      	    if ( curr_sum <= 0 && x > 0 ) {			      while ( ( end < n ) ) {					  
	while ( curr_sum <= x and end < n ) :		      	      start = end ;					    	while ( ( currSum <= x ) && ( end < n ) ) {		  
	    if ( curr_sum <= 0 and x > 0 ) :		      	      curr_sum = 0 ;					    	  if ( ( currSum <= 0 ) && ( x > 0 ) ) {		  
		start = end				      	    }							    	    start = end ;					  
		curr_sum = 0				      	    curr_sum += arr [ end ++ ] ;			    	    currSum = 0 ;					  
	    curr_sum += arr [ end ]			      	  }							    	  }							  
	    end += 1					      	  while ( curr_sum > x && start < n ) {			    	  currSum += arr [ end ] ;				  
	while ( curr_sum > x and start < n ) :		      	    if ( end - start < min_len ) min_len = end - start ;    	  end ++ ;						  
	    if ( end - start < min_len ) :		      	    curr_sum -= arr [ start ++ ] ;			    	}							  
		min_len = end - start			      	  }							    	while ( ( currSum > x ) && ( start < n ) ) {		  
	    curr_sum -= arr [ start ]			      	}							    	  if ( ( end - start < minLen ) ) {			  
	    start += 1					      	return min_len ;					    	    minLen = end - start ;				  
    return min_len					      }								    	  }							  
							      								    	  currSum -= arr [ start ] ;				  
							      								    	  start ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return minLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_FACTORS_BIG_NUMBER				      PRIME_FACTORS_BIG_NUMBER					    PRIME_FACTORS_BIG_NUMBER					  PRIME_FACTORS_BIG_NUMBER
--							      --							    --								  --
def factorize ( n ) :					      static void factorize ( long n ) {			    public static void factorize ( int n ) {			  script_not_found : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    while ( ( n % 2 > 0 ) == False ) :			      	while ( ! ( n % 2 > 0 ) ) {				      while ( ( ( n % 2 ) > 0 ) == false ) {			  
	n >>= 1						      	  n >>= 1 ;						    	n >>= 1 ;						  
	count += 1					      	  count ++ ;						    	count ++ ;						  
    if ( count > 0 ) :					      	}							      }								  
	print ( 2 , count )				      	if ( count > 0 ) {					      if ( ( count > 0 ) ) {					  
    for i in range ( 3 , int ( math.sqrt ( n ) ) + 1 ) :      	  System . out . println ( "2" + " " + count ) ;	    	System . out . println ( 2 + count ) ;			  
	count = 0					      	}							      }								  
	while ( n % i == 0 ) :				      	for ( long i = 3 ;					      for ( int i = 3 ;						  
	    count += 1					      	i <= ( long ) Math . sqrt ( n ) ;			      i <= ( int ) Math . sqrt ( n ) ;				  
	    n = int ( n / i )				      	i += 2 ) {						      i ++ ) {							  
	if ( count > 0 ) :				      	  count = 0 ;						    	count = 0 ;						  
	    print ( i , count )				      	  while ( n % i == 0 ) {				    	while ( ( n % i ) == 0 ) {				  
	i += 2						      	    count ++ ;						    	  count ++ ;						  
    if ( n > 2 ) :					      	    n = n / i ;						    	  n = ( int ) ( n / i ) ;				  
	print ( n , 1 )					      	  }							    	}							  
							      	  if ( count > 0 ) {					    	if ( ( count > 0 ) ) {					  
							      	    System . out . println ( i + " " + count ) ;	    	  System . out . println ( i + count ) ;		  
							      	  }							    	}							  
							      	}							    	i += 2 ;						  
							      	if ( n > 2 ) {						      }								  
							      	  System . out . println ( n + " " + "1" ) ;		      if ( ( n > 2 ) ) {					  
							      	}							    	System . out . println ( n + 1 ) ;			  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ISBN					      PROGRAM_CHECK_ISBN					    PROGRAM_CHECK_ISBN						  PROGRAM_CHECK_ISBN
--							      --							    --								  --
def isValidISBN ( isbn ) :				      static boolean isValidISBN ( String isbn ) {		    public static boolean isValidISBN ( String isbn ) {		  error : PROGRAM_CHECK_ISBN.java:37: error: ')' exp
    if len ( isbn ) != 10 :				      	int n = isbn . length ( ) ;				      if ( isbn . length ( ) != 10 ) return false ;		  ected	    if ( 0 <= Integer . parseInt ( isbn . su
	return False					      	if ( n != 10 ) return false ;				      int _sum = 0 ;						  bstring ( i , i + 9 ) ) && 0 <= Integer . parseInt
    _sum = 0						      	int sum = 0 ;						      for ( int i = 0 ;						   ( isbn . substring ( i , i + 9 ) ) && 0 <= Intege
    for i in range ( 9 ) :				      	for ( int i = 0 ;					      i < 9 ;							  r . parseInt ( isbn . substring ( i , i + 9 ) ) &&
	if 0 <= int ( isbn [ i ] ) <= 9 :		      	i < 9 ;							      i ++ ) {							   0 <= Integer . parseInt ( isbn . substring ( i ,
	    _sum += int ( isbn [ i ] ) * ( 10 - i )	      	i ++ ) {						    	if ( 0 <= Integer . parseInt ( isbn . substring ( i , i + i + 9 ) ) && 0 <= Integer . parseInt ( isbn . subs
	else :						      	  int digit = isbn . charAt ( i ) - '0' ;		      }								  tring ( i , i + 9 ) ) && 0 <= Integer . parseInt (
	    return False				      	  if ( 0 > digit || 9 < digit ) return false ;		      return ( _sum % 11 ) ;					   isbn . substring ( i , i + 9 ) ) && 0 <= Integer
    if ( isbn [ 9 ] != 'X' and 0 <= int ( isbn [ 9 ] ) <= 9 ) 	  sum += ( digit * ( 10 - i ) ) ;			    }								  . parseInt ( isbn . substring ( i , i + 9 ) ) && 0
	return False					      	}							    								   <= Integer . parseInt ( isbn . substring ( i , i
    _sum += 10 if isbn [ 9 ] == 'X' else int ( isbn [ 9 ] )   	char last = isbn . charAt ( 9 ) ;			    								  + 9 ) ) && 0 <= Integer . parseInt ( isbn . substr
    return ( _sum % 11 == 0 )				      	if ( last != 'X' && ( last < '0' || last > '9' ) ) return f 								  ing ( i , i + 9 ) ) && 0 <= Integer . parseInt ( i
							      	sum += ( ( last == 'X' ) ? 10 : ( last - '0' ) ) ;	    								  sbn . substring ( i , i + 9 ) ) && 0 <= Integer .
							      	return ( sum % 11 == 0 ) ;				    								  parseInt ( isbn . substring ( i , i + 9 ) ) && 0 <
							      }								    								  = Integer . parseInt ( isbn . substring ( i , i +
							      								    								  9 ) ) && 0 <= Integer . parseInt ( isbn . substrin
							      								    								  g ( i , i + 9 ) ) && 0 <= Integer . parseInt ( isb
							      								    								  n . substring ( i , i + 9 ) ) && 0 <= Integer . pa
							      								    								  rseInt ( isbn . substring ( i , i + 9 ) ) && 0 <=
							      								    								  Integer . parseInt ( isbn . substring ( i , i + 9
							      								    								  ) ) && 0 <= Integer . parseInt ( isbn . substring
							      								    								  ( i , i + 9 ) ) && 0 <= Integer . parseInt ( isbn
							      								    								  . substring ( i , i + 9 ) ) && 0 <= Integer . pars
							      								    								  eInt ( isbn . substring ( i , i + 9 ) ) && 0 <= In
							      								    								  teger . parseInt ( isbn . substring ( i , i + 9 )
							      								    								  ) && 0 <= Integer . parseInt ( isbn . substring (
							      								    								  i , i + 9 ) ) ;
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  			 ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_FACTORS_NUMBER				      FIND_SUM_EVEN_FACTORS_NUMBER				    FIND_SUM_EVEN_FACTORS_NUMBER				  FIND_SUM_EVEN_FACTORS_NUMBER
--							      --							    --								  --
def sumofFactors ( n ) :				      public static int sumofFactors ( int n ) {		    public static int sumofFactors ( int n ) {			  success : None
    if ( n % 2 != 0 ) :					      	if ( n % 2 != 0 ) return 0 ;				      if ( ( n % 2 != 0 ) ) {					  
	return 0					      	int res = 1 ;						    	return 0 ;						  
    res = 1						      	for ( int i = 2 ;					      }								  
    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :  	i <= Math . sqrt ( n ) ;				      int res = 1 ;						  
	count = 0					      	i ++ ) {						      for ( int i = 2 ;						  
	curr_sum = 1					      	  int count = 0 , curr_sum = 1 ;			      i <= ( ( int ) Math . sqrt ( n ) ) ;			  
	curr_term = 1					      	  int curr_term = 1 ;					      i ++ ) {							  
	while ( n % i == 0 ) :				      	  while ( n % i == 0 ) {				    	int count = 0 ;						  
	    count = count + 1				      	    count ++ ;						    	int currSum = 1 ;					  
	    n = n // i					      	    n = n / i ;						    	int currTerm = 1 ;					  
	    if ( i == 2 and count == 1 ) :		      	    if ( i == 2 && count == 1 ) curr_sum = 0 ;		    	while ( ( n % i ) == 0 ) {				  
		curr_sum = 0				      	    curr_term *= i ;					    	  count = count + 1 ;					  
	    curr_term = curr_term * i			      	    curr_sum += curr_term ;				    	  n = n / i ;						  
	    curr_sum = curr_sum + curr_term		      	  }							    	  if ( ( i == 2 ) && ( count == 1 ) ) {			  
	res = res * curr_sum				      	  res *= curr_sum ;					    	    currSum = 0 ;					  
    if ( n >= 2 ) :					      	}							    	  }							  
	res = res * ( 1 + n )				      	if ( n >= 2 ) res *= ( 1 + n ) ;			    	  currTerm = currTerm * i ;				  
    return res						      	return res ;						    	  currSum = currSum + currTerm ;			  
							      }								    	}							  
							      								    	res = res * currSum ;					  
							      								      }								  
							      								      if ( ( n >= 2 ) ) {					  
							      								    	res = res * ( 1 + n ) ;					  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	      LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	    LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	  LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS
--							      --							    --								  --
def minimizeWithKSwaps ( arr , n , k ) :		      static void minimizeWithKSwaps ( int arr [ ] , int n , int k  public static void minimizeWithKSwaps ( int [ ] arr , int n , script_not_found : None
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	pos = i						      	i < n - 1 && k > 0 ;					      i < n - 1 ;						  
	for j in range ( i + 1 , n ) :			      	++ i ) {						      i ++ ) {							  
	    if ( j - i > k ) :				      	  int pos = i ;						    	int pos = i ;						  
		break					      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
	    if ( arr [ j ] < arr [ pos ] ) :		      	  j < n ;						    	j < n ;							  
		pos = j					      	  ++ j ) {						    	j ++ ) {						  
	for j in range ( pos , i , - 1 ) :		      	    if ( j - i > k ) break ;				    	  if ( ( j - i ) > k ) break ;				  
	    arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ 	    if ( arr [ j ] < arr [ pos ] ) pos = j ;		    	  if ( ( arr [ j ] < arr [ pos ] ) ) pos = j ;		  
	k -= pos - i					      	  }							    	}							  
							      	  int temp ;						    	for ( int j = pos ;					  
							      	  for ( int j = pos ;					    	j > i ;							  
							      	  j > i ;						    	j -- ) arr [ j ] = arr [ j - 1 ] ;			  
							      	  -- j ) {						    	k -= pos - i ;						  
							      	    temp = arr [ j ] ;					      }								  
							      	    arr [ j ] = arr [ j - 1 ] ;				    }								  
							      	    arr [ j - 1 ] = temp ;				    								  
							      	  }							    								  
							      	  k -= pos - i ;					    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_
--							      --							    --								  --
def swapUpperToLower ( arr ) :				      static void swapUpperToLower ( int arr [ ] [ ] ) {	    public static void swapUpperToLower ( int [ ] [ ] arr ) {	  script_not_found : None
    n = 4 ;						      	for ( int i = 0 ;					      int n = 4 ;						  
    for i in range ( 0 , n ) :				      	i < n ;							      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i ++ ) {						      i <= n ;							  
	    temp = arr [ i ] [ j ] ;			      	  for ( int j = i + 1 ;					      i ++ ) {							  
	    arr [ i ] [ j ] = arr [ j ] [ i ] ;		      	  j < n ;						    	for ( int j = i + 1 ;					  
	    arr [ j ] [ i ] = temp ;			      	  j ++ ) {						    	j < n ;							  
    for i in range ( 0 , n ) :				      	    int temp = arr [ i ] [ j ] ;			    	j ++ ) {						  
	for j in range ( 0 , n ) :			      	    arr [ i ] [ j ] = arr [ j ] [ i ] ;			    	  int temp = arr [ i ] [ j ] ;				  
	    print ( arr [ i ] [ j ] , end = " " ) ;	      	    arr [ j ] [ i ] = temp ;				    	  arr [ i ] [ j ] = arr [ j ] [ i ] ;			  
	print ( " " ) ;					      	  }							    	  arr [ j ] [ i ] = temp ;				  
							      	}							    	}							  
							      	for ( int i = 0 ;					      }								  
							      	i < n ;							      for ( int i = 0 ;						  
							      	i ++ ) {						      i <= n ;							  
							      	  for ( int j = 0 ;					      i ++ ) {							  
							      	  j < n ;						    	for ( int j = 0 ;					  
							      	  j ++ ) System . out . print ( arr [ i ] [ j ] + " " ) ;   	j <= n ;						  
							      	  System . out . println ( ) ;				    	j ++ ) {						  
							      	}							    	  System . out . print ( arr [ i ] [ j ] ) ;		  
							      }								    	}							  
							      								    	System . out . println ( "" ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		      CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		    CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		  CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER
--							      --							    --								  --
def checkCorrectOrNot ( s ) :				      static boolean checkCorrectOrNot ( String s ) {		    static boolean checkCorrectOrNot ( String s ) {		  script_not_found : None
    global MAX_CHAR					      	int [ ] count1 = new int [ MAX_CHAR ] ;			      int i ;							  
    count1 = [ 0 ] * MAX_CHAR				      	int [ ] count2 = new int [ MAX_CHAR ] ;			      int [ ] count1 = new int [ MAX_CHAR ] ;			  
    count2 = [ 0 ] * MAX_CHAR				      	int n = s . length ( ) ;				      int [ ] count2 = new int [ MAX_CHAR ] ;			  
    n = len ( s )					      	if ( n == 1 ) return true ;				      int n = s . length ( ) ;					  
    if n == 1 :						      	for ( int i = 0 , j = n - 1 ;				      if ( n == 1 ) return true ;				  
	return true					      	i < j ;							      i = 0 ;							  
    i = 0 j = n - 1					      	i ++ , j -- ) {						      j = n - 1 ;						  
    while ( i < j ) :					      	  count1 [ s . charAt ( i ) - 'a' ] ++ ;		      while ( ( i < j ) ) {					  
	count1 [ ord ( s [ i ] ) - ord ( 'a' ) ] += 1	      	  count2 [ s . charAt ( j ) - 'a' ] ++ ;		    	count1 [ ( int ) s . charAt ( i ) - 'a' ] ++ ;		  
	count2 [ ord ( s [ j ] ) - ord ( 'a' ) ] += 1	      	}							    	count2 [ ( int ) s . charAt ( j ) - 'a' ] ++ ;		  
	i += 1 j -= 1					      	for ( int i = 0 ;					    	i ++ ;							  
    for i in range ( MAX_CHAR ) :			      	i < MAX_CHAR ;						    	j -- ;							  
	if count1 [ i ] != count2 [ i ] :		      	i ++ ) if ( count1 [ i ] != count2 [ i ] ) return false ;     }								  
	    return False				      	return true ;						      for ( i = 0 ;						  
    return True						      }								      i < MAX_CHAR ;						  
							      								      i ++ ) if ( count1 [ i ] != count2 [ i ] ) return false ;	  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM				      FIND_SUBARRAY_WITH_GIVEN_SUM				    FIND_SUBARRAY_WITH_GIVEN_SUM				  FIND_SUBARRAY_WITH_GIVEN_SUM
--							      --							    --								  --
def subArraySum ( arr , n , sum ) :			      int subArraySum ( int arr [ ] , int n , int sum ) {	    public static int subArraySum ( int [ ] arr , int n , int sum success : None
    for i in range ( n ) :				      	int curr_sum , i , j ;					      for ( int i = 0 ;						  
	curr_sum = arr [ i ]				      	for ( i = 0 ;						      i < n ;							  
	j = i + 1					      	i < n ;							      i ++ ) {							  
	while j <= n :					      	i ++ ) {						    	int currSum = arr [ i ] ;				  
	    if curr_sum == sum :			      	  curr_sum = arr [ i ] ;				    	int j = i + 1 ;						  
		print ( "Sum found between" )		      	  for ( j = i + 1 ;					    	while ( j <= n ) {					  
		print ( "indexes %d and %d" % ( i , j - 1 ) ) 	  j <= n ;						    	  if ( currSum == sum ) {				  
		return 1				      	  j ++ ) {						    	    System . out . println ( "Sum found between" ) ;	  
	    if curr_sum > sum or j == n :		      	    if ( curr_sum == sum ) {				    	    System . out . println ( "indexes " + i + " and " + ( 
		break					      	      int p = j - 1 ;					    	    return 1 ;						  
	    curr_sum = curr_sum + arr [ j ]		      	      System . out . println ( "Sum found between indexes " 	  }							  
	    j += 1					      	      return 1 ;					    	  if ( currSum > sum || j == n ) break ;		  
    print ( "No subarray found" )			      	    }							    	  currSum = currSum + arr [ j ] ;			  
    return 0						      	    if ( curr_sum > sum || j == n ) break ;		    	  j ++ ;						  
							      	    curr_sum = curr_sum + arr [ j ] ;			    	}							  
							      	  }							      }								  
							      	}							      System . out . println ( "No subarray found" ) ;		  
							      	System . out . println ( "No subarray found" ) ;	      return 0 ;						  
							      	return 0 ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1
--							      --							    --								  --
def diagonalsquare ( mat , row , column ) :		      static void diagonalsquare ( int mat [ ] [ ] , int row , int  public static void diagonalSquare ( int [ ] [ ] mat , int row script_not_found : None
    print ( "Diagonal one : " , end = "" )		      	System . out . print ( " Diagonal one : " ) ;		      System . out . print ( "Diagonal one : " ) ;		  
    for i in range ( 0 , row ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = ""  	i < row ;						      i <= row ;						  
    print ( "\n\nDiagonal two : " , end = "" )		      	i ++ ) {						      i ++ ) {							  
    for i in range ( 0 , row ) :			      	  System . out . print ( mat [ i ] [ i ] * mat [ i ] [ i ]  	System . out . print ( mat [ i ] [ i ] * mat [ i ] [ i ]  
	print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - 	}							      }								  
							      	System . out . println ( ) ;				      System . out . print ( "\n\nDiagonal two : " ) ;		  
							      	System . out . print ( " Diagonal two : " ) ;		      for ( int i = 0 ;						  
							      	for ( int i = 0 ;					      i <= row ;						  
							      	i < row ;						      i ++ ) {							  
							      	i ++ ) {						    	System . out . print ( mat [ i ] [ row - i - 1 ] * mat [  
							      	  System . out . print ( mat [ i ] [ row - i - 1 ] * mat [    }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE						      PASCAL_TRIANGLE						    PASCAL_TRIANGLE						  PASCAL_TRIANGLE
--							      --							    --								  --
def printPascal ( n : int ) :				      public static void printPascal ( int n ) {		    public static void printPascal ( int n ) {			  script_not_found : None
    arr = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] 	int [ ] [ ] arr = new int [ n ] [ n ] ;			      int [ ] [ ] arr = new int [ n ] [ n ] ;			  
    for line in range ( 0 , n ) :			      	for ( int line = 0 ;					      for ( int x = 0 ;						  
	for i in range ( 0 , line + 1 ) :		      	line < n ;						      x < n ;							  
	    if ( i is 0 or i is line ) :		      	line ++ ) {						      x ++ ) {							  
		arr [ line ] [ i ] = 1			      	  for ( int i = 0 ;					    	for ( int y = 0 ;					  
		print ( arr [ line ] [ i ] , end = "" )	      	  i <= line ;						    	y < n ;							  
	    else :					      	  i ++ ) {						    	y ++ ) {						  
		arr [ line ] [ i ] = ( arr [ line - 1 ] [ i - 	    if ( line == i || i == 0 ) arr [ line ] [ i ] = 1 ;	    	  arr [ y ] [ x ] = 0 ;					  
		print ( arr [ line ] [ i ] , end = "" )	      	    else arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] +  	}							  
	print ( "\n" , end = "" )			      	    System . out . print ( arr [ line ] [ i ] ) ;	      }								  
							      	  }							      for ( int line = 0 ;					  
							      	  System . out . println ( "" ) ;			      line <= n ;						  
							      	}							      line ++ ) {						  
							      }								    	for ( int i = 0 ;					  
							      								    	i <= line ;						  
							      								    	i ++ ) {						  
							      								    	  if ( ( i == 0 ) || ( i == line ) ) {			  
							      								    	    arr [ line ] [ i ] = 1 ;				  
							      								    	    System . out . print ( arr [ line ] [ i ] + " " ) ;	  
							      								    	  }							  
							      								    	  else {						  
							      								    	    arr [ line ] [ i ] = ( arr [ line - 1 ] [ i - 1 ] + a 
							      								    	    System . out . print ( arr [ line ] [ i ] + " " ) ;	  
							      								    	  }							  
							      								    	}							  
							      								    	System . out . print ( "\n" ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM_1				      COUNT_PAIRS_WITH_GIVEN_SUM_1				    COUNT_PAIRS_WITH_GIVEN_SUM_1				  COUNT_PAIRS_WITH_GIVEN_SUM_1
--							      --							    --								  --
def getPairsCount ( arr , n , sum ) :			      static int getPairsCount ( int n , int sum ) {		    public static int getPairsCount ( int [ ] arr , int n , int s script_not_found : None
    m = [ 0 ] * 1000					      	HashMap < Integer , Integer > hm = new HashMap < > ( ) ;      int [ ] m = new int [ 1000 ] ;				  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	m [ arr [ i ] ]					      	i < n ;							      i <= n ;							  
	m [ arr [ i ] ] += 1				      	i ++ ) {						      i ++ ) {							  
    twice_count = 0					      	  if ( ! hm . containsKey ( arr [ i ] ) ) hm . put ( arr [  	m [ arr [ i ] ] = 0 ;					  
    for i in range ( 0 , n ) :				      	  hm . put ( arr [ i ] , hm . get ( arr [ i ] ) + 1 ) ;	    	m [ arr [ i ] ] ++ ;					  
	twice_count += m [ sum - arr [ i ] ]		      	}							      }								  
	if ( sum - arr [ i ] == arr [ i ] ) :		      	int twice_count = 0 ;					      int twiceCount = 0 ;					  
	    twice_count -= 1				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    return int ( twice_count / 2 )			      	i < n ;							      i <= n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  if ( hm . get ( sum - arr [ i ] ) != null ) twice_count + 	twiceCount += m [ sum - arr [ i ] ] ;			  
							      	  if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ;	    	if ( ( sum - arr [ i ] ) == arr [ i ] ) {		  
							      	}							    	  twiceCount -- ;					  
							      	return twice_count / 2 ;				    	}							  
							      }								      }								  
							      								      return ( int ) ( twiceCount / 2 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN
--							      --							    --								  --
def findMinInsertions ( str , l , h ) :			      static int findMinInsertions ( char str [ ] , int l , int h ) static int findMinInsertions ( String str , int l , int h ) { error : DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTI
    if ( l > h ) :					      	if ( l > h ) return Integer . MAX_VALUE ;		      if ( ( l > h ) ) {					  ONS_TO_FORM_A_PALINDROME.java:77: error: incompati
	return sys.maxsize				      	if ( l == h ) return 0 ;				    	return Integer . MAX_VALUE ;				  ble types: char[] cannot be converted to String
    if ( l == h ) :					      	if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1   }								  	if(f_filled(param0.get(i),param1.get(i),para
	return 0					      	return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str   if ( ( l == h ) ) {					  m2.get(i)) == f_gold(param0.get(i),param1.get(i),p
    if ( l == h - 1 ) :					      }								    	return 0 ;						  aram2.get(i)))			       ^ Not
	return 0 if ( str [ l ] == str [ h ] ) else 1	      								      }								  e: Some messages have been simplified; recompile w
    if ( str [ l ] == str [ h ] ) :			      								      if ( ( l == h - 1 ) ) {					  ith -Xdiags:verbose to get full output 1 error
	return findMinInsertions ( str , l + 1 , h - 1 )      								    	return ( str . charAt ( l ) == str . charAt ( h ) ) ? 0 : 
    else :						      								      }								  
	return ( min ( findMinInsertions ( str , l , h - 1 )  								      if ( ( str . charAt ( l ) == str . charAt ( h ) ) ) {	  
							      								    	return findMinInsertions ( str , l + 1 , h - 1 ) ;	  
							      								      }								  
							      								      else {							  
							      								    	return ( Math . min ( findMinInsertions ( str , l , h - 1 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1		    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1
--							      --							    --								  --
def countRotations ( arr , low , high ) :		      static int countRotations ( int arr [ ] , int low , int high  static int countRotations ( int [ ] arr , int low , int high  success : None
    if ( high < low ) :					      	if ( high < low ) return 0 ;				      if ( ( high < low ) ) {					  
	return 0					      	if ( high == low ) return low ;				    	return 0 ;						  
    if ( high == low ) :				      	int mid = low + ( high - low ) / 2 ;			      }								  
	return low					      	if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return (   if ( ( high == low ) ) {					  
    mid = low + ( high - low ) / 2			      	if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mi 	return low ;						  
    mid = int ( mid )					      	if ( arr [ high ] > arr [ mid ] ) return countRotations ( a   }								  
    if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) :     	return countRotations ( arr , mid + 1 , high ) ;	      int mid = low + ( high - low ) / 2 ;			  
	return ( mid + 1 )				      }								      int i = ( int ) mid ;					  
    if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) :      								      if ( ( mid < high ) && ( arr [ mid + 1 ] < arr [ mid ] ) )  
	return mid					      								    	return ( mid + 1 ) ;					  
    if ( arr [ high ] > arr [ mid ] ) :			      								      }								  
	return countRotations ( arr , low , mid - 1 )	      								      if ( ( mid > low ) && ( arr [ mid ] < arr [ mid - 1 ] ) ) { 
    return countRotations ( arr , mid + 1 , high )	      								    	return mid ;						  
							      								      }								  
							      								      if ( ( arr [ high ] > arr [ mid ] ) ) {			  
							      								    	return countRotations ( arr , low , mid - 1 ) ;		  
							      								      }								  
							      								      return countRotations ( arr , mid + 1 , high ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1		      FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1			    FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1			  FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1
--							      --							    --								  --
def getMinNumberForPattern ( seq ) :			      static String getMinNumberForPattern ( String seq ) {	    static String getMinNumberForPattern ( String seq ) {	  error : FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.
    n = len ( seq )					      	int n = seq . length ( ) ;				      int n = seq . length ( ) ;				  java:49: error: incompatible types: int cannot be
    if ( n >= 9 ) :					      	if ( n >= 9 ) return "-1" ;				      if ( ( n >= 9 ) ) {					  converted to String	      result [ j + 1 ] = Int
	return "-1"					      	char result [ ] = new char [ n + 1 ] ;			    	return "-1" ;						  eger . parseInt ( "0" + count ++ ) ;
    result = [ None ] * ( n + 1 )			      	int count = 1 ;						      }								  				   ^ 1 error
    count = 1						      	for ( int i = 0 ;					      String [ ] result = new String [ n + 1 ] ;		  
    for i in range ( n + 1 ) :				      	i <= n ;						      result [ 0 ] = null ;					  
	if ( i == n or seq [ i ] == 'I' ) :		      	i ++ ) {						      int count = 1 ;						  
	    for j in range ( i - 1 , - 2 , - 1 ) :	      	  if ( i == n || seq . charAt ( i ) == 'I' ) {		      for ( int i = 0 ;						  
		result [ j + 1 ] = int ( '0' + str ( count )  	    for ( int j = i - 1 ;				      i < n + 1 ;						  
		count += 1				      	    j >= - 1 ;						      i ++ ) {							  
		if ( j >= 0 and seq [ j ] == 'I' ) :	      	    j -- ) {						    	if ( ( i == n ) || seq . charAt ( i ) == 'I' ) {	  
		    break				      	      result [ j + 1 ] = ( char ) ( ( int ) '0' + count ++  	  for ( int j = i - 1 ;					  
    return result					      	      if ( j >= 0 && seq . charAt ( j ) == 'I' ) break ;    	  j >= 2 ;						  
							      	    }							    	  j -- ) {						  
							      	  }							    	    result [ j + 1 ] = Integer . parseInt ( "0" + count + 
							      	}							    	    if ( ( j >= 0 ) && seq . charAt ( j ) == 'I' ) {	  
							      	return new String ( result ) ;				    	      break ;						  
							      }								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_
--							      --							    --								  --
def getMinSquares ( n ) :				      static int getMinSquares ( int n ) {			    static int getMinSquares ( int n ) {			  error : Exception in thread "main" java.lang.Array
    dp = [ 0 , 1 , 2 , 3 ]				      	if ( n <= 3 ) return n ;				      int [ ] dp = {						  IndexOutOfBoundsException: Index 4 out of bounds f
    for i in range ( 4 , n + 1 ) :			      	int dp [ ] = new int [ n + 1 ] ;			    	0 , 1 , 2 , 3 }						  or length 4 	at MINIMUM_NUMBER_OF_SQUARES_WHOSE_SU
	dp.append ( i )					      	dp [ 0 ] = 0 ;						    	;							  M_EQUALS_TO_GIVEN_NUMBER_N_1.f_filled(MINIMUM_NUMB
	for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1  	dp [ 1 ] = 1 ;						    	for ( int i = 4 ;					  ER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1
	    temp = x * x ;				      	dp [ 2 ] = 2 ;						    	i <= n ;						  .java:44) 	at MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_
	    if temp > i :				      	dp [ 3 ] = 3 ;						    	i ++ ) {						  EQUALS_TO_GIVEN_NUMBER_N_1.main(MINIMUM_NUMBER_OF_
		break					      	for ( int i = 4 ;					    	  dp [ i ] = i ;					  SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_1.java:
	    else :					      	i <= n ;						    	  for ( int x = 1 ;					  72)
		dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp 	i ++ ) {						    	  x <= ( int ) Math . ceil ( Math . sqrt ( i ) ) ;	  
    return dp [ n ]					      	  dp [ i ] = i ;					    	  x ++ ) {						  
							      	  for ( int x = 1 ;					    	    int temp = x * x ;					  
							      	  x <= Math . ceil ( Math . sqrt ( i ) ) ;		    	    if ( temp > i ) break ;				  
							      	  x ++ ) {						    	    else dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i -  
							      	    int temp = x * x ;					    	  }							  
							      	    if ( temp > i ) break ;				    	}							  
							      	    else dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i - te 	return dp [ n ] ;					  
							      	  }							      }								  
							      	}							    								  
							      	int res = dp [ n ] ;					    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY	      FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY	    FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY		  FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY
--							      --							    --								  --
def findMin ( arr , low , high ) :			      static int findMin ( int arr [ ] , int low , int high ) {	    static int findMin ( int [ ] arr , int low , int high ) {	  success : None
    if high < low :					      	if ( high < low ) return arr [ 0 ] ;			      if ( high < low ) {					  
	return arr [ 0 ]				      	if ( high == low ) return arr [ low ] ;			    	return arr [ 0 ] ;					  
    if high == low :					      	int mid = low + ( high - low ) / 2 ;			      }								  
	return arr [ low ]				      	if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return a   if ( high == low ) {					  
    mid = int ( ( low + high ) / 2 )			      	if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return ar 	return arr [ low ] ;					  
    if mid < high and arr [ mid + 1 ] < arr [ mid ] :	      	if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , lo   }								  
	return arr [ mid + 1 ]				      	return findMin ( arr , mid + 1 , high ) ;		      int mid = ( int ) ( ( low + high ) / 2 ) ;		  
    if mid > low and arr [ mid ] < arr [ mid - 1 ] :	      }								      if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) {	  
	return arr [ mid ]				      								    	return arr [ mid + 1 ] ;				  
    if arr [ high ] > arr [ mid ] :			      								      }								  
	return findMin ( arr , low , mid - 1 )		      								      if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) {	  
    return findMin ( arr , mid + 1 , high )		      								    	return arr [ mid ] ;					  
							      								      }								  
							      								      if ( arr [ high ] > arr [ mid ] ) {			  
							      								    	return findMin ( arr , low , mid - 1 ) ;		  
							      								      }								  
							      								      return findMin ( arr , mid + 1 , high ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY			      FREQUENCY_ELEMENT_UNSORTED_ARRAY				    FREQUENCY_ELEMENT_UNSORTED_ARRAY				  FREQUENCY_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
def countFreq ( a , n ) :				      static void countFreq ( int [ ] a , int n ) {		    static void countFreq ( int [ ] a , int n ) {		  script_not_found : None
    hm = { }						      	HashMap < Integer , Integer > hm = new HashMap < > ( ) ;      HashMap < String , Integer > hm = new HashMap < > ( ) ;	  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1	      	i < n ;							      i <= n ;							  
    st = set ( )					      	i ++ ) hm . put ( a [ i ] , hm . get ( a [ i ] ) == null ?    i ++ ) {							  
    for x in hm :					      	SortedMap < Integer , Integer > st = new TreeMap < > ( ) ;  	hm . put ( a [ i ] , hm . getOrDefault ( a [ i ] , 0 ) +  
	st.add ( ( x , hm [ x ] ) )			      	for ( HashMap . Entry < Integer , Integer > x : hm . entryS   }								  
    cumul = 0						      	  st . put ( x . getKey ( ) , x . getValue ( ) ) ;	      Set < Pair < String , Integer >> st = new HashSet < > ( ) ; 
    for x in sorted ( st ) :				      	}							      for ( String s : hm . keySet ( ) ) {			  
	cumul += x [ 1 ]				      	int cumul = 0 ;						    	st . add ( new Pair < > ( s , hm . get ( s ) ) ) ;	  
	print ( x [ 0 ] , cumul )			      	for ( SortedMap . Entry < Integer , Integer > x : st . entr   }								  
							      	  cumul += x . getValue ( ) ;				      int cumul = 0 ;						  
							      	  System . out . println ( x . getKey ( ) + " " + cumul ) ;   for ( Pair < String , Integer > x : new TreeSet < > ( st )  
							      	}							    	cumul += x . getValue ( 1 ) ;				  
							      }								    	System . out . println ( x . getKey ( ) + " " + cumul ) ; 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY		      PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY		    PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY		  PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY
--							      --							    --								  --
def printPairs ( arr , n ) :				      public static void printPairs ( int arr [ ] , int n ) {	    static void printPairs ( int [ ] arr , int n ) {		  script_not_found : None
    v = [ ]						      	Vector < Integer > v = new Vector < Integer > ( ) ;	      ArrayList < Integer > v = new ArrayList < > ( ) ;		  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i < n ;							  
	    if ( abs ( arr [ i ] ) == abs ( arr [ j ] ) ) :   	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		v.append ( abs ( arr [ i ] ) )		      	j < n ;							    	for ( int j = i + 1 ;					  
    if ( len ( v ) == 0 ) :				      	j ++ ) if ( Math . abs ( arr [ i ] ) == Math . abs ( arr [  	j < n ;							  
	return ;					      	if ( v . size ( ) == 0 ) return ;			    	j ++ ) {						  
    v.sort ( )						      	Collections . sort ( v ) ;				    	  if ( ( Math . abs ( arr [ i ] ) ) == Math . abs ( arr [ 
    for i in range ( len ( v ) ) :			      	for ( int i = 0 ;					    	    v . add ( Math . abs ( arr [ i ] ) ) ;		  
	print ( - v [ i ] , "" , v [ i ] , end = " " )	      	i < v . size ( ) ;					    	  }							  
							      	i ++ ) System . out . print ( - v . get ( i ) + " " + v . g 	}							  
							      }								      }								  
							      								      if ( ( v . size ( ) == 0 ) ) {				  
							      								    	return ;						  
							      								      }								  
							      								      Collections . sort ( v ) ;				  
							      								      for ( int i = 0 ;						  
							      								      i < v . size ( ) ;					  
							      								      i ++ ) {							  
							      								    	System . out . println ( - v . get ( i ) + "" + v . get ( 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1
--							      --							    --								  --
def numberOfPaths ( m , n ) :				      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  error : Exception in thread "main" java.lang.Array
    count = [ [ 0 for x in range ( m ) ] for y in range ( n ) 	int count [ ] [ ] = new int [ m ] [ n ] ;		      int [ ] [ ] count = new int [ m ] [ n ] ;			  IndexOutOfBoundsException: Index -1 out of bounds
    for i in range ( m ) :				      	for ( int i = 0 ;					      for ( int x = 0 ;						  for length 16 	at COUNT_POSSIBLE_PATHS_TOP_LEFT_BO
	count [ i ] [ 0 ] = 1 ;				      	i < m ;							      x < m ;							  TTOM_RIGHT_NXM_MATRIX_1.f_filled(COUNT_POSSIBLE_PA
    for j in range ( n ) :				      	i ++ ) count [ i ] [ 0 ] = 1 ;				      x ++ ) for ( int y = 0 ;					  THS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1.java:49) 	a
	count [ 0 ] [ j ] = 1 ;				      	for ( int j = 0 ;					      y < n ;							  t COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_M
    for i in range ( 1 , m ) :				      	j < n ;							      y ++ ) count [ x ] [ y ] = 0 ;				  ATRIX_1.main(COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_
	for j in range ( n ) :				      	j ++ ) count [ 0 ] [ j ] = 1 ;				      for ( int i = 0 ;						  RIGHT_NXM_MATRIX_1.java:80)
	    count [ i ] [ j ] = count [ i - 1 ] [ j ] + count 	for ( int i = 1 ;					      i < m ;							  
    return count [ m - 1 ] [ n - 1 ]			      	i < m ;							      i ++ ) count [ i ] [ 0 ] = 1 ;				  
							      	i ++ ) {						      for ( int j = 0 ;						  
							      	  for ( int j = 1 ;					      j < n ;							  
							      	  j < n ;						      j ++ ) count [ 0 ] [ j ] = 1 ;				  
							      	  j ++ ) count [ i ] [ j ] = count [ i - 1 ] [ j ] + count    for ( int i = 1 ;						  
							      	}							      i < m ;							  
							      	return count [ m - 1 ] [ n - 1 ] ;			      i ++ ) for ( int j = 0 ;					  
							      }								      j < n ;							  
							      								      j ++ ) count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [  
							      								      return count [ m - 1 ] [ n - 1 ] ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE			      MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE			    MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE			  MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr , n ) :					      static int lis ( int [ ] arr , int n ) {			    public static int lis ( int [ ] arr , int n ) {		  error : MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE.jav
    mpis = [ 0 ] * ( n )				      	int [ ] mpis = new int [ n ] ;				      int [ ] mpis = new int [ n ] ;				  a:53: error: no suitable method found for max(int[
    for i in range ( n ) :				      	int max = Integer . MIN_VALUE ;				      for ( int i = 0 ;						  ],int)   return Math . max ( mpis , 0 ) ;
	mpis [ i ] = arr [ i ]				      	for ( int i = 0 ;					      i < n ;							  	^     method Math.max(int,int) is not applic
    for i in range ( 1 , n ) :				      	i < n ;							      i ++ ) {							  able	     (argument mismatch; int[] cannot be con
	for j in range ( i ) :				      	i ++ ) mpis [ i ] = arr [ i ] ;				    	mpis [ i ] = arr [ i ] ;				  verted to int)     method Math.max(long,long) is n
	    if ( arr [ i ] > arr [ j ] and mpis [ i ] < ( mpi 	for ( int i = 1 ;					      }								  ot applicable	      (argument mismatch; int[] cann
		mpis [ i ] = mpis [ j ] * arr [ i ]	      	i < n ;							      for ( int i = 1 ;						  ot be converted to long)     method Math.max(float
    return max ( mpis )					      	i ++ ) for ( int j = 0 ;				      i < n ;							  ,float) is not applicable	  (argument mismatch
							      	j < i ;							      i ++ ) {							  ; int[] cannot be converted to float)	    method M
							      	j ++ ) if ( arr [ i ] > arr [ j ] && mpis [ i ] < ( mpis [  	for ( int j = 0 ;					  ath.max(double,double) is not applicable	 (ar
							      	for ( int k = 0 ;					    	j < i ;							  gument mismatch; int[] cannot be converted to doub
							      	k < mpis . length ;					    	j ++ ) {						  le) 1 error
							      	k ++ ) {						    	  if ( ( arr [ i ] > arr [ j ] ) && mpis [ i ] < ( mpis [ 
							      	  if ( mpis [ k ] > max ) {				    	    mpis [ i ] = mpis [ j ] * arr [ i ] ;		  
							      	    max = mpis [ k ] ;					    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return max ;						      return Math . max ( mpis , 0 ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INSERTIONS_SORT_ARRAY				      MINIMUM_INSERTIONS_SORT_ARRAY				    MINIMUM_INSERTIONS_SORT_ARRAY				  MINIMUM_INSERTIONS_SORT_ARRAY
--							      --							    --								  --
def minInsertionStepToSortArray ( arr , N ) :		      static int minInsertionStepToSortArray ( int arr [ ] , int N  public static int minInsertionStepToSortArray ( int [ ] arr , success : None
    lis = [ 0 ] * N					      	int [ ] lis = new int [ N ] ;				      int [ ] lis = new int [ N ] ;				  
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	lis [ i ] = 1					      	i < N ;							      i < N ;							  
    for i in range ( 1 , N ) :				      	i ++ ) lis [ i ] = 1 ;					      i ++ ) lis [ i ] = 1 ;					  
	for j in range ( i ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	    if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ 	i < N ;							      i < N ;							  
		lis [ i ] = lis [ j ] + 1		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
    max = 0						      	j < i ;							    	for ( int j = 0 ;					  
    for i in range ( N ) :				      	j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] 	j < i ;							  
	if ( max < lis [ i ] ) :			      	int max = 0 ;						    	j ++ ) {						  
	    max = lis [ i ]				      	for ( int i = 0 ;					    	  if ( ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ]  
    return ( N - max )					      	i < N ;							    	}							  
							      	i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;		      }								  
							      	return ( N - max ) ;					      int max = 0 ;						  
							      }								      for ( int i = 0 ;						  
							      								      i < N ;							  
							      								      i ++ ) if ( ( max < lis [ i ] ) ) max = lis [ i ] ;	  
							      								      return ( N - max ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM	  REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM
--							      --							    --								  --
def remAnagram ( str1 , str2 ) :			      static int remAnagram ( String str1 , String str2 ) {	    public static int remAnagram ( String str1 , String str2 ) {  script_not_found : None
    count1 = [ 0 ] * CHARS				      	int count1 [ ] = new int [ 26 ] ;			      int [ ] count1 = new int [ str1 . length ( ) ] ;		  
    count2 = [ 0 ] * CHARS				      	int count2 [ ] = new int [ 26 ] ;			      int [ ] count2 = new int [ str2 . length ( ) ] ;		  
    i = 0						      	for ( int i = 0 ;					      int i = 0 ;						  
    while i < len ( str1 ) :				      	i < str1 . length ( ) ;					      while ( i < str1 . length ( ) ) {				  
	count1 [ ord ( str1 [ i ] ) - ord ( 'a' ) ] += 1      	i ++ ) count1 [ str1 . charAt ( i ) - 'a' ] ++ ;	    	count1 [ ( int ) str1 . charAt ( i ) - 'a' ] ++ ;	  
	i += 1						      	for ( int i = 0 ;					    	i ++ ;							  
    i = 0						      	i < str2 . length ( ) ;					      }								  
    while i < len ( str2 ) :				      	i ++ ) count2 [ str2 . charAt ( i ) - 'a' ] ++ ;	      i = 0 ;							  
	count2 [ ord ( str2 [ i ] ) - ord ( 'a' ) ] += 1      	int result = 0 ;					      while ( i < str2 . length ( ) ) {				  
	i += 1						      	for ( int i = 0 ;					    	count2 [ ( int ) str2 . charAt ( i ) - 'a' ] ++ ;	  
    result = 0						      	i < 26 ;						    	i ++ ;							  
    for i in range ( 26 ) :				      	i ++ ) result += Math . abs ( count1 [ i ] - count2 [ i ] )   }								  
	result += abs ( count1 [ i ] - count2 [ i ] )	      	return result ;						      int result = 0 ;						  
    return result					      }								      for ( i = 0 ;						  
							      								      i < 26 ;							  
							      								      i ++ ) result += Math . abs ( count1 [ i ] - count2 [ i ] ) 
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	      GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	    GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	  GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE
--							      --							    --								  --
def printGrouped ( string ) :				      static void printGrouped ( String str ) {			    static void printGrouped ( String string ) {		  script_not_found : None
    n = len ( string )					      	int n = str . length ( ) ;				      int n = string . length ( ) ;				  
    count = [ 0 ] * MAX_CHAR				      	int count [ ] = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ MAX_CHAR ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count [ ord ( string [ i ] ) - ord ( "a" ) ] += 1     	i < n ;							      i < n ;							  
    for i in range ( n ) :				      	i ++ ) count [ str . charAt ( i ) - 'a' ] ++ ;		      i ++ ) {							  
	while count [ ord ( string [ i ] ) - ord ( "a" ) ] :  	for ( int i = 0 ;					    	count [ ( int ) string . charAt ( i ) - 'a' ] ++ ;	  
	    print ( string [ i ] , end = "" )		      	i < n ;							      }								  
	    count [ ord ( string [ i ] ) - ord ( "a" ) ] -= 1 	i ++ ) {						      for ( int i = 0 ;						  
	count [ ord ( string [ i ] ) - ord ( "a" ) ] = 0      	  while ( count [ str . charAt ( i ) - 'a' ] != 0 ) {	      i < n ;							  
							      	    System . out . print ( str . charAt ( i ) ) ;	      i ++ ) {							  
							      	    count [ str . charAt ( i ) - 'a' ] -- ;		    	while ( count [ ( int ) string . charAt ( i ) - 'a' ] --  
							      	  }							    	  System . out . print ( string . charAt ( i ) + " " ) ;  
							      	  count [ str . charAt ( i ) - 'a' ] = 0 ;		    	  count [ ( int ) string . charAt ( i ) - 'a' ] -- ;	  
							      	}							    	}							  
							      }								    	count [ ( int ) string . charAt ( i ) - 'a' ] = 0 ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
A_PRODUCT_ARRAY_PUZZLE_1				      A_PRODUCT_ARRAY_PUZZLE_1					    A_PRODUCT_ARRAY_PUZZLE_1					  A_PRODUCT_ARRAY_PUZZLE_1
--							      --							    --								  --
def productArray ( arr , n ) :				      void productArray ( int arr [ ] , int n ) {		    static int productArray ( int [ ] arr , int n ) {		  script_not_found : None
    if n == 1 :						      	if ( n == 1 ) {						      if ( n == 1 ) {						  
	print ( 0 )					      	  System . out . print ( "0" ) ;			    	System . out . println ( 0 ) ;				  
	return						      	  return ;						    	return 0 ;						  
    i , temp = 1 , 1					      	}							      }								  
    prod = [ 1 for i in range ( n ) ]			      	int i , temp = 1 ;					      int i , temp = 1 , prod = 1 ;				  
    for i in range ( n ) :				      	int prod [ ] = new int [ n ] ;				      prod = new int [ n ] ;					  
	prod [ i ] = temp				      	for ( int j = 0 ;					      for ( i = 0 ;						  
	temp *= arr [ i ]				      	j < n ;							      i < n ;							  
    temp = 1						      	j ++ ) prod [ j ] = 1 ;					      i ++ ) {							  
    for i in range ( n - 1 , - 1 , - 1 ) :		      	for ( i = 0 ;						    	prod [ i ] = 1 ;					  
	prod [ i ] *= temp				      	i < n ;							      }								  
	temp *= arr [ i ]				      	i ++ ) {						      for ( i = 0 ;						  
    for i in range ( n ) :				      	  prod [ i ] = temp ;					      i < n ;							  
	print ( prod [ i ] , end = " " )		      	  temp *= arr [ i ] ;					      i ++ ) {							  
    return						      	}							    	prod [ i ] = temp ;					  
							      	temp = 1 ;						    	temp *= arr [ i ] ;					  
							      	for ( i = n - 1 ;					      }								  
							      	i >= 0 ;						      temp = 1 ;						  
							      	i -- ) {						      for ( i = n - 1 ;						  
							      	  prod [ i ] *= temp ;					      i >= 0 ;							  
							      	  temp *= arr [ i ] ;					      i -- ) {							  
							      	}							    	prod [ i ] *= temp ;					  
							      	for ( i = 0 ;						    	temp *= arr [ i ] ;					  
							      	i < n ;							      }								  
							      	i ++ ) System . out . print ( prod [ i ] + " " ) ;	      for ( i = 0 ;						  
							      	return ;						      i < n ;							  
							      }								      i ++ ) {							  
							      								    	System . out . print ( prod [ i ] + " " ) ;		  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STEINS_ALGORITHM_FOR_FINDING_GCD			      STEINS_ALGORITHM_FOR_FINDING_GCD				    STEINS_ALGORITHM_FOR_FINDING_GCD				  STEINS_ALGORITHM_FOR_FINDING_GCD
--							      --							    --								  --
def gcd ( a , b ) :					      static int gcd ( int a , int b ) {			    public static int gcd ( int a , int b ) {			  failure : #Results:9, 10
    if ( a == 0 ) :					      	if ( a == 0 ) return b ;				      if ( ( a == 0 ) ) {					  
	return b					      	if ( b == 0 ) return a ;				    	return b ;						  
    if ( b == 0 ) :					      	int k ;							      }								  
	return a					      	for ( k = 0 ;						      if ( ( b == 0 ) ) {					  
    k = 0						      	( ( a | b ) & 1 ) == 0 ;				    	return a ;						  
    while ( ( ( a | b ) & 1 ) == 0 ) :			      	++ k ) {						      }								  
	a = a >> 1					      	  a >>= 1 ;						      int k = 0 ;						  
	b = b >> 1					      	  b >>= 1 ;						      while ( ( ( a = a ) | ( b = b ) ) == 0 ) {		  
	k = k + 1					      	}							    	a = a >> 1 ;						  
    while ( ( a & 1 ) == 0 ) :				      	while ( ( a & 1 ) == 0 ) a >>= 1 ;			    	b = b >> 1 ;						  
	a = a >> 1					      	do {							    	k = k + 1 ;						  
    while ( b != 0 ) :					      	  while ( ( b & 1 ) == 0 ) b >>= 1 ;			      }								  
	while ( ( b & 1 ) == 0 ) :			      	  if ( a > b ) {					      while ( ( a & 1 ) == 0 ) {				  
	    b = b >> 1					      	    int temp = a ;					    	a = a >> 1 ;						  
	if ( a > b ) :					      	    a = b ;						      }								  
	    temp = a					      	    b = temp ;						      while ( ( b != 0 ) ) {					  
	    a = b					      	  }							    	while ( ( b & 1 ) == 0 ) {				  
	    b = temp					      	  b = ( b - a ) ;					    	  b = b >> 1 ;						  
	b = ( b - a )					      	}							    	}							  
    return ( a << k )					      	while ( b != 0 ) ;					    	if ( ( a > b ) ) {					  
							      	return a << k ;						    	  int temp = a ;					  
							      }								    	  a = b ;						  
							      								    	  b = temp ;						  
							      								    	}							  
							      								    	b = ( b - a ) ;						  
							      								      }								  
							      								      return ( a << k ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1		      COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1		    COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1		  COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1
--							      --							    --								  --
def countDecodingDP ( digits , n ) :			      static int countDecodingDP ( char digits [ ] , int n ) {	    public static int countDecodingDP ( String digits , int n ) { error : COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUE
    count = [ 0 ] * ( n + 1 )				      	int count [ ] = new int [ n + 1 ] ;			      int [ ] count = new int [ n + 1 ] ;			  NCE_1.java:70: error: incompatible types: char[] c
    count [ 0 ] = 1					      	count [ 0 ] = 1 ;					      count [ 0 ] = 1 ;						  annot be converted to String	       if(f_filled(p
    count [ 1 ] = 1					      	count [ 1 ] = 1 ;					      count [ 1 ] = 1 ;						  aram0.get(i),param1.get(i)) == f_gold(param0.get(i
    for i in range ( 2 , n + 1 ) :			      	if ( digits [ 0 ] == '0' ) return 0 ;			      for ( int i = 2 ;						  ),param1.get(i)))				  ^
	count [ i ] = 0					      	for ( int i = 2 ;					      i <= n ;							  Note: Some messages have been simplified; recompil
	if ( digits [ i - 1 ] > '0' ) :			      	i <= n ;						      i ++ ) {							  e with -Xdiags:verbose to get full output 1 error
	    count [ i ] = count [ i - 1 ]		      	i ++ ) {						    	count [ i ] = 0 ;					  
	if ( digits [ i - 2 ] == '1' or ( digits [ i - 2 ] == 	  count [ i ] = 0 ;					    	if ( ( digits . charAt ( i - 1 ) ) > '0' ) count [ i ] =  
	    count [ i ] += count [ i - 2 ]		      	  if ( digits [ i - 1 ] > '0' ) count [ i ] = count [ i - 1 	if ( ( digits . charAt ( i - 2 ) == '1' ) || ( digits . c 
    return count [ n ]					      	  if ( digits [ i - 2 ] == '1' || ( digits [ i - 2 ] == '2'   }								  
							      	}							      return count [ n ] ;					  
							      	return count [ n ] ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			      DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			    DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			  DIVIDE_LARGE_NUMBER_REPRESENTED_STRING
--							      --							    --								  --
def longDivision ( number , divisor ) :			      static String longDivision ( String number , int divisor ) {  public static String longDivision ( String number , int divis script_not_found : None
    ans = ""						      	String ans = "" ;					      String ans = "" ;						  
    idx = 0						      	int idx = 0 ;						      int idx = 0 ;						  
    temp = ord ( number [ idx ] ) - ord ( '0' )		      	char [ ] num = number . toCharArray ( ) ;		      int temp = ( int ) number . charAt ( idx ) - '0' ;	  
    while ( temp < divisor ) :				      	int temp = num [ idx ] - '0' ;				      while ( ( temp < divisor ) ) {				  
	temp = ( temp * 10 + ord ( number [ idx + 1 ] ) - ord 	while ( temp < divisor ) temp = temp * 10 + ( num [ ++ idx  	temp = ( temp * 10 + ( int ) number . charAt ( idx + 1 )  
	idx += 1					      	idx += 1 ;						    	idx ++ ;						  
    idx += 1						      	while ( num . length > idx ) {				      }								  
    while ( ( len ( number ) ) > idx ) :		      	  ans += ( temp / divisor ) ;				      idx ++ ;							  
	ans += chr ( math.floor ( temp // divisor ) + ord ( ' 	  temp = ( temp % divisor ) * 10 + num [ idx ++ ] - '0' ;     while ( ( ( String ) number ) . length ( ) > idx ) {	  
	temp = ( ( temp % divisor ) * 10 + ord ( number [ idx 	}							    	ans += ( char ) ( Math . floor ( temp / divisor ) + '0' ) 
	idx += 1					      	if ( ans . length ( ) == 0 ) return "0" ;		    	temp = ( ( temp % divisor ) * 10 + ( int ) number . charA 
    ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) 	return ans ;						    	idx ++ ;						  
    if ( len ( ans ) == 0 ) :				      }								      }								  
	return "0"					      								      ans += ( char ) ( Math . floor ( temp / divisor ) + '0' ) ; 
    return ans						      								      if ( ( ans . length ( ) == 0 ) ) {			  
							      								    	return "0" ;						  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT
--							      --							    --								  --
def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :	      static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 static boolean findTriplet ( int [ ] a1 , int [ ] a2 , int [  success : None
    s = set ( )						      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  
    for i in range ( n1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	s.add ( a1 [ i ] )				      	i < n1 ;						      i < n1 ;							  
    for i in range ( n2 ) :				      	i ++ ) {						      i ++ ) {							  
	for j in range ( n3 ) :				      	  s . add ( a1 [ i ] ) ;				    	s . add ( a1 [ i ] ) ;					  
	    if sum - a2 [ i ] - a3 [ j ] in s :		      	}							      }								  
		return True				      	ArrayList < Integer > al = new ArrayList < > ( s ) ;	      for ( int i = 0 ;						  
    return False					      	for ( int i = 0 ;					      i < n2 ;							  
							      	i < n2 ;						      i ++ ) {							  
							      	i ++ ) {						    	for ( int j = 0 ;					  
							      	  for ( int j = 0 ;					    	j < n3 ;						  
							      	  j < n3 ;						    	j ++ ) {						  
							      	  j ++ ) {						    	  if ( s . contains ( sum - a2 [ i ] - a3 [ j ] ) ) {	  
							      	    if ( al . contains ( sum - a2 [ i ] - a3 [ j ] ) & al . 	    return true ;					  
							      	      return true ;					    	  }							  
							      	    }							    	}							  
							      	  }							      }								  
							      	}							      return false ;						  
							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERPOLATION_SEARCH					      INTERPOLATION_SEARCH					    INTERPOLATION_SEARCH					  INTERPOLATION_SEARCH
--							      --							    --								  --
def interpolationSearch ( arr , n , x ) :		      static int interpolationSearch ( int x ) {		    public static int interpolationSearch ( int [ ] arr , int n , script_not_found : None
    lo = 0						      	int lo = 0 , hi = ( arr . length - 1 ) ;		      int lo = 0 ;						  
    hi = ( n - 1 )					      	while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {    int hi = ( n - 1 ) ;					  
    while lo <= hi and x >= arr [ lo ] and x <= arr [ hi ] :  	  if ( lo == hi ) {					      while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {  
	if lo == hi :					      	    if ( arr [ lo ] == x ) return lo ;			    	if ( lo == hi ) {					  
	    if arr [ lo ] == x :			      	    return - 1 ;					    	  if ( arr [ lo ] == x ) {				  
		return lo ;				      	  }							    	    return lo ;						  
	    return - 1 ;				      	  int pos = lo + ( ( ( hi - lo ) / ( arr [ hi ] - arr [ lo  	  }							  
	pos = lo + int ( ( ( float ( hi - lo ) / ( arr [ hi ] 	  if ( arr [ pos ] == x ) return pos ;			    	  return - 1 ;						  
	if arr [ pos ] == x :				      	  if ( arr [ pos ] < x ) lo = pos + 1 ;			    	}							  
	    return pos					      	  else hi = pos - 1 ;					    	int pos = lo + ( int ) ( ( ( double ) ( hi - lo ) / ( arr 
	if arr [ pos ] < x :				      	}							    	if ( arr [ pos ] == x ) {				  
	    lo = pos + 1 ;				      	return - 1 ;						    	  return pos ;						  
	else :						      }								    	}							  
	    hi = pos - 1 ;				      								    	if ( arr [ pos ] < x ) {				  
    return - 1						      								    	  lo = pos + 1 ;					  
							      								    	}							  
							      								    	else {							  
							      								    	  hi = pos - 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			      FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			    FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			  FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1
--							      --							    --								  --
def isRectangle ( m ) :					      static boolean isRectangle ( int m [ ] [ ] ) {		    public static boolean isRectangle ( int [ ] [ ] m ) {	  script_not_found : None
    rows = len ( m )					      	int rows = m . length ;					      int rows = m . length ;					  
    if ( rows == 0 ) :					      	if ( rows == 0 ) return false ;				      if ( ( rows == 0 ) ) {					  
	return False					      	int columns = m [ 0 ] . length ;			    	return false ;						  
    columns = len ( m [ 0 ] )				      	for ( int y1 = 0 ;					      }								  
    for y1 in range ( rows ) :				      	y1 < rows ;						      int columns = m [ 0 ] . length ;				  
	for x1 in range ( columns ) :			      	y1 ++ ) for ( int x1 = 0 ;				      for ( int y1 = 0 ;					  
	    if ( m [ y1 ] [ x1 ] == 1 ) :		      	x1 < columns ;						      y1 < rows ;						  
		for y2 in range ( y1 + 1 , rows ) :	      	x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ;   y1 ++ ) {							  
		    for x2 in range ( x1 + 1 , columns ) :    	y2 < rows ;						    	for ( int x1 = 0 ;					  
			if ( m [ y1 ] [ x2 ] == 1 and m [ y2  	y2 ++ ) for ( int x2 = x1 + 1 ;				    	x1 < columns ;						  
			    return True			      	x2 < columns ;						    	x1 ++ ) {						  
    return False					      	x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 & 	  if ( ( m [ y1 ] [ x1 ] == 1 ) ) {			  
							      	return false ;						    	    for ( int y2 = y1 + 1 ;				  
							      }								    	    y2 < rows ;						  
							      								    	    y2 ++ ) {						  
							      								    	      for ( int x2 = x1 + 1 ;				  
							      								    	      x2 < columns ;					  
							      								    	      x2 ++ ) {						  
							      								    		if ( ( m [ y1 ] [ x2 ] == 1 ) && ( m [ y2 ] [ x1  
							      								    		  return true ;					  
							      								    		}						  
							      								    	      }							  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DISTANCE_TWO_POINTS_EARTH			      PROGRAM_DISTANCE_TWO_POINTS_EARTH				    PROGRAM_DISTANCE_TWO_POINTS_EARTH				  PROGRAM_DISTANCE_TWO_POINTS_EARTH
--							      --							    --								  --
def distance ( lat1 , lat2 , lon1 , lon2 ) :		      public static double distance ( double lat1 , double lat2 , d public static double distance ( double lat1 , double lat2 , d success : None
    lon1 = radians ( lon1 )				      	lon1 = Math . toRadians ( lon1 ) ;			      lon1 = Math . toRadians ( lon1 ) ;			  
    lon2 = radians ( lon2 )				      	lon2 = Math . toRadians ( lon2 ) ;			      lon2 = Math . toRadians ( lon2 ) ;			  
    lat1 = radians ( lat1 )				      	lat1 = Math . toRadians ( lat1 ) ;			      lat1 = Math . toRadians ( lat1 ) ;			  
    lat2 = radians ( lat2 )				      	lat2 = Math . toRadians ( lat2 ) ;			      lat2 = Math . toRadians ( lat2 ) ;			  
    dlon = lon2 - lon1					      	double dlon = lon2 - lon1 ;				      double dlon = lon2 - lon1 ;				  
    dlat = lat2 - lat1					      	double dlat = lat2 - lat1 ;				      double dlat = lat2 - lat1 ;				  
    a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * 	double a = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Mat   double a = Math . sin ( dlat / 2 ) * Math . sin ( dlat / 2  
    c = 2 * asin ( sqrt ( a ) )				      	double c = 2 * Math . asin ( Math . sqrt ( a ) ) ;	      double c = 2 * Math . asin ( Math . sqrt ( a ) ) ;	  
    r = 6371						      	double r = 6371 ;					      int r = 6371 ;						  
    return ( c * r )					      	return ( c * r ) ;					      return ( c * r ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT
--							      --							    --								  --
def minTimeForWritingChars ( N , insrt , remov , cpy ) :      static int minTimeForWritingChars ( int N , int insert , int  public static int minTimeForWritingChars ( int N , int insrt  success : None
    if N == 0 :						      	if ( N == 0 ) return 0 ;				      if ( N == 0 ) return 0 ;					  
	return 0					      	if ( N == 1 ) return insert ;				      if ( N == 1 ) return insrt ;				  
    if N == 1 :						      	int dp [ ] = new int [ N + 1 ] ;			      int [ ] dp = new int [ N + 1 ] ;				  
	return insrt					      	for ( int i = 1 ;					      dp [ 0 ] = 0 ;						  
    dp = [ 0 ] * ( N + 1 )				      	i <= N ;						      for ( int i = 1 ;						  
    for i in range ( 1 , N + 1 ) :			      	i ++ ) {						      i <= N ;							  
	if i % 2 == 0 :					      	  if ( i % 2 == 0 ) dp [ i ] = Math . min ( dp [ i - 1 ] +    i ++ ) {							  
	    dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ i // 	  else dp [ i ] = Math . min ( dp [ i - 1 ] + insert , dp [ 	if ( i % 2 == 0 ) dp [ i ] = Math . min ( dp [ i - 1 ] +  
	else :						      	}							    	else dp [ i ] = Math . min ( dp [ i - 1 ] + insrt , dp [  
	    dp [ i ] = min ( dp [ i - 1 ] + insrt , dp [ ( i  	return dp [ N ] ;					      }								  
    return dp [ N ]					      }								      return dp [ N ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C		      LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C		    LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C			  LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C
--							      --							    --								  --
def prevPermutation ( str ) :				      static boolean prevPermutation ( char [ ] str ) {		    public static boolean prevPermutation ( String str ) {	  script_not_found : None
    n = len ( str ) - 1					      	int n = str . length - 1 ;				      int n = str . length ( ) - 1 ;				  
    i = n						      	int i = n ;						      int i = n ;						  
    while ( i > 0 and str [ i - 1 ] <= str [ i ] ) :	      	while ( i > 0 && str [ i - 1 ] <= str [ i ] ) {		      while ( ( i > 0 ) && ( str . charAt ( i - 1 ) <= str . char 
	i -= 1						      	  i -- ;						    	i -- ;							  
    if ( i <= 0 ) :					      	}							      }								  
	return False					      	if ( i <= 0 ) {						      if ( ( i <= 0 ) ) {					  
    j = i - 1						      	  return false ;					    	return false ;						  
    while ( j + 1 <= n and str [ j + 1 ] <= str [ i - 1 ] ) : 	}							      }								  
	j += 1						      	int j = i - 1 ;						      int j = i - 1 ;						  
    str = list ( str )					      	while ( j + 1 <= n && str [ j + 1 ] <= str [ i - 1 ] ) {      while ( ( j + 1 ) <= n && ( str . charAt ( j + 1 ) <= str . 
    temp = str [ i - 1 ]				      	  j ++ ;						    	j ++ ;							  
    str [ i - 1 ] = str [ j ]				      	}							      }								  
    str [ j ] = temp					      	swap ( str , i - 1 , j ) ;				      StringBuilder sb = new StringBuilder ( str ) ;		  
    str = ''.join ( str )				      	StringBuilder sb = new StringBuilder ( String . valueOf ( s   char temp = sb . charAt ( i - 1 ) ;			  
    str [ : : - 1 ]					      	sb . reverse ( ) ;					      sb . setCharAt ( i - 1 , sb . charAt ( j ) ) ;		  
    return True , str					      	str = sb . toString ( ) . toCharArray ( ) ;		      sb . setCharAt ( j , temp ) ;				  
							      	return true ;						      str = sb . toString ( ) ;					  
							      }								      sb . setLength ( 0 ) ;					  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING    SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING    SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING	  SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING
--							      --							    --								  --
def splitString ( str ) :				      static void splitString ( String str ) {			    public static void splitString ( String str ) {		  script_not_found : None
    alpha = ""						      	StringBuffer alpha = new StringBuffer ( ) , num = new Strin   String alpha = "" ;					  
    num = ""						      	for ( int i = 0 ;					      String num = "" ;						  
    special = ""					      	i < str . length ( ) ;					      String special = "" ;					  
    for i in range ( len ( str ) ) :			      	i ++ ) {						      for ( int i = 0 ;						  
	if ( str [ i ].isdigit ( ) ) :			      	  if ( Character . isDigit ( str . charAt ( i ) ) ) num . a   i < str . length ( ) ;					  
	    num = num + str [ i ]			      	  else if ( Character . isAlphabetic ( str . charAt ( i ) )   i ++ ) {							  
	elif ( ( str [ i ] >= 'A' and str [ i ] <= 'Z' ) or ( 	  else special . append ( str . charAt ( i ) ) ;	    	if ( ( Character . isDigit ( str . charAt ( i ) ) ) ) {	  
	    alpha += str [ i ]				      	}							    	  num = num + str . charAt ( i ) ;			  
	else :						      	System . out . println ( alpha ) ;			    	}							  
	    special += str [ i ]			      	System . out . println ( num ) ;			    	else if ( ( ( str . charAt ( i ) >= 'A' && str . charAt ( 
    print ( alpha )					      	System . out . println ( special ) ;			    	  alpha += str . charAt ( i ) ;				  
    print ( num )					      }								    	}							  
    print ( special )					      								    	else {							  
							      								    	  special += str . charAt ( i ) ;			  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( alpha ) ;			  
							      								      System . out . println ( num ) ;				  
							      								      System . out . println ( special ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1
--							      --							    --								  --
def sumAtKthLevel ( tree , k , i , level ) :		      static int sumAtKthLevel ( String tree , int k , int level )  static int sumAtKthLevel ( String [ ] tree , int k , int [ ]  script_not_found : None
    if ( tree [ i [ 0 ] ] == '(' ) :			      	if ( tree . charAt ( i ++ ) == '(' ) {			      if ( ( tree [ i [ 0 ] ] . charAt ( 0 ) == '(' ) ) {	  
	i [ 0 ] += 1					      	  if ( tree . charAt ( i ) == ')' ) return 0 ;		    	i [ 0 ] ++ ;						  
	if ( tree [ i [ 0 ] ] == ')' ) :		      	  int sum = 0 ;						    	if ( ( tree [ i [ 0 ] ] . charAt ( 0 ) == ')' ) ) return  
	    return 0					      	  if ( level == k ) sum = tree . charAt ( i ) - '0' ;	    	int sum = 0 ;						  
	sum = 0						      	  ++ i ;						    	if ( ( level == k ) ) {					  
	if ( level == k ) :				      	  int leftsum = sumAtKthLevel ( tree , k , level + 1 ) ;    	  sum = Integer . parseInt ( tree [ i [ 0 ] ] ) ;	  
	    sum = int ( tree [ i [ 0 ] ] )		      	  ++ i ;						    	}							  
	i [ 0 ] += 1					      	  int rightsum = sumAtKthLevel ( tree , k , level + 1 ) ;   	i [ 0 ] ++ ;						  
	leftsum = sumAtKthLevel ( tree , k , i , level + 1 )  	  ++ i ;						    	int leftsum = sumAtKthLevel ( tree , k , i , level + 1 )  
	i [ 0 ] += 1					      	  return sum + leftsum + rightsum ;			    	i [ 0 ] ++ ;						  
	rightsum = sumAtKthLevel ( tree , k , i , level + 1 ) 	}							    	int rightsum = sumAtKthLevel ( tree , k , i , level + 1 ) 
	i [ 0 ] += 1					      	return Integer . MIN_VALUE ;				    	i [ 0 ] ++ ;						  
	return sum + leftsum + rightsum			      }								    	return sum + leftsum + rightsum ;			  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
def countNum ( arr , n ) :				      static int countNum ( int arr [ ] , int n ) {		    static int countNum ( int [ ] arr , int n ) {		  success : None
    s = dict ( )					      	HashSet < Integer > s = new HashSet < > ( ) ;		      Map < Integer , Integer > s = new HashMap < > ( ) ;	  
    count , maxm , minm = 0 , - 10 ** 9 , 10 ** 9	      	int count = 0 , maxm = Integer . MIN_VALUE , minm = Integer   int count = 0 , maxm = - 10 * 9 , minm = 10 * 9 ;		  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	s [ arr [ i ] ] = 1				      	i < n ;							      i < n ;							  
	if ( arr [ i ] < minm ) :			      	i ++ ) {						      i ++ ) {							  
	    minm = arr [ i ]				      	  s . add ( arr [ i ] ) ;				    	s . put ( arr [ i ] , 1 ) ;				  
	if ( arr [ i ] > maxm ) :			      	  if ( arr [ i ] < minm ) minm = arr [ i ] ;		    	if ( ( arr [ i ] < minm ) ) {				  
	    maxm = arr [ i ]				      	  if ( arr [ i ] > maxm ) maxm = arr [ i ] ;		    	  minm = arr [ i ] ;					  
    for i in range ( minm , maxm + 1 ) :		      	}							    	}							  
	if i not in s.keys ( ) :			      	for ( int i = minm ;					    	if ( ( arr [ i ] > maxm ) ) {				  
	    count += 1					      	i <= maxm ;						    	  maxm = arr [ i ] ;					  
    return count					      	i ++ ) if ( ! s . contains ( i ) ) count ++ ;		    	}							  
							      	return count ;						      }								  
							      }								      for ( int i = minm ;					  
							      								      i <= maxm ;						  
							      								      i ++ ) {							  
							      								    	if ( ! s . keySet ( ) . contains ( i ) ) {		  
							      								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1	      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1
--							      --							    --								  --
def minCoins ( coins , m , V ) :			      static int minCoins ( int coins [ ] , int m , int V ) {	    public static int minCoins ( int [ ] coins , int m , int V )  script_not_found : None
    table = [ 0 for i in range ( V + 1 ) ]		      	int table [ ] = new int [ V + 1 ] ;			      int [ ] table = new int [ V + 1 ] ;			  
    table [ 0 ] = 0					      	table [ 0 ] = 0 ;					      for ( int i = 0 ;						  
    for i in range ( 1 , V + 1 ) :			      	for ( int i = 1 ;					      i < V + 1 ;						  
	table [ i ] = sys.maxsize			      	i <= V ;						      i ++ ) {							  
    for i in range ( 1 , V + 1 ) :			      	i ++ ) table [ i ] = Integer . MAX_VALUE ;		    	table [ i ] = 0 ;					  
	for j in range ( m ) :				      	for ( int i = 1 ;					      }								  
	    if ( coins [ j ] <= i ) :			      	i <= V ;						      table [ 0 ] = 0 ;						  
		sub_res = table [ i - coins [ j ] ]	      	i ++ ) {						      for ( int i = 1 ;						  
		if ( sub_res != sys.maxsize and sub_res + 1 < 	  for ( int j = 0 ;					      i <= V ;							  
		    table [ i ] = sub_res + 1		      	  j < m ;						      i ++ ) {							  
    return table [ V ]					      	  j ++ ) if ( coins [ j ] <= i ) {			    	table [ i ] = Integer . MAX_VALUE ;			  
							      	    int sub_res = table [ i - coins [ j ] ] ;		      }								  
							      	    if ( sub_res != Integer . MAX_VALUE && sub_res + 1 < ta   for ( int i = 1 ;						  
							      	  }							      i <= V ;							  
							      	}							      i ++ ) {							  
							      	return table [ V ] ;					    	for ( int j = 0 ;					  
							      }								    	j < m ;							  
							      								    	j ++ ) {						  
							      								    	  if ( ( coins [ j ] <= i ) ) {				  
							      								    	    int subRes = table [ i - coins [ j ] ] ;		  
							      								    	    if ( ( subRes != Integer . MAX_VALUE ) && ( subRes +  
							      								    	      table [ i ] = subRes + 1 ;			  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return table [ V ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1
--							      --							    --								  --
def maxSum ( arr , n ) :				      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int [ ] arr , int n ) {		  failure : #Results:1, 10
    cum_sum = 0						      	int cum_sum = 0 ;					      int cumSum = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	cum_sum += arr [ i ]				      	i < n ;							      i <= n ;							  
    curr_val = 0					      	i ++ ) cum_sum += arr [ i ] ;				      i ++ ) {							  
    for i in range ( 0 , n ) :				      	int curr_val = 0 ;					    	cumSum += arr [ i ] ;					  
	curr_val += i * arr [ i ]			      	for ( int i = 0 ;					      }								  
    res = curr_val					      	i < n ;							      int currVal = 0 ;						  
    for i in range ( 1 , n ) :				      	i ++ ) curr_val += i * arr [ i ] ;			      for ( int i = 0 ;						  
	next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + 	int res = curr_val ;					      i <= n ;							  
	curr_val = next_val				      	for ( int i = 1 ;					      i ++ ) {							  
	res = max ( res , next_val )			      	i < n ;							    	currVal += i * arr [ i ] ;				  
    return res						      	i ++ ) {						      }								  
							      	  int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + a   int res = currVal ;					  
							      	  curr_val = next_val ;					      for ( int i = 1 ;						  
							      	  res = Math . max ( res , next_val ) ;			      i <= n ;							  
							      	}							      i ++ ) {							  
							      	return res ;						    	int nextVal = ( currVal - ( cumSum - arr [ i - 1 ] ) + ar 
							      }								    	currVal = nextVal ;					  
							      								    	res = Math . max ( res , nextVal ) ;			  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1
--							      --							    --								  --
def findTriplets ( arr , n ) :				      static void findTriplets ( int arr [ ] , int n ) {	    static void findTriplets ( int [ ] arr , int n ) {		  script_not_found : None
    found = False					      	boolean found = false ;					      boolean found = false ;					  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	s = set ( )					      	i < n - 1 ;						      i < n - 1 ;						  
	for j in range ( i + 1 , n ) :			      	i ++ ) {						      i ++ ) {							  
	    x = - ( arr [ i ] + arr [ j ] )		      	  HashSet < Integer > s = new HashSet < Integer > ( ) ;	    	HashSet < Integer > s = new HashSet < > ( ) ;		  
	    if x in s :					      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
		print ( x , arr [ i ] , arr [ j ] )	      	  j < n ;						    	j < n ;							  
		found = True				      	  j ++ ) {						    	j ++ ) {						  
	    else :					      	    int x = - ( arr [ i ] + arr [ j ] ) ;		    	  int x = - ( arr [ i ] + arr [ j ] ) ;			  
		s.add ( arr [ j ] )			      	    if ( s . contains ( x ) ) {				    	  if ( s . contains ( x ) ) {				  
    if found == False :					      	      System . out . printf ( "%d %d %d\n" , x , arr [ i ]  	    System . out . println ( x + " " + arr [ i ] + " " +  
	print ( "No Triplet Found" )			      	      found = true ;					    	    found = true ;					  
							      	    }							    	  }							  
							      	    else {						    	  else {						  
							      	      s . add ( arr [ j ] ) ;				    	    s . add ( arr [ j ] ) ;				  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	if ( found == false ) {					      if ( found == false ) {					  
							      	  System . out . printf ( " No Triplet Found\n" ) ;	    	System . out . println ( "No Triplet Found" ) ;		  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_MAXIMUM_GCD_ARRAY_1				      FIND_PAIR_MAXIMUM_GCD_ARRAY_1				    FIND_PAIR_MAXIMUM_GCD_ARRAY_1				  FIND_PAIR_MAXIMUM_GCD_ARRAY_1
--							      --							    --								  --
def findMaxGCD ( arr , n ) :				      public static int findMaxGCD ( int arr [ ] , int n ) {	    static int findMaxGCD ( int [ ] arr , int n ) {		  script_not_found : None
    high = 0						      	int high = 0 ;						      int high = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	high = max ( high , arr [ i ] )			      	i < n ;							      i <= n ;							  
    count = [ 0 ] * ( high + 1 )			      	i ++ ) high = Math . max ( high , arr [ i ] ) ;		      i ++ ) {							  
    for i in range ( 0 , n ) :				      	int count [ ] = new int [ high + 1 ] ;			    	high = Math . max ( high , arr [ i ] ) ;		  
	count [ arr [ i ] ] += 1			      	for ( int i = 0 ;					      }								  
    counter = 0						      	i < n ;							      int [ ] count = new int [ high + 1 ] ;			  
    for i in range ( high , 0 , - 1 ) :			      	i ++ ) count [ arr [ i ] ] ++ ;				      for ( int i = 0 ;						  
	j = i						      	int counter = 0 ;					      i <= n ;							  
	while ( j <= high ) :				      	for ( int i = high ;					      i ++ ) {							  
	    if ( count [ j ] > 0 ) :			      	i >= 1 ;						    	count [ arr [ i ] ] ++ ;				  
		counter += count [ j ]			      	i -- ) {						      }								  
	    j += i					      	  int j = i ;						      int counter = 0 ;						  
	    if ( counter == 2 ) :			      	  while ( j <= high ) {					      for ( int i = high ;					  
		return i				      	    if ( count [ j ] > 0 ) counter += count [ j ] ;	      i > 0 ;							  
	counter = 0					      	    j += i ;						      i -- ) {							  
							      	    if ( counter == 2 ) return i ;			    	int j = i ;						  
							      	  }							    	while ( ( j <= high ) ) {				  
							      	  counter = 0 ;						    	  if ( ( count [ j ] ) > 0 ) counter += count [ j ] ;	  
							      	}							    	  j += i ;						  
							      	return 1 ;						    	  if ( ( counter == 2 ) ) return i ;			  
							      }								    	}							  
							      								    	counter = 0 ;						  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		      FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		    FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS			  FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
def relativeComplement ( arr1 , arr2 , n , m ) :	      static void relativeComplement ( int arr1 [ ] , int arr2 [ ]  public static void relativeComplement ( int [ ] arr1 , int [  script_not_found : None
    i = 0						      	int i = 0 , j = 0 ;					      int i = 0 ;						  
    j = 0						      	while ( i < n && j < m ) {				      int j = 0 ;						  
    while ( i < n and j < m ) :				      	  if ( arr1 [ i ] < arr2 [ j ] ) {			      while ( ( i < n ) && ( j < m ) ) {			  
	if ( arr1 [ i ] < arr2 [ j ] ) :		      	    System . out . print ( arr1 [ i ] + " " ) ;		    	if ( ( arr1 [ i ] < arr2 [ j ] ) ) {			  
	    print ( arr1 [ i ] , "" , end = "" )	      	    i ++ ;						    	  System . out . print ( arr1 [ i ] + " " ) ;		  
	    i += 1					      	  }							    	  i ++ ;						  
	elif ( arr1 [ i ] > arr2 [ j ] ) :		      	  else if ( arr1 [ i ] > arr2 [ j ] ) {			    	}							  
	    j += 1					      	    j ++ ;						    	else if ( ( arr1 [ i ] > arr2 [ j ] ) ) {		  
	elif ( arr1 [ i ] == arr2 [ j ] ) :		      	  }							    	  j ++ ;						  
	    i += 1					      	  else if ( arr1 [ i ] == arr2 [ j ] ) {		    	}							  
	    j += 1					      	    i ++ ;						    	else if ( ( arr1 [ i ] == arr2 [ j ] ) ) {		  
    while ( i < n ) :					      	    j ++ ;						    	  i ++ ;						  
	print ( arr1 [ i ] , "" , end = "" )		      	  }							    	  j ++ ;						  
							      	}							    	}							  
							      	while ( i < n ) System . out . print ( arr1 [ i ] + " " ) ;   }								  
							      }								      while ( ( i < n ) ) {					  
							      								    	System . out . print ( arr1 [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1   REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1   REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1	  REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1
--							      --							    --								  --
def translate ( st ) :					      static void translate ( char str [ ] ) {			    public static void translate ( char [ ] st ) {		  script_not_found : None
    l = len ( st )					      	int len = str . length ;				      int l = st . length ;					  
    if ( l < 2 ) :					      	if ( len < 2 ) return ;					      if ( ( l < 2 ) ) return ;					  
	return						      	int i = 0 ;						      int i = 0 ;						  
    i = 0						      	int j = 0 ;						      int j = 0 ;						  
    j = 0						      	while ( j < len - 1 ) {					      while ( ( j < l - 1 ) ) {					  
    while ( j < l - 1 ) :				      	  if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {	    	if ( ( st [ j ] == 'A' ) && ( st [ j + 1 ] == 'B' ) ) {	  
	if ( st [ j ] == 'A' and st [ j + 1 ] == 'B' ) :      	    j = j + 2 ;						    	  j += 2 ;						  
	    j += 2					      	    str [ i ++ ] = 'C' ;				    	  st [ i ] = 'C' ;					  
	    st [ i ] = 'C'				      	    continue ;						    	  i ++ ;						  
	    i += 1					      	  }							    	  continue ;						  
	    continue					      	  str [ i ++ ] = str [ j ++ ] ;				    	}							  
	st [ i ] = st [ j ]				      	}							    	st [ i ] = st [ j ] ;					  
	i += 1						      	if ( j == len - 1 ) str [ i ++ ] = str [ j ] ;		    	i ++ ;							  
	j += 1						      	str [ i ] = ' ' ;					    	j ++ ;							  
    if ( j == l - 1 ) :					      	str [ len - 1 ] = ' ' ;					      }								  
	st [ i ] = st [ j ]				      }								      if ( ( j == l - 1 ) ) {					  
	i += 1						      								    	st [ i ] = st [ j ] ;					  
    st [ i ] = ' '					      								    	i ++ ;							  
    st [ l - 1 ] = ' '					      								      }								  
							      								      st [ i ] = ' ' ;						  
							      								      st [ l - 1 ] = ' ' ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3
--							      --							    --								  --
def findLength ( st , n ) :				      static int findLength ( String str , int n ) {		    static int findLength ( String st , int n ) {		  script_not_found : None
    total = [ 0 ] * ( n + 1 )				      	int ans = 0 ;						      int [ ] total = new int [ n + 1 ] ;			  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 1 ;						  
	total [ i ] = ( total [ i - 1 ] + int ( st [ i - 1 ]  	i <= n - 2 ;						      i <= n ;							  
    ans = 0						      	i ++ ) {						      i ++ ) {							  
    l = 2						      	  int l = i , r = i + 1 ;				    	total [ i ] = ( total [ i - 1 ] + Integer . parseInt ( st 
    while ( l <= n ) :					      	  int lsum = 0 , rsum = 0 ;				      }								  
	for i in range ( n - l + 1 ) :			      	  while ( r < n && l >= 0 ) {				      int ans = 0 ;						  
	    j = i + l - 1				      	    lsum += str . charAt ( l ) - '0' ;			      int l = 2 ;						  
	    if ( total [ i + int ( l / 2 ) ] - total [ i ] == 	    rsum += str . charAt ( r ) - '0' ;			      while ( ( l <= n ) ) {					  
		ans = max ( ans , l )			      	    if ( lsum == rsum ) {				    	for ( int i = 0 ;					  
	l = l + 2					      	      ans = Math . max ( ans , r - l + 1 ) ;		    	i <= n - l ;						  
    return ans						      	    }							    	i ++ ) {						  
							      	    l -- ;						    	  int j = i + l - 1 ;					  
							      	    r ++ ;						    	  if ( ( total [ i + Integer . parseInt ( l / 2 ) ] - tot 
							      	  }							    	    ans = Math . max ( ans , l ) ;			  
							      	}							    	  }							  
							      	return ans ;						    	}							  
							      }								    	l = l + 2 ;						  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS		      MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS		    MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS		  MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS
--							      --							    --								  --
def maximumSum ( a , n ) :				      static int maximumSum ( int a [ ] [ ] , int n ) {		    public static int maximumSum ( int [ ] [ ] a , int n ) {	  script_not_found : None
    global M						      	for ( int i = 0 ;					      int i ;							  
    for i in range ( 0 , n ) :				      	i < n ;							      for ( i = 0 ;						  
	a [ i ].sort ( )				      	i ++ ) sort ( a , i , n ) ;				      i <= n ;							  
    sum = a [ n - 1 ] [ M - 1 ]				      	int sum = a [ n - 1 ] [ M - 1 ] ;			      i ++ ) {							  
    prev = a [ n - 1 ] [ M - 1 ]			      	int prev = a [ n - 1 ] [ M - 1 ] ;			    	Arrays . sort ( a [ i ] ) ;				  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	int i , j ;						      }								  
	for j in range ( M - 1 , - 1 , - 1 ) :		      	for ( i = n - 2 ;					      int sum = a [ n - 1 ] [ M - 1 ] ;				  
	    if ( a [ i ] [ j ] < prev ) :		      	i >= 0 ;						      int prev = a [ n - 1 ] [ M - 1 ] ;			  
		prev = a [ i ] [ j ]			      	i -- ) {						      for ( i = n - 2 ;						  
		sum += prev				      	  for ( j = M - 1 ;					      i >= 0 ;							  
		break					      	  j >= 0 ;						      -- i ) {							  
	if ( j == - 1 ) :				      	  j -- ) {						    	for ( j = M - 1 ;					  
	    return 0					      	    if ( a [ i ] [ j ] < prev ) {			    	j >= 0 ;						  
    return sum						      	      prev = a [ i ] [ j ] ;				    	-- j ) {						  
							      	      sum += prev ;					    	  if ( ( a [ i ] [ j ] < prev ) ) {			  
							      	      break ;						    	    prev = a [ i ] [ j ] ;				  
							      	    }							    	    sum += prev ;					  
							      	  }							    	    break ;						  
							      	  if ( j == - 1 ) return 0 ;				    	  }							  
							      	}							    	}							  
							      	return sum ;						    	if ( ( j == - 1 ) ) {					  
							      }								    	  return 0 ;						  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1
--							      --							    --								  --
def minJumps ( arr , n ) :				      private static int minJumps ( int [ ] arr , int n ) {	    public static double minJumps ( double [ ] arr , int n ) {	  error : MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_
    jumps = [ 0 for i in range ( n ) ]			      	int jumps [ ] = new int [ n ] ;				      ArrayList < Double > jumps = new ArrayList < > ( ) ;	  GIVEN_ARRAY_1.java:40: error: incompatible types:
    if ( n == 0 ) or ( arr [ 0 ] == 0 ) :		      	int i , j ;						      for ( int i = 0 ;						  int cannot be converted to Double	jumps . add
	return float ( 'inf' )				      	if ( n == 0 || arr [ 0 ] == 0 ) return Integer . MAX_VALUE    i < n ;							  ( 0 ) ;		    ^ MINIMUM_NUMBER_OF_JUMP
    jumps [ 0 ] = 0					      	jumps [ 0 ] = 0 ;					      i ++ ) {							  S_TO_REACH_END_OF_A_GIVEN_ARRAY_1.java:45: error:
    for i in range ( 1 , n ) :				      	for ( i = 1 ;						    	jumps . add ( 0 ) ;					  incompatible types: int cannot be converted to Dou
	jumps [ i ] = float ( 'inf' )			      	i < n ;							      }								  ble	jumps . set ( 0 , 0 ) ;
	for j in range ( i ) :				      	i ++ ) {						      if ( ( n == 0 ) || ( arr [ 0 ] == 0 ) ) {			  ^ MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_
	    if ( i <= j + arr [ j ] ) and ( jumps [ j ] != fl 	  jumps [ i ] = Integer . MAX_VALUE ;			    	return Double . MAX_VALUE ;				  ARRAY_1.java:89: error: incompatible types: int[]
		jumps [ i ] = min ( jumps [ i ] , jumps [ j ] 	  for ( j = 0 ;						      }								  cannot be converted to double[]	  if(f_fille
		break					      	  j < i ;						      jumps . set ( 0 , 0 ) ;					  d(param0.get(i),param1.get(i)) == f_gold(param0.ge
    return jumps [ n - 1 ]				      	  j ++ ) {						      for ( int i = 1 ;						  t(i),param1.get(i)))
							      	    if ( i <= j + arr [ j ] && jumps [ j ] != Integer . MAX   i < n ;							   ^ Note: Some messages have been simplified; recom
							      	      jumps [ i ] = Math . min ( jumps [ i ] , jumps [ j ]    i ++ ) {							  pile with -Xdiags:verbose to get full output 3 err
							      	      break ;						    	jumps . set ( i , Double . MAX_VALUE ) ;		  ors
							      	    }							    	for ( int j = 0 ;					  
							      	  }							    	j < i ;							  
							      	}							    	j ++ ) {						  
							      	return jumps [ n - 1 ] ;				    	  if ( ( i <= j + arr [ j ] ) && ( jumps . get ( j ) != D 
							      }								    	    jumps . set ( i , Math . min ( jumps . get ( i ) , ju 
							      								    	    break ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return jumps . get ( n - 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S			      LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S			    LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S			  LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S
--							      --							    --								  --
def lenOfLongSubarr ( arr , n ) :			      static int lenOfLongSubarr ( int arr [ ] , int n ) {	    public static int lenOfLongSubarr ( int [ ] arr , int n ) {	  error : LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S.jav
    um = { i : 0 for i in range ( 10 ) }		      	HashMap < Integer , Integer > um = new HashMap < Integer ,    HashMap < Integer , Integer > um = new HashMap < > ( ) ;	  a:43: error: ')' expected	else if ( ( ! um . c
    sum = 0						      	int sum = 0 , maxLen = 0 ;				      for ( int i = 0 ;						  ontainsKey ( sum ) ) um . get ( sum ) ) um . put (
    maxLen = 0						      	for ( int i = 0 ;					      i < 10 ;							   sum , i ) ;
    for i in range ( n ) :				      	i < n ;							      i ++ ) um . put ( i , 0 ) ;				  	 ^ LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S.ja
	if arr [ i ] == 0 :				      	i ++ ) {						      int sum = 0 ;						  va:43: error: ';' expected	 else if ( ( ! um .
	    sum += - 1					      	  sum += arr [ i ] == 0 ? - 1 : 1 ;			      int maxLen = 0 ;						  containsKey ( sum ) ) um . get ( sum ) ) um . put
	else :						      	  if ( sum == 1 ) maxLen = i + 1 ;			      for ( int i = 0 ;						  ( sum , i ) ;
	    sum += 1					      	  else if ( ! um . containsKey ( sum ) ) um . put ( sum , i   i < n ;							  			   ^ 2 errors
	if ( sum == 1 ) :				      	  if ( um . containsKey ( sum - 1 ) ) {			      i ++ ) {							  
	    maxLen = i + 1				      	    if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i 	if ( arr [ i ] == 0 ) sum += - 1 ;			  
	elif ( sum not in um ) :			      	  }							    	else sum += 1 ;						  
	    um [ sum ] = i				      	}							    	if ( ( sum == 1 ) ) maxLen = i + 1 ;			  
	if ( ( sum - 1 ) in um ) :			      	return maxLen ;						    	else if ( ( ! um . containsKey ( sum ) ) um . get ( sum ) 
	    if ( maxLen < ( i - um [ sum - 1 ] ) ) :	      }								    	if ( ( ( sum - 1 ) ) != 0 ) if ( ( maxLen < ( i - um . ge 
		maxLen = i - um [ sum - 1 ]		      								      }								  
    return maxLen					      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES	      CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES		    CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES		  CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES
--							      --							    --								  --
def minRemove ( arr , n ) :				      static int minRemove ( int arr [ ] , int n ) {		    public static int minRemove ( int [ ] arr , int n ) {	  error : CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_
    LIS = [ 0 for i in range ( n ) ]			      	int LIS [ ] = new int [ n ] ;				      int [ ] LIS = new int [ n ] ;				  CHANGES.java:49: error: cannot find symbol   len =
    len = 0						      	int len = 0 ;						      for ( int i = 0 ;						   Math . max ( len , LIS [ i ] ) ;
    for i in range ( n ) :				      	for ( int i = 0 ;					      i < n ;							  		   ^   symbol:	 variable i   locati
	LIS [ i ] = 1					      	i < n ;							      i ++ ) LIS [ i ] = 0 ;					  on: class CONVERT_STRICTLY_INCREASING_ARRAY_MINIMU
    for i in range ( 1 , n ) :				      	i ++ ) LIS [ i ] = 1 ;					      int len = 0 ;						  M_CHANGES 1 error
	for j in range ( i ) :				      	for ( int i = 1 ;					      for ( int i = 0 ;						  
	    if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr 	i < n ;							      i < n ;							  
		LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 ) 	i ++ ) {						      i ++ ) LIS [ i ] = 1 ;					  
	len = max ( len , LIS [ i ] )			      	  for ( int j = 0 ;					      for ( int i = 1 ;						  
    return ( n - len )					      	  j < i ;						      i < n ;							  
							      	  j ++ ) {						      i ++ ) {							  
							      	    if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ]  	for ( int j = 0 ;					  
							      	  }							    	j < i ;							  
							      	  len = Math . max ( len , LIS [ i ] ) ;		    	j ++ ) if ( ( arr [ i ] > arr [ j ] ) && ( i - j ) <= ( a 
							      	}							      }								  
							      	return n - len ;					      len = Math . max ( len , LIS [ i ] ) ;			  
							      }								      return ( n - len ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PREFIX_ALSO_SUFFIX_1				      LONGEST_PREFIX_ALSO_SUFFIX_1				    LONGEST_PREFIX_ALSO_SUFFIX_1				  LONGEST_PREFIX_ALSO_SUFFIX_1
--							      --							    --								  --
def longestPrefixSuffix ( s ) :				      static int longestPrefixSuffix ( String s ) {		    public static int longestPrefixSuffix ( String s ) {	  failure : #Results:4, 10
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    lps = [ 0 ] * n					      	int lps [ ] = new int [ n ] ;				      int [ ] lps = new int [ n ] ;				  
    l = 0						      	lps [ 0 ] = 0 ;						      int l = 0 ;						  
    i = 1						      	int len = 0 ;						      int i = 1 ;						  
    while ( i < n ) :					      	int i = 1 ;						      while ( ( i = s . indexOf ( '.' , i ) ) != - 1 ) {	  
	if ( s [ i ] == s [ l ] ) :			      	while ( i < n ) {					    	if ( ( s . charAt ( i ) == s . charAt ( l ) ) ) {	  
	    l = l + 1					      	  if ( s . charAt ( i ) == s . charAt ( len ) ) {	    	  l = l + 1 ;						  
	    lps [ i ] = l				      	    len ++ ;						    	  lps [ i ] = l ;					  
	    i = i + 1					      	    lps [ i ] = len ;					    	  i = i + 1 ;						  
	else :						      	    i ++ ;						    	}							  
	    if ( l != 0 ) :				      	  }							    	else {							  
		l = lps [ l - 1 ]			      	  else {						    	  if ( ( l != 0 ) ) l = lps [ l - 1 ] ;			  
	    else :					      	    if ( len != 0 ) {					    	  else {						  
		lps [ i ] = 0				      	      len = lps [ len - 1 ] ;				    	    lps [ i ] = 0 ;					  
		i = i + 1				      	    }							    	    i = i + 1 ;						  
    res = lps [ n - 1 ]					      	    else {						    	  }							  
    if ( res > n / 2 ) :				      	      lps [ i ] = 0 ;					    	}							  
	return n // 2					      	      i ++ ;						      }								  
    else :						      	    }							      int res = lps [ n - 1 ] ;					  
	return res					      	  }							      if ( ( res > n / 2 ) ) return n / 2 ;			  
							      	}							      else return res ;						  
							      	int res = lps [ n - 1 ] ;				    }								  
							      	return ( res > n / 2 ) ? n / 2 : res ;			    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM_1				      FIND_SUBARRAY_WITH_GIVEN_SUM_1				    FIND_SUBARRAY_WITH_GIVEN_SUM_1				  FIND_SUBARRAY_WITH_GIVEN_SUM_1
--							      --							    --								  --
def subArraySum ( arr , n , sum ) :			      int subArraySum ( int arr [ ] , int n , int sum ) {	    public static int subArraySum ( int [ ] arr , int n , int sum success : None
    curr_sum = arr [ 0 ]				      	int curr_sum = arr [ 0 ] , start = 0 , i ;		      int currSum = arr [ 0 ] ;					  
    start = 0						      	for ( i = 1 ;						      int start = 0 ;						  
    i = 1						      	i <= n ;						      int i = 1 ;						  
    while i <= n :					      	i ++ ) {						      while ( i <= n ) {					  
	while curr_sum > sum and start < i - 1 :	      	  while ( curr_sum > sum && start < i - 1 ) {		    	while ( currSum > sum && start < i - 1 ) {		  
	    curr_sum = curr_sum - arr [ start ]		      	    curr_sum = curr_sum - arr [ start ] ;		    	  currSum = currSum - arr [ start ] ;			  
	    start += 1					      	    start ++ ;						    	  start ++ ;						  
	if curr_sum == sum :				      	  }							    	}							  
	    print ( "Sum found between indexes" )	      	  if ( curr_sum == sum ) {				    	if ( currSum == sum ) {					  
	    print ( "%d and %d" % ( start , i - 1 ) )	      	    int p = i - 1 ;					    	  System . out . println ( "Sum found between indexes" )  
	    return 1					      	    System . out . println ( "Sum found between indexes " + 	  System . out . println ( start + " and " + ( i - 1 ) )  
	if i < n :					      	    return 1 ;						    	  return 1 ;						  
	    curr_sum = curr_sum + arr [ i ]		      	  }							    	}							  
	i += 1						      	  if ( i < n ) curr_sum = curr_sum + arr [ i ] ;	    	if ( i < n ) {						  
    print ( "No subarray found" )			      	}							    	  currSum = currSum + arr [ i ] ;			  
    return 0						      	System . out . println ( "No subarray found" ) ;	    	}							  
							      	return 0 ;						    	i ++ ;							  
							      }								      }								  
							      								      System . out . println ( "No subarray found" ) ;		  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS
--							      --							    --								  --
def countGroups ( position , previous_sum , length , num ) :  static int countGroups ( int position , int previous_sum , in static int countGroups ( int position , int previousSum , int script_not_found : None
    if ( position == length ) :				      	if ( position == length ) return 1 ;			      if ( ( position == length ) ) {				  
	return 1					      	if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [  	return 1 ;						  
    if ( dp [ position ] [ previous_sum ] != - 1 ) :	      	dp [ position ] [ previous_sum ] = 0 ;			      }								  
	return dp [ position ] [ previous_sum ]		      	int res = 0 ;						      if ( ( dp [ position ] [ previousSum ] != - 1 ) ) {	  
    dp [ position ] [ previous_sum ] = 0		      	int sum = 0 ;						    	return dp [ position ] [ previousSum ] ;		  
    res = 0						      	for ( int i = position ;				      }								  
    sum = 0						      	i < length ;						      dp [ position ] [ previousSum ] = 0 ;			  
    for i in range ( position , length ) :		      	i ++ ) {						      int res = 0 ;						  
	sum += ( ord ( num [ i ] ) - ord ( '0' ) )	      	  sum += ( num [ i ] - '0' ) ;				      int sum = 0 ;						  
	if ( sum >= previous_sum ) :			      	  if ( sum >= previous_sum ) res += countGroups ( i + 1 , s   for ( int i = position ;					  
	    res += countGroups ( i + 1 , sum , length , num ) 	}							      i < length ;						  
    dp [ position ] [ previous_sum ] = res		      	dp [ position ] [ previous_sum ] = res ;		      i ++ ) {							  
    return res						      	return res ;						    	sum += ( ( int ) num . charAt ( i ) - '0' ) ;		  
							      }								    	if ( ( sum >= previousSum ) ) {				  
							      								    	  res += countGroups ( i + 1 , sum , length , num ) ;	  
							      								    	}							  
							      								      }								  
							      								      dp [ position ] [ previousSum ] = res ;			  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_SUBSEQUENCES				      COUNT_DISTINCT_SUBSEQUENCES				    COUNT_DISTINCT_SUBSEQUENCES					  COUNT_DISTINCT_SUBSEQUENCES
--							      --							    --								  --
def countSub ( ss ) :					      static int countSub ( String str ) {			    static int countSub ( String ss ) {				  script_not_found : None
    last = [ - 1 for i in range ( MAX_CHAR + 1 ) ]	      	int [ ] last = new int [ MAX_CHAR ] ;			      int [ ] last = new int [ MAX_CHAR + 1 ] ;			  
    n = len ( ss )					      	Arrays . fill ( last , - 1 ) ;				      for ( int i = 0 ;						  
    dp = [ - 2 for i in range ( n + 1 ) ]		      	int n = str . length ( ) ;				      i < last . length ;					  
    dp [ 0 ] = 1					      	int [ ] dp = new int [ n + 1 ] ;			      i ++ ) last [ i ] = - 1 ;					  
    for i in range ( 1 , n + 1 ) :			      	dp [ 0 ] = 1 ;						      int n = ss . length ( ) ;					  
	dp [ i ] = 2 * dp [ i - 1 ]			      	for ( int i = 1 ;					      int [ ] dp = new int [ n + 1 ] ;				  
	if last [ ord ( ss [ i - 1 ] ) ] != - 1 :	      	i <= n ;						      dp [ 0 ] = - 2 ;						  
	    dp [ i ] = dp [ i ] - dp [ last [ ord ( ss [ i -  	i ++ ) {						      for ( int i = 0 ;						  
	last [ ord ( ss [ i - 1 ] ) ] = i - 1		      	  dp [ i ] = 2 * dp [ i - 1 ] ;				      i < n + 1 ;						  
    return dp [ n ]					      	  if ( last [ ( int ) str . charAt ( i - 1 ) ] != - 1 ) dp    i ++ ) dp [ i ] = - 2 ;					  
							      	  last [ ( int ) str . charAt ( i - 1 ) ] = ( i - 1 ) ;	      dp [ 0 ] = 1 ;						  
							      	}							      for ( int i = 1 ;						  
							      	return dp [ n ] ;					      i <= n ;							  
							      }								      i ++ ) {							  
							      								    	dp [ i ] = 2 * dp [ i - 1 ] ;				  
							      								    	if ( last [ ( char ) ss . charAt ( i - 1 ) ] != - 1 ) dp  
							      								    	last [ ( char ) ss . charAt ( i - 1 ) ] = i - 1 ;	  
							      								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		      COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		    COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		  COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX
--							      --							    --								  --
def printCommonElements ( mat ) :			      static void printCommonElements ( int mat [ ] [ ] ) {	    static void printCommonElements ( int [ ] [ ] mat ) {	  script_not_found : None
    mp = dict ( )					      	Map < Integer , Integer > mp = new HashMap < > ( ) ;	      Map < Integer , Integer > mp = new HashMap < > ( ) ;	  
    for j in range ( N ) :				      	for ( int j = 0 ;					      for ( int j = 0 ;						  
	mp [ mat [ 0 ] [ j ] ] = 1			      	j < N ;							      j < N ;							  
    for i in range ( 1 , M ) :				      	j ++ ) mp . put ( mat [ 0 ] [ j ] , 1 ) ;		      j ++ ) {							  
	for j in range ( N ) :				      	for ( int i = 1 ;					    	mp . put ( mat [ 0 ] [ j ] , 1 ) ;			  
	    if ( mat [ i ] [ j ] in mp.keys ( ) and mp [ mat  	i < M ;							      }								  
		mp [ mat [ i ] [ j ] ] = i + 1		      	i ++ ) {						      for ( int i = 1 ;						  
		if i == M - 1 :				      	  for ( int j = 0 ;					      i < M ;							  
		    print ( mat [ i ] [ j ] , end = " " )     	  j < N ;						      i ++ ) {							  
							      	  j ++ ) {						    	for ( int j = 0 ;					  
							      	    if ( mp . get ( mat [ i ] [ j ] ) != null && mp . get ( 	j < N ;							  
							      	      mp . put ( mat [ i ] [ j ] , i + 1 ) ;		    	j ++ ) {						  
							      	      if ( i == M - 1 ) System . out . print ( mat [ i ] [  	  if ( ( mp . keySet ( ) . contains ( mat [ i ] [ j ] ) ) 
							      	    }							    	    mp . put ( mat [ i ] [ j ] , i + 1 ) ;		  
							      	  }							    	    if ( i == M - 1 ) {					  
							      	}							    	      System . out . print ( mat [ i ] [ j ] + " " ) ;	  
							      }								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	      CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	    CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE
--							      --							    --								  --
def isChangeable ( notes , n ) :			      static int isChangeable ( int notes [ ] , int n ) {	    static int isChangeable ( int [ ] notes , int n ) {		  error : CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON
    fiveCount = 0					      	int fiveCount = 0 ;					      int fiveCount = 0 ;					  _IN_THE_QUEUE.java:89: error: ')' expected	 par
    tenCount = 0					      	int tenCount = 0 ;					      int tenCount = 0 ;					  am0.add(new int[]{46,46,93,57,82,34,83,80,77,36,80
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  ,85,69,28,9,56,49,27,83,25,1,80,99,14,69,82,79,71,
	if ( notes [ i ] == 5 ) :			      	i < n ;							      i < n ;							  74,34}});
	    fiveCount += 1				      	i ++ ) {						      i ++ ) {							  
	elif ( notes [ i ] == 10 ) :			      	  if ( notes [ i ] == 5 ) fiveCount ++ ;		    	if ( ( notes [ i ] == 5 ) ) {				  			 ^ CHECK_IF_X_CAN_GIVE_CHANG
	    if ( fiveCount > 0 ) :			      	  else if ( notes [ i ] == 10 ) {			    	  fiveCount ++ ;					  E_TO_EVERY_PERSON_IN_THE_QUEUE.java:89: error: ill
		fiveCount -= 1				      	    if ( fiveCount > 0 ) {				    	}							  egal start of type	 param0.add(new int[]{46,46,
		tenCount += 1				      	      fiveCount -- ;					    	else if ( ( notes [ i ] == 10 ) ) {			  93,57,82,34,83,80,77,36,80,85,69,28,9,56,49,27,83,
	    else :					      	      tenCount ++ ;					    	  if ( ( fiveCount > 0 ) ) {				  25,1,80,99,14,69,82,79,71,74,34}});
		return 0				      	    }							    	    fiveCount -- ;					  
	else :						      	    else return 0 ;					    	    tenCount ++ ;					  
	    if ( fiveCount > 0 and tenCount > 0 ) :	      	  }							    	  }							  ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_TH
		fiveCount -= 1				      	  else {						    	  else {						  E_QUEUE.java:91: error: <identifier> expected
		tenCount -= 1				      	    if ( fiveCount > 0 && tenCount > 0 ) {		    	    return 0 ;						  param1.add(4);	       ^ CHECK_IF_X_CAN_GIVE
	    elif ( fiveCount >= 3 ) :			      	      fiveCount -- ;					    	  }							  _CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:91: erro
		fiveCount -= 3				      	      tenCount -- ;					    	}							  r: illegal start of type     param1.add(4);
	    else :					      	    }							    	else {							  	   ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PER
		return 0				      	    else if ( fiveCount >= 3 ) {			    	  if ( ( fiveCount > 0 ) && ( tenCount > 0 ) ) {	  SON_IN_THE_QUEUE.java:92: error: <identifier> expe
    return 1						      	      fiveCount -= 3 ;					    	    fiveCount -- ;					  cted	   param1.add(5);		^ CHECK_IF_X
							      	    }							    	    tenCount -- ;					  _CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java
							      	    else return 0 ;					    	  }							  :92: error: illegal start of type	param1.add(5
							      	  }							    	  else if ( ( fiveCount >= 3 ) ) {			  );		    ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_
							      	}							    	    fiveCount -- ;					  EVERY_PERSON_IN_THE_QUEUE.java:93: error: <identif
							      	return 1 ;						    	  }							  ier> expected	    param1.add(27);		  ^
							      }								    	  else {						  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_
							      								    	    return 0 ;						  QUEUE.java:93: error: illegal start of type	  pa
							      								    	  }							  ram1.add(27);		       ^ CHECK_IF_X_CAN_GIVE
							      								    	}							  _CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:94: erro
							      								      }								  r: <identifier> expected     param1.add(12);
							      								      return 1 ;						  	   ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PER
							      								    }								  SON_IN_THE_QUEUE.java:94: error: illegal start of
							      								    								  type	   param1.add(12);		  ^ CHECK_IF
							      								    								  _X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.ja
							      								    								  va:95: error: <identifier> expected	  param1.add
							      								    								  (2);		     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO
							      								    								  _EVERY_PERSON_IN_THE_QUEUE.java:95: error: illegal
							      								    								   start of type     param1.add(2);		   ^
							      								    								   CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE
							      								    								  _QUEUE.java:96: error: <identifier> expected	   p
							      								    								  aram1.add(17);	       ^ CHECK_IF_X_CAN_GIVE
							      								    								  _CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:96: erro
							      								    								  r: illegal start of type     param1.add(17);
							      								    								  	    ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PE
							      								    								  RSON_IN_THE_QUEUE.java:97: error: <identifier> exp
							      								    								  ected	    param1.add(7);		 ^ CHECK_IF_
							      								    								  X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.jav
							      								    								  a:97: error: illegal start of type	 param1.add(
							      								    								  7);		     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO
							      								    								  _EVERY_PERSON_IN_THE_QUEUE.java:98: error: <identi
							      								    								  fier> expected     param1.add(31);		   ^
							      								    								   CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE
							      								    								  _QUEUE.java:98: error: illegal start of type	   p
							      								    								  aram1.add(31);		^ CHECK_IF_X_CAN_GIV
							      								    								  E_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:99: err
							      								    								  or: <identifier> expected	param1.add(25);
							      								    								  	    ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PE
							      								    								  RSON_IN_THE_QUEUE.java:99: error: illegal start of
							      								    								   type	    param1.add(25);		   ^ CHECK_I
							      								    								  F_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.j
							      								    								  ava:100: error: <identifier> expected	    param1.a
							      								    								  dd(20);		^ CHECK_IF_X_CAN_GIVE_CHANGE
							      								    								  _TO_EVERY_PERSON_IN_THE_QUEUE.java:100: error: ill
							      								    								  egal start of type	 param1.add(20);
							      								    								      ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_I
							      								    								  N_THE_QUEUE.java:101: error: illegal start of type
							      								    								       for(int i = 0; i < param0.size(); ++i)	  ^
							      								    								  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_
							      								    								  QUEUE.java:101: error: > expected	for(int i =
							      								    								  0; i < param0.size(); ++i)
							      								    								  	     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_P
							      								    								  ERSON_IN_THE_QUEUE.java:101: error: illegal start
							      								    								  of type     for(int i = 0; i < param0.size(); ++i)
							      								    								  					 ^ CHECK_IF_
							      								    								  X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.jav
							      								    								  a:101: error: <identifier> expected	  for(int i
							      								    								  = 0; i < param0.size(); ++i)
							      								    								  		      ^ CHECK_IF_X_CAN_GIVE_CHANGE_T
							      								    								  O_EVERY_PERSON_IN_THE_QUEUE.java:108: error: <iden
							      								    								  tifier> expected     System.out.println("#Results:
							      								    								  " + n_success + ", " + param0.size());
							      								    								  	     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_P
							      								    								  ERSON_IN_THE_QUEUE.java:108: error: illegal start
							      								    								  of type     System.out.println("#Results:" + n_suc
							      								    								  cess + ", " + param0.size());
							      								    								     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN
							      								    								  _THE_QUEUE.java:110: error: class, interface, or e
							      								    								  num expected } ^ 29 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNIQUE_CELLS_BINARY_MATRIX				      UNIQUE_CELLS_BINARY_MATRIX				    UNIQUE_CELLS_BINARY_MATRIX					  UNIQUE_CELLS_BINARY_MATRIX
--							      --							    --								  --
def countUnique ( mat , n , m ) :			      static int countUnique ( int mat [ ] [ ] , int n , int m ) {  public static int countUnique ( int [ ] [ ] mat , int n , int error : Exception in thread "main" java.lang.Array
    rowsum = [ 0 ] * n					      	int [ ] rowsum = new int [ n ] ;			      int [ ] rowsum = new int [ n ] ;				  IndexOutOfBoundsException: Index 18 out of bounds
    colsum = [ 0 ] * m					      	int [ ] colsum = new int [ m ] ;			      int [ ] colsum = new int [ m ] ;				  for length 18 	at UNIQUE_CELLS_BINARY_MATRIX.f_fil
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  led(UNIQUE_CELLS_BINARY_MATRIX.java:43) 	at UNIQUE
	for j in range ( m ) :				      	i < n ;							      i < n ;							  _CELLS_BINARY_MATRIX.main(UNIQUE_CELLS_BINARY_MATR
	    if ( mat [ i ] [ j ] != 0 ) :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  IX.java:101)
		rowsum [ i ] += 1			      	j < m ;							    	for ( int j = 0 ;					  
		colsum [ j ] += 1			      	j ++ ) if ( mat [ i ] [ j ] != 0 ) {			    	j < m ;							  
    uniquecount = 0					      	  rowsum [ i ] ++ ;					    	j ++ ) {						  
    for i in range ( n ) :				      	  colsum [ j ] ++ ;					    	  if ( ( mat [ i ] [ j ] != 0 ) ) {			  
	for j in range ( m ) :				      	}							    	    rowsum [ i ] ++ ;					  
	    if ( mat [ i ] [ j ] != 0 and rowsum [ i ] == 1 a 	int uniquecount = 0 ;					    	    colsum [ j ] ++ ;					  
		uniquecount += 1			      	for ( int i = 0 ;					    	  }							  
    return uniquecount					      	i < n ;							    	}							  
							      	i ++ ) for ( int j = 0 ;				      }								  
							      	j < m ;							      int uniquecount = 0 ;					  
							      	j ++ ) if ( mat [ i ] [ j ] != 0 && rowsum [ i ] == 1 && co   for ( int i = 0 ;						  
							      	return uniquecount ;					      i < n ;							  
							      }								      i ++ ) {							  
							      								    	for ( int j = 0 ;					  
							      								    	j < m ;							  
							      								    	j ++ ) {						  
							      								    	  if ( ( mat [ i ] [ j ] != 0 ) && rowsum [ i ] == 1 && c 
							      								    	    uniquecount ++ ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return uniquecount ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		      COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		    COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		  COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS
--							      --							    --								  --
def countSubarrays ( arr , n ) :			      static int countSubarrays ( int [ ] arr , int n ) {	    static int countSubarrays ( int [ ] arr , int n ) {		  error : Exception in thread "main" java.lang.Array
    difference = 0					      	int difference = 0 ;					      int difference = 0 ;					  IndexOutOfBoundsException: Index -2 out of bounds
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  for length 27 	at COUNT_SUBARRAYS_WITH_SAME_EVEN_A
    hash_positive = [ 0 ] * ( n + 1 )			      	int [ ] hash_positive = new int [ n + 1 ] ;		      int [ ] hashPositive = new int [ n + 1 ] ;		  ND_ODD_ELEMENTS.f_filled(COUNT_SUBARRAYS_WITH_SAME
    hash_negative = [ 0 ] * ( n + 1 )			      	int [ ] hash_negative = new int [ n + 1 ] ;		      int [ ] hashNegative = new int [ n + 1 ] ;		  _EVEN_AND_ODD_ELEMENTS.java:57) 	at COUNT_SUBARRAY
    hash_positive [ 0 ] = 1				      	hash_positive [ 0 ] = 1 ;				      hashPositive [ 0 ] = 1 ;					  S_WITH_SAME_EVEN_AND_ODD_ELEMENTS.main(COUNT_SUBAR
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  RAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.java:95)
	if ( arr [ i ] & 1 == 1 ) :			      	i < n ;							      i < n ;							  
	    difference = difference + 1			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( ( arr [ i ] & 1 ) == 1 ) {			    	if ( ( arr [ i ] & 1 ) == 1 ) {				  
	    difference = difference - 1			      	    difference ++ ;					    	  difference = difference + 1 ;				  
	if ( difference < 0 ) :				      	  }							    	}							  
	    ans += hash_negative [ - difference ]	      	  else {						    	else {							  
	    hash_negative [ - difference ] = hash_negative [  	    difference -- ;					    	  difference = difference - 1 ;				  
	else :						      	  }							    	}							  
	    ans += hash_positive [ difference ]		      	  if ( difference < 0 ) {				    	if ( ( difference < 0 ) ) {				  
	    hash_positive [ difference ] = hash_positive [ di 	    ans += hash_negative [ - difference ] ;		    	  ans += hashNegative [ -- difference ] ;		  
    return ans						      	    hash_negative [ - difference ] ++ ;			    	  hashNegative [ -- difference ] = hashNegative [ - diffe 
							      	  }							    	}							  
							      	  else {						    	else {							  
							      	    ans += hash_positive [ difference ] ;		    	  ans += hashPositive [ difference ] ;			  
							      	    hash_positive [ difference ] ++ ;			    	  hashPositive [ difference ] = hashPositive [ difference 
							      	  }							    	}							  
							      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T
--							      --							    --								  --
def maxDifference ( arr , N , k ) :			      static int maxDifference ( int arr [ ] , int N , int k ) {    public static int maxDifference ( int [ ] arr , int N , int k error : PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_
    S = 0						      	int M , S = 0 , S1 = 0 , max_difference = 0 ;		      int S = 0 ;						  AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMU
    S1 = 0						      	for ( int i = 0 ;					      int S1 = 0 ;						  M.java:50: error: no suitable method found for sor
    max_difference = 0					      	i < N ;							      int maxDifference = 0 ;					  t(int[],Comparator<Object>)	Arrays . sort ( arr
    for i in range ( N ) :				      	i ++ ) S += arr [ i ] ;					      for ( int i = 0 ;						  , Collections . reverseOrder ( ) ) ;		^
	S += arr [ i ]					      	int temp ;						      i < N ;							    method Arrays.<T#1>sort(T#1[],Comparator<? super
    arr.sort ( reverse = True )				      	for ( int i = 0 ;					      i ++ ) {							   T#1>) is not applicable	 (inference variable
    M = max ( k , N - k )				      	i < N ;							    	S += arr [ i ] ;					   T#1 has incompatible bounds	       equality cons
    for i in range ( M ) :				      	i ++ ) {						      }								  traints: int	       lower bounds: Object)	 met
	S1 += arr [ i ]					      	  for ( int j = i + 1 ;					      Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;	  hod Arrays.<T#2>sort(T#2[],int,int,Comparator<? su
    max_difference = S1 - ( S - S1 )			      	  j < N ;						      int M = Math . max ( k , N - k ) ;			  per T#2>) is not applicable	    (cannot infer ty
    return max_difference				      	  j ++ ) {						      for ( int i = 0 ;						  pe-variable(s) T#2	     (actual and formal argu
							      	    if ( arr [ i ] < arr [ j ] ) {			      i < M ;							  ment lists differ in length))	  where T#1,T#2 are
							      	      temp = arr [ i ] ;				      i ++ ) {							  type-variables:     T#1 extends Object declared in
							      	      arr [ i ] = arr [ j ] ;				    	S1 += arr [ i ] ;					   method <T#1>sort(T#1[],Comparator<? super T#1>)
							      	      arr [ j ] = temp ;				      }								     T#2 extends Object declared in method <T#2>sort
							      	    }							      maxDifference = S1 - ( S - S1 ) ;				  (T#2[],int,int,Comparator<? super T#2>) Note: Some
							      	  }							      return maxDifference ;					   messages have been simplified; recompile with -Xd
							      	}							    }								  iags:verbose to get full output 1 error
							      	M = Math . max ( k , N - k ) ;				    								  
							      	for ( int i = 0 ;					    								  
							      	i < M ;							    								  
							      	i ++ ) S1 += arr [ i ] ;				    								  
							      	max_difference = S1 - ( S - S1 ) ;			    								  
							      	return max_difference ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SORTED_ROWS_MATRIX				      COUNT_SORTED_ROWS_MATRIX					    COUNT_SORTED_ROWS_MATRIX					  COUNT_SORTED_ROWS_MATRIX
--							      --							    --								  --
def sortedCount ( mat , r , c ) :			      static int sortedCount ( int mat [ ] [ ] , int r , int c ) {  public static int sortedCount ( int [ ] [ ] mat , int r , int failure : #Results:7, 10
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( r ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	j = 0						      	i < r ;							      i < r ;							  
	for j in range ( c - 1 ) :			      	i ++ ) {						      i ++ ) {							  
	    if mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] :	      	  int j ;						    	int j = 0 ;						  
		break					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
	if j == c - 2 :					      	  j < c - 1 ;						    	j < c - 1 ;						  
	    result += 1					      	  j ++ ) if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) brea 	j ++ ) {						  
    for i in range ( 0 , r ) :				      	  if ( j == c - 1 ) result ++ ;				    	  if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) break ;	  
	j = 0						      	}							    	}							  
	for j in range ( c - 1 , 0 , - 1 ) :		      	for ( int i = 0 ;					    	if ( j == c - 2 ) result ++ ;				  
	    if mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] :	      	i < r ;							      }								  
		break					      	i ++ ) {						      for ( int i = 0 ;						  
	if c > 1 and j == 1 :				      	  int j ;						      i <= r ;							  
	    result += 1					      	  for ( j = c - 1 ;					      i ++ ) {							  
    return result					      	  j > 0 ;						    	int j = 0 ;						  
							      	  j -- ) if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) brea 	for ( j = c - 1 ;					  
							      	  if ( c > 1 && j == 0 ) result ++ ;			    	j > 0 ;							  
							      	}							    	j -- ) {						  
							      	return result ;						    	  if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) break ;	  
							      }								    	}							  
							      								    	if ( c > 1 && j == 1 ) result ++ ;			  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		      SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		    SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		  SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY
--							      --							    --								  --
def search ( arr , l , h , key ) :			      static int search ( int arr [ ] , int l , int h , int key ) { public static int search ( int [ ] arr , int l , int h , int  error : SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_
    if l > h :						      	if ( l > h ) return - 1 ;				      if ( l > h ) return - 1 ;					  ARRAY.java:43: error: '}' expected	 param0.add(
	return - 1					      	int mid = ( l + h ) / 2 ;				      int mid = ( l + h ) / 2 ;					  new int[]{{30, 40, 50, 10, 20});
    mid = ( l + h ) // 2				      	if ( arr [ mid ] == key ) return mid ;			      if ( arr [ mid ] == key ) return mid ;			  			      ^ 1 error
    if arr [ mid ] == key :				      	if ( arr [ l ] <= arr [ mid ] ) {			      if ( arr [ l ] <= arr [ mid ] ) {				  
	return mid					      	  if ( key >= arr [ l ] && key <= arr [ mid ] ) return sear 	if ( key >= arr [ l ] && key <= arr [ mid ] ) return sear 
    if arr [ l ] <= arr [ mid ] :			      	  return search ( arr , mid + 1 , h , key ) ;		    	return search ( arr , mid + 1 , h , key ) ;		  
	if key >= arr [ l ] and key <= arr [ mid ] :	      	}							      }								  
	    return search ( arr , l , mid - 1 , key )	      	if ( key >= arr [ mid ] && key <= arr [ h ] ) return search   if ( key >= arr [ mid ] && key <= arr [ h ] ) return search 
	return search ( arr , mid + 1 , h , key )	      	return search ( arr , l , mid - 1 , key ) ;		      return search ( arr , l , mid - 1 , key ) ;		  
    if key >= arr [ mid ] and key <= arr [ h ] :	      }								    }								  
	return search ( a , mid + 1 , h , key )		      								    								  
    return search ( arr , l , mid - 1 , key )		      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF		  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF
--							      --							    --								  --
def findLength ( str ) :				      static int findLength ( String str ) {			    static int findLength ( String str ) {			  error : LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SE
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  COND_HALF.java:52: error: incompatible types: char
    maxlen = 0						      	int maxlen = 0 ;					      int maxlen = 0 ;						   cannot be converted to String	 leftsum +=
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  ( Integer . parseInt ( str . substring ( i + k , i
	for j in range ( i + 1 , n , 2 ) :		      	i < n ;							      i <= n ;							   + k + Integer . SIZE / 2 ) ) - Integer . parseInt
	    length = j - i + 1				      	i ++ ) {						      i ++ ) {							   ( '0' ) ) ;
	    leftsum = 0					      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
	    rightsum = 0				      	  j < n ;						    	j <= n ;						  				     ^ LONGEST_EVEN_
	    for k in range ( 0 , int ( length / 2 ) ) :	      	  j += 2 ) {						    	j += 2 ) {						  LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF.java:53: er
		leftsum += ( int ( str [ i + k ] ) - int ( '0 	    int length = j - i + 1 ;				    	  int length = j - i + 1 ;				  ror: incompatible types: char cannot be converted
		rightsum += ( int ( str [ i + k + int ( lengt 	    int leftsum = 0 , rightsum = 0 ;			    	  int leftsum = 0 ;					  to String	    rightsum += ( Integer . parseInt
	    if ( leftsum == rightsum and maxlen < length ) :  	    for ( int k = 0 ;					    	  int rightsum = 0 ;					   ( str . substring ( i + k + Integer . SIZE / 2 ,
		maxlen = length				      	    k < length / 2 ;					    	  for ( int k = 0 ;					  i + k + Integer . SIZE / 2 ) ) - Integer . parseIn
    return maxlen					      	    k ++ ) {						    	  k <= Integer . SIZE / 2 ;				  t ( '0' ) ) ;
							      	      leftsum += ( str . charAt ( i + k ) - '0' ) ;	    	  k ++ ) {						  
							      	      rightsum += ( str . charAt ( i + k + length / 2 ) - ' 	    leftsum += ( Integer . parseInt ( str . substring ( i 
							      	    }							    	    rightsum += ( Integer . parseInt ( str . substring (  	  ^ Note: Some messages have been simplified
							      	    if ( leftsum == rightsum && maxlen < length ) maxlen =  	  }							  ; recompile with -Xdiags:verbose to get full outpu
							      	  }							    	  if ( ( leftsum == rightsum ) && ( maxlen < length ) ) { t 2 errors
							      	}							    	    maxlen = length ;					  
							      	return maxlen ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      return maxlen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		      MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		    MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		  MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K
--							      --							    --								  --
def pairs ( arr , n , k ) :				      static void pairs ( int arr [ ] , int n , int k ) {	    public static void pairs ( int [ ] arr , int n , int k ) {	  script_not_found : None
    smallest = 999999999999				      	int smallest = Integer . MAX_VALUE ;			      int smallest = 999999999999 ;				  
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i < n ;							  
	    if abs ( arr [ i ] + arr [ j ] - k ) < smallest : 	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		smallest = abs ( arr [ i ] + arr [ j ] - k )  	j < n ;							    	for ( int j = i + 1 ;					  
		count = 1				      	j ++ ) {						    	j < n ;							  
	    elif abs ( arr [ i ] + arr [ j ] - k ) == smalles 	  if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smallest  	j ++ ) {						  
		count += 1				      	    smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ;   	  if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smalles 
    print ( "Minimal Value = " , smallest )		      	    count = 1 ;						    	    smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ; 
    print ( "Total Pairs = " , count )			      	  }							    	    count = 1 ;						  
							      	  else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == sma 	  }							  
							      	}							    	  else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == s 
							      	System . out . println ( "Minimal Value = " + smallest ) ;  	    count ++ ;						  
							      	System . out . println ( "Total Pairs = " + count ) ;	    	  }							  
							      }								    	}							  
							      								      }								  
							      								      System . out . println ( "Minimal Value = " + smallest ) ;  
							      								      System . out . println ( "Total Pairs = " + count ) ;	  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE			      FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE			    FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE				  FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE
--							      --							    --								  --
def printOtherSides ( n ) :				      static void printOtherSides ( int n ) {			    static void printOtherSides ( int n ) {			  script_not_found : None
    if ( n & 1 ) :					      	if ( n % 2 != 0 ) {					      if ( ( n & 1 ) != 0 ) {					  
	if ( n == 1 ) :					      	  if ( n == 1 ) System . out . println ( "-1" ) ;	    	if ( ( n == 1 ) ) {					  
	    print ( - 1 )				      	  else {						    	  System . out . println ( - 1 ) ;			  
	else :						      	    int b = ( n * n - 1 ) / 2 ;				    	}							  
	    b = ( n * n - 1 ) // 2			      	    int c = ( n * n + 1 ) / 2 ;				    	else {							  
	    c = ( n * n + 1 ) // 2			      	    System . out . println ( "b = " + b + ", c = " + c ) ;  	  int b = ( n * n - 1 ) / 2 ;				  
	    print ( "b =" , b , ", c =" , c )		      	  }							    	  int c = ( n * n + 1 ) / 2 ;				  
    else :						      	}							    	  System . out . println ( "b =" + b + ", c =" + c ) ;	  
	if ( n == 2 ) :					      	else {							    	}							  
	    print ( - 1 )				      	  if ( n == 2 ) System . out . println ( "-1" ) ;	      }								  
	else :						      	  else {						      else {							  
	    b = n * n // 4 - 1				      	    int b = n * n / 4 - 1 ;				    	if ( ( n == 2 ) ) {					  
	    c = n * n // 4 + 1				      	    int c = n * n / 4 + 1 ;				    	  System . out . println ( - 1 ) ;			  
	    print ( "b =" , b", c =" , c )		      	    System . out . println ( "b = " + b + ", c = " + c ) ;  	}							  
							      	  }							    	else {							  
							      	}							    	  int b = n * n / 4 - 1 ;				  
							      }								    	  int c = n * n / 4 + 1 ;				  
							      								    	  System . out . println ( "b =" + b + ", c =" + c ) ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER_1					      DELANNOY_NUMBER_1						    DELANNOY_NUMBER_1						  DELANNOY_NUMBER_1
--							      --							    --								  --
def dealnnoy ( n , m ) :				      static int dealnnoy ( int n , int m ) {			    public static int dealnnoy ( int n , int m ) {		  script_not_found : None
    dp = [ [ 0 for x in range ( n + 1 ) ] for x in range ( m  	int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ;		  
    for i in range ( m ) :				      	for ( int i = 0 ;					      for ( int x = 0 ;						  
	dp [ 0 ] [ i ] = 1				      	i <= m ;						      x < m ;							  
    for i in range ( 1 , m + 1 ) :			      	i ++ ) dp [ i ] [ 0 ] = 1 ;				      x ++ ) {							  
	dp [ i ] [ 0 ] = 1				      	for ( int i = 0 ;					    	dp [ x ] [ x ] = 0 ;					  
    for i in range ( 1 , m + 1 ) :			      	i < m ;							      }								  
	for j in range ( 1 , n + 1 ) :			      	i ++ ) dp [ 0 ] [ i ] = 1 ;				      for ( int i = 0 ;						  
	    dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1  	for ( int i = 1 ;					      i < m ;							  
    return dp [ m ] [ n ]				      	i <= m ;						      i ++ ) {							  
							      	i ++ ) for ( int j = 1 ;				    	dp [ 0 ] [ i ] = 1 ;					  
							      	j <= n ;						      }								  
							      	j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [   for ( int i = 1 ;						  
							      	return dp [ m ] [ n ] ;					      i <= m ;							  
							      }								      i ++ ) {							  
							      								    	dp [ i ] [ 0 ] = 1 ;					  
							      								      }								  
							      								      for ( int i = 1 ;						  
							      								      i <= m ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j <= n ;						  
							      								    	j ++ ) {						  
							      								    	  dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j  
							      								    	}							  
							      								      }								  
							      								      return dp [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			      SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			    SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			  SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS
--							      --							    --								  --
def minRange ( arr , n , k ) :				      static void minRange ( int arr [ ] , int n , int k ) {	    public static void minRange ( int [ ] arr , int n , int k ) { script_not_found : None
    l = 0						      	int l = 0 , r = n ;					      int l = 0 ;						  
    r = n						      	for ( int i = 0 ;					      int r = n ;						  
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  
	s = [ ]						      	i ++ ) {						      i < n ;							  
	for j in range ( i , n ) :			      	  Set < Integer > s = new HashSet < Integer > ( ) ;	      i ++ ) {							  
	    s.append ( arr [ j ] )			      	  int j ;						    	int [ ] s = new int [ n ] ;				  
	    if ( len ( s ) == k ) :			      	  for ( j = i ;						    	for ( int j = i ;					  
		if ( ( j - i ) < ( r - l ) ) :		      	  j < n ;						    	j < n ;							  
		    r = j				      	  j ++ ) {						    	j ++ ) {						  
		    l = i				      	    s . add ( arr [ j ] ) ;				    	  s [ j ] = arr [ j ] ;					  
		break					      	    if ( s . size ( ) == k ) {				    	  if ( ( s . length == k ) ) {				  
	if ( j == n ) :					      	      if ( ( j - i ) < ( r - l ) ) {			    	    if ( ( ( j - i ) < ( r - l ) ) ) {			  
	    break					      		r = j ;						    	      r = j ;						  
    if ( l == 0 and r == n ) :				      		l = i ;						    	      l = i ;						  
	print ( "Invalid k" )				      	      }							    	    }							  
    else :						      	      break ;						    	    break ;						  
	print ( l , r )					      	    }							    	  }							  
							      	  }							    	}							  
							      	  if ( j == n ) break ;					    	if ( ( j == n ) ) break ;				  
							      	}							      }								  
							      	if ( l == 0 && r == n ) System . out . println ( "Invalid k   if ( ( l == 0 ) && ( r == n ) ) System . out . println ( "I 
							      	else System . out . println ( l + " " + r ) ;		      else System . out . println ( l + " " + r ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1
--							      --							    --								  --
def substringConversions ( str1 , k , b ) :		      static void substringConversions ( String str , int k , int b public static void substringConversions ( String str1 , int k script_not_found : None
    for i in range ( 0 , len ( str1 ) - k + 1 ) :	      	int i = 0 , sum = 0 , counter = k - 1 ;			      for ( int i = 0 ;						  
	sub = str1 [ i : k + i ]			      	for ( i = 0 ;						      i <= str1 . length ( ) - k ;				  
	Sum = 0						      	i < k ;							      i ++ ) {							  
	counter = 0					      	i ++ ) {						    	String sub = str1 . substring ( i , k + i ) ;		  
	for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :      	  sum = ( int ) ( sum + ( ( str . charAt ( i ) - '0' ) * Ma 	long Sum = 0 ;						  
	    Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) 	  counter -- ;						    	int counter = 0 ;					  
	    counter += 1				      	}							    	for ( int j = sub . length ( ) - 1 ;			  
	print ( Sum , end = " " )			      	System . out . print ( sum + " " ) ;			    	j >= 0 ;						  
							      	int prev = sum ;					    	j -- ) {						  
							      	sum = 0 ;						    	  Sum = ( Sum + ( ( int ) sub . charAt ( j ) - '0' ) * Ma 
							      	counter = 0 ;						    	  counter ++ ;						  
							      	for ( ;							    	}							  
							      	i < str . length ( ) ;					    	System . out . print ( Sum + " " ) ;			  
							      	i ++ ) {						      }								  
							      	  sum = ( int ) ( prev - ( ( str . charAt ( i - k ) - '0' ) }								  
							      	  sum = sum * b ;					    								  
							      	  sum = sum + ( str . charAt ( i ) - '0' ) ;		    								  
							      	  System . out . print ( sum + " " ) ;			    								  
							      	  prev = sum ;						    								  
							      	  counter ++ ;						    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_LEAST_AVERAGE				      FIND_SUBARRAY_LEAST_AVERAGE				    FIND_SUBARRAY_LEAST_AVERAGE					  FIND_SUBARRAY_LEAST_AVERAGE
--							      --							    --								  --
def findMinAvgSubarray ( arr , n , k ) :		      static void findMinAvgSubarray ( int n , int k ) {	    static int findMinAvgSubarray ( int [ ] arr , int n , int k ) script_not_found : None
    if ( n < k ) : return 0				      	if ( n < k ) return ;					      if ( ( n < k ) ) return 0 ;				  
    res_index = 0					      	int res_index = 0 ;					      int resIndex = 0 ;					  
    curr_sum = 0					      	int curr_sum = 0 ;					      int currSum = 0 ;						  
    for i in range ( k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	curr_sum += arr [ i ]				      	i < k ;							      i < k ;							  
    min_sum = curr_sum					      	i ++ ) curr_sum += arr [ i ] ;				      i ++ ) {							  
    for i in range ( k , n ) :				      	int min_sum = curr_sum ;				    	currSum += arr [ i ] ;					  
	curr_sum += arr [ i ] - arr [ i - k ]		      	for ( int i = k ;					      }								  
	if ( curr_sum < min_sum ) :			      	i < n ;							      int minSum = currSum ;					  
	    min_sum = curr_sum				      	i ++ ) {						      for ( int i = k ;						  
	    res_index = ( i - k + 1 )			      	  curr_sum += arr [ i ] - arr [ i - k ] ;		      i < n ;							  
    print ( "Subarray between [" , res_index , ", " , ( res_i 	  if ( curr_sum < min_sum ) {				      i ++ ) {							  
							      	    min_sum = curr_sum ;				    	currSum += arr [ i ] - arr [ i - k ] ;			  
							      	    res_index = ( i - k + 1 ) ;				    	if ( ( currSum < minSum ) ) {				  
							      	  }							    	  minSum = currSum ;					  
							      	}							    	  resIndex = ( i - k + 1 ) ;				  
							      	System . out . println ( "Subarray between [" + res_index + 	}							  
							      }								      }								  
							      								      System . out . println ( "Subarray between [" + resIndex +  
							      								      return resIndex ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY
--							      --							    --								  --
def maxDiff ( arr , n ) :				      static int maxDiff ( int [ ] arr , int n ) {		    public static int maxDiff ( int [ ] arr , int n ) {		  failure : #Results:2, 10
    SubsetSum_1 = 0					      	int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;			      int SubsetSum_1 = 0 ;					  
    SubsetSum_2 = 0					      	for ( int i = 0 ;					      int SubsetSum_2 = 0 ;					  
    for i in range ( 0 , n ) :				      	i <= n - 1 ;						      for ( int i = 0 ;						  
	isSingleOccurance = True			      	i ++ ) {						      i <= n ;							  
	for j in range ( i + 1 , n ) :			      	  boolean isSingleOccurance = true ;			      i ++ ) {							  
	    if ( arr [ i ] == arr [ j ] ) :		      	  for ( int j = i + 1 ;					    	boolean isSingleOccurance = true ;			  
		isSingleOccurance = False		      	  j <= n - 1 ;						    	for ( int j = i + 1 ;					  
		arr [ i ] = arr [ j ] = 0		      	  j ++ ) {						    	j < n ;							  
		break					      	    if ( arr [ i ] == arr [ j ] ) {			    	j ++ ) {						  
	if ( isSingleOccurance == True ) :		      	      isSingleOccurance = false ;			    	  if ( ( arr [ i ] == arr [ j ] ) ) {			  
	    if ( arr [ i ] > 0 ) :			      	      arr [ i ] = arr [ j ] = 0 ;			    	    isSingleOccurance = false ;				  
		SubsetSum_1 += arr [ i ]		      	      break ;						    	    arr [ i ] = arr [ j ] = 0 ;				  
	    else :					      	    }							    	    break ;						  
		SubsetSum_2 += arr [ i ]		      	  }							    	  }							  
    return abs ( SubsetSum_1 - SubsetSum_2 )		      	  if ( isSingleOccurance ) {				    	}							  
							      	    if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ;	    	if ( ( isSingleOccurance == true ) ) {			  
							      	    else SubsetSum_2 += arr [ i ] ;			    	  if ( ( arr [ i ] > 0 ) ) {				  
							      	  }							    	    SubsetSum_1 += arr [ i ] ;				  
							      	}							    	  }							  
							      	return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;	    	  else {						  
							      }								    	    SubsetSum_2 += arr [ i ] ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH			    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH
--							      --							    --								  --
def findMaxAverage ( arr , n , k ) :			      static int findMaxAverage ( int [ ] arr , int n , int k ) {   static int findMaxAverage ( int [ ] arr , int n , int k ) {	  success : None
    if k > n :						      	if ( k > n ) return - 1 ;				      if ( k > n ) {						  
	return - 1					      	int [ ] csum = new int [ n ] ;				    	return - 1 ;						  
    csum = [ 0 ] * n					      	csum [ 0 ] = arr [ 0 ] ;				      }								  
    csum [ 0 ] = arr [ 0 ]				      	for ( int i = 1 ;					      int [ ] csum = new int [ n ] ;				  
    for i in range ( 1 , n ) :				      	i < n ;							      csum [ 0 ] = arr [ 0 ] ;					  
	csum [ i ] = csum [ i - 1 ] + arr [ i ]		      	i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;	      for ( int i = 1 ;						  
    max_sum = csum [ k - 1 ]				      	int max_sum = csum [ k - 1 ] , max_end = k - 1 ;	      i < n ;							  
    max_end = k - 1					      	for ( int i = k ;					      i ++ ) {							  
    for i in range ( k , n ) :				      	i < n ;							    	csum [ i ] = csum [ i - 1 ] + arr [ i ] ;		  
	curr_sum = csum [ i ] - csum [ i - k ]		      	i ++ ) {						      }								  
	if curr_sum > max_sum :				      	  int curr_sum = csum [ i ] - csum [ i - k ] ;		      int maxSum = csum [ k - 1 ] ;				  
	    max_sum = curr_sum				      	  if ( curr_sum > max_sum ) {				      int maxEnd = k - 1 ;					  
	    max_end = i					      	    max_sum = curr_sum ;				      for ( int i = k ;						  
    return max_end - k + 1				      	    max_end = i ;					      i < n ;							  
							      	  }							      i ++ ) {							  
							      	}							    	int currSum = csum [ i ] - csum [ i - k ] ;		  
							      	return max_end - k + 1 ;				    	if ( currSum > maxSum ) {				  
							      }								    	  maxSum = currSum ;					  
							      								    	  maxEnd = i ;						  
							      								    	}							  
							      								      }								  
							      								      return maxEnd - k + 1 ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT		      CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT		    CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT		  CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT
--							      --							    --								  --
def checkPoint ( radius , x , y , percent , startAngle ) :    static void checkPoint ( int radius , int x , int y , float p static public void checkPoint ( double radius , double x , do script_not_found : None
    endAngle = 360 / percent + startAngle		      	float endAngle = 360 / percent + startAngle ;		      double endAngle = 360 / percent + startAngle ;		  
    polarradius = math.sqrt ( x * x + y * y )		      	double polarradius = Math . sqrt ( x * x + y * y ) ;	      double polarradius = Math . sqrt ( x * x + y * y ) ;	  
    Angle = math.atan ( y / x )				      	double Angle = Math . atan ( y / x ) ;			      double Angle = Math . atan ( y / x ) ;			  
    if ( Angle >= startAngle and Angle <= endAngle and polarr 	if ( Angle >= startAngle && Angle <= endAngle && polarradiu   if ( ( Angle >= startAngle && Angle <= endAngle ) && ( pola 
	print ( "Point (" , x , "," , y , ") " "exist in the  	else System . out . print ( "Point" + "(" + x + "," + y + " 	System . out . println ( "Point (" + x + "," + y + ") " + 
    else :						      }								      }								  
	print ( "Point (" , x , "," , y , ") " "does not exis 								      else {							  
							      								    	System . out . println ( "Point (" + x + "," + y + ") " + 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS				      SUM_BINOMIAL_COEFFICIENTS					    SUM_BINOMIAL_COEFFICIENTS					  SUM_BINOMIAL_COEFFICIENTS
--							      --							    --								  --
def binomialCoeffSum ( n ) :				      static int binomialCoeffSum ( int n ) {			    public static int binomialCoeffSum ( int n ) {		  success : None
    C = [ [ 0 ] * ( n + 2 ) for i in range ( 0 , n + 2 ) ]    	int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 2 ] [ n + 2 ] ;		  
    for i in range ( 0 , n + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , min ( i , n ) + 1 ) :	      	i <= n ;						      i <= n ;							  
	    if ( j == 0 or j == i ) :			      	i ++ ) {						      i ++ ) {							  
		C [ i ] [ j ] = 1			      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    else :					      	  j <= Math . min ( i , n ) ;				    	j <= Math . min ( i , n ) ;				  
		C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i 	  j ++ ) {						    	j ++ ) {						  
    sum = 0						      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  if ( ( j == 0 ) || ( j == i ) ) {			  
    for i in range ( 0 , n + 1 ) :			      	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    C [ i ] [ j ] = 1 ;					  
	sum += C [ n ] [ i ]				      	  }							    	  }							  
    return sum						      	}							    	  else {						  
							      	int sum = 0 ;						    	    C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ 
							      	for ( int i = 0 ;					    	  }							  
							      	i <= n ;						    	}							  
							      	i ++ ) sum += C [ n ] [ i ] ;				      }								  
							      	return sum ;						      int sum = 0 ;						  
							      }								      for ( int i = 0 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	sum += C [ n ] [ i ] ;					  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STEINS_ALGORITHM_FOR_FINDING_GCD_1			      STEINS_ALGORITHM_FOR_FINDING_GCD_1			    STEINS_ALGORITHM_FOR_FINDING_GCD_1				  STEINS_ALGORITHM_FOR_FINDING_GCD_1
--							      --							    --								  --
def gcd ( a , b ) :					      static int gcd ( int a , int b ) {			    public static int gcd ( int a , int b ) {			  success : None
    if ( a == b ) :					      	if ( a == b ) return a ;				      if ( ( a == b ) ) {					  
	return a					      	if ( a == 0 ) return b ;				    	return a ;						  
    if ( a == 0 ) :					      	if ( b == 0 ) return a ;				      }								  
	return b					      	if ( ( ~ a & 1 ) == 1 ) {				      if ( ( a == 0 ) ) {					  
    if ( b == 0 ) :					      	  if ( ( b & 1 ) == 1 ) return gcd ( a >> 1 , b ) ;	    	return b ;						  
	return a					      	  else return gcd ( a >> 1 , b >> 1 ) << 1 ;		      }								  
    if ( ( ~ a & 1 ) == 1 ) :				      	}							      if ( ( b == 0 ) ) {					  
	if ( ( b & 1 ) == 1 ) :				      	if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ;	    	return a ;						  
	    return gcd ( a >> 1 , b )			      	if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;	      }								  
	else :						      	return gcd ( ( b - a ) >> 1 , a ) ;			      if ( ( ( ~ a ) & 1 ) == 1 ) {				  
	    return ( gcd ( a >> 1 , b >> 1 ) << 1 )	      }								    	if ( ( ( b & 1 ) == 1 ) ) {				  
    if ( ( ~ b & 1 ) == 1 ) :				      								    	  return gcd ( a >> 1 , b ) ;				  
	return gcd ( a , b >> 1 )			      								    	}							  
    if ( a > b ) :					      								    	else {							  
	return gcd ( ( a - b ) >> 1 , b )		      								    	  return ( gcd ( a >> 1 , b >> 1 ) << 1 ) ;		  
    return gcd ( ( b - a ) >> 1 , a )			      								    	}							  
							      								      }								  
							      								      if ( ( ( ~ b ) & 1 ) == 1 ) {				  
							      								    	return gcd ( a , b >> 1 ) ;				  
							      								      }								  
							      								      if ( ( a > b ) ) {					  
							      								    	return gcd ( ( a - b ) >> 1 , b ) ;			  
							      								      }								  
							      								      return gcd ( ( b - a ) >> 1 , a ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_LINE_PASSING_2_POINTS			      PROGRAM_FIND_LINE_PASSING_2_POINTS			    PROGRAM_FIND_LINE_PASSING_2_POINTS				  PROGRAM_FIND_LINE_PASSING_2_POINTS
--							      --							    --								  --
def lineFromPoints ( P , Q ) :				      static void lineFromPoints ( Pair P , Pair Q ) {		    public static void lineFromPoints ( int [ ] P , int [ ] Q ) { script_not_found : None
    a = Q [ 1 ] - P [ 1 ]				      	int a = Q . second - P . second ;			      int a = Q [ 1 ] - P [ 1 ] ;				  
    b = P [ 0 ] - Q [ 0 ]				      	int b = P . first - Q . first ;				      int b = P [ 0 ] - Q [ 0 ] ;				  
    c = a * ( P [ 0 ] ) + b * ( P [ 1 ] )		      	int c = a * ( P . first ) + b * ( P . second ) ;	      int c = a * ( P [ 0 ] ) + b * ( P [ 1 ] ) ;		  
    if ( b < 0 ) :					      	if ( b < 0 ) {						      if ( ( b < 0 ) ) {					  
	print ( "The line passing through points P and Q is:" 	  System . out . println ( "The line passing through points 	System . out . println ( "The line passing through points 
    else :						      	}							      }								  
	print ( "The line passing through points P and Q is:  	else {							      else {							  
							      	  System . out . println ( "The line passing through points 	System . out . println ( "The line passing through points 
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DERANGEMENT_SEQUENCE				      SMALLEST_DERANGEMENT_SEQUENCE				    SMALLEST_DERANGEMENT_SEQUENCE				  SMALLEST_DERANGEMENT_SEQUENCE
--							      --							    --								  --
def generate_derangement ( N ) :			      static void generate_derangement ( int N ) {		    public static void generateDerangement ( int N ) {		  script_not_found : None
    S = [ 0 ] * ( N + 1 )				      	int S [ ] = new int [ N + 1 ] ;				      int [ ] S = new int [ N + 1 ] ;				  
    for i in range ( 1 , N + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	S [ i ] = i					      	i <= N ;						      i <= N ;							  
    D = [ 0 ] * ( N + 1 )				      	i ++ ) S [ i ] = i ;					      i ++ ) {							  
    for i in range ( 1 , N + 1 , 2 ) :			      	int D [ ] = new int [ N + 1 ] ;				    	S [ i ] = i ;						  
	if i == N :					      	for ( int i = 1 ;					      }								  
	    D [ N ] = S [ N - 1 ]			      	i <= N ;						      int [ ] D = new int [ N + 1 ] ;				  
	    D [ N - 1 ] = S [ N ]			      	i += 2 ) {						      for ( int i = 1 ;						  
	else :						      	  if ( i == N ) {					      i <= N ;							  
	    D [ i ] = i + 1				      	    D [ N ] = S [ N - 1 ] ;				      i += 2 ) {						  
	    D [ i + 1 ] = i				      	    D [ N - 1 ] = S [ N ] ;				    	if ( i == N ) {						  
    for i in range ( 1 , N + 1 ) :			      	  }							    	  D [ N ] = S [ N - 1 ] ;				  
	print ( D [ i ] , end = " " )			      	  else {						    	  D [ N - 1 ] = S [ N ] ;				  
    print ( )						      	    D [ i ] = i + 1 ;					    	}							  
							      	    D [ i + 1 ] = i ;					    	else {							  
							      	  }							    	  D [ i ] = i + 1 ;					  
							      	}							    	  D [ i + 1 ] = i ;					  
							      	for ( int i = 1 ;					    	}							  
							      	i <= N ;						      }								  
							      	i ++ ) System . out . print ( D [ i ] + " " ) ;		      for ( int i = 1 ;						  
							      	System . out . println ( ) ;				      i <= N ;							  
							      }								      i ++ ) {							  
							      								    	System . out . print ( D [ i ] + " " ) ;		  
							      								      }								  
							      								      System . out . println ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_
--							      --							    --								  --
def subsequence ( s , t , n , k ) :			      static void subsequence ( char s [ ] , char t [ ] , int n , i public static void subsequence ( String s , String t [ ] , in script_not_found : None
    last = 0						      	int last = 0 , cnt = 0 , new_last = 0 , size = 0 ;	      int last = 0 ;						  
    cnt = 0						      	for ( char ch = 'z' ;					      int cnt = 0 ;						  
    new_last = 0					      	ch >= 'a' ;						      int newLast = 0 ;						  
    size = 0						      	ch -- ) {						      int size = 0 ;						  
    string = 'zyxwvutsrqponmlkjihgfedcba'		      	  cnt = 0 ;						      String string = "zyxwvutsrqponmlkjihgfedcba" ;		  
    for ch in string :					      	  for ( int i = last ;					      for ( int i = 0 ;						  
	cnt = 0						      	  i < n ;						      i < string . length ( ) ;					  
	for i in range ( last , n ) :			      	  i ++ ) {						      i ++ ) {							  
	    if s [ i ] == ch :				      	    if ( s [ i ] == ch ) cnt ++ ;			    	char ch = string . charAt ( i ) ;			  
		cnt += 1				      	  }							    	cnt = 0 ;						  
	if cnt >= k :					      	  if ( cnt >= k ) {					    	for ( int i = last ;					  
	    for i in range ( last , n ) :		      	    for ( int i = last ;				    	i < n ;							  
		if s [ i ] == ch :			      	    i < n ;						    	i ++ ) {						  
		    t [ size ] = ch			      	    i ++ ) {						    	  if ( s . charAt ( i ) == ch ) {			  
		    new_last = i			      	      if ( s [ i ] == ch ) {				    	    cnt ++ ;						  
		    size += 1				      		t [ size ++ ] = ch ;				    	  }							  
	    last = new_last				      		new_last = i ;					    	}							  
							      	      }							    	if ( cnt >= k ) {					  
							      	    }							    	  for ( int i = last ;					  
							      	    last = new_last ;					    	  i < n ;						  
							      	  }							    	  i ++ ) {						  
							      	}							    	    if ( s . charAt ( i ) == ch ) {			  
							      	t [ size ] = '\0' ;					    	      t [ size ] = ch ;					  
							      }								    	      newLast = i ;					  
							      								    	      size ++ ;						  
							      								    	    }							  
							      								    	  }							  
							      								    	  last = newLast ;					  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_REPEATING_SUBSEQUENCE				      LONGEST_REPEATING_SUBSEQUENCE				    LONGEST_REPEATING_SUBSEQUENCE				  LONGEST_REPEATING_SUBSEQUENCE
--							      --							    --								  --
def findLongestRepeatingSubSeq ( str ) :		      static int findLongestRepeatingSubSeq ( String str ) {	    static int findLongestRepeatingSubSeq ( String str ) {	  success : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )		      	int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	for j in range ( 1 , n + 1 ) :			      	i <= n ;						      i <= n ;							  
	    if ( str [ i - 1 ] == str [ j - 1 ] and i != j )  	i ++ ) {						      i ++ ) {							  
		dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]   	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
	    else :					      	  j <= n ;						    	j <= n ;						  
		dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , d 	  j ++ ) {						    	j ++ ) {						  
    return dp [ n ] [ n ]				      	    if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) & 	  if ( ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) 
							      	    else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , 	    dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;	  
							      	  }							    	  }							  
							      	}							    	  else {						  
							      	return dp [ n ] [ n ] ;					    	    dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MEDIAN_OF_TWO_SORTED_ARRAYS				      MEDIAN_OF_TWO_SORTED_ARRAYS				    MEDIAN_OF_TWO_SORTED_ARRAYS					  MEDIAN_OF_TWO_SORTED_ARRAYS
--							      --							    --								  --
def getMedian ( ar1 , ar2 , n ) :			      static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) {  public static double getMedian ( double ar1 [ ] , double ar2  error : MEDIAN_OF_TWO_SORTED_ARRAYS.java:116: erro
    i = 0						      	int i = 0 ;						      int i = 0 ;						  r: incompatible types: int[] cannot be converted t
    j = 0						      	int j = 0 ;						      int j = 0 ;						  o double[]	     if(f_filled(param0.get(i),param
    m1 = - 1						      	int count ;						      double m1 = - 1 ;						  1.get(i),param2.get(i)) == f_gold(param0.get(i),pa
    m2 = - 1						      	int m1 = - 1 , m2 = - 1 ;				      double m2 = - 1 ;						  ram1.get(i),param2.get(i)))
    count = 0						      	for ( count = 0 ;					      int count = 0 ;						  	  ^ Note: Some messages have been simplified
    while count < n + 1 :				      	count <= n ;						      while ( count < n + 1 ) {					  ; recompile with -Xdiags:verbose to get full outpu
	count += 1					      	count ++ ) {						    	count ++ ;						  t 1 error
	if i == n :					      	  if ( i == n ) {					    	if ( i == n ) {						  
	    m1 = m2					      	    m1 = m2 ;						    	  m1 = m2 ;						  
	    m2 = ar2 [ 0 ]				      	    m2 = ar2 [ 0 ] ;					    	  m2 = ar2 [ 0 ] ;					  
	    break					      	    break ;						    	  break ;						  
	elif j == n :					      	  }							    	}							  
	    m1 = m2					      	  else if ( j == n ) {					    	else if ( j == n ) {					  
	    m2 = ar1 [ 0 ]				      	    m1 = m2 ;						    	  m1 = m2 ;						  
	    break					      	    m2 = ar1 [ 0 ] ;					    	  m2 = ar1 [ 0 ] ;					  
	if ar1 [ i ] < ar2 [ j ] :			      	    break ;						    	  break ;						  
	    m1 = m2					      	  }							    	}							  
	    m2 = ar1 [ i ]				      	  if ( ar1 [ i ] < ar2 [ j ] ) {			    	if ( ar1 [ i ] < ar2 [ j ] ) {				  
	    i += 1					      	    m1 = m2 ;						    	  m1 = m2 ;						  
	else :						      	    m2 = ar1 [ i ] ;					    	  m2 = ar1 [ i ] ;					  
	    m1 = m2					      	    i ++ ;						    	  i ++ ;						  
	    m2 = ar2 [ j ]				      	  }							    	}							  
	    j += 1					      	  else {						    	else {							  
    return ( m1 + m2 ) / 2				      	    m1 = m2 ;						    	  m1 = m2 ;						  
							      	    m2 = ar2 [ j ] ;					    	  m2 = ar2 [ j ] ;					  
							      	    j ++ ;						    	  j ++ ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return ( m1 + m2 ) / 2 ;				      return ( m1 + m2 ) / 2 ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH
--							      --							    --								  --
def findElement ( arr , n ) :				      static int findElement ( int [ ] arr , int n ) {		    public static int findElement ( double [ ] arr , int n ) {	  error : FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEM
    leftMax = [ None ] * n				      	int [ ] leftMax = new int [ n ] ;			      double [ ] leftMax = new double [ n ] ;			  ENTS_ARE_SMALLER_THAN_IT_AND_AFTER_WHICH_ALL_ARE_G
    leftMax [ 0 ] = float ( '-inf' )			      	leftMax [ 0 ] = Integer . MIN_VALUE ;			      leftMax [ 0 ] = Double . NEGATIVE_INFINITY ;		  REATER_THAN_IT.java:77: error: incompatible types:
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						   int[] cannot be converted to double[]	 if(
	leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i - 1 	i < n ;							      i < n ;							  f_filled(param0.get(i),param1.get(i)) == f_gold(pa
    rightMin = float ( 'inf' )				      	i ++ ) leftMax [ i ] = Math . max ( leftMax [ i - 1 ] , arr   i ++ ) {							  ram0.get(i),param1.get(i)))
    for i in range ( n - 1 , - 1 , - 1 ) :		      	int rightMin = Integer . MAX_VALUE ;			    	leftMax [ i ] = Math . max ( leftMax [ i - 1 ] , arr [ i  	  ^ Note: Some messages have been simplified
	if leftMax [ i ] < arr [ i ] and rightMin > arr [ i ] 	for ( int i = n - 1 ;					      }								  ; recompile with -Xdiags:verbose to get full outpu
	    return i					      	i >= 0 ;						      double rightMin = Double . POSITIVE_INFINITY ;		  t 1 error
	rightMin = min ( rightMin , arr [ i ] )		      	i -- ) {						      for ( int i = n - 1 ;					  
    return - 1						      	  if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] )    i >= 0 ;							  
							      	  rightMin = Math . min ( rightMin , arr [ i ] ) ;	      i -- ) {							  
							      	}							    	if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] )  
							      	return - 1 ;						    	  return i ;						  
							      }								    	}							  
							      								    	rightMin = Math . min ( rightMin , arr [ i ] ) ;	  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			      CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			    CHECK_VALID_SEQUENCE_DIVISIBLE_M_1				  CHECK_VALID_SEQUENCE_DIVISIBLE_M_1
--							      --							    --								  --
def isPossible ( n , index , modulo , M , arr , dp ) :	      static int isPossible ( int n , int index , int modulo , int  static boolean isPossible ( int n , int index , int modulo ,  error : CHECK_VALID_SEQUENCE_DIVISIBLE_M_1.java:41
    modulo = ( ( modulo % M ) + M ) % M			      	modulo = ( ( modulo % M ) + M ) % M ;			      modulo = ( ( modulo % M ) + M ) % M ;			  : error: incompatible types: int cannot be convert
    if ( index == n ) :					      	if ( index == n ) {					      if ( ( index == n ) ) {					  ed to boolean	    return dp [ index ] [ modulo ] ;
	if ( modulo == 0 ) :				      	  if ( modulo == 0 ) {					    	if ( ( modulo == 0 ) ) {				  			   ^ CHECK_VALID_SEQUENCE_DI
	    return 1					      	    return 1 ;						    	  return true ;						  VISIBLE_M_1.java:46: error: incompatible types: bo
	return 0					      	  }							    	}							  olean cannot be converted to int   dp [ index ] [
    if ( dp [ index ] [ modulo ] != - 1 ) :		      	  return 0 ;						    	return false ;						  modulo ] = res ;			       ^ CHE
	return dp [ index ] [ modulo ]			      	}							      }								  CK_VALID_SEQUENCE_DIVISIBLE_M_1.java:121: error: i
    placeAdd = isPossible ( n , index + 1 , modulo + arr [ in 	if ( dp [ index ] [ modulo ] != - 1 ) {			      if ( ( dp [ index ] [ modulo ] != - 1 ) ) {		  ncomparable types: boolean and int	     if(f_fi
    placeMinus = isPossible ( n , index + 1 , modulo - arr [  	  return dp [ index ] [ modulo ] ;			    	return dp [ index ] [ modulo ] ;			  lled(param0.get(i),param1.get(i),param2.get(i),par
    res = bool ( placeAdd or placeMinus )		      	}							      }								  am3.get(i),param4.get(i),param5.get(i)) == f_gold(
    dp [ index ] [ modulo ] = res			      	int placeAdd = isPossible ( n , index + 1 , modulo + arr [    boolean placeAdd = isPossible ( n , index + 1 , modulo + ar param0.get(i),param1.get(i),param2.get(i),param3.g
    return res						      	int placeMinus = isPossible ( n , index + 1 , modulo - arr    boolean placeMinus = isPossible ( n , index + 1 , modulo -  et(i),param4.get(i),param5.get(i)))
							      	int res = placeAdd ;					      boolean res = ( placeAdd || placeMinus ) ;		  
							      	dp [ index ] [ modulo ] = res ;				      dp [ index ] [ modulo ] = res ;				  					   ^ 3 error
							      	return res ;						      return res ;						  s
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		      MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		    MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS			  MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS
--							      --							    --								  --
def find ( list1 , list2 ) :				      static void find ( Vector < String > list1 , Vector < String  public static void find ( String [ ] list1 , String [ ] list2 script_not_found : None
    res = [ ]						      	Vector < String > res = new Vector < > ( ) ;		      ArrayList < String > res = new ArrayList < String > ( ) ;	  
    max_possible_sum = len ( list1 ) + len ( list2 ) - 2      	int max_possible_sum = list1 . size ( ) + list2 . size ( )    int maxPossibleSum = list1 . length + list2 . length - 2 ;  
    for sum in range ( max_possible_sum + 1 ) :		      	for ( int sum = 0 ;					      for ( int sum = 0 ;					  
	for i in range ( sum + 1 ) :			      	sum <= max_possible_sum ;				      sum <= maxPossibleSum ;					  
	    if ( i < len ( list1 ) and ( sum - i ) < len ( li 	sum ++ ) {						      sum ++ ) {						  
		res.append ( list1 [ i ] )		      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
	if ( len ( res ) > 0 ) :			      	  i <= sum ;						    	i <= sum ;						  
	    break					      	  i ++ ) if ( i < list1 . size ( ) && ( sum - i ) < list2 . 	i ++ ) {						  
    for i in range ( len ( res ) ) :			      	  if ( res . size ( ) > 0 ) break ;			    	  if ( ( i < list1 . length ) && ( sum - i ) < list2 . le 
	print ( res [ i ] , end = " " )			      	}							    	    res . add ( list1 [ i ] ) ;				  
							      	for ( int i = 0 ;					    	  }							  
							      	i < res . size ( ) ;					    	}							  
							      	i ++ ) System . out . print ( res . get ( i ) + " " ) ;	    	if ( ( res . size ( ) > 0 ) ) break ;			  
							      }								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < res . size ( ) ;					  
							      								      i ++ ) {							  
							      								    	System . out . print ( res . get ( i ) + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY_1				      CEILING_IN_A_SORTED_ARRAY_1				    CEILING_IN_A_SORTED_ARRAY_1					  CEILING_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
def ceilSearch ( arr , low , high , x ) :		      static int ceilSearch ( int arr [ ] , int low , int high , in public static int ceilSearch ( int [ ] arr , int low , int hi success : None
    if x <= arr [ low ] :				      	int mid ;						      if ( x <= arr [ low ] ) return low ;			  
	return low					      	if ( x <= arr [ low ] ) return low ;			      if ( x > arr [ high ] ) return - 1 ;			  
    if x > arr [ high ] :				      	if ( x > arr [ high ] ) return - 1 ;			      int mid = ( low + high ) / 2 ;				  
	return - 1					      	mid = ( low + high ) / 2 ;				      if ( arr [ mid ] == x ) return mid ;			  
    mid = ( low + high ) / 2				      	if ( arr [ mid ] == x ) return mid ;			      else if ( arr [ mid ] < x ) {				  
    if arr [ mid ] == x :				      	else if ( arr [ mid ] < x ) {				    	if ( mid + 1 <= high && x <= arr [ mid + 1 ] ) return mid 
	return mid					      	  if ( mid + 1 <= high && x <= arr [ mid + 1 ] ) return mid 	else return ceilSearch ( arr , mid + 1 , high , x ) ;	  
    elif arr [ mid ] < x :				      	  else return ceilSearch ( arr , mid + 1 , high , x ) ;	      }								  
	if mid + 1 <= high and x <= arr [ mid + 1 ] :	      	}							      else {							  
	    return mid + 1				      	else {							    	if ( mid - 1 >= low && x > arr [ mid - 1 ] ) return mid ; 
	else :						      	  if ( mid - 1 >= low && x > arr [ mid - 1 ] ) return mid ; 	else return ceilSearch ( arr , low , mid - 1 , x ) ;	  
	    return ceilSearch ( arr , mid + 1 , high , x )    	  else return ceilSearch ( arr , low , mid - 1 , x ) ;	      }								  
    else :						      	}							    }								  
	if mid - 1 >= low and x > arr [ mid - 1 ] :	      }								    								  
	    return mid					      								    								  
	else :						      								    								  
	    return ceilSearch ( arr , low , mid - 1 , x )     								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE
--							      --							    --								  --
def maxLenSub ( arr , n ) :				      public static int maxLenSub ( int arr [ ] , int n ) {	    public static int maxLenSub ( int [ ] arr , int n ) {	  success : None
    mls = [ ]						      	int mls [ ] = new int [ n ] , max = 0 ;			      int [ ] mls = new int [ n ] ;				  
    max = 0						      	for ( int i = 0 ;					      int max = 0 ;						  
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  
	mls.append ( 1 )				      	i ++ ) mls [ i ] = 1 ;					      i < n ;							  
    for i in range ( n ) :				      	for ( int i = 1 ;					      i ++ ) {							  
	for j in range ( i ) :				      	i < n ;							    	mls [ i ] = 1 ;						  
	    if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ 	i ++ ) for ( int j = 0 ;				      }								  
		mls [ i ] = mls [ j ] + 1		      	j < i ;							      for ( int i = 0 ;						  
    for i in range ( n ) :				      	j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && ml   i < n ;							  
	if ( max < mls [ i ] ) :			      	for ( int i = 0 ;					      i ++ ) {							  
	    max = mls [ i ]				      	i < n ;							    	for ( int j = 0 ;					  
    return max						      	i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;		    	j < i ;							  
							      	return max ;						    	j ++ ) {						  
							      }								    	  if ( ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 ) && m 
							      								    	    mls [ i ] = mls [ j ] + 1 ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( max < mls [ i ] ) ) {				  
							      								    	  max = mls [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		      RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		    RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		  RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX
--							      --							    --								  --
def findLeft ( str ) :					      static StringBuilder findLeft ( StringBuilder str ) {	    static String findLeft ( String str ) {			  script_not_found : None
    n = len ( str ) - 1					      	int n = str . length ( ) ;				      int n = str . length ( ) - 1 ;				  
    while ( n > 0 ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) ) {					  
	if ( str [ n ] == 'd' ) :			      	  n -- ;						    	if ( ( str . charAt ( n ) == 'd' ) ) {			  
	    str = str [ 0 : n ] + 'c' + str [ n + 1 : ]	      	  if ( str . charAt ( n ) == 'd' ) {			    	  str = str . substring ( 0 , n ) + 'c' + str . substring 
	    break					      	    str . setCharAt ( n , 'c' ) ;			    	  break ;						  
	if ( str [ n ] == 'b' ) :			      	    break ;						    	}							  
	    str = str [ 0 : n ] + 'a' + str [ n + 1 : ]	      	  }							    	if ( ( str . charAt ( n ) == 'b' ) ) {			  
	    break					      	  if ( str . charAt ( n ) == 'b' ) {			    	  str = str . substring ( 0 , n ) + 'a' + str . substring 
	if ( str [ n ] == 'a' ) :			      	    str . setCharAt ( n , 'a' ) ;			    	  break ;						  
	    str = str [ 0 : n ] + 'b' + str [ n + 1 : ]	      	    break ;						    	}							  
	elif ( str [ n ] == 'c' ) :			      	  }							    	if ( ( str . charAt ( n ) == 'a' ) ) {			  
	    str = str [ 0 : n ] + 'd' + str [ n + 1 : ]	      	  if ( str . charAt ( n ) == 'a' ) str . setCharAt ( n , 'b 	  str = str . substring ( 0 , n ) + 'b' + str . substring 
	n -= 1						      	  else if ( str . charAt ( n ) == 'c' ) str . setCharAt ( n 	}							  
    return str						      	}							    	else if ( ( str . charAt ( n ) == 'c' ) ) {		  
							      	return str ;						    	  str = str . substring ( 0 , n ) + 'd' + str . substring 
							      }								    	}							  
							      								    	n -- ;							  
							      								      }								  
							      								      return str ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD    FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD    FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD	  FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD
--							      --							    --								  --
def findPairs ( arr , n ) :				      boolean findPairs ( int arr [ ] ) {			    static boolean findPairs ( int [ ] arr , int n ) {		  script_not_found : None
Hash = { }						      	HashMap < Integer , pair > map = new HashMap < Integer , pa   HashMap < Integer , Integer > Hash = new HashMap < > ( ) ;  
for i in range ( n - 1 ) :				      	int n = arr . length ;					      for ( int i = 0 ;						  
    for j in range ( i + 1 , n ) :			      	for ( int i = 0 ;					      i < n - 1 ;						  
    sum = arr [ i ] + arr [ j ]				      	i < n ;							      i ++ ) {							  
    if sum in Hash.keys ( ) :				      	++ i ) {						    	for ( int j = i + 1 ;					  
	prev = Hash.get ( sum )				      	  for ( int j = i + 1 ;					    	j < n ;							  
	print ( str ( prev ) + " and (%d, %d)" % ( arr [ i ]  	  j < n ;						    	j ++ ) {						  
	return True					      	  ++ j ) {						    	  int sum = arr [ i ] + arr [ j ] ;			  
    else :						      	    int sum = arr [ i ] + arr [ j ] ;			    	  if ( Hash . keySet ( ) . contains ( sum ) ) {		  
	Hash [ sum ] = ( arr [ i ] , arr [ j ] )	      	    if ( ! map . containsKey ( sum ) ) map . put ( sum , ne 	    Integer prev = Hash . get ( sum ) ;			  
							      	    else {						    	    System . out . println ( prev + " and (" + arr [ i ]  
							      	      pair p = map . get ( sum ) ;			    	    return true ;					  
							      	      System . out . println ( "(" + arr [ p . first ] + ", 	  }							  
							      	      return true ;					    	  else {						  
							      	    }							    	    Hash . put ( sum , new Integer ( arr [ i ] ) ) ;	  
							      	  }							    	  }							  
							      	}							    	}							  
							      	return false ;						      }								  
							      }								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY		      COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY		    COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY			  COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY
--							      --							    --								  --
def countMinOperations ( target , n ) :			      static int countMinOperations ( int n ) {			    static int countMinOperations ( int [ ] target , int n ) {	  script_not_found : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    while ( True ) :					      	while ( true ) {					      while ( ( target [ 0 ] ) != null ) {			  
	zero_count = 0					      	  int zero_count = 0 ;					    	int zeroCount = 0 ;					  
	i = 0						      	  int i ;						    	int i = 0 ;						  
	while ( i < n ) :				      	  for ( i = 0 ;						    	while ( ( i < n ) ) {					  
	    if ( ( target [ i ] & 1 ) > 0 ) :		      	  i < n ;						    	  if ( ( ( target [ i ] & 1 ) > 0 ) ) break ;		  
		break					      	  i ++ ) {						    	  else if ( ( target [ i ] == 0 ) ) zeroCount ++ ;	  
	    elif ( target [ i ] == 0 ) :		      	    if ( arr [ i ] % 2 == 1 ) break ;			    	  i ++ ;						  
		zero_count += 1				      	    else if ( arr [ i ] == 0 ) zero_count ++ ;		    	}							  
	    i += 1					      	  }							    	if ( ( zeroCount == n ) ) return result ;		  
	if ( zero_count == n ) :			      	  if ( zero_count == n ) return result ;		    	if ( ( i == n ) ) {					  
	    return result				      	  if ( i == n ) {					    	  for ( int j = 0 ;					  
	if ( i == n ) :					      	    for ( int j = 0 ;					    	  j < n ;						  
	    for j in range ( n ) :			      	    j < n ;						    	  j ++ ) target [ j ] = target [ j ] / 2 ;		  
		target [ j ] = target [ j ] // 2	      	    j ++ ) arr [ j ] = arr [ j ] / 2 ;			    	  result ++ ;						  
	    result += 1					      	    result ++ ;						    	}							  
	for j in range ( i , n ) :			      	  }							    	for ( int j = i ;					  
	    if ( target [ j ] & 1 ) :			      	  for ( int j = i ;					    	j < n ;							  
		target [ j ] -= 1			      	  j < n ;						    	j ++ ) if ( ( target [ j ] & 1 ) != 0 ) {		  
		result += 1				      	  j ++ ) {						    	  target [ j ] -- ;					  
							      	    if ( arr [ j ] % 2 == 1 ) {				    	  result ++ ;						  
							      	      arr [ j ] -- ;					    	}							  
							      	      result ++ ;					      }								  
							      	    }							      return result ;						  
							      	  }							    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY
--							      --							    --								  --
def findInteger ( arr , n ) :				      static int findInteger ( int arr [ ] , int n ) {		    static int findInteger ( int [ ] arr , int n ) {		  script_not_found : None
    hash = dict ( )					      	HashMap < Integer , Integer > hash = new HashMap < > ( ) ;    Map < Integer , Integer > hash = new HashMap < > ( ) ;	  
    maximum = 0						      	int maximum = 0 ;					      int maximum = 0 ;						  
    for i in arr :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( i < 0 ) :					      	i < n ;							      i < arr . length ;					  
	    if abs ( i ) not in hash.keys ( ) :		      	i ++ ) {						      i ++ ) {							  
		hash [ abs ( i ) ] = - 1		      	  if ( arr [ i ] < 0 ) hash . put ( Math . abs ( arr [ i ]  	if ( ( i < 0 ) && ( n == arr [ i ] ) ) {		  
	    else :					      	  else hash . put ( Math . abs ( arr [ i ] ) , ( hash . get 	  if ( ! hash . keySet ( ) . contains ( Math . abs ( i )  
		hash [ abs ( i ) ] -= 1			      	}							    	    hash . put ( Math . abs ( i ) , - 1 ) ;		  
	else :						      	for ( int i = 0 ;					    	  }							  
	    hash [ i ] = hash.get ( i , 0 ) + 1		      	i < n ;							    	  else {						  
    for i in arr :					      	i ++ ) if ( hash . get ( arr [ i ] ) > 0 ) return arr [ i ] 	    hash . get ( Math . abs ( i ) ) -- ;		  
	if i in hash.keys ( ) and hash [ i ] > 0 :	      	return - 1 ;						    	  }							  
	    return i					      }								    	}							  
    return - 1						      								    	else {							  
							      								    	  hash . put ( arr [ i ] , hash . get ( arr [ i ] ) + 1 ) 
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < arr . length ;					  
							      								      i ++ ) {							  
							      								    	if ( hash . keySet ( ) . contains ( arr [ i ] ) && hash . 
							      								    	  return arr [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2
--							      --							    --								  --
def findLength ( string , n ) :				      static int findLength ( String str , int n ) {		    static int findLength ( String string , int n ) {		  script_not_found : None
    Sum = [ 0 ] * ( n + 1 )				      	int sum [ ] = new int [ n + 1 ] ;			      int [ ] Sum = new int [ n + 1 ] ;				  
    for i in range ( 1 , n + 1 ) :			      	sum [ 0 ] = 0 ;						      for ( int i = 1 ;						  
	Sum [ i ] = ( Sum [ i - 1 ] + int ( string [ i - 1 ]  	for ( int i = 1 ;					      i <= n ;							  
    ans = 0						      	i <= n ;						      i ++ ) {							  
    for length in range ( 2 , n + 1 , 2 ) :		      	i ++ ) sum [ i ] = ( sum [ i - 1 ] + str . charAt ( i - 1 ) 	Sum [ i ] = ( Sum [ i - 1 ] + Integer . parseInt ( string 
	for i in range ( 0 , n - length + 1 ) :		      	int ans = 0 ;						      }								  
	    j = i + length - 1				      	for ( int len = 2 ;					      int ans = 0 ;						  
	    if ( Sum [ i + length // 2 ] - Sum [ i ] == Sum [ 	len <= n ;						      for ( int length = 2 ;					  
		ans = max ( ans , length )		      	len += 2 ) {						      length <= n ;						  
    return ans						      	  for ( int i = 0 ;					      length += 2 ) {						  
							      	  i <= n - len ;					    	for ( int i = 0 ;					  
							      	  i ++ ) {						    	i <= n - length ;					  
							      	    int j = i + len - 1 ;				    	i ++ ) {						  
							      	    if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] 	  int j = i + length - 1 ;				  
							      	  }							    	  if ( ( Sum [ i + length / 2 ] - Sum [ i ] == Sum [ i +  
							      	}							    	    ans = Math . max ( ans , length ) ;			  
							      	return ans ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES	      REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES		    REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES		  REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES
--							      --							    --								  --
def arrangeString ( str1 , x , y ) :			      static void arrangeString ( String str , int x , int y ) {    public static void arrangeString ( String str1 , int x , int  script_not_found : None
    count_0 = 0						      	int count_0 = 0 ;					      int count0 = 0 ;						  
    count_1 = 0						      	int count_1 = 0 ;					      int count1 = 0 ;						  
    n = len ( str1 )					      	int len = str . length ( ) ;				      int n = str1 . length ( ) ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if str1 [ i ] == '0' :				      	i < len ;						      i < n ;							  
	    count_0 += 1				      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( str . charAt ( i ) == '0' ) count_0 ++ ;		    	if ( str1 . charAt ( i ) == '0' ) {			  
	    count_1 += 1				      	  else count_1 ++ ;					    	  count0 ++ ;						  
    while count_0 > 0 or count_1 > 0 :			      	}							    	}							  
	for i in range ( 0 , x ) :			      	while ( count_0 > 0 || count_1 > 0 ) {			    	else {							  
	    if count_0 > 0 :				      	  for ( int j = 0 ;					    	  count1 ++ ;						  
		print ( "0" , end = "" )		      	  j < x && count_0 > 0 ;				    	}							  
		count_0 -= 1				      	  j ++ ) {						      }								  
	for j in range ( 0 , y ) :			      	    if ( count_0 > 0 ) {				      while ( count0 > 0 || count1 > 0 ) {			  
	    if count_1 > 0 :				      	      System . out . print ( "0" ) ;			    	for ( int i = 0 ;					  
		print ( "1" , end = "" )		      	      count_0 -- ;					    	i <= x ;						  
		count_1 -= 1				      	    }							    	i ++ ) {						  
							      	  }							    	  if ( count0 > 0 ) {					  
							      	  for ( int j = 0 ;					    	    System . out . print ( "0" ) ;			  
							      	  j < y && count_1 > 0 ;				    	    count0 -- ;						  
							      	  j ++ ) {						    	  }							  
							      	    if ( count_1 > 0 ) {				    	}							  
							      	      System . out . print ( "1" ) ;			    	for ( int j = 0 ;					  
							      	      count_1 -- ;					    	j <= y ;						  
							      	    }							    	j ++ ) {						  
							      	  }							    	  if ( count1 > 0 ) {					  
							      	}							    	    System . out . print ( "1" ) ;			  
							      }								    	    count1 -- ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F
--							      --							    --								  --
def CountSubString ( Str , n ) :			      static int CountSubstring ( char str [ ] , int n ) {	    protected static int countSubString ( String Str , int n ) {  error : COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_A
    ans = ( n * ( n + 1 ) ) // 2			      	int ans = ( n * ( n + 1 ) ) / 2 ;			      int ans = ( n * ( n + 1 ) ) / 2 ;				  LL_THE_CHARACTERS_FROM_THE_SET_A_B_C_AT_THE_SAME_T
    a_index = 0						      	int a_index = 0 ;					      int aIndex = 0 ;						  IME.java:89: error: incompatible types: char[] can
    b_index = 0						      	int b_index = 0 ;					      int bIndex = 0 ;						  not be converted to String	     if(f_filled(par
    c_index = 0						      	int c_index = 0 ;					      int cIndex = 0 ;						  am0.get(i),param1.get(i)) == f_gold(param0.get(i),
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  param1.get(i)))				^ No
	if ( Str [ i ] == 'a' ) :			      	i < n ;							      i < n ;							  te: Some messages have been simplified; recompile
	    a_index = i + 1				      	i ++ ) {						      i ++ ) {							  with -Xdiags:verbose to get full output 1 error
	    ans -= min ( b_index , c_index )		      	  if ( str [ i ] == 'a' ) {				    	if ( ( Str . charAt ( i ) == 'a' ) ) {			  
	elif ( Str [ i ] == 'b' ) :			      	    a_index = i + 1 ;					    	  aIndex = i + 1 ;					  
	    b_index = i + 1				      	    ans -= Math . min ( b_index , c_index ) ;		    	  ans -= Math . min ( bIndex , cIndex ) ;		  
	    ans -= min ( a_index , c_index )		      	  }							    	}							  
	else :						      	  else if ( str [ i ] == 'b' ) {			    	else if ( ( Str . charAt ( i ) == 'b' ) ) {		  
	    c_index = i + 1				      	    b_index = i + 1 ;					    	  bIndex = i + 1 ;					  
	    ans -= min ( a_index , b_index )		      	    ans -= Math . min ( a_index , c_index ) ;		    	  ans -= Math . min ( aIndex , cIndex ) ;		  
    return ans						      	  }							    	}							  
							      	  else {						    	else {							  
							      	    c_index = i + 1 ;					    	  cIndex = i + 1 ;					  
							      	    ans -= Math . min ( a_index , b_index ) ;		    	  ans -= Math . min ( aIndex , bIndex ) ;		  
							      	  }							    	}							  
							      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ROTATIONS_DIVISIBLE_4				      COUNT_ROTATIONS_DIVISIBLE_4				    COUNT_ROTATIONS_DIVISIBLE_4					  COUNT_ROTATIONS_DIVISIBLE_4
--							      --							    --								  --
def countRotations ( n ) :				      static int countRotations ( String n ) {			    static int countRotations ( String n ) {			  error : Exception in thread "main" java.lang.Strin
    l = len ( n )					      	int len = n . length ( ) ;				      int l = n . length ( ) ;					  gIndexOutOfBoundsException: String index out of ra
    if ( l == 1 ) :					      	if ( len == 1 ) {					      if ( ( l == 1 ) ) {					  nge: 9 	at java.base/java.lang.StringLatin1.charAt
	oneDigit = ( int ) ( n [ 0 ] )			      	  int oneDigit = n . charAt ( 0 ) - '0' ;		    	int oneDigit = ( ( int ) n . charAt ( 0 ) ) ;		  (StringLatin1.java:47) 	at java.base/java.lang.Str
	if ( oneDigit % 4 == 0 ) :			      	  if ( oneDigit % 4 == 0 ) return 1 ;			    	if ( ( oneDigit % 4 == 0 ) ) {				  ing.charAt(String.java:693) 	at COUNT_ROTATIONS_DI
	    return 1					      	  return 0 ;						    	  return 1 ;						  VISIBLE_4.f_filled(COUNT_ROTATIONS_DIVISIBLE_4.jav
	return 0					      	}							    	}							  a:46) 	at COUNT_ROTATIONS_DIVISIBLE_4.main(COUNT_R
    count = 0						      	int twoDigit , count = 0 ;				    	return 0 ;						  OTATIONS_DIVISIBLE_4.java:74)
    for i in range ( 0 , l - 1 ) :			      	for ( int i = 0 ;					      }								  
	twoDigit = ( int ) ( n [ i ] ) * 10 + ( int ) ( n [ i 	i < ( len - 1 ) ;					      int count = 0 ;						  
	if ( twoDigit % 4 == 0 ) :			      	i ++ ) {						      for ( int i = 0 ;						  
	    count = count + 1				      	  twoDigit = ( n . charAt ( i ) - '0' ) * 10 + ( n . charAt   i <= l - 1 ;						  
    twoDigit = ( int ) ( n [ l - 1 ] ) * 10 + ( int ) ( n [ 0 	  if ( twoDigit % 4 == 0 ) count ++ ;			      i ++ ) {							  
    if ( twoDigit % 4 == 0 ) :				      	}							    	int twoDigit = ( ( int ) n . charAt ( i ) ) * 10 + ( ( in 
	count = count + 1				      	twoDigit = ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . ch 	if ( ( twoDigit % 4 == 0 ) ) {				  
    return count					      	if ( twoDigit % 4 == 0 ) count ++ ;			    	  count = count + 1 ;					  
							      	return count ;						    	}							  
							      }								      }								  
							      								      int twoDigit = ( ( int ) n . charAt ( l - 1 ) ) * 10 + ( (  
							      								      if ( ( twoDigit % 4 == 0 ) ) {				  
							      								    	count = count + 1 ;					  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			      PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			    PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2				  PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2
--							      --							    --								  --
def fib ( n ) :						      public static int fib ( int n ) {				    public static int fib ( int n ) {				  script_not_found : None
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) ) {					  
	return 0					      	if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ;	    	return 0 ;						  
    if ( n == 1 or n == 2 ) :				      	if ( f [ n ] != 0 ) return f [ n ] ;			      }								  
	f [ n ] = 1					      	int k = ( n & 1 ) == 1 ? ( n + 1 ) / 2 : n / 2 ;	      if ( ( n == 1 ) || ( n == 2 ) ) {				  
	return ( f [ n ] )				      	f [ n ] = ( n & 1 ) == 1 ? ( fib ( k ) * fib ( k ) + fib (  	f [ n ] = 1 ;						  
    if ( f [ n ] ) :					      	return f [ n ] ;					    	return ( f [ n ] ) ;					  
	return f [ n ]					      }								      }								  
    if ( n & 1 ) :					      								      if ( ( f [ n ] ) ) {					  
	k = ( n + 1 ) // 2				      								    	return f [ n ] ;					  
    else :						      								      }								  
	k = n // 2					      								      int k ;							  
    if ( ( n & 1 ) ) :					      								      if ( ( n & 1 ) != 0 ) {					  
	f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * f 								    	k = ( n + 1 ) / 2 ;					  
    else :						      								      }								  
	f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k 								      else {							  
    return f [ n ]					      								    	k = n / 2 ;						  
							      								      }								  
							      								      if ( ( ( n & 1 ) != 0 ) ) {				  
							      								    	f [ n ] = ( fib ( k ) * fib ( k ) + fib ( k - 1 ) * fib ( 
							      								      }								  
							      								      else {							  
							      								    	f [ n ] = ( 2 * fib ( k - 1 ) + fib ( k ) ) * fib ( k ) ; 
							      								      }								  
							      								      return f [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS			    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS
--							      --							    --								  --
def evenSum ( n ) :					      static int evenSum ( int n ) {				    public static int evenSum ( int n ) {			  failure : #Results:7, 10
    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 	int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
    for i in range ( 0 , n + 1 ) :			      	int i , j ;						      for ( int x = 0 ;						  
	for j in range ( 0 , min ( i , n + 1 ) ) :	      	for ( i = 0 ;						      x < n ;							  
	    if j == 0 or j == i :			      	i <= n ;						      x ++ ) {							  
		C [ i ] [ j ] = 1			      	i ++ ) {						    	for ( int y = 0 ;					  
	    else :					      	  for ( j = 0 ;						    	y < n ;							  
		C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i 	  j <= Math . min ( i , n ) ;				    	y ++ ) {						  
    sum = 0 ;						      	  j ++ ) {						    	  C [ x ] [ y ] = 0 ;					  
    for i in range ( 0 , n + 1 ) :			      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	}							  
	if n % 2 == 0 :					      	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1    }								  
	    sum = sum + C [ n ] [ i ]			      	  }							      for ( int i = 0 ;						  
    return sum						      	}							      i <= n ;							  
							      	int sum = 0 ;						      i ++ ) {							  
							      	for ( i = 0 ;						    	for ( int j = 0 ;					  
							      	i <= n ;						    	j <= Math . min ( i , n + 1 ) ;				  
							      	i += 2 ) sum += C [ n ] [ i ] ;				    	j ++ ) {						  
							      	return sum ;						    	  if ( j == 0 || j == i ) {				  
							      }								    	    C [ i ] [ j ] = 1 ;					  
							      								    	  }							  
							      								    	  else {						  
							      								    	    C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      int sum = 0 ;						  
							      								      for ( int i = 0 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	if ( n % 2 == 0 ) {					  
							      								    	  sum = sum + C [ n ] [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE
--							      --							    --								  --
def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :	      static int maxSumPairWithDifferenceLessThanK ( int arr [ ] ,  public static int maxSumPairWithDifferenceLessThanK ( int [ ] success : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    dp = [ 0 ] * N					      	int dp [ ] = new int [ N ] ;				      int [ ] dp = new int [ N ] ;				  
    dp [ 0 ] = 0					      	dp [ 0 ] = 0 ;						      dp [ 0 ] = 0 ;						  
    for i in range ( 1 , N ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	dp [ i ] = dp [ i - 1 ]				      	i < N ;							      i < N ;							  
	if ( arr [ i ] - arr [ i - 1 ] < K ) :		      	i ++ ) {						      i ++ ) {							  
	    if ( i >= 2 ) :				      	  dp [ i ] = dp [ i - 1 ] ;				    	dp [ i ] = dp [ i - 1 ] ;				  
		dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + ar 	  if ( arr [ i ] - arr [ i - 1 ] < K ) {		    	if ( ( arr [ i ] - arr [ i - 1 ] ) < K ) {		  
	    else :					      	    if ( i >= 2 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i 	  if ( ( i >= 2 ) ) {					  
		dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ 	    else dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr 	    dp [ i ] = Math . max ( dp [ i ] , dp [ i - 2 ] + arr 
    return dp [ N - 1 ]					      	  }							    	  }							  
							      	}							    	  else {						  
							      	return dp [ N - 1 ] ;					    	    dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr [  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ N - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS
--							      --							    --								  --
def longestSubseqWithDiffOne ( arr , n ) :		      static int longestSubseqWithDiffOne ( int arr [ ] , int n ) { public static int longestSubseqWithDiffOne ( int [ ] arr , in success : None
    dp = [ 1 for i in range ( n ) ]			      	int dp [ ] = new int [ n ] ;				      int [ ] dp = new int [ n ] ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i ) :				      	i < n ;							      i < dp . length ;						  
	    if ( ( arr [ i ] == arr [ j ] + 1 ) or ( arr [ i  	i ++ ) dp [ i ] = 1 ;					      i ++ ) dp [ i ] = 1 ;					  
		dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 )    	for ( int i = 1 ;					      for ( int i = 0 ;						  
    result = 1						      	i < n ;							      i < n ;							  
    for i in range ( n ) :				      	i ++ ) {						      i ++ ) {							  
	if ( result < dp [ i ] ) :			      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    result = dp [ i ]				      	  j < i ;						    	j < i ;							  
    return result					      	  j ++ ) {						    	j ++ ) {						  
							      	    if ( ( arr [ i ] == arr [ j ] + 1 ) || ( arr [ i ] == a 	  if ( ( ( arr [ i ] == arr [ j ] + 1 ) || ( arr [ i ] == 
							      	  }							    	}							  
							      	}							      }								  
							      	int result = 1 ;					      int result = 1 ;						  
							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
							      	i < n ;							      i < n ;							  
							      	i ++ ) if ( result < dp [ i ] ) result = dp [ i ] ;	      i ++ ) if ( ( result < dp [ i ] ) ) result = dp [ i ] ;	  
							      	return result ;						      return result ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE			      MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE			    MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE			  MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE
--							      --							    --								  --
def maxcoefficientvalue ( n ) :				      static int maxcoefficientvalue ( int n ) {		    public static int maxCoefficientValue ( int n ) {		  success : None
    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 	int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int x = 0 ;						  
	for j in range ( min ( i , n ) + 1 ) :		      	i <= n ;						      x < n ;							  
	    if ( j == 0 or j == i ) :			      	i ++ ) {						      x ++ ) {							  
		C [ i ] [ j ] = 1			      	  for ( int j = 0 ;					    	for ( int y = 0 ;					  
	    else :					      	  j <= Math . min ( i , n ) ;				    	y < n ;							  
		C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ 	  j ++ ) {						    	y ++ ) {						  
    maxvalue = 0					      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  C [ x ] [ y ] = 0 ;					  
    for i in range ( n + 1 ) :				      	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	}							  
	maxvalue = max ( maxvalue , C [ n ] [ i ] )	      	  }							      }								  
    return maxvalue					      	}							      for ( int i = 0 ;						  
							      	int maxvalue = 0 ;					      i < n + 1 ;						  
							      	for ( int i = 0 ;					      i ++ ) {							  
							      	i <= n ;						    	for ( int j = 0 ;					  
							      	i ++ ) maxvalue = Math . max ( maxvalue , C [ n ] [ i ] ) ; 	j < Math . min ( i , n ) + 1 ;				  
							      	return maxvalue ;					    	j ++ ) {						  
							      }								    	  if ( ( j == 0 ) || ( j == i ) ) {			  
							      								    	    C [ i ] [ j ] = 1 ;					  
							      								    	  }							  
							      								    	  else {						  
							      								    	    C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      int maxvalue = 0 ;					  
							      								      for ( int i = 0 ;						  
							      								      i < n + 1 ;						  
							      								      i ++ ) {							  
							      								    	maxvalue = Math . max ( maxvalue , C [ n ] [ i ] ) ;	  
							      								      }								  
							      								      return maxvalue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_NUMBERS_B_FIND_X_X_B				      GIVEN_TWO_NUMBERS_B_FIND_X_X_B				    GIVEN_TWO_NUMBERS_B_FIND_X_X_B				  GIVEN_TWO_NUMBERS_B_FIND_X_X_B
--							      --							    --								  --
def modularEquation ( a , b ) :				      static void modularEquation ( int a , int b ) {		    public static void modularEquation ( int a , int b ) {	  script_not_found : None
    if ( a < b ) :					      	if ( a < b ) {						      if ( ( a < b ) ) {					  
	print ( "No solution possible " )		      	  System . out . println ( "No solution possible " ) ;	    	System . out . println ( "No solution possible " ) ;	  
	return						      	  return ;						    	return ;						  
    if ( a == b ) :					      	}							      }								  
	print ( "Infinite Solution possible " )		      	if ( a == b ) {						      if ( ( a == b ) ) {					  
	return						      	  System . out . println ( "Infinite Solution possible " )  	System . out . println ( "Infinite Solution possible " )  
    count = 0						      	  return ;						    	return ;						  
    n = a - b						      	}							      }								  
    y = ( int ) ( math.sqrt ( a - b ) )			      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( 1 , y + 1 ) :			      	int n = a - b ;						      int n = a - b ;						  
	if ( n % i == 0 ) :				      	int y = ( int ) Math . sqrt ( a - b ) ;			      int y = ( int ) ( Math . sqrt ( a - b ) ) ;		  
	    if ( n / i > b ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
		count = count + 1			      	i <= y ;						      i <= y ;							  
	    if ( i > b ) :				      	++ i ) {						      i ++ ) {							  
		count = count + 1			      	  if ( n % i == 0 ) {					    	if ( ( n % i ) == 0 ) {					  
    if ( y * y == n and y > b ) :			      	    if ( n / i > b ) count ++ ;				    	  if ( ( n / i > b ) ) {				  
	count = count - 1				      	    if ( i > b ) count ++ ;				    	    count = count + 1 ;					  
    print ( count )					      	  }							    	  }							  
							      	}							    	  if ( ( i > b ) ) {					  
							      	if ( y * y == n && y > b ) count -- ;			    	    count = count + 1 ;					  
							      	System . out . println ( count ) ;			    	  }							  
							      }								    	}							  
							      								      }								  
							      								      if ( ( y * y == n ) && ( y > b ) ) {			  
							      								    	count = count - 1 ;					  
							      								      }								  
							      								      System . out . println ( count ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def maxSumIS ( arr , n ) :				      static int maxSumIS ( int arr [ ] , int n ) {		    public static int maxSumIS ( int [ ] arr , int n ) {	  success : None
    max = 0						      	int i , j , max = 0 ;					      int max = 0 ;						  
    msis = [ 0 for x in range ( n ) ]			      	int msis [ ] = new int [ n ] ;				      int [ ] msis = new int [ n ] ;				  
    for i in range ( n ) :				      	for ( i = 0 ;						      for ( int x = 0 ;						  
	msis [ i ] = arr [ i ]				      	i < n ;							      x < n ;							  
    for i in range ( 1 , n ) :				      	i ++ ) msis [ i ] = arr [ i ] ;				      x ++ ) {							  
	for j in range ( i ) :				      	for ( i = 1 ;						    	msis [ x ] = 0 ;					  
	    if ( arr [ i ] > arr [ j ] and msis [ i ] < msis  	i < n ;							      }								  
		msis [ i ] = msis [ j ] + arr [ i ]	      	i ++ ) for ( j = 0 ;					      for ( int i = 0 ;						  
    for i in range ( n ) :				      	j < i ;							      i < n ;							  
	if max < msis [ i ] :				      	j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j    i ++ ) {							  
	    max = msis [ i ]				      	for ( i = 0 ;						    	msis [ i ] = arr [ i ] ;				  
    return max						      	i < n ;							      }								  
							      	i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ;	      for ( int i = 1 ;						  
							      	return max ;						      i < n ;							  
							      }								      i ++ ) {							  
							      								    	for ( int j = 0 ;					  
							      								    	j < i ;							  
							      								    	j ++ ) {						  
							      								    	  if ( ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j ] 
							      								    	    msis [ i ] = msis [ j ] + arr [ i ] ;		  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( max < msis [ i ] ) {				  
							      								    	  max = msis [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	      SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	    SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	  SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH
--							      --							    --								  --
def shortestPath ( graph , u , v , k ) :		      int shortestPath ( int graph [ ] [ ] , int u , int v , int k  public static int shortestPath ( int [ ] [ ] graph , int u ,  script_not_found : None
    V = 4						      	if ( k == 0 && u == v ) return 0 ;			      final int V = 4 ;						  
    INF = 999999999999					      	if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u    final int INF = 999999999999 ;				  
    if k == 0 and u == v :				      	if ( k <= 0 ) return INF ;				      if ( k == 0 && u == v ) {					  
	return 0					      	int res = INF ;						    	return 0 ;						  
    if k == 1 and graph [ u ] [ v ] != INF :		      	for ( int i = 0 ;					      }								  
	return graph [ u ] [ v ]			      	i < V ;							      if ( k == 1 && graph [ u ] [ v ] != INF ) {		  
    if k <= 0 :						      	i ++ ) {						    	return graph [ u ] [ v ] ;				  
	return INF					      	  if ( graph [ u ] [ i ] != INF && u != i && v != i ) {	      }								  
    res = INF						      	    int rec_res = shortestPath ( graph , i , v , k - 1 ) ;    if ( k <= 0 ) {						  
    for i in range ( V ) :				      	    if ( rec_res != INF ) res = Math . min ( res , graph [  	return INF ;						  
	if graph [ u ] [ i ] != INF and u != i and v != i :   	  }							      }								  
	    rec_res = shortestPath ( graph , i , v , k - 1 )  	}							      int res = INF ;						  
	    if rec_res != INF :				      	return res ;						      for ( int i = 0 ;						  
		res = min ( res , graph [ u ] [ i ] + rec_res }								      i < V ;							  
    return res						      								      i ++ ) {							  
							      								    	if ( graph [ u ] [ i ] != INF && u != i && v != i ) {	  
							      								    	  int recRes = shortestPath ( graph , i , v , k - 1 ) ;	  
							      								    	  if ( recRes != INF ) {				  
							      								    	    res = Math . min ( res , graph [ u ] [ i ] + recRes ) 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1   SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1   SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1
--							      --							    --								  --
def getTotalNumberOfSequences ( m , n ) :		      static int getTotalNumberOfSequences ( int m , int n ) {	    static int getTotalNumberOfSequences ( int m , int n ) {	  error : Exception in thread "main" java.lang.Array
    T = [ [ 0 for i in range ( n + 1 ) ] for i in range ( m + 	int T [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] T = new int [ n + 1 ] [ m + 1 ] ;		  IndexOutOfBoundsException: Index 5 out of bounds f
    for i in range ( m + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  or length 5 	at SEQUENCES_GIVEN_LENGTH_EVERY_ELEME
	for j in range ( n + 1 ) :			      	i < m + 1 ;						      i < m + 1 ;						  NT_EQUAL_TWICE_PREVIOUS_1.f_filled(SEQUENCES_GIVEN
	    if i == 0 or j == 0 :			      	i ++ ) {						      i ++ ) {							  _LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1.java:
		T [ i ] [ j ] = 0			      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  40) 	at SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL
	    elif i < j :				      	  j < n + 1 ;						    	j < n ;							  _TWICE_PREVIOUS_1.main(SEQUENCES_GIVEN_LENGTH_EVER
		T [ i ] [ j ] = 0			      	  j ++ ) {						    	j ++ ) {						  Y_ELEMENT_EQUAL_TWICE_PREVIOUS_1.java:83)
	    elif j == 1 :				      	    if ( i == 0 || j == 0 ) T [ i ] [ j ] = 0 ;		    	  if ( i == 0 || j == 0 ) {				  
		T [ i ] [ j ] = i			      	    else if ( i < j ) T [ i ] [ j ] = 0 ;		    	    T [ i ] [ j ] = 0 ;					  
	    else :					      	    else if ( j == 1 ) T [ i ] [ j ] = i ;		    	  }							  
		T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i //  	    else T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i / 2 ] [  	  else if ( i < j ) {					  
    return T [ m ] [ n ]				      	  }							    	    T [ i ] [ j ] = 0 ;					  
							      	}							    	  }							  
							      	return T [ m ] [ n ] ;					    	  else if ( j == 1 ) {					  
							      }								    	    T [ i ] [ j ] = i ;					  
							      								    	  }							  
							      								    	  else {						  
							      								    	    T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i / 2 ] [ j - 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return T [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		      THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		    THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		  THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1
--							      --							    --								  --
def thirdLargest ( arr , arr_size ) :			      static void thirdLargest ( int arr [ ] , int arr_size ) {	    public static void thirdLargest ( int [ ] arr , int arrSize ) script_not_found : None
    if ( arr_size < 3 ) :				      	if ( arr_size < 3 ) {					      if ( ( arrSize < 3 ) ) {					  
	print ( " Invalid Input " )			      	  System . out . printf ( " Invalid Input " ) ;		    	System . out . println ( " Invalid Input " ) ;		  
	return						      	  return ;						    	return ;						  
    first = arr [ 0 ]					      	}							      }								  
    second = - sys.maxsize				      	int first = arr [ 0 ] , second = Integer . MIN_VALUE , thir   int first = arr [ 0 ] ;					  
    third = - sys.maxsize				      	for ( int i = 1 ;					      int second = - Integer . MAX_VALUE ;			  
    for i in range ( 1 , arr_size ) :			      	i < arr_size ;						      int third = - Integer . MAX_VALUE ;			  
	if ( arr [ i ] > first ) :			      	i ++ ) {						      for ( int i = 1 ;						  
	    third = second				      	  if ( arr [ i ] > first ) {				      i < arrSize ;						  
	    second = first				      	    third = second ;					      i ++ ) {							  
	    first = arr [ i ]				      	    second = first ;					    	if ( ( arr [ i ] > first ) ) {				  
	elif ( arr [ i ] > second ) :			      	    first = arr [ i ] ;					    	  third = second ;					  
	    third = second				      	  }							    	  second = first ;					  
	    second = arr [ i ]				      	  else if ( arr [ i ] > second ) {			    	  first = arr [ i ] ;					  
	elif ( arr [ i ] > third ) :			      	    third = second ;					    	}							  
	    third = arr [ i ]				      	    second = arr [ i ] ;				    	else if ( ( arr [ i ] > second ) ) {			  
    print ( "The third Largest" , "element is" , third )      	  }							    	  third = second ;					  
							      	  else if ( arr [ i ] > third ) {			    	  second = arr [ i ] ;					  
							      	    third = arr [ i ] ;					    	}							  
							      	  }							    	else if ( ( arr [ i ] > third ) ) {			  
							      	}							    	  third = arr [ i ] ;					  
							      	System . out . printf ( "The third Largest element is %d\n" 	}							  
							      }								      }								  
							      								      System . out . println ( "The third Largest" + "element is" 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S
--							      --							    --								  --
def deleteElements ( arr , n , k ) :			      static void deleteElements ( int arr [ ] , int n , int k ) {  static void deleteElements ( int [ ] arr , int n , int k ) {  script_not_found : None
    st = [ ]						      	Stack < Integer > s = new Stack < > ( ) ;		      Stack < Integer > st = new Stack < > ( ) ;		  
    st.append ( arr [ 0 ] )				      	s . push ( arr [ 0 ] ) ;				      st . push ( arr [ 0 ] ) ;					  
    top = 0						      	int count = 0 ;						      int top = 0 ;						  
    count = 0						      	for ( int i = 1 ;					      int count = 0 ;						  
    for i in range ( 1 , n ) :				      	i < n ;							      for ( int i = 1 ;						  
	while ( len ( st ) != 0 and count < k and st [ top ]  	i ++ ) {						      i < n ;							  
	    st.pop ( )					      	  while ( ! s . empty ( ) && s . peek ( ) < arr [ i ] && co   i ++ ) {							  
	    count += 1					      	    s . pop ( ) ;					    	while ( ( st . size ( ) != 0 ) && count < k && st . peek  
	    top -= 1					      	    count ++ ;						    	  st . pop ( ) ;					  
	st.append ( arr [ i ] )				      	  }							    	  count ++ ;						  
	top += 1					      	  s . push ( arr [ i ] ) ;				    	  top -- ;						  
    for i in range ( 0 , len ( st ) ) :			      	}							    	}							  
	print ( st [ i ] , "" , end = "" )		      	int m = s . size ( ) ;					    	st . push ( arr [ i ] ) ;				  
							      	Integer [ ] v = new Integer [ m ] ;			    	top ++ ;						  
							      	while ( ! s . empty ( ) ) {				      }								  
							      	  v [ -- m ] = s . peek ( ) ;				      for ( int i = 0 ;						  
							      	  s . pop ( ) ;						      i != st . size ( ) ;					  
							      	}							      i ++ ) {							  
							      	for ( Integer x : v ) {					    	System . out . print ( st . peek ( i ) + " " ) ;	  
							      	  System . out . print ( x + " " ) ;			      }								  
							      	}							    }								  
							      	;							    								  
							      	System . out . println ( "" ) ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			      FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			    FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			  FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA
--							      --							    --								  --
def parabola ( a , b , c ) :				      static void parabola ( float a , float b , float c ) {	    public static void parabola ( double a , double b , double c  script_not_found : None
    print ( "Vertex: (" , ( - b / ( 2 * a ) ) , ", " , ( ( (  	System . out . println ( "Vertex: (" + ( - b / ( 2 * a ) )    System . out . println ( "Vertex: (" + ( - b / ( 2 * a ) )  
    print ( "Focus: (" , ( - b / ( 2 * a ) ) , ", " , ( ( ( 4 	System . out . println ( "Focus: (" + ( - b / ( 2 * a ) ) +   System . out . println ( "Focus: (" + ( - b / ( 2 * a ) ) + 
    print ( "Directrix: y=" , c - ( ( b * b ) + 1 ) * 4 * a , 	System . out . println ( "Directrix:" + " y=" + ( int ) ( c   System . out . println ( "Directrix: y=" + ( c - ( ( b * b  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_ELEMENT_TWO_SORTED_ARRAYS				      K_TH_ELEMENT_TWO_SORTED_ARRAYS				    K_TH_ELEMENT_TWO_SORTED_ARRAYS				  K_TH_ELEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
def kth ( arr1 , arr2 , m , n , k ) :			      static int kth ( int arr1 [ ] , int arr2 [ ] , int m , int n  public static int kth ( int [ ] arr1 , int [ ] arr2 , int m , success : None
    sorted1 = [ 0 ] * ( m + n )				      	int [ ] sorted1 = new int [ m + n ] ;			      int [ ] sorted1 = new int [ m + n ] ;			  
    i = 0						      	int i = 0 , j = 0 , d = 0 ;				      int i = 0 ;						  
    j = 0						      	while ( i < m && j < n ) {				      int j = 0 ;						  
    d = 0						      	  if ( arr1 [ i ] < arr2 [ j ] ) sorted1 [ d ++ ] = arr1 [    int d = 0 ;						  
    while ( i < m and j < n ) :				      	  else sorted1 [ d ++ ] = arr2 [ j ++ ] ;		      while ( ( i < m ) && ( j < n ) ) {			  
	if ( arr1 [ i ] < arr2 [ j ] ) :		      	}							    	if ( ( arr1 [ i ] < arr2 [ j ] ) ) {			  
	    sorted1 [ d ] = arr1 [ i ]			      	while ( i < m ) sorted1 [ d ++ ] = arr1 [ i ++ ] ;	    	  sorted1 [ d ] = arr1 [ i ] ;				  
	    i += 1					      	while ( j < n ) sorted1 [ d ++ ] = arr2 [ j ++ ] ;	    	  i ++ ;						  
	else :						      	return sorted1 [ k - 1 ] ;				    	}							  
	    sorted1 [ d ] = arr2 [ j ]			      }								    	else {							  
	    j += 1					      								    	  sorted1 [ d ] = arr2 [ j ] ;				  
	d += 1						      								    	  j ++ ;						  
    while ( i < m ) :					      								    	}							  
	sorted1 [ d ] = arr1 [ i ]			      								    	d ++ ;							  
	d += 1						      								      }								  
	i += 1						      								      while ( ( i < m ) ) {					  
    while ( j < n ) :					      								    	sorted1 [ d ] = arr1 [ i ] ;				  
	sorted1 [ d ] = arr2 [ j ]			      								    	d ++ ;							  
	d += 1						      								    	i ++ ;							  
	j += 1						      								      }								  
    return sorted1 [ k - 1 ]				      								      while ( ( j < n ) ) {					  
							      								    	sorted1 [ d ] = arr2 [ j ] ;				  
							      								    	d ++ ;							  
							      								    	j ++ ;							  
							      								      }								  
							      								      return sorted1 [ k - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST
--							      --							    --								  --
def printClosest ( arr , n , x ) :			      static void printClosest ( int arr [ ] , int n , int x ) {    static void printClosest ( int [ ] arr , int n , int x ) {	  script_not_found : None
    res_l , res_r = 0 , 0				      	int res_l = 0 , res_r = 0 ;				      int res_l = 0 , res_r = 0 ;				  
    l , r , diff = 0 , n - 1 , MAX_VAL			      	int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ;	      int l = 0 , r = n - 1 , diff = MAX_VAL ;			  
    while r > l :					      	while ( r > l ) {					      while ( r > l ) {						  
	if abs ( arr [ l ] + arr [ r ] - x ) < diff :	      	  if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {  	if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {  
	    res_l = l					      	    res_l = l ;						    	  res_l = l ;						  
	    res_r = r					      	    res_r = r ;						    	  res_r = r ;						  
	    diff = abs ( arr [ l ] + arr [ r ] - x )	      	    diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;	    	  diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;	  
	if arr [ l ] + arr [ r ] > x :			      	  }							    	}							  
	    r -= 1					      	  if ( arr [ l ] + arr [ r ] > x ) r -- ;		    	if ( arr [ l ] + arr [ r ] > x ) {			  
	else :						      	  else l ++ ;						    	  r -- ;						  
	    l += 1					      	}							    	}							  
    print ( 'The closest pair is {} and {}'.format ( arr [ re 	System . out . println ( " The closest pair is " + arr [ re 	else {							  
							      }								    	  l ++ ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "The closest pair is " + arr [ res 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	      GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	    GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	  GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8
--							      --							    --								  --
def isSubSeqDivisible ( st ) :				      static boolean isSubSeqDivisible ( String str ) {		    static boolean isSubSeqDivisible ( String st ) {		  error : Exception in thread "main" java.lang.Array
    l = len ( st )					      	int i , j , k , l = str . length ( ) ;			      int l = st . length ( ) ;					  IndexOutOfBoundsException: Index 0 out of bounds f
    arr = [ 0 ] * l					      	int arr [ ] = new int [ l ] ;				      int arr [ ] = new int [ l ] ;				  or length 0 	at GIVEN_LARGE_NUMBER_CHECK_SUBSEQUEN
    for i in range ( 0 , l ) :				      	for ( i = 0 ;						      for ( int i = 0 ;						  CE_DIGITS_DIVISIBLE_8.f_filled(GIVEN_LARGE_NUMBER_
	for j in range ( i , l ) :			      	i < l ;							      i <= l ;							  CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8.java:47) 	at
	    for k in range ( j , l ) :			      	i ++ ) {						      i ++ ) {							  GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISI
		if ( arr [ i ] % 8 == 0 ) :		      	  for ( j = i ;						    	for ( int j = i ;					  BLE_8.main(GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DI
		    return True				      	  j < l ;						    	j <= l ;						  GITS_DIVISIBLE_8.java:78)
		elif ( ( arr [ i ] * 10 + arr [ j ] ) % 8 ==  	  j ++ ) {						    	j ++ ) {						  
		    return True				      	    for ( k = j ;					    	  for ( int k = j ;					  
		elif ( ( arr [ i ] * 100 + arr [ j ] * 10 + a 	    k < l ;						    	  k <= l ;						  
		    return True				      	    k ++ ) {						    	  k ++ ) {						  
    return False					      	      if ( arr [ i ] % 8 == 0 ) return true ;		    	    if ( ( arr [ i ] % 8 ) == 0 ) {			  
							      	      else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 &&  	      return true ;					  
							      	      else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [  	    }							  
							      	    }							    	    else if ( ( ( arr [ i ] * 10 + arr [ j ] ) % 8 ) == 0 
							      	  }							    	      return true ;					  
							      	}							    	    }							  
							      	return false ;						    	    else if ( ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr  
							      }								    	      return true ;					  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA
--							      --							    --								  --
def possibleStrings ( n , r , b , g ) :			      static int possibleStrings ( int n , int r , int b , int g )  public static int possibleStrings ( int n , int r , int b , i script_not_found : None
    fact = [ 0 for i in range ( n + 1 ) ]		      	int fact [ ] = new int [ n + 1 ] ;			      int [ ] fact = new int [ n + 1 ] ;			  
    fact [ 0 ] = 1					      	fact [ 0 ] = 1 ;					      for ( int i = 0 ;						  
    for i in range ( 1 , n + 1 , 1 ) :			      	for ( int i = 1 ;					      i < fact . length ;					  
	fact [ i ] = fact [ i - 1 ] * i			      	i <= n ;						      i ++ ) fact [ i ] = 0 ;					  
    left = n - ( r + g + b )				      	i ++ ) fact [ i ] = fact [ i - 1 ] * i ;		      fact [ 0 ] = 1 ;						  
    sum = 0						      	int left = n - ( r + g + b ) ;				      for ( int i = 1 ;						  
    for i in range ( 0 , left + 1 , 1 ) :		      	int sum = 0 ;						      i <= n ;							  
	for j in range ( 0 , left - i + 1 , 1 ) :	      	for ( int i = 0 ;					      i += 1 ) fact [ i ] = fact [ i - 1 ] * i ;		  
	    k = left - ( i + j )			      	i <= left ;						      int left = n - ( r + g + b ) ;				  
	    sum = ( sum + fact [ n ] / ( fact [ i + r ] * fac 	i ++ ) {						      int sum = 0 ;						  
    return sum						      	  for ( int j = 0 ;					      for ( int i = 0 ;						  
							      	  j <= left - i ;					      i <= left ;						  
							      	  j ++ ) {						      i += 1 ) for ( int j = 0 ;				  
							      	    int k = left - ( i + j ) ;				      j <= left - i + 1 ;					  
							      	    sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j +    j += 1 ) {						  
							      	  }							    	int k = left - ( i + j ) ;				  
							      	}							    	sum = ( sum + fact [ n ] / ( fact [ i + r ] * fact [ j +  
							      	return sum ;						      }								  
							      }								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SQUARES_BINOMIAL_COEFFICIENTS			      SUM_SQUARES_BINOMIAL_COEFFICIENTS				    SUM_SQUARES_BINOMIAL_COEFFICIENTS				  SUM_SQUARES_BINOMIAL_COEFFICIENTS
--							      --							    --								  --
def sumofsquare ( n ) :					      static int sumofsquare ( int n ) {			    public static int sumofsquare ( int n ) {			  script_not_found : None
    C = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 	int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
    for i in range ( 0 , n + 1 ) :			      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( 0 , min ( i , n ) + 1 ) :	      	for ( i = 0 ;						      i <= n ;							  
	    if ( j == 0 or j == i ) :			      	i <= n ;						      i ++ ) {							  
		C [ i ] [ j ] = 1			      	i ++ ) {						    	for ( int j = 0 ;					  
	    else :					      	  for ( j = 0 ;						    	j <= Math . min ( i , n ) ;				  
		C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ 	  j <= min ( i , n ) ;					    	j ++ ) {						  
    sum = 0						      	  j ++ ) {						    	  if ( ( j == 0 ) || ( j == i ) ) {			  
    for i in range ( 0 , n + 1 ) :			      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	    C [ i ] [ j ] = 1 ;					  
	sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] )	      	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	  }							  
    return sum						      	  }							    	  else {						  
							      	}							    	    C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] 
							      	int sum = 0 ;						    	  }							  
							      	for ( i = 0 ;						    	}							  
							      	i <= n ;						      }								  
							      	i ++ ) sum += ( C [ n ] [ i ] * C [ n ] [ i ] ) ;	      int sum = 0 ;						  
							      	return sum ;						      for ( int i = 0 ;						  
							      }								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	sum = sum + ( C [ n ] [ i ] * C [ n ] [ i ] ) ;		  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		      MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		    MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		  MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX
--							      --							    --								  --
def maxRowDiff ( mat , m , n ) :			      static int maxRowDiff ( int mat [ ] [ ] , int m , int n ) {   static int maxRowDiff ( int [ ] [ ] mat , int m , int n ) {	  error : Exception in thread "main" java.lang.Array
    rowSum = [ 0 ] * m					      	int rowSum [ ] = new int [ m ] ;			      int [ ] rowSum = new int [ m ] ;				  IndexOutOfBoundsException: Index 41 out of bounds
    for i in range ( 0 , m ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  for length 41 	at MAXIMUM_DIFFERENCE_SUM_ELEMENTS_
	sum = 0						      	i < m ;							      i <= m ;							  TWO_ROWS_MATRIX.f_filled(MAXIMUM_DIFFERENCE_SUM_EL
	for j in range ( 0 , n ) :			      	i ++ ) {						      i ++ ) {							  EMENTS_TWO_ROWS_MATRIX.java:47) 	at MAXIMUM_DIFFER
	    sum += mat [ i ] [ j ]			      	  int sum = 0 ;						    	int sum = 0 ;						  ENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX.main(MAXIMUM_DIF
	rowSum [ i ] = sum				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  FERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX.java:102)
    max_diff = rowSum [ 1 ] - rowSum [ 0 ]		      	  j < n ;						    	j <= n ;						  
    min_element = rowSum [ 0 ]				      	  j ++ ) sum += mat [ i ] [ j ] ;			    	j ++ ) {						  
    for i in range ( 1 , m ) :				      	  rowSum [ i ] = sum ;					    	  sum += mat [ i ] [ j ] ;				  
	if ( rowSum [ i ] - min_element > max_diff ) :	      	}							    	}							  
	    max_diff = rowSum [ i ] - min_element	      	int max_diff = rowSum [ 1 ] - rowSum [ 0 ] ;		    	rowSum [ i ] = sum ;					  
	if ( rowSum [ i ] < min_element ) :		      	int min_element = rowSum [ 0 ] ;			      }								  
	    min_element = rowSum [ i ]			      	for ( int i = 1 ;					      int maxDiff = rowSum [ 1 ] - rowSum [ 0 ] ;		  
    return max_diff					      	i < m ;							      int minElement = rowSum [ 0 ] ;				  
							      	i ++ ) {						      for ( int i = 1 ;						  
							      	  if ( rowSum [ i ] - min_element > max_diff ) max_diff = r   i < m ;							  
							      	  if ( rowSum [ i ] < min_element ) min_element = rowSum [    i ++ ) {							  
							      	}							    	if ( ( rowSum [ i ] - minElement ) > maxDiff ) {	  
							      	return max_diff ;					    	  maxDiff = rowSum [ i ] - minElement ;			  
							      }								    	}							  
							      								    	if ( ( rowSum [ i ] < minElement ) ) {			  
							      								    	  minElement = rowSum [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return maxDiff ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING  MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING  MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING  MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING
--							      --							    --								  --
def minimalSteps ( s , n ) :				      static int minimalSteps ( String s , int n ) {		    public static int minimalSteps ( String s , int n ) {	  script_not_found : None
    dp = [ INT_MAX for i in range ( n ) ]		      	int [ ] dp = new int [ n ] ;				      int [ ] dp = new int [ n ] ;				  
    s1 = ""						      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    s2 = ""						      	i < n ;							      i < dp . length ;						  
    dp [ 0 ] = 1					      	i ++ ) dp [ i ] = Integer . MAX_VALUE ;			      i ++ ) {							  
    s1 += s [ 0 ]					      	String s1 = "" , s2 = "" ;				    	dp [ i ] = Integer . valueOf ( i ) ;			  
    for i in range ( 1 , n ) :				      	dp [ 0 ] = 1 ;						      }								  
	s1 += s [ i ]					      	s1 += s . charAt ( 0 ) ;				      String s1 = "" ;						  
	s2 = s [ i + 1 : i + 1 + i + 1 ]		      	for ( int i = 1 ;					      String s2 = "" ;						  
	dp [ i ] = min ( dp [ i ] , dp [ i - 1 ] + 1 )	      	i < n ;							      dp [ 0 ] = 1 ;						  
	if ( s1 == s2 ) :				      	i ++ ) {						      s1 += s . charAt ( 0 ) ;					  
	    dp [ i * 2 + 1 ] = min ( dp [ i ] + 1 , dp [ i *  	  s1 += s . charAt ( i ) ;				      for ( int i = 1 ;						  
    return dp [ n - 1 ]					      	  s2 = s . substring ( i + 1 , i + 1 ) ;		      i < n ;							  
							      	  dp [ i ] = Math . min ( dp [ i ] , dp [ i - 1 ] + 1 ) ;     i ++ ) {							  
							      	  if ( s1 == s2 ) dp [ i * 2 + 1 ] = Math . min ( dp [ i ]  	s1 += s . charAt ( i ) ;				  
							      	}							    	s2 = s . substring ( i + 1 , i + 1 + i + 1 ) ;		  
							      	return dp [ n - 1 ] ;					    	dp [ i ] = Math . min ( dp [ i ] , dp [ i - 1 ] + 1 ) ;	  
							      }								    	if ( ( s1 . equals ( s2 ) ) ) {				  
							      								    	  dp [ i * 2 + 1 ] = Math . min ( dp [ i ] + 1 , dp [ i * 
							      								    	}							  
							      								      }								  
							      								      return dp [ n - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS		      LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS			    LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS			  LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS
--							      --							    --								  --
def longest ( a , n , k ) :				      static void longest ( int a [ ] , int n , int k ) {	    public static void longest ( int [ ] a , int n , int k ) {	  script_not_found : None
    freq = [ 0 ] * n					      	int [ ] freq = new int [ 7 ] ;				      int [ ] freq = new int [ n ] ;				  
    start = 0						      	int start = 0 , end = 0 , now = 0 , l = 0 ;		      int start = 0 ;						  
    end = 0						      	for ( int i = 0 ;					      int end = 0 ;						  
    now = 0						      	i < n ;							      int now = 0 ;						  
    l = 0						      	i ++ ) {						      int l = 0 ;						  
    for i in range ( n ) :				      	  freq [ a [ i ] ] ++ ;					      for ( int i = 0 ;						  
	freq [ a [ i ] ] += 1				      	  if ( freq [ a [ i ] ] == 1 ) now ++ ;			      i < n ;							  
	if ( freq [ a [ i ] ] == 1 ) :			      	  while ( now > k ) {					      i ++ ) {							  
	    now += 1					      	    freq [ a [ l ] ] -- ;				    	freq [ a [ i ] ] ++ ;					  
	while ( now > k ) :				      	    if ( freq [ a [ l ] ] == 0 ) now -- ;		    	if ( ( freq [ a [ i ] ] == 1 ) ) {			  
	    freq [ a [ l ] ] -= 1			      	    l ++ ;						    	  now ++ ;						  
	    if ( freq [ a [ l ] ] == 0 ) :		      	  }							    	}							  
		now -= 1				      	  if ( i - l + 1 >= end - start + 1 ) {			    	while ( ( now > k ) ) {					  
	    l += 1					      	    end = i ;						    	  freq [ a [ l ] ] -- ;					  
	if ( i - l + 1 >= end - start + 1 ) :		      	    start = l ;						    	  if ( ( freq [ a [ l ] ] == 0 ) ) {			  
	    end = i					      	  }							    	    now -- ;						  
	    start = l					      	}							    	  }							  
    for i in range ( start , end + 1 ) :		      	for ( int i = start ;					    	  l ++ ;						  
	print ( a [ i ] , end = " " )			      	i <= end ;						    	}							  
							      	i ++ ) System . out . print ( a [ i ] + " " ) ;		    	if ( ( i - l + 1 ) >= end - start + 1 ) {		  
							      }								    	  end = i ;						  
							      								    	  start = l ;						  
							      								    	}							  
							      								      }								  
							      								      for ( int i = start ;					  
							      								      i <= end ;						  
							      								      i ++ ) {							  
							      								    	System . out . print ( a [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PETERSON_GRAPH						      PETERSON_GRAPH						    PETERSON_GRAPH						  PETERSON_GRAPH
--							      --							    --								  --
def findthepath ( S , v ) :				      static boolean findthepath ( char [ ] S , int v ) {	    public static boolean findthepath ( String S , int v ) {	  script_not_found : None
    result [ 0 ] = v					      	result [ 0 ] = ( char ) ( v + '0' ) ;			      result [ 0 ] = v ;					  
    for i in range ( 1 , len ( S ) ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if ( adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) ] or a 	i < ( int ) S . length ;				      i < S . length ( ) ;					  
	    v = ord ( S [ i ] ) - ord ( 'A' )		      	i ++ ) {						      i ++ ) {							  
	elif ( adj [ v ] [ ord ( S [ i ] ) - ord ( 'A' ) + 5  	  if ( adj [ v ] [ S [ i ] - 'A' ] || adj [ S [ i ] - 'A' ] 	if ( ( adj [ v ] [ ( int ) S . charAt ( i ) - 'A' ] || ad 
	    v = ord ( S [ i ] ) - ord ( 'A' ) + 5	      	    v = S [ i ] - 'A' ;					    	  v = ( int ) S . charAt ( i ) - 'A' ;			  
	else :						      	  }							    	}							  
	    return False				      	  else if ( adj [ v ] [ S [ i ] - 'A' + 5 ] || adj [ S [ i  	else if ( ( adj [ v ] [ ( int ) S . charAt ( i ) - 'A' +  
	result.append ( v )				      	    v = S [ i ] - 'A' + 5 ;				    	  v = ( int ) S . charAt ( i ) - 'A' + 5 ;		  
    return True						      	  }							    	}							  
							      	  else return false ;					    	else {							  
							      	  result [ i ] = ( char ) ( v + '0' ) ;			    	  return false ;					  
							      	}							    	}							  
							      	return true ;						    	result [ i ] = v ;					  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		      COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		    COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		  COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE
--							      --							    --								  --
def printRect ( X , Y , n ) :				      static void printRect ( Integer X [ ] , Integer Y [ ] , int n public static void printRect ( int [ ] X , int [ ] Y , int n  script_not_found : None
    Xmax = max ( X )					      	int Xmax = Collections . max ( Arrays . asList ( X ) ) ;      int Xmax = Math . max ( X , 0 ) ;				  
    Xmin = min ( X )					      	int Xmin = Collections . min ( Arrays . asList ( X ) ) ;      int Xmin = Math . min ( X , 0 ) ;				  
    Ymax = max ( Y )					      	int Ymax = Collections . max ( Arrays . asList ( Y ) ) ;      int Ymax = Math . max ( Y , 0 ) ;				  
    Ymin = min ( Y )					      	int Ymin = Collections . min ( Arrays . asList ( Y ) ) ;      int Ymin = Math . min ( Y , 0 ) ;				  
    print ( "{" , Xmin , ", " , Ymin , "}" , sep = "" )	      	System . out . println ( "{" + Xmin + ", " + Ymin + "}" ) ;   System . out . println ( "{" + Xmin + ", " + Ymin + "}" + " 
    print ( "{" , Xmin , ", " , Ymax , "}" , sep = "" )	      	System . out . println ( "{" + Xmin + ", " + Ymax + "}" ) ;   System . out . println ( "{" + Xmin + ", " + Ymax + "}" + " 
    print ( "{" , Xmax , ", " , Ymax , "}" , sep = "" )	      	System . out . println ( "{" + Xmax + ", " + Ymax + "}" ) ;   System . out . println ( "{" + Xmax + ", " + Ymax + "}" + " 
    print ( "{" , Xmax , ", " , Ymin , "}" , sep = "" )	      	System . out . println ( "{" + Xmax + ", " + Ymin + "}" ) ;   System . out . println ( "{" + Xmax + ", " + Ymin + "}" + " 
							      }								      System . out . println ( "{" + Xmax + ", " + Ymax + "}" + " 
							      								      System . out . println ( "{" + Xmax + ", " + Ymin + "}" + " 
							      								      System . out . println ( "{" + Xmax + ", " + Ymin + "}" + " 
							      								      System . out . println ( "{" + Xmax + ", " + Ymax + "}" + " 
							      								      System . out . println ( "{" + Xmax + ", " + Ymin + "}" + " 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D		      FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D			    FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D			  FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D
--							      --							    --								  --
def findLargestd ( S , n ) :				      static int findLargestd ( int [ ] S , int n ) {		    static int findLargestd ( int [ ] S , int n ) {		  failure : #Results:8, 10
    found = False					      	boolean found = false ;					      boolean found = false ;					  
    S.sort ( )						      	Arrays . sort ( S ) ;					      Arrays . sort ( S ) ;					  
    for i in range ( n - 1 , - 1 , - 1 ) :		      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
	for j in range ( 0 , n ) :			      	i >= 0 ;						      i >= 0 ;							  
	    if ( i == j ) :				      	i -- ) {						      i -- ) {							  
		continue				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    for k in range ( j + 1 , n ) :		      	  j < n ;						    	j <= n ;						  
		if ( i == k ) :				      	  j ++ ) {						    	j ++ ) {						  
		    continue				      	    if ( i == j ) continue ;				    	  if ( ( i == j ) ) continue ;				  
		for l in range ( k + 1 , n ) :		      	    for ( int k = j + 1 ;				    	  for ( int k = j + 1 ;					  
		    if ( i == l ) :			      	    k < n ;						    	  k < n ;						  
			continue			      	    k ++ ) {						    	  k ++ ) {						  
		    if ( S [ i ] == S [ j ] + S [ k ] + S [ l 	      if ( i == k ) continue ;				    	    if ( ( i == k ) ) continue ;			  
			found = True			      	      for ( int l = k + 1 ;				    	    for ( int l = k + 1 ;				  
			return S [ i ]			      	      l < n ;						    	    l < n ;						  
    if ( found == False ) :				      	      l ++ ) {						    	    l ++ ) {						  
	return - 1					      		if ( i == l ) continue ;			    	      if ( ( i == l ) ) continue ;			  
							      		if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {	    	      if ( ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) ) { 
							      		  found = true ;				    		found = true ;					  
							      		  return S [ i ] ;				    		return S [ i ] ;				  
							      		}						    	      }							  
							      	      }							    	    }							  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	if ( found == false ) return Integer . MAX_VALUE ;	      if ( ( found == false ) ) return - 1 ;			  
							      	return - 1 ;						      return 0 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PRODUCT_SUBSET_ARRAY				      MAXIMUM_PRODUCT_SUBSET_ARRAY				    MAXIMUM_PRODUCT_SUBSET_ARRAY				  MAXIMUM_PRODUCT_SUBSET_ARRAY
--							      --							    --								  --
def maxProductSubset ( a , n ) :			      static int maxProductSubset ( int a [ ] , int n ) {	    public static int maxProductSubset ( int [ ] a , int n ) {	  error : MAXIMUM_PRODUCT_SUBSET_ARRAY.java:50: erro
    if n == 1 :						      	if ( n == 1 ) {						      if ( n == 1 ) {						  r: integer number too large	int maxNeg = - 99999
	return a [ 0 ]					      	  return a [ 0 ] ;					    	return a [ 0 ] ;					  9999999 ;		     ^ 1 error
    max_neg = - 999999999999				      	}							      }								  
    count_neg = 0					      	int max_neg = Integer . MIN_VALUE ;			      int maxNeg = - 999999999999 ;				  
    count_zero = 0					      	int count_neg = 0 , count_zero = 0 ;			      int countNeg = 0 ;					  
    prod = 1						      	int prod = 1 ;						      int countZero = 0 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      int prod = 1 ;						  
	if a [ i ] == 0 :				      	i < n ;							      for ( int i = 0 ;						  
	    count_zero += 1				      	i ++ ) {						      i < n ;							  
	    continue					      	  if ( a [ i ] == 0 ) {					      i ++ ) {							  
	if a [ i ] < 0 :				      	    count_zero ++ ;					    	if ( a [ i ] == 0 ) {					  
	    count_neg += 1				      	    continue ;						    	  countZero ++ ;					  
	    max_neg = max ( max_neg , a [ i ] )		      	  }							    	  continue ;						  
	prod = prod * a [ i ]				      	  if ( a [ i ] < 0 ) {					    	}							  
    if count_zero == n :				      	    count_neg ++ ;					    	if ( a [ i ] < 0 ) {					  
	return 0					      	    max_neg = Math . max ( max_neg , a [ i ] ) ;	    	  countNeg ++ ;						  
    if count_neg & 1 :					      	  }							    	  maxNeg = Math . max ( maxNeg , a [ i ] ) ;		  
	if ( count_neg == 1 and count_zero > 0 and count_zero 	  prod = prod * a [ i ] ;				    	}							  
	    return 0					      	}							    	prod = prod * a [ i ] ;					  
	prod = int ( prod / max_neg )			      	if ( count_zero == n ) {				      }								  
    return prod						      	  return 0 ;						      if ( countZero == n ) {					  
							      	}							    	return 0 ;						  
							      	if ( count_neg % 2 == 1 ) {				      }								  
							      	  if ( count_neg == 1 && count_zero > 0 && count_zero + cou   if ( ( countNeg & 1 ) != 0 ) {				  
							      	    return 0 ;						    	if ( ( countNeg == 1 ) && ( countZero > 0 ) && ( countZer 
							      	  }							    	  return 0 ;						  
							      	  prod = prod / max_neg ;				    	}							  
							      	}							    	prod = ( int ) ( prod / maxNeg ) ;			  
							      	return prod ;						      }								  
							      }								      return prod ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_JUMP_REACH_END			      COUNT_NUMBER_WAYS_JUMP_REACH_END				    COUNT_NUMBER_WAYS_JUMP_REACH_END				  COUNT_NUMBER_WAYS_JUMP_REACH_END
--							      --							    --								  --
def countWaysToJump ( arr , n ) :			      static void countWaysToJump ( int arr [ ] , int n ) {	    static void countWaysToJump ( int [ ] arr , int n ) {	  script_not_found : None
    count_jump = [ 0 for i in range ( n ) ]		      	int count_jump [ ] = new int [ n ] ;			      int [ ] countJump = new int [ n ] ;			  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	Arrays . fill ( count_jump , 0 ) ;			      for ( int i = 0 ;						  
	if ( arr [ i ] >= n - i - 1 ) :			      	for ( int i = n - 2 ;					      i < n ;							  
	    count_jump [ i ] += 1			      	i >= 0 ;						      i ++ ) {							  
	j = i + 1					      	i -- ) {						    	countJump [ i ] = 0 ;					  
	while ( j < n - 1 and j <= arr [ i ] + i ) :	      	  if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ;	      }								  
	    if ( count_jump [ j ] != - 1 ) :		      	  for ( int j = i + 1 ;					      for ( int i = n - 2 ;					  
		count_jump [ i ] += count_jump [ j ]	      	  j < n - 1 && j <= arr [ i ] + i ;			      i >= 0 ;							  
	    j += 1					      	  j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] +=   i -- ) {							  
	if ( count_jump [ i ] == 0 ) :			      	  if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ;	    	if ( ( arr [ i ] >= n - i - 1 ) ) {			  
	    count_jump [ i ] = - 1			      	}							    	  countJump [ i ] ++ ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					    	}							  
	print ( count_jump [ i ] , end = " " )		      	i < n ;							    	int j = i + 1 ;						  
							      	i ++ ) System . out . print ( count_jump [ i ] + " " ) ;    	while ( ( j < n - 1 ) && ( j <= arr [ i ] + i ) ) {	  
							      }								    	  if ( ( countJump [ j ] != - 1 ) ) {			  
							      								    	    countJump [ i ] += countJump [ j ] ;		  
							      								    	  }							  
							      								    	  j ++ ;						  
							      								    	}							  
							      								    	if ( ( countJump [ i ] == 0 ) ) {			  
							      								    	  countJump [ i ] = - 1 ;				  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( countJump [ i ] + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			      SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			    SUM_AREA_RECTANGLES_POSSIBLE_ARRAY				  SUM_AREA_RECTANGLES_POSSIBLE_ARRAY
--							      --							    --								  --
def MaxTotalRectangleArea ( a , n ) :			      static int MaxTotalRectangleArea ( int [ ] a , int n ) {	    public static int MaxTotalRectangleArea ( int [ ] a , int n ) error : SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.java:37
    a.sort ( reverse = True )				      	Arrays . sort ( a ) ;					      Arrays . sort ( a , Collections . reverseOrder ( ) ) ;	  : error: no suitable method found for sort(int[],C
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  omparator<Object>)   Arrays . sort ( a , Collectio
    flag = False					      	boolean flag = false ;					      boolean flag = false ;					  ns . reverseOrder ( ) ) ;	     ^	   method Ar
    len = 0						      	int len = 0 ;						      int len = 0 ;						  rays.<T#1>sort(T#1[],Comparator<? super T#1>) is n
    i = 0						      	for ( int i = 0 ;					      int i = 0 ;						  ot applicable	      (inference variable T#1 has in
    while ( i < n - 1 ) :				      	i < n ;							      while ( ( i < n - 1 ) ) {					  compatible bounds	    equality constraints: in
	if ( i != 0 ) :					      	i ++ ) {						    	if ( ( i != 0 ) ) {					  t	    lower bounds: Object)     method Arrays.
	    i = i + 1					      	  if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 	  i = i + 1 ;						  <T#2>sort(T#2[],int,int,Comparator<? super T#2>) i
	if ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i + 1  	    flag = true ;					    	}							  s not applicable	 (cannot infer type-variable
	    flag = True					      	    len = a [ i + 1 ] ;					    	if ( ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ]  (s) T#2	  (actual and formal argument lists
	    len = a [ i + 1 ]				      	    i ++ ;						    	  flag = true ;						  differ in length))   where T#1,T#2 are type-variab
	    i = i + 1					      	  }							    	  len = a [ i + 1 ] ;					  les:	   T#1 extends Object declared in method <T#
	elif ( ( a [ i ] == a [ i + 1 ] or a [ i ] - a [ i +  	  else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 	  i = i + 1 ;						  1>sort(T#1[],Comparator<? super T#1>)	    T#2 exte
	    sum = sum + a [ i + 1 ] * len		      	    sum = sum + a [ i + 1 ] * len ;			    	}							  nds Object declared in method <T#2>sort(T#2[],int,
	    flag = False				      	    flag = false ;					    	else if ( ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + int,Comparator<? super T#2>) Note: Some messages h
	    i = i + 1					      	    i ++ ;						    	  sum = sum + a [ i + 1 ] * len ;			  ave been simplified; recompile with -Xdiags:verbos
    return sum						      	  }							    	  flag = false ;					  e to get full output 1 error
							      	}							    	  i = i + 1 ;						  
							      	return sum ;						    	}							  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU
--							      --							    --								  --
def arrangeString ( string ) :				      static String arrangeString ( String str ) {		    public static String arrangeString ( String string ) {	  script_not_found : None
    char_count = [ 0 ] * MAX_CHAR			      	int char_count [ ] = new int [ MAX_CHAR ] ;		      int [ ] charCount = new int [ MAX_CHAR ] ;		  
    s = 0						      	int sum = 0 ;						      int s = 0 ;						  
    for i in range ( len ( string ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if string [ i ] >= "A" and string [ i ] <= "Z" :      	i < str . length ( ) ;					      i < string . length ( ) ;					  
	    char_count [ ord ( string [ i ] ) - ord ( "A" ) ] 	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( Character . isUpperCase ( str . charAt ( i ) ) ) cha 	if ( string . charAt ( i ) >= 'A' && string . charAt ( i  
	    s += ord ( string [ i ] ) - ord ( "0" )	      	  else sum = sum + ( str . charAt ( i ) - '0' ) ;	    	  charCount [ ( int ) string . charAt ( i ) - 'A' ] ++ ;  
    res = ""						      	}							    	}							  
    for i in range ( MAX_CHAR ) :			      	String res = "" ;					    	else {							  
	ch = chr ( ord ( "A" ) + i )			      	for ( int i = 0 ;					    	  s += ( int ) string . charAt ( i ) - '0' ;		  
	while char_count [ i ] :			      	i < MAX_CHAR ;						    	}							  
	    res += ch					      	i ++ ) {						      }								  
	    char_count [ i ] -= 1			      	  char ch = ( char ) ( 'A' + i ) ;			      String res = "" ;						  
    if s > 0 :						      	  while ( char_count [ i ] -- != 0 ) res = res + ch ;	      for ( int i = 0 ;						  
	res += str ( s )				      	}							      i < MAX_CHAR ;						  
    return res						      	if ( sum > 0 ) res = res + sum ;			      i ++ ) {							  
							      	return res ;						    	char ch = ( char ) ( ( int ) 'A' + i ) ;		  
							      }								    	while ( charCount [ i ] != 0 ) {			  
							      								    	  res += ch ;						  
							      								    	  charCount [ i ] -- ;					  
							      								    	}							  
							      								      }								  
							      								      if ( s > 0 ) {						  
							      								    	res += String . valueOf ( s ) ;				  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS	      MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS	    MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS		  MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS
--							      --							    --								  --
def getMinDiff ( arr , n , k ) :			      static int getMinDiff ( int arr [ ] , int n , int k ) {	    static int getMinDiff ( int [ ] arr , int n , int k ) {	  script_not_found : None
    if ( n == 1 ) :					      	if ( n == 1 ) return 0 ;				      if ( ( n == 1 ) ) {					  
	return 0					      	Arrays . sort ( arr ) ;					    	return 0 ;						  
    arr.sort ( )					      	int ans = arr [ n - 1 ] - arr [ 0 ] ;			      }								  
    ans = arr [ n - 1 ] - arr [ 0 ]			      	int small = arr [ 0 ] + k ;				      Arrays . sort ( arr ) ;					  
    small = arr [ 0 ] + k				      	int big = arr [ n - 1 ] - k ;				      int ans = arr [ n - 1 ] - arr [ 0 ] ;			  
    big = arr [ n - 1 ] - k				      	int temp = 0 ;						      int small = arr [ 0 ] + k ;				  
    if ( small > big ) :				      	if ( small > big ) {					      int big = arr [ n - 1 ] - k ;				  
	small , big = big , small			      	  temp = small ;					      if ( ( small > big ) ) {					  
    for i in range ( 1 , n - 1 ) :			      	  small = big ;						    	small = big ;						  
	subtract = arr [ i ] - k			      	  big = temp ;						    	big = small ;						  
	add = arr [ i ] + k				      	}							      }								  
	if ( subtract >= small or add <= big ) :	      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	    continue					      	i < n - 1 ;						      i < n - 1 ;						  
	if ( big - subtract <= add - small ) :		      	i ++ ) {						      i ++ ) {							  
	    small = subtract				      	  int subtract = arr [ i ] - k ;			    	int subtract = arr [ i ] - k ;				  
	else :						      	  int add = arr [ i ] + k ;				    	int add = arr [ i ] + k ;				  
	    big = add					      	  if ( subtract >= small || add <= big ) continue ;	    	if ( ( subtract >= small ) || ( add <= big ) ) {	  
    return min ( ans , big - small )			      	  if ( big - subtract <= add - small ) small = subtract ;   	  continue ;						  
							      	  else big = add ;					    	}							  
							      	}							    	if ( ( big - subtract <= add - small ) ) {		  
							      	return Math . min ( ans , big - small ) ;		    	  small = subtract ;					  
							      }								    	}							  
							      								    	else {							  
							      								    	  big = add ;						  
							      								    	}							  
							      								      }								  
							      								      return Math . min ( ans , big - small ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSTRING				      LONGEST_COMMON_SUBSTRING					    LONGEST_COMMON_SUBSTRING					  LONGEST_COMMON_SUBSTRING
--							      --							    --								  --
def LCSubStr ( X , Y , m , n ) :			      static int LCSubStr ( char X [ ] , char Y [ ] , int m , int n public static int LCSubStr ( String X , String Y , int m , in error : LONGEST_COMMON_SUBSTRING.java:42: error: c
    LCSuff = [ [ 0 for k in range ( n + 1 ) ] for l in range  	int LCStuff [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;	      int [ ] [ ] LCSuff = new int [ n + 1 ] [ m + 1 ] ;	  annot find symbol   i ++ ) if ( ( i == 0 ) || ( j
    result = 0						      	int result = 0 ;					      for ( int k = 0 ;						  == 0 ) ) LCSuff [ i ] [ j ] = 0 ;
    for i in range ( m + 1 ) :				      	for ( int i = 0 ;					      k < LCSuff . length ;					  		^   symbol:   variable j   location:
	for j in range ( n + 1 ) :			      	i <= m ;						      k ++ ) for ( int l = 0 ;					   class LONGEST_COMMON_SUBSTRING LONGEST_COMMON_SUB
	    if ( i == 0 or j == 0 ) :			      	i ++ ) {						      l < LCSuff . length ;					  STRING.java:42: error: cannot find symbol   i ++ )
		LCSuff [ i ] [ j ] = 0			      	  for ( int j = 0 ;					      l ++ ) for ( int i = 0 ;					   if ( ( i == 0 ) || ( j == 0 ) ) LCSuff [ i ] [ j
	    elif ( X [ i - 1 ] == Y [ j - 1 ] ) :	      	  j <= n ;						      i < LCSuff [ 0 ] . length ;				  ] = 0 ;
		LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 	  j ++ ) {						      i ++ ) if ( ( i == 0 ) || ( j == 0 ) ) LCSuff [ i ] [ j ] = 		^   symbol:   variable j   location:
		result = max ( result , LCSuff [ i ] [ j ] )  	    if ( i == 0 || j == 0 ) LCStuff [ i ] [ j ] = 0 ;	      else if ( ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) )   class LONGEST_COMMON_SUBSTRING LONGEST_COMMON_SUB
	    else :					      	    else if ( X [ i - 1 ] == Y [ j - 1 ] ) {		    	LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ;	  STRING.java:43: error: cannot find symbol   else i
		LCSuff [ i ] [ j ] = 0			      	      LCStuff [ i ] [ j ] = LCStuff [ i - 1 ] [ j - 1 ] + 1 	result = Math . max ( result , LCSuff [ i ] [ j ] ) ;	  f ( ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 )
    return result					      	      result = Integer . max ( result , LCStuff [ i ] [ j ]   }								   ) ) {
							      	    }							      else LCSuff [ i ] [ j ] = 0 ;				  	  ^   symbol:	variable j   location: class
							      	    else LCStuff [ i ] [ j ] = 0 ;			      return result ;						   LONGEST_COMMON_SUBSTRING LONGEST_COMMON_SUBSTRING
							      	  }							    }								  .java:44: error: cannot find symbol	  LCSuff [ i
							      	}							    								   ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ;
							      	return result ;						    								  	       ^   symbol:   variable j	  location:
							      }								    								  class LONGEST_COMMON_SUBSTRING LONGEST_COMMON_SUBS
							      								    								  TRING.java:44: error: cannot find symbol     LCSuf
							      								    								  f [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ;
							      								    								  					     ^	 sym
							      								    								  bol:	 variable j   location: class LONGEST_COMMON
							      								    								  _SUBSTRING LONGEST_COMMON_SUBSTRING.java:45: error
							      								    								  : cannot find symbol	   result = Math . max ( res
							      								    								  ult , LCSuff [ i ] [ j ] ) ;	   ^   symbol:	 var
							      								    								  iable result	 location: class LONGEST_COMMON_SUBS
							      								    								  TRING LONGEST_COMMON_SUBSTRING.java:45: error: can
							      								    								  not find symbol     result = Math . max ( result ,
							      								    								   LCSuff [ i ] [ j ] ) ;
							      								    								  ^   symbol:	variable result	  location: class LO
							      								    								  NGEST_COMMON_SUBSTRING LONGEST_COMMON_SUBSTRING.ja
							      								    								  va:45: error: cannot find symbol     result = Math
							      								    								   . max ( result , LCSuff [ i ] [ j ] ) ;
							      								    								  					   ^   symbo
							      								    								  l:   variable j   location: class LONGEST_COMMON_S
							      								    								  UBSTRING LONGEST_COMMON_SUBSTRING.java:47: error:
							      								    								  cannot find symbol   else LCSuff [ i ] [ j ] = 0 ;
							      								    								  			 ^   symbol:   variable j
							      								    								  location: class LONGEST_COMMON_SUBSTRING LONGEST_C
							      								    								  OMMON_SUBSTRING.java:48: error: cannot find symbol
							      								    								     return result ;	      ^	  symbol:   variable
							      								    								   result   location: class LONGEST_COMMON_SUBSTRING
							      								    								   LONGEST_COMMON_SUBSTRING.java:100: error: incompa
							      								    								  tible types: char[] cannot be converted to String
							      								    								  	  if(f_filled(param0.get(i),param1.get(i),pa
							      								    								  ram2.get(i),param3.get(i)) == f_gold(param0.get(i)
							      								    								  ,param1.get(i),param2.get(i),param3.get(i)))
							      								    								  			   ^ Note: Some messages hav
							      								    								  e been simplified; recompile with -Xdiags:verbose
							      								    								  to get full output 11 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A
--							      --							    --								  --
def printInSortedOrder ( arr , n ) :			      static void printInSortedOrder ( String arr [ ] , int n ) {   static void printInSortedOrder ( int [ ] arr , int n ) {	  script_not_found : None
    index = [ 0 ] * n					      	int index [ ] = new int [ n ] ;				      int [ ] index = new int [ n ] ;				  
    for i in range ( n ) :				      	int i , j , min ;					      for ( int i = 0 ;						  
	index [ i ] = i					      	for ( i = 0 ;						      i < n ;							  
    for i in range ( n - 1 ) :				      	i < n ;							      i ++ ) {							  
	min = i						      	i ++ ) {						    	index [ i ] = i ;					  
	for j in range ( i + 1 , n ) :			      	  index [ i ] = i ;					      }								  
	    if ( arr [ index [ min ] ] > arr [ index [ j ] ]  	}							      for ( int i = 0 ;						  
		min = j					      	for ( i = 0 ;						      i < n - 1 ;						  
	if ( min != i ) :				      	i < n - 1 ;						      i ++ ) {							  
	    index [ min ] , index [ i ] = index [ i ] , index 	i ++ ) {						    	int min = i ;						  
    for i in range ( n ) :				      	  min = i ;						    	for ( int j = i + 1 ;					  
	print ( arr [ index [ i ] ] , end = " " )	      	  for ( j = i + 1 ;					    	j < n ;							  
							      	  j < n ;						    	j ++ ) {						  
							      	  j ++ ) {						    	  if ( ( arr [ index [ min ] ] ) > arr [ index [ j ] ] )  
							      	    if ( arr [ index [ min ] ] . compareTo ( arr [ index [  	    min = j ;						  
							      	      min = j ;						    	  }							  
							      	    }							    	}							  
							      	  }							    	if ( ( min != i ) ) {					  
							      	  if ( min != i ) {					    	  index [ min ] = index [ i ] ;				  
							      	    int temp = index [ min ] ;				    	  index [ i ] = index [ min ] ;				  
							      	    index [ min ] = index [ i ] ;			    	}							  
							      	    index [ i ] = temp ;				      }								  
							      	  }							      for ( int i = 0 ;						  
							      	}							      i < n ;							  
							      	for ( i = 0 ;						      i ++ ) {							  
							      	i < n ;							    	System . out . print ( arr [ index [ i ] ] + " " ) ;	  
							      	i ++ ) {						      }								  
							      	  System . out . print ( arr [ index [ i ] ] + " " ) ;	    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_CHECK					      DIVISIBILITY_CHECK					    DIVISIBILITY_CHECK						  DIVISIBILITY_CHECK
--							      --							    --								  --
def divisibilityCheck ( arr , n ) :			      static void divisibilityCheck ( List < Integer > arr , int n  public static void divisibilityCheck ( int [ ] arr , int n )  script_not_found : None
    s = dict ( )					      	List < Integer > s = new ArrayList < Integer > ( ) ;	      Map < Integer , Integer > s = new HashMap < > ( ) ;	  
    max_ele = - 10 ** 9					      	int max_ele = Integer . MIN_VALUE ;			      int maxEle = - 10 * 9 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	s [ arr [ i ] ] = 1				      	i < n ;							      i < n ;							  
	max_ele = max ( max_ele , arr [ i ] )		      	i ++ ) {						      i ++ ) {							  
    res = dict ( )					      	  s . add ( arr . get ( i ) ) ;				    	s . put ( arr [ i ] , 1 ) ;				  
    for i in range ( n ) :				      	  max_ele = Math . max ( max_ele , arr . get ( i ) ) ;	    	maxEle = Math . max ( maxEle , arr [ i ] ) ;		  
	if ( arr [ i ] != 0 ) :				      	}							      }								  
	    for j in range ( arr [ i ] * 2 , max_ele + 1 , ar 	LinkedHashSet < Integer > res = new LinkedHashSet < Integer   Map < Integer , Integer > res = new HashMap < > ( ) ;	  
		if ( j in s.keys ( ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  
		    res [ j ] = 1			      	i < n ;							      i < n ;							  
    for x in res :					      	i ++ ) {						      i ++ ) {							  
	print ( x , end = " " )				      	  if ( arr . get ( i ) != 0 ) for ( int j = arr . get ( i ) 	if ( ( arr [ i ] != 0 ) ) {				  
							      	  j <= max_ele ;					    	  for ( int j = arr [ i ] * 2 ;				  
							      	  j += arr . get ( i ) ) {				    	  j <= maxEle ;						  
							      	    if ( s . contains ( j ) ) res . add ( j ) ;		    	  j += arr [ i ] ) {					  
							      	  }							    	    if ( ( s . keySet ( ) . contains ( j ) ) ) {	  
							      	}							    	      res . put ( j , 1 ) ;				  
							      	List < Integer > list = new ArrayList < Integer > ( res ) ; 	    }							  
							      	Collections . reverse ( list ) ;			    	  }							  
							      	for ( Integer temp : list ) System . out . print ( temp + " 	}							  
							      }								      }								  
							      								      for ( Integer x : res . keySet ( ) ) {			  
							      								    	System . out . print ( x + " " ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C			      MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C			    MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C				  MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C
--							      --							    --								  --
def maximumSegments ( n , a , b , c ) :			      static int maximumSegments ( int n , int a , int b , int c )  public static int maximumSegments ( int n , int a , int b , i failure : #Results:3, 10
    dp = [ - 1 ] * ( n + 10 )				      	int dp [ ] = new int [ n + 10 ] ;			      int [ ] dp = new int [ n + 10 ] ;				  
    dp [ 0 ] = 0					      	Arrays . fill ( dp , - 1 ) ;				      dp [ 0 ] = 0 ;						  
    for i in range ( 0 , n ) :				      	dp [ 0 ] = 0 ;						      for ( int i = 0 ;						  
	if ( dp [ i ] != - 1 ) :			      	for ( int i = 0 ;					      i <= n ;							  
	    if ( i + a <= n ) :				      	i < n ;							      i ++ ) {							  
		dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i +  	i ++ ) {						    	if ( ( dp [ i ] != - 1 ) ) {				  
	    if ( i + b <= n ) :				      	  if ( dp [ i ] != - 1 ) {				    	  if ( ( i + a ) <= n ) dp [ i + a ] = Math . max ( dp [  
		dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i +  	    if ( i + a <= n ) dp [ i + a ] = Math . max ( dp [ i ]  	  if ( ( i + b ) <= n ) dp [ i + b ] = Math . max ( dp [  
	    if ( i + c <= n ) :				      	    if ( i + b <= n ) dp [ i + b ] = Math . max ( dp [ i ]  	  if ( ( i + c ) <= n ) dp [ i + c ] = Math . max ( dp [  
		dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i +  	    if ( i + c <= n ) dp [ i + c ] = Math . max ( dp [ i ]  	}							  
    return dp [ n ]					      	  }							      }								  
							      	}							      return dp [ n ] ;						  
							      	return dp [ n ] ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MAXIMUM_SHORTEST_DISTANCE				      PRINT_MAXIMUM_SHORTEST_DISTANCE				    PRINT_MAXIMUM_SHORTEST_DISTANCE				  PRINT_MAXIMUM_SHORTEST_DISTANCE
--							      --							    --								  --
def find_maximum ( a , n , k ) :			      static int find_maximum ( int a [ ] , int n , int k ) {	    public static int findMaximum ( int [ ] a , int n , int k ) { error : PRINT_MAXIMUM_SHORTEST_DISTANCE.java:37: e
    b = dict ( )					      	HashMap < Integer , Integer > b = new HashMap < Integer , I   Map < Integer , Integer > b = Maps . newHashMap ( ) ;	  rror: cannot find symbol   Map < Integer , Integer
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						   > b = Maps . newHashMap ( ) ;
	x = a [ i ]					      	i < n ;							      i < n ;							  	       ^   symbol:   variable Maps   locatio
	d = min ( 1 + i , n - i )			      	i ++ ) {						      i ++ ) {							  n: class PRINT_MAXIMUM_SHORTEST_DISTANCE 1 error
	if x not in b.keys ( ) :			      	  int x = a [ i ] ;					    	int x = a [ i ] ;					  
	    b [ x ] = d					      	  int d = Math . min ( 1 + i , n - i ) ;		    	int d = Math . min ( 1 + i , n - i ) ;			  
	else :						      	  if ( ! b . containsKey ( x ) ) b . put ( x , d ) ;	    	if ( ! b . keySet ( ) . contains ( x ) ) {		  
	    b [ x ] = min ( d , b [ x ] )		      	  else {						    	  b . put ( x , d ) ;					  
    ans = 10 ** 9					      	    b . put ( x , Math . min ( d , b . get ( x ) ) ) ;	    	}							  
    for i in range ( n ) :				      	  }							    	else {							  
	x = a [ i ]					      	}							    	  b . put ( x , Math . min ( d , b . get ( x ) ) ) ;	  
	if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :   	int ans = Integer . MAX_VALUE ;				    	}							  
	    ans = min ( max ( b [ x ] , b [ k - x ] ) , ans ) 	for ( int i = 0 ;					      }								  
    return ans						      	i < n ;							      int ans = 10 * 9 ;					  
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  int x = a [ i ] ;					      i < n ;							  
							      	  if ( x != k - x && b . containsKey ( k - x ) ) ans = Math   i ++ ) {							  
							      	}							    	int x = a [ i ] ;					  
							      	return ans ;						    	if ( ( x != ( k - x ) ) && b . keySet ( ) . contains ( (  
							      }								    	  ans = Math . min ( Math . max ( b . get ( x ) , b . get 
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N			      NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N			    NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N			  NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N
--							      --							    --								  --
def countDivisibleSubseq ( str , n ) :			      static int countDivisibleSubseq ( String str , int n ) {	    static int countDivisibleSubseq ( String str , int n ) {	  error : NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N.jav
    l = len ( str )					      	int len = str . length ( ) ;				      int l = str . length ( ) ;				  a:48: error: ';' expected	  dp [ i ] [ ( j * 1
    dp = [ [ 0 for x in range ( l ) ] for y in range ( n ) ]  	int dp [ ] [ ] = new int [ len ] [ n ] ;		      int [ ] [ ] dp = new int [ l ] [ n ] ;			  0 + ( ( int ) str . charAt ( i ) - '0' ) ) ] ++ dp
    dp [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % n ] += 1 	dp [ 0 ] [ ( str . charAt ( 0 ) - '0' ) % n ] ++ ;	      for ( int x = 0 ;						   [ i - 1 ] [ j ] ;
    for i in range ( 1 , l ) :				      	for ( int i = 1 ;					      x < l ;							  					  ^ NUMBER_S
	dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ]  	i < len ;						      x ++ ) {							  UBSEQUENCES_STRING_DIVISIBLE_N.java:48: error: not
	for j in range ( n ) :				      	i ++ ) {						    	dp [ x ] [ ( ( int ) str . charAt ( x ) - '0' ) ] ++ ;	   a statement	     dp [ i ] [ ( j * 10 + ( ( int )
	    dp [ i ] [ j ] += dp [ i - 1 ] [ j ]	      	  dp [ i ] [ ( str . charAt ( i ) - '0' ) % n ] ++ ;	      }								   str . charAt ( i ) - '0' ) ) ] ++ dp [ i - 1 ] [
	    dp [ i ] [ ( j * 10 + ( ord ( str [ i ] ) - ord ( 	  for ( int j = 0 ;					      for ( int i = 1 ;						  j ] ;
    return dp [ l - 1 ] [ 0 ]				      	  j < n ;						      i < l ;							  					   ^ 2 error
							      	  j ++ ) {						      i ++ ) {							  s
							      	    dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;		    	dp [ i ] [ ( ( int ) str . charAt ( i ) - '0' ) ] ++ ;	  
							      	    dp [ i ] [ ( j * 10 + ( str . charAt ( i ) - '0' ) ) %  	for ( int j = 0 ;					  
							      	  }							    	j < n ;							  
							      	}							    	j ++ ) {						  
							      	return dp [ len - 1 ] [ 0 ] ;				    	  dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;		  
							      }								    	  dp [ i ] [ ( j * 10 + ( ( int ) str . charAt ( i ) - '0 
							      								    	}							  
							      								      }								  
							      								      return dp [ l - 1 ] [ 0 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM_1					      KNAPSACK_PROBLEM_1					    KNAPSACK_PROBLEM_1						  KNAPSACK_PROBLEM_1
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int [ ] wt , int [ ] [ ] script_not_found : None
    K = [ [ 0 for x in range ( W + 1 ) ] for x in range ( n + 	int i , w ;						      int [ ] [ ] K = new int [ W + 1 ] [ n + 1 ] ;		  
    for i in range ( n + 1 ) :				      	int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		      for ( int i = 0 ;						  
	for w in range ( W + 1 ) :			      	for ( i = 0 ;						      i < n + 1 ;						  
	    if i == 0 or w == 0 :			      	i <= n ;						      i ++ ) for ( int w = 0 ;					  
		K [ i ] [ w ] = 0			      	i ++ ) {						      w < W + 1 ;						  
	    elif wt [ i - 1 ] <= w :			      	  for ( w = 0 ;						      w ++ ) if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;	  
		K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 	  w <= W ;						      else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . max (  
	    else :					      	  w ++ ) {						      else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;			  
		K [ i ] [ w ] = K [ i - 1 ] [ w ]	      	    if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;		      return K [ n ] [ W ] ;					  
    return K [ n ] [ W ]				      	    else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val }								  
							      	    else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		    								  
							      	  }							    								  
							      	}							    								  
							      	return K [ n ] [ W ] ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1
--							      --							    --								  --
def maxSumWO3Consec ( n ) :				      static int maxSumWO3Consec ( int n ) {			    public static int maxSumWO3Consec ( int n ) {		  script_not_found : None
    if ( sum [ n ] != - 1 ) :				      	if ( sum [ n ] != - 1 ) return sum [ n ] ;		      if ( ( sum [ n ] != - 1 ) ) {				  
	return sum [ n ]				      	if ( n == 0 ) return sum [ n ] = 0 ;			    	return sum [ n ] ;					  
    if ( n == 0 ) :					      	if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;		      }								  
	sum [ n ] = 0					      	if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;      if ( ( n == 0 ) ) {					  
	return sum [ n ]				      	return sum [ n ] = Math . max ( Math . max ( maxSumWO3Conse 	sum [ n ] = 0 ;						  
    if ( n == 1 ) :					      }								    	return sum [ n ] ;					  
	sum [ n ] = arr [ 0 ]				      								      }								  
	return sum [ n ]				      								      if ( ( n == 1 ) ) {					  
    if ( n == 2 ) :					      								    	sum [ n ] = arr [ 0 ] ;					  
	sum [ n ] = arr [ 1 ] + arr [ 0 ]		      								    	return sum [ n ] ;					  
	return sum [ n ]				      								      }								  
    sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ) , maxSu 								      if ( ( n == 2 ) ) {					  
    return sum [ n ]					      								    	sum [ n ] = arr [ 1 ] + arr [ 0 ] ;			  
							      								    	return sum [ n ] ;					  
							      								      }								  
							      								      sum [ n ] = Math . max ( Math . max ( maxSumWO3Consec ( n - 
							      								      return sum [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE			      LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE			    LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE			  LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE
--							      --							    --								  --
def longOddEvenIncSeq ( arr , n ) :			      public static int longOddEvenIncSeq ( int arr [ ] , int n ) { public static int longOddEvenIncSeq ( int [ ] arr , int n ) { error : LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE.ja
    lioes = list ( )					      	int [ ] lioes = new int [ n ] ;				      int [ ] lioes = new int [ n ] ;				  va:51: error: variable i is already defined in met
    maxLen = 0						      	int maxLen = 0 ;					      int maxLen = 0 ;						  hod f_filled(int[],int)   for ( int i = 0 ;
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  	^ 1 error
	lioes.append ( 1 )				      	i < n ;							      i < n ;							  
    i = 1						      	i ++ ) lioes [ i ] = 1 ;				      i ++ ) {							  
    for i in range ( n ) :				      	for ( int i = 1 ;					    	lioes [ i ] = 1 ;					  
	for j in range ( i ) :				      	i < n ;							      }								  
	    if ( arr [ i ] > arr [ j ] and ( arr [ i ] + arr  	i ++ ) for ( int j = 0 ;				      int i = 1 ;						  
		lioes [ i ] = lioes [ j ] + 1		      	j < i ;							      for ( ;							  
    for i in range ( n ) :				      	j ++ ) if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j    i < n ;							  
	if maxLen < lioes [ i ] :			      	for ( int i = 0 ;					      i ++ ) {							  
	    maxLen = lioes [ i ]			      	i < n ;							    	for ( int j = 0 ;					  
    return maxLen					      	i ++ ) if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ] ;   	j < i ;							  
							      	return maxLen ;						    	j ++ ) {						  
							      }								    	  if ( ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j ] 
							      								    	    lioes [ i ] = lioes [ j ] + 1 ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( maxLen < lioes [ i ] ) {				  
							      								    	  maxLen = lioes [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2	      LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2	    LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2		  LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2
--							      --							    --								  --
def longLenSub ( arr , n ) :				      static int longLenSub ( int [ ] arr , int n ) {		    public static int longLenSub ( int [ ] arr , int n ) {	  success : None
    um = defaultdict ( lambda : 0 )			      	HashMap < Integer , Integer > um = new HashMap < Integer ,    Map < Integer , Integer > um = new TreeMap < > ( ) ;	  
    longLen = 0						      	int longLen = 0 ;					      int longLen = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	len1 = 0					      	i < n ;							      i < n ;							  
	if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] -  	i ++ ) {						      i ++ ) {							  
	    len1 = um [ arr [ i ] - 1 ]			      	  int len = 0 ;						    	int len1 = 0 ;						  
	if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] +  	  if ( um . containsKey ( arr [ i ] - 1 ) && len < um . get 	if ( ( um . containsKey ( arr [ i ] - 1 ) ) && ( len1 < u 
	    len1 = um [ arr [ i ] + 1 ]			      	  if ( um . containsKey ( arr [ i ] + 1 ) && len < um . get 	  len1 = um . get ( arr [ i ] - 1 ) ;			  
	um [ arr [ i ] ] = len1 + 1			      	  um . put ( arr [ i ] , len + 1 ) ;			    	}							  
	if longLen < um [ arr [ i ] ] :			      	  if ( longLen < um . get ( arr [ i ] ) ) longLen = um . ge 	if ( ( um . containsKey ( arr [ i ] + 1 ) ) && ( len1 < u 
	    longLen = um [ arr [ i ] ]			      	}							    	  len1 = um . get ( arr [ i ] + 1 ) ;			  
    return longLen					      	return longLen ;					    	}							  
							      }								    	um . put ( arr [ i ] , len1 + 1 ) ;			  
							      								    	if ( longLen < um . get ( arr [ i ] ) ) {		  
							      								    	  longLen = um . get ( arr [ i ] ) ;			  
							      								    	}							  
							      								      }								  
							      								      return longLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1
--							      --							    --								  --
def countP ( n , k ) :					      static int countP ( int n , int k ) {			    public static int countP ( int n , int k ) {		  error : Exception in thread "main" java.lang.Array
    dp = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n  	int [ ] [ ] dp = new int [ n + 1 ] [ k + 1 ] ;		      int [ ] [ ] dp = new int [ k + 1 ] [ n + 1 ] ;		  IndexOutOfBoundsException: Index 99 out of bounds
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  for length 85 	at COUNT_NUMBER_OF_WAYS_TO_PARTITIO
	dp [ i ] [ 0 ] = 0				      	i <= n ;						      i < n + 1 ;						  N_A_SET_INTO_K_SUBSETS_1.f_filled(COUNT_NUMBER_OF_
    for i in range ( k + 1 ) :				      	i ++ ) dp [ i ] [ 0 ] = 0 ;				      i ++ ) {							  WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1.java:41)
	dp [ 0 ] [ k ] = 0				      	for ( int i = 0 ;					    	dp [ i ] [ 0 ] = 0 ;					  	at COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K
    for i in range ( 1 , n + 1 ) :			      	i <= k ;						      }								  _SUBSETS_1.main(COUNT_NUMBER_OF_WAYS_TO_PARTITION_
	for j in range ( 1 , k + 1 ) :			      	i ++ ) dp [ 0 ] [ k ] = 0 ;				      for ( int i = 0 ;						  A_SET_INTO_K_SUBSETS_1.java:87)
	    if ( j == 1 or i == j ) :			      	for ( int i = 1 ;					      i < k + 1 ;						  
		dp [ i ] [ j ] = 1			      	i <= n ;						      i ++ ) {							  
	    else :					      	i ++ ) for ( int j = 1 ;				    	dp [ 0 ] [ k ] = 0 ;					  
		dp [ i ] [ j ] = ( j * dp [ i - 1 ] [ j ] + d 	j <= k ;						      }								  
    return dp [ n ] [ k ]				      	j ++ ) if ( j == 1 || i == j ) dp [ i ] [ j ] = 1 ;	      for ( int i = 1 ;						  
							      	else dp [ i ] [ j ] = j * dp [ i - 1 ] [ j ] + dp [ i - 1 ]   i <= n ;							  
							      	return dp [ n ] [ k ] ;					      i ++ ) {							  
							      }								    	for ( int j = 1 ;					  
							      								    	j <= k ;						  
							      								    	j ++ ) {						  
							      								    	  if ( ( j == 1 ) || ( i == j ) ) {			  
							      								    	    dp [ i ] [ j ] = 1 ;				  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = ( j * dp [ i - 1 ] [ j ] + dp [ i -  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] [ k ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SERIES_LARGEST_GCD_SUM_EQUALS_N				      SERIES_LARGEST_GCD_SUM_EQUALS_N				    SERIES_LARGEST_GCD_SUM_EQUALS_N				  SERIES_LARGEST_GCD_SUM_EQUALS_N
--							      --							    --								  --
def print_sequence ( n , k ) :				      static void print_sequence ( int n , int k ) {		    public static void printSequence ( int n , int k ) {	  script_not_found : None
    b = int ( n / ( k * ( k + 1 ) / 2 ) )		      	int b = n / ( k * ( k + 1 ) / 2 ) ;			      int b = ( int ) ( n / ( k * ( k + 1 ) / 2 ) ) ;		  
    if b == 0 :						      	if ( b == 0 ) {						      if ( b == 0 ) {						  
	print ( "-1" )					      	  System . out . println ( "-1" ) ;			    	System . out . println ( "-1" ) ;			  
    else :						      	}							      }								  
	r = 1						      	else {							      else {							  
	x = 1						      	  int r = 1 ;						    	int r = 1 ;						  
	while x ** 2 <= n :				      	  for ( int x = 1 ;					    	int x = 1 ;						  
	    if n % x != 0 :				      	  x * x <= n ;						    	while ( x * x <= n ) {					  
		continue				      	  x ++ ) {						    	  if ( n % x != 0 ) continue ;				  
	    elif x <= b and x > r :			      	    if ( n % x != 0 ) continue ;			    	  else if ( x <= b && x > r ) r = x ;			  
		r = x					      	    if ( x <= b && x > r ) r = x ;			    	  else if ( n / x <= b && n / x > r ) r = n / x ;	  
	    elif n / x <= b and n / x > r :		      	    if ( n / x <= b && n / x > r ) r = n / x ;		    	  x = x + 1 ;						  
		r = n / x				      	  }							    	}							  
	    x = x + 1					      	  for ( int i = 1 ;					    	int i = 1 ;						  
	i = 1						      	  i < k ;						    	while ( i < k ) {					  
	while i < k :					      	  i ++ ) System . out . print ( r * i + " " ) ;		    	  System . out . print ( r * i + " " ) ;		  
	    print ( r * i , end = " " )			      	  int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;		    	  i = i + 1 ;						  
	    i = i + 1					      	  System . out . println ( res ) ;			    	}							  
	last_term = n - ( r * ( k * ( k - 1 ) / 2 ) )	      	}							    	int lastTerm = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;	  
	print ( last_term )				      }								    	System . out . println ( lastTerm ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		      FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		    FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		  FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE
--							      --							    --								  --
def maxHamming ( arr , n ) :				      static int maxHamming ( int arr [ ] , int n ) {		    public static int maxHamming ( int [ ] arr , int n ) {	  error : FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTA
    brr = [ 0 ] * ( 2 * n + 1 )				      	int brr [ ] = new int [ 2 * n + 1 ] ;			      int [ ] brr = new int [ 2 * n + 1 ] ;			  NCE.java:57: error: cannot find symbol   if ( curr
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  Ham == n ) return n ;	       ^   symbol:   variabl
	brr [ i ] = arr [ i ]				      	i < n ;							      i < n ;							  e currHam   location: class FIND_A_ROTATION_WITH_M
    for i in range ( n ) :				      	i ++ ) brr [ i ] = arr [ i ] ;				      i ++ ) brr [ i ] = arr [ i ] ;				  AXIMUM_HAMMING_DISTANCE FIND_A_ROTATION_WITH_MAXIM
	brr [ n + i ] = arr [ i ]			      	for ( int i = 0 ;					      for ( int i = 0 ;						  UM_HAMMING_DISTANCE.java:58: error: cannot find sy
    maxHam = 0						      	i < n ;							      i < n ;							  mbol	 maxHam = Math . max ( maxHam , currHam ) ;
    for i in range ( 1 , n ) :				      	i ++ ) brr [ n + i ] = arr [ i ] ;			      i ++ ) brr [ n + i ] = arr [ i ] ;			  				   ^   symbol:	 var
	currHam = 0					      	int maxHam = 0 ;					      int maxHam = 0 ;						  iable currHam	  location: class FIND_A_ROTATION_WI
	k = 0						      	for ( int i = 1 ;					      for ( int i = 1 ;						  TH_MAXIMUM_HAMMING_DISTANCE 2 errors
	for j in range ( i , i + n ) :			      	i < n ;							      i < n ;							  
	    if brr [ j ] != arr [ k ] :			      	i ++ ) {						      i ++ ) {							  
		currHam += 1				      	  int currHam = 0 ;					    	int currHam = 0 ;					  
		k = k + 1				      	  for ( int j = i , k = 0 ;				    	int k = 0 ;						  
	if currHam == n :				      	  j < ( i + n ) ;					    	for ( int j = i ;					  
	    return n					      	  j ++ , k ++ ) if ( brr [ j ] != arr [ k ] ) currHam ++ ;  	j < i + n ;						  
	maxHam = max ( maxHam , currHam )		      	  if ( currHam == n ) return n ;			    	j ++ ) if ( brr [ j ] != arr [ k ] ) {			  
    return maxHam					      	  maxHam = Math . max ( maxHam , currHam ) ;		    	  currHam ++ ;						  
							      	}							    	  k = k + 1 ;						  
							      	return maxHam ;						    	}							  
							      }								      }								  
							      								      if ( currHam == n ) return n ;				  
							      								      maxHam = Math . max ( maxHam , currHam ) ;		  
							      								      return maxHam ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		      LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		    LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		  LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S
--							      --							    --								  --
def findSubArray ( arr , n ) :				      int findSubArray ( int arr [ ] , int n ) {		    static int findSubArray ( int [ ] arr , int n ) {		  error : LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_A
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  ND_1S.java:52: error: cannot find symbol	   s
    maxsize = - 1					      	int maxsize = - 1 , startindex = 0 ;			      int maxsize = - 1 ;					  tartindex = i ;	  ^   symbol:	variable sta
    for i in range ( 0 , n - 1 ) :			      	int endindex = 0 ;					      for ( int i = 0 ;						  rtindex   location: class LARGEST_SUBARRAY_WITH_EQ
	sum = - 1 if ( arr [ i ] == 0 ) else 1		      	for ( int i = 0 ;					      i <= n - 1 ;						  UAL_NUMBER_OF_0S_AND_1S LARGEST_SUBARRAY_WITH_EQUA
	for j in range ( i + 1 , n ) :			      	i < n - 1 ;						      i ++ ) {							  L_NUMBER_OF_0S_AND_1S.java:60: error: cannot find
	    sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else su 	i ++ ) {						    	sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;			  symbol     System . out . println ( startindex + "
	    if ( sum == 0 and maxsize < j - i + 1 ) :	      	  sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;			    	for ( int j = i + 1 ;					   to " + ( startindex + maxsize - 1 ) ) ;
		maxsize = j - i + 1			      	  for ( int j = i + 1 ;					    	j < n ;							  		      ^	  symbol:   variable startin
		startindex = i				      	  j < n ;						    	j ++ ) {						  dex	location: class LARGEST_SUBARRAY_WITH_EQUAL_
    if ( maxsize == - 1 ) :				      	  j ++ ) {						    	  sum = ( arr [ j ] == 0 ) ? sum + ( - 1 ) : sum + 1 ;	  NUMBER_OF_0S_AND_1S LARGEST_SUBARRAY_WITH_EQUAL_NU
	print ( "No such subarray" )			      	    if ( arr [ j ] == 0 ) sum += - 1 ;			    	  if ( ( sum == 0 ) && maxsize < j - i + 1 ) {		  MBER_OF_0S_AND_1S.java:60: error: cannot find symb
    else :						      	    else sum += 1 ;					    	    maxsize = j - i + 1 ;				  ol	 System . out . println ( startindex + " to
	print ( startindex , "to" , startindex + maxsize - 1  	    if ( sum == 0 && maxsize < j - i + 1 ) {		    	    startindex = i ;					  " + ( startindex + maxsize - 1 ) ) ;
    return maxsize					      	      maxsize = j - i + 1 ;				    	  }							  					  ^   symbol
							      	      startindex = i ;					    	}							  :   variable startindex   location: class LARGEST_
							      	    }							      }								  SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S 3 errors
							      	  }							      if ( ( maxsize == - 1 ) ) {				  
							      	}							    	System . out . println ( "No such subarray" ) ;		  
							      	endindex = startindex + maxsize - 1 ;			      }								  
							      	if ( maxsize == - 1 ) System . out . println ( "No such sub   else {							  
							      	else System . out . println ( startindex + " to " + endinde 	System . out . println ( startindex + " to " + ( startind 
							      	return maxsize ;					      }								  
							      }								      return maxsize ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	      CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	    CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	  CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS
--							      --							    --								  --
def HalfDiagonalSums ( mat , n ) :			      static boolean HalfDiagonalSums ( int mat [ ] [ ] , int n ) { public static boolean HalfDiagonalSums ( int [ ] [ ] mat , in success : None
    diag1_left = 0					      	int diag1_left = 0 , diag1_right = 0 ;			      int diag1Left = 0 ;					  
    diag1_right = 0					      	int diag2_left = 0 , diag2_right = 0 ;			      int diag1Right = 0 ;					  
    diag2_left = 0					      	for ( int i = 0 , j = n - 1 ;				      int diag2Left = 0 ;					  
    diag2_right = 0					      	i < n ;							      int diag2Right = 0 ;					  
    i = 0						      	i ++ , j -- ) {						      int i = 0 ;						  
    j = n - 1						      	  if ( i < n / 2 ) {					      int j = n - 1 ;						  
    while i < n :					      	    diag1_left += mat [ i ] [ i ] ;			      while ( i < n ) {						  
	if ( i < n // 2 ) :				      	    diag2_left += mat [ j ] [ i ] ;			    	if ( ( i < n / 2 ) ) {					  
	    diag1_left += mat [ i ] [ i ]		      	  }							    	  diag1Left += mat [ i ] [ i ] ;			  
	    diag2_left += mat [ j ] [ i ]		      	  else if ( i > n / 2 ) {				    	  diag2Left += mat [ j ] [ i ] ;			  
	elif ( i > n // 2 ) :				      	    diag1_right += mat [ i ] [ i ] ;			    	}							  
	    diag1_right += mat [ i ] [ i ]		      	    diag2_right += mat [ j ] [ i ] ;			    	else if ( ( i > n / 2 ) ) {				  
	    diag2_right += mat [ j ] [ i ]		      	  }							    	  diag1Right += mat [ i ] [ i ] ;			  
	i += 1						      	}							    	  diag2Right += mat [ j ] [ i ] ;			  
	j -= 1						      	return ( diag1_left == diag2_right && diag2_right == diag2_ 	}							  
    return ( diag1_left == diag2_right and diag2_right == dia }								    	i ++ ;							  
							      								    	j -- ;							  
							      								      }								  
							      								      return ( diag1Left == diag2Right && diag2Right == diag1Left 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK	      CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK		    CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK		  CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK
--							      --							    --								  --
def checkSorted ( n , q ) :				      static boolean checkSorted ( int n ) {			    static boolean checkSorted ( int n , PriorityQueue < Integer  script_not_found : None
    st = [ ]						      	Stack < Integer > st = new Stack < Integer > ( ) ;	      Stack < Integer > st = new Stack < > ( ) ;		  
    expected = 1					      	int expected = 1 ;					      int expected = 1 ;					  
    fnt = None						      	int fnt ;						      Integer fnt ;						  
    while ( not q.empty ( ) ) :				      	while ( q . size ( ) != 0 ) {				      while ( ( fnt = q . pop ( ) ) == null ) {			  
	fnt = q.queue [ 0 ]				      	  fnt = q . peek ( ) ;					    	fnt = q . peek ( ) ;					  
	q.get ( )					      	  q . poll ( ) ;					    	q . poll ( ) ;						  
	if ( fnt == expected ) :			      	  if ( fnt == expected ) expected ++ ;			    	if ( ( fnt == expected ) ) {				  
	    expected += 1				      	  else {						    	  expected ++ ;						  
	else :						      	    if ( st . size ( ) == 0 ) {				    	}							  
	    if ( len ( st ) == 0 ) :			      	      st . push ( fnt ) ;				    	else {							  
		st.append ( fnt )			      	    }							    	  if ( ( st . size ( ) == 0 ) ) {			  
	    elif ( len ( st ) != 0 and st [ - 1 ] < fnt ) :   	    else if ( st . size ( ) != 0 && st . peek ( ) < fnt ) { 	    st . push ( fnt ) ;					  
		return False				      	      return false ;					    	  }							  
	    else :					      	    }							    	  else if ( ( st . size ( ) != 0 ) && st . peek ( ) < fnt 
		st.append ( fnt )			      	    else st . push ( fnt ) ;				    	    return false ;					  
	while ( len ( st ) != 0 and st [ - 1 ] == expected )  	  }							    	  }							  
	    st.pop ( )					      	  while ( st . size ( ) != 0 && st . peek ( ) == expected ) 	  else {						  
	    expected += 1				      	    st . pop ( ) ;					    	    st . push ( fnt ) ;					  
    if ( expected - 1 == n and len ( st ) == 0 ) :	      	    expected ++ ;					    	  }							  
	return True					      	  }							    	}							  
    return False					      	}							    	while ( ( st . size ( ) != 0 ) && st . peek ( ) == expect 
							      	if ( expected - 1 == n && st . size ( ) == 0 ) return true  	  st . pop ( ) ;					  
							      	return false ;						    	  expected ++ ;						  
							      }								    	}							  
							      								      }								  
							      								      if ( ( expected - 1 ) == n && st . size ( ) == 0 ) {	  
							      								    	return true ;						  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		      REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		    REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		  REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX
--							      --							    --								  --
def minRemovalsDP ( arr , n ) :				      static int minRemovalsDP ( int arr [ ] , int n ) {	    public static int minRemovalsDP ( int [ ] arr , int n ) {	  success : None
    longest_start = - 1					      	int longest_start = - 1 , longest_end = 0 ;		      int longestStart = - 1 ;					  
    longest_end = 0					      	for ( int start = 0 ;					      int longestEnd = 0 ;					  
    for start in range ( n ) :				      	start < n ;						      for ( int start = 0 ;					  
	min = sys.maxsize				      	start ++ ) {						      start < n ;						  
	max = - sys.maxsize				      	  int min = Integer . MAX_VALUE , max = Integer . MIN_VALUE   start ++ ) {						  
	for end in range ( start , n ) :		      	  for ( int end = start ;				    	int min = Integer . MAX_VALUE ;				  
	    val = arr [ end ]				      	  end < n ;						    	int max = - Integer . MAX_VALUE ;			  
	    if ( val < min ) :				      	  end ++ ) {						    	for ( int end = start ;					  
		min = val				      	    int val = arr [ end ] ;				    	end < n ;						  
	    if ( val > max ) :				      	    if ( val < min ) {					    	end ++ ) {						  
		max = val				      	      min = val ;					    	  int val = arr [ end ] ;				  
	    if ( 2 * min <= max ) :			      	    }							    	  if ( ( val < min ) ) {				  
		break					      	    if ( val > max ) {					    	    min = val ;						  
	    if ( end - start > longest_end - longest_start or 	      max = val ;					    	  }							  
		longest_start = start			      	    }							    	  if ( ( val > max ) ) {				  
		longest_end = end			      	    if ( 2 * min <= max ) {				    	    max = val ;						  
    if ( longest_start == - 1 ) :			      	      break ;						    	  }							  
	return n					      	    }							    	  if ( ( 2 * min <= max ) ) {				  
    return ( n - ( longest_end - longest_start + 1 ) )	      	    if ( end - start > longest_end - longest_start || longe 	    break ;						  
							      	      longest_start = start ;				    	  }							  
							      	      longest_end = end ;				    	  if ( ( end - start ) > longestEnd - longestStart || lon 
							      	    }							    	    longestStart = start ;				  
							      	  }							    	    longestEnd = end ;					  
							      	}							    	  }							  
							      	if ( longest_start == - 1 ) {				    	}							  
							      	  return n ;						      }								  
							      	}							      if ( ( longestStart == - 1 ) ) {				  
							      	return ( n - ( longest_end - longest_start + 1 ) ) ;	    	return n ;						  
							      }								      }								  
							      								      return ( n - ( longestEnd - longestStart + 1 ) ) ;	  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2
--							      --							    --								  --
def findTriplets ( arr , n ) :				      static void findTriplets ( int arr [ ] , int n ) {	    static void findTriplets ( int [ ] arr , int n ) {		  script_not_found : None
    found = False					      	boolean found = false ;					      boolean found = false ;					  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	l = i + 1					      	i < n - 1 ;						      i <= n - 1 ;						  
	r = n - 1					      	i ++ ) {						      i ++ ) {							  
	x = arr [ i ]					      	  int l = i + 1 ;					    	int l = i + 1 ;						  
	while ( l < r ) :				      	  int r = n - 1 ;					    	int r = n - 1 ;						  
	    if ( x + arr [ l ] + arr [ r ] == 0 ) :	      	  int x = arr [ i ] ;					    	int x = arr [ i ] ;					  
		print ( x , arr [ l ] , arr [ r ] )	      	  while ( l < r ) {					    	while ( ( l < r ) && ( ( x + arr [ l ] + arr [ r ] ) == 0 
		l += 1					      	    if ( x + arr [ l ] + arr [ r ] == 0 ) {		    	  System . out . println ( x + " " + arr [ l ] + " " + ar 
		r -= 1					      	      System . out . print ( x + " " ) ;		    	  l ++ ;						  
		found = True				      	      System . out . print ( arr [ l ] + " " ) ;	    	  r -- ;						  
	    elif ( x + arr [ l ] + arr [ r ] < 0 ) :	      	      System . out . println ( arr [ r ] + " " ) ;	    	  found = true ;					  
		l += 1					      	      l ++ ;						    	}							  
	    else :					      	      r -- ;						    	else if ( ( x + arr [ l ] + arr [ r ] ) < 0 ) {		  
		r -= 1					      	      found = true ;					    	  l ++ ;						  
    if ( found == False ) :				      	    }							    	}							  
	print ( " No Triplet Found" )			      	    else if ( x + arr [ l ] + arr [ r ] < 0 ) l ++ ;	    	else {							  
							      	    else r -- ;						    	  r -- ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	if ( found == false ) System . out . println ( " No Triplet   if ( ( found == false ) ) {				  
							      }								    	System . out . println ( " No Triplet Found" ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_COMMON_SUPERSEQUENCE_1				      SHORTEST_COMMON_SUPERSEQUENCE_1				    SHORTEST_COMMON_SUPERSEQUENCE_1				  SHORTEST_COMMON_SUPERSEQUENCE_1
--							      --							    --								  --
def superSeq ( X , Y , m , n ) :			      static int superSeq ( String X , String Y , int m , int n ) { public static int superSeq ( String X , String Y , int m , in script_not_found : None
    dp = [ [ 0 ] * ( n + 2 ) for i in range ( m + 2 ) ]	      	int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ m + 2 ] [ n + 2 ] ;		  
    for i in range ( m + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n + 1 ) :			      	i <= m ;						      i < m + 1 ;						  
	    if ( not i ) : dp [ i ] [ j ] = j		      	i ++ ) {						      i ++ ) {							  
	    elif ( not j ) : dp [ i ] [ j ] = i		      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    elif ( X [ i - 1 ] == Y [ j - 1 ] ) :	      	  j <= n ;						    	j < n + 1 ;						  
		dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]   	  j ++ ) {						    	j ++ ) {						  
	    else : dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [  	    if ( i == 0 ) dp [ i ] [ j ] = j ;			    	  if ( ( i == 0 ) ) dp [ i ] [ j ] = j ;		  
    return dp [ m ] [ n ]				      	    else if ( j == 0 ) dp [ i ] [ j ] = i ;		    	  else if ( ( j == 0 ) ) dp [ i ] [ j ] = i ;		  
							      	    else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 )  	  else if ( ( X . charAt ( i - 1 ) == Y . charAt ( j - 1  
							      	    else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 	  else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 
							      	  }							    	}							  
							      	}							      }								  
							      	return dp [ m ] [ n ] ;					      return dp [ m ] [ n ] ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_K_MODULUS_ARRAY_ELEMENT				      FINDING_K_MODULUS_ARRAY_ELEMENT				    FINDING_K_MODULUS_ARRAY_ELEMENT				  FINDING_K_MODULUS_ARRAY_ELEMENT
--							      --							    --								  --
def printEqualModNumbers ( arr , n ) :			      static void printEqualModNumbers ( int arr [ ] , int n ) {    static void printEqualModNumbers ( int [ ] arr , int n ) {	  script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    d = arr [ n - 1 ] - arr [ 0 ]			      	int d = arr [ n - 1 ] - arr [ 0 ] ;			      int d = arr [ n - 1 ] - arr [ 0 ] ;			  
    v = [ ]						      	Vector < Integer > v = new Vector < > ( ) ;		      int [ ] v = new int [ n ] ;				  
    i = 1						      	for ( int i = 1 ;					      int i = 1 ;						  
    while ( i * i <= d ) :				      	i * i <= d ;						      while ( ( i * i <= d ) ) {				  
	if ( d % i == 0 ) :				      	i ++ ) {						    	if ( ( d % i ) == 0 ) {					  
	    v.append ( i )				      	  if ( d % i == 0 ) {					    	  v [ i ] = i ;						  
	    if ( i != d / i ) :				      	    v . add ( i ) ;					    	  if ( ( i != d / i ) ) {				  
		v.append ( d / i )			      	    if ( i != d / i ) v . add ( d / i ) ;		    	    v [ i ] = d / i ;					  
	i += 1						      	  }							    	  }							  
    for i in range ( len ( v ) ) :			      	}							    	}							  
	temp = arr [ 0 ] % v [ i ]			      	for ( int i = 0 ;					    	i ++ ;							  
	j = 1						      	i < v . size ( ) ;					      }								  
	while ( j < n ) :				      	i ++ ) {						      for ( i = 0 ;						  
	    if ( arr [ j ] % v [ i ] != temp ) :	      	  int temp = arr [ 0 ] % v . get ( i ) ;		      i < v . length ;						  
		break					      	  int j ;						      i ++ ) {							  
	    j += 1					      	  for ( j = 1 ;						    	int temp = arr [ 0 ] % v [ i ] ;			  
	if ( j == n ) :					      	  j < n ;						    	int j = 1 ;						  
	    print ( v [ i ] , end = " " )		      	  j ++ ) if ( arr [ j ] % v . get ( i ) != temp ) break ;   	while ( ( j < n ) ) {					  
							      	  if ( j == n ) System . out . print ( v . get ( i ) + " "  	  if ( ( arr [ j ] % v [ i ] != temp ) ) {		  
							      	}							    	    break ;						  
							      }								    	  }							  
							      								    	  j ++ ;						  
							      								    	}							  
							      								    	if ( ( j == n ) ) {					  
							      								    	  System . out . print ( v [ i ] + " " ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMMON_CHARACTERS_N_STRINGS				      COMMON_CHARACTERS_N_STRINGS				    COMMON_CHARACTERS_N_STRINGS					  COMMON_CHARACTERS_N_STRINGS
--							      --							    --								  --
def commonCharacters ( strings , n ) :			      public static void commonCharacters ( String str [ ] , int n  public static void commonCharacters ( String [ ] strings , in script_not_found : None
    prim = [ True ] * MAX_CHAR				      	Boolean [ ] prim = new Boolean [ MAX_CHAR ] ;		      boolean [ ] prim = new boolean [ MAX_CHAR ] ;		  
    for i in range ( n ) :				      	Arrays . fill ( prim , new Boolean ( true ) ) ;		      for ( int i = 0 ;						  
	sec = [ False ] * MAX_CHAR			      	for ( int i = 0 ;					      i < n ;							  
	for j in range ( len ( strings [ i ] ) ) :	      	i < n ;							      i ++ ) {							  
	    if ( prim [ ord ( strings [ i ] [ j ] ) - ord ( ' 	i ++ ) {						    	boolean [ ] sec = new boolean [ MAX_CHAR ] ;		  
		sec [ ord ( strings [ i ] [ j ] ) - ord ( 'a' 	  Boolean [ ] sec = new Boolean [ MAX_CHAR ] ;		    	for ( int j = 0 ;					  
	for i in range ( MAX_CHAR ) :			      	  Arrays . fill ( sec , new Boolean ( false ) ) ;	    	j < strings [ i ] . length ( ) ;			  
	    prim [ i ] = sec [ i ]			      	  for ( int j = 0 ;					    	j ++ ) {						  
    for i in range ( 26 ) :				      	  j < str [ i ] . length ( ) ;				    	  if ( ( prim [ ( int ) strings [ i ] . charAt ( j ) - (  
	if ( prim [ i ] ) :				      	  j ++ ) {						    	    sec [ ( int ) strings [ i ] . charAt ( j ) - ( int )  
	    print ( "%c " % ( i + ord ( 'a' ) ) , end = "" )  	    if ( prim [ str [ i ] . charAt ( j ) - 'a' ] ) sec [ st 	  }							  
							      	  }							    	}							  
							      	  System . arraycopy ( sec , 0 , prim , 0 , MAX_CHAR ) ;    	for ( int j = 0 ;					  
							      	}							    	j < MAX_CHAR ;						  
							      	for ( int i = 0 ;					    	j ++ ) {						  
							      	i < 26 ;						    	  prim [ j ] = sec [ j ] ;				  
							      	i ++ ) if ( prim [ i ] ) {				    	}							  
							      	  System . out . print ( Character . toChars ( i + 97 ) ) ;   }								  
							      	  System . out . print ( " " ) ;			      for ( int i = 0 ;						  
							      	}							      i < 26 ;							  
							      }								      i ++ ) {							  
							      								    	if ( ( prim [ i ] ) != 0 ) {				  
							      								    	  System . out . printf ( "%c " , i + ( int ) 'a' ) ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K		      COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K		    COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K			  COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K
--							      --							    --								  --
def numOfIncSubseqOfSizeK ( arr , n , k ) :		      static int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int  public static int numOfIncSubseqOfSizeK ( int [ ] arr , int n script_not_found : None
    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]  	int dp [ ] [ ] = new int [ k ] [ n ] , sum = 0 ;	      int [ ] [ ] dp = new int [ n ] [ k ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	dp [ 0 ] [ i ] = 1				      	i < n ;							      i < dp . length ;						  
    for l in range ( 1 , k ) :				      	i ++ ) {						      i ++ ) {							  
	for i in range ( l , n ) :			      	  dp [ 0 ] [ i ] = 1 ;					    	dp [ 0 ] [ i ] = 0 ;					  
	    dp [ l ] [ i ] = 0				      	}							      }								  
	    for j in range ( l - 1 , i ) :		      	for ( int l = 1 ;					      for ( int l = 1 ;						  
		if ( arr [ j ] < arr [ i ] ) :		      	l < k ;							      l < k ;							  
		    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]      	l ++ ) {						      l ++ ) {							  
    Sum = 0						      	  for ( int i = l ;					    	for ( int i = l ;					  
    for i in range ( k - 1 , n ) :			      	  i < n ;						    	i < n ;							  
	Sum += dp [ k - 1 ] [ i ]			      	  i ++ ) {						    	i ++ ) {						  
    return Sum						      	    dp [ l ] [ i ] = 0 ;				    	  dp [ l ] [ i ] = 0 ;					  
							      	    for ( int j = l - 1 ;				    	  for ( int j = l - 1 ;					  
							      	    j < i ;						    	  j < i ;						  
							      	    j ++ ) {						    	  j ++ ) {						  
							      	      if ( arr [ j ] < arr [ i ] ) {			    	    if ( ( arr [ j ] < arr [ i ] ) ) {			  
							      		dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;		    	      dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;		  
							      	      }							    	    }							  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	for ( int i = k - 1 ;					      int Sum = 0 ;						  
							      	i < n ;							      for ( int i = k - 1 ;					  
							      	i ++ ) {						      i < n ;							  
							      	  sum += dp [ k - 1 ] [ i ] ;				      i ++ ) {							  
							      	}							    	Sum += dp [ k - 1 ] [ i ] ;				  
							      	return sum ;						      }								  
							      }								      return Sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED		      LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED		    LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED			  LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED
--							      --							    --								  --
def longestNull ( S ) :					      static int longestNull ( String str ) {			    public static int longestNull ( String S ) {		  script_not_found : None
    arr = [ ]						      	ArrayList < Pair > arr = new ArrayList < > ( ) ;	      ArrayList < String [ ] > arr = new ArrayList < > ( ) ;	  
    arr.append ( [ '@' , - 1 ] )			      	arr . add ( new Pair ( '@' , - 1 ) ) ;			      arr . add ( new String [ ] {				  
    maxlen = 0						      	int maxlen = 0 ;					    	"@" , - 1 }						  
    for i in range ( len ( S ) ) :			      	for ( int i = 0 ;					    	) ;							  
	arr.append ( [ S [ i ] , i ] )			      	i < str . length ( ) ;					    	int maxlen = 0 ;					  
	while ( len ( arr ) >= 3 and arr [ len ( arr ) - 3 ]  	++ i ) {						    	for ( int i = 0 ;					  
	    arr.pop ( )					      	  arr . add ( new Pair ( str . charAt ( i ) , i ) ) ;	    	i < S . length ( ) ;					  
	    arr.pop ( )					      	  while ( arr . size ( ) >= 3 && arr . get ( arr . size ( ) 	i ++ ) {						  
	    arr.pop ( )					      	    arr . remove ( arr . size ( ) - 3 ) ;		    	  arr . add ( new String [ ] {				  
	tmp = arr [ - 1 ]				      	    arr . remove ( arr . size ( ) - 2 ) ;		    	    S . substring ( i , i + 1 ) , i }			  
	maxlen = max ( maxlen , i - tmp [ 1 ] )		      	    arr . remove ( arr . size ( ) - 1 ) ;		    	    ) ;							  
    return maxlen					      	  }							    	    while ( ( arr . size ( ) >= 3 ) && arr . get ( arr .  
							      	  int tmp = arr . get ( arr . size ( ) - 1 ) . second ;	    	      arr . remove ( arr . size ( ) - 3 ) ;		  
							      	  maxlen = Math . max ( maxlen , i - tmp ) ;		    	      arr . remove ( arr . size ( ) - 2 ) ;		  
							      	}							    	      arr . remove ( arr . size ( ) - 1 ) ;		  
							      	return maxlen ;						    	    }							  
							      }								    	    String [ ] tmp = arr . get ( arr . size ( ) - 1 ) ;	  
							      								    	    maxlen = Math . max ( maxlen , i - tmp [ 1 ] ) ;	  
							      								    	  }							  
							      								    	  return maxlen ;					  
							      								    	}							  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1	      DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1		    DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1		  DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1
--							      --							    --								  --
def knapSack ( W , wt , val , n ) :			      static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int [ ] wt , int [ ] [ ] script_not_found : None
    K = [ [ 0 for x in range ( W + 1 ) ] for x in range ( n + 	int i , w ;						      int [ ] [ ] K = new int [ W + 1 ] [ n + 1 ] ;		  
    for i in range ( n + 1 ) :				      	int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		      for ( int i = 0 ;						  
	for w in range ( W + 1 ) :			      	for ( i = 0 ;						      i < n + 1 ;						  
	    if i == 0 or w == 0 :			      	i <= n ;						      i ++ ) for ( int w = 0 ;					  
		K [ i ] [ w ] = 0			      	i ++ ) {						      w < W + 1 ;						  
	    elif wt [ i - 1 ] <= w :			      	  for ( w = 0 ;						      w ++ ) if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;	  
		K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 	  w <= W ;						      else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . max (  
	    else :					      	  w ++ ) {						      else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;			  
		K [ i ] [ w ] = K [ i - 1 ] [ w ]	      	    if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;		      return K [ n ] [ W ] ;					  
    return K [ n ] [ W ]				      	    else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val }								  
							      	    else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		    								  
							      	  }							    								  
							      	}							    								  
							      	return K [ n ] [ W ] ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN
--							      --							    --								  --
def findMaximum ( arr , low , high ) :			      static int findMaximum ( int arr [ ] , int low , int high ) { static int findMaximum ( int [ ] arr , int low , int high ) { script_not_found : None
    if low == high :					      	if ( low == high ) return arr [ low ] ;			      if ( low == high ) {					  
	return arr [ low ]				      	if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) r 	return arr [ low ] ;					  
    if high == low + 1 and arr [ low ] >= arr [ high ] :      	if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) re   }								  
	return arr [ low ]				      	int mid = ( low + high ) / 2 ;				      if ( high == low + 1 && arr [ low ] >= arr [ high ] ) {	  
    if high == low + 1 and arr [ low ] < arr [ high ] :	      	if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ m 	return arr [ low ] ;					  
	return arr [ high ]				      	if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ m   }								  
    mid = ( low + high ) // 2				      	else return findMaximum ( arr , mid + 1 , high ) ;	      if ( high == low + 1 && arr [ low ] < arr [ high ] ) {	  
    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [  }								    	return arr [ high ] ;					  
	return arr [ mid ]				      								      }								  
    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [  								      int mid = ( low + high ) / 2 ;				  
	return findMaximum ( arr , low , mid - 1 )	      								      if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ m 
    else :						      								    	return arr [ mid ] ;					  
	return findMaximum ( arr , mid + 1 , high )	      								      }								  
							      								      if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ m 
							      								    	return findMaximum ( arr , low , mid - 1 ) ;		  
							      								      }								  
							      								      else {							  
							      								    	return findMaximum ( arr , mid + 1 , high ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS				  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS
--							      --							    --								  --
def diagonalsquare ( mat , row , column ) :		      static void diagonalsquare ( int mat [ ] [ ] , int row , int  public static void diagonalSquare ( int [ ] [ ] mat , int row script_not_found : None
    print ( "Diagonal one : " , end = "" )		      	System . out . print ( "Diagonal one : " ) ;		      System . out . print ( "Diagonal one : " ) ;		  
    for i in range ( 0 , row ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , column ) :			      	i < row ;						      i <= row ;						  
	    if ( i == j ) :				      	i ++ ) {						      i ++ ) {							  
		print ( "{} ".format ( mat [ i ] [ j ] * mat  	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    print ( " \n\nDiagonal two : " , end = "" )		      	  j < column ;						    	j <= column ;						  
    for i in range ( 0 , row ) :			      	  j ++ ) if ( i == j ) System . out . print ( mat [ i ] [ j 	j ++ ) {						  
	for j in range ( 0 , column ) :			      	}							    	  if ( ( i == j ) ) {					  
	    if ( i + j == column - 1 ) :		      	System . out . println ( ) ;				    	    System . out . print ( ( i + j ) * mat [ i ] [ j ] +  
		print ( "{} ".format ( mat [ i ] [ j ] * mat  	System . out . print ( "Diagonal two : " ) ;		    	  }							  
							      	for ( int i = 0 ;					    	}							  
							      	i < row ;						      }								  
							      	i ++ ) {						      System . out . print ( " \n\nDiagonal two : " ) ;		  
							      	  for ( int j = 0 ;					      for ( int i = 0 ;						  
							      	  j < column ;						      i <= row ;						  
							      	  j ++ ) if ( i + j == column - 1 ) System . out . print (    i ++ ) {							  
							      	}							    	for ( int j = 0 ;					  
							      }								    	j <= column ;						  
							      								    	j ++ ) {						  
							      								    	  if ( ( i + j ) == column - 1 ) {			  
							      								    	    System . out . print ( ( i + j ) * mat [ i ] [ j ] +  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR
--							      --							    --								  --
def bitonicGenerator ( arr , n ) :			      static void bitonicGenerator ( int arr [ ] , int n ) {	    public static int [ ] bitonicGenerator ( int [ ] arr , int n  script_not_found : None
    i = 1						      	int i = 1 ;						      int i = 1 ;						  
    j = n - 1						      	int j = n - 1 ;						      int j = n - 1 ;						  
    if ( j % 2 != 0 ) :					      	if ( j % 2 != 0 ) j -- ;				      if ( ( j % 2 != 0 ) ) {					  
	j = j - 1					      	while ( i < j ) {					    	j = j - 1 ;						  
    while ( i < j ) :					      	  arr = swap ( arr , i , j ) ;				      }								  
	arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ]	      	  i += 2 ;						      while ( ( i < j ) ) {					  
	i = i + 2					      	  j -= 2 ;						    	arr [ j ] = arr [ i ] ;					  
	j = j - 2					      	}							    	arr [ i ] = arr [ j ] ;					  
    arr_f = [ ]						      	Arrays . sort ( arr , 0 , ( n + 1 ) / 2 ) ;		    	i = i + 2 ;						  
    arr_s = [ ]						      	Arrays . sort ( arr , ( n + 1 ) / 2 , n ) ;		    	j = j - 2 ;						  
    for i in range ( int ( ( n + 1 ) / 2 ) ) :		      	int low = ( n + 1 ) / 2 , high = n - 1 ;		      }								  
	arr_f.append ( arr [ i ] )			      	while ( low < high ) {					      int [ ] arrF = new int [ ( int ) ( ( n + 1 ) / 2 ) ] ;	  
    i = int ( ( n + 1 ) / 2 )				      	  Integer temp = arr [ low ] ;				      int [ ] arrS = new int [ ( int ) ( ( n + 1 ) / 2 ) ] ;	  
    while ( i < n ) :					      	  arr [ low ] = arr [ high ] ;				      for ( ;							  
	arr_s.append ( arr [ i ] )			      	  arr [ high ] = temp ;					      i < arr . length ;					  
	i = i + 1					      	  low ++ ;						      i ++ ) {							  
    arr_f.sort ( )					      	  high -- ;						    	arrF [ i ] = arr [ i ] ;				  
    arr_s.sort ( reverse = True )			      	}							      }								  
    for i in arr_s :					      }								      i = ( int ) ( ( n + 1 ) / 2 ) ;				  
	arr_f.append ( i )				      								      while ( ( i < n ) ) {					  
    return arr_f					      								    	arrS [ i ] = arr [ i ] ;				  
							      								    	i = i + 1 ;						  
							      								      }								  
							      								      Arrays . sort ( arrF ) ;					  
							      								      Arrays . sort ( arrS , Collections . reverseOrder ( ) ) ;	  
							      								      for ( int i : arrS ) {					  
							      								    	arrF [ i ] = arrF [ i ] ;				  
							      								      }								  
							      								      return arrF ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2
--							      --							    --								  --
def minJumps ( arr , n ) :				      static int minJumps ( int arr [ ] , int n ) {		    public static double minJumps ( double [ ] arr , int n ) {	  error : MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_
    jumps = [ 0 for i in range ( n ) ]			      	int [ ] jumps = new int [ n ] ;				      int [ ] jumps = new int [ n ] ;				  GIVEN_ARRAY_2.java:48: error: incompatible types:
    for i in range ( n - 2 , - 1 , - 1 ) :		      	int min ;						      for ( int i = 0 ;						  possible lossy conversion from double to int
	if ( arr [ i ] == 0 ) :				      	jumps [ n - 1 ] = 0 ;					      i < n ;							   jumps [ i ] = Double . MAX_VALUE ;
	    jumps [ i ] = float ( 'inf' )		      	for ( int i = n - 2 ;					      i ++ ) {							  	       ^ MINIMUM_NUMBER_OF_JUMPS_TO_REACH_EN
	elif ( arr [ i ] >= n - i - 1 ) :		      	i >= 0 ;						    	jumps [ i ] = 0 ;					  D_OF_A_GIVEN_ARRAY_2.java:65: error: cannot find s
	    jumps [ i ] = 1				      	i -- ) {						      }								  ymbol	    if ( ( min != Double . MAX_VALUE ) ) {
	else :						      	  if ( arr [ i ] == 0 ) jumps [ i ] = Integer . MAX_VALUE ;   for ( int i = n - 2 ;					  	    ^	symbol:	  variable min	 location: c
	    min = float ( 'inf' )			      	  else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ;	      i >= 0 ;							  lass MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIV
	    for j in range ( i + 1 , n ) :		      	  else {						      i -- ) {							  EN_ARRAY_2 MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF
		if ( j <= arr [ i ] + i ) :		      	    min = Integer . MAX_VALUE ;				    	if ( ( arr [ i ] == 0 ) ) {				  _A_GIVEN_ARRAY_2.java:66: error: cannot find symbo
		    if ( min > jumps [ j ] ) :		      	    for ( int j = i + 1 ;				    	  jumps [ i ] = Double . MAX_VALUE ;			  l	  jumps [ i ] = min + 1 ;
			min = jumps [ j ]		      	    j < n && j <= arr [ i ] + i ;			    	}							    ^	symbol:	  variable min	 location: class MIN
	    if ( min != float ( 'inf' ) ) :		      	    j ++ ) {						    	else if ( ( arr [ i ] >= n - i - 1 ) ) {		  IMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY
		jumps [ i ] = min + 1			      	      if ( min > jumps [ j ] ) min = jumps [ j ] ;	    	  jumps [ i ] = 1 ;					  _2 MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN
	    else :					      	    }							    	}							  _ARRAY_2.java:69: error: cannot find symbol
		jumps [ i ] = min			      	    if ( min != Integer . MAX_VALUE ) jumps [ i ] = min + 1 	else {							  jumps [ i ] = min ;			  ^   symbol
    return jumps [ 0 ]					      	    else jumps [ i ] = min ;				    	  double min = Double . MAX_VALUE ;			  :   variable min   location: class MINIMUM_NUMBER_
							      	  }							    	  for ( int j = i + 1 ;					  OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2 MINIMUM_N
							      	}							    	  j < n ;						  UMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2.jav
							      	return jumps [ 0 ] ;					    	  j ++ ) {						  a:102: error: incompatible types: int[] cannot be
							      }								    	    if ( ( j <= arr [ i ] + i ) ) {			  converted to double[]		if(f_filled(param0.g
							      								    	      if ( ( min > jumps [ j ] ) ) {			  et(i),param1.get(i)) == f_gold(param0.get(i),param
							      								    		min = jumps [ j ] ;				  1.get(i)))				   ^ Note: S
							      								    	      }							  ome messages have been simplified; recompile with
							      								    	    }							  -Xdiags:verbose to get full output 5 errors
							      								    	  }							  
							      								    	}							  
							      								    	if ( ( min != Double . MAX_VALUE ) ) {			  
							      								    	  jumps [ i ] = min + 1 ;				  
							      								    	}							  
							      								    	else {							  
							      								    	  jumps [ i ] = min ;					  
							      								    	}							  
							      								      }								  
							      								      return jumps [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_MAXIMUM_GCD_ARRAY				      FIND_PAIR_MAXIMUM_GCD_ARRAY				    FIND_PAIR_MAXIMUM_GCD_ARRAY					  FIND_PAIR_MAXIMUM_GCD_ARRAY
--							      --							    --								  --
def findMaxGCD ( arr , n ) :				      public static int findMaxGCD ( int arr [ ] , int n ) {	    static int findMaxGCD ( int [ ] arr , int n ) {		  error : FIND_PAIR_MAXIMUM_GCD_ARRAY.java:62: error
    high = 0						      	int high = 0 ;						      int high = 0 ;						  : <identifier> expected i = high ;  ^ FIND_PAIR_MA
    i = 0						      	for ( int i = 0 ;					      int i = 0 ;						  XIMUM_GCD_ARRAY.java:63: error: illegal start of t
    while i < n :					      	i < n ;							      while ( i < n ) {						  ype while ( i >= 1 ) { ^ FIND_PAIR_MAXIMUM_GCD_ARR
	high = max ( high , arr [ i ] )			      	i ++ ) high = Math . max ( high , arr [ i ] ) ;		    	high = Math . max ( high , arr [ i ] ) ;		  AY.java:63: error: <identifier> expected while ( i
	i = i + 1					      	int divisors [ ] = new int [ high + 1 ] ;		    	i = i + 1 ;						   >= 1 ) {	     ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.j
    divisors = [ 0 ] * ( high + 1 )			      	for ( int i = 0 ;					      }								  ava:69: error: illegal start of type return 1 ; ^
    i = 0						      	i < n ;							      int [ ] divisors = new int [ high + 1 ] ;			  FIND_PAIR_MAXIMUM_GCD_ARRAY.java:73: error: class,
    while i < n :					      	i ++ ) {						      i = 0 ;							   interface, or enum expected public static void ma
	j = 1						      	  for ( int j = 1 ;					      while ( i < n ) {						  in(String args[]) {		    ^ FIND_PAIR_MAXI
	while j <= math.sqrt ( arr [ i ] ) :		      	  j <= Math . sqrt ( arr [ i ] ) ;			    	int j = 1 ;						  MUM_GCD_ARRAY.java:75: error: class, interface, or
	    if ( arr [ i ] % j == 0 ) :			      	  j ++ ) {						    	while ( j <= Math . sqrt ( arr [ i ] ) ) {		   enum expected     List<int [ ]> param0 = new Arra
		divisors [ j ] = divisors [ j ] + 1	      	    if ( arr [ i ] % j == 0 ) {				    	  if ( ( arr [ i ] % j ) == 0 ) {			  yList<>();	 ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:
		if ( j != arr [ i ] / j ) :		      	      divisors [ j ] ++ ;				    	    divisors [ j ] = divisors [ j ] + 1 ;		  76: error: class, interface, or enum expected
		    divisors [ arr [ i ] / j ] = divisors [ a 	      if ( j != arr [ i ] / j ) divisors [ arr [ i ] / j ]  	    if ( ( j != arr [ i ] / j ) ) {			  param0.add(new int[]{3,3,8,10,12,13,14,16,16,19,20
			+ 1				      	    }							    	      divisors [ arr [ i ] / j ] = divisors [ arr [ i ] / ,21,25,29,33,35,35,35,35,36,38,41,42,45,45,45,46,4
	    j = j + 1					      	  }							    	      ++ j ;						  8,51,52,53,55,56,57,58,62,69,73,73,76,76,80,89,91,
	i = i + 1					      	}							    	    }							  92,93,93,96});     ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.j
    i = high						      	for ( int i = high ;					    	  }							  ava:77: error: class, interface, or enum expected
    while i >= 1 :					      	i >= 1 ;						    	}							      param0.add(new int[]{12,52,-66,50,50,-78,-14,2
	if ( divisors [ i ] > 1 ) :			      	i -- ) if ( divisors [ i ] > 1 ) return i ;		    	j = j + 1 ;						  6,56,74,8,-58,58,-66,-58,-12,80});	 ^ FIND_PAIR
	    return i					      	return 1 ;						      }								  _MAXIMUM_GCD_ARRAY.java:78: error: class, interfac
	i = i - 1					      }								      i = i + 1 ;						  e, or enum expected	  param0.add(new int[]{0,0,0
    return 1						      								    }								  ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
							      								    i = high ;							  ,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1});	  ^
							      								    while ( i >= 1 ) {						  FIND_PAIR_MAXIMUM_GCD_ARRAY.java:79: error: class,
							      								      if ( ( divisors [ i ] ) > 1 ) {				   interface, or enum expected	   param0.add(new in
							      								    	return i ;						  t[]{23,98,12,45,83,85,30,92,26,12,38,20,86,52,71,2
							      								      }								  0,56,78,10,34,86,55,99,84,26,2,1,89,60,26,16,37,98
							      								      i = i - 1 ;						  ,11,73,42,36,60,28});	    ^ FIND_PAIR_MAXIMUM_GCD_
							      								    }								  ARRAY.java:80: error: class, interface, or enum ex
							      								    return 1 ;							  pected     param0.add(new int[]{-98,-84,-80,-72,-6
							      								    }								  6,-64,-52,-36,-28,-18,-12,-12,-4,8,12,40,42,56,68,
							      								    								  70,90,94});	  ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java
							      								    								  :81: error: class, interface, or enum expected
							      								    								   param0.add(new int[]{1,0,0,1,1,1,0,0,0,1,0,0,1,1,
							      								    								  0,1,0,1,1,0,0,1,0,0,1,0,1});	   ^ FIND_PAIR_MAXIM
							      								    								  UM_GCD_ARRAY.java:82: error: class, interface, or
							      								    								  enum expected	    param0.add(new int[]{3,5,6,7,8,9
							      								    								  ,11,13,18,20,24,25,26,27,36,41,41,45,48,48,49,65,6
							      								    								  9,70,85,90,99,99});	  ^ FIND_PAIR_MAXIMUM_GCD_AR
							      								    								  RAY.java:83: error: class, interface, or enum expe
							      								    								  cted	   param0.add(new int[]{80,-26,-38,-40,22,-2
							      								    								  8,0,-36,70,-32,38,58,76,-42,38,92,68,-70,36,-62,24
							      								    								  ,-84,42,4,0,8,-36,98,-84,82,-70,-12,6,-82,-20,-68,
							      								    								  48,-12,42,18,58,-14,94,84});	   ^ FIND_PAIR_MAXIM
							      								    								  UM_GCD_ARRAY.java:84: error: class, interface, or
							      								    								  enum expected	    param0.add(new int[]{0,0,0,0,0,0
							      								    								  ,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
							      								    								  });	  ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:85: err
							      								    								  or: class, interface, or enum expected     param0.
							      								    								  add(new int[]{36,60,45,76,43,71,10,18,52,52,53,73,
							      								    								  48,95,13,50,97,30,73,13,18,34,51});	  ^ FIND_PAI
							      								    								  R_MAXIMUM_GCD_ARRAY.java:86: error: class, interfa
							      								    								  ce, or enum expected	   List<Integer> param1 = ne
							      								    								  w ArrayList<>();     ^ FIND_PAIR_MAXIMUM_GCD_ARRAY
							      								    								  .java:87: error: class, interface, or enum expecte
							      								    								  d	param1.add(45);	    ^ FIND_PAIR_MAXIMUM_GCD_
							      								    								  ARRAY.java:88: error: class, interface, or enum ex
							      								    								  pected     param1.add(11);	 ^ FIND_PAIR_MAXIMUM
							      								    								  _GCD_ARRAY.java:89: error: class, interface, or en
							      								    								  um expected	  param1.add(26);     ^ FIND_PAIR_MA
							      								    								  XIMUM_GCD_ARRAY.java:90: error: class, interface,
							      								    								  or enum expected     param1.add(28);	   ^ FIND_PA
							      								    								  IR_MAXIMUM_GCD_ARRAY.java:91: error: class, interf
							      								    								  ace, or enum expected	    param1.add(17);	^ FI
							      								    								  ND_PAIR_MAXIMUM_GCD_ARRAY.java:92: error: class, i
							      								    								  nterface, or enum expected	 param1.add(14);
							      								    								   ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:93: error: cla
							      								    								  ss, interface, or enum expected     param1.add(20)
							      								    								  ;	^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:94: error
							      								    								  : class, interface, or enum expected	   param1.ad
							      								    								  d(39);     ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:95:
							      								    								  error: class, interface, or enum expected	para
							      								    								  m1.add(26);	  ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java
							      								    								  :96: error: class, interface, or enum expected
							      								    								   param1.add(22);     ^ FIND_PAIR_MAXIMUM_GCD_ARRAY
							      								    								  .java:97: error: class, interface, or enum expecte
							      								    								  d	for(int i = 0; i < param0.size(); ++i)	   ^
							      								    								   FIND_PAIR_MAXIMUM_GCD_ARRAY.java:97: error: class
							      								    								  , interface, or enum expected	    for(int i = 0; i
							      								    								   < param0.size(); ++i)		    ^ FIND_P
							      								    								  AIR_MAXIMUM_GCD_ARRAY.java:97: error: class, inter
							      								    								  face, or enum expected     for(int i = 0; i < para
							      								    								  m0.size(); ++i)
							      								    								      ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:102: error:
							      								    								   class, interface, or enum expected	      }
							      								    								      ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:105: error:
							      								    								   class, interface, or enum expected } ^ 32 errors
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GRAPHS_CYCLE_ODD_LENGTH				      CHECK_GRAPHS_CYCLE_ODD_LENGTH				    CHECK_GRAPHS_CYCLE_ODD_LENGTH				  CHECK_GRAPHS_CYCLE_ODD_LENGTH
--							      --							    --								  --
def containsOdd ( G , src ) :				      public static boolean containsOdd ( int G [ ] [ ] , int src ) public static boolean containsOdd ( int [ ] [ ] G , int src ) script_not_found : None
    global V						      	int colorArr [ ] = new int [ V ] ;			      int u ;							  
    colorArr = [ - 1 ] * V				      	for ( int i = 0 ;					      int [ ] colorArr = new int [ V ] ;			  
    colorArr [ src ] = 1				      	i < V ;							      Arrays . fill ( colorArr , - 1 ) ;			  
    q = queue.Queue ( )					      	++ i ) colorArr [ i ] = - 1 ;				      colorArr [ src ] = 1 ;					  
    q.put ( src )					      	colorArr [ src ] = 1 ;					      Queue < Integer > q = new LinkedList < > ( ) ;		  
    while ( not q.empty ( ) ) :				      	LinkedList < Integer > q = new LinkedList < Integer > ( ) ;   q . add ( src ) ;						  
	u = q.get ( )					      	q . add ( src ) ;					      while ( ( ! q . isEmpty ( ) ) ) {				  
	if ( G [ u ] [ u ] == 1 ) :			      	while ( ! q . isEmpty ( ) ) {				    	u = q . poll ( ) ;					  
	    return True					      	  int u = q . peek ( ) ;				    	if ( ( G [ u ] [ u ] == 1 ) ) return true ;		  
	for v in range ( V ) :				      	  q . pop ( ) ;						    	for ( v = 0 ;						  
	    if ( G [ u ] [ v ] and colorArr [ v ] == - 1 ) :  	  if ( G [ u ] [ u ] == 1 ) return true ;		    	v < V ;							  
		colorArr [ v ] = 1 - colorArr [ u ]	      	  for ( int v = 0 ;					    	v ++ ) {						  
		q.put ( v )				      	  v < V ;						    	  if ( ( G [ u ] [ v ] ) && ( colorArr [ v ] == - 1 ) ) { 
	    elif ( G [ u ] [ v ] and colorArr [ v ] == colorA 	  ++ v ) {						    	    colorArr [ v ] = 1 - colorArr [ u ] ;		  
		return True				      	    if ( G [ u ] [ v ] == 1 && colorArr [ v ] == - 1 ) {    	    q . add ( v ) ;					  
    return False					      	      colorArr [ v ] = 1 - colorArr [ u ] ;		    	  }							  
							      	      q . push ( v ) ;					    	  else if ( ( G [ u ] [ v ] ) && ( colorArr [ v ] == colo 
							      	    }							    	}							  
							      	    else if ( G [ u ] [ v ] == 1 && colorArr [ v ] == color   }								  
							      	  }							      return false ;						  
							      	}							    }								  
							      	return false ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		      CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		    CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		  CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME
--							      --							    --								  --
def constructPalin ( string , l ) :			      static String constructPalin ( char [ ] str , int len ) {	    public static String constructPalin ( String string , int l ) error : CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALIN
    string = list ( string )				      	int i = 0 , j = len - 1 ;				      StringBuilder sb = new StringBuilder ( string ) ;		  DROME.java:95: error: incompatible types: char[] c
    i = - 1						      	for ( ;							      int i = - 1 ;						  annot be converted to String	       if(f_filled(p
    j = l						      	i < j ;							      int j = l ;						  aram0.get(i),param1.get(i)).equals(f_gold(param0.g
    while i < j :					      	i ++ , j -- ) {						      while ( i < j ) {						  et(i),param1.get(i))))
	i += 1						      	  if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continu 	i ++ ;							     ^ Note: Some messages have been simplified; rec
	j -= 1						      	  else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {  	j -- ;							  ompile with -Xdiags:verbose to get full output 1 e
	if ( string [ i ] == string [ j ] and string [ i ] != 	    str [ i ] = 'a' ;					    	if ( ( sb . charAt ( i ) == sb . charAt ( j ) ) && ( sb . rror
	    continue					      	    str [ j ] = 'a' ;					    	  continue ;						  
	elif ( string [ i ] == string [ j ] and string [ i ]  	    continue ;						    	}							  
	    string [ i ] = 'a'				      	  }							    	else if ( ( sb . charAt ( i ) == sb . charAt ( j ) ) && ( 
	    string [ j ] = 'a'				      	  else if ( str [ i ] == '*' ) {			    	  sb . setCharAt ( i , 'a' ) ;				  
	    continue					      	    str [ i ] = str [ j ] ;				    	  sb . setCharAt ( j , 'a' ) ;				  
	elif string [ i ] == '*' :			      	    continue ;						    	  continue ;						  
	    string [ i ] = string [ j ]			      	  }							    	}							  
	    continue					      	  else if ( str [ j ] == '*' ) {			    	else if ( sb . charAt ( i ) == '*' ) {			  
	elif string [ j ] == '*' :			      	    str [ j ] = str [ i ] ;				    	  sb . setCharAt ( i , sb . charAt ( j ) ) ;		  
	    string [ j ] = string [ i ]			      	    continue ;						    	  continue ;						  
	    continue					      	  }							    	}							  
	print ( "Not Possible" )			      	  System . out . println ( "Not Possible" ) ;		    	else if ( sb . charAt ( j ) == '*' ) {			  
	return ""					      	  return "" ;						    	  sb . setCharAt ( j , sb . charAt ( i ) ) ;		  
    return ''.join ( string )				      	}							    	  continue ;						  
							      	return String . valueOf ( str ) ;			    	}							  
							      }								    	System . out . println ( "Not Possible" ) ;		  
							      								    	return "" ;						  
							      								      }								  
							      								      return sb . toString ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	      DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	    DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	  DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B
--							      --							    --								  --
def discreteLogarithm ( a , b , m ) :			      static int discreteLogarithm ( int a , int b , int m ) {	    public static int discreteLogarithm ( int a , int b , int m ) script_not_found : None
    n = int ( math.sqrt ( m ) + 1 )			      	int n = ( int ) ( Math . sqrt ( m ) + 1 ) ;		      int n = ( int ) ( Math . sqrt ( m ) + 1 ) ;		  
    an = 1						      	int an = 1 ;						      int an = 1 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	an = ( an * a ) % m				      	i < n ;							      i < n ;							  
    value = [ 0 ] * m					      	++ i ) an = ( an * a ) % m ;				      i ++ ) {							  
    cur = an						      	int [ ] value = new int [ m ] ;				    	an = ( an * a ) % m ;					  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 , cur = an ;				      }								  
	if ( value [ cur ] == 0 ) :			      	i <= n ;						      int [ ] value = new int [ m ] ;				  
	    value [ cur ] = i				      	++ i ) {						      int cur = an ;						  
	cur = ( cur * an ) % m				      	  if ( value [ cur ] == 0 ) value [ cur ] = i ;		      for ( int i = 1 ;						  
    cur = b						      	  cur = ( cur * an ) % m ;				      i <= n ;							  
    for i in range ( n + 1 ) :				      	}							      i ++ ) {							  
	if ( value [ cur ] > 0 ) :			      	for ( int i = 0 , cur = b ;				    	if ( ( value [ cur ] ) == 0 ) {				  
	    ans = value [ cur ] * n - i			      	i <= n ;						    	  value [ cur ] = i ;					  
	    if ( ans < m ) :				      	++ i ) {						    	}							  
		return ans				      	  if ( value [ cur ] > 0 ) {				    	cur = ( cur * an ) % m ;				  
	cur = ( cur * a ) % m				      	    int ans = value [ cur ] * n - i ;			      }								  
    return - 1						      	    if ( ans < m ) return ans ;				      cur = b ;							  
							      	  }							      for ( int i = 0 ;						  
							      	  cur = ( cur * a ) % m ;				      i <= n ;							  
							      	}							      i ++ ) {							  
							      	return - 1 ;						    	if ( ( value [ cur ] ) > 0 ) {				  
							      }								    	  int ans = value [ cur ] * n - i ;			  
							      								    	  if ( ( ans < m ) ) {					  
							      								    	    return ans ;					  
							      								    	  }							  
							      								    	}							  
							      								    	cur = ( cur * a ) % m ;					  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR
--							      --							    --								  --
def bitonicGenerator ( arr , n ) :			      static void bitonicGenerator ( int arr [ ] , int n ) {	    public static void bitonicGenerator ( int [ ] arr , int n ) { error : SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_P
    evenArr = [ ]					      	Vector < Integer > evenArr = new Vector < Integer > ( ) ;     ArrayList < Integer > evenArr = new ArrayList < > ( ) ;	  LACED_DECREASING_ORDER.java:12: error: class SPLIT
    oddArr = [ ]					      	Vector < Integer > oddArr = new Vector < Integer > ( ) ;      ArrayList < Integer > oddArr = new ArrayList < > ( ) ;	  _ARRAY_ADD_FIRST_PART_END is public, should be dec
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  lared in a file named SPLIT_ARRAY_ADD_FIRST_PART_E
	if ( ( i % 2 ) == 0 ) :				      	i < n ;							      i < n ;							  ND.java public class SPLIT_ARRAY_ADD_FIRST_PART_EN
	    evenArr.append ( arr [ i ] )		      	i ++ ) {						      i ++ ) {							  D{	    ^ SORT_EVEN_PLACED_ELEMENTS_INCREASING_O
	else :						      	  if ( i % 2 != 1 ) {					    	if ( ( ( i % 2 ) == 0 ) ) {				  DD_PLACED_DECREASING_ORDER.java:42: error: no suit
	    oddArr.append ( arr [ i ] )			      	    evenArr . add ( arr [ i ] ) ;			    	  evenArr . add ( arr [ i ] ) ;				  able method found for sort(ArrayList<Integer>)   A
    evenArr = sorted ( evenArr )			      	  }							    	}							  rrays . sort ( oddArr ) ;	     ^	   method Ar
    oddArr = sorted ( oddArr )				      	  else {						    	else {							  rays.sort(int[]) is not applicable	   (argument
    oddArr = oddArr [ : : - 1 ]				      	    oddArr . add ( arr [ i ] ) ;			    	  oddArr . add ( arr [ i ] ) ;				   mismatch; ArrayList<Integer> cannot be converted
    i = 0						      	  }							    	}							  to int[])	method Arrays.sort(long[]) is not ap
    for j in range ( len ( evenArr ) ) :		      	}							      }								  plicable	 (argument mismatch; ArrayList<Integ
	arr [ i ] = evenArr [ j ]			      	Collections . sort ( evenArr ) ;			      Collections . sort ( evenArr ) ;				  er> cannot be converted to long[])	 method Arra
	i += 1						      	Collections . sort ( oddArr , Collections . reverseOrder (    Collections . sort ( oddArr ) ;				  ys.sort(short[]) is not applicable	   (argument
    for j in range ( len ( oddArr ) ) :			      	int i = 0 ;						      oddArr = new ArrayList < > ( oddArr ) ;			   mismatch; ArrayList<Integer> cannot be converted
	arr [ i ] = oddArr [ j ]			      	for ( int j = 0 ;					      Arrays . sort ( oddArr ) ;				  to short[])	  method Arrays.sort(char[]) is not
	i += 1						      	j < evenArr . size ( ) ;				      int i = 0 ;						  applicable	   (argument mismatch; ArrayList<Int
							      	j ++ ) {						      for ( int j = 0 ;						  eger> cannot be converted to char[])	   method Ar
							      	  arr [ i ++ ] = evenArr . get ( j ) ;			      j < evenArr . size ( ) ;					  rays.sort(byte[]) is not applicable	    (argumen
							      	}							      j ++ ) {							  t mismatch; ArrayList<Integer> cannot be converted
							      	for ( int j = 0 ;					    	arr [ i ] = evenArr . get ( j ) ;			   to byte[])	  method Arrays.sort(float[]) is not
							      	j < oddArr . size ( ) ;					    	i ++ ;							   applicable	    (argument mismatch; ArrayList<In
							      	j ++ ) {						      }								  teger> cannot be converted to float[])     method
							      	  arr [ i ++ ] = oddArr . get ( j ) ;			      for ( int j = 0 ;						  Arrays.sort(double[]) is not applicable	(arg
							      	}							      j < oddArr . size ( ) ;					  ument mismatch; ArrayList<Integer> cannot be conve
							      }								      j ++ ) {							  rted to double[])	method Arrays.sort(Object[])
							      								    	arr [ i ] = oddArr . get ( j ) ;			   is not applicable	   (argument mismatch; Array
							      								    	i ++ ;							  List<Integer> cannot be converted to Object[])
							      								      }								   method Arrays.<T#1>sort(T#1[],Comparator<? super
							      								    }								  T#1>) is not applicable	(cannot infer type-v
							      								    								  ariable(s) T#1	 (actual and formal argument
							      								    								   lists differ in length))	method Arrays.<T#2>s
							      								    								  ort(T#2[],int,int,Comparator<? super T#2>) is not
							      								    								  applicable	   (cannot infer type-variable(s) T#
							      								    								  2	    (actual and formal argument lists differ
							      								    								   in length))	 where T#1,T#2 are type-variables:
							      								    								     T#1 extends Object declared in method <T#1>sort
							      								    								  (T#1[],Comparator<? super T#1>)     T#2 extends Ob
							      								    								  ject declared in method <T#2>sort(T#2[],int,int,Co
							      								    								  mparator<? super T#2>) SORT_EVEN_PLACED_ELEMENTS_I
							      								    								  NCREASING_ODD_PLACED_DECREASING_ORDER.java:129: er
							      								    								  ror: method f_filled in class SPLIT_ARRAY_ADD_FIRS
							      								    								  T_PART_END cannot be applied to given types;
							      								    								     f_filled(filled_function_param0.get(i),filled_f
							      								    								  unction_param1.get(i),filled_function_param2.get(i
							      								    								  ));	      ^	  required: int[],int	found: int[]
							      								    								  ,Integer,Integer   reason: actual and formal argum
							      								    								  ent lists differ in length Note: Some messages hav
							      								    								  e been simplified; recompile with -Xdiags:verbose
							      								    								  to get full output 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			      CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			    CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			  CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7
--							      --							    --								  --
def isdivisible7 ( num ) :				      static boolean isDivisible7 ( String num ) {		    public static boolean isdivisible7 ( String num ) {		  success : None
    n = len ( num )					      	int n = num . length ( ) ;				      int n = num . length ( ) ;				  
    if ( n == 0 and num [ 0 ] == '\n' ) :		      	if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;      if ( ( n == 0 ) && ( num . charAt ( 0 ) == '\n' ) ) {	  
	return 1					      	if ( n % 3 == 1 ) num = "00" + num ;			    	return true ;						  
    if ( n % 3 == 1 ) :					      	if ( n % 3 == 2 ) num = "0" + num ;			      }								  
	num = str ( num ) + "00"			      	n = num . length ( ) ;					      if ( ( n % 3 == 1 ) ) {					  
	n += 2						      	int gSum = 0 , p = 1 ;					    	num = String . valueOf ( num ) + "00" ;			  
    elif ( n % 3 == 2 ) :				      	for ( int i = n - 1 ;					    	n += 2 ;						  
	num = str ( num ) + "0"				      	i >= 0 ;						      }								  
	n += 1						      	i -- ) {						      else if ( ( n % 3 == 2 ) ) {				  
    GSum = 0						      	  int group = 0 ;					    	num = String . valueOf ( num ) + "0" ;			  
    p = 1						      	  group += num . charAt ( i -- ) - '0' ;		    	n += 1 ;						  
    for i in range ( n - 1 , - 1 , - 1 ) :		      	  group += ( num . charAt ( i -- ) - '0' ) * 10 ;	      }								  
	group = 0					      	  group += ( num . charAt ( i ) - '0' ) * 100 ;		      int GSum = 0 ;						  
	group += ord ( num [ i ] ) - ord ( '0' )	      	  gSum = gSum + group * p ;				      int p = 1 ;						  
	i -= 1						      	  p = p * - 1 ;						      for ( int i = n - 1 ;					  
	group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10     	}							      i >= 0 ;							  
	i -= 1						      	return ( gSum % 7 == 0 ) ;				      i -- ) {							  
	group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100    }								    	int group = 0 ;						  
	GSum = GSum + group * p				      								    	group += ( int ) num . charAt ( i ) - '0' ;		  
	p *= ( - 1 )					      								    	i -- ;							  
    return ( GSum % 7 == 0 )				      								    	group += ( ( int ) num . charAt ( i ) - '0' ) * 10 ;	  
							      								    	i -- ;							  
							      								    	group += ( ( int ) num . charAt ( i ) - '0' ) * 100 ;	  
							      								    	GSum = GSum + group * p ;				  
							      								    	p *= ( - 1 ) ;						  
							      								      }								  
							      								      return ( GSum % 7 == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE    MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE    MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE	  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE
--							      --							    --								  --
def maxSumWO3Consec ( arr , n ) :			      static int maxSumWO3Consec ( int arr [ ] , int n ) {	    public static int maxSumWO3Consec ( int [ ] arr , int n ) {	  success : None
    sum = [ 0 for k in range ( n ) ]			      	int sum [ ] = new int [ n ] ;				      int [ ] sum = new int [ n ] ;				  
    if n >= 1 :						      	if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ;			      for ( int k = 0 ;						  
	sum [ 0 ] = arr [ 0 ]				      	if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;	      k < n ;							  
    if n >= 2 :						      	if ( n > 2 ) sum [ 2 ] = Math . max ( sum [ 1 ] , Math . ma   k ++ ) {							  
	sum [ 1 ] = arr [ 0 ] + arr [ 1 ]		      	for ( int i = 3 ;					    	sum [ k ] = 0 ;						  
    if n > 2 :						      	i < n ;							      }								  
	sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 	i ++ ) sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ]    if ( n >= 1 ) {						  
    for i in range ( 3 , n ) :				      	return sum [ n - 1 ] ;					    	sum [ 0 ] = arr [ 0 ] ;					  
	sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] }								      }								  
    return sum [ n - 1 ]				      								      if ( n >= 2 ) {						  
							      								    	sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;			  
							      								      }								  
							      								      if ( n > 2 ) {						  
							      								    	sum [ 2 ] = Math . max ( sum [ 1 ] , Math . max ( arr [ 1 
							      								      }								  
							      								      for ( int i = 3 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ] , sum 
							      								      }								  
							      								      return sum [ n - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		      CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		    CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		  CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1
--							      --							    --								  --
def checkReverse ( arr , n ) :				      static boolean checkReverse ( int arr [ ] , int n ) {	    static boolean checkReverse ( int [ ] arr , int n ) {	  error : Exception in thread "main" java.lang.Array
    if ( n == 1 ) :					      	if ( n == 1 ) {						      if ( ( n == 1 ) ) {					  IndexOutOfBoundsException: Index 70 out of bounds
	return True					      	  return true ;						    	return true ;						  for length 33 	at CHECK_REVERSING_SUB_ARRAY_MAKE_A
    i = 1						      	}							      }								  RRAY_SORTED_1.f_filled(CHECK_REVERSING_SUB_ARRAY_M
    for i in range ( 1 , n ) :				      	int i ;							      int i = 1 ;						  AKE_ARRAY_SORTED_1.java:63) 	at CHECK_REVERSING_SU
	if arr [ i - 1 ] < arr [ i ] :			      	for ( i = 1 ;						      for ( i = 1 ;						  B_ARRAY_MAKE_ARRAY_SORTED_1.main(CHECK_REVERSING_S
	    if ( i == n ) :				      	arr [ i - 1 ] < arr [ i ] && i < n ;			      i < n ;							  UB_ARRAY_MAKE_ARRAY_SORTED_1.java:112)
		return True				      	i ++ ) ;						      i ++ ) {							  
    j = i						      	if ( i == n ) {						    	if ( arr [ i - 1 ] < arr [ i ] ) {			  
    while ( arr [ j ] < arr [ j - 1 ] ) :		      	  return true ;						    	  if ( ( i == n ) ) {					  
	if ( i > 1 and arr [ j ] < arr [ i - 2 ] ) :	      	}							    	    return true ;					  
	    return False				      	int j = i ++ ;						    	  }							  
	j += 1						      	while ( arr [ j ] < arr [ j - 1 ] ) {			    	}							  
    if ( j == n ) :					      	  if ( i > 1 && arr [ j ] < arr [ i - 2 ] ) {		      }								  
	return True					      	    return false ;					      int j = i ;						  
    k = j						      	  }							      while ( ( j = arr [ j - 1 ] ) < ( arr [ j ] - 1 ) ) {	  
    if ( arr [ k ] < arr [ i - 1 ] ) :			      	  j ++ ;						    	if ( ( i > 1 ) && ( j < arr [ i - 2 ] ) ) {		  
	return False					      	}							    	  return false ;					  
    while ( k > 1 and k < n ) :				      	if ( j == n ) {						    	}							  
	if ( arr [ k ] < arr [ k - 1 ] ) :		      	  return true ;						    	j ++ ;							  
	    return False				      	}							      }								  
	k += 1						      	int k = j ;						      if ( ( j == n ) ) {					  
    return True						      	if ( arr [ k ] < arr [ i - 1 ] ) {			    	return true ;						  
							      	  return false ;					      }								  
							      	}							      int k = j ;						  
							      	while ( k > 1 && k < n ) {				      if ( ( k = arr [ i - 1 ] ) < ( arr [ i - 1 ] ) ) {	  
							      	  if ( arr [ k ] < arr [ k - 1 ] ) {			    	return false ;						  
							      	    return false ;					      }								  
							      	  }							      while ( ( k > 1 ) && ( k < n ) ) {			  
							      	  k ++ ;						    	if ( ( arr [ k ] < arr [ k - 1 ] ) ) {			  
							      	}							    	  return false ;					  
							      	return true ;						    	}							  
							      }								    	k ++ ;							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_LARGE_NUMBER_999			      CHECK_DIVISIBILITY_LARGE_NUMBER_999			    CHECK_DIVISIBILITY_LARGE_NUMBER_999				  CHECK_DIVISIBILITY_LARGE_NUMBER_999
--							      --							    --								  --
def isDivisible999 ( num ) :				      static boolean isDivisible999 ( String num ) {		    public static boolean isDivisible999 ( String num ) {	  error : CHECK_DIVISIBILITY_LARGE_NUMBER_999.java:6
    n = len ( num ) ;					      	int n = num . length ( ) ;				      int n = num . length ( ) ;				  1: error: incompatible types: boolean cannot be co
    if ( n == 0 or num [ 0 ] == '0' ) :			      	if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;      if ( ( n == 0 ) || ( num . charAt ( 0 ) == '0' ) ) {	  nverted to int     gSum = f_filled ( num ) ;
	return true					      	if ( n % 3 == 1 ) num = "00" + num ;			    	return true ;						  		 ^ 1 error
    if ( ( n % 3 ) == 1 ) :				      	if ( n % 3 == 2 ) num = "0" + num ;			      }								  
	num = "00" + num				      	int gSum = 0 ;						      if ( ( ( n % 3 ) == 1 ) ) {				  
    if ( ( n % 3 ) == 2 ) :				      	for ( int i = 0 ;					    	num = "00" + num ;					  
	num = "0" + num					      	i < n ;							      }								  
    gSum = 0						      	i ++ ) {						      if ( ( ( n % 3 ) == 2 ) ) {				  
    for i in range ( 0 , n , 3 ) :			      	  int group = 0 ;					    	num = "0" + num ;					  
	group = 0					      	  group += ( num . charAt ( i ++ ) - '0' ) * 100 ;	      }								  
	group += ( ord ( num [ i ] ) - 48 ) * 100	      	  group += ( num . charAt ( i ++ ) - '0' ) * 10 ;	      int gSum = 0 ;						  
	group += ( ord ( num [ i + 1 ] ) - 48 ) * 10	      	  group += num . charAt ( i ) - '0' ;			      for ( int i = 0 ;						  
	group += ( ord ( num [ i + 2 ] ) - 48 )		      	  gSum += group ;					      i < n ;							  
	gSum += group					      	}							      i += 3 ) {						  
    if ( gSum > 1000 ) :				      	if ( gSum > 1000 ) {					    	int group = 0 ;						  
	num = str ( gSum )				      	  num = Integer . toString ( gSum ) ;			    	group += ( ( int ) num . charAt ( i ) - 48 ) * 100 ;	  
	n = len ( num )					      	  n = num . length ( ) ;				    	group += ( ( int ) num . charAt ( i + 1 ) - 48 ) * 10 ;	  
	gSum = isDivisible999 ( num )			      	  gSum = isDivisible999 ( num ) ? 1 : 0 ;		    	group += ( ( int ) num . charAt ( i + 2 ) - 48 ) ;	  
    return ( gSum == 999 )				      	}							    	gSum += group ;						  
							      	return ( gSum == 999 ) ;				      }								  
							      }								      if ( ( gSum > 1000 ) ) {					  
							      								    	num = String . valueOf ( gSum ) ;			  
							      								    	n = num . length ( ) ;					  
							      								    	gSum = isDivisible999 ( num ) ;				  
							      								      }								  
							      								      return ( gSum == 999 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_
--							      --							    --								  --
def printClosest ( ar1 , ar2 , m , n , x ) :		      void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n static void printClosest ( int ar1 [ ] , int ar2 [ ] , int m  script_not_found : None
    diff = sys.maxsize					      	int diff = Integer . MAX_VALUE ;			      int diff = Integer . MAX_VALUE ;				  
    l = 0						      	int res_l = 0 , res_r = 0 ;				      int l = 0 ;						  
    r = n - 1						      	int l = 0 , r = n - 1 ;					      int r = n - 1 ;						  
    while ( l < m and r >= 0 ) :			      	while ( l < m && r >= 0 ) {				      while ( ( l < m ) && ( r >= 0 ) ) {			  
	if abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff :	      	  if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {  	if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {  
	    res_l = l					      	    res_l = l ;						    	  int resL = l ;					  
	    res_r = r					      	    res_r = r ;						    	  int resR = r ;					  
	    diff = abs ( ar1 [ l ] + ar2 [ r ] - x )	      	    diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;	    	  diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;	  
	if ar1 [ l ] + ar2 [ r ] > x :			      	  }							    	}							  
	    r = r - 1					      	  if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ;		    	if ( ar1 [ l ] + ar2 [ r ] > x ) {			  
	else :						      	  else l ++ ;						    	  r = r - 1 ;						  
	    l = l + 1					      	}							    	}							  
    print ( "The closest pair is [" , ar1 [ res_l ] , "," , a 	System . out . print ( "The closest pair is [" + ar1 [ res_ 	else {							  
							      }								    	  l = l + 1 ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "The closest pair is [" + ar1 [ re 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS	      CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS	    CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS		  CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS
--							      --							    --								  --
def check ( s ) :					      public static boolean check ( String s ) {		    public static boolean check ( String s ) {			  script_not_found : None
    if ( len ( s ) >= 10 ) :				      	if ( s . length ( ) >= 10 ) return true ;		      if ( ( s . length ( ) ) >= 10 ) return true ;		  
	return True					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    for i in range ( 1 , len ( s ) ) :			      	i < s . length ( ) ;					      i < s . length ( ) ;					  
	for j in range ( i + 1 , len ( s ) ) :		      	i ++ ) {						      i ++ ) {							  
	    for k in range ( j + 1 , len ( s ) ) :	      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
		s1 = s [ 0 : i ]			      	  j < s . length ( ) ;					    	j < s . length ( ) ;					  
		s2 = s [ i : j - i ]			      	  j ++ ) {						    	j ++ ) {						  
		s3 = s [ j : k - j ]			      	    for ( int k = j + 1 ;				    	  for ( int k = j + 1 ;					  
		s4 = s [ k : len ( s ) - k ]		      	    k < s . length ( ) ;				    	  k < s . length ( ) ;					  
		if ( s1 != s2 and s1 != s3 and s1 != s4 and s 	    k ++ ) {						    	  k ++ ) {						  
		    return True				      	      String s1 = "" , s2 = "" , s3 = "" , s4 = "" ;	    	    String s1 = s . substring ( 0 , i ) ;		  
    return False					      	      try {						    	    String s2 = s . substring ( i , j - i ) ;		  
							      		s1 = s . substring ( 0 , i ) ;			    	    String s3 = s . substring ( j , k - j ) ;		  
							      		s2 = s . substring ( i , j - i ) ;		    	    String s4 = s . substring ( k , s . length ( ) - k )  
							      		s3 = s . substring ( j , k - j ) ;		    	    if ( ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 & 
							      		s4 = s . substring ( k , s . length ( ) - k ) ;	    	  }							  
							      	      }							    	}							  
							      	      catch ( StringIndexOutOfBoundsException e ) {	      }								  
							      	      }							      return false ;						  
							      	      if ( strcheck ( s1 , s2 ) && strcheck ( s1 , s3 ) &&  }								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return false ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_ FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_ FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_ FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_
--							      --							    --								  --
def maxSubsequenceSubstring ( x , y , n , m ) :		      static int maxSubsequenceSubstring ( char x [ ] , char y [ ]  public static int maxSubsequenceSubstring ( String x , String script_not_found : None
    dp = [ [ 0 for i in range ( MAX ) ] for i in range ( MAX  	int dp [ ] [ ] = new int [ MAX ] [ MAX ] ;		      int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;		  
    for i in range ( 1 , m + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 1 , n + 1 ) :			      	i <= m ;						      i < MAX ;							  
	    if ( x [ j - 1 ] == y [ i - 1 ] ) :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]   	j <= n ;						    	dp [ i ] [ i ] = 0 ;					  
	    else :					      	j ++ ) dp [ i ] [ j ] = 0 ;				      }								  
		dp [ i ] [ j ] = dp [ i ] [ j - 1 ]	      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    ans = 0						      	i <= m ;						      i <= m ;							  
    for i in range ( 1 , m + 1 ) :			      	i ++ ) {						      i ++ ) {							  
	ans = max ( ans , dp [ i ] [ n ] )		      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    return ans						      	  j <= n ;						    	j <= n ;						  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 +  	  if ( ( x . charAt ( j - 1 ) == y . charAt ( i - 1 ) ) ) 
							      	    else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		    	    dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;	  
							      	  }							    	  }							  
							      	}							    	  else {						  
							      	int ans = 0 ;						    	    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		  
							      	for ( int i = 1 ;					    	  }							  
							      	i <= m ;						    	}							  
							      	i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ;	      }								  
							      	return ans ;						      int ans = 0 ;						  
							      }								      for ( int i = 1 ;						  
							      								      i <= m ;							  
							      								      i ++ ) {							  
							      								    	ans = Math . max ( ans , dp [ i ] [ n ] ) ;		  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COCKTAIL_SORT						      COCKTAIL_SORT						    COCKTAIL_SORT						  COCKTAIL_SORT
--							      --							    --								  --
def cocktailSort ( a ) :				      void cocktailSort ( int a [ ] ) {				    public static void cocktailSort ( int [ ] a ) {		  script_not_found : None
    n = len ( a )					      	boolean swapped = true ;				      int n = a . length ;					  
    swapped = True					      	int start = 0 ;						      boolean swapped = true ;					  
    start = 0						      	int end = a . length ;					      int start = 0 ;						  
    end = n - 1						      	while ( swapped == true ) {				      int end = n - 1 ;						  
    while ( swapped == True ) :				      	  swapped = false ;					      while ( ( swapped == true ) ) {				  
	swapped = False					      	  for ( int i = start ;					    	swapped = false ;					  
	for i in range ( start , end ) :		      	  i < end - 1 ;						    	for ( int i = start ;					  
	    if ( a [ i ] > a [ i + 1 ] ) :		      	  ++ i ) {						    	i < end ;						  
		a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ] 	    if ( a [ i ] > a [ i + 1 ] ) {			    	i ++ ) {						  
		swapped = True				      	      int temp = a [ i ] ;				    	  if ( ( a [ i ] > a [ i + 1 ] ) ) {			  
	if ( swapped == False ) :			      	      a [ i ] = a [ i + 1 ] ;				    	    a [ i ] = a [ i + 1 ] ;				  
	    break					      	      a [ i + 1 ] = temp ;				    	    a [ i + 1 ] = a [ i ] ;				  
	swapped = False					      	      swapped = true ;					    	    swapped = true ;					  
	end = end - 1					      	    }							    	  }							  
	for i in range ( end - 1 , start - 1 , - 1 ) :	      	  }							    	}							  
	    if ( a [ i ] > a [ i + 1 ] ) :		      	  if ( swapped == false ) break ;			    	if ( ( swapped == false ) ) break ;			  
		a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ] 	  swapped = false ;					    	swapped = false ;					  
		swapped = True				      	  end = end - 1 ;					    	end = end - 1 ;						  
	start = start + 1				      	  for ( int i = end - 1 ;				    	for ( int i = end - 1 ;					  
							      	  i >= start ;						    	i >= start ;						  
							      	  i -- ) {						    	i -- ) {						  
							      	    if ( a [ i ] > a [ i + 1 ] ) {			    	  if ( ( a [ i ] > a [ i + 1 ] ) ) {			  
							      	      int temp = a [ i ] ;				    	    a [ i ] = a [ i + 1 ] ;				  
							      	      a [ i ] = a [ i + 1 ] ;				    	    a [ i + 1 ] = a [ i ] ;				  
							      	      a [ i + 1 ] = temp ;				    	    swapped = true ;					  
							      	      swapped = true ;					    	  }							  
							      	    }							    	}							  
							      	  }							    	start = start + 1 ;					  
							      	  start = start + 1 ;					      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT
--							      --							    --								  --
def checkDivisibility ( num ) :				      static boolean checkDivisibility ( String num ) {		    static boolean checkDivisibility ( String num ) {		  success : None
    length = len ( num )				      	int length = num . length ( ) ;				      int length = num . length ( ) ;				  
    if ( length == 1 and num [ 0 ] == '0' ) :		      	if ( length == 1 && num . charAt ( 0 ) == '0' ) return true   if ( ( length == 1 ) && ( num . charAt ( 0 ) == '0' ) ) {	  
	return True					      	if ( length % 3 == 1 ) {				    	return true ;						  
    if ( length % 3 == 1 ) :				      	  num += "00" ;						      }								  
	num = str ( num ) + "00"			      	  length += 2 ;						      if ( ( length % 3 == 1 ) ) {				  
	length += 2					      	}							    	num = num . concat ( "00" ) ;				  
    elif ( length % 3 == 2 ) :				      	else if ( length % 3 == 2 ) {				    	length += 2 ;						  
	num = str ( num ) + "0"				      	  num += "0" ;						      }								  
	length += 1					      	  length += 1 ;						      else if ( ( length % 3 == 2 ) ) {				  
    sum = 0						      	}							    	num = num . concat ( "0" ) ;				  
    p = 1						      	int sum = 0 , p = 1 ;					    	length += 1 ;						  
    for i in range ( length - 1 , - 1 , - 1 ) :		      	for ( int i = length - 1 ;				      }								  
	group = 0					      	i >= 0 ;						      int sum = 0 ;						  
	group += ord ( num [ i ] ) - ord ( '0' )	      	i -- ) {						      int p = 1 ;						  
	i -= 1						      	  int group = 0 ;					      for ( int i = length - 1 ;				  
	group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10     	  group += num . charAt ( i -- ) - '0' ;		      i >= 0 ;							  
	i -= 1						      	  group += ( num . charAt ( i -- ) - '0' ) * 10 ;	      i -- ) {							  
	group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100    	  group += ( num . charAt ( i ) - '0' ) * 100 ;		    	int group = 0 ;						  
	sum = sum + group * p				      	  sum = sum + group * p ;				    	group += ( int ) num . charAt ( i ) - '0' ;		  
	p *= ( - 1 )					      	  p *= ( - 1 ) ;					    	i -- ;							  
    sum = abs ( sum )					      	}							    	group += ( ( int ) num . charAt ( i ) - '0' ) * 10 ;	  
    return ( sum % 13 == 0 )				      	sum = Math . abs ( sum ) ;				    	i -- ;							  
							      	return ( sum % 13 == 0 ) ;				    	group += ( ( int ) num . charAt ( i ) - '0' ) * 100 ;	  
							      }								    	sum = sum + group * p ;					  
							      								    	p *= ( - 1 ) ;						  
							      								      }								  
							      								      sum = Math . abs ( sum ) ;				  
							      								      return ( sum % 13 == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			      FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			    FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			  FIND_KTH_CHARACTER_OF_DECRYPTED_STRING
--							      --							    --								  --
def encodedChar ( str , k ) :				      static char encodedChar ( String str , int k ) {		    public static char encodedChar ( String str , int k ) {	  script_not_found : None
    expand = ""						      	String expand = "" ;					      String expand = "" ;					  
    freq = 0						      	String temp = "" ;					      int freq = 0 ;						  
    i = 0						      	int freq = 0 ;						      int i = 0 ;						  
    while ( i < len ( str ) ) :				      	for ( int i = 0 ;					      while ( ( i < str . length ( ) ) ) {			  
	temp = ""					      	i < str . length ( ) ;					    	String temp = "" ;					  
	freq = 0					      	) {							    	freq = 0 ;						  
	while ( i < len ( str ) and ord ( str [ i ] ) >= ord  	  temp = "" ;						    	while ( ( i < str . length ( ) ) && ( str . charAt ( i )  
	    temp += str [ i ]				      	  freq = 0 ;						    	  temp += str . charAt ( i ) ;				  
	    i += 1					      	  while ( i < str . length ( ) && str . charAt ( i ) >= 'a' 	  i ++ ;						  
	while ( i < len ( str ) and ord ( str [ i ] ) >= ord  	    temp += str . charAt ( i ) ;			    	}							  
	    freq = freq * 10 + ord ( str [ i ] ) - ord ( '0'  	    i ++ ;						    	while ( ( i < str . length ( ) ) && ( str . charAt ( i )  
	    i += 1					      	  }							    	  freq = freq * 10 + str . charAt ( i ) - '0' ;		  
	for j in range ( 1 , freq + 1 , 1 ) :		      	  while ( i < str . length ( ) && str . charAt ( i ) >= '1' 	  i ++ ;						  
	    expand += temp				      	    freq = freq * 10 + str . charAt ( i ) - '0' ;	    	}							  
    if ( freq == 0 ) :					      	    i ++ ;						    	for ( int j = 1 ;					  
	expand += temp					      	  }							    	j <= freq ;						  
    return expand [ k - 1 ]				      	  for ( int j = 1 ;					    	j += 1 ) {						  
							      	  j <= freq ;						    	  expand += temp ;					  
							      	  j ++ ) expand += temp ;				    	}							  
							      	}							      }								  
							      	if ( freq == 0 ) expand += temp ;			      if ( ( freq == 0 ) ) {					  
							      	return expand . charAt ( k - 1 ) ;			    	expand += temp ;					  
							      }								      }								  
							      								      return expand . charAt ( k - 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		      THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		    THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		  THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS
--							      --							    --								  --
def thirdLargest ( arr , arr_size ) :			      static void thirdLargest ( int arr [ ] , int arr_size ) {	    public static void thirdLargest ( int [ ] arr , int arrSize ) script_not_found : None
    if ( arr_size < 3 ) :				      	if ( arr_size < 3 ) {					      if ( ( arrSize < 3 ) ) {					  
	print ( " Invalid Input " )			      	  System . out . printf ( " Invalid Input " ) ;		    	System . out . println ( " Invalid Input " ) ;		  
	return						      	  return ;						    	return ;						  
    first = arr [ 0 ]					      	}							      }								  
    for i in range ( 1 , arr_size ) :			      	int first = arr [ 0 ] ;					      int first = arr [ 0 ] ;					  
	if ( arr [ i ] > first ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	    first = arr [ i ]				      	i < arr_size ;						      i < arrSize ;						  
    second = - sys.maxsize				      	i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;	      i ++ ) {							  
    for i in range ( 0 , arr_size ) :			      	int second = Integer . MIN_VALUE ;			    	if ( ( arr [ i ] > first ) ) {				  
	if ( arr [ i ] > second and arr [ i ] < first ) :     	for ( int i = 0 ;					    	  first = arr [ i ] ;					  
	    second = arr [ i ]				      	i < arr_size ;						    	}							  
    third = - sys.maxsize				      	i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) secon   }								  
    for i in range ( 0 , arr_size ) :			      	int third = Integer . MIN_VALUE ;			      int second = - Integer . MAX_VALUE ;			  
	if ( arr [ i ] > third and arr [ i ] < second ) :     	for ( int i = 0 ;					      for ( int i = 0 ;						  
	    third = arr [ i ]				      	i < arr_size ;						      i <= arrSize ;						  
    print ( "The Third Largest" , "element is" , third )      	i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third   i ++ ) {							  
							      	System . out . printf ( "The third Largest " + "element is  	if ( ( arr [ i ] > second ) && ( arr [ i ] < first ) ) {  
							      }								    	  second = arr [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      int third = - Integer . MAX_VALUE ;			  
							      								      for ( int i = 0 ;						  
							      								      i <= arrSize ;						  
							      								      i ++ ) {							  
							      								    	if ( ( arr [ i ] > third ) && ( arr [ i ] < second ) ) {  
							      								    	  third = arr [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "The Third Largest" + "element is" 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEIBNIZ_HARMONIC_TRIANGLE				      LEIBNIZ_HARMONIC_TRIANGLE					    LEIBNIZ_HARMONIC_TRIANGLE					  LEIBNIZ_HARMONIC_TRIANGLE
--							      --							    --								  --
def LeibnizHarmonicTriangle ( n ) :			      static void LeibnizHarmonicTriangle ( int n ) {		    public static void LeibnizHarmonicTriangle ( int n ) {	  script_not_found : None
    C = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 	int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
    for i in range ( 0 , n + 1 ) :			      	for ( int i = 0 ;					      for ( int x = 0 ;						  
	for j in range ( 0 , min ( i , n ) + 1 ) :	      	i <= n ;						      x < n ;							  
	    if ( j == 0 or j == i ) :			      	i ++ ) {						      x ++ ) {							  
		C [ i ] [ j ] = 1			      	  for ( int j = 0 ;					    	for ( int y = 0 ;					  
	    else :					      	  j <= Math . min ( i , n ) ;				    	y < n ;							  
		C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ 	  j ++ ) {						    	y ++ ) {						  
    for i in range ( 1 , n + 1 ) :			      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  C [ x ] [ y ] = 0 ;					  
	for j in range ( 1 , i + 1 ) :			      	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	}							  
	    print ( "1/" , end = "" )			      	  }							      }								  
	    print ( i * C [ i - 1 ] [ j - 1 ] , end = " " )   	}							      for ( int i = 0 ;						  
	print ( )					      	for ( int i = 1 ;					      i <= n ;							  
							      	i <= n ;						      i ++ ) {							  
							      	i ++ ) {						    	for ( int j = 0 ;					  
							      	  for ( int j = 1 ;					    	j <= Math . min ( i , n ) ;				  
							      	  j <= i ;						    	j ++ ) {						  
							      	  j ++ ) System . out . print ( "1/" + i * C [ i - 1 ] [ j  	  if ( ( j == 0 ) || ( j == i ) ) {			  
							      	  System . out . println ( ) ;				    	    C [ i ] [ j ] = 1 ;					  
							      	}							    	  }							  
							      }								    	  else {						  
							      								    	    C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 1 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j <= i ;						  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( "1/" ) ;			  
							      								    	  System . out . print ( i * C [ i - 1 ] [ j - 1 ] ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
def minCost ( a , n , k ) :				      static int minCost ( int a [ ] , int n , int k ) {	    public static int minCost ( int [ ] a , int n , int k ) {	  script_not_found : None
    dp = [ [ inf for i in range ( k + 1 ) ] for j in range (  	int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;		      int [ ] [ ] dp = new int [ k + 1 ] [ n + 1 ] ;		  
    dp [ 0 ] [ 0 ] = 0					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	i <= n ;						      i < dp . length ;						  
	for j in range ( 1 , k + 1 ) :			      	i ++ ) for ( int j = 0 ;				      i ++ ) dp [ i ] [ 0 ] = inf ;				  
	    for m in range ( i - 1 , - 1 , - 1 ) :	      	j <= k ;						      for ( int j = 0 ;						  
		dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [  	j ++ ) dp [ i ] [ j ] = inf ;				      j < dp . length ;						  
    return dp [ n ] [ k ]				      	dp [ 0 ] [ 0 ] = 0 ;					      j ++ ) dp [ 0 ] [ j ] = inf ;				  
							      	for ( int i = 1 ;					      dp [ 0 ] [ 0 ] = 0 ;					  
							      	i <= n ;						      for ( int i = 1 ;						  
							      	i ++ ) for ( int j = 1 ;				      i <= n ;							  
							      	j <= k ;						      i ++ ) for ( int j = 1 ;					  
							      	j ++ ) for ( int m = i - 1 ;				      j <= k ;							  
							      	m >= 0 ;						      j ++ ) for ( int m = i - 1 ;				  
							      	m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [    m >= 0 ;							  
							      	return dp [ n ] [ k ] ;					      m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [  
							      }								      return dp [ n ] [ k ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH
--							      --							    --								  --
def pairsInSortedRotated ( arr , n , x ) :		      static int pairsInSortedRotated ( int arr [ ] , int n , int x public static int pairsInSortedRotated ( int [ ] arr , int n  error : GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_T
    for i in range ( n ) :				      	int i ;							      for ( int i = 0 ;						  HERE_IS_A_PAIR_WITH_A_GIVEN_SUM_1.java:43: error:
	if arr [ i ] > arr [ i + 1 ] :			      	for ( i = 0 ;						      i < n ;							  cannot find symbol   int l = ( i + 1 ) % n ;
	    break					      	i < n - 1 ;						      i ++ ) {							  	 ^   symbol:   variable i   location: class
    l = ( i + 1 ) % n					      	i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;		    	if ( arr [ i ] > arr [ i + 1 ] ) break ;		  GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_
    r = i						      	int l = ( i + 1 ) % n ;					      }								  A_PAIR_WITH_A_GIVEN_SUM_1 GIVEN_A_SORTED_AND_ROTAT
    cnt = 0						      	int r = i ;						      int l = ( i + 1 ) % n ;					  ED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH_A_GIVEN_SUM_
    while ( l != r ) :					      	int cnt = 0 ;						      int r = i ;						  1.java:44: error: cannot find symbol	 int r = i ;
	if arr [ l ] + arr [ r ] == x :			      	while ( l != r ) {					      int cnt = 0 ;						  	     ^	 symbol:   variable i	location: cl
	    cnt += 1					      	  if ( arr [ l ] + arr [ r ] == x ) {			      while ( ( l != r ) ) {					  ass GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE
	    if l == ( r - 1 + n ) % n :			      	    cnt ++ ;						    	if ( arr [ l ] + arr [ r ] == x ) {			  _IS_A_PAIR_WITH_A_GIVEN_SUM_1 2 errors
		return cnt				      	    if ( l == ( r - 1 + n ) % n ) {			    	  cnt ++ ;						  
	    l = ( l + 1 ) % n				      	      return cnt ;					    	  if ( l == ( r - 1 + n ) % n ) return cnt ;		  
	    r = ( r - 1 + n ) % n			      	    }							    	  l = ( l + 1 ) % n ;					  
	elif arr [ l ] + arr [ r ] < x :		      	    l = ( l + 1 ) % n ;					    	  r = ( r - 1 + n ) % n ;				  
	    l = ( l + 1 ) % n				      	    r = ( r - 1 + n ) % n ;				    	}							  
	else :						      	  }							    	else if ( arr [ l ] + arr [ r ] < x ) {			  
	    r = ( n + r - 1 ) % n			      	  else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ; 	  l = ( l + 1 ) % n ;					  
    return cnt						      	  else r = ( n + r - 1 ) % n ;				    	}							  
							      	}							    	else {							  
							      	return cnt ;						    	  r = ( n + r - 1 ) % n ;				  
							      }								    	}							  
							      								      }								  
							      								      return cnt ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			      K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			    K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			  K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
def kthLargestSum ( arr , n , k ) :			      static int kthLargestSum ( int arr [ ] , int n , int k ) {    public static int kthLargestSum ( int [ ] arr , int n , int k failure : #Results:1, 10
    sum = [ ]						      	int sum [ ] = new int [ n + 1 ] ;			      int [ ] sum = new int [ n + 1 ] ;				  
    sum.append ( 0 )					      	sum [ 0 ] = 0 ;						      sum [ 0 ] = 0 ;						  
    sum.append ( arr [ 0 ] )				      	sum [ 1 ] = arr [ 0 ] ;					      sum [ 1 ] = arr [ 0 ] ;					  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	sum.append ( sum [ i - 1 ] + arr [ i - 1 ] )	      	i <= n ;						      i <= n ;							  
    Q = [ ]						      	i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i - 1 ] ;	      i ++ ) {							  
    heapq.heapify ( Q )					      	PriorityQueue < Integer > Q = new PriorityQueue < Integer > 	sum [ i ] = sum [ i - 1 ] + arr [ i - 1 ] ;		  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      }								  
	for j in range ( i , n + 1 ) :			      	i <= n ;						      int [ ] Q = new int [ n + 1 ] ;				  
	    x = sum [ j ] - sum [ i - 1 ]		      	i ++ ) {						      System . arraycopy ( sum , 0 , Q , 0 , Q . length ) ;	  
	    if len ( Q ) < k :				      	  for ( int j = i ;					      for ( int i = 1 ;						  
		heapq.heappush ( Q , x )		      	  j <= n ;						      i <= n ;							  
	    else :					      	  j ++ ) {						      i ++ ) {							  
		if Q [ 0 ] < x :			      	    int x = sum [ j ] - sum [ i - 1 ] ;			    	for ( int j = i ;					  
		    heapq.heappop ( Q )			      	    if ( Q . size ( ) < k ) Q . add ( x ) ;		    	j <= n ;						  
		    heapq.heappush ( Q , x )		      	    else {						    	j ++ ) {						  
    return Q [ 0 ]					      	      if ( Q . peek ( ) < x ) {				    	  int x = sum [ j ] - sum [ i - 1 ] ;			  
							      		Q . poll ( ) ;					    	  if ( Q . length < k ) {				  
							      		Q . add ( x ) ;					    	    System . arraycopy ( Q , 0 , Q , 0 , Q . length ) ;	  
							      	      }							    	  }							  
							      	    }							    	  else {						  
							      	  }							    	    if ( Q [ 0 ] < x ) {				  
							      	}							    	      System . arraycopy ( Q , 0 , Q , 0 , Q . length ) ; 
							      	return Q . poll ( ) ;					    	      System . arraycopy ( Q , 0 , Q , 0 , Q . length ) ; 
							      }								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return Q [ 0 ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL	      FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL		    FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL		  FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL
--							      --							    --								  --
def countOps ( A , B , m , n ) :			      static int countOps ( int A [ ] [ ] , int B [ ] [ ] , int m , static int countOps ( int [ ] [ ] A , int [ ] [ ] B , int m , script_not_found : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( m ) :				      	i < n ;							      i < n ;							  
	    A [ i ] [ j ] -= B [ i ] [ j ]		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
    for i in range ( 1 , n ) :				      	j < m ;							    	for ( int j = 0 ;					  
	for j in range ( 1 , n ) :			      	j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;			    	j < m ;							  
	    if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j  	for ( int i = 1 ;					    	j ++ ) {						  
		return - 1				      	i < n ;							    	  A [ i ] [ j ] -= B [ i ] [ j ] ;			  
    result = 0						      	i ++ ) for ( int j = 1 ;				    	}							  
    for i in range ( n ) :				      	j < m ;							      }								  
	result += abs ( A [ i ] [ 0 ] )			      	j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] +   for ( int i = 1 ;						  
    for j in range ( m ) :				      	int result = 0 ;					      i < n ;							  
	result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] )	      	for ( int i = 0 ;					      i ++ ) {							  
    return ( result )					      	i < n ;							    	for ( int j = 1 ;					  
							      	i ++ ) result += Math . abs ( A [ i ] [ 0 ] ) ;		    	j < n ;							  
							      	for ( int j = 0 ;					    	j ++ ) {						  
							      	j < m ;							    	  if ( ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] +  
							      	j ++ ) result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] 	    return - 1 ;					  
							      	return ( result ) ;					    	  }							  
							      }								    	}							  
							      								      }								  
							      								      int result = 0 ;						  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	result += Math . abs ( A [ i ] [ 0 ] ) ;		  
							      								      }								  
							      								      for ( int j = 0 ;						  
							      								      j < m ;							  
							      								      j ++ ) {							  
							      								    	result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;  
							      								      }								  
							      								      return ( result ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			      PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			    PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			  PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN
--							      --							    --								  --
def printPath ( str ) :					      static void printPath ( String str ) {			    static int printPath ( String str ) {			  script_not_found : None
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    curX = 0						      	int curX = 0 , curY = 0 ;				      int curX = 0 ;						  
    curY = 0						      	while ( i < str . length ( ) ) {			      int curY = 0 ;						  
    while ( i < len ( str ) ) :				      	  int nextX = ( str . charAt ( i ) - 'A' ) / 5 ;	      while ( ( i < str . length ( ) ) ) {			  
	nextX = int ( ( ord ( str [ i ] ) - ord ( 'A' ) ) / 5 	  int nextY = ( str . charAt ( i ) - 'B' + 1 ) % 5 ;	    	int nextX = ( int ) ( ( ( int ) str . charAt ( i ) - 'A'  
	nextY = ( ord ( str [ i ] ) - ord ( 'B' ) + 1 ) % 5   	  while ( curX > nextX ) {				    	int nextY = ( ( ( int ) str . charAt ( i ) - 'B' ) + 1 )  
	while ( curX > nextX ) :			      	    System . out . println ( "Move Up" ) ;		    	while ( ( curX > nextX ) ) {				  
	    print ( "Move Up" )				      	    curX -- ;						    	  System . out . println ( "Move Up" ) ;		  
	    curX -= 1					      	  }							    	  curX -- ;						  
	while ( curY > nextY ) :			      	  while ( curY > nextY ) {				    	}							  
	    print ( "Move Left" )			      	    System . out . println ( "Move Left" ) ;		    	while ( ( curY > nextY ) ) {				  
	    curY -= 1					      	    curY -- ;						    	  System . out . println ( "Move Left" ) ;		  
	while ( curX < nextX ) :			      	  }							    	  curY -- ;						  
	    print ( "Move Down" )			      	  while ( curX < nextX ) {				    	}							  
	    curX += 1					      	    System . out . println ( "Move Down" ) ;		    	while ( ( curX < nextX ) ) {				  
	while ( curY < nextY ) :			      	    curX ++ ;						    	  System . out . println ( "Move Down" ) ;		  
	    print ( "Move Right" )			      	  }							    	  curX ++ ;						  
	    curY += 1					      	  while ( curY < nextY ) {				    	}							  
	print ( "Press OK" )				      	    System . out . println ( "Move Right" ) ;		    	while ( ( curY < nextY ) ) {				  
	i += 1						      	    curY ++ ;						    	  System . out . println ( "Move Right" ) ;		  
							      	  }							    	  curY ++ ;						  
							      	  System . out . println ( "Press OK" ) ;		    	}							  
							      	  i ++ ;						    	System . out . println ( "Press OK" ) ;			  
							      	}							    	i ++ ;							  
							      }								      }								  
							      								      return i ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_PATH_2D_MATRIX				      CHECK_POSSIBLE_PATH_2D_MATRIX				    CHECK_POSSIBLE_PATH_2D_MATRIX				  CHECK_POSSIBLE_PATH_2D_MATRIX
--							      --							    --								  --
def isPath ( arr ) :					      static boolean isPath ( int arr [ ] [ ] ) {		    public static boolean isPath ( int [ ] [ ] arr ) {		  script_not_found : None
    arr [ 0 ] [ 0 ] = 1					      	arr [ 0 ] [ 0 ] = 1 ;					      arr [ 0 ] [ 0 ] = 1 ;					  
    for i in range ( 1 , row ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if ( arr [ i ] [ 0 ] != - 1 ) :			      	i < 5 ;							      i < row ;							  
	    arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ]	      	i ++ ) if ( arr [ 0 ] [ i ] != - 1 ) arr [ 0 ] [ i ] = arr    i ++ ) {							  
    for j in range ( 1 , col ) :			      	for ( int j = 1 ;					    	if ( ( arr [ i ] [ 0 ] != - 1 ) ) {			  
	if ( arr [ 0 ] [ j ] != - 1 ) :			      	j < 5 ;							    	  arr [ i ] [ 0 ] = arr [ i - 1 ] [ 0 ] ;		  
	    arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ]	      	j ++ ) if ( arr [ j ] [ 0 ] != - 1 ) arr [ j ] [ 0 ] = arr  	}							  
    for i in range ( 1 , row ) :			      	for ( int i = 1 ;					      }								  
	for j in range ( 1 , col ) :			      	i < 5 ;							      for ( int j = 1 ;						  
	    if ( arr [ i ] [ j ] != - 1 ) :		      	i ++ ) for ( int j = 1 ;				      j < col ;							  
		arr [ i ] [ j ] = max ( arr [ i ] [ j - 1 ] , 	j < 5 ;							      j ++ ) {							  
    return ( arr [ row - 1 ] [ col - 1 ] == 1 )		      	j ++ ) if ( arr [ i ] [ j ] != - 1 ) arr [ i ] [ j ] = Math 	if ( ( arr [ 0 ] [ j ] != - 1 ) ) {			  
							      	return ( arr [ 5 - 1 ] [ 5 - 1 ] == 1 ) ;		    	  arr [ 0 ] [ j ] = arr [ 0 ] [ j - 1 ] ;		  
							      }								    	}							  
							      								      }								  
							      								      for ( int i = 1 ;						  
							      								      i < row ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j < col ;						  
							      								    	j ++ ) {						  
							      								    	  if ( ( arr [ i ] [ j ] != - 1 ) ) {			  
							      								    	    arr [ i ] [ j ] = Math . max ( arr [ i ] [ j - 1 ] ,  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( arr [ row - 1 ] [ col - 1 ] == 1 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	      MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	    MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	  MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K
--							      --							    --								  --
def solve ( X , Y , l , r , k , dp ) :			      static int solve ( char X [ ] , char Y [ ] , int l , int r ,  public static int solve ( String X , String Y , int l , int r script_not_found : None
    if k == 0 :						      	if ( k == 0 ) {						      if ( k == 0 ) return 0 ;					  
	return 0					      	  return 0 ;						      if ( l < 0 || r < 0 ) return 1000000000 ;			  
    if l < 0 or r < 0 :					      	}							      if ( dp [ l ] [ r ] [ k ] != - 1 ) return dp [ l ] [ r ] [  
	return 1000000000				      	if ( l < 0 | r < 0 ) {					      int cost = ( ( ( int ) X . charAt ( l ) - ( int ) 'a' ) ^ ( 
    if dp [ l ] [ r ] [ k ] != - 1 :			      	  return ( int ) 1e9 ;					      dp [ l ] [ r ] [ k ] = Math . min ( Math . min ( cost + sol 
	return dp [ l ] [ r ] [ k ]			      	}							      return dp [ l ] [ r ] [ k ] ;				  
    cost = ( ( ord ( X [ l ] ) - ord ( 'a' ) ) ^ ( ord ( Y [  	if ( dp [ l ] [ r ] [ k ] != - 1 ) {			    }								  
    dp [ l ] [ r ] [ k ] = min ( [ cost + solve ( X , Y , l - 	  return dp [ l ] [ r ] [ k ] ;				    								  
    return dp [ l ] [ r ] [ k ]				      	}							    								  
							      	int cost = ( X [ l ] - 'a' ) ^ ( Y [ r ] - 'a' ) ;	    								  
							      	return dp [ l ] [ r ] [ k ] = Math . min ( Math . min ( cos 								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1		      DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1			    DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1			  DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1
--							      --							    --								  --
def editDistDP ( str1 , str2 , m , n ) :		      static int editDistDP ( String str1 , String str2 , int m , i public static int editDistDP ( String str1 , String str2 , in script_not_found : None
    dp = [ [ 0 for x in range ( n + 1 ) ] for x in range ( m  	int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ;		  
    for i in range ( m + 1 ) :				      	for ( int i = 0 ;					      for ( int x = 0 ;						  
	for j in range ( n + 1 ) :			      	i <= m ;						      x < m + 1 ;						  
	    if i == 0 :					      	i ++ ) {						      x ++ ) {							  
		dp [ i ] [ j ] = j			      	  for ( int j = 0 ;					    	dp [ x ] [ x ] = 0 ;					  
	    elif j == 0 :				      	  j <= n ;						      }								  
		dp [ i ] [ j ] = i			      	  j ++ ) {						      for ( int i = 0 ;						  
	    elif str1 [ i - 1 ] == str2 [ j - 1 ] :	      	    if ( i == 0 ) dp [ i ] [ j ] = j ;			      i < m + 1 ;						  
		dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]	      	    else if ( j == 0 ) dp [ i ] [ j ] = i ;		      i ++ ) {							  
	    else :					      	    else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j  	for ( int j = 0 ;					  
		dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] 	    else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp 	j < n + 1 ;						  
    return dp [ m ] [ n ]				      	  }							    	j ++ ) {						  
							      	}							    	  if ( i == 0 ) {					  
							      	return dp [ m ] [ n ] ;					    	    dp [ i ] [ j ] = j ;				  
							      }								    	  }							  
							      								    	  else if ( j == 0 ) {					  
							      								    	    dp [ i ] [ j ] = i ;				  
							      								    	  }							  
							      								    	  else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j  
							      								    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = 1 + Math . min ( dp [ i ] [ j - 1 ]  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBARRAY_SUM_DIVISIBLE_K			      LONGEST_SUBARRAY_SUM_DIVISIBLE_K				    LONGEST_SUBARRAY_SUM_DIVISIBLE_K				  LONGEST_SUBARRAY_SUM_DIVISIBLE_K
--							      --							    --								  --
def longSubarrWthSumDivByK ( arr , n , k ) :		      static int longSubarrWthSumDivByK ( int arr [ ] , int n , int public static int longSubarrWthSumDivByK ( int [ ] arr , int  error : Exception in thread "main" java.lang.NullP
    um = { i : 0 for i in range ( 8 ) }			      	HashMap < Integer , Integer > um = new HashMap < Integer ,    HashMap < Integer , Integer > um = new HashMap < > ( ) ;	  ointerException 	at LONGEST_SUBARRAY_SUM_DIVISIBLE
    mod_arr = [ 0 for i in range ( n ) ]		      	int mod_arr [ ] = new int [ n ] ;			      for ( int i = 0 ;						  _K.f_filled(LONGEST_SUBARRAY_SUM_DIVISIBLE_K.java:
    max = 0						      	int max = 0 ;						      i < 8 ;							  66) 	at LONGEST_SUBARRAY_SUM_DIVISIBLE_K.main(LONG
    curr_sum = 0					      	int curr_sum = 0 ;					      i ++ ) {							  EST_SUBARRAY_SUM_DIVISIBLE_K.java:112)
    for i in range ( n ) :				      	for ( int i = 0 ;					    	um . put ( i , 0 ) ;					  
	curr_sum += arr [ i ]				      	i < n ;							      }								  
	mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k	      	i ++ ) {						      int [ ] modArr = new int [ n ] ;				  
    for i in range ( n ) :				      	  curr_sum += arr [ i ] ;				      for ( int i = 0 ;						  
	if ( mod_arr [ i ] == 0 ) :			      	  mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k ;	      i < n ;							  
	    max = i + 1					      	}							      i ++ ) {							  
	elif ( mod_arr [ i ] in um ) :			      	for ( int i = 0 ;					    	modArr [ i ] = 0 ;					  
	    um [ mod_arr [ i ] ] = i			      	i < n ;							      }								  
	else :						      	i ++ ) {						      int max = 0 ;						  
	    if ( max < ( i - um [ mod_arr [ i ] ] ) ) :	      	  if ( mod_arr [ i ] == 0 ) max = i + 1 ;		      int currSum = 0 ;						  
		max = i - um [ mod_arr [ i ] ]		      	  else if ( um . containsKey ( mod_arr [ i ] ) == false ) u   for ( int i = 0 ;						  
    return max						      	  else if ( max < ( i - um . get ( mod_arr [ i ] ) ) ) max    i < n ;							  
							      	}							      i ++ ) {							  
							      	return max ;						    	currSum += arr [ i ] ;					  
							      }								    	modArr [ i ] = ( ( currSum % k ) + k ) % k ;		  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( modArr [ i ] == 0 ) ) {				  
							      								    	  max = i + 1 ;						  
							      								    	}							  
							      								    	else if ( ( modArr [ i ] == 0 ) ) {			  
							      								    	  um . put ( modArr [ i ] , i ) ;			  
							      								    	}							  
							      								    	else {							  
							      								    	  if ( ( max < ( i - um . get ( modArr [ i ] ) ) ) ) {	  
							      								    	    max = i - um . get ( modArr [ i ] ) ;		  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1
--							      --							    --								  --
def findLength ( string ) :				      static int findLength ( String str ) {			    static int findLength ( String string ) {			  error : LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SE
    n = len ( string )					      	int n = str . length ( ) ;				      int n = string . length ( ) ;				  COND_HALF_1.java:52: error: cannot find symbol
    maxlen = 0						      	int maxlen = 0 ;					      int maxlen = 0 ;						   Sum [ i ] [ i ] = Integer . parseInt ( string . s
    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] 	int sum [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] Sum = new int [ n ] [ n ] ;			  ubstring ( i , i + length ) ) ;
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int x = 0 ;						  
	Sum [ i ] [ i ] = int ( string [ i ] )		      	i < n ;							      x < n ;							      ^	  symbol:   variable length   location: clas
    for length in range ( 2 , n + 1 ) :			      	i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ;	      x ++ ) {							  s LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_H
	for i in range ( 0 , n - length + 1 ) :		      	for ( int len = 2 ;					    	for ( int y = 0 ;					  ALF_1 1 error
	    j = i + length - 1				      	len <= n ;						    	y < n ;							  
	    k = length // 2				      	len ++ ) {						    	y ++ ) {						  
	    Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j 	  for ( int i = 0 ;					    	  Sum [ x ] [ y ] = 0 ;					  
	    if ( length % 2 == 0 and Sum [ i ] [ j - k ] == S 	  i < n - len + 1 ;					    	}							  
		maxlen = length				      	  i ++ ) {						      }								  
    return maxlen					      	    int j = i + len - 1 ;				      for ( int i = 0 ;						  
							      	    int k = len / 2 ;					      i <= n ;							  
							      	    sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1   i ++ ) {							  
							      	    if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - 	Sum [ i ] [ i ] = Integer . parseInt ( string . substring 
							      	  }							      }								  
							      	}							      for ( int length = 2 ;					  
							      	return maxlen ;						      length <= n ;						  
							      }								      length ++ ) {						  
							      								    	for ( int i = 0 ;					  
							      								    	i <= n - length ;					  
							      								    	i ++ ) {						  
							      								    	  int j = i + length - 1 ;				  
							      								    	  int k = length / 2 ;					  
							      								    	  Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 
							      								    	  if ( ( length % 2 == 0 ) && Sum [ i ] [ j - k ] == Sum  
							      								    	    maxlen = length ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return maxlen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3		      COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3		    COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3		  COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3
--							      --							    --								  --
def findgroups ( arr , n ) :				      int findgroups ( int arr [ ] , int n ) {			    public static int findGroups ( int [ ] arr , int n ) {	  script_not_found : None
    c = [ 0 , 0 , 0 ]					      	int c [ ] = new int [ ] {				      int [ ] c = {						  
    res = 0						      	  0 , 0 , 0 }						    	0 , 0 , 0 }						  
    for i in range ( 0 , n ) :				      	  ;							    	;							  
	c [ arr [ i ] % 3 ] += 1			      	  int i ;						    	int res = 0 ;						  
    res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 )	      	  int res = 0 ;						    	for ( int i = 0 ;					  
    res += c [ 1 ] * c [ 2 ]				      	  for ( i = 0 ;						    	i <= n ;						  
    res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) /  	  i < n ;						    	i ++ ) {						  
    res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) /  	  i ++ ) c [ arr [ i ] % 3 ] ++ ;			    	  c [ arr [ i ] % 3 ] ++ ;				  
    res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) )  	  res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ) ;	    	}							  
    res += c [ 0 ] * c [ 1 ] * c [ 2 ]			      	  res += c [ 1 ] * c [ 2 ] ;				    	res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ) ;		  
    return res						      	  res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) /  	res += c [ 1 ] * c [ 2 ] ;				  
							      	  res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) /  	res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) /  
							      	  res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) )  	res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) /  
							      	  res += c [ 0 ] * c [ 1 ] * c [ 2 ] ;			    	res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) )  
							      	  return res ;						    	res += c [ 0 ] * c [ 1 ] * c [ 2 ] ;			  
							      	}							    	return res ;						  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1		      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1
--							      --							    --								  --
def isSubsetSum ( set , n , sum ) :			      static boolean isSubsetSum ( int set [ ] , int n , int sum )  public static boolean isSubsetSum ( int [ ] set , int n , int script_not_found : None
    subset = ( [ [ False for i in range ( sum + 1 ) ] for i i 	boolean subset [ ] [ ] = new boolean [ sum + 1 ] [ n + 1 ]    boolean [ ] [ ] subset = ( boolean [ ] [ ] ) ( new boolean  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	subset [ i ] [ 0 ] = True			      	i <= n ;						      i < n + 1 ;						  
	for i in range ( 1 , sum + 1 ) :		      	i ++ ) subset [ 0 ] [ i ] = true ;			      i ++ ) {							  
	    subset [ 0 ] [ i ] = False			      	for ( int i = 1 ;					    	subset [ i ] [ 0 ] = true ;				  
	for i in range ( 1 , n + 1 ) :			      	i <= sum ;						    	for ( int j = 1 ;					  
	    for j in range ( 1 , sum + 1 ) :		      	i ++ ) subset [ i ] [ 0 ] = false ;			    	j < sum ;						  
		if j < set [ i - 1 ] :			      	for ( int i = 1 ;					    	j ++ ) {						  
		    subset [ i ] [ j ] = subset [ i - 1 ] [ j 	i <= sum ;						    	  subset [ 0 ] [ j ] = false ;				  
		if j >= set [ i - 1 ] :			      	i ++ ) {						    	}							  
		    subset [ i ] [ j ] = ( subset [ i - 1 ] [ 	  for ( int j = 1 ;					    	for ( int i = 1 ;					  
    return subset [ n ] [ sum ]				      	  j <= n ;						    	j < n ;							  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ;	    	  for ( int j = 1 ;					  
							      	    if ( i >= set [ j - 1 ] ) subset [ i ] [ j ] = subset [ 	  j < sum ;						  
							      	  }							    	  j ++ ) {						  
							      	}							    	    if ( j < set [ i - 1 ] ) {				  
							      	return subset [ sum ] [ n ] ;				    	      subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ;	  
							      }								    	    }							  
							      								    	    if ( j >= set [ i - 1 ] ) {				  
							      								    	      subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] || su 
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return subset [ n ] [ sum ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBSET_SUM_PROBLEM_OSUM_SPACE				      SUBSET_SUM_PROBLEM_OSUM_SPACE				    SUBSET_SUM_PROBLEM_OSUM_SPACE				  SUBSET_SUM_PROBLEM_OSUM_SPACE
--							      --							    --								  --
def isSubsetSum ( arr , n , sum ) :			      static boolean isSubsetSum ( int arr [ ] , int n , int sum )  public static boolean isSubsetSum ( int [ ] arr , int n , int script_not_found : None
    subset = [ [ False for j in range ( sum + 1 ) ] for i in  	boolean subset [ ] [ ] = new boolean [ 2 ] [ sum + 1 ] ;      boolean [ ] [ ] subset = new boolean [ sum + 1 ] [ 3 ] ;	  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int j = 0 ;						  
	for j in range ( sum + 1 ) :			      	i <= n ;						      j < sum ;							  
	    if ( j == 0 ) :				      	i ++ ) {						      j ++ ) {							  
		subset [ i % 2 ] [ j ] = True		      	  for ( int j = 0 ;					    	for ( int i = 0 ;					  
	    elif ( i == 0 ) :				      	  j <= sum ;						    	i < 3 ;							  
		subset [ i % 2 ] [ j ] = False		      	  j ++ ) {						    	i ++ ) {						  
	    elif ( arr [ i - 1 ] <= j ) :		      	    if ( j == 0 ) subset [ i % 2 ] [ j ] = true ;	    	  if ( ( j == 0 ) ) {					  
		subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 	    else if ( i == 0 ) subset [ i % 2 ] [ j ] = false ;	    	    subset [ i % 2 ] [ j ] = true ;			  
	    else :					      	    else if ( arr [ i - 1 ] <= j ) subset [ i % 2 ] [ j ] = 	  }							  
		subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 	    else subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ]  	  else if ( ( i == 0 ) ) {				  
    return subset [ n % 2 ] [ sum ]			      	  }							    	    subset [ i % 2 ] [ j ] = false ;			  
							      	}							    	  }							  
							      	return subset [ n % 2 ] [ sum ] ;			    	  else if ( ( arr [ i - 1 ] <= j ) ) {			  
							      }								    	    subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j 
							      								    	  }							  
							      								    	  else {						  
							      								    	    subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return subset [ n % 2 ] [ sum ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CORRELATION_COEFFICIENT			      PROGRAM_FIND_CORRELATION_COEFFICIENT			    PROGRAM_FIND_CORRELATION_COEFFICIENT			  PROGRAM_FIND_CORRELATION_COEFFICIENT
--							      --							    --								  --
def correlationCoefficient ( X , Y , n ) :		      static float correlationCoefficient ( int X [ ] , int Y [ ] , public static double correlationCoefficient ( double [ ] X ,  script_not_found : None
    sum_X = 0						      	int sum_X = 0 , sum_Y = 0 , sum_XY = 0 ;		      double sumX = 0 ;						  
    sum_Y = 0						      	int squareSum_X = 0 , squareSum_Y = 0 ;			      double sumY = 0 ;						  
    sum_XY = 0						      	for ( int i = 0 ;					      double sumXY = 0 ;					  
    squareSum_X = 0					      	i < n ;							      double squareSum_X = 0 ;					  
    squareSum_Y = 0					      	i ++ ) {						      double squareSum_Y = 0 ;					  
    i = 0						      	  sum_X = sum_X + X [ i ] ;				      int i = 0 ;						  
    while i < n :					      	  sum_Y = sum_Y + Y [ i ] ;				      while ( i < n ) {						  
	sum_X = sum_X + X [ i ]				      	  sum_XY = sum_XY + X [ i ] * Y [ i ] ;			    	sumX = sumX + X [ i ] ;					  
	sum_Y = sum_Y + Y [ i ]				      	  squareSum_X = squareSum_X + X [ i ] * X [ i ] ;	    	sumY = sumY + Y [ i ] ;					  
	sum_XY = sum_XY + X [ i ] * Y [ i ]		      	  squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ] ;	    	sumXY = sumXY + X [ i ] * Y [ i ] ;			  
	squareSum_X = squareSum_X + X [ i ] * X [ i ]	      	}							    	squareSum_X = squareSum_X + X [ i ] * X [ i ] ;		  
	squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ]	      	float corr = ( float ) ( n * sum_XY - sum_X * sum_Y ) / ( f 	squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ] ;		  
	i = i + 1					      	return corr ;						    	i = i + 1 ;						  
    corr = ( float ) ( n * sum_XY - sum_X * sum_Y ) /	      }								      }								  
	( float ) ( math.sqrt ( ( n * squareSum_X - sum_X * s 								      double corr = ( double ) ( n * sumXY - sumX * sumY ) / ( do 
    return corr						      								      return corr ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP
--							      --							    --								  --
def spiralFill ( m , n , a ) :				      static void spiralFill ( int m , int n , int a [ ] [ ] ) {    public static void spiralFill ( int m , int n , int [ ] [ ] a script_not_found : None
    val = 1						      	int val = 1 ;						      int val = 1 ;						  
    k , l = 0 , 0					      	int k = 0 , l = 0 ;					      int k = 0 , l = 0 ;					  
    while ( k < m and l < n ) :				      	while ( k < m && l < n ) {				      while ( ( k < m ) && ( l < n ) ) {			  
	for i in range ( l , n ) :			      	  for ( int i = l ;					    	for ( int i = l ;					  
	    a [ k ] [ i ] = val				      	  i < n ;						    	i < n ;							  
	    val += 1					      	  ++ i ) {						    	i ++ ) {						  
	k += 1						      	    a [ k ] [ i ] = val ++ ;				    	  a [ k ] [ i ] = val ++ ;				  
	for i in range ( k , m ) :			      	  }							    	}							  
	    a [ i ] [ n - 1 ] = val			      	  k ++ ;						    	k ++ ;							  
	    val += 1					      	  for ( int i = k ;					    	for ( int i = k ;					  
	n -= 1						      	  i < m ;						    	i < m ;							  
	if ( k < m ) :					      	  ++ i ) {						    	i ++ ) {						  
	    for i in range ( n - 1 , l - 1 , - 1 ) :	      	    a [ i ] [ n - 1 ] = val ++ ;			    	  a [ i ] [ n - 1 ] = val ++ ;				  
		a [ m - 1 ] [ i ] = val			      	  }							    	}							  
		val += 1				      	  n -- ;						    	n -- ;							  
	    m -= 1					      	  if ( k < m ) {					    	if ( ( k < m ) ) {					  
	if ( l < n ) :					      	    for ( int i = n - 1 ;				    	  for ( int i = n - 1 ;					  
	    for i in range ( m - 1 , k - 1 , - 1 ) :	      	    i >= l ;						    	  i >= l ;						  
		a [ i ] [ l ] = val			      	    -- i ) {						    	  i -- ) {						  
		val += 1				      	      a [ m - 1 ] [ i ] = val ++ ;			    	    a [ m - 1 ] [ i ] = val ++ ;			  
	    l += 1					      	    }							    	  }							  
							      	    m -- ;						    	  m -- ;						  
							      	  }							    	}							  
							      	  if ( l < n ) {					    	if ( ( l < n ) ) {					  
							      	    for ( int i = m - 1 ;				    	  for ( int i = m - 1 ;					  
							      	    i >= k ;						    	  i >= k ;						  
							      	    -- i ) {						    	  i -- ) {						  
							      	      a [ i ] [ l ] = val ++ ;				    	    a [ i ] [ l ] = val ++ ;				  
							      	    }							    	  }							  
							      	    l ++ ;						    	  l ++ ;						  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOSOYAS_TRIANGLE					      HOSOYAS_TRIANGLE						    HOSOYAS_TRIANGLE						  HOSOYAS_TRIANGLE
--							      --							    --								  --
def printHosoya ( n ) :					      static void printHosoya ( int n ) {			    static void printHosoya ( int n ) {				  script_not_found : None
    dp = [ [ 0 for i in range ( N ) ] for i in range ( N ) ]  	int dp [ ] [ ] = new int [ N ] [ N ] ;			      int [ ] [ ] dp = new int [ N ] [ N ] ;			  
    dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1      	dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ;			      for ( int i = 0 ;						  
    for i in range ( 2 , n ) :				      	dp [ 1 ] [ 1 ] = 1 ;					      i < N ;							  
	for j in range ( n ) :				      	for ( int i = 2 ;					      i ++ ) {							  
	    if ( i > j ) :				      	i < n ;							    	dp [ i ] [ 0 ] = dp [ i ] [ 1 ] [ 0 ] = dp [ i ] [ 1 ] [  
		dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [  	i ++ ) {						      }								  
	    else :					      	  for ( int j = 0 ;					      for ( int i = 2 ;						  
		dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + d 	  j < n ;						      i < n ;							  
    for i in range ( n ) :				      	  j ++ ) {						      i ++ ) {							  
	for j in range ( i + 1 ) :			      	    if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ 	for ( int j = 0 ;					  
	    print ( dp [ i ] [ j ] , end = ' ' )	      	    else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 	j < n ;							  
	print ( )					      	  }							    	j ++ ) {						  
							      	}							    	  if ( ( i > j ) ) {					  
							      	for ( int i = 0 ;					    	    dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 2 ]  
							      	i < n ;							    	  }							  
							      	i ++ ) {						    	  else {						  
							      	  for ( int j = 0 ;					    	    dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i -  
							      	  j <= i ;						    	  }							  
							      	  j ++ ) System . out . print ( dp [ i ] [ j ] + " " ) ;    	}							  
							      	  System . out . println ( "" ) ;			      }								  
							      	}							      for ( int i = 0 ;						  
							      }								      i < n ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = i + 1 ;					  
							      								    	j < dp [ i ] [ j ] ;					  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( dp [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION	      MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION	    MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION	  MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION
--							      --							    --								  --
def printMaxSum ( arr , n ) :				      static void printMaxSum ( int arr [ ] , int n ) {		    static void printMaxSum ( int [ ] arr , int n ) {		  script_not_found : None
    dp = [ 0 for i in range ( n ) ]			      	int dp [ ] = new int [ n ] ;				      int [ ] dp = new int [ n ] ;				  
    for i in range ( n ) :				      	Arrays . fill ( dp , 0 ) ;				      for ( int i = 0 ;						  
	dp [ i ] = arr [ i ]				      	for ( int i = 0 ;					      i < n ;							  
	maxi = 0					      	i < n ;							      i ++ ) {							  
	for j in range ( 1 , int ( ( i + 1 ) ** 0.5 ) + 1 ) : 	i ++ ) {						    	dp [ i ] = 0 ;						  
	    if ( ( i + 1 ) % j == 0 and ( i + 1 ) != j ) :    	  dp [ i ] = arr [ i ] ;				      }								  
		if ( dp [ j - 1 ] > maxi ) :		      	  int maxi = 0 ;					      for ( int i = 0 ;						  
		    maxi = dp [ j - 1 ]			      	  for ( int j = 1 ;					      i < n ;							  
		if ( dp [ ( i + 1 ) // j - 1 ] > maxi and j ! 	  j <= Math . sqrt ( i + 1 ) ;				      i ++ ) {							  
		    maxi = dp [ ( i + 1 ) // j - 1 ]	      	  j ++ ) {						    	dp [ i ] = arr [ i ] ;					  
	dp [ i ] += maxi				      	    if ( ( ( i + 1 ) % j == 0 ) && ( i + 1 ) != j ) {	    	int maxi = 0 ;						  
    for i in range ( n ) :				      	      if ( dp [ j - 1 ] > maxi ) maxi = dp [ j - 1 ] ;	    	for ( int j = 1 ;					  
	print ( dp [ i ] , end = ' ' )			      	      if ( dp [ ( i + 1 ) / j - 1 ] > maxi && j != 1 ) maxi 	j <= ( int ) ( ( i + 1 ) * 0.5 ) ;			  
							      	    }							    	j ++ ) {						  
							      	  }							    	  if ( ( ( i + 1 ) % j ) == 0 && ( ( i + 1 ) != j ) ) {	  
							      	  dp [ i ] += maxi ;					    	    if ( ( dp [ j - 1 ] > maxi ) ) {			  
							      	}							    	      maxi = dp [ j - 1 ] ;				  
							      	for ( int i = 0 ;					    	    }							  
							      	i < n ;							    	    if ( ( dp [ ( i + 1 ) / j - 1 ] > maxi ) && j != 1 )  
							      	i ++ ) System . out . print ( dp [ i ] + " " ) ;	    	      maxi = dp [ ( i + 1 ) / j - 1 ] ;			  
							      }								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								    	dp [ i ] += maxi ;					  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( dp [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS
--							      --							    --								  --
def maximumNumberDistinctPrimeRange ( m , n ) :		      static int maximumNumberDistinctPrimeRange ( int m , int n )  public static int maximumNumberDistinctPrimeRange ( int m , i script_not_found : None
    factorCount = [ 0 ] * ( n + 1 )			      	long factorCount [ ] = new long [ n + 1 ] ;		      int [ ] factorCount = new int [ n + 1 ] ;			  
    prime = [ False ] * ( n + 1 )			      	boolean prime [ ] = new boolean [ n + 1 ] ;		      boolean [ ] prime = new boolean [ n + 1 ] ;		  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	factorCount [ i ] = 0				      	i <= n ;						      i < n + 1 ;						  
	prime [ i ] = True				      	i ++ ) {						      i ++ ) {							  
    for i in range ( 2 , n + 1 ) :			      	  factorCount [ i ] = 0 ;				    	factorCount [ i ] = 0 ;					  
	if ( prime [ i ] == True ) :			      	  prime [ i ] = true ;					    	prime [ i ] = true ;					  
	    factorCount [ i ] = 1			      	}							      }								  
	    for j in range ( i * 2 , n + 1 , i ) :	      	for ( int i = 2 ;					      for ( int i = 2 ;						  
		factorCount [ j ] += 1			      	i <= n ;						      i <= n ;							  
		prime [ j ] = False			      	i ++ ) {						      i ++ ) {							  
    max = factorCount [ m ]				      	  if ( prime [ i ] == true ) {				    	if ( ( prime [ i ] ) == true ) {			  
    num = m						      	    factorCount [ i ] = 1 ;				    	  factorCount [ i ] = 1 ;				  
    for i in range ( m , n + 1 ) :			      	    for ( int j = i * 2 ;				    	  for ( int j = i * 2 ;					  
	if ( factorCount [ i ] > max ) :		      	    j <= n ;						    	  j <= n ;						  
	    max = factorCount [ i ]			      	    j += i ) {						    	  j += i ) {						  
	    num = i					      	      factorCount [ j ] ++ ;				    	    factorCount [ j ] ++ ;				  
    return num						      	      prime [ j ] = false ;				    	    prime [ j ] = false ;				  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	int max = ( int ) factorCount [ m ] ;			      int max = factorCount [ m ] ;				  
							      	int num = m ;						      int num = m ;						  
							      	for ( int i = m ;					      for ( int i = m ;						  
							      	i <= n ;						      i <= n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  if ( factorCount [ i ] > max ) {			    	if ( ( factorCount [ i ] ) > max ) {			  
							      	    max = ( int ) factorCount [ i ] ;			    	  max = factorCount [ i ] ;				  
							      	    num = i ;						    	  num = i ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return num ;						      return num ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE    MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE    MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE	  MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE
--							      --							    --								  --
def maxProfit ( price , n ) :				      static int maxProfit ( int price [ ] , int n ) {		    static int maxProfit ( int [ ] price , int n ) {		  success : None
    profit = [ 0 ] * n					      	int profit [ ] = new int [ n ] ;			      int [ ] profit = new int [ n ] ;				  
    max_price = price [ n - 1 ]				      	for ( int i = 0 ;					      int maxPrice = price [ n - 1 ] ;				  
    for i in range ( n - 2 , 0 , - 1 ) :		      	i < n ;							      for ( int i = n - 2 ;					  
	if price [ i ] > max_price :			      	i ++ ) profit [ i ] = 0 ;				      i > 0 ;							  
	    max_price = price [ i ]			      	int max_price = price [ n - 1 ] ;			      i -- ) {							  
	profit [ i ] = max ( profit [ i + 1 ] , max_price - p 	for ( int i = n - 2 ;					    	if ( price [ i ] > maxPrice ) {				  
    min_price = price [ 0 ]				      	i >= 0 ;						    	  maxPrice = price [ i ] ;				  
    for i in range ( 1 , n ) :				      	i -- ) {						    	}							  
	if price [ i ] < min_price :			      	  if ( price [ i ] > max_price ) max_price = price [ i ] ;  	profit [ i ] = Math . max ( profit [ i + 1 ] , maxPrice - 
	    min_price = price [ i ]			      	  profit [ i ] = Math . max ( profit [ i + 1 ] , max_price    }								  
	profit [ i ] = max ( profit [ i - 1 ] , profit [ i ]  	}							      int minPrice = price [ 0 ] ;				  
    result = profit [ n - 1 ]				      	int min_price = price [ 0 ] ;				      for ( int i = 1 ;						  
    return result					      	for ( int i = 1 ;					      i < n ;							  
							      	i < n ;							      i ++ ) {							  
							      	i ++ ) {						    	if ( price [ i ] < minPrice ) {				  
							      	  if ( price [ i ] < min_price ) min_price = price [ i ] ;  	  minPrice = price [ i ] ;				  
							      	  profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i 	}							  
							      	}							    	profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i 
							      	int result = profit [ n - 1 ] ;				      }								  
							      	return result ;						      int result = profit [ n - 1 ] ;				  
							      }								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT		      CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT			    CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT			  CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT
--							      --							    --								  --
def isMagicSquare ( mat ) :				      static boolean isMagicSquare ( int mat [ ] [ ] ) {	    public static boolean isMagicSquare ( int [ ] [ ] mat ) {	  script_not_found : None
    s = 0						      	int sum = 0 , sum2 = 0 ;				      int s = 0 ;						  
    for i in range ( 0 , N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	s = s + mat [ i ] [ i ]				      	i < N ;							      i <= N ;							  
    s2 = 0						      	i ++ ) sum = sum + mat [ i ] [ i ] ;			      i ++ ) {							  
    for i in range ( 0 , N ) :				      	for ( int i = 0 ;					    	s = s + mat [ i ] [ i ] ;				  
	s2 = s2 + mat [ i ] [ N - i - 1 ]		      	i < N ;							      }								  
    if ( s != s2 ) :					      	i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;		      int s2 = 0 ;						  
	return False					      	if ( sum != sum2 ) return false ;			      for ( int i = 0 ;						  
    for i in range ( 0 , N ) :				      	for ( int i = 0 ;					      i <= N ;							  
	rowSum = 0					      	i < N ;							      i ++ ) {							  
	for j in range ( 0 , N ) :			      	i ++ ) {						    	s2 = s2 + mat [ i ] [ N - i - 1 ] ;			  
	    rowSum += mat [ i ] [ j ]			      	  int rowSum = 0 ;					      }								  
	if ( rowSum != s ) :				      	  for ( int j = 0 ;					      if ( ( s != s2 ) ) {					  
	    return False				      	  j < N ;						    	return false ;						  
    for i in range ( 0 , N ) :				      	  j ++ ) rowSum += mat [ i ] [ j ] ;			      }								  
	colSum = 0					      	  if ( rowSum != sum ) return false ;			      for ( int i = 0 ;						  
	for j in range ( 0 , N ) :			      	}							      i <= N ;							  
	    colSum += mat [ j ] [ i ]			      	for ( int i = 0 ;					      i ++ ) {							  
	if ( s != colSum ) :				      	i < N ;							    	int rowSum = 0 ;					  
	    return False				      	i ++ ) {						    	for ( int j = 0 ;					  
    return True						      	  int colSum = 0 ;					    	j <= N ;						  
							      	  for ( int j = 0 ;					    	j ++ ) {						  
							      	  j < N ;						    	  rowSum += mat [ i ] [ j ] ;				  
							      	  j ++ ) colSum += mat [ j ] [ i ] ;			    	}							  
							      	  if ( sum != colSum ) return false ;			    	if ( ( rowSum != s ) ) {				  
							      	}							    	  return false ;					  
							      	return true ;						    	}							  
							      }								      }								  
							      								      for ( int i = 0 ;						  
							      								      i <= N ;							  
							      								      i ++ ) {							  
							      								    	int colSum = 0 ;					  
							      								    	for ( int j = 0 ;					  
							      								    	j <= N ;						  
							      								    	j ++ ) {						  
							      								    	  colSum += mat [ j ] [ i ] ;				  
							      								    	}							  
							      								    	if ( ( s != colSum ) ) {				  
							      								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS	      FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS		    FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS		  FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS
--							      --							    --								  --
def pairSum ( mat , n , sum ) :				      static void pairSum ( int mat [ ] [ ] , int n , int sum ) {   public static void pairSum ( int [ ] [ ] mat , int n , int su script_not_found : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	mat [ i ].sort ( )				      	i < n ;							      i < n ;							  
    for i in range ( n - 1 ) :				      	i ++ ) Arrays . sort ( mat [ i ] ) ;			      i ++ ) {							  
	for j in range ( i + 1 , n ) :			      	for ( int i = 0 ;					    	Arrays . sort ( mat [ i ] ) ;				  
	    left = 0					      	i < n - 1 ;						      }								  
	    right = n - 1				      	i ++ ) {						      for ( int i = 0 ;						  
	    while ( left < n and right >= 0 ) :		      	  for ( int j = i + 1 ;					      i < n - 1 ;						  
		if ( ( mat [ i ] [ left ] + mat [ j ] [ right 	  j < n ;						      i ++ ) {							  
		    print ( "(" , mat [ i ] [ left ] , ", " , 	  j ++ ) {						    	for ( int j = i + 1 ;					  
		    left += 1				      	    int left = 0 , right = n - 1 ;			    	j < n ;							  
		    right -= 1				      	    while ( left < n && right >= 0 ) {			    	j ++ ) {						  
		else :					      	      if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) ==  	  int left = 0 ;					  
		    if ( ( mat [ i ] [ left ] + mat [ j ] [ r 		System . out . print ( "(" + mat [ i ] [ left ] + " 	  int right = n - 1 ;					  
			left += 1			      		left ++ ;					    	  while ( ( left < n ) && ( right >= 0 ) ) {		  
		    else :				      		right -- ;					    	    if ( ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) ) 
			right -= 1			      	      }							    	      System . out . print ( "(" + mat [ i ] [ left ] + " 
							      	      else {						    	      left ++ ;						  
							      		if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < 	      right -- ;					  
							      		else right -- ;					    	    }							  
							      	      }							    	    else {						  
							      	    }							    	      if ( ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) 
							      	  }							    		left ++ ;					  
							      	}							    	      }							  
							      }								    	      else {						  
							      								    		right -- ;					  
							      								    	      }							  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1		      FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1		    FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1		  FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1
--							      --							    --								  --
def count ( a , b ) :					      static int count ( String a , String b ) {		    public static int count ( String a , String b ) {		  success : None
    m = len ( a )					      	int m = a . length ( ) ;				      int m = a . length ( ) ;					  
    n = len ( b )					      	int n = b . length ( ) ;				      int n = b . length ( ) ;					  
    lookup = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]   	int lookup [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;	      int [ ] [ ] lookup = new int [ m + 1 ] [ n + 1 ] ;	  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	lookup [ 0 ] [ i ] = 0				      	i <= n ;						      i < n + 1 ;						  
    for i in range ( m + 1 ) :				      	++ i ) lookup [ 0 ] [ i ] = 0 ;				      i ++ ) lookup [ 0 ] [ i ] = 0 ;				  
	lookup [ i ] [ 0 ] = 1				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for i in range ( 1 , m + 1 ) :			      	i <= m ;						      i < m + 1 ;						  
	for j in range ( 1 , n + 1 ) :			      	++ i ) lookup [ i ] [ 0 ] = 1 ;				      i ++ ) lookup [ i ] [ 0 ] = 1 ;				  
	    if a [ i - 1 ] == b [ j - 1 ] :		      	for ( int i = 1 ;					      for ( int i = 1 ;						  
		lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 	i <= m ;						      i <= m ;							  
	    else :					      	i ++ ) {						      i ++ ) {							  
		lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ]   	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    return lookup [ m ] [ n ]				      	  j <= n ;						    	j <= n ;						  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) loo 	  if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) loo 
							      	    else lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] ;	    	  else lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] ;	  
							      	  }							    	}							  
							      	}							      }								  
							      	return lookup [ m ] [ n ] ;				      return lookup [ m ] [ n ] ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HIGHWAY_BILLBOARD_PROBLEM				      HIGHWAY_BILLBOARD_PROBLEM					    HIGHWAY_BILLBOARD_PROBLEM					  HIGHWAY_BILLBOARD_PROBLEM
--							      --							    --								  --
def maxRevenue ( m , x , revenue , n , t ) :		      static int maxRevenue ( int m , int [ ] x , int [ ] revenue , public static int maxRevenue ( int m , int [ ] x , int [ ] re success : None
    maxRev = [ 0 ] * ( m + 1 )				      	int [ ] maxRev = new int [ m + 1 ] ;			      int [ ] maxRev = new int [ m + 1 ] ;			  
    nxtbb = 0						      	for ( int i = 0 ;					      int nxtbb = 0 ;						  
    for i in range ( 1 , m + 1 ) :			      	i < m + 1 ;						      for ( int i = 1 ;						  
	if ( nxtbb < n ) :				      	i ++ ) maxRev [ i ] = 0 ;				      i <= m ;							  
	    if ( x [ nxtbb ] != i ) :			      	int nxtbb = 0 ;						      i ++ ) {							  
		maxRev [ i ] = maxRev [ i - 1 ]		      	for ( int i = 1 ;					    	if ( ( nxtbb < n ) ) {					  
	    else :					      	i <= m ;						    	  if ( ( x [ nxtbb ] != i ) ) {				  
		if ( i <= t ) :				      	i ++ ) {						    	    maxRev [ i ] = maxRev [ i - 1 ] ;			  
		    maxRev [ i ] = max ( maxRev [ i - 1 ] , r 	  if ( nxtbb < n ) {					    	  }							  
		else :					      	    if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] 	  else {						  
		    maxRev [ i ] = max ( maxRev [ i - t - 1 ] 	    else {						    	    if ( ( i <= t ) ) {					  
		nxtbb += 1				      	      if ( i <= t ) maxRev [ i ] = Math . max ( maxRev [ i  	      maxRev [ i ] = Math . max ( maxRev [ i - 1 ] , reve 
	else :						      	      else maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] 	    }							  
	    maxRev [ i ] = maxRev [ i - 1 ]		      	      nxtbb ++ ;					    	    else {						  
    return maxRev [ m ]					      	    }							    	      maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] +  
							      	  }							    	    }							  
							      	  else maxRev [ i ] = maxRev [ i - 1 ] ;		    	    nxtbb ++ ;						  
							      	}							    	  }							  
							      	return maxRev [ m ] ;					    	}							  
							      }								    	else {							  
							      								    	  maxRev [ i ] = maxRev [ i - 1 ] ;			  
							      								    	}							  
							      								      }								  
							      								      return maxRev [ m ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES	      MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES	    MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES	  MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES
--							      --							    --								  --
def maximumDifferenceSum ( arr , N ) :			      static int maximumDifferenceSum ( int arr [ ] , int N ) {	    public static int maximumDifferenceSum ( int [ ] arr , int N  script_not_found : None
    dp = [ [ 0 , 0 ] for i in range ( N ) ]		      	int dp [ ] [ ] = new int [ N ] [ 2 ] ;			      int [ ] [ ] dp = new int [ N ] [ N ] ;			  
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0		      	i < N ;							      i < N ;							  
    for i in range ( N - 1 ) :				      	i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;		      i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;		  
	dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ]  	for ( int i = 0 ;					      for ( int i = 0 ;						  
	dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr 	i < ( N - 1 ) ;						      i < N - 1 ;						  
    return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] )    	i ++ ) {						      i ++ ) {							  
							      	  dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i 	dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i 
							      	  dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math . 	dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math . 
							      	}							      }								  
							      	return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ]   return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS			      FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS			    FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS			  FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS
--							      --							    --								  --
def kSmallestPair ( arr1 , n1 , arr2 , n2 , k ) :	      static void kSmallestPair ( int arr1 [ ] , int n1 , int arr2  public static void kSmallestPair ( int [ ] arr1 , int n1 , in script_not_found : None
    if ( k > n1 * n2 ) :				      	if ( k > n1 * n2 ) {					      if ( ( k > n1 * n2 ) ) {					  
	print ( "k pairs don't exist" )			      	  System . out . print ( "k pairs don't exist" ) ;	    	System . out . println ( "k pairs don't exist" ) ;	  
	return						      	  return ;						    	return ;						  
    index2 = [ 0 for i in range ( n1 ) ]		      	}							      }								  
    while ( k > 0 ) :					      	int index2 [ ] = new int [ n1 ] ;			      int [ ] index2 = new int [ n1 ] ;				  
	min_sum = sys.maxsize				      	while ( k > 0 ) {					      for ( int i = 0 ;						  
	min_index = 0					      	  int min_sum = Integer . MAX_VALUE ;			      i < n1 ;							  
	for i1 in range ( 0 , n1 , 1 ) :		      	  int min_index = 0 ;					      i ++ ) {							  
	    if ( index2 [ i1 ] < n2 and arr1 [ i1 ] + arr2 [  	  for ( int i1 = 0 ;					    	index2 [ i ] = 0 ;					  
		min_index = i1				      	  i1 < n1 ;						      }								  
		min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ]  	  i1 ++ ) {						      while ( ( k > 0 ) ) {					  
	print ( "(" , arr1 [ min_index ] , "," , arr2 [ index 	    if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2  	int minSum = Integer . MAX_VALUE ;			  
	index2 [ min_index ] += 1			      	      min_index = i1 ;					    	int minIndex = 0 ;					  
	k -= 1						      	      min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;	    	for ( int i1 = 0 ;					  
							      	    }							    	i1 < n1 ;						  
							      	  }							    	i1 += 1 ) {						  
							      	  System . out . print ( "(" + arr1 [ min_index ] + ", " +  	  if ( ( index2 [ i1 ] < n2 ) && ( arr1 [ i1 ] + arr2 [ i 
							      	  index2 [ min_index ] ++ ;				    	    minIndex = i1 ;					  
							      	  k -- ;						    	    minSum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;	  
							      	}							    	  }							  
							      }								    	}							  
							      								    	System . out . print ( "(" + arr1 [ minIndex ] + "," + ar 
							      								    	index2 [ minIndex ] ++ ;				  
							      								    	k -- ;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU
--							      --							    --								  --
def findSmallest ( m , s ) :				      static void findSmallest ( int m , int s ) {		    static void findSmallest ( int m , int s ) {		  script_not_found : None
    if ( s == 0 ) :					      	if ( s == 0 ) {						      if ( ( s == 0 ) ) {					  
	if ( m == 1 ) :					      	  System . out . print ( m == 1 ? "Smallest number is 0" :  	if ( ( m == 1 ) ) {					  
	    print ( "Smallest number is 0" )		      	  return ;						    	  System . out . println ( "Smallest number is 0" ) ;	  
	else :						      	}							    	}							  
	    print ( "Not possible" )			      	if ( s > 9 * m ) {					    	else {							  
	return						      	  System . out . println ( "Not possible" ) ;		    	  System . out . println ( "Not possible" ) ;		  
    if ( s > 9 * m ) :					      	  return ;						    	}							  
	print ( "Not possible" )			      	}							    	return ;						  
	return						      	int [ ] res = new int [ m ] ;				      }								  
    res = [ 0 for i in range ( m + 1 ) ]		      	s -= 1 ;						      if ( ( s > 9 * m ) ) {					  
    s -= 1						      	for ( int i = m - 1 ;					    	System . out . println ( "Not possible" ) ;		  
    for i in range ( m - 1 , 0 , - 1 ) :		      	i > 0 ;							    	return ;						  
	if ( s > 9 ) :					      	i -- ) {						      }								  
	    res [ i ] = 9				      	  if ( s > 9 ) {					      int [ ] res = new int [ m + 1 ] ;				  
	    s -= 9					      	    res [ i ] = 9 ;					      for ( int i = 0 ;						  
	else :						      	    s -= 9 ;						      i < m ;							  
	    res [ i ] = s				      	  }							      i ++ ) {							  
	    s = 0					      	  else {						    	res [ i ] = 0 ;						  
    res [ 0 ] = s + 1					      	    res [ i ] = s ;					    	s -- ;							  
    print ( "Smallest number is " , end = "" )		      	    s = 0 ;						      }								  
    for i in range ( m ) :				      	  }							      for ( int i = m - 1 ;					  
	print ( res [ i ] , end = "" )			      	}							      i > 0 ;							  
							      	res [ 0 ] = s + 1 ;					      i -- ) {							  
							      	System . out . print ( "Smallest number is " ) ;	    	if ( ( s > 9 ) ) {					  
							      	for ( int i = 0 ;					    	  res [ i ] = 9 ;					  
							      	i < m ;							    	  s -= 9 ;						  
							      	i ++ ) System . out . print ( res [ i ] ) ;		    	}							  
							      }								    	else {							  
							      								    	  res [ i ] = s ;					  
							      								    	  s = 0 ;						  
							      								    	}							  
							      								      }								  
							      								      res [ 0 ] = s + 1 ;					  
							      								      System . out . print ( "Smallest number is " ) ;		  
							      								      for ( int i = 0 ;						  
							      								      i < m ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( res [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER		      CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER		    CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER			  CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER
--							      --							    --								  --
def check ( s1 , s2 ) :					      static boolean check ( String s1 , String s2 ) {		    public static boolean check ( String s1 , String s2 ) {	  error : Exception in thread "main" java.lang.Array
    n = len ( s1 )					      	int n = s1 . length ( ) ;				      int n = s1 . length ( ) ;					  IndexOutOfBoundsException: Index 4 out of bounds f
    m = len ( s2 )					      	int m = s2 . length ( ) ;				      int m = s2 . length ( ) ;					  or length 4 	at CHECK_POSSIBLE_TRANSFORM_ONE_STRIN
    dp = ( [ [ False for i in range ( m + 1 ) ] for i in rang 	boolean dp [ ] [ ] = new boolean [ n + 1 ] [ m + 1 ] ;	      boolean [ ] [ ] dp = ( new boolean [ m + 1 ] [ n + 1 ] ) ;  G_ANOTHER.f_filled(CHECK_POSSIBLE_TRANSFORM_ONE_ST
    dp [ 0 ] [ 0 ] = True				      	for ( int i = 0 ;					      dp [ 0 ] [ 0 ] = true ;					  RING_ANOTHER.java:56) 	at CHECK_POSSIBLE_TRANSFORM
    for i in range ( len ( s1 ) ) :			      	i <= n ;						      for ( int i = 0 ;						  _ONE_STRING_ANOTHER.main(CHECK_POSSIBLE_TRANSFORM_
	for j in range ( len ( s2 ) + 1 ) :		      	i ++ ) {						      i < s1 . length ( ) ;					  ONE_STRING_ANOTHER.java:94)
	    if ( dp [ i ] [ j ] ) :			      	  for ( int j = 0 ;					      i ++ ) {							  
		if ( ( j < len ( s2 ) and ( s1 [ i ].upper (  	  j <= m ;						    	for ( int j = 0 ;					  
		    dp [ i + 1 ] [ j + 1 ] = True	      	  j ++ ) {						    	j < s2 . length ( ) + 1 ;				  
		if ( s1 [ i ].isupper ( ) == False ) :	      	    dp [ i ] [ j ] = false ;				    	j ++ ) {						  
		    dp [ i + 1 ] [ j ] = True		      	  }							    	  if ( ( dp [ i ] [ j ] ) ) {				  
    return ( dp [ n ] [ m ] )				      	}							    	    if ( ( ( j < s2 . length ( ) ) && ( Character . toUpp 
							      	dp [ 0 ] [ 0 ] = true ;					    	      dp [ i + 1 ] [ j + 1 ] = true ;			  
							      	for ( int i = 0 ;					    	    }							  
							      	i < s1 . length ( ) ;					    	    if ( ( Character . isUpperCase ( s1 . charAt ( i ) )  
							      	i ++ ) {						    	      dp [ i + 1 ] [ j ] = true ;			  
							      	  for ( int j = 0 ;					    	    }							  
							      	  j <= s2 . length ( ) ;				    	  }							  
							      	  j ++ ) {						    	}							  
							      	    if ( dp [ i ] [ j ] ) {				      }								  
							      	      if ( j < s2 . length ( ) && ( Character . toUpperCase   return ( dp [ n ] [ m ] ) ;				  
							      	      if ( ! Character . isUpperCase ( s1 . charAt ( i ) )  }								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return ( dp [ n ] [ m ] ) ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN
--							      --							    --								  --
def countWords ( str , l ) :				      static int countWords ( String str , int len ) {		    static int countWords ( String str , int l ) {		  script_not_found : None
    count = 1 ;						      	int count = 1 ;						      int count = 1 ;						  
    if ( l == 1 ) :					      	if ( len == 1 ) return count ;				      if ( ( l == 1 ) ) {					  
	return count					      	if ( str . charAt ( 0 ) == str . charAt ( 1 ) ) count *= 1  	return count ;						  
    if ( str [ 0 ] == str [ 1 ] ) :			      	else count *= 2 ;					      }								  
	count *= 1					      	for ( int j = 1 ;					      if ( ( str . charAt ( 0 ) == str . charAt ( 1 ) ) ) {	  
    else :						      	j < len - 1 ;						    	count *= 1 ;						  
	count *= 2					      	j ++ ) {						      }								  
    for j in range ( 1 , l - 1 ) :			      	  if ( str . charAt ( j ) == str . charAt ( j - 1 ) && str    else {							  
	if ( str [ j ] == str [ j - 1 ] and str [ j ] == str  	  else if ( str . charAt ( j ) == str . charAt ( j - 1 ) || 	count *= 2 ;						  
	    count *= 1					      	  else count *= 3 ;					      }								  
	elif ( str [ j ] == str [ j - 1 ] or str [ j ] == str 	}							      for ( int j = 1 ;						  
	    count *= 2					      	if ( str . charAt ( len - 1 ) == str . charAt ( len - 2 ) )   j < l - 1 ;						  
	else :						      	else count *= 2 ;					      j ++ ) {							  
	    count *= 3					      	return count ;						    	if ( ( str . charAt ( j ) == str . charAt ( j - 1 ) ) &&  
    if ( str [ l - 1 ] == str [ l - 2 ] ) :		      }								    	  count *= 1 ;						  
	count *= 1					      								    	}							  
    else :						      								    	else if ( ( str . charAt ( j ) == str . charAt ( j - 1 )  
	count *= 2					      								    	  count *= 2 ;						  
    return count					      								    	}							  
							      								    	else {							  
							      								    	  count *= 3 ;						  
							      								    	}							  
							      								      }								  
							      								      if ( ( str . charAt ( l - 1 ) == str . charAt ( l - 2 ) ) ) 
							      								    	count *= 1 ;						  
							      								      }								  
							      								      else {							  
							      								    	count *= 2 ;						  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX	      MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX	    MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX		  MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX
--							      --							    --								  --
def maxCost ( mat , N ) :				      public static int maxCost ( int mat [ ] [ ] , int N ) {	    public static int maxCost ( int [ ] [ ] mat , int N ) {	  error : MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_RO
    dp = [ [ 0 for i in range ( N ) ] for j in range ( N ) ]  	int dp [ ] [ ] = new int [ N ] [ N ] ;			      int [ ] [ ] dp = new int [ N ] [ N ] ;			  W_MATRIX.java:54: error: illegal character: '\'
    dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ]			      	dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ;			      for ( int i = 0 ;						  	dp [ i ] [ j ] = mat [ i ] [ j ] + \ "" ;
    for i in range ( 1 , N ) :				      	for ( int i = 1 ;					      i < N ;							  					   ^ 1 error
	dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ] 	i < N ;							      i ++ ) {							  
    for i in range ( 1 , N ) :				      	i ++ ) dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0  	for ( int j = 0 ;					  
	for j in range ( 1 , min ( i + 1 , N ) ) :	      	for ( int i = 1 ;					    	j < N ;							  
	    dp [ i ] [ j ] = mat [ i ] [ j ] + \	      	i < N ;							    	j ++ ) {						  
		max ( dp [ i - 1 ] [ j - 1 ] , dp [ i - 1 ] [ 	i ++ ) for ( int j = 1 ;				    	  dp [ i ] [ j ] = 0 ;					  
    result = 0						      	j < i + 1 && j < N ;					    	}							  
    for i in range ( N ) :				      	j ++ ) dp [ i ] [ j ] = mat [ i ] [ j ] + Math . max ( dp [ 	dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ;			  
	if ( result < dp [ N - 1 ] [ i ] ) :		      	int result = 0 ;					    	for ( int i = 1 ;					  
	    result = dp [ N - 1 ] [ i ]			      	for ( int i = 0 ;					    	i < N ;							  
    return result					      	i < N ;							    	i ++ ) {						  
							      	i ++ ) if ( result < dp [ N - 1 ] [ i ] ) result = dp [ N - 	  dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ] ; 
							      	return result ;						    	}							  
							      }								    	for ( int i = 1 ;					  
							      								    	i < N ;							  
							      								    	i ++ ) {						  
							      								    	  for ( int j = 1 ;					  
							      								    	  j < Math . min ( i + 1 , N ) ;			  
							      								    	  j ++ ) {						  
							      								    	    dp [ i ] [ j ] = mat [ i ] [ j ] + \ "" ;		  
							      								    	    Math . max ( dp [ i - 1 ] [ j - 1 ] , dp [ i - 1 ] [  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      int result = 0 ;						  
							      								      for ( int i = 0 ;						  
							      								      i < N ;							  
							      								      i ++ ) {							  
							      								    	if ( ( result < dp [ N - 1 ] [ i ] ) ) {		  
							      								    	  result = dp [ N - 1 ] [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1		      LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1		    LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1		  LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1
--							      --							    --								  --
def lcsOf3 ( i , j , k ) :				      static int lcsOf3 ( int i , int j , int k ) {		    public static int lcsOf3 ( int i , int j , int k ) {	  script_not_found : None
    if ( i == - 1 or j == - 1 or k == - 1 ) :		      	if ( i == - 1 || j == - 1 || k == - 1 ) {		      if ( ( i == - 1 ) || ( j == - 1 ) || ( k == - 1 ) ) return  
	return 0					      	  return 0 ;						      if ( ( dp [ i ] [ j ] [ k ] != - 1 ) ) return dp [ i ] [ j  
    if ( dp [ i ] [ j ] [ k ] != - 1 ) :		      	}							      if ( ( X [ i ] == Y [ j ] ) && ( Y [ j ] == Z [ k ] ) ) {	  
	return dp [ i ] [ j ] [ k ]			      	if ( dp [ i ] [ j ] [ k ] != - 1 ) {			    	dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k - 1 
    if ( X [ i ] == Y [ j ] and Y [ j ] == Z [ k ] ) :	      	  return dp [ i ] [ j ] [ k ] ;				    	return dp [ i ] [ j ] [ k ] ;				  
	dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1 , k 	}							      }								  
	return dp [ i ] [ j ] [ k ]			      	if ( X . charAt ( i ) == Y . charAt ( j ) && Y . charAt ( j   else {							  
    else :						      	  return dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1  	dp [ i ] [ j ] [ k ] = Math . max ( Math . max ( lcsOf3 ( 
	dp [ i ] [ j ] [ k ] = max ( max ( lcsOf3 ( i - 1 , j 	}							    	return dp [ i ] [ j ] [ k ] ;				  
	return dp [ i ] [ j ] [ k ]			      	else {							      }								  
							      	  return dp [ i ] [ j ] [ k ] = Math . max ( Math . max ( l }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MERGING_INTERVALS					      MERGING_INTERVALS						    MERGING_INTERVALS						  MERGING_INTERVALS
--							      --							    --								  --
def mergeIntervals ( arr ) :				      public static void mergeIntervals ( Interval arr [ ] ) {	    static void mergeIntervals ( int [ ] arr ) {		  script_not_found : None
    arr.sort ( key = lambda x : x [ 0 ] )		      	Arrays . sort ( arr , new Comparator < Interval > ( ) {	      Arrays . sort ( arr , new Comparator < int [ ] > ( ) {	  
    m = [ ]						      	  public int compare ( Interval i1 , Interval i2 ) {	    	public int compare ( int [ ] o1 , int [ ] o2 ) {	  
    s = - 10000						      	    return i2 . start - i1 . start ;			    	  return o1 [ 0 ] - o2 [ 0 ] ;				  
    max = - 100000					      	  }							    	}							  
    for i in range ( len ( arr ) ) :			      	}							      }								  
	a = arr [ i ]					      	) ;							      ) ;							  
	if a [ 0 ] > max :				      	int index = 0 ;						      List < int [ ] > m = new ArrayList < > ( ) ;		  
	    if i != 0 :					      	for ( int i = 1 ;					      int s = - 10000 ;						  
		m.append ( [ s , max ] )		      	i < arr . length ;					      int max = - 100000 ;					  
	    max = a [ 1 ]				      	i ++ ) {						      for ( int i = 0 ;						  
	    s = a [ 0 ]					      	  if ( arr [ index ] . end >= arr [ i ] . start ) {	      i < arr . length ;					  
	else :						      	    arr [ index ] . end = Math . max ( arr [ index ] . end    i ++ ) {							  
	    if a [ 1 ] >= max :				      	    arr [ index ] . start = Math . min ( arr [ index ] . st 	int [ ] a = arr [ i ] ;					  
		max = a [ 1 ]				      	  }							    	if ( a [ 0 ] > max ) {					  
    if max != - 100000 and [ s , max ] not in m :	      	  else {						    	  if ( i != 0 ) {					  
	m.append ( [ s , max ] )			      	    arr [ index ] = arr [ i ] ;				    	    m . add ( new int [ ] {				  
    print ( "The Merged Intervals are :" , end = " " )	      	    index ++ ;						    	      s , max }						  
    for i in range ( len ( m ) ) :			      	  }							    	      ) ;						  
	print ( m [ i ] , end = " " )			      	}							    	    }							  
							      	System . out . print ( "The Merged Intervals are: " ) ;	    	    max = a [ 1 ] ;					  
							      	for ( int i = 0 ;					    	    s = a [ 0 ] ;					  
							      	i <= index ;						    	  }							  
							      	i ++ ) {						    	  else {						  
							      	  System . out . print ( "[" + arr [ i ] . start + "," + ar 	    if ( a [ 1 ] >= max ) {				  
							      	}							    	      max = a [ 1 ] ;					  
							      }								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								    	if ( max != - 100000 && ! m . contains ( new int [ ] {	  
							      								    	  s , max }						  
							      								    	  ) ) {							  
							      								    	    m . add ( new int [ ] {				  
							      								    	      s , max }						  
							      								    	      ) ;						  
							      								    	    }							  
							      								    	    System . out . print ( "The Merged Intervals are :" ) 
							      								    	    for ( int i = 0 ;					  
							      								    	    i < m . size ( ) ;					  
							      								    	    i ++ ) {						  
							      								    	      System . out . print ( m . get ( i ) + " " ) ;	  
							      								    	    }							  
							      								    	  }							  
-							      -								    	  -							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM			      PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM			    PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM				  PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM
--							      --							    --								  --
def spiralPrint ( m , n , a ) :				      static void spiralPrint ( int m , int n , int a [ ] [ ] ) {   public static void spiralPrint ( int m , int n , int [ ] [ ]  script_not_found : None
    k = 0 l = 0						      	int i , k = 0 , l = 0 ;					      int k = 0 ;						  
    while ( k < m and l < n ) :				      	while ( k < m && l < n ) {				      int l = 0 ;						  
	for i in range ( l , n ) :			      	  for ( i = l ;						      while ( ( k < m ) && ( l < n ) ) {			  
	    print ( a [ k ] [ i ] , end = " " )		      	  i < n ;						    	for ( int i = l ;					  
	k += 1						      	  ++ i ) {						    	i < n ;							  
	for i in range ( k , m ) :			      	    System . out . print ( a [ k ] [ i ] + " " ) ;	    	i ++ ) {						  
	    print ( a [ i ] [ n - 1 ] , end = " " )	      	  }							    	  System . out . print ( a [ k ] [ i ] + " " ) ;	  
	n -= 1						      	  k ++ ;						    	}							  
	if ( k < m ) :					      	  for ( i = k ;						    	k ++ ;							  
	    for i in range ( n - 1 , ( l - 1 ) , - 1 ) :      	  i < m ;						    	for ( int i = k ;					  
		print ( a [ m - 1 ] [ i ] , end = " " )	      	  ++ i ) {						    	i < m ;							  
	    m -= 1					      	    System . out . print ( a [ i ] [ n - 1 ] + " " ) ;	    	i ++ ) {						  
	if ( l < n ) :					      	  }							    	  System . out . print ( a [ i ] [ n - 1 ] + " " ) ;	  
	    for i in range ( m - 1 , k - 1 , - 1 ) :	      	  n -- ;						    	}							  
		print ( a [ i ] [ l ] , end = " " )	      	  if ( k < m ) {					    	n -- ;							  
	    l += 1					      	    for ( i = n - 1 ;					    	if ( ( k < m ) ) {					  
							      	    i >= l ;						    	  for ( int i = n - 1 ;					  
							      	    -- i ) {						    	  i >= ( l - 1 ) ;					  
							      	      System . out . print ( a [ m - 1 ] [ i ] + " " ) ;    	  i -- ) {						  
							      	    }							    	    System . out . print ( a [ m - 1 ] [ i ] + " " ) ;	  
							      	    m -- ;						    	  }							  
							      	  }							    	  m -- ;						  
							      	  if ( l < n ) {					    	}							  
							      	    for ( i = m - 1 ;					    	if ( ( l < n ) ) {					  
							      	    i >= k ;						    	  for ( int i = m - 1 ;					  
							      	    -- i ) {						    	  i >= k ;						  
							      	      System . out . print ( a [ i ] [ l ] + " " ) ;	    	  i -- ) {						  
							      	    }							    	    System . out . print ( a [ i ] [ l ] + " " ) ;	  
							      	    l ++ ;						    	  }							  
							      	  }							    	  l ++ ;						  
							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			      MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			    MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY				  MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY
--							      --							    --								  --
def largestSumOfAverages ( A , K ) :			      static double largestSumOfAverages ( int [ ] A , int K ) {    public static int largestSumOfAverages ( int [ ] A , int K )  failure : #Results:9, 10
    n = len ( A )					      	int n = A . length ;					      int n = A . length ;					  
    pre_sum = [ 0 ] * ( n + 1 )				      	double [ ] pre_sum = new double [ n + 1 ] ;		      int [ ] preSum = new int [ n + 1 ] ;			  
    pre_sum [ 0 ] = 0					      	pre_sum [ 0 ] = 0 ;					      preSum [ 0 ] = 0 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ]	      	i < n ;							      i < n ;							  
    dp = [ 0 ] * n					      	i ++ ) pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;	      i ++ ) {							  
    sum = 0						      	double [ ] dp = new double [ n ] ;			    	preSum [ i + 1 ] = preSum [ i ] + A [ i ] ;		  
    for i in range ( n ) :				      	double sum = 0 ;					      }								  
	dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n -  	for ( int i = 0 ;					      int [ ] dp = new int [ n ] ;				  
    for k in range ( K - 1 ) :				      	i < n ;							      int sum = 0 ;						  
	for i in range ( n ) :				      	i ++ ) dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n -   for ( int i = 0 ;						  
	    for j in range ( i + 1 , n ) :		      	for ( int k = 0 ;					      i < n ;							  
		dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - 	k < K - 1 ;						      i ++ ) {							  
    return int ( dp [ 0 ] )				      	k ++ ) for ( int i = 0 ;				    	dp [ i ] = ( preSum [ n ] - preSum [ i ] ) / ( n - i ) ;  
							      	i < n ;							      }								  
							      	i ++ ) for ( int j = i + 1 ;				      for ( int k = 0 ;						  
							      	j < n ;							      k < K - 1 ;						  
							      	j ++ ) dp [ i ] = Math . max ( dp [ i ] , ( pre_sum [ j ] -   k ++ ) {							  
							      	return dp [ 0 ] ;					    	for ( int i = 0 ;					  
							      }								    	i < n ;							  
							      								    	i ++ ) {						  
							      								    	  for ( int j = i + 1 ;					  
							      								    	  j < n ;						  
							      								    	  j ++ ) {						  
							      								    	    dp [ i ] = Math . max ( dp [ i ] , ( preSum [ j ] - p 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( int ) dp [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS     NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	    NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	  NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS
--							      --							    --								  --
def waysToArrange ( N , K , k ) :			      static int waysToArrange ( int N , int K , int [ ] k ) {	    public static int waysToArrange ( int N , int K , int [ ] [ ] script_not_found : None
    C = np.zeros ( ( N + 1 , N + 1 ) )			      	int [ ] [ ] C = new int [ N + 1 ] [ N + 1 ] ;		      int [ ] [ ] C = new int [ N + 1 ] [ N + 1 ] ;		  
    for i in range ( N + 1 ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( i + 1 ) :			      	for ( i = 0 ;						      i < N + 1 ;						  
	    if ( j == 0 or j == i ) :			      	i <= N ;						      i ++ ) {							  
		C [ i ] [ j ] = 1			      	i ++ ) {						    	for ( int j = 0 ;					  
	    else :					      	  for ( j = 0 ;						    	j < i + 1 ;						  
		C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ 	  j <= i ;						    	j ++ ) {						  
    dp = np.zeros ( ( K + 1 ) )				      	  j ++ ) {						    	  if ( ( j == 0 ) || ( j == i ) ) {			  
    count = 0						      	    if ( j == 0 || j == i ) {				    	    C [ i ] [ j ] = 1 ;					  
    dp [ 0 ] = 1					      	      C [ i ] [ j ] = 1 ;				    	  }							  
    for i in range ( K ) :				      	    }							    	  else {						  
	dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] 	    else {						    	    C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] 
	count += k [ i ]				      	      C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] 	  }							  
    return dp [ K ]					      	    }							    	}							  
							      	  }							      }								  
							      	}							      int [ ] dp = new int [ K + 1 ] ;				  
							      	int [ ] dp = new int [ K + 1 ] ;			      int count = 0 ;						  
							      	int count = 0 ;						      dp [ 0 ] = 1 ;						  
							      	dp [ 0 ] = 1 ;						      for ( int i = 0 ;						  
							      	for ( i = 0 ;						      i < K ;							  
							      	i < K ;							      i ++ ) {							  
							      	i ++ ) {						    	dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] [ k 
							      	  dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] [ k 	count += k [ i ] ;					  
							      	  count += k [ i ] ;					      }								  
							      	}							      return dp [ K ] ;						  
							      	return dp [ K ] ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
def NextFit ( blockSize , m , processSize , n ) :	      static void NextFit ( int blockSize [ ] , int m , int process public static void NextFit ( int [ ] blockSize , int m , int  script_not_found : None
    allocation = [ - 1 ] * n				      	int allocation [ ] = new int [ n ] , j = 0 ;		      int [ ] allocation = new int [ n ] ;			  
    j = 0						      	Arrays . fill ( allocation , - 1 ) ;			      Arrays . fill ( allocation , - 1 ) ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      int j = 0 ;						  
	while j < m :					      	i < n ;							      for ( int i = 0 ;						  
	    if blockSize [ j ] >= processSize [ i ] :	      	i ++ ) {						      i < n ;							  
		allocation [ i ] = j			      	  while ( j < m ) {					      i ++ ) {							  
		blockSize [ j ] -= processSize [ i ]	      	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	while ( j < m ) {					  
		break					      	      allocation [ i ] = j ;				    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	    j = ( j + 1 ) % m				      	      blockSize [ j ] -= processSize [ i ] ;		    	    allocation [ i ] = j ;				  
    print ( "Process No.Process Size Block no." )	      	      break ;						    	    blockSize [ j ] -= processSize [ i ] ;		  
    for i in range ( n ) :				      	    }							    	    break ;						  
	print ( i + 1 , "	  " , processSize [ i ] , end 	    j = ( j + 1 ) % m ;					    	  }							  
	if allocation [ i ] != - 1 :			      	  }							    	  j = ( j + 1 ) % m ;					  
	    print ( allocation [ i ] + 1 )		      	}							    	}							  
	else :						      	System . out . print ( "\nProcess No.\tProcess Size\tBlock    }								  
	    print ( "Not Allocated" )			      	for ( int i = 0 ;					      System . out . println ( "Process No. Process Size Block no 
							      	i < n ;							      for ( int i = 0 ;						  
							      	i ++ ) {						      i < n ;							  
							      	  System . out . print ( i + 1 + "\t\t" + processSize [ i ]   i ++ ) {							  
							      	  if ( allocation [ i ] != - 1 ) {			    	System . out . print ( i + 1 + " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁  
							      	    System . out . print ( allocation [ i ] + 1 ) ;	    								  
							      	  }							    								  
							      	  else {						    								  
							      	    System . out . print ( "Not Allocated" ) ;		    								  
							      	  }							    								  
							      	  System . out . println ( "" ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT
--							      --							    --								  --
def maxNumOfChocolates ( arr , n , k ) :		      static int maxNumOfChocolates ( int arr [ ] , int n , int k ) public static int maxNumOfChocolates ( int [ ] arr , int n ,  error : MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUA
    um , curr_rem , maxSum = { } , 0 , 0		      	HashMap < Integer , Integer > um = new HashMap < Integer ,    HashMap < Integer , Integer > um = new HashMap < > ( ) , cu LLY_AMONG_K_STUDENTS.java:37: error: incompatible
    sm = [ 0 ] * n					      	int [ ] sum = new int [ n ] ;				      int [ ] sm = new int [ n ] ;				  types: int cannot be converted to HashMap<Integer,
    sm [ 0 ] = arr [ 0 ]				      	int curr_rem ;						      sm [ 0 ] = arr [ 0 ] ;					  Integer>   HashMap < Integer , Integer > um = new
    for i in range ( 1 , n ) :				      	int maxSum = 0 ;					      for ( int i = 1 ;						  HashMap < > ( ) , currRem , maxSum = 0 ;
	sm [ i ] = sm [ i - 1 ] + arr [ i ]		      	sum [ 0 ] = arr [ 0 ] ;					      i < n ;							  
    for i in range ( n ) :				      	for ( int i = 1 ;					      i ++ ) {							  		     ^ MAXIMUM_NUMBER_CHOCOLATES_DIS
	curr_rem = sm [ i ] % k				      	i < n ;							    	sm [ i ] = sm [ i - 1 ] + arr [ i ] ;			  TRIBUTED_EQUALLY_AMONG_K_STUDENTS.java:48: error:
	if ( not curr_rem and maxSum < sm [ i ] ) :	      	i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ] ;		      }								  incompatible types: int cannot be converted to Has
	    maxSum = sm [ i ]				      	for ( int i = 0 ;					      for ( int i = 0 ;						  hMap<Integer,Integer>	    currRem = sm [ i ] % k ;
	elif ( not curr_rem in um ) :			      	i < n ;							      i < n ;							  			  ^ MAXIMUM_NUMBER_CHOCOLATE
	    um [ curr_rem ] = i				      	i ++ ) {						      i ++ ) {							  S_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS.java:49: er
	elif ( maxSum < ( sm [ i ] - sm [ um [ curr_rem ] ] ) 	  curr_rem = sum [ i ] % k ;				    	currRem = sm [ i ] % k ;				  ror: bad operand types for binary operator '=='
	    maxSum = sm [ i ] - sm [ um [ curr_rem ] ]	      	  if ( curr_rem == 0 ) {				    	if ( ( currRem == 0 ) && ( maxSum < sm [ i ] ) ) {	    if ( ( currRem == 0 ) && ( maxSum < sm [ i ] ) )
    return maxSum // k					      	    if ( maxSum < sum [ i ] ) maxSum = sum [ i ] ;	    	  maxSum = sm [ i ] ;					   {			^   first type:	 HashMap<Int
							      	  }							    	}							  eger,Integer>	  second type: int MAXIMUM_NUMBER_CH
							      	  else if ( ! um . containsKey ( curr_rem ) ) um . put ( cu 	else if ( ( ! currRem ) && ( ! um . containsKey ( currRem OCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS.java
							      	  else if ( maxSum < ( sum [ i ] - sum [ um . get ( curr_re 	  um . put ( currRem , i ) ;				  :49: error: bad operand types for binary operator
							      	}							    	}							  '<'	  if ( ( currRem == 0 ) && ( maxSum < sm [ i
							      	return ( maxSum / k ) ;					    	else if ( ( maxSum < ( sm [ i ] - sm [ um . get ( currRem  ] ) ) {					 ^
							      }								    	  maxSum = sm [ i ] - sm [ um . get ( currRem ) ] ;	   first type:	HashMap<Integer,Integer>   second ty
							      								    	}							  pe: int MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUA
							      								      }								  LLY_AMONG_K_STUDENTS.java:50: error: incompatible
							      								      return maxSum / k ;					  types: int cannot be converted to HashMap<Integer,
							      								    }								  Integer>	 maxSum = sm [ i ] ;
							      								    								     ^ MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY
							      								    								  _AMONG_K_STUDENTS.java:52: error: bad operand type
							      								    								   HashMap<Integer,Integer> for unary operator '!'
							      								    								     else if ( ( ! currRem ) && ( ! um . containsKey
							      								    								   ( currRem ) ) ) {		     ^ MAXIMUM_NUMBE
							      								    								  R_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENTS.
							      								    								  java:53: error: incompatible types: HashMap<Intege
							      								    								  r,Integer> cannot be converted to Integer	  um
							      								    								   . put ( currRem , i ) ;		    ^ MAXIMU
							      								    								  M_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_ST
							      								    								  UDENTS.java:55: error: bad operand types for binar
							      								    								  y operator '<'     else if ( ( maxSum < ( sm [ i ]
							      								    								   - sm [ um . get ( currRem ) ] ) ) ) {
							      								    								  	      ^	  first type:  HashMap<Integer,Integ
							      								    								  er>	second type: int MAXIMUM_NUMBER_CHOCOLATES_D
							      								    								  ISTRIBUTED_EQUALLY_AMONG_K_STUDENTS.java:56: error
							      								    								  : incompatible types: int cannot be converted to H
							      								    								  ashMap<Integer,Integer>	maxSum = sm [ i ] -
							      								    								  sm [ um . get ( currRem ) ] ;
							      								    								      ^ MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALL
							      								    								  Y_AMONG_K_STUDENTS.java:59: error: bad operand typ
							      								    								  es for binary operator '/'   return maxSum / k ;
							      								    								  		 ^   first type:  HashMap<Integer,In
							      								    								  teger>   second type: int Note: Some messages have
							      								    								   been simplified; recompile with -Xdiags:verbose t
							      								    								  o get full output 10 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_N_DIGIT_STEPPING_NUMBERS				      NUMBER_N_DIGIT_STEPPING_NUMBERS				    NUMBER_N_DIGIT_STEPPING_NUMBERS				  NUMBER_N_DIGIT_STEPPING_NUMBERS
--							      --							    --								  --
def answer ( n ) :					      static long answer ( int n ) {				    public static int answer ( int n ) {			  error : NUMBER_N_DIGIT_STEPPING_NUMBERS.java:46: e
    dp = [ [ 0 for x in range ( 10 ) ] for y in range ( n + 1 	int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;		      int [ ] [ ] dp = new int [ 10 ] [ 10 ] ;			  rror: array required, but int found	    dp [ x ]
    if ( n == 1 ) :					      	if ( n == 1 ) return 10 ;				      for ( int x = 0 ;						   [ y ] [ x ] = 0 ;			  ^ NUMBER_N
	return 10					      	for ( int j = 0 ;					      x < n ;							  _DIGIT_STEPPING_NUMBERS.java:47: error: array requ
    for j in range ( 10 ) :				      	j <= 9 ;						      x ++ ) {							  ired, but int found	    dp [ x ] [ y ] [ y ] = 1
	dp [ 1 ] [ j ] = 1				      	j ++ ) dp [ 1 ] [ j ] = 1 ;				    	for ( int y = 0 ;					   ;			  ^ 2 errors
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					    	y < n + 1 ;						  
	for j in range ( 10 ) :				      	i <= n ;						    	y ++ ) {						  
	    if ( j == 0 ) :				      	i ++ ) {						    	  dp [ x ] [ y ] [ x ] = 0 ;				  
		dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ]	      	  for ( int j = 0 ;					    	  dp [ x ] [ y ] [ y ] = 1 ;				  
	    elif ( j == 9 ) :				      	  j <= 9 ;						    	}							  
		dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]	      	  j ++ ) {						      }								  
	    else :					      	    if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;   if ( ( n == 1 ) ) {					  
		dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + d 	    else if ( j == 9 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j -  	return 10 ;						  
    sum = 0						      	    else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i -   }								  
    for j in range ( 1 , 10 ) :				      	  }							      for ( int j = 0 ;						  
	sum = sum + dp [ n ] [ j ]			      	}							      j < 10 ;							  
    return sum						      	long sum = 0 ;						      j ++ ) {							  
							      	for ( int j = 1 ;					    	dp [ 1 ] [ j ] = 1 ;					  
							      	j <= 9 ;						      }								  
							      	j ++ ) sum += dp [ n ] [ j ] ;				      for ( int i = 2 ;						  
							      	return sum ;						      i <= n ;							  
							      }								      i ++ ) {							  
							      								    	for ( int j = 0 ;					  
							      								    	j < 10 ;						  
							      								    	j ++ ) {						  
							      								    	  if ( ( j == 0 ) ) {					  
							      								    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;		  
							      								    	  }							  
							      								    	  else if ( ( j == 9 ) ) {				  
							      								    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i -  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      int sum = 0 ;						  
							      								      for ( int j = 1 ;						  
							      								      j < 10 ;							  
							      								      j ++ ) {							  
							      								    	sum = sum + dp [ n ] [ j ] ;				  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTANCE_NEAREST_CELL_1_BINARY_MATRIX			      DISTANCE_NEAREST_CELL_1_BINARY_MATRIX			    DISTANCE_NEAREST_CELL_1_BINARY_MATRIX			  DISTANCE_NEAREST_CELL_1_BINARY_MATRIX
--							      --							    --								  --
def printDistance ( mat ) :				      static void printDistance ( int mat [ ] [ ] ) {		    static void printDistance ( int [ ] [ ] mat ) {		  script_not_found : None
    global N , M					      	int ans [ ] [ ] = new int [ N ] [ M ] ;			      int i , M ;						  
    ans = [ [ None ] * M for i in range ( N ) ]		      	for ( int i = 0 ;					      int ans [ ] [ ] = new int [ M ] [ M ] ;			  
    for i in range ( N ) :				      	i < N ;							      for ( i = 0 ;						  
	for j in range ( M ) :				      	i ++ ) for ( int j = 0 ;				      i < N ;							  
	    ans [ i ] [ j ] = 999999999999		      	j < M ;							      i ++ ) {							  
    for i in range ( N ) :				      	j ++ ) ans [ i ] [ j ] = Integer . MAX_VALUE ;		    	for ( j = 0 ;						  
	for j in range ( M ) :				      	for ( int i = 0 ;					    	j < M ;							  
	    for k in range ( N ) :			      	i < N ;							    	j ++ ) {						  
		for l in range ( M ) :			      	i ++ ) for ( int j = 0 ;				    	  ans [ i ] [ j ] = 999999999999 ;			  
		    if ( mat [ k ] [ l ] == 1 ) :	      	j < M ;							    	}							  
			ans [ i ] [ j ] = min ( ans [ i ] [ j 	j ++ ) {						      }								  
    for i in range ( N ) :				      	  for ( int k = 0 ;					      for ( i = 0 ;						  
	for j in range ( M ) :				      	  k < N ;						      i < N ;							  
	    print ( ans [ i ] [ j ] , end = " " )	      	  k ++ ) for ( int l = 0 ;				      i ++ ) {							  
	print ( )					      	  l < M ;						    	for ( j = 0 ;						  
							      	  l ++ ) {						    	j < M ;							  
							      	    if ( mat [ k ] [ l ] == 1 ) ans [ i ] [ j ] = Math . mi 	j ++ ) {						  
							      	  }							    	  for ( k = 0 ;						  
							      	}							    	  k < N ;						  
							      	for ( int i = 0 ;					    	  k ++ ) {						  
							      	i < N ;							    	    for ( l = 0 ;					  
							      	i ++ ) {						    	    l < M ;						  
							      	  for ( int j = 0 ;					    	    l ++ ) {						  
							      	  j < M ;						    	      if ( ( mat [ k ] [ l ] == 1 ) ) {			  
							      	  j ++ ) System . out . print ( ans [ i ] [ j ] + " " ) ;   		ans [ i ] [ j ] = Math . min ( ans [ i ] [ j ] ,  
							      	  System . out . println ( ) ;				    	      }							  
							      	}							    	    }							  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( i = 0 ;						  
							      								      i < N ;							  
							      								      i ++ ) {							  
							      								    	for ( j = 0 ;						  
							      								    	j < M ;							  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( ans [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PATH_MAXIMUM_AVERAGE_VALUE				      PATH_MAXIMUM_AVERAGE_VALUE				    PATH_MAXIMUM_AVERAGE_VALUE					  PATH_MAXIMUM_AVERAGE_VALUE
--							      --							    --								  --
def maxAverageOfPath ( cost , N ) :			      public static double maxAverageOfPath ( int cost [ ] [ ] , in public static double maxAverageOfPath ( double [ ] [ ] cost , script_not_found : None
    dp = [ [ 0 for i in range ( N + 1 ) ] for j in range ( N  	int dp [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ;		      double [ ] [ ] dp = new double [ N + 1 ] [ N + 1 ] ;	  
    dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ]			      	dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			      for ( int i = 0 ;						  
    for i in range ( 1 , N ) :				      	for ( int i = 1 ;					      i < N ;							  
	dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0  	i < N ;							      i ++ ) {							  
    for j in range ( 1 , N ) :				      	i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 	for ( int j = 0 ;					  
	dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j  	for ( int j = 1 ;					    	j < N ;							  
    for i in range ( 1 , N ) :				      	j < N ;							    	j ++ ) {						  
	for j in range ( 1 , N ) :			      	j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j 	  dp [ i ] [ j ] = 0 ;					  
	    dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [  	for ( int i = 1 ;					    	  dp [ i ] [ j ] = cost [ 0 ] [ 0 ] ;			  
    return dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 )	      	i < N ;							    	}							  
							      	i ++ ) for ( int j = 1 ;				      }								  
							      	j < N ;							      for ( int i = 1 ;						  
							      	j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , d   i < N ;							  
							      	return ( double ) dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ;    i ++ ) {							  
							      }								    	dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;  
							      								      }								  
							      								      for ( int j = 1 ;						  
							      								      j < N ;							  
							      								      j ++ ) {							  
							      								    	dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;  
							      								      }								  
							      								      for ( int i = 1 ;						  
							      								      i < N ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j < N ;							  
							      								    	j ++ ) {						  
							      								    	  dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ 
							      								    	}							  
							      								      }								  
							      								      return dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		      GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		    GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER			  GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER
--							      --							    --								  --
def evaluate ( n ) :					      static void evaluate ( int n ) {				    public static void evaluate ( int n ) {			  script_not_found : None
    if ( n == 1 or n == 2 ) :				      	if ( n == 1 || n == 2 ) System . out . println ( "No Pythag   if ( ( n == 1 ) || ( n == 2 ) ) {				  
	print ( "No Pythagoras" + " Triplet exists" )	      	else if ( n % 2 == 0 ) {				    	System . out . println ( "No Pythagoras" + " Triplet exis 
    elif ( n % 2 == 0 ) :				      	  int var = 1 * n * n / 4 ;				      }								  
	var = n * n / 4					      	  System . out . print ( "Pythagoras Triplets " + "exist i.   else if ( ( n % 2 == 0 ) ) {				  
	print ( "Pythagoras Triplets" + " exist i.e." , end = 	  System . out . print ( n + " " ) ;			    	int var = n * n / 4 ;					  
	print ( int ( n ) , "" , int ( var - 1 ) , "" , int ( 	  System . out . print ( var - 1 + " " ) ;		    	System . out . print ( "Pythagoras Triplets" + " exist i. 
    elif ( n % 2 != 0 ) :				      	  System . out . println ( var + 1 + " " ) ;		    	System . out . println ( Integer . toString ( n ) + " " + 
	var = n * n + 1					      	}							      }								  
	print ( "Pythagoras Triplets " + "exist i.e." , end = 	else if ( n % 2 != 0 ) {				      else if ( ( n % 2 != 0 ) ) {				  
	print ( int ( n ) , "" , int ( var / 2 - 1 ) , "" , i 	  int var = 1 * n * n + 1 ;				    	int var = n * n + 1 ;					  
							      	  System . out . print ( "Pythagoras Triplets " + "exist i. 	System . out . print ( "Pythagoras Triplets " + "exist i. 
							      	  System . out . print ( n + " " ) ;			    	System . out . println ( Integer . toString ( n ) + " " + 
							      	  System . out . print ( var / 2 - 1 + " " ) ;		      }								  
							      	  System . out . println ( var / 2 + " " ) ;		    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE    DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE    DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE
--							      --							    --								  --
def lps ( str ) :					      static int lps ( String seq ) {				    public static int lps ( String str ) {			  script_not_found : None
    n = len ( str )					      	int n = seq . length ( ) ;				      int n = str . length ( ) ;				  
    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]   	int i , j , cl ;					      int [ ] [ ] L = new int [ n ] [ n ] ;			  
    for i in range ( n ) :				      	int L [ ] [ ] = new int [ n ] [ n ] ;			      for ( int x = 0 ;						  
	L [ i ] [ i ] = 1				      	for ( i = 0 ;						      x < n ;							  
    for cl in range ( 2 , n + 1 ) :			      	i < n ;							      x ++ ) {							  
	for i in range ( n - cl + 1 ) :			      	i ++ ) L [ i ] [ i ] = 1 ;				    	L [ x ] [ x ] = 0 ;					  
	    j = i + cl - 1				      	for ( cl = 2 ;						      }								  
	    if str [ i ] == str [ j ] and cl == 2 :	      	cl <= n ;						      for ( int i = 0 ;						  
		L [ i ] [ j ] = 2			      	cl ++ ) {						      i < n ;							  
	    elif str [ i ] == str [ j ] :		      	  for ( i = 0 ;						      i ++ ) {							  
		L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2     	  i < n - cl + 1 ;					    	L [ i ] [ i ] = 1 ;					  
	    else :					      	  i ++ ) {						      }								  
		L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ 	    j = i + cl - 1 ;					      for ( int cl = 2 ;					  
    return L [ 0 ] [ n - 1 ]				      	    if ( seq . charAt ( i ) == seq . charAt ( j ) && cl ==    cl <= n ;							  
							      	    else if ( seq . charAt ( i ) == seq . charAt ( j ) ) L    cl ++ ) {							  
							      	    else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i +  	for ( int i = 0 ;					  
							      	  }							    	i < n - cl + 1 ;					  
							      	}							    	i ++ ) {						  
							      	return L [ 0 ] [ n - 1 ] ;				    	  int j = i + cl - 1 ;					  
							      }								    	  if ( str . charAt ( i ) == str . charAt ( j ) && cl ==  
							      								    	    L [ i ] [ j ] = 2 ;					  
							      								    	  }							  
							      								    	  else if ( str . charAt ( i ) == str . charAt ( j ) ) {  
							      								    	    L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ;		  
							      								    	  }							  
							      								    	  else {						  
							      								    	    L [ i ] [ j ] = Math . max ( L [ i ] [ j - 1 ] , L [  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return L [ 0 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2
--							      --							    --								  --
def printRepeating ( arr , size ) :			      void printRepeating ( int arr [ ] , int size ) {		    static void printRepeating ( int [ ] arr , int size ) {	  script_not_found : None
    xor = arr [ 0 ]					      	int xor = arr [ 0 ] ;					      int xor = arr [ 0 ] ;					  
    n = size - 2					      	int set_bit_no ;					      int n = size - 2 ;					  
    x = 0						      	int i ;							      int x = 0 ;						  
    y = 0						      	int n = size - 2 ;					      int y = 0 ;						  
    for i in range ( 1 , size ) :			      	int x = 0 , y = 0 ;					      for ( int i = 1 ;						  
	xor ^= arr [ i ]				      	for ( i = 1 ;						      i < size ;						  
    for i in range ( 1 , n + 1 ) :			      	i < size ;						      i ++ ) {							  
	xor ^= i					      	i ++ ) xor ^= arr [ i ] ;				    	xor ^= arr [ i ] ;					  
    set_bit_no = xor & ~ ( xor - 1 )			      	for ( i = 1 ;						      }								  
    for i in range ( 0 , size ) :			      	i <= n ;						      for ( int i = 1 ;						  
	if ( arr [ i ] & set_bit_no ) :			      	i ++ ) xor ^= i ;					      i <= n ;							  
	    x = x ^ arr [ i ]				      	set_bit_no = ( xor & ~ ( xor - 1 ) ) ;			      i ++ ) {							  
	else :						      	for ( i = 0 ;						    	xor ^= i ;						  
	    y = y ^ arr [ i ]				      	i < size ;						      }								  
    for i in range ( 1 , n + 1 ) :			      	i ++ ) {						      int setBitNo = xor & ~ ( xor - 1 ) ;			  
	if ( i & set_bit_no ) :				      	  int a = arr [ i ] & set_bit_no ;			      for ( int i = 0 ;						  
	    x = x ^ i					      	  if ( a != 0 ) x = x ^ arr [ i ] ;			      i <= size ;						  
	else :						      	  else y = y ^ arr [ i ] ;				      i ++ ) {							  
	    y = y ^ i					      	}							    	if ( ( arr [ i ] & setBitNo ) != 0 ) {			  
    print ( "The two repeating" , "elements are" , y , x )    	for ( i = 1 ;						    	  x = x ^ arr [ i ] ;					  
							      	i <= n ;						    	}							  
							      	i ++ ) {						    	else {							  
							      	  int a = i & set_bit_no ;				    	  y = y ^ arr [ i ] ;					  
							      	  if ( a != 0 ) x = x ^ i ;				    	}							  
							      	  else y = y ^ i ;					      }								  
							      	}							      for ( int i = 1 ;						  
							      	System . out . println ( "The two reppeated elements are :"   i <= n ;							  
							      	System . out . println ( x + " " + y ) ;		      i ++ ) {							  
							      }								    	if ( ( arr [ i ] & setBitNo ) != 0 ) {			  
							      								    	  x = x ^ i ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  y = y ^ i ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "The two repeating" + " elements a 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
def firstFit ( blockSize , m , processSize , n ) :	      static void firstFit ( int blockSize [ ] , int m , int proces static void firstFit ( int [ ] blockSize , int m , int [ ] pr script_not_found : None
    allocation = [ - 1 ] * n				      	int allocation [ ] = new int [ n ] ;			      int [ ] allocation = new int [ n ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      Arrays . fill ( allocation , - 1 ) ;			  
	for j in range ( m ) :				      	i < allocation . length ;				      for ( int i = 0 ;						  
	    if blockSize [ j ] >= processSize [ i ] :	      	i ++ ) allocation [ i ] = - 1 ;				      i < n ;							  
		allocation [ i ] = j			      	for ( int i = 0 ;					      i ++ ) {							  
		blockSize [ j ] -= processSize [ i ]	      	i < n ;							    	for ( int j = 0 ;					  
		break					      	i ++ ) {						    	j < m ;							  
    print ( " Process No.Process Size	   Block no." )	      	  for ( int j = 0 ;					    	j ++ ) {						  
    for i in range ( n ) :				      	  j < m ;						    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	print ( " " , i + 1 , "		" , processSize [ i ] 	  j ++ ) {						    	    allocation [ i ] = j ;				  
	if allocation [ i ] != - 1 :			      	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	    blockSize [ j ] -= processSize [ i ] ;		  
	    print ( allocation [ i ] + 1 )		      	      allocation [ i ] = j ;				    	    break ;						  
	else :						      	      blockSize [ j ] -= processSize [ i ] ;		    	  }							  
	    print ( "Not Allocated" )			      	      break ;						    	}							  
							      	    }							      }								  
							      	  }							      System . out . println ( " Process No. Process Size     Blo 
							      	}							      for ( int i = 0 ;						  
							      	System . out . println ( "\nProcess No.\tProcess Size\tBloc   i < n ;							  
							      	for ( int i = 0 ;					      i ++ ) {							  
							      	i < n ;							    	System . out . print ( " " + i + 1 + " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁  
							      	i ++ ) {						    								  
							      	  System . out . print ( " " + ( i + 1 ) + "\t\t" + process 								  
							      	  if ( allocation [ i ] != - 1 ) System . out . print ( all 								  
							      	  else System . out . print ( "Not Allocated" ) ;	    								  
							      	  System . out . println ( ) ;				    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_PRODUCT_TWO_ARRAYS				      MINIMUM_SUM_PRODUCT_TWO_ARRAYS				    MINIMUM_SUM_PRODUCT_TWO_ARRAYS				  MINIMUM_SUM_PRODUCT_TWO_ARRAYS
--							      --							    --								  --
def minproduct ( a , b , n , k ) :			      static int minproduct ( int a [ ] , int b [ ] , int n , int k public static int minProduct ( int [ ] a , int [ ] b , int n  error : MINIMUM_SUM_PRODUCT_TWO_ARRAYS.java:53: er
    diff = 0						      	int diff = 0 , res = 0 ;				      int diff = 0 ;						  ror: variable temp might not have been initialized
    res = 0						      	int temp = 0 ;						      int res = 0 ;						       int d = Math . abs ( pro - temp ) ;
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  			^ 1 error
	pro = a [ i ] * b [ i ]				      	i < n ;							      i < n ;							  
	res = res + pro					      	i ++ ) {						      i ++ ) {							  
	if ( pro < 0 and b [ i ] < 0 ) :		      	  int pro = a [ i ] * b [ i ] ;				    	int pro = a [ i ] * b [ i ] ;				  
	    temp = ( a [ i ] + 2 * k ) * b [ i ]	      	  res = res + pro ;					    	res = res + pro ;					  
	elif ( pro < 0 and a [ i ] < 0 ) :		      	  if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k )  	int temp ;						  
	    temp = ( a [ i ] - 2 * k ) * b [ i ]	      	  else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * 	if ( ( pro < 0 ) && ( b [ i ] < 0 ) ) {			  
	elif ( pro > 0 and a [ i ] < 0 ) :		      	  else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * 	  temp = ( a [ i ] + 2 * k ) * b [ i ] ;		  
	    temp = ( a [ i ] + 2 * k ) * b [ i ]	      	  else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * 	}							  
	elif ( pro > 0 and a [ i ] > 0 ) :		      	  int d = Math . abs ( pro - temp ) ;			    	else if ( ( pro < 0 ) && ( a [ i ] < 0 ) ) {		  
	    temp = ( a [ i ] - 2 * k ) * b [ i ]	      	  if ( d > diff ) diff = d ;				    	  temp = ( a [ i ] - 2 * k ) * b [ i ] ;		  
	d = abs ( pro - temp )				      	}							    	}							  
	if ( d > diff ) :				      	return res - diff ;					    	else if ( ( pro > 0 ) && ( a [ i ] < 0 ) ) {		  
	    diff = d					      }								    	  temp = ( a [ i ] + 2 * k ) * b [ i ] ;		  
    return res - diff					      								    	}							  
							      								    	else if ( ( pro > 0 ) && ( a [ i ] > 0 ) ) {		  
							      								    	  temp = ( a [ i ] - 2 * k ) * b [ i ] ;		  
							      								    	}							  
							      								    	int d = Math . abs ( pro - temp ) ;			  
							      								    	if ( ( d > diff ) ) {					  
							      								    	  diff = d ;						  
							      								    	}							  
							      								      }								  
							      								      return res - diff ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			      MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			    MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			  MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX
--							      --							    --								  --
def MAXMIN ( arr , n ) :				      static void maxMin ( int arr [ ] [ ] , int n ) {		    public static void MAXMIN ( int [ ] [ ] arr , int n ) {	  script_not_found : None
    MIN = 10 ** 9					      	int min = + 2147483647 ;				      int MIN = 10 * 9 ;					  
    MAX = - 10 ** 9					      	int max = - 2147483648 ;				      int MAX = - 10 * 9 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n // 2 + 1 ) :			      	i < n ;							      i < n ;							  
	    if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] )  	i ++ ) {						      i ++ ) {							  
		if ( MIN > arr [ i ] [ n - j - 1 ] ) :	      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
		    MIN = arr [ i ] [ n - j - 1 ]	      	  j <= n / 2 ;						    	j < n / 2 + 1 ;						  
		if ( MAX < arr [ i ] [ j ] ) :		      	  j ++ ) {						    	j ++ ) {						  
		    MAX = arr [ i ] [ j ]		      	    if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {	    	  if ( ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) ) {  
	    else :					      	      if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ]  	    if ( ( MIN > arr [ i ] [ n - j - 1 ] ) ) {		  
		if ( MIN > arr [ i ] [ j ] ) :		      	      if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ;  	      MIN = arr [ i ] [ n - j - 1 ] ;			  
		    MIN = arr [ i ] [ j ]		      	    }							    	    }							  
		if ( MAX < arr [ i ] [ n - j - 1 ] ) :	      	    else {						    	    if ( ( MAX < arr [ i ] [ j ] ) ) {			  
		    MAX = arr [ i ] [ n - j - 1 ]	      	      if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ;  	      MAX = arr [ i ] [ j ] ;				  
    print ( "MAXimum =" , MAX , ", MINimum =" , MIN )	      	      if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ]  	    }							  
							      	    }							    	  }							  
							      	  }							    	  else {						  
							      	}							    	    if ( ( MIN > arr [ i ] [ j ] ) ) {			  
							      	System . out . print ( "Maximum = " + max + ", Minimum = "  	      MIN = arr [ i ] [ j ] ;				  
							      }								    	    }							  
							      								    	    if ( ( MAX < arr [ i ] [ n - j - 1 ] ) ) {		  
							      								    	      MAX = arr [ i ] [ n - j - 1 ] ;			  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "MAXimum =" + MAX + ", MINimum ="  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY		      COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY		    COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY		  COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY
--							      --							    --								  --
def numofAP ( a , n ) :					      static int numofAP ( int a [ ] , int n ) {		    public static int numofAP ( int [ ] a , int n ) {		  script_not_found : None
    minarr = + 2147483647				      	int minarr = + 2147483647 ;				      int minarr = + 2147483647 ;				  
    maxarr = - 2147483648				      	int maxarr = - 2147483648 ;				      int maxarr = - 2147483648 ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	minarr = min ( minarr , a [ i ] )		      	i < n ;							      i < n ;							  
	maxarr = max ( maxarr , a [ i ] )		      	i ++ ) {						      i ++ ) {							  
    dp = [ 0 for i in range ( n + 1 ) ]			      	  minarr = Math . min ( minarr , a [ i ] ) ;		    	minarr = Math . min ( minarr , a [ i ] ) ;		  
    ans = n + 1						      	  maxarr = Math . max ( maxarr , a [ i ] ) ;		    	maxarr = Math . max ( maxarr , a [ i ] ) ;		  
    for d in range ( ( minarr - maxarr ) , ( maxarr - minarr  	}							      }								  
	sum = [ 0 for i in range ( MAX + 1 ) ]		      	int dp [ ] = new int [ n ] ;				      int [ ] dp = new int [ n + 1 ] ;				  
	for i in range ( n ) :				      	int sum [ ] = new int [ MAX ] ;				      for ( int i = 0 ;						  
	    dp [ i ] = 1				      	int ans = n + 1 ;					      i < dp . length ;						  
	    if ( a [ i ] - d >= 1 and a [ i ] - d <= 1000000  	for ( int d = ( minarr - maxarr ) ;			      i ++ ) dp [ i ] = 0 ;					  
		dp [ i ] += sum [ a [ i ] - d ]		      	d <= ( maxarr - minarr ) ;				      int ans = n + 1 ;						  
	    ans += dp [ i ] - 1				      	d ++ ) {						      for ( int d = ( minarr - maxarr ) ;			  
	    sum [ a [ i ] ] += dp [ i ]			      	  Arrays . fill ( sum , 0 ) ;				      d <= ( maxarr - minarr ) ;				  
    return ans						      	  for ( int i = 0 ;					      d ++ ) {							  
							      	  i < n ;						    	int [ ] sum = new int [ MAX + 1 ] ;			  
							      	  i ++ ) {						    	for ( int i = 0 ;					  
							      	    dp [ i ] = 1 ;					    	i < dp . length ;					  
							      	    if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [  	i ++ ) sum [ i ] = 0 ;					  
							      	    ans += dp [ i ] - 1 ;				    	for ( int i = 0 ;					  
							      	    sum [ a [ i ] ] += dp [ i ] ;			    	i < dp [ i ] ;						  
							      	  }							    	i ++ ) {						  
							      	}							    	  dp [ i ] = 1 ;					  
							      	return ans ;						    	  if ( ( a [ i ] - d >= 1 ) && ( a [ i ] - d <= 1000000 ) 
							      }								    	  ans += dp [ i ] - 1 ;					  
							      								    	  sum [ a [ i ] ] += dp [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES      PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	    PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	  PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES
--							      --							    --								  --
def constructTree ( n , d , h ) :			      static void constructTree ( int n , int d , int h ) {	    static int constructTree ( int n , int d , int h ) {	  script_not_found : None
    if d == 1 :						      	if ( d == 1 ) {						      if ( d == 1 ) {						  
	if n == 2 and h == 1 :				      	  if ( n == 2 && h == 1 ) {				    	if ( n == 2 && h == 1 ) {				  
	    print ( "1 2" )				      	    System . out . println ( "1 2" ) ;			    	  System . out . println ( "1 2" ) ;			  
	    return 0					      	    return ;						    	  return 0 ;						  
	print ( "-1" )					      	  }							    	}							  
	return 0					      	  System . out . println ( "-1" ) ;			    	System . out . println ( "-1" ) ;			  
    if d > 2 * h :					      	  return ;						    	return 0 ;						  
	print ( "-1" )					      	}							      }								  
	return 0					      	if ( d > 2 * h ) {					      if ( d > 2 * h ) {					  
    for i in range ( 1 , h + 1 ) :			      	  System . out . println ( "-1" ) ;			    	System . out . println ( "-1" ) ;			  
	print ( i , " " , i + 1 )			      	  return ;						    	return 0 ;						  
    if d > h :						      	}							      }								  
	print ( 1 , "  " , h + 2 )			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	for i in range ( h + 2 , d + 1 ) :		      	i <= h ;						      i <= h ;							  
	    print ( i , " " , i + 1 )			      	i ++ ) System . out . println ( i + " " + ( i + 1 ) ) ;	      i ++ ) {							  
    for i in range ( d + 1 , n ) :			      	if ( d > h ) {						    	System . out . println ( i + " " + i + 1 ) ;		  
	k = 1						      	  System . out . println ( "1" + " " + ( h + 2 ) ) ;	      }								  
	if d == h :					      	  for ( int i = h + 2 ;					      if ( d > h ) {						  
	    k = 2					      	  i <= d ;						    	System . out . println ( 1 + "	" + h + 2 ) ;		  
	print ( k , " " , i + 1 )			      	  i ++ ) {						    	for ( int i = h + 2 ;					  
							      	    System . out . println ( i + " " + ( i + 1 ) ) ;	    	i <= d ;						  
							      	  }							    	i ++ ) {						  
							      	}							    	  System . out . println ( i + " " + i + 1 ) ;		  
							      	for ( int i = d + 1 ;					    	}							  
							      	i < n ;							      }								  
							      	i ++ ) {						      for ( int i = d + 1 ;					  
							      	  int k = 1 ;						      i <= n ;							  
							      	  if ( d == h ) k = 2 ;					      i ++ ) {							  
							      	  System . out . println ( k + " " + ( i + 1 ) ) ;	    	int k = 1 ;						  
							      	}							    	if ( d == h ) {						  
							      }								    	  k = 2 ;						  
							      								    	}							  
							      								    	System . out . println ( k + " " + i + 1 ) ;		  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE		      COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE		    COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE			  COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE
--							      --							    --								  --
def findSubsequenceCount ( S , T ) :			      static int findSubsequenceCount ( String S , String T ) {	    static int findSubsequenceCount ( String S , String T ) {	  error : Exception in thread "main" java.lang.Array
    m = len ( T )					      	int m = T . length ( ) ;				      int m = T . length ( ) ;					  IndexOutOfBoundsException: Index 4 out of bounds f
    n = len ( S )					      	int n = S . length ( ) ;				      int n = S . length ( ) ;					  or length 4 	at COUNT_DISTINCT_OCCURRENCES_AS_A_SU
    if m > n :						      	if ( m > n ) return 0 ;					      if ( m > n ) {						  BSEQUENCE.f_filled(COUNT_DISTINCT_OCCURRENCES_AS_A
	return 0					      	int mat [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		    	return 0 ;						  _SUBSEQUENCE.java:53) 	at COUNT_DISTINCT_OCCURRENC
    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range (  	for ( int i = 1 ;					      }								  ES_AS_A_SUBSEQUENCE.main(COUNT_DISTINCT_OCCURRENCE
    for i in range ( 1 , m + 1 ) :			      	i <= m ;						      int [ ] [ ] mat = new int [ n + 1 ] [ m + 1 ] ;		  S_AS_A_SUBSEQUENCE.java:99)
	mat [ i ] [ 0 ] = 0				      	i ++ ) mat [ i ] [ 0 ] = 0 ;				      for ( int i = 0 ;						  
    for j in range ( n + 1 ) :				      	for ( int j = 0 ;					      i < m + 1 ;						  
	mat [ 0 ] [ j ] = 1				      	j <= n ;						      i ++ ) {							  
    for i in range ( 1 , m + 1 ) :			      	j ++ ) mat [ 0 ] [ j ] = 1 ;				    	mat [ i ] [ 0 ] = 0 ;					  
	for j in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      }								  
	    if T [ i - 1 ] != S [ j - 1 ] :		      	i <= m ;						      for ( int j = 0 ;						  
		mat [ i ] [ j ] = mat [ i ] [ j - 1 ]	      	i ++ ) {						      j < n ;							  
	    else :					      	  for ( int j = 1 ;					      j ++ ) {							  
		mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat 	  j <= n ;						    	mat [ 0 ] [ j ] = 1 ;					  
    return mat [ m ] [ n ]				      	  j ++ ) {						      }								  
							      	    if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) mat   for ( int i = 1 ;						  
							      	    else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i -    i < m + 1 ;						  
							      	  }							      i ++ ) {							  
							      	}							    	for ( int j = 1 ;					  
							      	return mat [ m ] [ n ] ;				    	j < n + 1 ;						  
							      }								    	j ++ ) {						  
							      								    	  if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) {	  
							      								    	    mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ;		  
							      								    	  }							  
							      								    	  else {						  
							      								    	    mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return mat [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY		      FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY			    FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY			  FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY
--							      --							    --								  --
def minAdjustmentCost ( A , n , target ) :		      static int minAdjustmentCost ( int A [ ] , int n , int target public static int minAdjustmentCost ( int [ ] A , int n , int script_not_found : None
    dp = [ [ 0 for i in range ( M + 1 ) ] for i in range ( n  	int [ ] [ ] dp = new int [ n ] [ M + 1 ] ;		      int [ ] [ ] dp = new int [ M + 1 ] [ n ] ;		  
    for j in range ( M + 1 ) :				      	for ( int j = 0 ;					      for ( int i = 0 ;						  
	dp [ 0 ] [ j ] = abs ( j - A [ 0 ] )		      	j <= M ;						      i < M ;							  
    for i in range ( 1 , n ) :				      	j ++ ) dp [ 0 ] [ j ] = Math . abs ( j - A [ 0 ] ) ;	      i ++ ) {							  
	for j in range ( M + 1 ) :			      	for ( int i = 1 ;					    	dp [ i ] [ 0 ] = 0 ;					  
	    dp [ i ] [ j ] = 100000000			      	i < n ;							    	for ( int j = 0 ;					  
	    for k in range ( max ( j - target , 0 ) , min ( M 	i ++ ) {						    	j < M ;							  
		dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [  	  for ( int j = 0 ;					    	j ++ ) {						  
    res = 10000000					      	  j <= M ;						    	  dp [ 0 ] [ j ] = Math . abs ( j - A [ 0 ] ) ;		  
    for j in range ( M + 1 ) :				      	  j ++ ) {						    	}							  
	res = min ( res , dp [ n - 1 ] [ j ] )		      	    dp [ i ] [ j ] = Integer . MAX_VALUE ;		      }								  
    return res						      	    int k = Math . max ( j - target , 0 ) ;		      for ( int i = 1 ;						  
							      	    for ( ;						      i < n ;							  
							      	    k <= Math . min ( M , j + target ) ;		      i ++ ) {							  
							      	    k ++ ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , d 	for ( int j = 0 ;					  
							      	  }							    	j < M ;							  
							      	}							    	j ++ ) {						  
							      	int res = Integer . MAX_VALUE ;				    	  dp [ i ] [ j ] = 100000000 ;				  
							      	for ( int j = 0 ;					    	  for ( int k = Math . max ( j - target , 0 ) ;		  
							      	j <= M ;						    	  k <= Math . min ( M , j + target ) ;			  
							      	j ++ ) res = Math . min ( res , dp [ n - 1 ] [ j ] ) ;	    	  k ++ ) {						  
							      	return res ;						    	    dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i 
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      int res = 10000000 ;					  
							      								      for ( int j = 0 ;						  
							      								      j < M + 1 ;						  
							      								      j ++ ) {							  
							      								    	res = Math . min ( res , dp [ n - 1 ] [ j ] ) ;		  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		      FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		    FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1			  FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1
--							      --							    --								  --
def findFourElements ( arr , n ) :			      static int findFourElements ( int [ ] arr , int n ) {	    static int findFourElements ( int [ ] arr , int n ) {	  script_not_found : None
    mp = dict ( )					      	HashMap < Integer , Indexes > map = new HashMap < > ( ) ;     Map < Integer , Point > mp = new HashMap < > ( ) ;	  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n - 1 ;						      i < n - 1 ;						  
	    mp [ arr [ i ] + arr [ j ] ] = ( i , j )	      	i ++ ) {						      i ++ ) {							  
    d = - 10 ** 9					      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    for i in range ( n - 1 ) :				      	  j < n ;						    	j < n ;							  
	for j in range ( i + 1 , n ) :			      	  j ++ ) {						    	j ++ ) {						  
	    abs_diff = abs ( arr [ i ] - arr [ j ] )	      	    map . put ( arr [ i ] + arr [ j ] , new Indexes ( i , j 	  mp . put ( arr [ i ] + arr [ j ] , new Point ( i , j )  
	    if abs_diff in mp.keys ( ) :		      	  }							    	}							  
		p = mp [ abs_diff ]			      	}							      }								  
		if ( p [ 0 ] != i and p [ 0 ] != j and p [ 1  	int d = Integer . MIN_VALUE ;				      int d = - 10 * 9 ;					  
		    d = max ( d , max ( arr [ i ] , arr [ j ] 	for ( int i = 0 ;					      for ( int i = 0 ;						  
    return d						      	i < n - 1 ;						      i < n - 1 ;						  
							      	i ++ ) {						      i ++ ) {							  
							      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
							      	  j < n ;						    	j < n ;							  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    int abs_diff = Math . abs ( arr [ i ] - arr [ j ] ) ;   	  int absDiff = Math . abs ( arr [ i ] - arr [ j ] ) ;	  
							      	    if ( map . containsKey ( abs_diff ) ) {		    	  if ( mp . keySet ( ) . contains ( absDiff ) ) {	  
							      	      Indexes indexes = map . get ( abs_diff ) ;	    	    Point p = mp . get ( absDiff ) ;			  
							      	      if ( indexes . getI ( ) != i && indexes . getI ( ) != 	    if ( ( p . x != i && p . x != j && p . y != i && p .  
							      		d = Math . max ( d , Math . max ( arr [ i ] , arr [ 	      d = Math . max ( d , Math . max ( arr [ i ] , arr [ 
							      	      }							    	    }							  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return d ;						      return d ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE			    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE
--							      --							    --								  --
def SumNodes ( l ) :					      static int sumNodes ( int l ) {				    public static int SumNodes ( int l ) {			  script_not_found : None
    leafNodeCount = pow ( 2 , l - 1 )			      	int leafNodeCount = ( int ) Math . pow ( 2 , l - 1 ) ;	      int leafNodeCount = Math . pow ( 2 , l - 1 ) ;		  
    vec = [ [ ] for i in range ( l ) ]			      	Vector < Vector < Integer >> vec = new Vector < Vector < In   int [ ] [ ] vec = new int [ l ] [ ] ;			  
    for i in range ( 1 , leafNodeCount + 1 ) :		      	for ( int i = 1 ;					      for ( int i = 0 ;						  
	vec [ l - 1 ].append ( i )			      	i <= l ;						      i < l ;							  
    for i in range ( l - 2 , - 1 , - 1 ) :		      	i ++ ) vec . add ( new Vector < Integer > ( ) ) ;	      i ++ ) {							  
	k = 0						      	for ( int i = 1 ;					    	vec [ l - 1 ] [ i ] = i ;				  
	while ( k < len ( vec [ i + 1 ] ) - 1 ) :	      	i <= leafNodeCount ;					      }								  
	    vec [ i ].append ( vec [ i + 1 ] [ k ] + vec [ i  	i ++ ) vec . get ( l - 1 ) . add ( i ) ;		      for ( int i = l - 2 ;					  
	    k += 2					      	for ( int i = l - 2 ;					      i >= 0 ;							  
    Sum = 0						      	i >= 0 ;						      i -- ) {							  
    for i in range ( l ) :				      	i -- ) {						    	int k = 0 ;						  
	for j in range ( len ( vec [ i ] ) ) :		      	  int k = 0 ;						    	while ( ( k < vec [ i + 1 ] . length - 1 ) ) {		  
	    Sum += vec [ i ] [ j ]			      	  while ( k < vec . get ( i + 1 ) . size ( ) - 1 ) {	    	  vec [ i ] [ k ] = vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ 
    return Sum						      	    vec . get ( i ) . add ( vec . get ( i + 1 ) . get ( k ) 	  k += 2 ;						  
							      	    k += 2 ;						    	}							  
							      	  }							      }								  
							      	}							      int Sum = 0 ;						  
							      	int sum = 0 ;						      for ( int i = 0 ;						  
							      	for ( int i = 0 ;					      i < l ;							  
							      	i < l ;							      i ++ ) {							  
							      	i ++ ) {						    	for ( int j = 0 ;					  
							      	  for ( int j = 0 ;					    	j < vec [ i ] . length ;				  
							      	  j < vec . get ( i ) . size ( ) ;			    	j ++ ) {						  
							      	  j ++ ) sum += vec . get ( i ) . get ( j ) ;		    	  Sum += vec [ i ] [ j ] ;				  
							      	}							    	}							  
							      	return sum ;						      }								  
							      }								      return Sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED     LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED	    LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED	  LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED
--							      --							    --								  --
def lcs ( dp , arr1 , n , arr2 , m , k ) :		      static int lcs ( int [ ] [ ] [ ] dp , int [ ] arr1 , int n ,  public static int lcs ( int [ ] [ ] dp , int [ ] [ ] arr1 , i script_not_found : None
    if k < 0 :						      	if ( k < 0 ) return - 10000000 ;			      if ( k < 0 ) return - ( 10 * 7 ) ;			  
	return - ( 10 ** 7 )				      	if ( n < 0 || m < 0 ) return 0 ;			      if ( n < 0 || m < 0 ) return 0 ;				  
    if n < 0 or m < 0 :					      	int ans = dp [ n ] [ m ] [ k ] ;			      int ans = dp [ n ] [ m ] [ k ] ;				  
	return 0					      	if ( ans != - 1 ) return ans ;				      if ( ans != - 1 ) return ans ;				  
    ans = dp [ n ] [ m ] [ k ]				      	try {							      ans = Math . max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) 
    if ans != - 1 :					      	  ans = Math . max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k   if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) {			  
	return ans					      	  if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) ans = Math . max  	ans = Math . max ( ans , 1 + lcs ( dp , arr1 , n - 1 , ar 
    ans = max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lc 	  ans = Math . max ( ans , 1 + lcs ( dp , arr1 , n - 1 , ar   }								  
    if arr1 [ n - 1 ] == arr2 [ m - 1 ] :		      	}							      ans = Math . max ( ans , lcs ( dp , arr1 , n - 1 , arr2 , m 
	ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2  	catch ( Exception e ) {					      return ans ;						  
    ans = max ( ans , lcs ( dp , arr1 , n - 1 , arr2 , m - 1  	}							    }								  
    return ans						      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	      LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	    LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	  LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS
--							      --							    --								  --
def findLIS ( A , n ) :					      static void findLIS ( int A [ ] , int n ) {		    public static void findLIS ( int [ ] A , int n ) {		  script_not_found : None
    hash = dict ( )					      	Map < Integer , Integer > hash = new HashMap < Integer , In   Map < Integer , Integer > hash = new HashMap < > ( ) ;	  
    LIS_size , LIS_index = 1 , 0			      	int LIS_size = 1 ;					      int LIS_size = 1 , LIS_index = 0 ;			  
    hash [ A [ 0 ] ] = 1				      	int LIS_index = 0 ;					      hash . put ( A [ 0 ] , 1 ) ;				  
    for i in range ( 1 , n ) :				      	hash . put ( A [ 0 ] , 1 ) ;				      for ( int i = 1 ;						  
	if A [ i ] - 1 not in hash :			      	for ( int i = 1 ;					      i < n ;							  
	    hash [ A [ i ] - 1 ] = 0			      	i < n ;							      i ++ ) {							  
	hash [ A [ i ] ] = hash [ A [ i ] - 1 ] + 1	      	i ++ ) {						    	if ( ! hash . containsKey ( A [ i ] - 1 ) ) {		  
	if LIS_size < hash [ A [ i ] ] :		      	  hash . put ( A [ i ] , hash . get ( A [ i ] - 1 ) == null 	  hash . put ( A [ i ] - 1 , 0 ) ;			  
	    LIS_size = hash [ A [ i ] ]			      	  if ( LIS_size < hash . get ( A [ i ] ) ) {		    	}							  
	    LIS_index = A [ i ]				      	    LIS_size = hash . get ( A [ i ] ) ;			    	hash . put ( A [ i ] , hash . get ( A [ i ] - 1 ) + 1 ) ; 
    print ( "LIS_size =" , LIS_size )			      	    LIS_index = A [ i ] ;				    	if ( LIS_size < hash . get ( A [ i ] ) ) {		  
    print ( "LIS : " , end = "" )			      	  }							    	  LIS_size = hash . get ( A [ i ] ) ;			  
    start = LIS_index - LIS_size + 1			      	}							    	  LIS_index = A [ i ] ;					  
    while start <= LIS_index :				      	System . out . println ( "LIS_size = " + LIS_size ) ;	    	}							  
	print ( start , end = " " )			      	System . out . print ( "LIS : " ) ;			      }								  
	start += 1					      	int start = LIS_index - LIS_size + 1 ;			      System . out . println ( "LIS_size =" + LIS_size ) ;	  
							      	while ( start <= LIS_index ) {				      System . out . print ( "LIS : " ) ;			  
							      	  System . out . print ( start + " " ) ;		      int start = LIS_index - LIS_size + 1 ;			  
							      	  start ++ ;						      while ( start <= LIS_index ) {				  
							      	}							    	System . out . print ( start + " " ) ;			  
							      }								    	start ++ ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING		      COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING		    COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING			  COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING
--							      --							    --								  --
def countPS ( str ) :					      static int countPS ( String str ) {			    public static int countPS ( String str ) {			  error : COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING
    N = len ( str )					      	int N = str . length ( ) ;				      int N = str . length ( ) ;				  .java:45: error: variable j is already defined in
    cps = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N 	int [ ] [ ] cps = new int [ N + 1 ] [ N + 1 ] ;		      int [ ] [ ] cps = new int [ N + 2 ] [ N + 2 ] ;		  method f_filled(String)	for ( int j = 0 ;
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  		^ 1 error
	cps [ i ] [ i ] = 1				      	i < N ;							      i < N ;							  
    for L in range ( 2 , N + 1 ) :			      	i ++ ) cps [ i ] [ i ] = 1 ;				      i ++ ) {							  
	for i in range ( N ) :				      	for ( int L = 2 ;					    	for ( int j = 0 ;					  
	    k = L + i - 1				      	L <= N ;						    	j < N ;							  
	    if ( k < N ) :				      	L ++ ) {						    	j ++ ) {						  
		if ( str [ i ] == str [ k ] ) :		      	  for ( int i = 0 ;					    	  for ( int j = 0 ;					  
		    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + 	  i < N ;						    	  j < N ;						  
		else :					      	  i ++ ) {						    	  j ++ ) {						  
		    cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + 	    int k = L + i - 1 ;					    	    cps [ j ] [ i ] = j ;				  
    return cps [ 0 ] [ N - 1 ]				      	    if ( k < N ) {					    	  }							  
							      	      if ( str . charAt ( i ) == str . charAt ( k ) ) cps [ 	}							  
							      	      else cps [ i ] [ k ] = cps [ i ] [ k - 1 ] + cps [ i    }								  
							      	    }							      for ( int L = 2 ;						  
							      	  }							      L <= N ;							  
							      	}							      L ++ ) {							  
							      	return cps [ 0 ] [ N - 1 ] ;				    	for ( int i = 0 ;					  
							      }								    	i < N ;							  
							      								    	i ++ ) {						  
							      								    	  int k = L + i - 1 ;					  
							      								    	  if ( ( k < N ) ) {					  
							      								    	    if ( ( str . charAt ( i ) == str . charAt ( k ) ) ) { 
							      								    	      cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 
							      								    	    }							  
							      								    	    else {						  
							      								    	      cps [ i ] [ k ] = ( cps [ i ] [ k - 1 ] + cps [ i + 
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return cps [ 0 ] [ N - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MEDIAN_ROW_WISE_SORTED_MATRIX			      FIND_MEDIAN_ROW_WISE_SORTED_MATRIX			    FIND_MEDIAN_ROW_WISE_SORTED_MATRIX				  FIND_MEDIAN_ROW_WISE_SORTED_MATRIX
--							      --							    --								  --
def binaryMedian ( m , r , d ) :			      static int binaryMedian ( int m [ ] [ ] , int r , int c ) {   public static int binaryMedian ( int [ ] [ ] m , int r , int  error : FIND_MEDIAN_ROW_WISE_SORTED_MATRIX.java:64
    mi = m [ 0 ] [ 0 ]					      	int max = Integer . MIN_VALUE ;				      int mi = m [ 0 ] [ 0 ] ;					  : error: cannot find symbol	    int j = upperBou
    mx = 0						      	int min = Integer . MAX_VALUE ;				      int mx = 0 ;						  nd ( m [ i ] , mid ) ;	       ^   symbol:
    for i in range ( r ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						   method upperBound(int[],int)	  location: class FI
	if m [ i ] [ 0 ] < mi :				      	i < r ;							      i < r ;							  ND_MEDIAN_ROW_WISE_SORTED_MATRIX 1 error
	    mi = m [ i ] [ 0 ]				      	i ++ ) {						      i ++ ) {							  
	if m [ i ] [ d - 1 ] > mx :			      	  if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ;	    	if ( m [ i ] [ 0 ] < mi ) {				  
	    mx = m [ i ] [ d - 1 ]			      	  if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ;  	  mi = m [ i ] [ 0 ] ;					  
    desired = ( r * d + 1 ) // 2			      	}							    	}							  
    while ( mi < mx ) :					      	int desired = ( r * c + 1 ) / 2 ;			    	if ( m [ i ] [ d - 1 ] > mx ) {				  
	mid = mi + ( mx - mi ) // 2			      	while ( min < max ) {					    	  mx = m [ i ] [ d - 1 ] ;				  
	place = [ 0 ]					      	  int mid = min + ( max - min ) / 2 ;			    	}							  
	for i in range ( r ) :				      	  int place = 0 ;					      }								  
	    j = upper_bound ( m [ i ] , mid )		      	  int get = 0 ;						      int desired = ( r * d + 1 ) / 2 ;				  
	    place [ 0 ] = place [ 0 ] + j		      	  for ( int i = 0 ;					      while ( ( mi < mx ) ) {					  
	if place [ 0 ] < desired :			      	  i < r ;						    	int mid = mi + ( mx - mi ) / 2 ;			  
	    mi = mid + 1				      	  ++ i ) {						    	int [ ] place = new int [ r ] ;				  
	else :						      	    get = Arrays . binarySearch ( m [ i ] , mid ) ;	    	for ( int i = 0 ;					  
	    mx = mid					      	    if ( get < 0 ) get = Math . abs ( get ) - 1 ;	    	i < r ;							  
    print ( "Median is" , mi )				      	    else {						    	i ++ ) {						  
    return						      	      while ( get < m [ i ] . length && m [ i ] [ get ] ==  	  int j = upperBound ( m [ i ] , mid ) ;		  
							      	    }							    	  place [ 0 ] = place [ 0 ] + j ;			  
							      	    place = place + get ;				    	}							  
							      	  }							    	if ( place [ 0 ] < desired ) {				  
							      	  if ( place < desired ) min = mid + 1 ;		    	  mi = mid + 1 ;					  
							      	  else max = mid ;					    	}							  
							      	}							    	else {							  
							      	return min ;						    	  mx = mid ;						  
							      }								    	}							  
							      								      }								  
							      								      System . out . println ( "Median is" + mi ) ;		  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PRODUCT_SUBSET_ARRAY				      MINIMUM_PRODUCT_SUBSET_ARRAY				    MINIMUM_PRODUCT_SUBSET_ARRAY				  MINIMUM_PRODUCT_SUBSET_ARRAY
--							      --							    --								  --
def minProductSubset ( a , n ) :			      static int minProductSubset ( int a [ ] , int n ) {	    public static double minProductSubset ( double [ ] a , int n  error : MINIMUM_PRODUCT_SUBSET_ARRAY.java:65: erro
    if ( n == 1 ) :					      	if ( n == 1 ) return a [ 0 ] ;				      if ( ( n == 1 ) ) {					  r: incompatible types: possible lossy conversion f
	return a [ 0 ]					      	int negmax = Integer . MIN_VALUE ;			    	return a [ 0 ] ;					  rom double to int	prod = prod * a [ i ] ;
    max_neg = float ( '-inf' )				      	int posmin = Integer . MAX_VALUE ;			      }								  	      ^ MINIMUM_PRODUCT_SUBSET_ARRAY.java:10
    min_pos = float ( 'inf' )				      	int count_neg = 0 , count_zero = 0 ;			      double maxNeg = Double . NEGATIVE_INFINITY ;		  6: error: incompatible types: int[] cannot be conv
    count_neg = 0					      	int product = 1 ;					      double minPos = Double . POSITIVE_INFINITY ;		  erted to double[]	    if(f_filled(param0.get(i
    count_zero = 0					      	for ( int i = 0 ;					      int countNeg = 0 ;					  ),param1.get(i)) == f_gold(param0.get(i),param1.ge
    prod = 1						      	i < n ;							      int countZero = 0 ;					  t(i)))			       ^ Note: Some
    for i in range ( 0 , n ) :				      	i ++ ) {						      int prod = 1 ;						  messages have been simplified; recompile with -Xdi
	if ( a [ i ] == 0 ) :				      	  if ( a [ i ] == 0 ) {					      for ( int i = 0 ;						  ags:verbose to get full output 2 errors
	    count_zero = count_zero + 1			      	    count_zero ++ ;					      ( i <= n ) ;						  
	    continue					      	    continue ;						      i ++ ) {							  
	if ( a [ i ] < 0 ) :				      	  }							    	if ( ( a [ i ] == 0 ) ) {				  
	    count_neg = count_neg + 1			      	  if ( a [ i ] < 0 ) {					    	  countZero = countZero + 1 ;				  
	    max_neg = max ( max_neg , a [ i ] )		      	    count_neg ++ ;					    	  continue ;						  
	if ( a [ i ] > 0 ) :				      	    negmax = Math . max ( negmax , a [ i ] ) ;		    	}							  
	    min_pos = min ( min_pos , a [ i ] )		      	  }							    	if ( ( a [ i ] < 0 ) ) {				  
	prod = prod * a [ i ]				      	  if ( a [ i ] > 0 && a [ i ] < posmin ) posmin = a [ i ] ; 	  countNeg = countNeg + 1 ;				  
    if ( count_zero == n or ( count_neg == 0 and count_zero > 	  product *= a [ i ] ;					    	  maxNeg = Math . max ( maxNeg , a [ i ] ) ;		  
	return 0					      	}							    	}							  
    if ( count_neg == 0 ) :				      	if ( count_zero == n || ( count_neg == 0 && count_zero > 0  	if ( ( a [ i ] > 0 ) ) {				  
	return min_pos					      	if ( count_neg == 0 ) return posmin ;			    	  minPos = Math . min ( minPos , a [ i ] ) ;		  
    if ( ( count_neg & 1 ) == 0 and count_neg != 0 ) :	      	if ( count_neg % 2 == 0 && count_neg != 0 ) {		    	}							  
	prod = int ( prod / max_neg )			      	  product = product / negmax ;				    	prod = prod * a [ i ] ;					  
    return prod						      	}							      }								  
							      	return product ;					      if ( ( countZero == n ) || ( ( countNeg == 0 ) && ( countZe 
							      }								    	return 0 ;						  
							      								      }								  
							      								      if ( ( countNeg == 0 ) ) {				  
							      								    	return minPos ;						  
							      								      }								  
							      								      if ( ( ( countNeg & 1 ) == 0 ) && ( countNeg != 0 ) ) {	  
							      								    	prod = ( int ) ( prod / maxNeg ) ;			  
							      								      }								  
							      								      return prod ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MATRIX_ANTISPIRAL_FORM				      PRINT_MATRIX_ANTISPIRAL_FORM				    PRINT_MATRIX_ANTISPIRAL_FORM				  PRINT_MATRIX_ANTISPIRAL_FORM
--							      --							    --								  --
def antiSpiralTraversal ( m , n , a ) :			      public static void antiSpiralTraversal ( int m , int n , int  public static void antiSpiralTraversal ( int m , int n , int  script_not_found : None
    k = 0						      	int i , k = 0 , l = 0 ;					      int k = 0 ;						  
    l = 0						      	Stack < Integer > stk = new Stack < Integer > ( ) ;	      int l = 0 ;						  
    stk = [ ]						      	while ( k <= m && l <= n ) {				      Stack < Integer > stk = new Stack < > ( ) ;		  
    while ( k <= m and l <= n ) :			      	  for ( i = l ;						      while ( ( k <= m ) && ( l <= n ) ) {			  
	for i in range ( l , n + 1 ) :			      	  i <= n ;						    	for ( int i = l ;					  
	    stk.append ( a [ k ] [ i ] )		      	  ++ i ) stk . push ( a [ k ] [ i ] ) ;			    	i <= n ;						  
	k += 1						      	  k ++ ;						    	i ++ ) {						  
	for i in range ( k , m + 1 ) :			      	  for ( i = k ;						    	  stk . push ( a [ k ] [ i ] ) ;			  
	    stk.append ( a [ i ] [ n ] )		      	  i <= m ;						    	}							  
	n -= 1						      	  ++ i ) stk . push ( a [ i ] [ n ] ) ;			    	k ++ ;							  
	if ( k <= m ) :					      	  n -- ;						    	for ( int i = k ;					  
	    for i in range ( n , l - 1 , - 1 ) :	      	  if ( k <= m ) {					    	i <= m ;						  
		stk.append ( a [ m ] [ i ] )		      	    for ( i = n ;					    	i ++ ) {						  
	    m -= 1					      	    i >= l ;						    	  stk . push ( a [ i ] [ n ] ) ;			  
	if ( l <= n ) :					      	    -- i ) stk . push ( a [ m ] [ i ] ) ;		    	}							  
	    for i in range ( m , k - 1 , - 1 ) :	      	    m -- ;						    	n -- ;							  
		stk.append ( a [ i ] [ l ] )		      	  }							    	if ( ( k <= m ) ) {					  
	    l += 1					      	  if ( l <= n ) {					    	  for ( int i = n ;					  
    while len ( stk ) != 0 :				      	    for ( i = m ;					    	  i >= l ;						  
	print ( str ( stk [ - 1 ] ) , end = " " )	      	    i >= k ;						    	  i -- ) {						  
	stk.pop ( )					      	    -- i ) stk . push ( a [ i ] [ l ] ) ;		    	    stk . push ( a [ m ] [ i ] ) ;			  
							      	    l ++ ;						    	  }							  
							      	  }							    	  m -- ;						  
							      	}							    	}							  
							      	while ( ! stk . empty ( ) ) {				    	if ( ( l <= n ) ) {					  
							      	  System . out . print ( stk . peek ( ) + " " ) ;	    	  for ( int i = m ;					  
							      	  stk . pop ( ) ;					    	  i >= k ;						  
							      	}							    	  i -- ) {						  
							      }								    	    stk . push ( a [ i ] [ l ] ) ;			  
							      								    	  }							  
							      								    	  l ++ ;						  
							      								    	}							  
							      								      }								  
							      								      while ( stk . size ( ) != 0 ) {				  
							      								    	System . out . print ( stk . peek ( ) . toString ( ) ) ;  
							      								    	stk . pop ( ) ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH			      DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH			    DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH			  DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH
--							      --							    --								  --
def minCost ( cost , m , n ) :				      private static int minCost ( int cost [ ] [ ] , int m , int n public static int minCost ( int [ ] [ ] cost , int m , int n  script_not_found : None
    tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ]  	int i , j ;						      int [ ] [ ] tc = new int [ C ] [ R ] ;			  
    tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ]			      	int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			  
    for i in range ( 1 , m + 1 ) :			      	tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			      for ( int i = 1 ;						  
	tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0  	for ( i = 1 ;						      i <= m ;							  
    for j in range ( 1 , n + 1 ) :			      	i <= m ;						      i ++ ) {							  
	tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j  	i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 	tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;  
    for i in range ( 1 , m + 1 ) :			      	for ( j = 1 ;						      }								  
	for j in range ( 1 , n + 1 ) :			      	j <= n ;						      for ( int j = 1 ;						  
	    tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , t 	j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j   j <= n ;							  
    return tc [ m ] [ n ]				      	for ( i = 1 ;						      j ++ ) {							  
							      	i <= m ;						    	tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;  
							      	i ++ ) for ( j = 1 ;					      }								  
							      	j <= n ;						      for ( int i = 1 ;						  
							      	j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [   i <= m ;							  
							      	return tc [ m ] [ n ] ;					      i ++ ) {							  
							      }								    	for ( int j = 1 ;					  
							      								    	j <= n ;						  
							      								    	j ++ ) {						  
							      								    	  tc [ i ] [ j ] = Math . min ( tc [ i - 1 ] [ j - 1 ] ,  
							      								    	}							  
							      								      }								  
							      								      return tc [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA
--							      --							    --								  --
def maxdiff ( arr , n ) :				      static int maxdiff ( int arr [ ] , int n ) {		    public static int maxdiff ( int [ ] arr , int n ) {		  failure : #Results:6, 10
    freq = defaultdict ( lambda : 0 )			      	Map < Integer , Integer > freq = new HashMap < > ( ) ;	      Map < Integer , Integer > freq = new TreeMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	freq [ arr [ i ] ] += 1				      	i < n ;							      i < n ;							  
    ans = 0						      	i ++ ) freq . put ( arr [ i ] , freq . get ( arr [ i ] ) ==   i ++ ) {							  
    for i in range ( n ) :				      	int ans = 0 ;						    	freq . put ( arr [ i ] , 1 ) ;				  
	for j in range ( n ) :				      	for ( int i = 0 ;					      }								  
	    if freq [ arr [ i ] ] > freq [ arr [ j ] ] and ar 	i < n ;							      int ans = 0 ;						  
		ans = max ( ans , freq [ arr [ i ] ] - freq [ 	i ++ ) {						      for ( int i = 0 ;						  
	    elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and  	  for ( int j = 0 ;					      i < n ;							  
		ans = max ( ans , freq [ arr [ j ] ] - freq [ 	  j < n ;						      i ++ ) {							  
    return ans						      	  j ++ ) {						    	for ( int j = 0 ;					  
							      	    if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ]  	j < n ;							  
							      	    else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ 	j ++ ) {						  
							      	  }							    	  if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ]  
							      	}							    	    ans = Math . max ( ans , freq . get ( arr [ i ] ) - f 
							      	return ans ;						    	  }							  
							      }								    	  else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ 
							      								    	    ans = Math . max ( ans , freq . get ( arr [ j ] ) - f 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE				  LENGTH_LONGEST_BALANCED_SUBSEQUENCE
--							      --							    --								  --
def maxLength ( s , n ) :				      static int maxLength ( String s , int n ) {		    public static int maxLength ( String s , int n ) {		  script_not_found : None
    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]  	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] dp = new int [ n ] [ n ] ;			  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) :	      	i < n - 1 ;						      i < n ;							  
	    dp [ i ] [ i + 1 ] = 2			      	i ++ ) if ( s . charAt ( i ) == '(' && s . charAt ( i + 1 )   i ++ ) {							  
    for l in range ( 2 , n ) :				      	for ( int l = 2 ;					    	dp [ i ] [ i ] = 0 ;					  
	i = - 1						      	l < n ;							      }								  
	for j in range ( l , n ) :			      	l ++ ) {						      for ( int i = 0 ;						  
	    i += 1					      	  for ( int i = 0 , j = l ;				      i < n - 1 ;						  
	    if ( s [ i ] == '(' and s [ j ] == ')' ) :	      	  j < n ;						      i ++ ) {							  
		dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]   	  i ++ , j ++ ) {					    	if ( ( s . charAt ( i ) == '(' ) && ( s . charAt ( i + 1  
	    for k in range ( i , j ) :			      	    if ( s . charAt ( i ) == '(' && s . charAt ( j ) == ')' 	  dp [ i ] [ i + 1 ] = 2 ;				  
		dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [  	    for ( int k = i ;					    	}							  
    return dp [ 0 ] [ n - 1 ]				      	    k < j ;						      }								  
							      	    k ++ ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , d   for ( int l = 2 ;						  
							      	  }							      l < n ;							  
							      	}							      l ++ ) {							  
							      	return dp [ 0 ] [ n - 1 ] ;				    	int i = - 1 ;						  
							      }								    	for ( int j = l ;					  
							      								    	j < n ;							  
							      								    	j ++ ) {						  
							      								    	  i ++ ;						  
							      								    	  if ( ( s . charAt ( i ) == '(' ) && ( s . charAt ( j )  
							      								    	    dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ;	  
							      								    	  }							  
							      								    	  for ( int k = i ;					  
							      								    	  k < j ;						  
							      								    	  k ++ ) {						  
							      								    	    dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ 0 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	      MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	    MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE		  MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE
--							      --							    --								  --
def maxLower ( str ) :					      static int maxLower ( String str ) {			    public static int maxLower ( String str ) {			  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    for i in range ( n ) :				      	for ( ;							      for ( ;							  
	if str [ i ] >= 'A' and str [ i ] <= 'Z' :	      	i < n ;							      i < n ;							  
	    i += 1					      	i ++ ) {						      i ++ ) {							  
	    break					      	  if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 	if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 
    maxCount = 0					      	    i ++ ;						    	  i ++ ;						  
    count = [ ]						      	    break ;						    	  break ;						  
    for j in range ( MAX_CHAR ) :			      	  }							    	}							  
	count.append ( 0 )				      	}							      }								  
    for j in range ( i , n ) :				      	int maxCount = 0 ;					      int maxCount = 0 ;					  
	if str [ j ] >= 'A' and str [ j ] <= 'Z' :	      	int count [ ] = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ MAX_CHAR ] ;			  
	    currCount = 0				      	for ( ;							      for ( int j = 0 ;						  
	    for k in range ( MAX_CHAR ) :		      	i < n ;							      j < count . length ;					  
		if count [ k ] > 0 :			      	i ++ ) {						      j ++ ) {							  
		    currCount += 1			      	  if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 	count [ j ] = 0 ;					  
	    maxCount = max ( maxCount , currCount )	      	    int currCount = 0 ;					      }								  
	    for y in count :				      	    for ( int j = 0 ;					      for ( int j = i ;						  
		y = 0					      	    j < MAX_CHAR ;					      j < n ;							  
	if str [ j ] >= 'a' and str [ j ] <= 'z' :	      	    j ++ ) {						      j ++ ) {							  
	    count [ ord ( str [ j ] ) - ord ( 'a' ) ] += 1    	      if ( count [ j ] > 0 ) {				    	if ( str . charAt ( j ) >= 'A' && str . charAt ( j ) <= ' 
    return maxCount					      		currCount ++ ;					    	  int currCount = 0 ;					  
							      	      }							    	  for ( int k = 0 ;					  
							      	    }							    	  k < MAX_CHAR ;					  
							      	    maxCount = Math . max ( maxCount , currCount ) ;	    	  k ++ ) {						  
							      	    Arrays . fill ( count , 0 ) ;			    	    if ( count [ k ] > 0 ) {				  
							      	  }							    	      currCount ++ ;					  
							      	  if ( str . charAt ( i ) >= 'a' && str . charAt ( i ) <= ' 	    }							  
							      	    count [ str . charAt ( i ) - 'a' ] ++ ;		    	  }							  
							      	  }							    	  maxCount = Math . max ( maxCount , currCount ) ;	  
							      	}							    	  for ( int y = 0 ;					  
							      	return maxCount ;					    	  y < count . length ;					  
							      }								    	  y ++ ) {						  
							      								    	    count [ y ] = 0 ;					  
							      								    	  }							  
							      								    	}							  
							      								    	if ( str . charAt ( j ) >= 'a' && str . charAt ( j ) <= ' 
							      								    	  count [ ( int ) str . charAt ( j ) - 'a' ] ++ ;	  
							      								    	}							  
							      								      }								  
							      								      return maxCount ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS  COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS  COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS  COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS
--							      --							    --								  --
def countStrings ( n , k ) :				      static int countStrings ( int n , int k ) {		    static int countStrings ( int n , int k ) {			  error : COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJ
    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in r 	int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ;      int [ ] [ ] dp = new int [ k + 1 ] [ n + 1 ] ;		  ACENT_TWO_SET_BITS.java:36: error: array required,
    dp [ 1 ] [ 0 ] [ 0 ] = 1				      	dp [ 1 ] [ 0 ] [ 0 ] = 1 ;				      dp [ 1 ] [ 0 ] [ 0 ] = 1 ;				   but int found   dp [ 1 ] [ 0 ] [ 0 ] = 1 ;
    dp [ 1 ] [ 0 ] [ 1 ] = 1				      	dp [ 1 ] [ 0 ] [ 1 ] = 1 ;				      dp [ 1 ] [ 0 ] [ 1 ] = 1 ;				  	     ^ COUNT_BINARY_STRINGS_K_TIMES_APPEARIN
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  G_ADJACENT_TWO_SET_BITS.java:37: error: array requ
	for j in range ( k + 1 ) :			      	i <= n ;						      i <= n ;							  ired, but int found	dp [ 1 ] [ 0 ] [ 1 ] = 1 ;
	    dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] 	i ++ ) {						      i ++ ) {							  		  ^ COUNT_BINARY_STRINGS_K_TIMES_APP
	    dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]   	  for ( int j = 0 ;					    	for ( int j = 0 ;					  EARING_ADJACENT_TWO_SET_BITS.java:44: error: array
	    if j >= 1 :					      	  j < i && j < k + 1 ;					    	j <= k ;						   required, but int found	 dp [ i ] [ j ] [ 0
		dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1  	  j ++ ) {						    	j ++ ) {						  ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j
    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]	      	    dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [  	  dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp  ] [ 1 ] ) ;			   ^ COUNT_BINARY_ST
							      	    dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;	    	  dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;	  RINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS.java
							      	    if ( j - 1 >= 0 ) {					    	  if ( j >= 1 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j  :44: error: array required, but int found	  dp
							      	      dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]  	}							   [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] +
							      	    }							      }								  dp [ i - 1 ] [ j ] [ 1 ] ) ;
							      	  }							      return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;	  			       ^ COUNT_BINARY_STRING
							      	}							    }								  S_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS.java:44:
							      	return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;	    								   error: array required, but int found	      dp [ i
							      }								    								   ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [
							      								    								   i - 1 ] [ j ] [ 1 ] ) ;
							      								    								  
							      								    								    ^ COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACEN
							      								    								  T_TWO_SET_BITS.java:45: error: array required, but
							      								    								   int found	   dp [ i ] [ j ] [ 1 ] = dp [ i - 1
							      								    								   ] [ j ] [ 0 ] ;			^ COUNT_BINA
							      								    								  RY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS
							      								    								  .java:45: error: array required, but int found
							      								    								     dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]
							      								    								   ;
							      								    								   ^ COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT
							      								    								  _TWO_SET_BITS.java:46: error: array required, but
							      								    								  int found	  if ( j >= 1 ) dp [ i ] [ j ] [ 1 ]
							      								    								   += dp [ i - 1 ] [ j - 1 ] [ 1 ] ;
							      								    								  		      ^ COUNT_BINARY_STRINGS_K_TIMES
							      								    								  _APPEARING_ADJACENT_TWO_SET_BITS.java:46: error: a
							      								    								  rray required, but int found	     if ( j >= 1 ) d
							      								    								  p [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1
							      								    								  ] ;
							      								    								  		       ^ COUNT_BINARY_STRINGS_K_TIME
							      								    								  S_APPEARING_ADJACENT_TWO_SET_BITS.java:49: error:
							      								    								  array required, but int found	  return dp [ n ] [
							      								    								  k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;
							      								    								  	   ^ COUNT_BINARY_STRINGS_K_TIMES_APPEARING_
							      								    								  ADJACENT_TWO_SET_BITS.java:49: error: array requir
							      								    								  ed, but int found   return dp [ n ] [ k ] [ 0 ] +
							      								    								  dp [ n ] [ k ] [ 1 ] ;
							      								    								  		      ^ 11 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K	      COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K		    COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K		  COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K
--							      --							    --								  --
def countDistinct ( arr , k , n ) :			      static void countDistinct ( int arr [ ] , int k ) {	    static void countDistinct ( int [ ] arr , int k , int n ) {	  script_not_found : None
    mp = defaultdict ( lambda : 0 )			      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    Map < Integer , Integer > mp = new TreeMap < > ( ) ;	  
    dist_count = 0					      	int dist_count = 0 ;					      int distCount = 0 ;					  
    for i in range ( k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if mp [ arr [ i ] ] == 0 :			      	i < k ;							      i < k ;							  
	    dist_count += 1				      	i ++ ) {						      i ++ ) {							  
	mp [ arr [ i ] ] += 1				      	  if ( hM . get ( arr [ i ] ) == null ) {		    	if ( mp . get ( arr [ i ] ) == 0 ) {			  
    print ( dist_count )				      	    hM . put ( arr [ i ] , 1 ) ;			    	  distCount ++ ;					  
    for i in range ( k , n ) :				      	    dist_count ++ ;					    	}							  
	if mp [ arr [ i - k ] ] == 1 :			      	  }							    	mp . put ( arr [ i ] , 1 ) ;				  
	    dist_count -= 1				      	  else {						      }								  
	mp [ arr [ i - k ] ] -= 1			      	    int count = hM . get ( arr [ i ] ) ;		      System . out . println ( distCount ) ;			  
	if mp [ arr [ i ] ] == 0 :			      	    hM . put ( arr [ i ] , count + 1 ) ;		      for ( int i = k ;						  
	    dist_count += 1				      	  }							      i < n ;							  
	mp [ arr [ i ] ] += 1				      	}							      i ++ ) {							  
	print ( dist_count )				      	System . out . println ( dist_count ) ;			    	if ( mp . get ( arr [ i - k ] ) == 1 ) {		  
							      	for ( int i = k ;					    	  distCount -- ;					  
							      	i < arr . length ;					    	}							  
							      	i ++ ) {						    	mp . put ( arr [ i - k ] , 1 ) ;			  
							      	  if ( hM . get ( arr [ i - k ] ) == 1 ) {		    	if ( mp . get ( arr [ i ] ) == 0 ) {			  
							      	    hM . remove ( arr [ i - k ] ) ;			    	  distCount ++ ;					  
							      	    dist_count -- ;					    	}							  
							      	  }							    	mp . put ( arr [ i ] , 1 ) ;				  
							      	  else {						    	System . out . println ( distCount ) ;			  
							      	    int count = hM . get ( arr [ i - k ] ) ;		      }								  
							      	    hM . put ( arr [ i - k ] , count - 1 ) ;		    }								  
							      	  }							    								  
							      	  if ( hM . get ( arr [ i ] ) == null ) {		    								  
							      	    hM . put ( arr [ i ] , 1 ) ;			    								  
							      	    dist_count ++ ;					    								  
							      	  }							    								  
							      	  else {						    								  
							      	    int count = hM . get ( arr [ i ] ) ;		    								  
							      	    hM . put ( arr [ i ] , count + 1 ) ;		    								  
							      	  }							    								  
							      	  System . out . println ( dist_count ) ;		    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINTING_STRING_PLUS_PATTERN_MATRIX			      PRINTING_STRING_PLUS_PATTERN_MATRIX			    PRINTING_STRING_PLUS_PATTERN_MATRIX				  PRINTING_STRING_PLUS_PATTERN_MATRIX
--							      --							    --								  --
def carveCross ( str ) :				      static void carveCross ( String str ) {			    public static void carveCross ( String str ) {		  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    if ( n % 2 == 0 ) :					      	if ( n % 2 == 0 ) {					      if ( ( n % 2 == 0 ) ) {					  
	print ( "Not possible.Please enter " , "odd length st 	  System . out . print ( "Not possible. Please enter " + "o 	System . out . println ( "Not possible. Please enter " +  
    else :						      	}							      }								  
	arr = [ [ False for x in range ( max ) ] for y in ran 	else {							      else {							  
	m = n // 2					      	  char arr [ ] [ ] = new char [ max ] [ max ] ;		    	boolean [ ] [ ] arr = new boolean [ max ] [ max ] ;	  
	for i in range ( n ) :				      	  int m = n / 2 ;					    	for ( int x = 0 ;					  
	    for j in range ( n ) :			      	  for ( int i = 0 ;					    	x < max ;						  
		arr [ i ] [ j ] = 'X'			      	  i < n ;						    	x ++ ) {						  
	for i in range ( n ) :				      	  i ++ ) {						    	  for ( int y = 0 ;					  
	    arr [ i ] [ m ] = str [ i ]			      	    for ( int j = 0 ;					    	  y < max ;						  
	for i in range ( n ) :				      	    j < n ;						    	  y ++ ) {						  
	    arr [ m ] [ i ] = str [ i ]			      	    j ++ ) {						    	    arr [ x ] [ y ] = false ;				  
	for i in range ( n ) :				      	      arr [ i ] [ j ] = 'X' ;				    	  }							  
	    for j in range ( n ) :			      	    }							    	}							  
		print ( arr [ i ] [ j ] , end = " " )	      	  }							    	int m = n / 2 ;						  
	    print ( )					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
							      	  i < n ;						    	i < n ;							  
							      	  i ++ ) {						    	i ++ ) {						  
							      	    arr [ i ] [ m ] = str . charAt ( i ) ;		    	  for ( int j = 0 ;					  
							      	  }							    	  j < n ;						  
							      	  for ( int i = 0 ;					    	  j ++ ) {						  
							      	  i < n ;						    	    arr [ i ] [ j ] = 'X' ;				  
							      	  i ++ ) {						    	  }							  
							      	    arr [ m ] [ i ] = str . charAt ( i ) ;		    	}							  
							      	  }							    	for ( int i = 0 ;					  
							      	  for ( int i = 0 ;					    	i < n ;							  
							      	  i < n ;						    	i ++ ) {						  
							      	  i ++ ) {						    	  arr [ i ] [ m ] = str . charAt ( i ) ;		  
							      	    for ( int j = 0 ;					    	}							  
							      	    j < n ;						    	for ( int i = 0 ;					  
							      	    j ++ ) {						    	i < n ;							  
							      	      System . out . print ( arr [ i ] [ j ] + " " ) ;	    	i ++ ) {						  
							      	    }							    	  arr [ m ] [ i ] = str . charAt ( i ) ;		  
							      	    System . out . print ( "\n" ) ;			    	}							  
							      	  }							    	for ( int i = 0 ;					  
							      	}							    	i < n ;							  
							      }								    	i ++ ) {						  
							      								    	  for ( int j = 0 ;					  
							      								    	  j < n ;						  
							      								    	  j ++ ) {						  
							      								    	    System . out . print ( arr [ i ] [ j ] + " " ) ;	  
							      								    	  }							  
							      								    	  System . out . println ( ) ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY		      MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY			    MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY			  MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY
--							      --							    --								  --
def minSwaps ( arr ) :					      public static int minSwaps ( int [ ] arr ) {		    public static int minSwaps ( int [ ] arr ) {		  script_not_found : None
    n = len ( arr )					      	int n = arr . length ;					      int n = arr . length ;					  
    arrpos = [ * enumerate ( arr ) ]			      	ArrayList < Pair < Integer , Integer >> arrpos = new ArrayL   int [ ] [ ] arrpos = new int [ n ] [ n ] ;		  
    arrpos.sort ( key = lambda it : it [ 1 ] )		      	for ( int i = 0 ;					      Arrays . sort ( arrpos , new Comparator < int [ ] > ( ) {	  
    vis = { k : False for k in range ( n ) }		      	i < n ;							    	public int compare ( int [ ] it , int [ ] o1 ) {	  
    ans = 0						      	i ++ ) arrpos . add ( new Pair < Integer , Integer > ( arr  	  return it [ 1 ] - it [ 0 ] ;				  
    for i in range ( n ) :				      	arrpos . sort ( new Comparator < Pair < Integer , Integer > 	}							  
	if vis [ i ] or arrpos [ i ] [ 0 ] == i :	      	  @ Override public int compare ( Pair < Integer , Integer    }								  
	    continue					      	    if ( o1 . getKey ( ) > o2 . getKey ( ) ) return - 1 ;     ) ;							  
	cycle_size = 0					      	    else if ( o1 . getKey ( ) . equals ( o2 . getKey ( ) )    Map < Integer , Boolean > vis = new HashMap < > ( ) ;	  
	j = i						      	    else return 1 ;					      for ( int k = 0 ;						  
	while not vis [ j ] :				      	  }							      k < n ;							  
	    vis [ j ] = True				      	}							      k ++ ) {							  
	    j = arrpos [ j ] [ 0 ]			      	) ;							    	vis . put ( k , Boolean . FALSE ) ;			  
	    cycle_size += 1				      	Boolean [ ] vis = new Boolean [ n ] ;			      }								  
	if cycle_size > 0 :				      	Arrays . fill ( vis , false ) ;				      int ans = 0 ;						  
	    ans += ( cycle_size - 1 )			      	int ans = 0 ;						      for ( int i = 0 ;						  
    return ans						      	for ( int i = 0 ;					      i < n ;							  
							      	i < n ;							      i ++ ) {							  
							      	i ++ ) {						    	if ( vis . get ( i ) || arrpos [ i ] [ 0 ] == i ) continu 
							      	  if ( vis [ i ] || arrpos . get ( i ) . getValue ( ) == i  	int cycleSize = 0 ;					  
							      	  int cycle_size = 0 ;					    	int j = i ;						  
							      	  int j = i ;						    	while ( ! vis . get ( j ) ) {				  
							      	  while ( ! vis [ j ] ) {				    	  vis . put ( j , Boolean . TRUE ) ;			  
							      	    vis [ j ] = true ;					    	  j = arrpos [ j ] [ 0 ] ;				  
							      	    j = arrpos . get ( j ) . getValue ( ) ;		    	  cycleSize ++ ;					  
							      	    cycle_size ++ ;					    	}							  
							      	  }							    	if ( cycleSize > 0 ) ans += ( cycleSize - 1 ) ;		  
							      	  if ( cycle_size > 0 ) {				      }								  
							      	    ans += ( cycle_size - 1 ) ;				      return ans ;						  
							      	  }							    }								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1		    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1
--							      --							    --								  --
def findGreatest ( arr , n ) :				      static int findGreatest ( int arr [ ] , int n ) {		    public static int findGreatest ( int [ ] arr , int n ) {	  script_not_found : None
    m = dict ( )					      	Map < Integer , Integer > m = new HashMap < > ( ) ;	      Map < Integer , Integer > m = new HashMap < > ( ) ;	  
    for i in arr :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	m [ i ] = m.get ( i , 0 ) + 1			      	i < n ;							      i < arr . length ;					  
    arr = sorted ( arr )				      	i ++ ) {						      i ++ ) {							  
    for i in range ( n - 1 , 0 , - 1 ) :		      	  if ( m . containsKey ( arr [ i ] ) ) {		    	m . put ( arr [ i ] , m . getOrDefault ( arr [ i ] , 0 )  
	j = 0						      	    m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ;	      }								  
	while ( j < i and arr [ j ] <= sqrt ( arr [ i ] ) ) : 	  }							      Arrays . sort ( arr ) ;					  
	    if ( arr [ i ] % arr [ j ] == 0 ) :		      	  else {						      for ( int i = n - 1 ;					  
		result = arr [ i ] // arr [ j ]		      	    m . put ( arr [ i ] , m . get ( arr [ i ] ) ) ;	      i > 0 ;							  
		if ( result != arr [ j ] and ( result in m.ke 	  }							      i -- ) {							  
		    return arr [ i ]			      	}							    	int j = 0 ;						  
		elif ( result == arr [ j ] and ( result in m. 	Arrays . sort ( arr ) ;					    	while ( ( j < i ) && ( arr [ j ] <= Math . sqrt ( arr [ i 
		    return arr [ i ]			      	for ( int i = n - 1 ;					    	  if ( ( arr [ i ] % arr [ j ] == 0 ) ) {		  
	    j += 1					      	i > 1 ;							    	    int result = arr [ i ] / arr [ j ] ;		  
    return - 1						      	i -- ) {						    	    if ( ( result != arr [ j ] && ( m . keySet ( ) . cont 
							      	  for ( int j = 0 ;					    	      return arr [ i ] ;				  
							      	  j < i && arr [ j ] <= Math . sqrt ( arr [ i ] ) ;	    	    }							  
							      	  j ++ ) {						    	    else if ( ( result == arr [ j ] && ( m . keySet ( ) . 
							      	    if ( arr [ i ] % arr [ j ] == 0 ) {			    	      return arr [ i ] ;				  
							      	      int result = arr [ i ] / arr [ j ] ;		    	    }							  
							      	      if ( result != arr [ j ] && m . get ( result ) == nul 	  }							  
							      		return arr [ i ] ;				    	  j ++ ;						  
							      	      }							    	}							  
							      	      else if ( result == arr [ j ] && m . get ( result ) >   }								  
							      		return arr [ i ] ;				      return - 1 ;						  
							      	      }							    }								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return - 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1	      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1
--							      --							    --								  --
def eggDrop ( n , k ) :					      static int eggDrop ( int n , int k ) {			    public static int eggDrop ( int n , int k ) {		  script_not_found : None
    eggFloor = [ [ 0 for x in range ( k + 1 ) ] for x in rang 	int eggFloor [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;	      int [ ] [ ] eggFloor = new int [ k + 1 ] [ n + 1 ] ;	  
    for i in range ( 1 , n + 1 ) :			      	int res ;						      for ( int x = 0 ;						  
	eggFloor [ i ] [ 1 ] = 1			      	int i , j , x ;						      x < n ;							  
	eggFloor [ i ] [ 0 ] = 0			      	for ( i = 1 ;						      x ++ ) {							  
    for j in range ( 1 , k + 1 ) :			      	i <= n ;						    	for ( int j = 0 ;					  
	eggFloor [ 1 ] [ j ] = j			      	i ++ ) {						    	j < k ;							  
    for i in range ( 2 , n + 1 ) :			      	  eggFloor [ i ] [ 1 ] = 1 ;				    	j ++ ) {						  
	for j in range ( 2 , k + 1 ) :			      	  eggFloor [ i ] [ 0 ] = 0 ;				    	  eggFloor [ i ] [ j ] = 0 ;				  
	    eggFloor [ i ] [ j ] = INT_MAX		      	}							    	}							  
	    for x in range ( 1 , j + 1 ) :		      	for ( j = 1 ;						      }								  
		res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ]  	j <= k ;						      for ( int i = 1 ;						  
		if res < eggFloor [ i ] [ j ] :		      	j ++ ) eggFloor [ 1 ] [ j ] = j ;			      i <= n ;							  
		    eggFloor [ i ] [ j ] = res		      	for ( i = 2 ;						      i ++ ) {							  
    return eggFloor [ n ] [ k ]				      	i <= n ;						    	eggFloor [ i ] [ 1 ] = 1 ;				  
							      	i ++ ) {						    	eggFloor [ i ] [ 0 ] = 0 ;				  
							      	  for ( j = 2 ;						      }								  
							      	  j <= k ;						      for ( int j = 1 ;						  
							      	  j ++ ) {						      j <= k ;							  
							      	    eggFloor [ i ] [ j ] = Integer . MAX_VALUE ;	      j ++ ) {							  
							      	    for ( x = 1 ;					    	eggFloor [ 1 ] [ j ] = j ;				  
							      	    x <= j ;						      }								  
							      	    x ++ ) {						      for ( int i = 2 ;						  
							      	      res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFlo   i <= n ;							  
							      	      if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j    i ++ ) {							  
							      	    }							    	for ( int j = 2 ;					  
							      	  }							    	j <= k ;						  
							      	}							    	j ++ ) {						  
							      	return eggFloor [ n ] [ k ] ;				    	  eggFloor [ i ] [ j ] = Math . max ( eggFloor [ i - 1 ]  
							      }								    	  if ( res < eggFloor [ i ] [ j ] ) {			  
							      								    	    eggFloor [ i ] [ j ] = res ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return eggFloor [ n ] [ k ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY		      FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY		    FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY		  FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY
--							      --							    --								  --
def findRepeatingNumber ( arr , n ) :			      static int findRepeatingNumber ( int [ ] arr , int n ) {	    static int findRepeatingNumber ( int [ ] arr , int n ) {	  script_not_found : None
    sq = sqrt ( n )					      	int sq = ( int ) Math . sqrt ( n ) ;			      double sq = Math . sqrt ( n ) ;				  
    range__ = int ( ( n / sq ) + 1 )			      	int range = ( n / sq ) + 1 ;				      int range__ = ( int ) ( ( n / sq ) + 1 ) ;		  
    count = [ 0 for i in range ( range__ ) ]		      	int [ ] count = new int [ range ] ;			      int [ ] count = new int [ range__ ] ;			  
    for i in range ( 0 , n + 1 , 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count [ int ( ( arr [ i ] - 1 ) / sq ) ] += 1	      	i <= n ;						      i <= n ;							  
    selected_block = range__ - 1			      	i ++ ) {						      i += 1 ) count [ ( int ) ( ( arr [ i ] - 1 ) / sq ) ] ++ ;  
    for i in range ( 0 , range__ - 1 , 1 ) :		      	  count [ ( arr [ i ] - 1 ) / sq ] ++ ;			      int selected_block = range__ - 1 ;			  
	if ( count [ i ] > sq ) :			      	}							      for ( int i = 0 ;						  
	    selected_block = i				      	int selected_block = range - 1 ;			      i <= range__ - 1 ;					  
	    break					      	for ( int i = 0 ;					      i += 1 ) {						  
    m = { i : 0 for i in range ( n ) }			      	i < range - 1 ;						    	if ( ( count [ i ] > sq ) ) {				  
    for i in range ( 0 , n + 1 , 1 ) :			      	i ++ ) {						    	  selected_block = i ;					  
	if ( ( ( selected_block * sq ) < arr [ i ] ) and ( ar 	  if ( count [ i ] > sq ) {				    	  break ;						  
	    m [ arr [ i ] ] += 1			      	    selected_block = i ;				    	}							  
	    if ( m [ arr [ i ] ] > 1 ) :		      	    break ;						      }								  
		return arr [ i ]			      	  }							      HashMap < Integer , Integer > m = new HashMap < > ( ) ;	  
    return - 1						      	}							      for ( int i = 0 ;						  
							      	HashMap < Integer , Integer > m = new HashMap < > ( ) ;	      i < n ;							  
							      	for ( int i = 0 ;					      i += 1 ) {						  
							      	i <= n ;						    	if ( ( ( ( selected_block * sq ) < arr [ i ] ) && ( arr [ 
							      	i ++ ) {						    	  m . put ( arr [ i ] , 1 ) ;				  
							      	  if ( ( ( selected_block * sq ) < arr [ i ] ) && ( arr [ i 	  if ( ( m . get ( arr [ i ] ) ) > 1 ) return arr [ i ] ; 
							      	    m . put ( arr [ i ] , 1 ) ;				    	}							  
							      	    if ( m . get ( arr [ i ] ) == 1 ) return arr [ i ] ;      }								  
							      	  }							      return - 1 ;						  
							      	}							    }								  
							      	return - 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1		      SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1			    SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1			  SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1
--							      --							    --								  --
def sortSquares ( arr , n ) :				      public static void sortSquares ( int arr [ ] ) {		    public static void sortSquares ( int [ ] arr , int n ) {	  script_not_found : None
    K = 0						      	int n = arr . length ;					      int K = 0 ;						  
    for K in range ( n ) :				      	int k ;							      for ( ;							  
	if ( arr [ K ] >= 0 ) :				      	for ( k = 0 ;						      K < n ;							  
	    break					      	k < n ;							      K ++ ) {							  
    i = K - 1						      	k ++ ) {						    	if ( ( arr [ K ] >= 0 ) ) break ;			  
    j = K						      	  if ( arr [ k ] >= 0 ) break ;				      }								  
    ind = 0						      	}							      int i = K - 1 ;						  
    temp = [ 0 ] * n					      	int i = k - 1 ;						      int j = K ;						  
    while ( i >= 0 and j < n ) :			      	int j = k ;						      int ind = 0 ;						  
	if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] )  	int ind = 0 ;						      int [ ] temp = new int [ n ] ;				  
	    temp [ ind ] = arr [ i ] * arr [ i ]	      	int [ ] temp = new int [ n ] ;				      while ( ( i >= 0 ) && ( j < n ) ) {			  
	    i -= 1					      	while ( i >= 0 && j < n ) {				    	if ( ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) )  
	else :						      	  if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {    	  temp [ ind ] = arr [ i ] * arr [ i ] ;		  
	    temp [ ind ] = arr [ j ] * arr [ j ]	      	    temp [ ind ] = arr [ i ] * arr [ i ] ;		    	  i -- ;						  
	    j += 1					      	    i -- ;						    	}							  
	ind += 1					      	  }							    	else {							  
    while ( i >= 0 ) :					      	  else {						    	  temp [ ind ] = arr [ j ] * arr [ j ] ;		  
	temp [ ind ] = arr [ i ] * arr [ i ]		      	    temp [ ind ] = arr [ j ] * arr [ j ] ;		    	  j ++ ;						  
	i -= 1						      	    j ++ ;						    	}							  
	ind += 1					      	  }							    	ind ++ ;						  
    while ( j < n ) :					      	  ind ++ ;						      }								  
	temp [ ind ] = arr [ j ] * arr [ j ]		      	}							      while ( ( i >= 0 ) ) {					  
	j += 1						      	while ( i >= 0 ) {					    	temp [ ind ] = arr [ i ] * arr [ i ] ;			  
	ind += 1					      	  temp [ ind ++ ] = arr [ i ] * arr [ i ] ;		    	i -- ;							  
    for i in range ( n ) :				      	  i -- ;						    	ind ++ ;						  
	arr [ i ] = temp [ i ]				      	}							      }								  
							      	while ( j < n ) {					      while ( ( j < n ) ) {					  
							      	  temp [ ind ++ ] = arr [ j ] * arr [ j ] ;		    	temp [ ind ] = arr [ j ] * arr [ j ] ;			  
							      	  j ++ ;						    	j ++ ;							  
							      	}							    	ind ++ ;						  
							      	for ( int x = 0 ;					      }								  
							      	x < n ;							      for ( i = 0 ;						  
							      	x ++ ) arr [ x ] = temp [ x ] ;				      i < n ;							  
							      }								      i ++ ) arr [ i ] = temp [ i ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING		      SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING		    SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING			  SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING
--							      --							    --								  --
def findSubString ( str ) :				      static String findSubString ( String str ) {		    static String findSubString ( String str ) {		  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    dist_count = len ( set ( [ x for x in str ] ) )	      	int dist_count = 0 ;					      int distCount = new HashSet ( ) . size ( ) ;		  
    count , start , start_index , min_len = 0 , 0 , - 1 , 999 	boolean [ ] visited = new boolean [ MAX_CHARS ] ;	      for ( int i = 0 ;						  
    curr_count = defaultdict ( lambda : 0 )		      	Arrays . fill ( visited , false ) ;			      i < str . length ( ) ;					  
    for j in range ( n ) :				      	for ( int i = 0 ;					      i ++ ) {							  
	curr_count [ str [ j ] ] += 1			      	i < n ;							    	distCount . add ( str . charAt ( i ) ) ;		  
	if curr_count [ str [ j ] ] == 1 :		      	i ++ ) {						      }								  
	    count += 1					      	  if ( visited [ str . charAt ( i ) ] == false ) {	      int count = 0 , start = 0 , startIndex = - 1 , minLen = 999 
	if count == dist_count :			      	    visited [ str . charAt ( i ) ] = true ;		      Map < Character , Integer > currCount = new HashMap ( ) ;	  
	    while curr_count [ str [ start ] ] > 1 :	      	    dist_count ++ ;					      for ( int j = 0 ;						  
		if curr_count [ str [ start ] ] > 1 :	      	  }							      j < n ;							  
		    curr_count [ str [ start ] ] -= 1	      	}							      j ++ ) {							  
		start += 1				      	int start = 0 , start_index = - 1 ;			    	currCount . put ( str . charAt ( j ) , 1 ) ;		  
	    len_window = j - start + 1			      	int min_len = Integer . MAX_VALUE ;			    	if ( currCount . get ( str . charAt ( j ) ) == 1 ) count  
	    if min_len > len_window :			      	int count = 0 ;						    	if ( count == distCount ) {				  
		min_len = len_window			      	int [ ] curr_count = new int [ MAX_CHARS ] ;		    	  while ( currCount . get ( str . charAt ( start ) ) > 1  
		start_index = start			      	for ( int j = 0 ;					    	    if ( currCount . get ( str . charAt ( start ) ) > 1 ) 
    return str [ start_index : start_index + min_len ]	      	j < n ;							    	    start ++ ;						  
							      	j ++ ) {						    	  }							  
							      	  curr_count [ str . charAt ( j ) ] ++ ;		    	  int lenWindow = j - start + 1 ;			  
							      	  if ( curr_count [ str . charAt ( j ) ] == 1 ) count ++ ;  	  if ( minLen > lenWindow ) {				  
							      	  if ( count == dist_count ) {				    	    minLen = lenWindow ;				  
							      	    while ( curr_count [ str . charAt ( start ) ] > 1 ) {   	    startIndex = start ;				  
							      	      if ( curr_count [ str . charAt ( start ) ] > 1 ) curr 	  }							  
							      	      start ++ ;					    	}							  
							      	    }							      }								  
							      	    int len_window = j - start + 1 ;			      return str . substring ( startIndex , startIndex + minLen ) 
							      	    if ( min_len > len_window ) {			    }								  
							      	      min_len = len_window ;				    								  
							      	      start_index = start ;				    								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return str . substring ( start_index , start_index + min_le 								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	      EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	    EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING		  EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING
--							      --							    --								  --
def evaluateBoolExpr ( s ) :				      static int evaluateBoolExpr ( StringBuffer s ) {		    static int evaluateBoolExpr ( String s ) {			  script_not_found : None
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    for i in range ( 0 , n - 2 , 2 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( s [ i + 1 ] == "A" ) :			      	i < n ;							      i < n - 2 ;						  
	    if ( s [ i + 2 ] == "0" or s [ i ] == "0" ) :     	i += 2 ) {						      i += 2 ) {						  
		s [ i + 2 ] = "0"			      	  if ( i + 1 < n && i + 2 < n ) {			    	if ( ( s . charAt ( i + 1 ) == 'A' ) ) {		  
	    else :					      	    if ( s . charAt ( i + 1 ) == 'A' ) {		    	  if ( ( s . charAt ( i + 2 ) == '0' || s . charAt ( i )  
		s [ i + 2 ] = "1"			      	      if ( s . charAt ( i + 2 ) == '0' || s . charAt ( i )  	    s . setCharAt ( i + 2 , '0' ) ;			  
	elif ( s [ i + 1 ] == "B" ) :			      	      else s . setCharAt ( i + 2 , '1' ) ;		    	  }							  
	    if ( s [ i + 2 ] == "1" or s [ i ] == "1" ) :     	    }							    	  else {						  
		s [ i + 2 ] = "1"			      	    else if ( ( i + 1 ) < n && s . charAt ( i + 1 ) == 'B'  	    s . setCharAt ( i + 2 , '1' ) ;			  
	    else :					      	      if ( s . charAt ( i + 2 ) == '1' || s . charAt ( i )  	  }							  
		s [ i + 2 ] = "0"			      	      else s . setCharAt ( i + 2 , '0' ) ;		    	}							  
	else :						      	    }							    	else if ( ( s . charAt ( i + 1 ) == 'B' ) ) {		  
	    if ( s [ i + 2 ] == s [ i ] ) :		      	    else {						    	  if ( ( s . charAt ( i + 2 ) == '1' || s . charAt ( i )  
		s [ i + 2 ] = "0"			      	      if ( s . charAt ( i + 2 ) == s . charAt ( i ) ) s . s 	    s . setCharAt ( i + 2 , '1' ) ;			  
	    else :					      	      else s . setCharAt ( i + 2 , '1' ) ;		    	  }							  
		s [ i + 2 ] = "1"			      	    }							    	  else {						  
    return ord ( s [ n - 1 ] ) - ord ( "0" )		      	  }							    	    s . setCharAt ( i + 2 , '0' ) ;			  
							      	}							    	  }							  
							      	return s . charAt ( n - 1 ) - '0' ;			    	}							  
							      }								    	else {							  
							      								    	  if ( ( s . charAt ( i + 2 ) == s . charAt ( i ) ) ) {	  
							      								    	    s . setCharAt ( i + 2 , '0' ) ;			  
							      								    	  }							  
							      								    	  else {						  
							      								    	    s . setCharAt ( i + 2 , '1' ) ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( int ) s . charAt ( n - 1 ) - '0' ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_ENDLESS_POINTS				      FIND_NUMBER_ENDLESS_POINTS				    FIND_NUMBER_ENDLESS_POINTS					  FIND_NUMBER_ENDLESS_POINTS
--							      --							    --								  --
def countEndless ( input_mat , n ) :			      static int countEndless ( boolean input [ ] [ ] , int n ) {   public static int countEndless ( int [ ] [ ] inputMat , int n error : FIND_NUMBER_ENDLESS_POINTS.java:119: error
    row = np.zeros ( ( n , n ) )			      	boolean row [ ] [ ] = new boolean [ n ] [ n ] ;		      int [ ] [ ] row = new int [ n ] [ n ] ;			  : incompatible types: boolean[][] cannot be conver
    col = np.zeros ( ( n , n ) )			      	boolean col [ ] [ ] = new boolean [ n ] [ n ] ;		      int [ ] [ ] col = new int [ n ] [ n ] ;			  ted to int[][]	 if(f_filled(param0.get(i),p
    for j in range ( n ) :				      	for ( int j = 0 ;					      for ( int j = 0 ;						  aram1.get(i)) == f_gold(param0.get(i),param1.get(i
	isEndless = 1					      	j < n ;							      j < n ;							  )))				    ^ Note: Some mes
	for i in range ( n - 1 , - 1 , - 1 ) :		      	j ++ ) {						      j ++ ) {							  sages have been simplified; recompile with -Xdiags
	    if ( input_mat [ i ] [ j ] == 0 ) :		      	  boolean isEndless = true ;				    	int isEndless = 1 ;					  :verbose to get full output 1 error
		isEndless = 0				      	  for ( int i = n - 1 ;					    	for ( int i = n - 1 ;					  
	    col [ i ] [ j ] = isEndless			      	  i >= 0 ;						    	i >= 0 ;						  
    for i in range ( n ) :				      	  i -- ) {						    	i -- ) {						  
	isEndless = 1					      	    if ( input [ i ] [ j ] == false ) isEndless = false ;   	  if ( ( inputMat [ i ] [ j ] == 0 ) ) {		  
	for j in range ( n - 1 , - 1 , - 1 ) :		      	    col [ i ] [ j ] = isEndless ;			    	    isEndless = 0 ;					  
	    if ( input_mat [ i ] [ j ] == 0 ) :		      	  }							    	  }							  
		isEndless = 0				      	}							    	  col [ i ] [ j ] = isEndless ;				  
	    row [ i ] [ j ] = isEndless			      	for ( int i = 0 ;					    	}							  
    ans = 0						      	i < n ;							      }								  
    for i in range ( n ) :				      	i ++ ) {						      for ( int i = 0 ;						  
	for j in range ( 1 , n ) :			      	  boolean isEndless = true ;				      i < n ;							  
	    if ( row [ i ] [ j ] and col [ i ] [ j ] ) :      	  for ( int j = n - 1 ;					      i ++ ) {							  
		ans += 1				      	  j >= 0 ;						    	int isEndless = 1 ;					  
    return ans						      	  j -- ) {						    	for ( int j = n - 1 ;					  
							      	    if ( input [ i ] [ j ] == false ) isEndless = false ;   	j >= 0 ;						  
							      	    row [ i ] [ j ] = isEndless ;			    	j -- ) {						  
							      	  }							    	  if ( ( inputMat [ i ] [ j ] == 0 ) ) {		  
							      	}							    	    isEndless = 0 ;					  
							      	int ans = 0 ;						    	  }							  
							      	for ( int i = 0 ;					    	  row [ i ] [ j ] = isEndless ;				  
							      	i < n ;							    	}							  
							      	i ++ ) for ( int j = 1 ;				      }								  
							      	j < n ;							      int ans = 0 ;						  
							      	j ++ ) if ( row [ i ] [ j ] && col [ i ] [ j ] ) ans ++ ;     for ( int i = 0 ;						  
							      	return ans ;						      i < n ;							  
							      }								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j < n ;							  
							      								    	j ++ ) {						  
							      								    	  if ( ( row [ i ] [ j ] != 0 ) && ( col [ i ] [ j ] != 0 
							      								    	    ans ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_MATRIX					      MAXIMUM_PATH_SUM_MATRIX					    MAXIMUM_PATH_SUM_MATRIX					  MAXIMUM_PATH_SUM_MATRIX
--							      --							    --								  --
def findMaxPath ( mat ) :				      static int findMaxPath ( int mat [ ] [ ] ) {		    static int findMaxPath ( int [ ] [ ] mat ) {		  script_not_found : None
    res = - 1						      	int res = - 1 ;						      int res = - 1 ;						  
    for i in range ( M ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	res = max ( res , mat [ 0 ] [ i ] )		      	i < M ;							      i < M ;							  
    for i in range ( 1 , N ) :				      	i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ;		      i ++ ) {							  
	res = - 1					      	for ( int i = 1 ;					    	res = Math . max ( res , mat [ 0 ] [ i ] ) ;		  
	for j in range ( M ) :				      	i < N ;							      }								  
	    if ( j > 0 and j < M - 1 ) :		      	i ++ ) {						      for ( int i = 1 ;						  
		mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ]  	  res = - 1 ;						      i < N ;							  
	    elif ( j > 0 ) :				      	  for ( int j = 0 ;					      i ++ ) {							  
		mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ]  	  j < M ;						    	res = - 1 ;						  
	    elif ( j < M - 1 ) :			      	  j ++ ) {						    	for ( int j = 0 ;					  
		mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ]  	    if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat  	j < M ;							  
	    res = max ( mat [ i ] [ j ] , res )		      	    else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1  	j ++ ) {						  
    return res						      	    else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i  	  if ( ( j > 0 ) && ( j < M - 1 ) ) {			  
							      	    res = max ( mat [ i ] [ j ] , res ) ;		    	    mat [ i ] [ j ] += Math . max ( mat [ i - 1 ] [ j ] , 
							      	  }							    	  }							  
							      	}							    	  else if ( ( j > 0 ) ) {				  
							      	return res ;						    	    mat [ i ] [ j ] += Math . max ( mat [ i - 1 ] [ j ] , 
							      }								    	  }							  
							      								    	  else if ( ( j < M - 1 ) ) {				  
							      								    	    mat [ i ] [ j ] += Math . max ( mat [ i - 1 ] [ j ] , 
							      								    	  }							  
							      								    	  res = Math . max ( mat [ i ] [ j ] , res ) ;		  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING	      DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING	    DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING		  DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING
--							      --							    --								  --
def carAssembly ( a , t , e , x ) :			      static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int  public static int carAssembly ( int [ ] [ ] a , int [ ] [ ] t script_not_found : None
    NUM_STATION = len ( a [ 0 ] )			      	int T1 [ ] = new int [ NUM_STATION ] ;			      int NUM_STATION = a [ 0 ] . length ;			  
    T1 = [ 0 for i in range ( NUM_STATION ) ]		      	int T2 [ ] = new int [ NUM_STATION ] ;			      int [ ] T1 = new int [ NUM_STATION ] ;			  
    T2 = [ 0 for i in range ( NUM_STATION ) ]		      	int i ;							      int [ ] T2 = new int [ NUM_STATION ] ;			  
    T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ]			      	T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;			      for ( int i = 0 ;						  
    T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ]			      	T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;			      i < NUM_STATION ;						  
    for i in range ( 1 , NUM_STATION ) :		      	for ( i = 1 ;						      i ++ ) {							  
	T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [  	i < NUM_STATION ;					    	T1 [ i ] = 0 ;						  
	T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [  	++ i ) {						    	T2 [ i ] = 0 ;						  
    return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_ 	  T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i -    }								  
							      	  T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i -    T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;			  
							      	}							      T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;			  
							      	return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_ST   for ( int i = 1 ;						  
							      }								      i < NUM_STATION ;						  
							      								      i ++ ) {							  
							      								    	T1 [ i ] = Math . min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 
							      								    	T2 [ i ] = Math . min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 
							      								      }								  
							      								      return Math . min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_FREQUENCY_ELEMENT				      NEXT_GREATER_FREQUENCY_ELEMENT				    NEXT_GREATER_FREQUENCY_ELEMENT				  NEXT_GREATER_FREQUENCY_ELEMENT
--							      --							    --								  --
def NFG ( a , n ) :					      static void NFG ( int a [ ] , int n , int freq [ ] ) {	    public static int [ ] NFG ( int [ ] a , int n ) {		  script_not_found : None
    if ( n <= 0 ) :					      	Stack < Integer > s = new Stack < Integer > ( ) ;	      if ( ( n <= 0 ) ) {					  
	print ( "List empty" )				      	s . push ( 0 ) ;					    	System . out . println ( "List empty" ) ;		  
	return [ ]					      	int res [ ] = new int [ n ] ;				    	return new int [ n ] ;					  
    stack = [ 0 ] * n					      	for ( int i = 0 ;					      }								  
    freq = { }						      	i < n ;							      int [ ] stack = new int [ n ] ;				  
    for i in a :					      	i ++ ) res [ i ] = 0 ;					      HashMap < Integer , Integer > freq = new HashMap < > ( ) ;  
	freq [ a [ i ] ] = 0				      	for ( int i = 1 ;					      for ( int i = 0 ;						  
    for i in a :					      	i < n ;							      i < a . length ;						  
	freq [ a [ i ] ] += 1				      	i ++ ) {						      i ++ ) {							  
    res = [ 0 ] * n					      	  if ( freq [ a [ s . peek ( ) ] ] > freq [ a [ i ] ] ) s . 	freq . put ( a [ i ] , 0 ) ;				  
    top = - 1						      	  else {						      }								  
    top += 1						      	    while ( freq [ a [ s . peek ( ) ] ] < freq [ a [ i ] ]    for ( int i = 0 ;						  
    stack [ top ] = 0					      	      res [ s . peek ( ) ] = a [ i ] ;			      i < a . length ;						  
    for i in range ( 1 , n ) :				      	      s . pop ( ) ;					      i ++ ) {							  
	if ( freq [ a [ stack [ top ] ] ] > freq [ a [ i ] ]  	    }							    	freq . put ( a [ i ] , 1 ) ;				  
	    top += 1					      	    s . push ( i ) ;					      }								  
	    stack [ top ] = i				      	  }							      int [ ] res = new int [ n ] ;				  
	else :						      	}							      int top = - 1 ;						  
	    while ( top > - 1 and freq [ a [ stack [ top ] ]  	while ( s . size ( ) > 0 ) {				      top ++ ;							  
		res [ stack [ top ] ] = a [ i ]		      	  res [ s . peek ( ) ] = - 1 ;				      stack [ top ] = 0 ;					  
		top -= 1				      	  s . pop ( ) ;						      for ( int i = 1 ;						  
	    top += 1					      	}							      i < n ;							  
	    stack [ top ] = i				      	for ( int i = 0 ;					      i ++ ) {							  
    while ( top > - 1 ) :				      	i < n ;							    	if ( ( freq . get ( a [ stack [ top ] ] ) ) > freq . get  
	res [ stack [ top ] ] = - 1			      	i ++ ) {						    	  top ++ ;						  
	top -= 1					      	  System . out . print ( res [ i ] + " " ) ;		    	  stack [ top ] = i ;					  
    return res						      	}							    	}							  
							      }								    	else {							  
							      								    	  while ( ( top > - 1 ) && ( freq . get ( a [ stack [ top 
							      								    	    res [ stack [ top ] ] = a [ i ] ;			  
							      								    	    top -- ;						  
							      								    	  }							  
							      								    	  top ++ ;						  
							      								    	  stack [ top ] = i ;					  
							      								    	}							  
							      								      }								  
							      								      while ( ( top > - 1 ) ) {					  
							      								    	res [ stack [ top ] ] = - 1 ;				  
							      								    	top -- ;						  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_TWO_LARGE_NUMBERS					      SUM_TWO_LARGE_NUMBERS					    SUM_TWO_LARGE_NUMBERS					  SUM_TWO_LARGE_NUMBERS
--							      --							    --								  --
def findSum ( str1 , str2 ) :				      static String findSum ( String str1 , String str2 ) {	    public static String findSum ( String str1 , String str2 ) {  error : Exception in thread "main" java.lang.Strin
    if ( len ( str1 ) > len ( str2 ) ) :		      	if ( str1 . length ( ) > str2 . length ( ) ) {		      if ( ( str1 . length ( ) ) > str2 . length ( ) ) {	  gIndexOutOfBoundsException: String index out of ra
	t = str1					      	  String t = str1 ;					    	String t = str1 ;					  nge: 2 	at java.base/java.lang.StringLatin1.charAt
	str1 = str2					      	  str1 = str2 ;						    	str1 = str2 ;						  (StringLatin1.java:47) 	at java.base/java.lang.Str
	str2 = t					      	  str2 = t ;						    	str2 = t ;						  ing.charAt(String.java:693) 	at SUM_TWO_LARGE_NUMB
    str = ""						      	}							      }								  ERS.f_filled(SUM_TWO_LARGE_NUMBERS.java:59) 	at SU
    n1 = len ( str1 )					      	String str = "" ;					      StringBuffer str = new StringBuffer ( ) ;			  M_TWO_LARGE_NUMBERS.main(SUM_TWO_LARGE_NUMBERS.jav
    n2 = len ( str2 )					      	int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;	      int n1 = str1 . length ( ) ;				  a:104)
    str1 = str1 [ : : - 1 ]				      	str1 = new StringBuilder ( str1 ) . reverse ( ) . toString    int n2 = str2 . length ( ) ;				  
    str2 = str2 [ : : - 1 ]				      	str2 = new StringBuilder ( str2 ) . reverse ( ) . toString    str1 = str1 . substring ( 0 , str1 . length ( ) - 1 ) ;	  
    carry = 0						      	int carry = 0 ;						      str2 = str2 . substring ( 0 , str2 . length ( ) - 1 ) ;	  
    for i in range ( n1 ) :				      	for ( int i = 0 ;					      int carry = 0 ;						  
	sum = ( ( ord ( str1 [ i ] ) - 48 ) + ( ( ord ( str2  	i < n1 ;						      for ( int i = 0 ;						  
	str += chr ( sum % 10 + 48 )			      	i ++ ) {						      i < n1 ;							  
	carry = int ( sum / 10 )			      	  int sum = ( ( int ) ( str1 . charAt ( i ) - '0' ) + ( int   i ++ ) {							  
    for i in range ( n1 , n2 ) :			      	  str += ( char ) ( sum % 10 + '0' ) ;			    	int sum = ( ( ( int ) str1 . charAt ( i ) ) - 48 ) + ( (  
	sum = ( ( ord ( str2 [ i ] ) - 48 ) + carry )	      	  carry = sum / 10 ;					    	str . append ( ( char ) ( sum % 10 + 48 ) ) ;		  
	str += chr ( sum % 10 + 48 )			      	}							    	carry = ( ( int ) ( sum / 10 ) ) ;			  
	carry = ( int ) ( sum / 10 )			      	for ( int i = n1 ;					      }								  
    if ( carry ) :					      	i < n2 ;						      for ( int i = n1 ;					  
	str += chr ( carry + 48 )			      	i ++ ) {						      i < n2 ;							  
    str = str [ : : - 1 ]				      	  int sum = ( ( int ) ( str2 . charAt ( i ) - '0' ) + carry   i ++ ) {							  
    return str						      	  str += ( char ) ( sum % 10 + '0' ) ;			    	int sum = ( ( ( int ) str2 . charAt ( i ) ) - 48 ) + carr 
							      	  carry = sum / 10 ;					    	str . append ( ( char ) ( sum % 10 + 48 ) ) ;		  
							      	}							    	carry = ( ( int ) ( sum / 10 ) ) ;			  
							      	if ( carry > 0 ) str += ( char ) ( carry + '0' ) ;	      }								  
							      	str = new StringBuilder ( str ) . reverse ( ) . toString (    if ( ( carry ) != 0 ) {					  
							      	return str ;						    	str . append ( ( char ) ( carry + 48 ) ) ;		  
							      }								      }								  
							      								      str . setLength ( str . length ( ) - 1 ) ;		  
							      								      return str . toString ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION_1			      SORTING_USING_TRIVIAL_HASH_FUNCTION_1			    SORTING_USING_TRIVIAL_HASH_FUNCTION_1			  SORTING_USING_TRIVIAL_HASH_FUNCTION_1
--							      --							    --								  --
def sortUsingHash ( a , n ) :				      static void sortUsingHash ( int a [ ] , int n ) {		    static void sortUsingHash ( int [ ] a , int n ) {		  script_not_found : None
    Max = max ( a )					      	int max = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ;    int Max = Math . max ( a . length , 0 ) ;			  
    Min = abs ( min ( a ) )				      	int min = Math . abs ( Arrays . stream ( a ) . min ( ) . ge   int Min = Math . abs ( Math . min ( a . length , 0 ) ) ;	  
    hashpos = [ 0 ] * ( Max + 1 )			      	int hashpos [ ] = new int [ max + 1 ] ;			      int [ ] hashpos = new int [ Max + 1 ] ;			  
    hashneg = [ 0 ] * ( Min + 1 )			      	int hashneg [ ] = new int [ min + 1 ] ;			      int [ ] hashneg = new int [ Min + 1 ] ;			  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if a [ i ] >= 0 :				      	i < n ;							      i <= n ;							  
	    hashpos [ a [ i ] ] += 1			      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( a [ i ] >= 0 ) hashpos [ a [ i ] ] += 1 ;	    	if ( a [ i ] >= 0 ) {					  
	    hashneg [ abs ( a [ i ] ) ] += 1		      	  else hashneg [ Math . abs ( a [ i ] ) ] += 1 ;	    	  hashpos [ a [ i ] ] ++ ;				  
    for i in range ( Min , 0 , - 1 ) :			      	}							    	}							  
	if hashneg [ i ] != 0 :				      	for ( int i = min ;					    	else {							  
	    for j in range ( 0 , hashneg [ i ] ) :	      	i > 0 ;							    	  hashneg [ Math . abs ( a [ i ] ) ] ++ ;		  
		print ( ( - 1 ) * i , end = " " )	      	i -- ) {						    	}							  
    for i in range ( 0 , Max + 1 ) :			      	  if ( hashneg [ i ] > 0 ) {				      }								  
	if hashpos [ i ] != 0 :				      	    for ( int j = 0 ;					      for ( int i = Min ;					  
	    for j in range ( 0 , hashpos [ i ] ) :	      	    j < hashneg [ i ] ;					      i > 0 ;							  
		print ( i , end = " " )			      	    j ++ ) {						      i -- ) {							  
							      	      System . out . print ( ( - 1 ) * i + " " ) ;	    	if ( hashneg [ i ] != 0 ) {				  
							      	    }							    	  for ( int j = 0 ;					  
							      	  }							    	  j <= hashneg [ i ] ;					  
							      	}							    	  j ++ ) {						  
							      	for ( int i = 0 ;					    	    System . out . print ( ( - 1 ) * i + " " ) ;	  
							      	i <= max ;						    	  }							  
							      	i ++ ) {						    	}							  
							      	  if ( hashpos [ i ] > 0 ) {				      }								  
							      	    for ( int j = 0 ;					      for ( int i = 0 ;						  
							      	    j < hashpos [ i ] ;					      i <= Max ;						  
							      	    j ++ ) {						      i ++ ) {							  
							      	      System . out . print ( i + " " ) ;		    	if ( hashpos [ i ] != 0 ) {				  
							      	    }							    	  for ( int j = 0 ;					  
							      	  }							    	  j <= hashpos [ i ] ;					  
							      	}							    	  j ++ ) {						  
							      }								    	    System . out . print ( i + " " ) ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		      COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		    COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		  COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1
--							      --							    --								  --
def countPS ( i , j ) :					      static int countPS ( int i , int j ) {			    public static int countPS ( int i , int j ) {		  script_not_found : None
    if ( i >= n or j < 0 ) :				      	if ( i >= n || j < 0 ) return 0 ;			      if ( ( i >= n ) || ( j < 0 ) ) return 0 ;			  
	return 0					      	if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ;	      if ( ( dp [ i ] [ j ] != - 1 ) ) return dp [ i ] [ j ] ;	  
    if ( dp [ i ] [ j ] != - 1 ) :			      	if ( ( i - j == 1 ) || ( i - j == - 1 ) ) {		      if ( ( Math . abs ( i - j ) ) == 1 ) {			  
	return dp [ i ] [ j ]				      	  if ( str . charAt ( i ) == str . charAt ( j ) ) return dp 	if ( ( String . valueOf ( i ) . equals ( String . valueOf 
    if ( abs ( i - j ) == 1 ) :				      	  else return dp [ i ] [ j ] = 2 ;			    	  dp [ i ] [ j ] = 3 ;					  
	if ( str [ i ] == str [ j ] ) :			      	}							    	  return dp [ i ] [ j ] ;				  
	    dp [ i ] [ j ] = 3				      	if ( i == j ) return dp [ 1 ] [ j ] = 1 ;		    	}							  
	    return dp [ i ] [ j ]			      	else if ( str . charAt ( i ) == str . charAt ( j ) ) return 	else {							  
	else :						      	else return dp [ i ] [ j ] = countPS ( i + 1 , j ) + countP 	  dp [ i ] [ j ] = 2 ;					  
	    dp [ i ] [ j ] = 2				      }								    	  return dp [ i ] [ j ] ;				  
	    return dp [ i ] [ j ]			      								    	}							  
    if ( i == j ) :					      								      }								  
	dp [ 1 ] [ j ] = 1				      								      if ( ( i == j ) ) {					  
	return dp [ 1 ] [ j ]				      								    	dp [ 1 ] [ j ] = 1 ;					  
    elif ( str [ i ] == str [ j ] ) :			      								    	return dp [ 1 ] [ j ] ;					  
	dp [ i ] [ j ] = ( countPS ( i + 1 , j ) + countPS (  								      }								  
	return dp [ i ] [ j ]				      								      else if ( ( String . valueOf ( i ) . equals ( String . valu 
    else :						      								    	dp [ i ] [ j ] = ( countPS ( i + 1 , j ) + countPS ( i ,  
	dp [ i ] [ j ] = ( countPS ( i + 1 , j ) + countPS (  								    	return dp [ i ] [ j ] ;					  
	return dp [ i ] [ j ]				      								      }								  
							      								      else {							  
							      								    	dp [ i ] [ j ] = ( countPS ( i + 1 , j ) + countPS ( i ,  
							      								    	return dp [ i ] [ j ] ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K			      SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K				    SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K				  SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K
--							      --							    --								  --
def subarrayDivisibleByK ( arr , n , k ) :		      static void subarrayDivisibleByK ( int [ ] arr , int n , int  public static void subarrayDivisibleByK ( int [ ] arr , int n script_not_found : None
    mp = [ 0 ] * 1000					      	int [ ] mp = new int [ 1000 ] ;				      int [ ] mp = new int [ 1000 ] ;				  
    s = 0 e = 0 maxs = 0 maxe = 0			      	int s = 0 , e = 0 , maxs = 0 , maxe = 0 ;		      int s = 0 , e = 0 , maxs = 0 , maxe = 0 ;			  
    mp [ arr [ 0 ] % k ] = mp [ arr [ 0 ] % k ] + 1	      	mp [ arr [ 0 ] % k ] ++ ;				      mp [ arr [ 0 ] % k ] = mp [ arr [ 0 ] % k ] + 1 ;		  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	mod = arr [ i ] % k				      	i < n ;							      i < n ;							  
	while ( mp [ k - mod ] != 0 or ( mod == 0 and mp [ mo 	i ++ ) {						      i ++ ) {							  
	    mp [ arr [ s ] % k ] = mp [ arr [ s ] % k ] - 1   	  int mod = arr [ i ] % k ;				    	int mod = arr [ i ] % k ;				  
	    s = s + 1					      	  while ( mp [ k - mod ] != 0 || ( mod == 0 && mp [ mod ] ! 	while ( ( mp [ k - mod ] != 0 ) || ( mod == 0 && mp [ mod 
	mp [ mod ] = mp [ mod ] + 1			      	    mp [ arr [ s ] % k ] -- ;				    	  mp [ arr [ s ] % k ] = mp [ arr [ s ] % k ] - 1 ;	  
	e = e + 1					      	    s ++ ;						    	  s = s + 1 ;						  
	if ( ( e - s ) > ( maxe - maxs ) ) :		      	  }							    	}							  
	    maxe = e					      	  mp [ mod ] ++ ;					    	mp [ mod ] = mp [ mod ] + 1 ;				  
	    maxs = s					      	  e ++ ;						    	e = e + 1 ;						  
    print ( "The maximum size is {} and the ".format ( ( maxe 	  if ( ( e - s ) > ( maxe - maxs ) ) {			    	if ( ( ( e - s ) > ( maxe - maxs ) ) ) {		  
	print ( "{} ".format ( arr [ i ] ) , end = "" )	      	    maxe = e ;						    	  maxe = e ;						  
							      	    maxs = s ;						    	  maxs = s ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	System . out . print ( "The maximum size is " + ( maxe - ma   System . out . println ( "The maximum size is " + ( maxe -  
							      	for ( int i = maxs ;					      for ( i = maxs ;						  
							      	i <= maxe ;						      i <= maxe ;						  
							      	i ++ ) System . out . print ( arr [ i ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION		      WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION		    WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION			  WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION
--							      --							    --								  --
def solveWordWrap ( arr , n , k ) :			      static void solveWordWrap ( int arr [ ] , int n , int k ) {   static int solveWordWrap ( int [ ] arr , int n , int k ) {	  script_not_found : None
    dp = [ 0 ] * n					      	int i , j ;						      int [ ] dp = new int [ n ] ;				  
    ans = [ 0 ] * n					      	int currlen ;						      int [ ] ans = new int [ n ] ;				  
    dp [ n - 1 ] = 0					      	int cost ;						      dp [ n - 1 ] = 0 ;					  
    ans [ n - 1 ] = n - 1				      	int dp [ ] = new int [ n ] ;				      ans [ n - 1 ] = n - 1 ;					  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	int ans [ ] = new int [ n ] ;				      for ( int i = n - 2 ;					  
	currlen = - 1					      	dp [ n - 1 ] = 0 ;					      i >= 0 ;							  
	dp [ i ] = sys.maxsize				      	ans [ n - 1 ] = n - 1 ;					      i -- ) {							  
	for j in range ( i , n ) :			      	for ( i = n - 2 ;					    	int currlen = - 1 ;					  
	    currlen += ( arr [ j ] + 1 )		      	i >= 0 ;						    	dp [ i ] = Integer . MAX_VALUE ;			  
	    if ( currlen > k ) :			      	i -- ) {						    	for ( int j = i ;					  
		break					      	  currlen = - 1 ;					    	j < n ;							  
	    if ( j == n - 1 ) :				      	  dp [ i ] = Integer . MAX_VALUE ;			    	j ++ ) {						  
		cost = 0				      	  for ( j = i ;						    	  currlen += ( arr [ j ] + 1 ) ;			  
	    else :					      	  j < n ;						    	  if ( ( currlen > k ) ) break ;			  
		cost = ( ( k - currlen ) * ( k - currlen ) +  	  j ++ ) {						    	  int cost ;						  
	    if ( cost < dp [ i ] ) :			      	    currlen += ( arr [ j ] + 1 ) ;			    	  if ( ( j == n - 1 ) ) cost = 0 ;			  
		dp [ i ] = cost				      	    if ( currlen > k ) break ;				    	  else cost = ( ( k - currlen ) * ( k - currlen ) + dp [  
		ans [ i ] = j				      	    if ( j == n - 1 ) cost = 0 ;			    	  if ( ( cost < dp [ i ] ) ) {				  
    i = 0						      	    else cost = ( k - currlen ) * ( k - currlen ) + dp [ j  	    dp [ i ] = cost ;					  
    while ( i < n ) :					      	    if ( cost < dp [ i ] ) {				    	    ans [ i ] = j ;					  
	print ( i + 1 , ans [ i ] + 1 , end = " " )	      	      dp [ i ] = cost ;					    	  }							  
	i = ans [ i ] + 1				      	      ans [ i ] = j ;					    	}							  
							      	    }							      }								  
							      	  }							      int i = 0 ;						  
							      	}							      while ( ( i < n ) ) {					  
							      	i = 0 ;							    	System . out . println ( i + 1 + " " + ans [ i ] + 1 ) ;  
							      	while ( i < n ) {					    	i = ans [ i ] + 1 ;					  
							      	  System . out . print ( ( i + 1 ) + " " + ( ans [ i ] + 1    }								  
							      	  i = ans [ i ] + 1 ;					      return i ;						  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM			      MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM			    MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM			  MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM
--							      --							    --								  --
def maxAlternateSum ( arr , n ) :			      static int maxAlternateSum ( int arr [ ] , int n ) {	    public static int maxAlternateSum ( int [ ] arr , int n ) {	  script_not_found : None
    if ( n == 1 ) :					      	if ( n == 1 ) return arr [ 0 ] ;			      if ( ( n == 1 ) ) {					  
	return arr [ 0 ]				      	int dec [ ] = new int [ n ] ;				    	return arr [ 0 ] ;					  
    dec = [ 0 for i in range ( n + 1 ) ]		      	int inc [ ] = new int [ n ] ;				      }								  
    inc = [ 0 for i in range ( n + 1 ) ]		      	dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;			      int [ ] dec = new int [ n + 1 ] ;				  
    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]			      	int flag = 0 ;						      int [ ] inc = new int [ n + 1 ] ;				  
    flag = 0						      	for ( int i = 1 ;					      dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;			  
    for i in range ( 1 , n ) :				      	i < n ;							      int flag = 0 ;						  
	for j in range ( i ) :				      	i ++ ) {						      for ( int i = 1 ;						  
	    if ( arr [ j ] > arr [ i ] ) :		      	  for ( int j = 0 ;					      i < n ;							  
		dec [ i ] = max ( dec [ i ] , inc [ j ] + arr 	  j < i ;						      i ++ ) {							  
		flag = 1				      	  j ++ ) {						    	for ( int j = 0 ;					  
	    elif ( arr [ j ] < arr [ i ] and flag == 1 ) :    	    if ( arr [ j ] > arr [ i ] ) {			    	j < i ;							  
		inc [ i ] = max ( inc [ i ] , dec [ j ] + arr 	      dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr  	j ++ ) {						  
    result = - 2147483648				      	      flag = 1 ;					    	  if ( ( arr [ j ] > arr [ i ] ) ) {			  
    for i in range ( n ) :				      	    }							    	    dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr  
	if ( result < inc [ i ] ) :			      	    else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i  	    flag = 1 ;						  
	    result = inc [ i ]				      	  }							    	  }							  
	if ( result < dec [ i ] ) :			      	}							    	  else if ( ( arr [ j ] < arr [ i ] ) && ( flag == 1 ) )  
	    result = dec [ i ]				      	int result = Integer . MIN_VALUE ;			    	    inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr  
    return result					      	for ( int i = 0 ;					    	  }							  
							      	i < n ;							    	}							  
							      	i ++ ) {						      }								  
							      	  if ( result < inc [ i ] ) result = inc [ i ] ;	      int result = - 2147483648 ;				  
							      	  if ( result < dec [ i ] ) result = dec [ i ] ;	      for ( int i = 0 ;						  
							      	}							      i < n ;							  
							      	return result ;						      i ++ ) {							  
							      }								    	if ( ( result < inc [ i ] ) ) {				  
							      								    	  result = inc [ i ] ;					  
							      								    	}							  
							      								    	if ( ( result < dec [ i ] ) ) {				  
							      								    	  result = dec [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE
--							      --							    --								  --
def smallestSubsegment ( a , n ) :			      static void smallestSubsegment ( int a [ ] , int n ) {	    public static void smallestSubsegment ( int [ ] a , int n ) { script_not_found : None
    left = dict ( )					      	HashMap < Integer , Integer > left = new HashMap < Integer    Map < Integer , Integer > left = new HashMap < > ( ) ;	  
    count = dict ( )					      	HashMap < Integer , Integer > count = new HashMap < Integer   Map < Integer , Integer > count = new HashMap < > ( ) ;	  
    mx = 0						      	int mx = 0 ;						      int mx = 0 ;						  
    mn , strindex = 0 , 0				      	int mn = - 1 , strindex = - 1 ;				      int mn = 0 , strindex = 0 ;				  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	x = a [ i ]					      	i < n ;							      i < n ;							  
	if ( x not in count.keys ( ) ) :		      	i ++ ) {						      i ++ ) {							  
	    left [ x ] = i				      	  int x = a [ i ] ;					    	int x = a [ i ] ;					  
	    count [ x ] = 1				      	  if ( count . get ( x ) == null ) {			    	if ( ( x = count . keySet ( ) . iterator ( ) . next ( ) ) 
	else :						      	    left . put ( x , i ) ;				    	  left . put ( x , i ) ;				  
	    count [ x ] += 1				      	    count . put ( x , 1 ) ;				    	  count . put ( x , 1 ) ;				  
	if ( count [ x ] > mx ) :			      	  }							    	}							  
	    mx = count [ x ]				      	  else count . put ( x , count . get ( x ) + 1 ) ;	    	else {							  
	    mn = i - left [ x ] + 1			      	  if ( count . get ( x ) > mx ) {			    	  count . put ( x , 1 ) ;				  
	    strindex = left [ x ]			      	    mx = count . get ( x ) ;				    	}							  
	elif ( count [ x ] == mx and i - left [ x ] + 1 < mn  	    mn = i - left . get ( x ) + 1 ;			    	if ( ( count . get ( x ) ) > mx ) {			  
	    mn = i - left [ x ] + 1			      	    strindex = left . get ( x ) ;			    	  mx = count . get ( x ) ;				  
	    strindex = left [ x ]			      	  }							    	  mn = i - left . get ( x ) + 1 ;			  
    for i in range ( strindex , strindex + mn ) :	      	  else if ( ( count . get ( x ) == mx ) && ( i - left . get 	  strindex = left . get ( x ) ;				  
	print ( a [ i ] , end = " " )			      	    mn = i - left . get ( x ) + 1 ;			    	}							  
							      	    strindex = left . get ( x ) ;			    	else if ( ( count . get ( x ) ) == mx && ( i - left . get 
							      	  }							    	  mn = i - left . get ( x ) + 1 ;			  
							      	}							    	  strindex = left . get ( x ) ;				  
							      	for ( int i = strindex ;				    	}							  
							      	i < strindex + mn ;					      }								  
							      	i ++ ) System . out . print ( a [ i ] + " " ) ;		      for ( int i = strindex ;					  
							      }								      i < strindex + mn ;					  
							      								      i ++ ) {							  
							      								    	System . out . print ( a [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX		      FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX			    FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX			  FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX
--							      --							    --								  --
def KMP ( m , n , str2 , str1 ) :			      static void KMP ( int m , int n , String str2 , String str1 ) public static void KMP ( int m , int n , char [ ] str2 , char script_not_found : None
    pos = 0						      	int pos = 0 , len = 0 ;					      int pos = 0 ;						  
    Len = 0						      	int [ ] p = new int [ m + 1 ] ;				      int Len = 0 ;						  
    p = [ 0 for i in range ( m + 1 ) ]			      	int k = 0 ;						      int [ ] p = new int [ m + 1 ] ;				  
    k = 0						      	char [ ] ch1 = str1 . toCharArray ( ) ;			      for ( int i = 0 ;						  
    for i in range ( 2 , n + 1 ) :			      	char [ ] ch2 = str2 . toCharArray ( ) ;			      i < m + 1 ;						  
	while ( k > 0 and str1 [ k ] != str1 [ i - 1 ] ) :    	for ( int i = 2 ;					      i ++ ) p [ i ] = 0 ;					  
	    k = p [ k ]					      	i <= n ;						      int k = 0 ;						  
	if ( str1 [ k ] == str1 [ i - 1 ] ) :		      	i ++ ) {						      for ( int i = 2 ;						  
	    k += 1					      	  while ( k > 0 && ch1 [ k ] != ch1 [ i - 1 ] ) k = p [ k ]   i <= n ;							  
	p [ i ] = k					      	  if ( ch1 [ k ] == ch1 [ i - 1 ] ) ++ k ;		      i ++ ) {							  
    j = 0						      	  p [ i ] = k ;						    	while ( ( k > 0 ) && ( str1 [ k ] != str1 [ i - 1 ] ) ) k 
    for i in range ( m ) :				      	}							    	if ( ( str1 [ k ] == str1 [ i - 1 ] ) ) k ++ ;		  
	while ( j > 0 and j < n and str1 [ j ] != str2 [ i ]  	for ( int j = 0 , i = 0 ;				    	p [ i ] = k ;						  
	    j = p [ j ]					      	i < m ;							      }								  
	if ( j < n and str1 [ j ] == str2 [ i ] ) :	      	i ++ ) {						      int j = 0 ;						  
	    j += 1					      	  while ( j > 0 && j < n && ch1 [ j ] != ch2 [ i ] ) j = p    for ( int i = 0 ;						  
	if ( j > Len ) :				      	  if ( j < n && ch1 [ j ] == ch2 [ i ] ) j ++ ;		      i < m ;							  
	    Len = j					      	  if ( j > len ) {					      i ++ ) {							  
	    pos = i - j + 1				      	    len = j ;						    	while ( ( j > 0 ) && ( j < n ) && ( str1 [ j ] != str2 [  
    print ( "Shift = " , pos )				      	    pos = i - j + 1 ;					    	if ( ( j < n ) && ( str1 [ j ] == str2 [ i ] ) ) j ++ ;	  
    print ( "Prefix = " , str1 [ : Len ] )		      	  }							    	if ( ( j > Len ) ) {					  
							      	}							    	  Len = j ;						  
							      	System . out . println ( "Shift = " + pos ) ;		    	  pos = i - j + 1 ;					  
							      	System . out . println ( "Prefix = " + str1 . substring ( 0 	}							  
							      }								      }								  
							      								      System . out . println ( "Shift = " + pos ) ;		  
							      								      System . out . println ( "Prefix = " + str1 . substring ( 0 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1		      FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1			    FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1			  FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1
--							      --							    --								  --
def isRectangle ( matrix ) :				      static boolean isRectangle ( int matrix [ ] [ ] ) {	    public static boolean isRectangle ( int [ ] [ ] matrix ) {	  script_not_found : None
    rows = len ( matrix )				      	int rows = matrix . length ;				      int rows = matrix . length ;				  
    if ( rows == 0 ) :					      	if ( rows == 0 ) return false ;				      if ( ( rows == 0 ) ) {					  
	return False					      	int columns = matrix [ 0 ] . length ;			    	return false ;						  
    columns = len ( matrix [ 0 ] )			      	HashMap < Integer , HashSet < Integer >> table = new HashMa   }								  
    table = { }						      	for ( int i = 0 ;					      int columns = matrix [ 0 ] . length ;			  
    for i in range ( rows ) :				      	i < rows ;						      HashMap < Integer , HashSet < Integer >> table = new HashMa 
	for j in range ( columns - 1 ) :		      	i ++ ) {						      for ( int i = 0 ;						  
	    for k in range ( j + 1 , columns ) :	      	  for ( int j = 0 ;					      i < rows ;						  
		if ( matrix [ i ] [ j ] == 1 and matrix [ i ] 	  j < columns - 1 ;					      i ++ ) {							  
		    if ( j in table and k in table [ j ] ) :  	  j ++ ) {						    	for ( int j = 0 ;					  
			return True			      	    for ( int k = j + 1 ;				    	j < columns - 1 ;					  
		    if ( k in table and j in table [ k ] ) :  	    k < columns ;					    	j ++ ) {						  
			return True			      	    k ++ ) {						    	  for ( int k = j + 1 ;					  
		    if j not in table :			      	      if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 	  k < columns ;						  
			table [ j ] = set ( )		      		if ( table . containsKey ( j ) && table . get ( j ) 	  k ++ ) {						  
		    if k not in table :			      		  return true ;					    	    if ( ( matrix [ i ] [ j ] == 1 ) && ( matrix [ i ] [  
			table [ k ] = set ( )		      		}						    	      if ( ( table . containsKey ( j ) ) && ( table . get 
		    table [ j ].add ( k )		      		if ( table . containsKey ( k ) && table . get ( k ) 		return true ;					  
		    table [ k ].add ( j )		      		  return true ;					    	      }							  
    return False					      		}						    	      if ( ( table . containsKey ( k ) ) && ( table . get 
							      		if ( ! table . containsKey ( j ) ) {		    		return true ;					  
							      		  HashSet < Integer > x = new HashSet < > ( ) ;	    	      }							  
							      		  x . add ( k ) ;				    	      if ( ! table . containsKey ( j ) ) {		  
							      		  table . put ( j , x ) ;			    		table . put ( j , new HashSet < > ( ) ) ;	  
							      		}						    	      }							  
							      		else {						    	      if ( ! table . containsKey ( k ) ) {		  
							      		  table . get ( j ) . add ( k ) ;		    		table . put ( k , new HashSet < > ( ) ) ;	  
							      		}						    	      }							  
							      		if ( ! table . containsKey ( k ) ) {		    	      table . get ( j ) . add ( k ) ;			  
							      		  HashSet < Integer > x = new HashSet < > ( ) ;	    	      table . get ( k ) . add ( j ) ;			  
							      		  x . add ( j ) ;				    	    }							  
							      		  table . put ( k , x ) ;			    	  }							  
							      		}						    	}							  
							      		else {						      }								  
							      		  table . get ( k ) . add ( j ) ;		      return false ;						  
							      		}						    }								  
							      	      }							    								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return false ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B
--							      --							    --								  --
def arrangeBraces ( n , pos , k ) :			      static long arrangeBraces ( int n , int pos [ ] , int k ) {   public static int arrangeBraces ( int n , int [ ] pos , int k script_not_found : None
    h = [ False for i in range ( N ) ]			      	boolean h [ ] = new boolean [ N ] ;			      boolean [ ] h = new boolean [ N ] ;			  
    dp = [ [ 0 for i in range ( N ) ] for i in range ( N ) ]  	int dp [ ] [ ] = new int [ N ] [ N ] ;			      int [ ] [ ] dp = new int [ N ] [ N ] ;			  
    for i in range ( k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	h [ pos [ i ] ] = 1				      	i < k ;							      i < N ;							  
    dp [ 0 ] [ 0 ] = 1					      	i ++ ) {						      i ++ ) {							  
    for i in range ( 1 , 2 * n + 1 ) :			      	  h [ pos [ i ] ] = true ;				    	dp [ i ] [ 0 ] = 0 ;					  
	for j in range ( 2 * n + 1 ) :			      	}							      }								  
	    if ( h [ i ] ) :				      	dp [ 0 ] [ 0 ] = 1 ;					      for ( int i = 0 ;						  
		if ( j != 0 ) :				      	for ( int i = 1 ;					      i < k ;							  
		    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]   	i <= 2 * n ;						      i ++ ) {							  
		else :					      	i ++ ) {						    	h [ pos [ i ] ] = 1 ;					  
		    dp [ i ] [ j ] = 0			      	  for ( int j = 0 ;					      }								  
	    else :					      	  j <= 2 * n ;						      dp [ 0 ] [ 0 ] = 1 ;					  
		if ( j != 0 ) :				      	  j ++ ) {						      for ( int i = 1 ;						  
		    dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] 	    if ( h [ i ] ) {					      i <= 2 * n ;						  
		else :					      	      if ( j != 0 ) {					      i ++ ) {							  
		    dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ]   		dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;	    	for ( int j = 2 * n + 1 ;				  
    return dp [ 2 * n ] [ 0 ]				      	      }							    	j < N ;							  
							      	      else {						    	j ++ ) {						  
							      		dp [ i ] [ j ] = 0 ;				    	  if ( ( h [ i ] ) ) {					  
							      	      }							    	    if ( ( j != 0 ) ) {					  
							      	    }							    	      dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
							      	    else if ( j != 0 ) {				    	    }							  
							      	      dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1  	    else {						  
							      	    }							    	      dp [ i ] [ j ] = 0 ;				  
							      	    else {						    	    }							  
							      	      dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;		    	  }							  
							      	    }							    	  else {						  
							      	  }							    	    if ( ( j != 0 ) ) {					  
							      	}							    	      dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i  
							      	return dp [ 2 * n ] [ 0 ] ;				    	    }							  
							      }								    	    else {						  
							      								    	      dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;		  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ 2 * n ] [ 0 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_ MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_ MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_ MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_
--							      --							    --								  --
def pre_compute ( a , n , index , k ) :			      static int pre_compute ( int a [ ] , int n , int index , int  public static int preCompute ( int [ ] a , int n , int index  script_not_found : None
    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]  	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] dp = new int [ n ] [ n ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if a [ i ] > a [ 0 ] :				      	i < n ;							      i < n ;							  
	    dp [ 0 ] [ i ] = a [ i ] + a [ 0 ]		      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( a [ i ] > a [ 0 ] ) dp [ 0 ] [ i ] = a [ i ] + a [ 0 	dp [ i ] [ i ] = 0 ;					  
	    dp [ 0 ] [ i ] = a [ i ]			      	  else dp [ 0 ] [ i ] = a [ i ] ;			      }								  
    for i in range ( 1 , n ) :				      	}							      for ( int i = 0 ;						  
	for j in range ( n ) :				      	for ( int i = 1 ;					      i < n ;							  
	    if a [ j ] > a [ i ] and j > i :		      	i < n ;							      i ++ ) {							  
		if dp [ i - 1 ] [ i ] + a [ j ] > dp [ i - 1  	i ++ ) {						    	if ( a [ i ] > a [ 0 ] ) {				  
		    dp [ i ] [ j ] = dp [ i - 1 ] [ i ] + a [ 	  for ( int j = 0 ;					    	  dp [ 0 ] [ i ] = a [ i ] + a [ 0 ] ;			  
		else :					      	  j < n ;						    	}							  
		    dp [ i ] [ j ] = dp [ i - 1 ] [ j ]	      	  j ++ ) {						    	else {							  
	    else :					      	    if ( a [ j ] > a [ i ] && j > i ) {			    	  dp [ 0 ] [ i ] = a [ i ] ;				  
		dp [ i ] [ j ] = dp [ i - 1 ] [ j ]	      	      if ( dp [ i - 1 ] [ i ] + a [ j ] > dp [ i - 1 ] [ j  	}							  
    return dp [ index ] [ k ]				      	      else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;	      }								  
							      	    }							      for ( int i = 1 ;						  
							      	    else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		      i < n ;							  
							      	  }							      i ++ ) {							  
							      	}							    	for ( int j = 0 ;					  
							      	return dp [ index ] [ k ] ;				    	j < n ;							  
							      }								    	j ++ ) {						  
							      								    	  if ( a [ j ] > a [ i ] && j > i ) {			  
							      								    	    if ( dp [ i - 1 ] [ i ] + a [ j ] > dp [ i - 1 ] [ j  
							      								    	      dp [ i ] [ j ] = dp [ i - 1 ] [ i ] + a [ j ] ;	  
							      								    	    }							  
							      								    	    else {						  
							      								    	      dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		  
							      								    	    }							  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ index ] [ k ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN
--							      --							    --								  --
def find ( arr ) :					      static int find ( boolean arr [ ] [ ] ) {			    public static int indexOf ( int [ ] [ ] arr ) {		  script_not_found : None
    n = len ( arr )					      	int i = 0 , j = n - 1 ;					      int n = arr . length ;					  
    i = 0						      	int res = - 1 ;						      int i = 0 ;						  
    j = n - 1						      	while ( i < n && j >= 0 ) {				      int j = n - 1 ;						  
    res = - 1						      	  if ( arr [ i ] [ j ] == false ) {			      int res = - 1 ;						  
    while i < n and j >= 0 :				      	    while ( j >= 0 && ( arr [ i ] [ j ] == false || i == j    while ( i < n && j >= 0 ) {				  
	if arr [ i ] [ j ] == 0 :			      	      j -- ;						    	if ( arr [ i ] [ j ] == 0 ) {				  
	    while j >= 0 and ( arr [ i ] [ j ] == 0 or i == j 	    }							    	  while ( j >= 0 && ( arr [ i ] [ j ] == 0 || i == j ) )  
		j -= 1					      	    if ( j == - 1 ) {					    	    j -- ;						  
	    if j == - 1 :				      	      res = i ;						    	  }							  
		res = i					      	      break ;						    	  if ( j == - 1 ) {					  
		break					      	    }							    	    res = i ;						  
	    else : i += 1				      	    else {						    	    break ;						  
	else :						      	      i ++ ;						    	  }							  
	    while i < n and ( arr [ i ] [ j ] == 1 or i == j  	    }							    	  else {						  
		i += 1					      	  }							    	    i ++ ;						  
	    if i == n :					      	  else {						    	  }							  
		res = j					      	    while ( i < n && ( arr [ i ] [ j ] == true || i == j )  	}							  
		break					      	      i ++ ;						    	else {							  
	    else : j -= 1				      	    }							    	  while ( i < n && ( arr [ i ] [ j ] == 1 || i == j ) ) { 
    if res == - 1 :					      	    if ( i == n ) {					    	    i ++ ;						  
	return res					      	      res = j ;						    	  }							  
    for i in range ( 0 , n ) :				      	      break ;						    	  if ( i == n ) {					  
	if res != i and arr [ i ] [ res ] != 1 :	      	    }							    	    res = j ;						  
	    return - 1					      	    else {						    	    break ;						  
    for j in range ( 0 , j ) :				      	      j -- ;						    	  }							  
	if res != j and arr [ res ] [ j ] != 0 :	      	    }							    	  else {						  
	    return - 1 ;				      	  }							    	    j -- ;						  
    return res ;					      	}							    	  }							  
							      	if ( res == - 1 ) {					    	}							  
							      	  return res ;						      }								  
							      	}							      if ( res == - 1 ) {					  
							      	for ( int k = 0 ;					    	return res ;						  
							      	k < n ;							      }								  
							      	k ++ ) {						      for ( i = 0 ;						  
							      	  if ( res != k && arr [ k ] [ res ] != true ) {	      i <= n ;							  
							      	    return - 1 ;					      i ++ ) {							  
							      	  }							    	if ( res != i && arr [ i ] [ res ] != 1 ) {		  
							      	}							    	  return - 1 ;						  
							      	for ( int l = 0 ;					    	}							  
							      	l < n ;							      }								  
							      	l ++ ) {						      for ( j = 0 ;						  
							      	  if ( res != l && arr [ res ] [ l ] != false ) {	      j <= n ;							  
							      	    return - 1 ;					      j ++ ) {							  
							      	  }							    	if ( res != j && arr [ res ] [ j ] != 0 ) {		  
							      	}							    	  return - 1 ;						  
							      	return res ;						    	}							  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES			      CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES			    CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES			  CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES
--							      --							    --								  --
def printMat ( degseq , n ) :				      static void printMat ( int degseq [ ] , int n ) {		    static void printMat ( int [ ] degseq , int n ) {		  script_not_found : None
    mat = [ [ 0 ] * n for i in range ( n ) ]		      	int [ ] [ ] mat = new int [ n ] [ n ] ;			      int [ ] [ ] mat = new int [ n ] [ n ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i < n ;							  
	    if ( degseq [ i ] > 0 and degseq [ j ] > 0 ) :    	i ++ ) {						      i ++ ) {							  
		degseq [ i ] -= 1			      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
		degseq [ j ] -= 1			      	  j < n ;						    	j < n ;							  
		mat [ i ] [ j ] = 1			      	  j ++ ) {						    	j ++ ) {						  
		mat [ j ] [ i ] = 1			      	    if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {	    	  if ( ( degseq [ i ] > 0 ) && ( degseq [ j ] > 0 ) ) {	  
    print ( "	   " , end = "" )			      	      degseq [ i ] -- ;					    	    degseq [ i ] -- ;					  
    for i in range ( n ) :				      	      degseq [ j ] -- ;					    	    degseq [ j ] -- ;					  
	print ( "" , "(" , i , ")" , end = "" )		      	      mat [ i ] [ j ] = 1 ;				    	    mat [ i ] [ j ] = 1 ;				  
    print ( )						      	      mat [ j ] [ i ] = 1 ;				    	    mat [ j ] [ i ] = 1 ;				  
    print ( )						      	    }							    	  }							  
    for i in range ( n ) :				      	  }							    	}							  
	print ( "" , "(" , i , ")" , end = "" )		      	}							      }								  
	for j in range ( n ) :				      	System . out . print ( "\n" + setw ( 3 ) + "	 " ) ;	      System . out . print ( "	   " ) ;			  
	    print ( "	  " , mat [ i ] [ j ] , end = "" )    	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( )					      	i < n ;							      i < n ;							  
							      	i ++ ) System . out . print ( setw ( 3 ) + "(" + i + ")" )    i ++ ) {							  
							      	System . out . print ( "\n\n" ) ;			    	System . out . print ( " " + "(" + i + ")" ) ;		  
							      	for ( int i = 0 ;					      }								  
							      	i < n ;							      System . out . println ( ) ;				  
							      	i ++ ) {						      System . out . println ( ) ;				  
							      	  System . out . print ( setw ( 4 ) + "(" + i + ")" ) ;	      for ( int i = 0 ;						  
							      	  for ( int j = 0 ;					      i < n ;							  
							      	  j < n ;						      i ++ ) {							  
							      	  j ++ ) System . out . print ( setw ( 5 ) + mat [ i ] [ j  	System . out . print ( " " + "(" + i + ")" ) ;		  
							      	  System . out . print ( "\n" ) ;			    	for ( int j = 0 ;					  
							      	}							    	j < n ;							  
							      }								    	j ++ ) {						  
							      								    	  System . out . print ( "   " + mat [ i ] [ j ] ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE	      DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE
--							      --							    --								  --
def lbs ( arr ) :					      static int lbs ( int arr [ ] , int n ) {			    public static int lbs ( int [ ] arr ) {			  script_not_found : None
    n = len ( arr )					      	int i , j ;						      int n = arr . length ;					  
    lis = [ 1 for i in range ( n + 1 ) ]		      	int [ ] lis = new int [ n ] ;				      int [ ] lis = new int [ n + 1 ] ;				  
    for i in range ( 1 , n ) :				      	for ( i = 0 ;						      for ( int i = 0 ;						  
	for j in range ( 0 , i ) :			      	i < n ;							      i < n ;							  
	    if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] <  	i ++ ) lis [ i ] = 1 ;					      i ++ ) lis [ i ] = 1 ;					  
		lis [ i ] = lis [ j ] + 1		      	for ( i = 1 ;						      for ( int i = 1 ;						  
    lds = [ 1 for i in range ( n + 1 ) ]		      	i < n ;							      i < n ;							  
    for i in reversed ( range ( n - 1 ) ) :		      	i ++ ) for ( j = 0 ;					      i ++ ) for ( int j = 0 ;					  
	for j in reversed ( range ( i - 1 , n ) ) :	      	j < i ;							      j <= i ;							  
	    if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [  	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]    j ++ ) if ( ( ( arr [ i ] > arr [ j ] ) && ( lis [ i ] < li 
		lds [ i ] = lds [ j ] + 1		      	int [ ] lds = new int [ n ] ;				    }								  
    maximum = lis [ 0 ] + lds [ 0 ] - 1			      	for ( i = 0 ;						    int [ ] lds = new int [ n + 1 ] ;				  
    for i in range ( 1 , n ) :				      	i < n ;							    for ( int i = 0 ;						  
	maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maxim 	i ++ ) lds [ i ] = 1 ;					    i < n ;							  
    return maximum					      	for ( i = n - 2 ;					    i ++ ) lds [ i ] = 1 ;					  
							      	i >= 0 ;						    for ( int i = 0 ;						  
							      	i -- ) for ( j = n - 1 ;				    i < n - 1 ;							  
							      	j > i ;							    i ++ ) for ( int j = i - 1 ;				  
							      	j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ]  j < n ;							  
							      	int max = lis [ 0 ] + lds [ 0 ] - 1 ;			    j ++ ) if ( ( arr [ i ] > arr [ j ] ) && ( lds [ i ] < lds [  
							      	for ( i = 1 ;						    int maximum = lis [ 0 ] + lds [ 0 ] - 1 ;			  
							      	i < n ;							    for ( int i = 1 ;						  
							      	i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i i < n ;							  
							      	return max ;						    i ++ ) maximum = Math . max ( ( lis [ i ] + lds [ i ] - 1 ) , 
							      }								    return maximum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1	      LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1		    LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1		  LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1
--							      --							    --								  --
def maxLen ( arr , n ) :				      int maxLen ( int arr [ ] , int n ) {			    public static int maxLen ( int [ ] arr , int n ) {		  error : LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_A
    hash_map = { }					      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    HashMap < Integer , Integer > hashMap = new HashMap < > ( ) ND_1S_1.java:67: error: ';' expected	 ( i <= n )
    curr_sum = 0					      	int sum = 0 ;						      int currSum = 0 ;						  {		^ LARGEST_SUBARRAY_WITH_EQUAL_NUMBER
    max_len = 0						      	int max_len = 0 ;					      int maxLen = 0 ;						  _OF_0S_AND_1S_1.java:67: error: illegal start of e
    ending_index = - 1					      	int ending_index = - 1 ;				      int endingIndex = - 1 ;					  xpression   ( i <= n ) {		^ 2 errors
    for i in range ( 0 , n ) :				      	int start_index = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] == 0 ) :				      	for ( int i = 0 ;					      ( i <= n ) ;						  
	    arr [ i ] = - 1				      	i < n ;							      i ++ ) {							  
	else :						      	i ++ ) {						    	if ( ( arr [ i ] == 0 ) ) {				  
	    arr [ i ] = 1				      	  arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;		    	  arr [ i ] = - 1 ;					  
    for i in range ( 0 , n ) :				      	}							    	}							  
	curr_sum = curr_sum + arr [ i ]			      	for ( int i = 0 ;					    	else {							  
	if ( curr_sum == 0 ) :				      	i < n ;							    	  arr [ i ] = 1 ;					  
	    max_len = i + 1				      	i ++ ) {						    	}							  
	    ending_index = i				      	  sum += arr [ i ] ;					      }								  
	if ( curr_sum + n ) in hash_map :		      	  if ( sum == 0 ) {					      for ( int i = 0 ;						  
	    max_len = max ( max_len , i - hash_map [ curr_sum 	    max_len = i + 1 ;					      ( i <= n ) {						  
	else :						      	    ending_index = i ;					    	currSum = currSum + arr [ i ] ;				  
	    hash_map [ curr_sum ] = i			      	  }							    	if ( ( currSum == 0 ) ) {				  
    for i in range ( 0 , n ) :				      	  if ( hM . containsKey ( sum + n ) ) {			    	  maxLen = i + 1 ;					  
	if ( arr [ i ] == - 1 ) :			      	    if ( max_len < i - hM . get ( sum + n ) ) {		    	  endingIndex = i ;					  
	    arr [ i ] = 0				      	      max_len = i - hM . get ( sum + n ) ;		    	}							  
	else :						      	      ending_index = i ;				    	if ( hashMap . containsKey ( ( currSum + n ) ) ) {	  
	    arr [ i ] = 1				      	    }							    	  maxLen = Math . max ( maxLen , i - hashMap . get ( curr 
    print ( ending_index - max_len + 1 , end = " " )	      	  }							    	}							  
    print ( "to" , end = " " )				      	  else hM . put ( sum + n , i ) ;			    	else {							  
    print ( ending_index )				      	}							    	  hashMap . put ( currSum , i ) ;			  
    return max_len					      	for ( int i = 0 ;					    	}							  
							      	i < n ;							      }								  
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;		      ( i <= n ) ;						  
							      	}							      i ++ ) {							  
							      	int end = ending_index - max_len + 1 ;			    	if ( ( arr [ i ] == - 1 ) ) {				  
							      	System . out . println ( end + " to " + ending_index ) ;    	  arr [ i ] = 0 ;					  
							      	return max_len ;					    	}							  
							      }								    	else {							  
							      								    	  arr [ i ] = 1 ;					  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( endingIndex - maxLen + 1 ) ;	  
							      								      System . out . println ( "to" ) ;				  
							      								      System . out . println ( endingIndex ) ;			  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	      FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	    FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	  FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY
--							      --							    --								  --
def findRandomIndexOfMax ( arr , n ) :			      static void findRandomIndexOfMax ( int arr [ ] , int n ) {    static int findRandomIndexOfMax ( int [ ] arr , int n ) {	  script_not_found : None
    mp = dict ( )					      	HashMap < Integer , Integer > mp = new HashMap < Integer ,    Map < Integer , Integer > mp = new HashMap < > ( ) ;	  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] in mp ) :			      	i < n ;							      i < n ;							  
	    mp [ arr [ i ] ] = mp [ arr [ i ] ] + 1	      	i ++ ) if ( mp . containsKey ( arr [ i ] ) ) {		      i ++ ) {							  
	else :						      	  mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;	    	if ( ( mp . containsKey ( arr [ i ] ) ) ) {		  
	    mp [ arr [ i ] ] = 1			      	}							    	  mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;	  
    max_element = - 323567				      	else {							    	}							  
    max_so_far = - 323567				      	  mp . put ( arr [ i ] , 1 ) ;				    	else {							  
    for p in mp :					      	}							    	  mp . put ( arr [ i ] , 1 ) ;				  
	if ( mp [ p ] > max_so_far ) :			      	int max_element = Integer . MIN_VALUE ;			    	}							  
	    max_so_far = mp [ p ]			      	int max_so_far = Integer . MIN_VALUE ;			      }								  
	    max_element = p				      	for ( Map . Entry < Integer , Integer > p : mp . entrySet (   int maxElement = - 323567 ;				  
    r = int ( ( ( random.randrange ( 1 , max_so_far , 2 ) % m 	  if ( p . getValue ( ) > max_so_far ) {		      int maxSoFar = - 323567 ;					  
    i = 0						      	    max_so_far = p . getValue ( ) ;			      for ( int p : mp . keySet ( ) ) {				  
    count = 0						      	    max_element = p . getKey ( ) ;			    	if ( ( mp . get ( p ) ) > maxSoFar ) {			  
    while ( i < n ) :					      	  }							    	  maxSoFar = mp . get ( p ) ;				  
	if ( arr [ i ] == max_element ) :		      	}							    	  maxElement = p ;					  
	    count = count + 1				      	int r = ( int ) ( ( new Random ( ) . nextInt ( max_so_far ) 	}							  
	if ( count == r ) :				      	for ( int i = 0 , count = 0 ;				      }								  
	    print ( "Element with maximum frequency present a 	i < n ;							      int r = ( int ) ( ( ( Math . random ( ) * maxSoFar ) % maxS 
	    break					      	i ++ ) {						      int i = 0 ;						  
	i = i + 1					      	  if ( arr [ i ] == max_element ) count ++ ;		      int count = 0 ;						  
							      	  if ( count == r ) {					      while ( ( i < n ) ) {					  
							      	    System . out . print ( "Element with maximum frequency  	if ( ( arr [ i ] == maxElement ) ) {			  
							      	    break ;						    	  count = count + 1 ;					  
							      	  }							    	}							  
							      	}							    	if ( ( count == r ) ) {					  
							      }								    	  System . out . println ( "Element with maximum frequenc 
							      								    	  break ;						  
							      								    	}							  
							      								    	i = i + 1 ;						  
							      								      }								  
							      								      return i ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_BITONIC_SUBARRAY				      MAXIMUM_SUM_BITONIC_SUBARRAY				    MAXIMUM_SUM_BITONIC_SUBARRAY				  MAXIMUM_SUM_BITONIC_SUBARRAY
--							      --							    --								  --
def maxSumBitonicSubArr ( arr , n ) :			      static int maxSumBitonicSubArr ( int arr [ ] , int n ) {	    public static int maxSumBitonicSubArr ( int [ ] arr , int n ) success : None
    msis = [ None ] * n					      	int [ ] msis = new int [ n ] ;				      int [ ] msis = new int [ n ] ;				  
    msds = [ None ] * n					      	int [ ] msds = new int [ n ] ;				      int [ ] msds = new int [ n ] ;				  
    max_sum = 0						      	int max_sum = Integer . MIN_VALUE ;			      int maxSum = 0 ;						  
    msis [ 0 ] = arr [ 0 ]				      	msis [ 0 ] = arr [ 0 ] ;				      msis [ 0 ] = arr [ 0 ] ;					  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if ( arr [ i ] > arr [ i - 1 ] ) :		      	i < n ;							      i < n ;							  
	    msis [ i ] = msis [ i - 1 ] + arr [ i ]	      	i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [   i ++ ) {							  
	else :						      	else msis [ i ] = arr [ i ] ;				    	if ( ( arr [ i ] > arr [ i - 1 ] ) ) {			  
	    msis [ i ] = arr [ i ]			      	msds [ n - 1 ] = arr [ n - 1 ] ;			    	  msis [ i ] = msis [ i - 1 ] + arr [ i ] ;		  
    msds [ n - 1 ] = arr [ n - 1 ]			      	for ( int i = n - 2 ;					    	}							  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	i >= 0 ;						    	else {							  
	if ( arr [ i ] > arr [ i + 1 ] ) :		      	i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ 	  msis [ i ] = arr [ i ] ;				  
	    msds [ i ] = msds [ i + 1 ] + arr [ i ]	      	else msds [ i ] = arr [ i ] ;				    	}							  
	else :						      	for ( int i = 0 ;					      }								  
	    msds [ i ] = arr [ i ]			      	i < n ;							      msds [ n - 1 ] = arr [ n - 1 ] ;				  
    for i in range ( n ) :				      	i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ]   for ( int i = n - 2 ;					  
	if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ]  	return max_sum ;					      i >= 0 ;							  
	    max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] ) }								      i -- ) {							  
    return max_sum					      								    	if ( ( arr [ i ] > arr [ i + 1 ] ) ) {			  
							      								    	  msds [ i ] = msds [ i + 1 ] + arr [ i ] ;		  
							      								    	}							  
							      								    	else {							  
							      								    	  msds [ i ] = arr [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( maxSum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) 
							      								    	  maxSum = ( msis [ i ] + msds [ i ] - arr [ i ] ) ;	  
							      								    	}							  
							      								      }								  
							      								      return maxSum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT		      MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT			    MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT			  MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT
--							      --							    --								  --
def maxSumSubarrayRemovingOneEle ( arr , n ) :		      static int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n public static int maxSumSubarrayRemovingOneEle ( int [ ] arr  error : MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT.
    fw = [ 0 for k in range ( n ) ]			      	int fw [ ] = new int [ n ] ;				      int [ ] fw = new int [ n ] ;				  java:67: error: variable i is already defined in m
    bw = [ 0 for k in range ( n ) ]			      	int bw [ ] = new int [ n ] ;				      int [ ] bw = new int [ n ] ;				  ethod f_filled(int[],int)   for ( int i = 1 ;
    cur_max , max_so_far = arr [ 0 ] , arr [ 0 ]	      	int cur_max = arr [ 0 ] , max_so_far = arr [ 0 ] ;	      for ( int k = 0 ;						  	  ^ 1 error
    for i in range ( n ) :				      	fw [ 0 ] = arr [ 0 ] ;					      k < n ;							  
	cur_max = max ( arr [ i ] , cur_max + arr [ i ] )     	for ( int i = 1 ;					      k ++ ) {							  
	max_so_far = max ( max_so_far , cur_max )	      	i < n ;							    	fw [ k ] = 0 ;						  
	fw [ i ] = cur_max				      	i ++ ) {						    	bw [ k ] = 0 ;						  
    cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ]	      	  cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] )    }								  
    i = n - 2						      	  max_so_far = Math . max ( max_so_far , cur_max ) ;	      int curMax , maxSoFar ;					  
    while i >= 0 :					      	  fw [ i ] = cur_max ;					      for ( int i = 0 ;						  
	cur_max = max ( arr [ i ] , cur_max + arr [ i ] )     	}							      i < n ;							  
	max_so_far = max ( max_so_far , cur_max )	      	cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ;	      i ++ ) {							  
	bw [ i ] = cur_max				      	for ( int i = n - 2 ;					    	curMax = Math . max ( arr [ i ] , curMax + arr [ i ] ) ;  
	i -= 1						      	i >= 0 ;						    	maxSoFar = Math . max ( maxSoFar , curMax ) ;		  
    fans = max_so_far					      	i -- ) {						    	fw [ i ] = curMax ;					  
    for i in range ( 1 , n - 1 ) :			      	  cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] )    }								  
	fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] )     	  max_so_far = Math . max ( max_so_far , cur_max ) ;	      curMax = maxSoFar = bw [ n - 1 ] = arr [ n - 1 ] ;	  
    return fans						      	  bw [ i ] = cur_max ;					      int i = n - 2 ;						  
							      	}							      while ( i >= 0 ) {					  
							      	int fans = max_so_far ;					    	curMax = Math . max ( arr [ i ] , curMax + arr [ i ] ) ;  
							      	for ( int i = 1 ;					    	maxSoFar = Math . max ( maxSoFar , curMax ) ;		  
							      	i < n - 1 ;						    	bw [ i ] = curMax ;					  
							      	i ++ ) fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 	i -- ;							  
							      	return fans ;						      }								  
							      }								      int fans = maxSoFar ;					  
							      								      for ( int i = 1 ;						  
							      								      i < n - 1 ;						  
							      								      i ++ ) fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 
							      								      return fans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA
--							      --							    --								  --
def lenghtOfLongestAP ( set , n ) :			      static int lenghtOfLongestAP ( int set [ ] , int n ) {	    public static int lenghtOfLongestAP ( int [ ] set , int n ) { error : Exception in thread "main" java.lang.Array
    if ( n <= 2 ) :					      	if ( n <= 2 ) return n ;				      if ( ( n <= 2 ) ) return n ;				  IndexOutOfBoundsException: Index 27 out of bounds
	return n					      	int L [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] L = new int [ n ] [ n ] ;			  for length 27 	at LENGTH_OF_THE_LONGEST_ARITHMATIC
    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]   	int llap = 2 ;						      for ( int x = 0 ;						  _PROGRESSION_IN_A_SORTED_ARRAY.f_filled(LENGTH_OF_
    llap = 2						      	for ( int i = 0 ;					      x < n ;							  THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARR
    for i in range ( n ) :				      	i < n ;							      x ++ ) L [ x ] [ n ] = 0 ;				  AY.java:51) 	at LENGTH_OF_THE_LONGEST_ARITHMATIC_P
	L [ i ] [ n - 1 ] = 2				      	i ++ ) L [ i ] [ n - 1 ] = 2 ;				      int llap = 2 ;						  ROGRESSION_IN_A_SORTED_ARRAY.main(LENGTH_OF_THE_LO
    for j in range ( n - 2 , 0 , - 1 ) :		      	for ( int j = n - 2 ;					      for ( int i = 0 ;						  NGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRAY.jav
	i = j - 1					      	j >= 1 ;						      i < n ;							  a:111)
	k = j + 1					      	j -- ) {						      i ++ ) L [ i ] [ n - 1 ] = 2 ;				  
	while ( i >= 0 and k <= n - 1 ) :		      	  int i = j - 1 , k = j + 1 ;				      for ( int j = n - 2 ;					  
	    if ( set [ i ] + set [ k ] < 2 * set [ j ] ) :    	  while ( i >= 0 && k <= n - 1 ) {			      j > 0 ;							  
		k += 1					      	    if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ;	      j -- ) {							  
	    elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :  	    else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {	    	int i = j - 1 ;						  
		L [ i ] [ j ] = 2			      	      L [ i ] [ j ] = 2 ;				    	int k = j + 1 ;						  
		i -= 1					      	      i -- ;						    	while ( ( i >= 0 ) && ( k <= n - 1 ) ) {		  
	    else :					      	    }							    	  if ( ( set [ i ] + set [ k ] ) < 2 * set [ j ] ) {	  
		L [ i ] [ j ] = L [ j ] [ k ] + 1	      	    else {						    	    k ++ ;						  
		llap = max ( llap , L [ i ] [ j ] )	      	      L [ i ] [ j ] = L [ j ] [ k ] + 1 ;		    	  }							  
		i -= 1					      	      llap = Math . max ( llap , L [ i ] [ j ] ) ;	    	  else if ( ( set [ i ] + set [ k ] ) > 2 * set [ j ] ) { 
		k += 1					      	      i -- ;						    	    L [ i ] [ j ] = 2 ;					  
		while ( i >= 0 ) :			      	      k ++ ;						    	    i -- ;						  
		    L [ i ] [ j ] = 2			      	    }							    	  }							  
		    i -= 1				      	  }							    	  else {						  
    return llap						      	  while ( i >= 0 ) {					    	    L [ i ] [ j ] = L [ j ] [ k ] + 1 ;			  
							      	    L [ i ] [ j ] = 2 ;					    	    llap = Math . max ( llap , L [ i ] [ j ] ) ;	  
							      	    i -- ;						    	    i -- ;						  
							      	  }							    	    k ++ ;						  
							      	}							    	    while ( ( i >= 0 ) ) {				  
							      	return llap ;						    	      L [ i ] [ j ] = 2 ;				  
							      }								    	      i -- ;						  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return llap ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET
--							      --							    --								  --
def maximumZeros ( arr , n , k ) :			      static int maximumZeros ( int arr [ ] , int n , int k ) {	    public static int maximumZeros ( int [ ] arr , int n , int k  script_not_found : None
    global MAX5						      	int subset [ ] [ ] = new int [ k + 1 ] [ MAX5 + 5 ] ;	      int i ;							  
    subset = [ [ - 1 ] * ( MAX5 + 5 ) for _ in range ( k + 1  	for ( int [ ] row : subset ) {				      int [ ] [ ] subset = new int [ k + 1 ] [ MAX5 + 5 ] ;	  
    subset [ 0 ] [ 0 ] = 0				      	  Arrays . fill ( row , - 1 ) ;				      for ( ;							  
    for p in arr :					      	}							      i < subset [ 0 ] [ 0 ] ;					  
	pw2 , pw5 = 0 , 0				      	subset [ 0 ] [ 0 ] = 0 ;				      i ++ ) {							  
	while not p % 2 :				      	for ( int p = 0 ;					    	subset [ i ] [ 0 ] = - 1 ;				  
	    pw2 += 1					      	p < n ;							      }								  
	    p //= 2					      	p ++ ) {						      for ( ;							  
	while not p % 5 :				      	  int pw2 = 0 , pw5 = 0 ;				      i < subset [ 0 ] [ 0 ] ;					  
	    pw5 += 1					      	  while ( arr [ p ] % 2 == 0 ) {			      i ++ ) {							  
	    p //= 5					      	    pw2 ++ ;						    	subset [ i ] [ 1 ] = 0 ;				  
	for i in range ( k - 1 , - 1 , - 1 ) :		      	    arr [ p ] /= 2 ;					      }								  
	    for j in range ( MAX5 ) :			      	  }							      for ( ;							  
		if subset [ i ] [ j ] != - 1 :		      	  while ( arr [ p ] % 5 == 0 ) {			      i < subset [ 0 ] [ 0 ] ;					  
		    subset [ i + 1 ] [ j + pw5 ] = ( max ( su 	    pw5 ++ ;						      i ++ ) {							  
    ans = 0						      	    arr [ p ] /= 5 ;					    	subset [ i ] [ 0 ] = 0 ;				  
    for i in range ( MAX5 ) :				      	  }							      }								  
	ans = max ( ans , min ( i , subset [ k ] [ i ] ) )    	  for ( int i = k - 1 ;					      for ( int j = 0 ;						  
    return ans						      	  i >= 0 ;						      j < subset [ 0 ] [ 0 ] ;					  
							      	  i -- ) {						      j ++ ) {							  
							      	    for ( int j = 0 ;					    	subset [ i ] [ j ] = - 1 ;				  
							      	    j < MAX5 ;						      }								  
							      	    j ++ ) {						      for ( int j = 0 ;						  
							      	      if ( subset [ i ] [ j ] != - 1 ) {		      j < subset [ 0 ] [ j ] ;					  
							      		subset [ i + 1 ] [ j + pw5 ] = Math . max ( subset    j ++ ) {							  
							      	      }							    	subset [ i ] [ j ] = ( Math . max ( subset [ i ] [ j ] +  
							      	    }							      }								  
							      	  }							      return ans ;						  
							      	}							    }								  
							      	int ans = 0 ;						    								  
							      	for ( int i = 0 ;					    								  
							      	i < MAX5 ;						    								  
							      	i ++ ) {						    								  
							      	  ans = Math . max ( ans , Math . min ( i , subset [ k ] [  								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
def bestFit ( blockSize , m , processSize , n ) :	      static void bestFit ( int blockSize [ ] , int m , int process static void bestFit ( int [ ] blockSize , int m , int [ ] pro script_not_found : None
    allocation = [ - 1 ] * n				      	int allocation [ ] = new int [ n ] ;			      int [ ] allocation = new int [ n ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      Arrays . fill ( allocation , - 1 ) ;			  
	bestIdx = - 1					      	i < allocation . length ;				      for ( int i = 0 ;						  
	for j in range ( m ) :				      	i ++ ) allocation [ i ] = - 1 ;				      i < n ;							  
	    if blockSize [ j ] >= processSize [ i ] :	      	for ( int i = 0 ;					      i ++ ) {							  
		if bestIdx == - 1 :			      	i < n ;							    	int bestIdx = - 1 ;					  
		    bestIdx = j				      	i ++ ) {						    	for ( int j = 0 ;					  
		elif blockSize [ bestIdx ] > blockSize [ j ]  	  int bestIdx = - 1 ;					    	j < m ;							  
		    bestIdx = j				      	  for ( int j = 0 ;					    	j ++ ) {						  
	if bestIdx != - 1 :				      	  j < m ;						    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	    allocation [ i ] = bestIdx			      	  j ++ ) {						    	    if ( bestIdx == - 1 ) {				  
	    blockSize [ bestIdx ] -= processSize [ i ]	      	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	      bestIdx = j ;					  
    print ( "Process No.Process Size	 Block no." )	      	      if ( bestIdx == - 1 ) bestIdx = j ;		    	    }							  
    for i in range ( n ) :				      	      else if ( blockSize [ bestIdx ] > blockSize [ j ] ) b 	    else if ( blockSize [ bestIdx ] > blockSize [ j ] ) { 
	print ( i + 1 , "	  " , processSize [ i ] , end 	    }							    	      bestIdx = j ;					  
	if allocation [ i ] != - 1 :			      	  }							    	    }							  
	    print ( allocation [ i ] + 1 )		      	  if ( bestIdx != - 1 ) {				    	  }							  
	else :						      	    allocation [ i ] = bestIdx ;			    	}							  
	    print ( "Not Allocated" )			      	    blockSize [ bestIdx ] -= processSize [ i ] ;	    	if ( bestIdx != - 1 ) {					  
							      	  }							    	  allocation [ i ] = bestIdx ;				  
							      	}							    	  blockSize [ bestIdx ] -= processSize [ i ] ;		  
							      	System . out . println ( "\nProcess No.\tProcess Size\tBloc 	}							  
							      	for ( int i = 0 ;					      }								  
							      	i < n ;							      System . out . println ( "Process No. Process Size    Block 
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  System . out . print ( "   " + ( i + 1 ) + "\t\t" + proce   i < n ;							  
							      	  if ( allocation [ i ] != - 1 ) System . out . print ( all   i ++ ) {							  
							      	  else System . out . print ( "Not Allocated" ) ;	    	System . out . print ( i + 1 + " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁  
							      	  System . out . println ( ) ;				    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X	      CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X	    CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X	  CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X
--							      --							    --								  --
def fill0X ( m , n ) :					      static void fill0X ( int m , int n ) {			    public static void fill0X ( int m , int n ) {		  script_not_found : None
    i , k , l = 0 , 0 , 0				      	int i , k = 0 , l = 0 ;					      int i , k = 0 , l = 0 ;					  
    r = m						      	int r = m , c = n ;					      int r = m , c = n ;					  
    c = n						      	char a [ ] [ ] = new char [ m ] [ n ] ;			      char [ ] [ ] a = new char [ n ] [ n ] ;			  
    a = [ [ None ] * n for i in range ( m ) ]		      	char x = 'X' ;						      char x = 'X' ;						  
    x = 'X'						      	while ( k < m && l < n ) {				      while ( k < m && l < n ) {				  
    while k < m and l < n :				      	  for ( i = l ;						    	for ( i = l ;						  
	for i in range ( l , n ) :			      	  i < n ;						    	i < n ;							  
	    a [ k ] [ i ] = x				      	  ++ i ) a [ k ] [ i ] = x ;				    	i ++ ) a [ k ] [ i ] = x ;				  
	k += 1						      	  k ++ ;						    	k ++ ;							  
	for i in range ( k , m ) :			      	  for ( i = k ;						    	for ( i = k ;						  
	    a [ i ] [ n - 1 ] = x			      	  i < m ;						    	i < m ;							  
	n -= 1						      	  ++ i ) a [ i ] [ n - 1 ] = x ;			    	i ++ ) a [ i ] [ n - 1 ] = x ;				  
	if k < m :					      	  n -- ;						    	n -- ;							  
	    for i in range ( n - 1 , l - 1 , - 1 ) :	      	  if ( k < m ) {					    	if ( k < m ) {						  
		a [ m - 1 ] [ i ] = x			      	    for ( i = n - 1 ;					    	  for ( i = n - 1 ;					  
	    m -= 1					      	    i >= l ;						    	  i >= l ;						  
	if l < n :					      	    -- i ) a [ m - 1 ] [ i ] = x ;			    	  i -- ) a [ m - 1 ] [ i ] = x ;			  
	    for i in range ( m - 1 , k - 1 , - 1 ) :	      	    m -- ;						    	  m -- ;						  
		a [ i ] [ l ] = x			      	  }							    	}							  
	    l += 1					      	  if ( l < n ) {					    	if ( l < n ) {						  
	x = 'X' if x == '0' else '0'			      	    for ( i = m - 1 ;					    	  for ( i = m - 1 ;					  
    for i in range ( r ) :				      	    i >= k ;						    	  i >= k ;						  
	for j in range ( c ) :				      	    -- i ) a [ i ] [ l ] = x ;				    	  i -- ) a [ i ] [ l ] = x ;				  
	    print ( a [ i ] [ j ] , end = " " )		      	    l ++ ;						    	  l ++ ;						  
	print ( )					      	  }							    	}							  
							      	  x = ( x == '0' ) ? 'X' : '0' ;			    	x = x == '0' ? '0' : '0' ;				  
							      	}							      }								  
							      	for ( i = 0 ;						      for ( i = 0 ;						  
							      	i < r ;							      i < r ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  for ( int j = 0 ;					    	for ( j = 0 ;						  
							      	  j < c ;						    	j < c ;							  
							      	  j ++ ) System . out . print ( a [ i ] [ j ] + " " ) ;	    	j ++ ) System . out . print ( a [ i ] [ j ] + " " ) ;	  
							      	  System . out . println ( ) ;				    	System . out . println ( ) ;				  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS		      LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS		    LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS		  LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS
--							      --							    --								  --
def lcsOf3 ( X , Y , Z , m , n , o ) :			      static int lcsOf3 ( String X , String Y , String Z , int m ,  public static int lcsOf3 ( String X , String Y , String Z , i script_not_found : None
    L = [ [ [ 0 for i in range ( o + 1 ) ] for j in range ( n 	int [ ] [ ] [ ] L = new int [ m + 1 ] [ n + 1 ] [ o + 1 ] ;   int [ ] [ ] L = new int [ o + 1 ] [ n + 1 ] ;		  
    for i in range ( m + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n + 1 ) :			      	i <= m ;						      i < n + 1 ;						  
	    for k in range ( o + 1 ) :			      	i ++ ) {						      i ++ ) {							  
		if ( i == 0 or j == 0 or k == 0 ) :	      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
		    L [ i ] [ j ] [ k ] = 0		      	  j <= n ;						    	j < n + 1 ;						  
		elif ( X [ i - 1 ] == Y [ j - 1 ] and X [ i - 	  j ++ ) {						    	j ++ ) {						  
		    L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
		else :					      	    k <= o ;						    	  k < o ;						  
		    L [ i ] [ j ] [ k ] = max ( max ( L [ i - 	    k ++ ) {						    	  k ++ ) {						  
    return L [ m ] [ n ] [ o ]				      	      if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] 	    if ( ( i == 0 ) || ( j == 0 ) || ( k == 0 ) ) {	  
							      	      else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1  	      L [ i ] [ j ] [ k ] = 0 ;				  
							      	      else L [ i ] [ j ] [ k ] = Math . max ( Math . max (  	    }							  
							      	    }							    	    else if ( ( X . charAt ( i - 1 ) == Y . charAt ( j -  
							      	  }							    	      L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 
							      	}							    	    }							  
							      	return L [ m ] [ n ] [ o ] ;				    	    else {						  
							      }								    	      L [ i ] [ j ] [ k ] = Math . max ( Math . max ( L [ 
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return L [ m ] [ n ] [ o ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM	      SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM		    SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM		  SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM
--							      --							    --								  --
def KnapSack ( val , wt , n , W ) :			      static int KnapSack ( int val [ ] , int wt [ ] , int n , int  public static int KnapSack ( int [ ] val , int [ ] wt , int n script_not_found : None
    mat = [ [ 0 for i in range ( W + 1 ) ] for i in range ( 2 	int mat [ ] [ ] = new int [ 2 ] [ W + 1 ] ;		      int [ ] [ ] mat = new int [ W + 1 ] [ 2 ] ;		  
    i = 0						      	int i = 0 ;						      for ( int i = 0 ;						  
    while i < n :					      	while ( i < n ) {					      i < 2 ;							  
	j = 0						      	  int j = 0 ;						      i ++ ) {							  
	if i % 2 == 0 :					      	  if ( i % 2 != 0 ) {					    	mat [ i ] [ 0 ] = 0 ;					  
	    while j < W :				      	    while ( ++ j <= W ) {				    	for ( int j = 0 ;					  
		j += 1					      	      if ( wt [ i ] <= j ) {				    	j < W ;							  
		if wt [ i ] <= j :			      		mat [ 1 ] [ j ] = Math . max ( val [ i ] + mat [ 0  	j ++ ) {						  
		    mat [ 1 ] [ j ] = max ( val [ i ] + mat [ 	      }							    	  mat [ i ] [ j ] = Math . max ( val [ i ] + mat [ 0 ] [  
		else :					      	      else {						    	}							  
		    mat [ 1 ] [ j ] = mat [ 0 ] [ j ]	      		mat [ 1 ] [ j ] = mat [ 0 ] [ j ] ;		      }								  
	else :						      	      }							      int i = 0 ;						  
	    while j < W :				      	    }							      while ( i < n ) {						  
		j += 1					      	  }							    	int j = 0 ;						  
		if wt [ i ] <= j :			      	  else {						    	if ( i % 2 == 0 ) {					  
		    mat [ 0 ] [ j ] = max ( val [ i ] + mat [ 	    while ( ++ j <= W ) {				    	  while ( j < W ) {					  
		else :					      	      if ( wt [ i ] <= j ) {				    	    j ++ ;						  
		    mat [ 0 ] [ j ] = mat [ 1 ] [ j ]	      		mat [ 0 ] [ j ] = Math . max ( val [ i ] + mat [ 1  	    if ( wt [ i ] <= j ) {				  
	i += 1						      	      }							    	      mat [ 1 ] [ j ] = Math . max ( val [ i ] + mat [ 1  
    if n % 2 == 0 :					      	      else {						    	    }							  
	return mat [ 0 ] [ W ]				      		mat [ 0 ] [ j ] = mat [ 1 ] [ j ] ;		    	    else {						  
    else :						      	      }							    	      mat [ 1 ] [ j ] = mat [ 0 ] [ j ] ;		  
	return mat [ 1 ] [ W ]				      	    }							    	    }							  
							      	  }							    	  }							  
							      	  i ++ ;						    	}							  
							      	}							    	else {							  
							      	return ( n % 2 != 0 ) ? mat [ 0 ] [ W ] : mat [ 1 ] [ W ] ; 	  while ( j < W ) {					  
							      }								    	    j ++ ;						  
							      								    	    if ( wt [ i ] <= j ) {				  
							      								    	      mat [ 0 ] [ j ] = Math . max ( val [ i ] + mat [ 1  
							      								    	    }							  
							      								    	    else {						  
							      								    	      mat [ 0 ] [ j ] = mat [ 1 ] [ j ] ;		  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								    	i ++ ;							  
							      								      }								  
							      								      if ( n % 2 == 0 ) {					  
							      								    	return mat [ 0 ] [ W ] ;				  
							      								      }								  
							      								      else {							  
							      								    	return mat [ 1 ] [ W ] ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
def worstFit ( blockSize , m , processSize , n ) :	      static void worstFit ( int blockSize [ ] , int m , int proces public static void worstFit ( int [ ] blockSize , int m , int script_not_found : None
    allocation = [ - 1 ] * n				      	int allocation [ ] = new int [ n ] ;			      int [ ] allocation = new int [ n ] ;			  
    for i in range ( n ) :				      	for ( int i = 0 ;					      allocation [ n ] = new int [ n ] ;			  
	wstIdx = - 1					      	i < allocation . length ;				      for ( int i = 0 ;						  
	for j in range ( m ) :				      	i ++ ) allocation [ i ] = - 1 ;				      i < n ;							  
	    if blockSize [ j ] >= processSize [ i ] :	      	for ( int i = 0 ;					      i ++ ) {							  
		if wstIdx == - 1 :			      	i < n ;							    	int wstIdx = - 1 ;					  
		    wstIdx = j				      	i ++ ) {						    	for ( int j = 0 ;					  
		elif blockSize [ wstIdx ] < blockSize [ j ] : 	  int wstIdx = - 1 ;					    	j < m ;							  
		    wstIdx = j				      	  for ( int j = 0 ;					    	j ++ ) {						  
	if wstIdx != - 1 :				      	  j < m ;						    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	    allocation [ i ] = wstIdx			      	  j ++ ) {						    	    if ( wstIdx == - 1 ) {				  
	    blockSize [ wstIdx ] -= processSize [ i ]	      	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	      wstIdx = j ;					  
    print ( "Process No.Process Size Block no." )	      	      if ( wstIdx == - 1 ) wstIdx = j ;			    	    }							  
    for i in range ( n ) :				      	      else if ( blockSize [ wstIdx ] < blockSize [ j ] ) ws 	    else if ( blockSize [ wstIdx ] < blockSize [ j ] ) {  
	print ( i + 1 , "	  " , processSize [ i ] , end 	    }							    	      wstIdx = j ;					  
	if allocation [ i ] != - 1 :			      	  }							    	    }							  
	    print ( allocation [ i ] + 1 )		      	  if ( wstIdx != - 1 ) {				    	  }							  
	else :						      	    allocation [ i ] = wstIdx ;				    	}							  
	    print ( "Not Allocated" )			      	    blockSize [ wstIdx ] -= processSize [ i ] ;		    	if ( wstIdx != - 1 ) {					  
							      	  }							    	  allocation [ i ] = wstIdx ;				  
							      	}							    	  blockSize [ wstIdx ] -= processSize [ i ] ;		  
							      	System . out . println ( "\nProcess No.\tProcess Size\tBloc 	}							  
							      	for ( int i = 0 ;					      }								  
							      	i < n ;							      System . out . println ( "Process No. Process Size Block no 
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  System . out . print ( "   " + ( i + 1 ) + "\t\t" + proce   i < n ;							  
							      	  if ( allocation [ i ] != - 1 ) System . out . print ( all   i ++ ) {							  
							      	  else System . out . print ( "Not Allocated" ) ;	    	System . out . print ( i + 1 + " ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁ ▁  
							      	  System . out . println ( ) ;				    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PREFIX_SUM_2D_ARRAY					      PREFIX_SUM_2D_ARRAY					    PREFIX_SUM_2D_ARRAY						  PREFIX_SUM_2D_ARRAY
--							      --							    --								  --
def prefixSum2D ( a ) :					      public static void prefixSum2D ( int a [ ] [ ] ) {	    public static void prefixSum2D ( int [ ] [ ] a ) {		  script_not_found : None
    global C , R					      	int R = a . length ;					      int i , j , C , R ;					  
    psa = [ [ 0 for x in range ( C ) ] for y in range ( R ) ] 	int C = a [ 0 ] . length ;				      int [ ] [ ] psa = new int [ C ] [ R ] ;			  
    psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ]			      	int psa [ ] [ ] = new int [ R ] [ C ] ;			      for ( i = 0 ;						  
    for i in range ( 1 , C ) :				      	psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;			      i < C ;							  
	psa [ 0 ] [ i ] = ( psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i 	for ( int i = 1 ;					      i ++ ) {							  
    for i in range ( 0 , R ) :				      	i < C ;							    	for ( j = 0 ;						  
	psa [ i ] [ 0 ] = ( psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 	i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i  	j < R ;							  
    for i in range ( 1 , R ) :				      	for ( int i = 1 ;					    	j ++ ) {						  
	for j in range ( 1 , C ) :			      	i < R ;							    	  psa [ i ] [ j ] = 0 ;					  
	    psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i 	i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0  	}							  
    for i in range ( 0 , R ) :				      	for ( int i = 1 ;					      }								  
	for j in range ( 0 , C ) :			      	i < R ;							      psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;				  
	    print ( psa [ i ] [ j ] , end = " " )	      	i ++ ) for ( int j = 1 ;				      for ( i = 1 ;						  
	print ( )					      	j < C ;							      i < C ;							  
							      	j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [    i ++ ) {							  
							      	for ( int i = 0 ;					    	psa [ 0 ] [ i ] = ( psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ) 
							      	i < R ;							      }								  
							      	i ++ ) {						      for ( i = 0 ;						  
							      	  for ( int j = 0 ;					      i < R ;							  
							      	  j < C ;						      i ++ ) {							  
							      	  j ++ ) System . out . print ( psa [ i ] [ j ] + " " ) ;   	psa [ i ] [ 0 ] = ( psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ) 
							      	  System . out . println ( ) ;				      }								  
							      	}							      for ( i = 1 ;						  
							      }								      i < R ;							  
							      								      i ++ ) {							  
							      								    	for ( j = 1 ;						  
							      								    	j < C ;							  
							      								    	j ++ ) {						  
							      								    	  psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i ] [ j 
							      								    	}							  
							      								      }								  
							      								      for ( i = 0 ;						  
							      								      i <= R ;							  
							      								      i ++ ) {							  
							      								    	for ( j = 0 ;						  
							      								    	j <= C ;						  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( psa [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1     GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1	    GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1	  GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1
--							      --							    --								  --
def isSubSeqDivisible ( str ) :				      static boolean isSubSeqDivisible ( String str ) {		    static boolean isSubSeqDivisible ( String str ) {		  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 	int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;		      int [ ] [ ] dp = new int [ 10 ] [ n + 1 ] ;		  
    arr = [ 0 for i in range ( n + 1 ) ]		      	int arr [ ] = new int [ n + 1 ] ;			      int [ ] arr = new int [ n + 1 ] ;				  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 0 ;						  
	arr [ i ] = int ( str [ i - 1 ] )		      	i <= n ;						      i < n ;							  
    for i in range ( 1 , n + 1 ) :			      	i ++ ) arr [ i ] = ( int ) ( str . charAt ( i - 1 ) - '0' )   i ++ ) {							  
	dp [ i ] [ arr [ i ] % 8 ] = 1			      	for ( int i = 1 ;					    	arr [ i ] = Integer . parseInt ( str . substring ( i - 1  
	for j in range ( 8 ) :				      	i <= n ;						      }								  
	    if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + a 	i ++ ) {						      for ( int i = 1 ;						  
		dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp  	  dp [ i ] [ arr [ i ] % 8 ] = 1 ;			      i <= n ;							  
	    if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) :      	  for ( int j = 0 ;					      i ++ ) {							  
		dp [ i ] [ j ] = dp [ i - 1 ] [ j ]	      	  j < 8 ;						    	dp [ i ] [ arr [ i ] % 8 ] = 1 ;			  
    for i in range ( 1 , n + 1 ) :			      	  j ++ ) {						    	for ( int j = 0 ;					  
	if ( dp [ i ] [ 0 ] == 1 ) :			      	    if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i 	j < 8 ;							  
	    return True					      	    if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j 	j ++ ) {						  
    return False					      	  }							    	  if ( ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ 
							      	}							    	    dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1  
							      	for ( int i = 1 ;					    	  }							  
							      	i <= n ;						    	  if ( ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) ) {	  
							      	i ++ ) {						    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		  
							      	  if ( dp [ i ] [ 0 ] == 1 ) return true ;		    	  }							  
							      	}							    	}							  
							      	return false ;						      }								  
							      }								      for ( int i = 1 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	if ( ( dp [ i ] [ 0 ] == 1 ) ) {			  
							      								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT	      FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT	    FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT	  FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT
--							      --							    --								  --
def findTriplets ( x ) :				      static void findTriplets ( int x ) {			    static void findTriplets ( int x ) {			  script_not_found : None
    fact = [ ]						      	Vector < Integer > fact = new Vector < Integer > ( ) ;	      int [ ] fact = new int [ ( int ) Math . sqrt ( x ) ] ;	  
    factors = set ( )					      	HashSet < Integer > factors = new HashSet < Integer > ( ) ;   Set < Integer > factors = new HashSet < > ( ) ;		  
    for i in range ( 2 , int ( sqrt ( x ) ) ) :		      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	if ( x % i == 0 ) :				      	i <= Math . sqrt ( x ) ;				      i < ( int ) Math . sqrt ( x ) ;				  
	    fact.append ( i )				      	i ++ ) {						      i ++ ) {							  
	    if ( x / i != i ) :				      	  if ( x % i == 0 ) {					    	if ( ( x % i ) == 0 ) {					  
		fact.append ( x // i )			      	    fact . add ( i ) ;					    	  fact [ i ] = i ;					  
	    factors.add ( i )				      	    if ( x / i != i ) fact . add ( x / i ) ;		    	  if ( ( x / i ) != i ) {				  
	    factors.add ( x // i )			      	    factors . add ( i ) ;				    	    fact [ i ] = x / i ;				  
    found = False					      	    factors . add ( x / i ) ;				    	  }							  
    k = len ( fact )					      	  }							    	  factors . add ( i ) ;					  
    for i in range ( k ) :				      	}							    	  factors . add ( x / i ) ;				  
	a = fact [ i ]					      	boolean found = false ;					    	}							  
	for j in range ( k ) :				      	int k = fact . size ( ) ;				      }								  
	    b = fact [ j ]				      	for ( int i = 0 ;					      boolean found = false ;					  
	    if ( ( a != b ) and ( x % ( a * b ) == 0 ) and (  	i < k ;							      int k = fact . length ;					  
		print ( a , b , x // ( a * b ) )	      	i ++ ) {						      for ( int i = 0 ;						  
		found = True				      	  int a = fact . get ( i ) ;				      i < k ;							  
		break					      	  for ( int j = 0 ;					      i ++ ) {							  
	if ( found ) :					      	  j < k ;						    	int a = fact [ i ] ;					  
	    break					      	  j ++ ) {						    	for ( int j = 0 ;					  
    if ( not found ) :					      	    int b = fact . get ( j ) ;				    	j < k ;							  
	print ( "-1" )					      	    if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a  	j ++ ) {						  
							      	      System . out . print ( a + " " + b + " " + ( x / ( a  	  int b = fact [ j ] ;					  
							      	      found = true ;					    	  if ( ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / (  
							      	      break ;						    	    System . out . println ( a + " " + b + " " + x / ( a  
							      	    }							    	    found = true ;					  
							      	  }							    	    break ;						  
							      	  if ( found ) break ;					    	  }							  
							      	}							    	}							  
							      	if ( ! found ) System . out . print ( "-1" ) ;		      }								  
							      }								      if ( ( found ) ) {					  
							      								    	break ;							  
							      								      }								  
							      								      if ( ( ! found ) ) {					  
							      								    	System . out . println ( "-1" ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINTING_ITEMS_01_KNAPSACK				      PRINTING_ITEMS_01_KNAPSACK				    PRINTING_ITEMS_01_KNAPSACK					  PRINTING_ITEMS_01_KNAPSACK
--							      --							    --								  --
def printknapSack ( W , wt , val , n ) :		      static void printknapSack ( int W , int wt [ ] , int val [ ]  public static void printknapSack ( int W , int [ ] wt , int [ script_not_found : None
    K = [ [ 0 for w in range ( W + 1 ) ] for i in range ( n + 	int i , w ;						      int [ ] [ ] K = new int [ W + 1 ] [ ] ;			  
    for i in range ( n + 1 ) :				      	int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		      for ( int w = 0 ;						  
	for w in range ( W + 1 ) :			      	for ( i = 0 ;						      w < n + 1 ;						  
	    if i == 0 or w == 0 :			      	i <= n ;						      w ++ ) {							  
		K [ i ] [ w ] = 0			      	i ++ ) {						    	for ( int i = 0 ;					  
	    elif wt [ i - 1 ] <= w :			      	  for ( w = 0 ;						    	i < W + 1 ;						  
		K [ i ] [ w ] = max ( val [ i - 1 ] + K [ i - 	  w <= W ;						    	i ++ ) {						  
	    else :					      	  w ++ ) {						    	  if ( i == 0 || w == 0 ) {				  
		K [ i ] [ w ] = K [ i - 1 ] [ w ]	      	    if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;		    	    K [ i ] [ w ] = 0 ;					  
    res = K [ n ] [ W ]					      	    else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . ma 	  }							  
    print ( res )					      	    else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		    	  else if ( wt [ i - 1 ] <= w ) {			  
    w = W						      	  }							    	    K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i -  
    for i in range ( n , 0 , - 1 ) :			      	}							    	  }							  
	if res <= 0 :					      	int res = K [ n ] [ W ] ;				    	  else {						  
	    break					      	System . out . println ( res ) ;			    	    K [ i ] [ w ] = K [ i - 1 ] [ w ] ;			  
	if res == K [ i - 1 ] [ w ] :			      	w = W ;							    	  }							  
	    continue					      	for ( i = n ;						    	}							  
	else :						      	i > 0 && res > 0 ;					      }								  
	    print ( wt [ i - 1 ] )			      	i -- ) {						      int res = K [ n ] [ W ] ;					  
	    res = res - val [ i - 1 ]			      	  if ( res == K [ i - 1 ] [ w ] ) continue ;		      System . out . println ( res ) ;				  
	    w = w - wt [ i - 1 ]			      	  else {						      int w = W ;						  
							      	    System . out . print ( wt [ i - 1 ] + " " ) ;	      for ( int i = n ;						  
							      	    res = res - val [ i - 1 ] ;				      i > 0 ;							  
							      	    w = w - wt [ i - 1 ] ;				      i -- ) {							  
							      	  }							    	if ( res <= 0 ) {					  
							      	}							    	  break ;						  
							      }								    	}							  
							      								    	if ( res == K [ i - 1 ] [ w ] ) {			  
							      								    	  continue ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  System . out . println ( wt [ i - 1 ] ) ;		  
							      								    	  res = res - val [ i - 1 ] ;				  
							      								    	  w = w - wt [ i - 1 ] ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS	      FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS		    FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS		  FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS
--							      --							    --								  --
def maxSum ( stack1 , stack2 , stack3 , n1 , n2 , n3 ) :      public static int maxSum ( int stack1 [ ] , int stack2 [ ] ,  public static int maxSum ( int [ ] stack1 , int [ ] stack2 ,  success : None
    sum1 , sum2 , sum3 = 0 , 0 , 0			      	int sum1 = 0 , sum2 = 0 , sum3 = 0 ;			      int sum1 = 0 , sum2 = 0 , sum3 = 0 ;			  
    for i in range ( n1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum1 += stack1 [ i ]				      	i < n1 ;						      i < n1 ;							  
    for i in range ( n2 ) :				      	i ++ ) sum1 += stack1 [ i ] ;				      i ++ ) sum1 += stack1 [ i ] ;				  
	sum2 += stack2 [ i ]				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for i in range ( n3 ) :				      	i < n2 ;						      i < n2 ;							  
	sum3 += stack3 [ i ]				      	i ++ ) sum2 += stack2 [ i ] ;				      i ++ ) sum2 += stack2 [ i ] ;				  
    top1 , top2 , top3 = 0 , 0 , 0			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ans = 0						      	i < n3 ;						      i < n3 ;							  
    while ( 1 ) :					      	i ++ ) sum3 += stack3 [ i ] ;				      i ++ ) sum3 += stack3 [ i ] ;				  
	if ( top1 == n1 or top2 == n2 or top3 == n3 ) :	      	int top1 = 0 , top2 = 0 , top3 = 0 ;			      int top1 = 0 , top2 = 0 , top3 = 0 ;			  
	    return 0					      	int ans = 0 ;						      int ans = 0 ;						  
	if ( sum1 == sum2 and sum2 == sum3 ) :		      	while ( true ) {					      while ( ( ans = 1 ) != 0 ) {				  
	    return sum1					      	  if ( top1 == n1 || top2 == n2 || top3 == n3 ) return 0 ;  	if ( ( top1 == n1 ) || ( top2 == n2 ) || ( top3 == n3 ) ) 
	if ( sum1 >= sum2 and sum1 >= sum3 ) :		      	  if ( sum1 == sum2 && sum2 == sum3 ) return sum1 ;	    	if ( ( sum1 == sum2 ) && ( sum2 == sum3 ) ) return sum1 ; 
	    sum1 -= stack1 [ top1 ]			      	  if ( sum1 >= sum2 && sum1 >= sum3 ) sum1 -= stack1 [ top1 	if ( ( sum1 >= sum2 ) && ( sum1 >= sum3 ) ) {		  
	    top1 = top1 + 1				      	  else if ( sum2 >= sum3 && sum2 >= sum3 ) sum2 -= stack2 [ 	  sum1 -= stack1 [ top1 ] ;				  
	elif ( sum2 >= sum3 and sum2 >= sum3 ) :	      	  else if ( sum3 >= sum2 && sum3 >= sum1 ) sum3 -= stack3 [ 	  top1 = top1 + 1 ;					  
	    sum2 -= stack2 [ top2 ]			      	}							    	}							  
	    top2 = top2 + 1				      }								    	else if ( ( sum2 >= sum3 ) && ( sum2 >= sum3 ) ) {	  
	elif ( sum3 >= sum2 and sum3 >= sum1 ) :	      								    	  sum2 -= stack2 [ top2 ] ;				  
	    sum3 -= stack3 [ top3 ]			      								    	  top2 = top2 + 1 ;					  
	    top3 = top3 + 1				      								    	}							  
							      								    	else if ( ( sum3 >= sum2 ) && ( sum3 >= sum1 ) ) {	  
							      								    	  sum3 -= stack3 [ top3 ] ;				  
							      								    	  top3 = top3 + 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K		      LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K		    LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K		  LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K
--							      --							    --								  --
def longestSubsequenceCommonSegment ( k , s1 , s2 ) :	      static int longestSubsequenceCommonSegment ( int k , String s public static int longestSubsequenceCommonSegment ( int k , S error : LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENG
    n = len ( s1 )					      	int n = s1 . length ( ) ;				      int n = s1 . length ( ) ;					  TH_K.java:92: error: illegal start of expression p
    m = len ( s2 )					      	int m = s2 . length ( ) ;				      int m = s2 . length ( ) ;					  ublic static void main(String args[]) { ^ 1 error
    lcs = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n 	int lcs [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		      int [ ] [ ] lcs = new int [ m + 1 ] [ n + 1 ] ;		  
    cnt = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n 	int cnt [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		      int [ ] [ ] cnt = new int [ m + 1 ] [ n + 1 ] ;		  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int x = 0 ;						  
	for j in range ( 1 , m + 1 ) :			      	i <= n ;						      x < lcs . length ;					  
	    lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ] , lcs 	i ++ ) {						      x ++ ) {							  
	    if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) :	      	  for ( int j = 1 ;					    	for ( int y = 0 ;					  
		cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1 	  j <= m ;						    	y < lcs . length ;					  
	    if ( cnt [ i ] [ j ] >= k ) :		      	  j ++ ) {						    	y ++ ) {						  
		for a in range ( k , cnt [ i ] [ j ] + 1 ) :  	    lcs [ i ] [ j ] = Math . max ( lcs [ i - 1 ] [ j ] , lc 	  for ( int x = 0 ;					  
		    lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , 	    if ( s1 . charAt ( i - 1 ) == s2 . charAt ( j - 1 ) ) c 	  y < lcs [ y ] [ y ] ;					  
    return lcs [ n ] [ m ]				      	    if ( cnt [ i ] [ j ] >= k ) {			    	  y ++ ) {						  
							      	      for ( int a = k ;					    	    for ( int x = 0 ;					  
							      	      a <= cnt [ i ] [ j ] ;				    	    x < cnt [ y ] [ x ] ;				  
							      	      a ++ ) lcs [ i ] [ j ] = Math . max ( lcs [ i ] [ j ] 	    x ++ ) {						  
							      	    }							    	      for ( int y = 0 ;					  
							      	  }							    	      y < cnt [ y ] [ y ] ;				  
							      	}							    	      y ++ ) {						  
							      	return lcs [ n ] [ m ] ;				    		for ( int x = 0 ;				  
							      }								    		y < cnt [ y ] [ x ] ;				  
							      								    		y ++ ) {					  
							      								    		  lcs [ y ] [ x ] [ y ] = Math . max ( lcs [ y ]  
							      								    		  if ( ( s1 . charAt ( i - 1 ) == s2 . charAt ( j 
							      								    		    cnt [ y ] [ x ] [ y ] = cnt [ y ] [ x ] [ y ] 
							      								    		  }						  
							      								    		}						  
							      								    	      }							  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 1 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j <= m ;						  
							      								    	j ++ ) {						  
							      								    	  lcs [ i ] [ j ] = Math . max ( lcs [ i - 1 ] [ j ] , lc 
							      								    	  if ( ( s1 . charAt ( i - 1 ) ) == ( s2 . charAt ( j - 1 
							      								    	    cnt [ y ] [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1 ; 
							      								    	  }							  
							      								    	  if ( ( cnt [ y ] [ j ] ) >= k ) {			  
							      								    	    for ( int a = k ;					  
							      								    	    a <= cnt [ y ] [ j ] ;				  
							      								    	    a ++ ) {						  
							      								    	      lcs [ y ] [ i ] [ j ] = Math . max ( lcs [ i ] [ j  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								    	return lcs [ n ] [ m ] ;				  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_APPLYING_GIVEN_EQUATION			      SORT_ARRAY_APPLYING_GIVEN_EQUATION			    SORT_ARRAY_APPLYING_GIVEN_EQUATION				  SORT_ARRAY_APPLYING_GIVEN_EQUATION
--							      --							    --								  --
def sortArray ( arr , n , A , B , C ) :			      static void sortArray ( int arr [ ] , int n , int A , int B , public static void sortArray ( int [ ] arr , int n , int A ,  error : SORT_ARRAY_APPLYING_GIVEN_EQUATION.java:86
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  : error: variable i is already defined in method f
	arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i 	i < n ;							      i < n ;							  _filled(int[],int,int,int,int)   for ( int i = 0 ;
    index = - ( sys.maxsize - 1 )			      	i ++ ) arr [ i ] = A * arr [ i ] * arr [ i ] + B * arr [ i    i ++ ) {							  	       ^ 1 error
    maximum = - ( sys.maxsize - 1 )			      	int index = - 1 ;					    	arr [ i ] = ( A * arr [ i ] * arr [ i ] + B * arr [ i ] + 
    for i in range ( n ) :				      	int maximum = - 999999 ;				      }								  
	if maximum < arr [ i ] :			      	for ( int i = 0 ;					      int index = - ( Integer . MAX_VALUE - 1 ) ;		  
	    index = i					      	i < n ;							      int maximum = - ( Integer . MAX_VALUE - 1 ) ;		  
	    maximum = arr [ i ]				      	i ++ ) {						      for ( int i = 0 ;						  
    i = 0 j = n - 1					      	  if ( maximum < arr [ i ] ) {				      i < n ;							  
    new_arr = [ 0 ] * n					      	    index = i ;						      i ++ ) {							  
    k = 0						      	    maximum = arr [ i ] ;				    	if ( maximum < arr [ i ] ) {				  
    while i < index and j > index :			      	  }							    	  index = i ;						  
	if arr [ i ] < arr [ j ] :			      	}							    	  maximum = arr [ i ] ;					  
	    new_arr [ k ] = arr [ i ]			      	int i = 0 , j = n - 1 ;					    	}							  
	    k += 1					      	int [ ] new_arr = new int [ n ] ;			      }								  
	    i += 1					      	int k = 0 ;						      int i = 0 ;						  
	else :						      	while ( i < index && j > index ) {			      int j = n - 1 ;						  
	    new_arr [ k ] = arr [ j ]			      	  if ( arr [ i ] < arr [ j ] ) new_arr [ k ++ ] = arr [ i +   int [ ] newArr = new int [ n ] ;				  
	    k += 1					      	  else new_arr [ k ++ ] = arr [ j -- ] ;		      int k = 0 ;						  
	    j -= 1					      	}							      while ( i < index && j > index ) {			  
    while i < index :					      	while ( i < index ) new_arr [ k ++ ] = arr [ i ++ ] ;	    	if ( arr [ i ] < arr [ j ] ) {				  
	new_arr [ k ] = arr [ i ]			      	while ( j > index ) new_arr [ k ++ ] = arr [ j -- ] ;	    	  newArr [ k ] = arr [ i ] ;				  
	k += 1						      	new_arr [ n - 1 ] = maximum ;				    	  k ++ ;						  
	i += 1						      	for ( int p = 0 ;					    	  i ++ ;						  
    while j > index :					      	p < n ;							    	}							  
	new_arr [ k ] = arr [ j ]			      	p ++ ) arr [ p ] = new_arr [ p ] ;			    	else {							  
	k += 1						      }								    	  newArr [ k ] = arr [ j ] ;				  
	j -= 1						      								    	  k ++ ;						  
	new_arr [ n - 1 ] = maximum			      								    	  j -- ;						  
    for i in range ( n ) :				      								    	}							  
	arr [ i ] = new_arr [ i ]			      								      }								  
							      								      while ( i < index ) {					  
							      								    	newArr [ k ] = arr [ i ] ;				  
							      								    	k ++ ;							  
							      								    	i ++ ;							  
							      								      }								  
							      								      while ( j > index ) {					  
							      								    	newArr [ k ] = arr [ j ] ;				  
							      								    	k ++ ;							  
							      								    	j -- ;							  
							      								    	newArr [ n - 1 ] = maximum ;				  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	arr [ i ] = newArr [ i ] ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM			      MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM			    MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM				  MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM
--							      --							    --								  --
def maxSum ( mat , n ) :				      static int maxSum ( int [ ] [ ] mat , int n ) {		    public static int maxSum ( int [ ] [ ] mat , int n ) {	  script_not_found : None
    if n == 1 :						      	if ( n == 1 ) return mat [ 0 ] [ 0 ] ;			      if ( n == 1 ) return mat [ 0 ] [ 0 ] ;			  
	return mat [ 0 ] [ 0 ]				      	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] dp = new int [ n ] [ n ] ;			  
    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]  	int maxSum = Integer . MIN_VALUE , max ;		      for ( int i = 0 ;						  
    maxSum = INT_MIN					      	for ( int j = 0 ;					      i < n ;							  
    for j in range ( n ) :				      	j < n ;							      i ++ ) dp [ i ] [ 0 ] = 0 ;				  
	dp [ n - 1 ] [ j ] = mat [ n - 1 ] [ j ]	      	j ++ ) dp [ n - 1 ] [ j ] = mat [ n - 1 ] [ j ] ;	      int maxSum = INT_MIN ;					  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	for ( int i = n - 2 ;					      for ( int j = 0 ;						  
	for j in range ( n ) :				      	i >= 0 ;						      j < n ;							  
	    maxi = INT_MIN				      	i -- ) {						      j ++ ) {							  
	    if ( ( ( ( j - 1 ) >= 0 ) and ( maxi < dp [ i + 1 	  for ( int j = 0 ;					    	dp [ n - 1 ] [ j ] = mat [ n - 1 ] [ j ] ;		  
		maxi = dp [ i + 1 ] [ j - 1 ]		      	  j < n ;						      }								  
	    if ( ( ( ( j + 1 ) < n ) and ( maxi < dp [ i + 1  	  j ++ ) {						      for ( int i = n - 2 ;					  
		maxi = dp [ i + 1 ] [ j + 1 ]		      	    max = Integer . MIN_VALUE ;				      i >= 0 ;							  
	    dp [ i ] [ j ] = mat [ i ] [ j ] + maxi	      	    if ( ( ( j - 1 ) >= 0 ) && ( max < dp [ i + 1 ] [ j - 1   j -- ) {							  
    for j in range ( n ) :				      	    if ( ( ( j + 1 ) < n ) && ( max < dp [ i + 1 ] [ j + 1  	for ( int j = 0 ;					  
	if ( maxSum < dp [ 0 ] [ j ] ) :		      	    dp [ i ] [ j ] = mat [ i ] [ j ] + max ;		    	j < n ;							  
	    maxSum = dp [ 0 ] [ j ]			      	  }							    	j ++ ) {						  
    return maxSum					      	}							    	  int maxi = INT_MIN ;					  
							      	for ( int j = 0 ;					    	  if ( ( ( ( j - 1 ) >= 0 ) && ( maxi < dp [ i + 1 ] [ j  
							      	j < n ;							    	  if ( ( ( ( j + 1 ) < n ) && ( maxi < dp [ i + 1 ] [ j + 
							      	j ++ ) if ( maxSum < dp [ 0 ] [ j ] ) maxSum = dp [ 0 ] [ j 	  dp [ i ] [ j ] = mat [ i ] [ j ] + maxi ;		  
							      	return maxSum ;						    	}							  
							      }								      }								  
							      								      for ( int j = 0 ;						  
							      								      j < n ;							  
							      								      j ++ ) if ( ( maxSum < dp [ 0 ] [ j ] ) ) maxSum = dp [ 0 ] 
							      								      return maxSum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAGIC_SQUARE						      MAGIC_SQUARE						    MAGIC_SQUARE						  MAGIC_SQUARE
--							      --							    --								  --
def generateSquare ( n ) :				      static void generateSquare ( int n ) {			    public static void generateSquare ( int n ) {		  script_not_found : None
    magicSquare = [ [ 0 for x in range ( n ) ] for y in range 	int [ ] [ ] magicSquare = new int [ n ] [ n ] ;		      int [ ] [ ] magicSquare = new int [ n ] [ n ] ;		  
    i = n / 2						      	int i = n / 2 ;						      for ( int x = 0 ;						  
    j = n - 1						      	int j = n - 1 ;						      x < n ;							  
    num = 1						      	for ( int num = 1 ;					      x ++ ) {							  
    while num <= ( n * n ) :				      	num <= n * n ;						    	for ( int y = 0 ;					  
	if i == - 1 and j == n :			      	) {							    	y < n ;							  
	    j = n - 2					      	  if ( i == - 1 && j == n ) {				    	y ++ ) {						  
	    i = 0					      	    j = n - 2 ;						    	  magicSquare [ x ] [ y ] = 0 ;				  
	else :						      	    i = 0 ;						    	}							  
	    if j == n :					      	  }							      }								  
		j = 0					      	  else {						      int i = n / 2 ;						  
	    if i < 0 :					      	    if ( j == n ) j = 0 ;				      int j = n - 1 ;						  
		i = n - 1				      	    if ( i < 0 ) i = n - 1 ;				      int num = 1 ;						  
	if magicSquare [ int ( i ) ] [ int ( j ) ] :	      	  }							      while ( num <= ( n * n ) ) {				  
	    j = j - 2					      	  if ( magicSquare [ i ] [ j ] != 0 ) {			    	if ( i == - 1 && j == n ) {				  
	    i = i + 1					      	    j -= 2 ;						    	  j = n - 2 ;						  
	    continue					      	    i ++ ;						    	  i = 0 ;						  
	else :						      	    continue ;						    	}							  
	    magicSquare [ int ( i ) ] [ int ( j ) ] = num     	  }							    	else {							  
	    num = num + 1				      	  else magicSquare [ i ] [ j ] = num ++ ;		    	  if ( j == n ) {					  
	j = j + 1					      	  j ++ ;						    	    j = 0 ;						  
	i = i - 1					      	  i -- ;						    	  }							  
    print ( "Magic Squre for n =" , n )			      	}							    	  if ( i < 0 ) {					  
    print ( "Sum of each row or column" , n * ( n * n + 1 ) / 	System . out . println ( "The Magic Square for " + n + ":"  	    i = n - 1 ;						  
    for i in range ( 0 , n ) :				      	System . out . println ( "Sum of each row or column " + n * 	  }							  
	for j in range ( 0 , n ) :			      	for ( i = 0 ;						    	}							  
	    print ( '%2d ' % ( magicSquare [ i ] [ j ] ) , en 	i < n ;							    	if ( magicSquare [ ( int ) i ] [ ( int ) j ] != 0 ) {	  
	    if j == n - 1 :				      	i ++ ) {						    	  j = j - 2 ;						  
		print ( )				      	  for ( j = 0 ;						    	  i = i + 1 ;						  
							      	  j < n ;						    	  continue ;						  
							      	  j ++ ) System . out . print ( magicSquare [ i ] [ j ] + " 	}							  
							      	  System . out . println ( ) ;				    	else {							  
							      	}							    	  magicSquare [ ( int ) i ] [ ( int ) j ] = num ;	  
							      }								    	  num = num + 1 ;					  
							      								    	}							  
							      								    	j = j + 1 ;						  
							      								    	i = i - 1 ;						  
							      								      }								  
							      								      System . out . println ( "Magic Squre for n =" + n ) ;	  
							      								      System . out . println ( "Sum of each row or column" + n *  
							      								      for ( i = 0 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	for ( j = 0 ;						  
							      								    	j <= n ;						  
							      								    	j ++ ) {						  
							      								    	  System . out . printf ( "%2d " , magicSquare [ i ] [ j  
							      								    	  if ( j == n - 1 ) {					  
							      								    	    System . out . println ( ) ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS
--							      --							    --								  --
def largestKSubmatrix ( a ) :				      static int largestKSubmatrix ( int [ ] [ ] a ) {		    public static int largestKSubmatrix ( int [ ] [ ] a ) {	  script_not_found : None
    dp = [ [ 0 for x in range ( Row ) ] for y in range ( Col  	int [ ] [ ] dp = new int [ Row ] [ Col ] ;		      int [ ] [ ] dp = new int [ Row ] [ Col ] ;		  
    result = 0						      	int result = 0 ;					      for ( int x = 0 ;						  
    for i in range ( Row ) :				      	for ( int i = 0 ;					      x < Row ;							  
	for j in range ( Col ) :			      	i < Row ;						      x ++ ) {							  
	    if ( i == 0 or j == 0 ) :			      	i ++ ) {						    	for ( int y = 0 ;					  
		dp [ i ] [ j ] = 1			      	  for ( int j = 0 ;					    	y < Col ;						  
	    else :					      	  j < Col ;						    	y ++ ) {						  
		if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] and a 	  j ++ ) {						    	  dp [ x ] [ y ] [ x ] = 0 ;				  
		    dp [ i ] [ j ] = min ( min ( dp [ i - 1 ] 	    if ( i == 0 || j == 0 ) dp [ i ] [ j ] = 1 ;	    	}							  
		else :					      	    else {						      }								  
		    dp [ i ] [ j ] = 1			      	      if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] && a [ i ] [    int result = 0 ;						  
	    result = max ( result , dp [ i ] [ j ] )	      		dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] > dp [ i ] [    for ( int i = 0 ;						  
    return result					      	      }							      i < Row ;							  
							      	      else dp [ i ] [ j ] = 1 ;				      i ++ ) {							  
							      	    }							    	for ( int j = 0 ;					  
							      	    result = result > dp [ i ] [ j ] ? result : dp [ i ] [  	j < Col ;						  
							      	  }							    	j ++ ) {						  
							      	}							    	  if ( ( i == 0 || j == 0 ) ) {				  
							      	return result ;						    	    dp [ i ] [ j ] = 1 ;				  
							      }								    	  }							  
							      								    	  else {						  
							      								    	    if ( ( a [ i ] [ j ] == a [ i - 1 ] [ j ] ) && ( a [  
							      								    	      dp [ i ] [ j ] = Math . min ( Math . min ( dp [ i - 
							      								    	    }							  
							      								    	    else {						  
							      								    	      dp [ i ] [ j ] = 1 ;				  
							      								    	    }							  
							      								    	  }							  
							      								    	  result = Math . max ( result , dp [ i ] [ j ] ) ;	  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS	      WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS	    WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS		  WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS
--							      --							    --								  --
def countTransformation ( a , b ) :			      static int countTransformation ( String a , String b ) {	    static int countTransformation ( String a , String b ) {	  success : None
    n = len ( a )					      	int n = a . length ( ) , m = b . length ( ) ;		      int n = a . length ( ) ;					  
    m = len ( b )					      	if ( m == 0 ) {						      int m = b . length ( ) ;					  
    if m == 0 :						      	  return 1 ;						      if ( m == 0 ) {						  
	return 1					      	}							    	return 1 ;						  
    dp = [ [ 0 ] * ( n + 1 ) for _ in range ( m + 1 ) ]	      	int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      }								  
    for i in range ( m ) :				      	for ( int i = 0 ;					      int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		  
	for j in range ( i , n ) :			      	i < m ;							      for ( int i = 0 ;						  
	    if i == 0 :					      	i ++ ) {						      i < m ;							  
		if j == 0 :				      	  for ( int j = i ;					      i ++ ) {							  
		    if a [ j ] == b [ i ] :		      	  j < n ;						    	for ( int j = i ;					  
			dp [ i ] [ j ] = 1		      	  j ++ ) {						    	j < n ;							  
		    else :				      	    if ( i == 0 ) {					    	j ++ ) {						  
			dp [ i ] [ j ] = 0		      	      if ( j == 0 ) {					    	  if ( i == 0 ) {					  
		elif a [ j ] == b [ i ] :		      		dp [ i ] [ j ] = ( a . charAt ( j ) == b . charAt ( 	    if ( j == 0 ) {					  
		    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1   	      }							    	      if ( a . charAt ( j ) == b . charAt ( i ) ) {	  
		else :					      	      else if ( a . charAt ( j ) == b . charAt ( i ) ) {    		dp [ i ] [ j ] = 1 ;				  
		    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]	      		dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ;	    	      }							  
	    else :					      	      }							    	      else {						  
		if a [ j ] == b [ i ] :			      	      else {						    		dp [ i ] [ j ] = 0 ;				  
		    dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + d 		dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		    	      }							  
		else :					      	      }							    	    }							  
		    dp [ i ] [ j ] = dp [ i ] [ j - 1 ]	      	    }							    	    else if ( a . charAt ( j ) == b . charAt ( i ) ) {	  
    return dp [ m - 1 ] [ n - 1 ]			      	    else if ( a . charAt ( j ) == b . charAt ( i ) ) {	    	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ;		  
							      	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [  	    }							  
							      	    }							    	    else {						  
							      	    else {						    	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		  
							      	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		    	    }							  
							      	    }							    	  }							  
							      	  }							    	  else {						  
							      	}							    	    if ( a . charAt ( j ) == b . charAt ( i ) ) {	  
							      	return dp [ m - 1 ] [ n - 1 ] ;				    	      dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i - 1  
							      }								    	    }							  
							      								    	    else {						  
							      								    	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ m - 1 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_ELEMENTS					      ROTATE_MATRIX_ELEMENTS					    ROTATE_MATRIX_ELEMENTS					  ROTATE_MATRIX_ELEMENTS
--							      --							    --								  --
def rotateMatrix ( mat ) :				      static void rotatematrix ( int m , int n , int mat [ ] [ ] )  public static int [ ] [ ] rotateMatrix ( int [ ] [ ] mat ) {  script_not_found : None
    if not len ( mat ) :				      	int row = 0 , col = 0 ;					      if ( mat . length == 0 ) return null ;			  
	return						      	int prev , curr ;					      int top = 0 ;						  
    top = 0						      	while ( row < m && col < n ) {				      int bottom = mat . length - 1 ;				  
    bottom = len ( mat ) - 1				      	  if ( row + 1 == m || col + 1 == n ) break ;		      int left = 0 ;						  
    left = 0						      	  prev = mat [ row + 1 ] [ col ] ;			      int right = mat [ 0 ] . length - 1 ;			  
    right = len ( mat [ 0 ] ) - 1			      	  for ( int i = col ;					      while ( left < right && top < bottom ) {			  
    while left < right and top < bottom :		      	  i < n ;						    	int [ ] prev = mat [ top + 1 ] [ left ] ;		  
	prev = mat [ top + 1 ] [ left ]			      	  i ++ ) {						    	for ( int i = left ;					  
	for i in range ( left , right + 1 ) :		      	    curr = mat [ row ] [ i ] ;				    	i <= right ;						  
	    curr = mat [ top ] [ i ]			      	    mat [ row ] [ i ] = prev ;				    	i ++ ) {						  
	    mat [ top ] [ i ] = prev			      	    prev = curr ;					    	  int [ ] curr = mat [ top ] [ i ] ;			  
	    prev = curr					      	  }							    	  mat [ top ] [ i ] = prev ;				  
	top += 1					      	  row ++ ;						    	  prev = curr ;						  
	for i in range ( top , bottom + 1 ) :		      	  for ( int i = row ;					    	}							  
	    curr = mat [ i ] [ right ]			      	  i < m ;						    	top ++ ;						  
	    mat [ i ] [ right ] = prev			      	  i ++ ) {						    	for ( int i = top ;					  
	    prev = curr					      	    curr = mat [ i ] [ n - 1 ] ;			    	i <= bottom ;						  
	right -= 1					      	    mat [ i ] [ n - 1 ] = prev ;			    	i ++ ) {						  
	for i in range ( right , left - 1 , - 1 ) :	      	    prev = curr ;					    	  int [ ] curr = mat [ i ] [ right ] ;			  
	    curr = mat [ bottom ] [ i ]			      	  }							    	  mat [ i ] [ right ] = prev ;				  
	    mat [ bottom ] [ i ] = prev			      	  n -- ;						    	  prev = curr ;						  
	    prev = curr					      	  if ( row < m ) {					    	}							  
	bottom -= 1					      	    for ( int i = n - 1 ;				    	right -- ;						  
	for i in range ( bottom , top - 1 , - 1 ) :	      	    i >= col ;						    	for ( int i = right ;					  
	    curr = mat [ i ] [ left ]			      	    i -- ) {						    	i >= left ;						  
	    mat [ i ] [ left ] = prev			      	      curr = mat [ m - 1 ] [ i ] ;			    	i -- ) {						  
	    prev = curr					      	      mat [ m - 1 ] [ i ] = prev ;			    	  int [ ] curr = mat [ bottom ] [ i ] ;			  
	left += 1					      	      prev = curr ;					    	  mat [ bottom ] [ i ] = prev ;				  
    return mat						      	    }							    	  prev = curr ;						  
							      	  }							    	}							  
							      	  m -- ;						    	bottom -- ;						  
							      	  if ( col < n ) {					    	for ( int i = bottom ;					  
							      	    for ( int i = m - 1 ;				    	i >= top ;						  
							      	    i >= row ;						    	i -- ) {						  
							      	    i -- ) {						    	  int [ ] curr = mat [ i ] [ left ] ;			  
							      	      curr = mat [ i ] [ col ] ;			    	  mat [ i ] [ left ] = prev ;				  
							      	      mat [ i ] [ col ] = prev ;			    	  prev = curr ;						  
							      	      prev = curr ;					    	}							  
							      	    }							    	left ++ ;						  
							      	  }							      }								  
							      	  col ++ ;						      return mat ;						  
							      	}							    }								  
							      	for ( int i = 0 ;					    								  
							      	i < R ;							    								  
							      	i ++ ) {						    								  
							      	  for ( int j = 0 ;					    								  
							      	  j < C ;						    								  
							      	  j ++ ) System . out . print ( mat [ i ] [ j ] + " " ) ;   								  
							      	  System . out . print ( "\n" ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM
--							      --							    --								  --
def minSum ( arr , n ) :				      static int minSum ( int [ ] arr , int n ) {		    public static int minSum ( int [ ] arr , int n ) {		  success : None
    dp = [ 0 ] * n					      	int [ ] dp = new int [ n ] ;				      int [ ] dp = new int [ n ] ;				  
    if ( n == 1 ) :					      	if ( n == 1 ) return arr [ 0 ] ;			      if ( ( n == 1 ) ) return arr [ 0 ] ;			  
	return arr [ 0 ]				      	if ( n == 2 ) return Math . min ( arr [ 0 ] , arr [ 1 ] ) ;   if ( ( n == 2 ) ) return Math . min ( arr [ 0 ] , arr [ 1 ] 
    if ( n == 2 ) :					      	if ( n == 3 ) return Math . min ( arr [ 0 ] , Math . min (    if ( ( n == 3 ) ) return Math . min ( arr [ 0 ] , Math . mi 
	return min ( arr [ 0 ] , arr [ 1 ] )		      	if ( n == 4 ) return Math . min ( Math . min ( arr [ 0 ] ,    if ( ( n == 4 ) ) return Math . min ( Math . min ( arr [ 0  
    if ( n == 3 ) :					      	dp [ 0 ] = arr [ 0 ] ;					      dp [ 0 ] = arr [ 0 ] ;					  
	return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ]  	dp [ 1 ] = arr [ 1 ] ;					      dp [ 1 ] = arr [ 1 ] ;					  
    if ( n == 4 ) :					      	dp [ 2 ] = arr [ 2 ] ;					      dp [ 2 ] = arr [ 2 ] ;					  
	return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( ar 	dp [ 3 ] = arr [ 3 ] ;					      dp [ 3 ] = arr [ 3 ] ;					  
    dp [ 0 ] = arr [ 0 ]				      	for ( int i = 4 ;					      for ( int i = 4 ;						  
    dp [ 1 ] = arr [ 1 ]				      	i < n ;							      i < n ;							  
    dp [ 2 ] = arr [ 2 ]				      	i ++ ) dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp    i ++ ) dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp  
    dp [ 3 ] = arr [ 3 ]				      	return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2    return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2  
    for i in range ( 4 , n ) :				      }								    }								  
	dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp  								    								  
    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min (  								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH
--							      --							    --								  --
def isValidString ( str ) :				      static boolean isValidString ( String str ) {		    static boolean isValidString ( String str ) {		  script_not_found : None
    freq = [ 0 ] * CHARS				      	int freq [ ] = new int [ CHARS ] ;			      int [ ] freq = new int [ str . length ( ) ] ;		  
    for i in range ( len ( str ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	freq [ ord ( str [ i ] ) - ord ( 'a' ) ] += 1	      	i < str . length ( ) ;					      i < str . length ( ) ;					  
    freq1 = 0						      	i ++ ) {						      i ++ ) {							  
    count_freq1 = 0					      	  freq [ str . charAt ( i ) - 'a' ] ++ ;		    	freq [ str . charAt ( i ) - 'a' ] ++ ;			  
    for i in range ( CHARS ) :				      	}							      }								  
	if ( freq [ i ] != 0 ) :			      	int i , freq1 = 0 , count_freq1 = 0 ;			      int freq1 = 0 ;						  
	    freq1 = freq [ i ]				      	for ( i = 0 ;						      int countFreq1 = 0 ;					  
	    count_freq1 = 1				      	i < CHARS ;						      for ( int i = 0 ;						  
	    break					      	i ++ ) {						      i < CHARS ;						  
    freq2 = 0						      	  if ( freq [ i ] != 0 ) {				      i ++ ) {							  
    count_freq2 = 0					      	    freq1 = freq [ i ] ;				    	if ( ( freq [ i ] != 0 ) ) {				  
    for j in range ( i + 1 , CHARS ) :			      	    count_freq1 = 1 ;					    	  freq1 = freq [ i ] ;					  
	if ( freq [ j ] != 0 ) :			      	    break ;						    	  countFreq1 = 1 ;					  
	    if ( freq [ j ] == freq1 ) :		      	  }							    	  break ;						  
		count_freq1 += 1			      	}							    	}							  
	    else :					      	int j , freq2 = 0 , count_freq2 = 0 ;			      }								  
		count_freq2 = 1				      	for ( j = i + 1 ;					      int freq2 = 0 ;						  
		freq2 = freq [ j ]			      	j < CHARS ;						      int countFreq2 = 0 ;					  
		break					      	j ++ ) {						      for ( int j = i + 1 ;					  
    for k in range ( j + 1 , CHARS ) :			      	  if ( freq [ j ] != 0 ) {				      j < CHARS ;						  
	if ( freq [ k ] != 0 ) :			      	    if ( freq [ j ] == freq1 ) {			      j ++ ) {							  
	    if ( freq [ k ] == freq1 ) :		      	      count_freq1 ++ ;					    	if ( ( freq [ j ] != 0 ) ) {				  
		count_freq1 += 1			      	    }							    	  if ( ( freq [ j ] == freq1 ) ) {			  
	    if ( freq [ k ] == freq2 ) :		      	    else {						    	    countFreq1 ++ ;					  
		count_freq2 += 1			      	      count_freq2 = 1 ;					    	  }							  
	    else :					      	      freq2 = freq [ j ] ;				    	  else {						  
		return False				      	      break ;						    	    countFreq2 = 1 ;					  
	if ( count_freq1 > 1 and count_freq2 > 1 ) :	      	    }							    	    freq2 = freq [ j ] ;				  
	    return False				      	  }							    	    break ;						  
    return True						      	}							    	  }							  
							      	for ( int k = j + 1 ;					    	}							  
							      	k < CHARS ;						      }								  
							      	k ++ ) {						      for ( int k = j + 1 ;					  
							      	  if ( freq [ k ] != 0 ) {				      k < CHARS ;						  
							      	    if ( freq [ k ] == freq1 ) {			      k ++ ) {							  
							      	      count_freq1 ++ ;					    	if ( ( freq [ k ] != 0 ) ) {				  
							      	    }							    	  if ( ( freq [ k ] == freq1 ) ) {			  
							      	    if ( freq [ k ] == freq2 ) {			    	    countFreq1 ++ ;					  
							      	      count_freq2 ++ ;					    	  }							  
							      	    }							    	  if ( ( freq [ k ] == freq2 ) ) {			  
							      	    else {						    	    countFreq2 ++ ;					  
							      	      return false ;					    	  }							  
							      	    }							    	  else {						  
							      	  }							    	    return false ;					  
							      	  if ( count_freq1 > 1 && count_freq2 > 1 ) {		    	  }							  
							      	    return false ;					    	}							  
							      	  }							    	if ( ( countFreq1 > 1 ) && ( countFreq2 > 1 ) ) {	  
							      	}							    	  return false ;					  
							      	return true ;						    	}							  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL
--							      --							    --								  --
def minCells ( mat , m , n ) :				      static int minCells ( int mat [ ] [ ] , int m , int n ) {	    public static int minCells ( int [ ] [ ] mat , int m , int n  script_not_found : None
    dp = [ [ MAX for i in range ( n ) ] for i in range ( m )  	int dp [ ] [ ] = new int [ m ] [ n ] ;			      int [ ] [ ] dp = new int [ n ] [ m ] ;			  
    dp [ 0 ] [ 0 ] = 1					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for i in range ( m ) :				      	i < m ;							      i < m ;							  
	for j in range ( n ) :				      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
	    if ( dp [ i ] [ j ] != MAX and ( j + mat [ i ] [  	j < n ;							    	dp [ i ] [ 0 ] = MAX ;					  
		dp [ i ] [ j + mat [ i ] [ j ] ] = dp [ i ] [ 	j ++ ) dp [ i ] [ j ] = Integer . MAX_VALUE ;		    	dp [ i ] [ 0 ] = 1 ;					  
	    if ( dp [ i ] [ j ] != MAX and ( i + mat [ i ] [  	dp [ 0 ] [ 0 ] = 1 ;					      }								  
		dp [ i + mat [ i ] [ j ] ] [ j ] = dp [ i ] [ 	for ( int i = 0 ;					      for ( int i = 0 ;						  
    if ( dp [ m - 1 ] [ n - 1 ] != MAX ) :		      	i < m ;							      i < m ;							  
	return dp [ m - 1 ] [ n - 1 ]			      	i ++ ) {						      i ++ ) {							  
    return - 1						      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
							      	  j < n ;						    	j < n ;							  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    if ( dp [ i ] [ j ] != Integer . MAX_VALUE && ( j + mat 	  if ( ( dp [ i ] [ j ] != MAX && ( j + mat [ i ] [ j ] ) 
							      	    if ( dp [ i ] [ j ] != Integer . MAX_VALUE && ( i + mat 	    dp [ i ] [ j + mat [ i ] [ j ] ] = dp [ i ] [ j ] + 1 
							      	  }							    	  }							  
							      	}							    	  if ( ( dp [ i ] [ j ] != MAX && ( i + mat [ i ] [ j ] ) 
							      	if ( dp [ m - 1 ] [ n - 1 ] != Integer . MAX_VALUE ) return 	    dp [ i + mat [ i ] [ j ] ] [ j ] = dp [ i ] [ j ] + 1 
							      	return - 1 ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      if ( ( dp [ m - 1 ] [ n - 1 ] != MAX ) ) {		  
							      								    	return dp [ m - 1 ] [ n - 1 ] ;				  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRUFER_CODE_TREE_CREATION				      PRUFER_CODE_TREE_CREATION					    PRUFER_CODE_TREE_CREATION					  PRUFER_CODE_TREE_CREATION
--							      --							    --								  --
def printTreeEdges ( prufer , m ) :			      static void printTreeEdges ( int prufer [ ] , int m ) {	    static void printTreeEdges ( int [ ] prufer , int m ) {	  script_not_found : None
    vertices = m + 2					      	int vertices = m + 2 ;					      int vertices = m + 2 ;					  
    vertex_set = [ 0 ] * vertices			      	int vertex_set [ ] = new int [ vertices ] ;		      int [ ] vertexSet = new int [ vertices ] ;		  
    for i in range ( vertices - 2 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	vertex_set [ prufer [ i ] - 1 ] += 1		      	i < vertices ;						      i < vertices - 2 ;					  
    print ( "The edge set E(G) is :" )			      	i ++ ) vertex_set [ i ] = 0 ;				      i ++ ) {							  
    j = 0						      	for ( int i = 0 ;					    	vertexSet [ prufer [ i ] - 1 ] ++ ;			  
    for i in range ( vertices - 2 ) :			      	i < vertices - 2 ;					      }								  
	for j in range ( vertices ) :			      	i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1 ;		      System . out . println ( "The edge set E(G) is :" ) ;	  
	    if ( vertex_set [ j ] == 0 ) :		      	System . out . print ( "\nThe edge set E(G) is :\n" ) ;	      int j = 0 ;						  
		vertex_set [ j ] = - 1			      	int j = 0 ;						      for ( int i = 0 ;						  
		print ( "(" , ( j + 1 ) , ", " , prufer [ i ] 	for ( int i = 0 ;					      i < vertices - 2 ;					  
		vertex_set [ prufer [ i ] - 1 ] -= 1	      	i < vertices - 2 ;					      i ++ ) {							  
		break					      	i ++ ) {						    	for ( j = 0 ;						  
    j = 0						      	  for ( j = 0 ;						    	j < vertices ;						  
    for i in range ( vertices ) :			      	  j < vertices ;					    	j ++ ) {						  
	if ( vertex_set [ i ] == 0 and j == 0 ) :	      	  j ++ ) {						    	  if ( ( vertexSet [ j ] == 0 ) ) {			  
	    print ( "(" , ( i + 1 ) , ", " , sep = "" , end = 	    if ( vertex_set [ j ] == 0 ) {			    	    vertexSet [ j ] = - 1 ;				  
	    j += 1					      	      vertex_set [ j ] = - 1 ;				    	    System . out . print ( "(" + ( j + 1 ) + ", " + prufe 
	elif ( vertex_set [ i ] == 0 and j == 1 ) :	      	      System . out . print ( "(" + ( j + 1 ) + ", " + prufe 	    vertexSet [ prufer [ i ] - 1 ] -- ;			  
	    print ( ( i + 1 ) , ")" )			      	      vertex_set [ prufer [ i ] - 1 ] -- ;		    	    break ;						  
							      	      break ;						    	  }							  
							      	    }							    	}							  
							      	  }							      }								  
							      	}							      j = 0 ;							  
							      	j = 0 ;							      for ( int i = 0 ;						  
							      	for ( int i = 0 ;					      i < vertices ;						  
							      	i < vertices ;						      i ++ ) {							  
							      	i ++ ) {						    	if ( ( vertexSet [ i ] == 0 ) && ( j == 0 ) ) {		  
							      	  if ( vertex_set [ i ] == 0 && j == 0 ) {		    	  System . out . print ( "(" + ( i + 1 ) + ", " + prufer  
							      	    System . out . print ( "(" + ( i + 1 ) + ", " ) ;	    	  j ++ ;						  
							      	    j ++ ;						    	}							  
							      	  }							    	else if ( ( vertexSet [ i ] == 0 ) && ( j == 1 ) ) {	  
							      	  else if ( vertex_set [ i ] == 0 && j == 1 ) System . out  	  System . out . println ( ( i + 1 ) + ")" ) ;		  
							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION		      MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION		    MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION			  MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION
--							      --							    --								  --
def minMaxValues ( arr , n , m ) :			      static void minMaxValues ( int [ ] arr , int n , int m ) {    public static void minMaxValues ( int [ ] arr , int n , int m script_not_found : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    INF = 1000000000					      	for ( int i = 0 ;					      int INF = 1000000000 ;					  
    MAX = 50						      	i < ( n + m ) ;						      int MAX = 50 ;						  
    for i in range ( 0 , ( n + m ) ) :			      	i ++ ) {						      for ( int i = 0 ;						  
	sum += arr [ i ]				      	  sum += arr [ i ] ;					      i <= ( n + m ) ;						  
	arr [ i ] += 50					      	  arr [ i ] += 50 ;					      i ++ ) {							  
    dp = [ [ 0 for x in range ( MAX * MAX + 1 ) ] for y in ra 	}							    	sum += arr [ i ] ;					  
    dp [ 0 ] [ 0 ] = 1					      	boolean dp [ ] [ ] = new boolean [ MAX + 1 ] [ MAX * MAX +  	arr [ i ] += 50 ;					  
    for i in range ( 0 , ( n + m ) ) :			      	dp [ 0 ] [ 0 ] = true ;					      }								  
	for k in range ( min ( n , i + 1 ) , 0 , - 1 ) :      	for ( int i = 0 ;					      int [ ] [ ] dp = new int [ MAX * MAX + 1 ] [ MAX ] ;	  
	    for j in range ( 0 , MAX * MAX + 1 ) :	      	i < ( n + m ) ;						      for ( int x = 0 ;						  
		if ( dp [ k - 1 ] [ j ] ) :		      	i ++ ) {						      x < dp [ 0 ] . length ;					  
		    dp [ k ] [ j + arr [ i ] ] = 1	      	  for ( int k = Math . min ( n , i + 1 ) ;		      x ++ ) dp [ x ] [ x ] [ y ] = 0 ;				  
    max_value = - 1 * INF				      	  k >= 1 ;						      dp [ 0 ] [ 0 ] = 1 ;					  
    min_value = INF					      	  k -- ) {						      for ( int i = 0 ;						  
    for i in range ( 0 , MAX * MAX + 1 ) :		      	    for ( int j = 0 ;					      i <= ( n + m ) ;						  
	if ( dp [ n ] [ i ] ) :				      	    j < MAX * MAX + 1 ;					      i ++ ) {							  
	    temp = i - 50 * n				      	    j ++ ) {						    	for ( int k = Math . min ( n , i + 1 ) ;		  
	    max_value = max ( max_value , temp * ( sum - temp 	      if ( dp [ k - 1 ] [ j ] ) dp [ k ] [ j + arr [ i ] ]  	k > 0 ;							  
	    min_value = min ( min_value , temp * ( sum - temp 	    }							    	k -- ) {						  
    print ( "Maximum Value: {}\nMinimum Value: {}".format ( m 	  }							    	  for ( int j = 0 ;					  
							      	}							    	  j <= MAX * MAX ;					  
							      	double max_value = - 1 * INF , min_value = INF ;	    	  j ++ ) {						  
							      	for ( int i = 0 ;					    	    if ( ( dp [ k - 1 ] [ j ] ) != 0 ) dp [ k ] [ j + arr 
							      	i < MAX * MAX + 1 ;					    	  }							  
							      	i ++ ) {						    	}							  
							      	  if ( dp [ n ] [ i ] ) {				      }								  
							      	    int temp = i - 50 * n ;				      int maxValue = - 1 * INF ;				  
							      	    max_value = Math . max ( max_value , temp * ( sum - tem   int minValue = INF ;					  
							      	    min_value = Math . min ( min_value , temp * ( sum - tem   for ( int i = 0 ;						  
							      	  }							      i <= MAX * MAX ;						  
							      	}							      i ++ ) {							  
							      	System . out . print ( "Maximum Value: " + ( int ) max_valu 	if ( ( dp [ n ] [ i ] ) != 0 ) {			  
							      }								    	  int temp = i - 50 * n ;				  
							      								    	  maxValue = Math . max ( maxValue , temp * ( sum - temp  
							      								    	  minValue = Math . min ( minValue , temp * ( sum - temp  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "Maximum Value: " + maxValue + "\n 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6	      PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6	    PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6	  PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6
--							      --							    --								  --
def greatest ( s ) :					      static void greatest ( String s ) {			    public static void greatest ( String s ) {			  script_not_found : None
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    a = [ 0 for i in range ( n ) ]			      	int [ ] a = new int [ n ] ;				      int a [ ] = new int [ n ] ;				  
    Sum = 0						      	int sum = 0 ;						      for ( int i = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      i < n ;							  
	a [ i ] = ord ( s [ i ] ) - ord ( '0' )		      	i < n ;							      i ++ ) {							  
	Sum += a [ i ]					      	i ++ ) {						    	a [ i ] = 0 ;						  
    if ( a [ n - 1 ] % 2 ) :				      	  a [ i ] = s . charAt ( i ) - '0' ;			      }								  
	if ( a [ n - 2 ] % 2 != 0 or ( Sum - a [ n - 1 ] ) %  	  sum += a [ i ] ;					      int Sum = 0 ;						  
	    print ( "-1" )				      	}							      for ( int i = 0 ;						  
	else :						      	if ( a [ n - 1 ] % 2 != 0 ) {				      i < n ;							  
	    print ( n )					      	  if ( a [ n - 2 ] % 2 != 0 || ( sum - a [ n - 1 ] ) % 3 !=   i ++ ) {							  
    else :						      	    System . out . println ( "-1" ) ;			    	a [ i ] = ( int ) s . charAt ( i ) - '0' ;		  
	re = Sum % 3					      	  }							    	Sum += a [ i ] ;					  
	dell = - 1					      	  else {						      }								  
	flag = 0					      	    System . out . println ( n ) ;			      if ( ( a [ n - 1 ] % 2 ) != 0 ) {				  
	for i in range ( n - 1 ) :			      	  }							    	if ( ( a [ n - 2 ] % 2 ) != 0 || ( ( Sum - a [ n - 1 ] )  
	    if ( ( a [ i ] ) % 3 == re ) :		      	}							    	  System . out . println ( "-1" ) ;			  
		if ( a [ i + 1 ] > a [ i ] ) :		      	else {							    	}							  
		    dell = i				      	  int re = sum % 3 ;					    	else {							  
		    flag = 1				      	  int del = - 1 ;					    	  System . out . println ( n ) ;			  
		    break				      	  int flag = 0 ;					    	}							  
		else :					      	  for ( int i = 0 ;					      }								  
		    dell = i				      	  i < n - 1 ;						      else {							  
	if ( flag == 0 ) :				      	  i ++ ) {						    	int re = Sum % 3 ;					  
	    if ( a [ n - 2 ] % 2 == 0 and re == a [ n - 1 ] % 	    if ( ( a [ i ] ) % 3 == re ) {			    	int dell = - 1 ;					  
		dell = n - 1				      	      if ( a [ i + 1 ] > a [ i ] ) {			    	int flag = 0 ;						  
	if ( dell == - 1 ) :				      		del = i ;					    	for ( int i = 0 ;					  
	    print ( "-1" )				      		flag = 1 ;					    	i < n - 1 ;						  
	else :						      		break ;						    	i ++ ) {						  
	    print ( dell + 1 )				      	      }							    	  if ( ( ( a [ i ] ) % 3 == re ) ) {			  
							      	      else {						    	    if ( ( a [ i + 1 ] ) > a [ i ] ) {			  
							      		del = i ;					    	      dell = i ;					  
							      	      }							    	      flag = 1 ;					  
							      	    }							    	      break ;						  
							      	  }							    	    }							  
							      	  if ( flag == 0 ) {					    	    else {						  
							      	    if ( a [ n - 2 ] % 2 == 0 && re == a [ n - 1 ] % 3 ) de 	      dell = i ;					  
							      	  }							    	    }							  
							      	  if ( del == - 1 ) System . out . println ( - 1 ) ;	    	  }							  
							      	  else {						    	}							  
							      	    System . out . println ( del + 1 ) ;		    	if ( ( flag == 0 ) ) {					  
							      	  }							    	  if ( ( a [ n - 2 ] % 2 ) == 0 && ( re == a [ n - 1 ] %  
							      	}							    	    dell = n - 1 ;					  
							      }								    	  }							  
							      								    	}							  
							      								    	if ( ( dell == - 1 ) ) {				  
							      								    	  System . out . println ( "-1" ) ;			  
							      								    	}							  
							      								    	else {							  
							      								    	  System . out . println ( dell + 1 ) ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2	      MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2	    MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2	  MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2
--							      --							    --								  --
def getLevenstein ( inpt ) :				      static int getLevenstein ( StringBuilder input ) {	    public static int getLevenstein ( String inpt ) {		  script_not_found : None
    revInput = inpt [ : : - 1 ]				      	StringBuilder revInput = new StringBuilder ( input ) ;	      String revInput = inpt . substring ( 0 , inpt . length ( )  
    n = len ( inpt )					      	revInput = revInput . reverse ( ) ;			      int n = inpt . length ( ) ;				  
    dp = [ [ - 1 for _ in range ( n + 1 ) ] for __ in range ( 	int n = input . length ( ) ;				      int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		  
    for i in range ( n + 1 ) :				      	int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		      for ( int i = 0 ;						  
	dp [ 0 ] [ i ] = i				      	for ( int i = 0 ;					      i < n + 1 ;						  
	dp [ i ] [ 0 ] = i				      	i <= n ;						      i ++ ) {							  
    for i in range ( 1 , n + 1 ) :			      	++ i ) {						    	dp [ 0 ] [ i ] = i ;					  
	for j in range ( 1 , n + 1 ) :			      	  dp [ 0 ] [ i ] = i ;					    	dp [ i ] [ 0 ] = i ;					  
	    if inpt [ i - 1 ] == revInput [ j - 1 ] :	      	  dp [ i ] [ 0 ] = i ;					      }								  
		dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]	      	}							      for ( int i = 1 ;						  
	    else :					      	for ( int i = 1 ;					      i <= n ;							  
		dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] 	i <= n ;						      i ++ ) {							  
    res = INT_MAX					      	++ i ) {						    	for ( int j = 1 ;					  
    i , j = n , 0					      	  for ( int j = 1 ;					    	j <= n ;						  
    while i >= 0 :					      	  j <= n ;						    	j ++ ) {						  
	res = min ( res , dp [ i ] [ j ] )		      	  ++ j ) {						    	  if ( inpt . charAt ( i - 1 ) == revInput . charAt ( j - 
	if i < n :					      	    if ( input . charAt ( i - 1 ) == revInput . charAt ( j  	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
	    res = min ( res , dp [ i + 1 ] [ j ] )	      	    else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 	  }							  
	if i > 0 :					      	  }							    	  else {						  
	    res = min ( res , dp [ i - 1 ] [ j ] )	      	}							    	    dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ]  
	i -= 1						      	int res = Integer . MAX_VALUE ;				    	  }							  
	j += 1						      	for ( int i = n , j = 0 ;				    	}							  
    return res						      	i >= 0 ;						      }								  
							      	i -- , j ++ ) {						      int res = Integer . MIN_VALUE ;				  
							      	  res = Math . min ( res , dp [ i ] [ j ] ) ;		      int i = n , j = 0 ;					  
							      	  if ( i < n ) res = Math . min ( res , dp [ i + 1 ] [ j ]    while ( i >= 0 ) {					  
							      	  if ( i > 0 ) res = Math . min ( res , dp [ i - 1 ] [ j ]  	res = Math . min ( res , dp [ i ] [ j ] ) ;		  
							      	}							    	if ( i < n ) {						  
							      	return res ;						    	  res = Math . min ( res , dp [ i + 1 ] [ j ] ) ;	  
							      }								    	}							  
							      								    	if ( i > 0 ) {						  
							      								    	  res = Math . min ( res , dp [ i - 1 ] [ j ] ) ;	  
							      								    	}							  
							      								    	i -- ;							  
							      								    	j ++ ;							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_REPEATED_SUBSEQUENCE_1				      LONGEST_REPEATED_SUBSEQUENCE_1				    LONGEST_REPEATED_SUBSEQUENCE_1				  LONGEST_REPEATED_SUBSEQUENCE_1
--							      --							    --								  --
def longestRepeatedSubSeq ( str ) :			      static String longestRepeatedSubSeq ( String str ) {	    public static String longestRepeatedSubSeq ( String str ) {	  error : LONGEST_REPEATED_SUBSEQUENCE_1.java:57: er
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  ror: ')' expected	  if ( ( str . charAt ( i -
    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n  	int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		  1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ]
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						   [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;
	for j in range ( 1 , n + 1 ) :			      	i <= n ;						      i < n ;							  
	    if ( str [ i - 1 ] == str [ j - 1 ] and i != j )  	i ++ ) for ( int j = 0 ;				      i ++ ) {							  	     ^ 1 error
		dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]   	j <= n ;						    	for ( int j = 0 ;					  
	    else :					      	j ++ ) dp [ i ] [ j ] = 0 ;				    	j < n ;							  
		dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , d 	for ( int i = 1 ;					    	j ++ ) {						  
    res = ''						      	i <= n ;						    	  if ( ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) 
    i = n						      	i ++ ) for ( int j = 1 ;				    	  else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , 
    j = n						      	j <= n ;						    	}							  
    while ( i > 0 and j > 0 ) :				      	j ++ ) if ( str . charAt ( i - 1 ) == str . charAt ( j - 1    }								  
	if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) : 	else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp    StringBuffer sb = new StringBuffer ( ) ;			  
	    res += str [ i - 1 ]			      	String res = "" ;					      int i = n ;						  
	    i -= 1					      	int i = n , j = n ;					      int j = n ;						  
	    j -= 1					      	while ( i > 0 && j > 0 ) {				      while ( ( i > 0 ) && ( j > 0 ) ) {			  
	elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :	      	  if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {	    	if ( ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) ) { 
	    i -= 1					      	    res = res + str . charAt ( i - 1 ) ;		    	  sb . append ( str . charAt ( i - 1 ) ) ;		  
	else :						      	    i -- ;						    	  i -- ;						  
	    j -= 1					      	    j -- ;						    	  j -- ;						  
    res = ''.join ( reversed ( res ) )			      	  }							    	}							  
    return res						      	  else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;   	else if ( ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) ) {	  
							      	  else j -- ;						    	  i -- ;						  
							      	}							    	}							  
							      	String reverse = "" ;					    	else {							  
							      	for ( int k = res . length ( ) - 1 ;			    	  j -- ;						  
							      	k >= 0 ;						    	}							  
							      	k -- ) {						      }								  
							      	  reverse = reverse + res . charAt ( k ) ;		      sb . setLength ( sb . length ( ) - 1 ) ;			  
							      	}							      return sb . toString ( ) ;				  
							      	return reverse ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	      FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	    FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	  FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS
--							      --							    --								  --
def findSmallestRange ( arr , n , k ) :			      static void findSmallestRange ( int arr [ ] [ ] , int n , int static int findSmallestRange ( int [ ] [ ] arr , int n , int  script_not_found : None
    i , minval , maxval , minrange , minel , maxel , flag , m 	int i , minval , maxval , minrange , minel = 0 , maxel = 0    int i , minval , maxval , minrange , minel , maxel , flag , 
    for i in range ( k + 1 ) :				      	for ( i = 0 ;						      for ( i = 0 ;						  
	ptr [ i ] = 0					      	i <= k ;						      i < k + 1 ;						  
    minrange = 10 ** 9					      	i ++ ) {						      i ++ ) {							  
    while ( 1 ) :					      	  ptr [ i ] = 0 ;					    	ptr [ i ] = 0 ;						  
	minind = - 1					      	}							      }								  
	minval = 10 ** 9				      	minrange = Integer . MAX_VALUE ;			      minrange = 10 * 9 ;					  
	maxval = - 10 ** 9				      	while ( true ) {					      while ( ( 1 ) ) {						  
	flag = 0					      	  minind = - 1 ;					    	minind = - 1 ;						  
	for i in range ( k ) :				      	  minval = Integer . MAX_VALUE ;			    	minval = 10 * 9 ;					  
	    if ( ptr [ i ] == n ) :			      	  maxval = Integer . MIN_VALUE ;			    	maxval = - 10 * 9 ;					  
		flag = 1				      	  flag = 0 ;						    	flag = 0 ;						  
		break					      	  for ( i = 0 ;						    	for ( i = 0 ;						  
	    if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] <  	  i < k ;						    	i < k ;							  
		minind = i				      	  i ++ ) {						    	i ++ ) {						  
		minval = arr [ i ] [ ptr [ i ] ]	      	    if ( ptr [ i ] == n ) {				    	  if ( ( ptr [ i ] == n ) ) {				  
	    if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] >  	      flag = 1 ;					    	    flag = 1 ;						  
		maxval = arr [ i ] [ ptr [ i ] ]	      	      break ;						    	    break ;						  
	if ( flag ) :					      	    }							    	  }							  
	    break					      	    if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval  	  if ( ( ptr [ i ] < n ) && ( arr [ i ] [ ptr [ i ] ] < m 
	ptr [ minind ] += 1				      	      minind = i ;					    	    minind = i ;					  
	if ( ( maxval - minval ) < minrange ) :		      	      minval = arr [ i ] [ ptr [ i ] ] ;		    	    minval = arr [ i ] [ ptr [ i ] ] ;			  
	    minel = minval				      	    }							    	  }							  
	    maxel = maxval				      	    if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval  	  if ( ( ptr [ i ] < n ) && ( arr [ i ] [ ptr [ i ] ] > m 
	    minrange = maxel - minel			      	      maxval = arr [ i ] [ ptr [ i ] ] ;		    	    maxval = arr [ i ] [ ptr [ i ] ] ;			  
    print ( "The smallest range is [" , minel , maxel , "]" ) 	    }							    	  }							  
							      	  }							    	}							  
							      	  if ( flag == 1 ) {					    	if ( ( flag ) ) break ;					  
							      	    break ;						    	ptr [ minind ] ++ ;					  
							      	  }							    	if ( ( ( maxval - minval ) < minrange ) ) {		  
							      	  ptr [ minind ] ++ ;					    	  minel = minval ;					  
							      	  if ( ( maxval - minval ) < minrange ) {		    	  maxel = maxval ;					  
							      	    minel = minval ;					    	  minrange = maxel - minel ;				  
							      	    maxel = maxval ;					    	}							  
							      	    minrange = maxel - minel ;				      }								  
							      	  }							      System . out . println ( "The smallest range is [" + minel  
							      	}							      return minrange ;						  
							      	System . out . printf ( "The smallest range is [%d , %d]\n" }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION		      MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION		    MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION		  MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION
--							      --							    --								  --
def minInitialPoints ( points ) :			      static int minInitialPoints ( int points [ ] [ ] , int R , in public static int minInitialPoints ( int [ ] [ ] points ) {	  script_not_found : None
    dp = [ [ 0 for x in range ( C + 1 ) ] for y in range ( R  	int dp [ ] [ ] = new int [ R ] [ C ] ;			      int [ ] [ ] dp = new int [ C + 1 ] [ R + 1 ] ;		  
    m , n = R , C					      	int m = R , n = C ;					      for ( int x = 0 ;						  
    if points [ m - 1 ] [ n - 1 ] > 0 :			      	dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1   x < C ;							  
	dp [ m - 1 ] [ n - 1 ] = 1			      	for ( int i = m - 2 ;					      x ++ ) {							  
    else :						      	i >= 0 ;						    	for ( int y = 0 ;					  
	dp [ m - 1 ] [ n - 1 ] = abs ( points [ m - 1 ] [ n - 	i -- ) dp [ i ] [ n - 1 ] = Math . max ( dp [ i + 1 ] [ n - 	y < R ;							  
    for i in range ( m - 2 , - 1 , - 1 ) :		      	for ( int j = n - 2 ;					    	y ++ ) {						  
	dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - p 	j >= 0 ;						    	  dp [ x ] [ y ] [ x ] [ y ] [ x ] [ y ] [ y ] [ x ] [ y  
    for i in range ( 2 , - 1 , - 1 ) :			      	j -- ) dp [ m - 1 ] [ j ] = Math . max ( dp [ m - 1 ] [ j + 								  
	dp [ m - 1 ] [ i ] = max ( dp [ m - 1 ] [ i + 1 ] - p 	for ( int i = m - 2 ;					    								  
    for i in range ( m - 2 , - 1 , - 1 ) :		      	i >= 0 ;						    								  
	for j in range ( n - 2 , - 1 , - 1 ) :		      	i -- ) {						    								  
	    min_points_on_exit = min ( dp [ i + 1 ] [ j ] , d 	  for ( int j = n - 2 ;					    								  
	    dp [ i ] [ j ] = max ( min_points_on_exit - point 	  j >= 0 ;						    								  
    return dp [ 0 ] [ 0 ]				      	  j -- ) {						    								  
							      	    int min_points_on_exit = Math . min ( dp [ i + 1 ] [ j  								  
							      	    dp [ i ] [ j ] = Math . max ( min_points_on_exit - poin 								  
							      	  }							    								  
							      	}							    								  
							      	return dp [ 0 ] [ 0 ] ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PALINDROME_SUB_STRINGS_STRING			      COUNT_PALINDROME_SUB_STRINGS_STRING			    COUNT_PALINDROME_SUB_STRINGS_STRING				  COUNT_PALINDROME_SUB_STRINGS_STRING
--							      --							    --								  --
def CountPS ( str , n ) :				      static int CountPS ( char str [ ] , int n ) {		    public static int CountPS ( String str , int n ) {		  error : COUNT_PALINDROME_SUB_STRINGS_STRING.java:4
    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]  	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] dp = new int [ n ] [ n ] ;			  9: error: illegal start of expression public stati
    P = [ [ False for x in range ( n ) ] for y in range ( n ) 	boolean P [ ] [ ] = new boolean [ n ] [ n ] ;		      for ( int x = 0 ;						  c void main(String args[]) { ^ COUNT_PALINDROME_SU
    for i in range ( n ) :				      	for ( int i = 0 ;					      x < n ;							  B_STRINGS_STRING.java:47: error: not a statement
	P [ i ] [ i ] = True				      	i < n ;							      x ++ ) dp [ x ] [ x ] [ y ] [ x ] [ y ] [ x ] [ y ] [ x ] [  x ++ ) dp [ x ] [ x ] [ y ] [ x ] [ y ] [ x ] [ y
    for i in range ( n - 1 ) :				      	i ++ ) P [ i ] [ i ] = true ;				    								   ] [ x ] [ y ] [ x ] [ y ] [ x ] [ y ] [ x ] [ y ]
	if ( str [ i ] == str [ i + 1 ] ) :		      	for ( int i = 0 ;					    								   [ x ] [ y ] [ x ] [ y ] [ x ] [ y ] [ x ] [ y ] [
	    P [ i ] [ i + 1 ] = True			      	i < n - 1 ;						    								   x ] [ y ] [ x ] [ y ] [ y ] [ x ] [ y ] [ x ] [ y
	    dp [ i ] [ i + 1 ] = 1			      	i ++ ) {						    								   ] [ x ] [ y ] [ x ] [ y ] [ y ] [ x ] [ y ] [ x ]
    for gap in range ( 2 , n ) :			      	  if ( str [ i ] == str [ i + 1 ] ) {			    								   [ y ] [ x ] [ y ] [ x ] [ y ] [ y ] [ x ] [ y ] [
	for i in range ( n - gap ) :			      	    P [ i ] [ i + 1 ] = true ;				    								   x ] [ y ] [ y ] [ x ] [ y ] [ y ] [ x ] [ y ] [ x
	    j = gap + i ;				      	    dp [ i ] [ i + 1 ] = 1 ;				    								   ] [ y ] [ y ] [ x ] [ y ] [ y ] [ x ] [ y ] [ y ]
	    if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 	  }							    								   [ x ] [ y ] [ y ] [ x ] [ y ] [ y ] [ x ] [ y ] [
		P [ i ] [ j ] = True			      	}							    								   y ] [ x ] [ y ] [ y ] [ y ] [ x ] [ y ] [ y ] [ y
	    if ( P [ i ] [ j ] == True ) :		      	for ( int gap = 2 ;					    								   ] [ x ] [ y ] [ y ] [ y ] [ x ] [ y ] [ y ] [ y ]
		dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [  	gap < n ;						    								   [ y ] [ x ] [ y ] [ y ] [ y ] [ y ] [ x ] [ y ] [
	    else :					      	gap ++ ) {						    								   y ] [ y ] [ y ] [ y ] [ y ] [ x ] [ y ] [ y ] [ y
		dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [  	  for ( int i = 0 ;					    								   ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ]
    return dp [ 0 ] [ n - 1 ]				      	  i < n - gap ;						    								   [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [
							      	  i ++ ) {						    								   y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y
							      	    int j = gap + i ;					    								   ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ]
							      	    if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] )  								   [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [
							      	    if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ]  								   y ] [ y ] [ y ] [ y ] [ y ] [ y ] [ y ] [
							      	    else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] 								  
							      	  }							    								  
							      	}							    								  
							      	return dp [ 0 ] [ n - 1 ] ;				    								  
							      }								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  
							      								    								  				     ^ 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1     RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1	    RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1	  RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1
--							      --							    --								  --
def maxProduct ( arr , n ) :				      static void maxProduct ( int arr [ ] , int n ) {		    public static void maxProduct ( int [ ] arr , int n ) {	  script_not_found : None
    if ( n < 2 ) :					      	if ( n < 2 ) {						      if ( ( n < 2 ) ) {					  
	print ( "No pairs exists" )			      	  System . out . println ( "No pairs exists" ) ;	    	System . out . println ( "No pairs exists" ) ;		  
	return						      	  return ;						    	return ;						  
    if ( n == 2 ) :					      	}							      }								  
	print ( arr [ 0 ] , " " , arr [ 1 ] )		      	if ( n == 2 ) {						      if ( ( n == 2 ) ) {					  
	return						      	  System . out . println ( arr [ 0 ] + " " + arr [ 1 ] ) ;  	System . out . println ( arr [ 0 ] + " " + arr [ 1 ] ) ;  
    posa = 0						      	  return ;						    	return ;						  
    posb = 0						      	}							      }								  
    nega = 0						      	int posa = Integer . MIN_VALUE , posb = Integer . MIN_VALUE   int posa = 0 ;						  
    negb = 0						      	int nega = Integer . MIN_VALUE , negb = Integer . MIN_VALUE   int posb = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      int nega = 0 ;						  
	if ( arr [ i ] > posa ) :			      	i < n ;							      int negb = 0 ;						  
	    posb = posa					      	i ++ ) {						      for ( int i = 0 ;						  
	    posa = arr [ i ]				      	  if ( arr [ i ] > posa ) {				      i < n ;							  
	elif ( arr [ i ] > posb ) :			      	    posb = posa ;					      i ++ ) {							  
	    posb = arr [ i ]				      	    posa = arr [ i ] ;					    	if ( ( arr [ i ] > posa ) ) {				  
	if ( arr [ i ] < 0 and abs ( arr [ i ] ) > abs ( nega 	  }							    	  posb = posa ;						  
	    negb = nega					      	  else if ( arr [ i ] > posb ) posb = arr [ i ] ;	    	  posa = arr [ i ] ;					  
	    nega = arr [ i ]				      	  if ( arr [ i ] < 0 && Math . abs ( arr [ i ] ) > Math . a 	}							  
	elif ( arr [ i ] < 0 and abs ( arr [ i ] ) > abs ( ne 	    negb = nega ;					    	else if ( ( arr [ i ] > posb ) ) {			  
	    negb = arr [ i ]				      	    nega = arr [ i ] ;					    	  posb = arr [ i ] ;					  
    if ( nega * negb > posa * posb ) :			      	  }							    	}							  
	print ( "Max product pair is {" , nega , ", " , negb  	  else if ( arr [ i ] < 0 && Math . abs ( arr [ i ] ) > Mat 	if ( ( arr [ i ] < 0 ) && ( Math . abs ( arr [ i ] ) > Ma 
    else :						      	}							    	  negb = nega ;						  
	print ( "Max product pair is {" , posa , ", " , posb  	if ( nega * negb > posa * posb ) System . out . println ( " 	  nega = arr [ i ] ;					  
							      	else System . out . println ( "Max product pair is {" + pos 	}							  
							      }								    	else if ( ( arr [ i ] < 0 ) && ( Math . abs ( arr [ i ] ) 
							      								    	  negb = arr [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      if ( ( nega * negb > posa * posb ) ) {			  
							      								    	System . out . println ( "Max product pair is {" + nega + 
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "Max product pair is {" + posa + 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING	      DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING	    DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING		  DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING
--							      --							    --								  --
def minPalPartion ( str ) :				      static int minPalPartion ( String str ) {			    public static int minPalPartion ( String str ) {		  error : DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PART
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  ITIONING.java:62: error: cannot find symbol
    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]   	int [ ] [ ] C = new int [ n ] [ n ] ;			      int [ ] [ ] C = new int [ n ] [ n ] ;			  j = i + L - 1 ;	^   symbol:   variable j   l
    P = [ [ False for i in range ( n ) ] for i in range ( n ) 	boolean [ ] [ ] P = new boolean [ n ] [ n ] ;		      boolean [ ] [ ] P = new boolean [ n ] [ n ] ;		  ocation: class DYNAMIC_PROGRAMMING_SET_17_PALINDRO
    j = 0						      	int i , j , k , L ;					      for ( int i = 0 ;						  ME_PARTITIONING DYNAMIC_PROGRAMMING_SET_17_PALINDR
    k = 0						      	for ( i = 0 ;						      i < n ;							  OME_PARTITIONING.java:64: error: cannot find symbo
    L = 0						      	i < n ;							      i ++ ) {							  l	    P [ i ] [ j ] = ( str . charAt ( i ) ==
    for i in range ( n ) :				      	i ++ ) {						    	P [ i ] [ i ] = true ;					  str . charAt ( j ) ) ;		   ^   symbo
	P [ i ] [ i ] = True				      	  P [ i ] [ i ] = true ;				    	C [ i ] [ i ] = 0 ;					  l:   variable j   location: class DYNAMIC_PROGRAMM
	C [ i ] [ i ] = 0				      	  C [ i ] [ i ] = 0 ;					      }								  ING_SET_17_PALINDROME_PARTITIONING DYNAMIC_PROGRAM
    for L in range ( 2 , n + 1 ) :			      	}							      for ( int L = 2 ;						  MING_SET_17_PALINDROME_PARTITIONING.java:64: error
	for i in range ( n - L + 1 ) :			      	for ( L = 2 ;						      L <= n ;							  : cannot find symbol	       P [ i ] [ j ] = ( str
	    j = i + L - 1				      	L <= n ;						      L ++ ) {							   . charAt ( i ) == str . charAt ( j ) ) ;
	    if L == 2 :					      	L ++ ) {						    	for ( int i = 0 ;					  
		P [ i ] [ j ] = ( str [ i ] == str [ j ] )    	  for ( i = 0 ;						    	i < n - L + 1 ;						       ^   symbol:   variable j	  location: class DY
	    else :					      	  i < n - L + 1 ;					    	i ++ ) {						  NAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING D
		P [ i ] [ j ] = ( ( str [ i ] == str [ j ] )  	  i ++ ) {						    	  j = i + L - 1 ;					  YNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING.
	    if P [ i ] [ j ] == True :			      	    j = i + L - 1 ;					    	  if ( L == 2 ) {					  java:67: error: cannot find symbol	     P [ i ]
		C [ i ] [ j ] = 0			      	    if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == s 	    P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt   [ j ] = ( ( str . charAt ( i ) == str . charAt (
	    else :					      	    else P [ i ] [ j ] = ( str . charAt ( i ) == str . char 	  }							  j ) ) && P [ i + 1 ] [ j - 1 ] ) ;
		C [ i ] [ j ] = 100000000		      	    if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ;	    	  else {						     ^	 symbol:   variable j	location: class DYNA
		for k in range ( i , j ) :		      	    else {						    	    P [ i ] [ j ] = ( ( str . charAt ( i ) == str . charA MIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING DYN
		    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ 	      C [ i ] [ j ] = Integer . MAX_VALUE ;		    	  }							  AMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING.ja
    return C [ 0 ] [ n - 1 ]				      	      for ( k = i ;					    	  if ( P [ i ] [ j ] == true ) {			  va:67: error: cannot find symbol	   P [ i ] [
							      	      k <= j - 1 ;					    	    C [ i ] [ j ] = 0 ;					   j ] = ( ( str . charAt ( i ) == str . charAt ( j
							      	      k ++ ) C [ i ] [ j ] = Integer . min ( C [ i ] [ j ]  	  }							  ) ) && P [ i + 1 ] [ j - 1 ] ) ;
							      	    }							    	  else {						  						  ^
							      	  }							    	    C [ i ] [ j ] = 100000000 ;				    symbol:   variable j   location: class DYNAMIC_P
							      	}							    	    for ( k = i ;					  ROGRAMMING_SET_17_PALINDROME_PARTITIONING DYNAMIC_
							      	return C [ 0 ] [ n - 1 ] ;				    	    k < j ;						  PROGRAMMING_SET_17_PALINDROME_PARTITIONING.java:67
							      }								    	    k ++ ) {						  : error: cannot find symbol	      P [ i ] [ j ]
							      								    	      C [ i ] [ j ] = Math . min ( C [ i ] [ j ] , C [ i  = ( ( str . charAt ( i ) == str . charAt ( j ) ) &
							      								    	    }							  & P [ i + 1 ] [ j - 1 ] ) ;
							      								    	  }							  
							      								    	}							  		  ^   symbol:	variable j   locatio
							      								      }								  n: class DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PAR
							      								      return C [ 0 ] [ n - 1 ] ;				  TITIONING DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PA
							      								    }								  RTITIONING.java:69: error: cannot find symbol
							      								    								    if ( P [ i ] [ j ] == true ) {
							      								    								      ^	  symbol:   variable j	 location: class DYN
							      								    								  AMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING DY
							      								    								  NAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING.j
							      								    								  ava:70: error: cannot find symbol	    C [ i ]
							      								    								  [ j ] = 0 ;			^   symbol:   variab
							      								    								  le j	 location: class DYNAMIC_PROGRAMMING_SET_17_
							      								    								  PALINDROME_PARTITIONING DYNAMIC_PROGRAMMING_SET_17
							      								    								  _PALINDROME_PARTITIONING.java:73: error: cannot fi
							      								    								  nd symbol	    C [ i ] [ j ] = 100000000 ;
							      								    								  		^   symbol:   variable j   location:
							      								    								   class DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTI
							      								    								  TIONING DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PART
							      								    								  ITIONING.java:74: error: cannot find symbol
							      								    								    for ( k = i ;		^   symbol:   variab
							      								    								  le k	 location: class DYNAMIC_PROGRAMMING_SET_17_
							      								    								  PALINDROME_PARTITIONING DYNAMIC_PROGRAMMING_SET_17
							      								    								  _PALINDROME_PARTITIONING.java:75: error: cannot fi
							      								    								  nd symbol	    k < j ;	    ^	symbol:	  va
							      								    								  riable k   location: class DYNAMIC_PROGRAMMING_SET
							      								    								  _17_PALINDROME_PARTITIONING DYNAMIC_PROGRAMMING_SE
							      								    								  T_17_PALINDROME_PARTITIONING.java:75: error: canno
							      								    								  t find symbol		k < j ;		    ^	symb
							      								    								  ol:	variable j   location: class DYNAMIC_PROGRAM
							      								    								  MING_SET_17_PALINDROME_PARTITIONING DYNAMIC_PROGRA
							      								    								  MMING_SET_17_PALINDROME_PARTITIONING.java:76: erro
							      								    								  r: cannot find symbol		k ++ ) {	 ^
							      								    								   symbol:   variable k	  location: class DYNAMIC_PR
							      								    								  OGRAMMING_SET_17_PALINDROME_PARTITIONING DYNAMIC_P
							      								    								  ROGRAMMING_SET_17_PALINDROME_PARTITIONING.java:77:
							      								    								   error: cannot find symbol	       C [ i ] [ j ]
							      								    								   = Math . min ( C [ i ] [ j ] , C [ i ] [ k ] + C
							      								    								  [ k + 1 ] [ j ] + 1 ) ;		      ^	  sy
							      								    								  mbol:	  variable j   location: class DYNAMIC_PROGR
							      								    								  AMMING_SET_17_PALINDROME_PARTITIONING DYNAMIC_PROG
							      								    								  RAMMING_SET_17_PALINDROME_PARTITIONING.java:77: er
							      								    								  ror: cannot find symbol	    C [ i ] [ j ] =
							      								    								  Math . min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k
							      								    								   + 1 ] [ j ] + 1 ) ;
							      								    								  		      ^	  symbol:   variable j	 loc
							      								    								  ation: class DYNAMIC_PROGRAMMING_SET_17_PALINDROME
							      								    								  _PARTITIONING DYNAMIC_PROGRAMMING_SET_17_PALINDROM
							      								    								  E_PARTITIONING.java:77: error: cannot find symbol
							      								    								  	    C [ i ] [ j ] = Math . min ( C [ i ] [ j
							      								    								   ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ;
							      								    								  
							      								    								  	      ^	  symbol:   variable k	 location: c
							      								    								  lass DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITI
							      								    								  ONING DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTIT
							      								    								  IONING.java:77: error: cannot find symbol
							      								    								    C [ i ] [ j ] = Math . min ( C [ i ] [ j ] , C [
							      								    								   i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ;
							      								    								  
							      								    								  		^   symbol:   variable k   location:
							      								    								   class DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTI
							      								    								  TIONING DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PART
							      								    								  ITIONING.java:77: error: cannot find symbol
							      								    								      C [ i ] [ j ] = Math . min ( C [ i ] [ j ] , C
							      								    								   [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ;
							      								    								  
							      								    								  			    ^	symbol:	  variable j
							      								    								     location: class DYNAMIC_PROGRAMMING_SET_17_PALI
							      								    								  NDROME_PARTITIONING 18 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP
--							      --							    --								  --
def printUnsorted ( arr , n ) :				      static void printUnsorted ( int arr [ ] , int n ) {	    static void printUnsorted ( int [ ] arr , int n ) {		  script_not_found : None
    e = n - 1						      	int s = 0 , e = n - 1 , i , max , min ;			      int e = n - 1 ;						  
    for s in range ( 0 , n - 1 ) :			      	for ( s = 0 ;						      for ( int s = 0 ;						  
	if arr [ s ] > arr [ s + 1 ] :			      	s < n - 1 ;						      s <= n - 1 ;						  
	    break					      	s ++ ) {						      s ++ ) {							  
    if s == n - 1 :					      	  if ( arr [ s ] > arr [ s + 1 ] ) break ;		    	if ( arr [ s ] > arr [ s + 1 ] ) break ;		  
	print ( "The complete array is sorted" )	      	}							      }								  
	exit ( )					      	if ( s == n - 1 ) {					      if ( s == n - 1 ) {					  
    e = n - 1						      	  System . out . println ( "The complete array is sorted" ) 	System . out . println ( "The complete array is sorted" ) 
    while e > 0 :					      	  return ;						    	exit ( ) ;						  
	if arr [ e ] < arr [ e - 1 ] :			      	}							      }								  
	    break					      	for ( e = n - 1 ;					      e = n - 1 ;						  
	e -= 1						      	e > 0 ;							      while ( e > 0 ) {						  
    max = arr [ s ]					      	e -- ) {						    	if ( arr [ e ] < arr [ e - 1 ] ) break ;		  
    min = arr [ s ]					      	  if ( arr [ e ] < arr [ e - 1 ] ) break ;		    	e -- ;							  
    for i in range ( s + 1 , e + 1 ) :			      	}							      }								  
	if arr [ i ] > max :				      	max = arr [ s ] ;					      int max = arr [ s ] ;					  
	    max = arr [ i ]				      	min = arr [ s ] ;					      int min = arr [ s ] ;					  
	if arr [ i ] < min :				      	for ( i = s + 1 ;					      for ( int i = s + 1 ;					  
	    min = arr [ i ]				      	i <= e ;						      i <= e ;							  
    for i in range ( s ) :				      	i ++ ) {						      i ++ ) {							  
	if arr [ i ] > min :				      	  if ( arr [ i ] > max ) max = arr [ i ] ;		    	if ( arr [ i ] > max ) {				  
	    s = i					      	  if ( arr [ i ] < min ) min = arr [ i ] ;		    	  max = arr [ i ] ;					  
	    break					      	}							    	}							  
    i = n - 1						      	for ( i = 0 ;						    	if ( arr [ i ] < min ) {				  
    while i >= e + 1 :					      	i < s ;							    	  min = arr [ i ] ;					  
	if arr [ i ] < max :				      	i ++ ) {						    	}							  
	    e = i					      	  if ( arr [ i ] > min ) {				      }								  
	    break					      	    s = i ;						      for ( int i = 0 ;						  
	i -= 1						      	    break ;						      i < s ;							  
    print ( "The unsorted subarray which makes the given arra 	  }							      i ++ ) {							  
    print ( "sorted lies between the indexes %d and %d" % ( s 	}							    	if ( arr [ i ] > min ) {				  
							      	for ( i = n - 1 ;					    	  s = i ;						  
							      	i >= e + 1 ;						    	  break ;						  
							      	i -- ) {						    	}							  
							      	  if ( arr [ i ] < max ) {				      }								  
							      	    e = i ;						      int i = n - 1 ;						  
							      	    break ;						      while ( i >= e + 1 ) {					  
							      	  }							    	if ( arr [ i ] < max ) {				  
							      	}							    	  e = i ;						  
							      	System . out . println ( " The unsorted subarray which" + " 	  break ;						  
							      	return ;						    	}							  
							      }								    	i -- ;							  
							      								      }								  
							      								      System . out . println ( "The unsorted subarray which makes 
							      								      System . out . println ( "sorted lies between the indexes " 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_PATH_UNDIRECTED_GRAPH				      EULERIAN_PATH_UNDIRECTED_GRAPH				    EULERIAN_PATH_UNDIRECTED_GRAPH				  EULERIAN_PATH_UNDIRECTED_GRAPH
--							      --							    --								  --
def findpath ( graph ) :				      static void findpath ( int [ ] [ ] graph , int n ) {	    public static void findpath ( int [ ] [ ] graph ) {		  script_not_found : None
    n = len ( graph )					      	Vector < Integer > numofadj = new Vector < > ( ) ;	      int n = graph . length ;					  
    numofadj = list ( )					      	for ( int i = 0 ;					      List < Integer > numofadj = new LinkedList < > ( ) ;	  
    for i in range ( n ) :				      	i < n ;							      for ( int i = 0 ;						  
	numofadj.append ( sum ( graph [ i ] ) )		      	i ++ ) numofadj . add ( accumulate ( graph [ i ] , 0 ) ) ;    i < n ;							  
    startpoint = 0					      	int startPoint = 0 , numofodd = 0 ;			      i ++ ) {							  
    numofodd = 0					      	for ( int i = n - 1 ;					    	numofadj . add ( Arrays . stream ( graph [ i ] ) . sum (  
    for i in range ( n - 1 , - 1 , - 1 ) :		      	i >= 0 ;						      }								  
	if ( numofadj [ i ] % 2 == 1 ) :		      	i -- ) {						      int startpoint = 0 ;					  
	    numofodd += 1				      	  if ( numofadj . elementAt ( i ) % 2 == 1 ) {		      int numofodd = 0 ;					  
	    startpoint = i				      	    numofodd ++ ;					      for ( int i = n - 1 ;					  
    if ( numofodd > 2 ) :				      	    startPoint = i ;					      i >= 0 ;							  
	print ( "No Solution" )				      	  }							      i -- ) {							  
	return						      	}							    	if ( ( numofadj . get ( i ) % 2 ) == 1 ) {		  
    stack = list ( )					      	if ( numofodd > 2 ) {					    	  numofodd ++ ;						  
    path = list ( )					      	  System . out . println ( "No Solution" ) ;		    	  startpoint = i ;					  
    cur = startpoint					      	  return ;						    	}							  
    while ( stack != [ ] or sum ( graph [ cur ] ) != 0 ) :    	}							      }								  
	if ( sum ( graph [ cur ] ) == 0 ) :		      	Stack < Integer > stack = new Stack < > ( ) ;		      if ( ( numofodd > 2 ) ) {					  
	    path.append ( cur + 1 )			      	Vector < Integer > path = new Vector < > ( ) ;		    	System . out . println ( "No Solution" ) ;		  
	    cur = stack.pop ( - 1 )			      	int cur = startPoint ;					    	return ;						  
	else :						      	while ( ! stack . isEmpty ( ) || accumulate ( graph [ cur ]   }								  
	    for i in range ( n ) :			      	  if ( accumulate ( graph [ cur ] , 0 ) == 0 ) {	      LinkedList < Integer > stack = new LinkedList < > ( ) ;	  
		if graph [ cur ] [ i ] == 1 :		      	    path . add ( cur ) ;				      LinkedList < Integer > path = new LinkedList < > ( ) ;	  
		    stack.append ( cur )		      	    cur = stack . pop ( ) ;				      int cur = startpoint ;					  
		    graph [ cur ] [ i ] = 0		      	  }							      while ( ( stack . size ( ) != 0 ) || Arrays . stream ( grap 
		    graph [ i ] [ cur ] = 0		      	  else {						    	if ( ( Arrays . stream ( graph [ cur ] ) . sum ( ) ) == 0 
		    cur = i				      	    for ( int i = 0 ;					    	  path . add ( cur + 1 ) ;				  
		    break				      	    i < n ;						    	  cur = stack . removeLast ( ) ;			  
    for ele in path :					      	    i ++ ) {						    	}							  
	print ( ele , "-> " , end = '' )		      	      if ( graph [ cur ] [ i ] == 1 ) {			    	else {							  
    print ( cur + 1 )					      		stack . add ( cur ) ;				    	  for ( int i = 0 ;					  
							      		graph [ cur ] [ i ] = 0 ;			    	  i < n ;						  
							      		graph [ i ] [ cur ] = 0 ;			    	  i ++ ) {						  
							      		cur = i ;					    	    if ( graph [ cur ] [ i ] == 1 ) {			  
							      		break ;						    	      stack . add ( cur ) ;				  
							      	      }							    	      graph [ cur ] [ i ] = 0 ;				  
							      	    }							    	      graph [ i ] [ cur ] = 0 ;				  
							      	  }							    	      cur = i ;						  
							      	}							    	      break ;						  
							      	for ( int ele : path ) System . out . print ( ele + " -> "  	    }							  
							      	System . out . println ( cur ) ;			    	  }							  
							      }								    	}							  
							      								      }								  
							      								      for ( int ele : path ) {					  
							      								    	System . out . print ( ele + "-> " ) ;			  
							      								      }								  
							      								      System . out . println ( cur + 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG		      MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG		    MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG			  MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG
--							      --							    --								  --
def MinimumCost ( cost , n , W ) :			      public static int MinimumCost ( int cost [ ] , int n , int W  public static int MinimumCost ( int [ ] cost , int n , int W  error : MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG
    val = list ( )					      	Vector < Integer > val = new Vector < Integer > ( ) ;	      List < Integer > val = new LinkedList < > ( ) ;		  .java:69: error: variable i is already defined in
    wt = list ( )					      	Vector < Integer > wt = new Vector < Integer > ( ) ;	      List < Integer > wt = new LinkedList < > ( ) ;		  method f_filled(int[],int,int)       for ( int i =
    size = 0						      	int size = 0 ;						      int size = 0 ;						   0 ;		       ^ MINIMUM_COST_TO_FILL_GIVEN_
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  WEIGHT_IN_A_BAG.java:81: error: cannot find symbol
	if ( cost [ i ] != - 1 ) :			      	i < n ;							      i < n ;							  	 minCost . get ( i ) [ 0 ] = INF ;
	    val.append ( cost [ i ] )			      	i ++ ) {						      i ++ ) {							  			   ^   symbol:	 variable IN
	    wt.append ( i + 1 )				      	  if ( cost [ i ] != - 1 ) {				    	if ( ( cost [ i ] != - 1 ) ) {				  F   location: class MINIMUM_COST_TO_FILL_GIVEN_WEI
	    size += 1					      	    val . add ( cost [ i ] ) ;				    	  val . add ( cost [ i ] ) ;				  GHT_IN_A_BAG MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_
    n = size						      	    wt . add ( i + 1 ) ;				    	  wt . add ( i + 1 ) ;					  A_BAG.java:97: error: cannot find symbol     if (
    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in rang 	    size ++ ;						    	  size ++ ;						  ( minCost . get ( n ) [ W ] == INF ) ) {
    for i in range ( W + 1 ) :				      	  }							    	}							  				 ^   symbol:   varia
	min_cost [ 0 ] [ i ] = INF			      	}							      }								  ble INF   location: class MINIMUM_COST_TO_FILL_GIV
    for i in range ( 1 , n + 1 ) :			      	n = size ;						      n = size ;						  EN_WEIGHT_IN_A_BAG 3 errors
	min_cost [ i ] [ 0 ] = 0			      	int min_cost [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;	      List < int [ ] > minCost = new ArrayList < > ( ) ;	  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 1 , W + 1 ) :			      	i <= W ;						      i < W + 1 ;						  
	    if ( wt [ i - 1 ] > j ) :			      	i ++ ) min_cost [ 0 ] [ i ] = Integer . MAX_VALUE ;	      i ++ ) {							  
		min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j 	for ( int i = 1 ;					    	for ( int j = 0 ;					  
	    else :					      	i <= n ;						    	j < n ;							  
		min_cost [ i ] [ j ] = min ( min_cost [ i - 1 	i ++ ) min_cost [ i ] [ 0 ] = 0 ;			    	j ++ ) {						  
    if ( min_cost [ n ] [ W ] == INF ) :		      	for ( int i = 1 ;					    	  for ( int i = 0 ;					  
	return - 1					      	i <= n ;						    	  i < W + 1 ;						  
    else :						      	i ++ ) {						    	  i ++ ) {						  
	return min_cost [ n ] [ W ]			      	  for ( int j = 1 ;					    	    minCost . add ( new int [ ] {			  
							      	  j <= W ;						    	      0 }						  
							      	  j ++ ) {						    	      ) ;						  
							      	    if ( wt . get ( i - 1 ) > j ) min_cost [ i ] [ j ] = mi 	    }							  
							      	    else min_cost [ i ] [ j ] = Math . min ( min_cost [ i - 	  }							  
							      	  }							    	}							  
							      	}							    	for ( int i = 0 ;					  
							      	return ( min_cost [ n ] [ W ] == Integer . MAX_VALUE ) ? -  	i < n + 1 ;						  
							      }								    	i ++ ) {						  
							      								    	  minCost . get ( i ) [ 0 ] = INF ;			  
							      								    	}							  
							      								    	for ( int i = 1 ;					  
							      								    	i <= n ;						  
							      								    	i ++ ) {						  
							      								    	  for ( int j = 1 ;					  
							      								    	  j <= W ;						  
							      								    	  j ++ ) {						  
							      								    	    if ( ( wt . get ( i - 1 ) ) > j ) {			  
							      								    	      minCost . get ( i ) [ j ] = minCost . get ( i - 1 ) 
							      								    	    }							  
							      								    	    else {						  
							      								    	      minCost . get ( i ) [ j ] = Math . min ( minCost .  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								    	if ( ( minCost . get ( n ) [ W ] == INF ) ) {		  
							      								    	  return - 1 ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  return minCost . get ( n ) [ W ] ;			  
							      								    	}							  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS	      REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS	    REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS	  REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS
--							      --							    --								  --
def simplify ( Str ) :					      static String simplify ( String str ) {			    public static String [ ] simplify ( String Str ) {		  error : REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAININ
    Len = len ( Str )					      	int len = str . length ( ) ;				      int Len = Str . length ( ) ;				  G_OPERATORS.java:71: error: illegal start of expre
    res = [ None ] * Len				      	char res [ ] = new char [ len ] ;			      String [ ] res = new String [ Len ] ;			  ssion	    else if ( ( Str . charAt ( i ) == '(' )
    index = 0						      	int index = 0 , i = 0 ;					      int index = 0 ;						  && i > 0 ) ) {
    i = 0						      	Stack < Integer > s = new Stack < Integer > ( ) ;	      int i = 0 ;						  		      ^ REMOVE_BRACKETS_ALGEBRAIC_ST
    s = [ ]						      	s . push ( 0 ) ;					      Stack < Integer > s = new Stack < > ( ) ;			  RING_CONTAINING_OPERATORS.java:80: error: 'else' w
    s.append ( 0 )					      	while ( i < len ) {					      s . push ( 0 ) ;						  ithout 'if'	  else if ( ( Str . charAt ( i ) ==
    while ( i < Len ) :					      	  if ( str . charAt ( i ) == '+' ) {			      while ( ( i = 0 ) < Len ) {				  ')' ) ) {	^ 2 errors
	if ( Str [ i ] == '+' ) :			      	    if ( s . peek ( ) == 1 ) res [ index ++ ] = '-' ;	    	if ( ( Str . charAt ( i ) == '+' ) ) {			  
	    if ( s [ - 1 ] == 1 ) :			      	    if ( s . peek ( ) == 0 ) res [ index ++ ] = '+' ;	    	  if ( ( s . peek ( ) == 1 ) ) {			  
		res [ index ] = '-'			      	  }							    	    res [ index ] = '-' ;				  
		index += 1				      	  else if ( str . charAt ( i ) == '-' ) {		    	    index ++ ;						  
	    if ( s [ - 1 ] == 0 ) :			      	    if ( s . peek ( ) == 1 ) res [ index ++ ] = '+' ;	    	  }							  
		res [ index ] = '+'			      	    else if ( s . peek ( ) == 0 ) res [ index ++ ] = '-' ;  	  if ( ( s . peek ( ) == 0 ) ) {			  
		index += 1				      	  }							    	    res [ index ] = '+' ;				  
	elif ( Str [ i ] == '-' ) :			      	  else if ( str . charAt ( i ) == '(' && i > 0 ) {	    	    index ++ ;						  
	    if ( s [ - 1 ] == 1 ) :			      	    if ( str . charAt ( i - 1 ) == '-' ) {		    	  }							  
		res [ index ] = '+'			      	      int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;		    	}							  
		index += 1				      	      s . push ( x ) ;					    	else if ( ( Str . charAt ( i ) == '-' ) ) {		  
	    elif ( s [ - 1 ] == 0 ) :			      	    }							    	  if ( ( s . peek ( ) == 1 ) ) {			  
		res [ index ] = '-'			      	    else if ( str . charAt ( i - 1 ) == '+' ) s . push ( s  	    res [ index ] = '+' ;				  
		index += 1				      	  }							    	    index ++ ;						  
	elif ( Str [ i ] == '(' and i > 0 ) :		      	  else if ( str . charAt ( i ) == ')' ) s . pop ( ) ;	    	  }							  
	    if ( Str [ i - 1 ] == '-' ) :		      	  else res [ index ++ ] = str . charAt ( i ) ;		    	  else if ( ( s . peek ( ) == 0 ) ) {			  
		x = 0 if ( s [ - 1 ] == 1 ) else 1	      	  i ++ ;						    	    res [ index ] = '-' ;				  
		s.append ( x )				      	}							    	    index ++ ;						  
	    elif ( Str [ i - 1 ] == '+' ) :		      	return new String ( res ) ;				    	  }							  
		s.append ( s [ - 1 ] )			      }								    	}							  
	elif ( Str [ i ] == ')' ) :			      								    	else if ( ( Str . charAt ( i ) == '(' ) && i > 0 ) ) {	  
	    s.pop ( )					      								    	  if ( ( Str . charAt ( i - 1 ) == '-' ) ) {		  
	else :						      								    	    int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;		  
	    res [ index ] = Str [ i ]			      								    	    s . push ( x ) ;					  
	    index += 1					      								    	  }							  
	i += 1						      								    	  else if ( ( Str . charAt ( i - 1 ) == '+' ) ) {	  
    return res						      								    	    s . push ( s . peek ( ) ) ;				  
							      								    	  }							  
							      								    	}							  
							      								    	else if ( ( Str . charAt ( i ) == ')' ) ) {		  
							      								    	  s . pop ( ) ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  res [ index ] = Str . charAt ( i ) ;			  
							      								    	  index ++ ;						  
							      								    	}							  
							      								    	i ++ ;							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS		      MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS			    MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS			  MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS
--							      --							    --								  --
def maximumPalinUsingKChanges ( strr , k ) :		      static String maximumPalinUsingKChanges ( String str , int k  public static String maximumPalinUsingKChanges ( String strr  error : MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.
    palin = strr					      	char palin [ ] = str . toCharArray ( ) ;		      char [ ] palin = new char [ strr . length ( ) ] ;		  java:63: error: incompatible types: possible lossy
    l = 0						      	String ans = "" ;					      int l = 0 ;						   conversion from int to char	     palin [ l ] = p
    r = len ( strr ) - 1				      	int l = 0 ;						      int r = strr . length ( ) - 1 ;				  alin [ r ] = Math . max ( strr . charAt ( l ) , st
    while ( l <= r ) :					      	int r = str . length ( ) - 1 ;				      while ( ( l <= r ) ) {					  rr . charAt ( r ) ) ;
	if ( strr [ l ] != strr [ r ] ) :		      	while ( l < r ) {					    	if ( ( strr . charAt ( l ) != strr . charAt ( r ) ) ) {	  		   ^ 1 error
	    palin [ l ] = palin [ r ] = max ( strr [ l ] , st 	  if ( str . charAt ( l ) != str . charAt ( r ) ) {	    	  palin [ l ] = palin [ r ] = Math . max ( strr . charAt  
	    k -= 1					      	    palin [ l ] = palin [ r ] = ( char ) Math . max ( str . 	  k -- ;						  
	l += 1						      	    k -- ;						    	}							  
	r -= 1						      	  }							    	l ++ ;							  
    if ( k < 0 ) :					      	  l ++ ;						    	r -- ;							  
	return "Not possible"				      	  r -- ;						      }								  
    l = 0						      	}							      if ( ( k < 0 ) ) {					  
    r = len ( strr ) - 1				      	if ( k < 0 ) {						    	return "Not possible" ;					  
    while ( l <= r ) :					      	  return "Not possible" ;				      }								  
	if ( l == r ) :					      	}							      l = 0 ;							  
	    if ( k > 0 ) :				      	l = 0 ;							      r = strr . length ( ) - 1 ;				  
		palin [ l ] = '9'			      	r = str . length ( ) - 1 ;				      while ( ( l <= r ) ) {					  
	if ( palin [ l ] < '9' ) :			      	while ( l <= r ) {					    	if ( ( l == r ) ) {					  
	    if ( k >= 2 and palin [ l ] == strr [ l ] and pal 	  if ( l == r ) {					    	  if ( ( k > 0 ) ) {					  
		k -= 1					      	    if ( k > 0 ) {					    	    palin [ l ] = '9' ;					  
		palin [ l ] = palin [ r ] = '9'		      	      palin [ l ] = '9' ;				    	  }							  
	    elif ( k >= 1 and ( palin [ l ] != strr [ l ] or  	    }							    	}							  
		k -= 1					      	  }							    	if ( ( palin [ l ] ) < '9' ) {				  
		palin [ l ] = palin [ r ] = '9'		      	  if ( palin [ l ] < '9' ) {				    	  if ( ( k >= 2 && palin [ l ] == strr . charAt ( l ) &&  
	l += 1						      	    if ( k >= 2 && palin [ l ] == str . charAt ( l ) && pal 	    k -- ;						  
	r -= 1						      	      k -= 2 ;						    	    palin [ l ] = palin [ r ] = '9' ;			  
    return palin					      	      palin [ l ] = palin [ r ] = '9' ;			    	  }							  
							      	    }							    	  else if ( ( k >= 1 && ( palin [ l ] != strr . charAt (  
							      	    else if ( k >= 1 && ( palin [ l ] != str . charAt ( l ) 	    k -- ;						  
							      	      k -- ;						    	    palin [ l ] = palin [ r ] = '9' ;			  
							      	      palin [ l ] = palin [ r ] = '9' ;			    	  }							  
							      	    }							    	}							  
							      	  }							    	l ++ ;							  
							      	  l ++ ;						    	r -- ;							  
							      	  r -- ;						      }								  
							      	}							      return String . valueOf ( palin ) ;			  
							      	for ( int i = 0 ;					    }								  
							      	i < palin . length ;					    								  
							      	i ++ ) ans += palin [ i ] ;				    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L		      MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L		    MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L		  MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L
--							      --							    --								  --
def findMaxValue ( arr , n ) :				      static int findMaxValue ( int [ ] arr , int n ) {		    static int findMaxValue ( int [ ] arr , int n ) {		  error : MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J
    if n < 4 :						      	if ( n < 4 ) {						      if ( n < 4 ) {						  _K_L.java:48: error: cannot find symbol     return
	print ( "The array should have atlest 4 elements" )   	  System . out . println ( "The array should have" + " atle 	System . out . println ( "The array should have atlest 4   MIN ;	    ^	symbol:	  variable MIN	 loc
	return MIN					      	}							    	return MIN ;						  ation: class MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THA
    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n	      	int table1 [ ] = new int [ n + 1 ] ;			      }								  T_I_J_K_L 1 error
    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 	int table2 [ ] = new int [ n ] ;			      int [ ] table1 = new int [ n + 1 ] , table2 = new int [ n ] 
    for i in range ( n - 1 , - 1 , - 1 ) :		      	int table3 [ ] = new int [ n - 1 ] ;			      for ( int i = n - 1 ;					  
	table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )   	int table4 [ ] = new int [ n - 2 ] ;			      i >= 0 ;							  
    for i in range ( n - 2 , - 1 , - 1 ) :		      	Arrays . fill ( table1 , Integer . MIN_VALUE ) ;	      -- i ) {							  
	table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i +  	Arrays . fill ( table2 , Integer . MIN_VALUE ) ;	    	table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ]  
    for i in range ( n - 3 , - 1 , - 1 ) :		      	Arrays . fill ( table3 , Integer . MIN_VALUE ) ;	      }								  
	table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i +  	Arrays . fill ( table4 , Integer . MIN_VALUE ) ;	      for ( int i = n - 2 ;					  
    for i in range ( n - 4 , - 1 , - 1 ) :		      	for ( int i = n - 1 ;					      i >= 0 ;							  
	table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i +  	i >= 0 ;						      -- i ) {							  
    return table4 [ 0 ]					      	i -- ) {						    	table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i 
							      	  table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ]    }								  
							      	}							      for ( int i = n - 3 ;					  
							      	for ( int i = n - 2 ;					      i >= 0 ;							  
							      	i >= 0 ;						      -- i ) {							  
							      	i -- ) {						    	table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i 
							      	  table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i   }								  
							      	}							      for ( int i = n - 4 ;					  
							      	for ( int i = n - 3 ;					      i >= 0 ;							  
							      	i >= 0 ;						      -- i ) {							  
							      	i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table 	table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i 
							      	for ( int i = n - 4 ;					      }								  
							      	i >= 0 ;						      return table4 [ 0 ] ;					  
							      	i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table }								  
							      	return table4 [ 0 ] ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K		      SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K		    SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K		  SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K
--							      --							    --								  --
def SumOfKsubArray ( arr , n , k ) :			      public static int SumOfKsubArray ( int arr [ ] , int k ) {    public static int SumOfKsubArray ( int [ ] arr , int n , int  script_not_found : None
    Sum = 0						      	int sum = 0 ;						      int Sum = 0 ;						  
    S = deque ( )					      	Deque < Integer > S = new LinkedList < > ( ) , G = new Link   LinkedList < Integer > S = new LinkedList < > ( ) ;	  
    G = deque ( )					      	int i = 0 ;						      LinkedList < Integer > G = new LinkedList < > ( ) ;	  
    for i in range ( k ) :				      	for ( i = 0 ;						      for ( int i = 0 ;						  
	while ( len ( S ) > 0 and arr [ S [ - 1 ] ] >= arr [  	i < k ;							      i < k ;							  
	    S.pop ( )					      	i ++ ) {						      i ++ ) {							  
	while ( len ( G ) > 0 and arr [ G [ - 1 ] ] <= arr [  	  while ( ! S . isEmpty ( ) && arr [ S . peekLast ( ) ] >=  	while ( ( S . size ( ) > 0 ) && ( arr [ S . size ( ) - 1  
	    G.pop ( )					      	  while ( ! G . isEmpty ( ) && arr [ G . peekLast ( ) ] <=  	  S . removeFirst ( ) ;					  
	G.append ( i )					      	  G . addLast ( i ) ;					    	}							  
	S.append ( i )					      	  S . addLast ( i ) ;					    	while ( ( G . size ( ) > 0 ) && ( arr [ G . size ( ) - 1  
    for i in range ( k , n ) :				      	}							    	  G . removeFirst ( ) ;					  
	Sum += arr [ S [ 0 ] ] + arr [ G [ 0 ] ]	      	for ( ;							    	}							  
	while ( len ( S ) > 0 and S [ 0 ] <= i - k ) :	      	i < arr . length ;					    	G . addFirst ( i ) ;					  
	    S.popleft ( )				      	i ++ ) {						    	S . addFirst ( i ) ;					  
	while ( len ( G ) > 0 and G [ 0 ] <= i - k ) :	      	  sum += arr [ S . peekFirst ( ) ] + arr [ G . peekFirst (    }								  
	    G.popleft ( )				      	  while ( ! S . isEmpty ( ) && S . peekFirst ( ) <= i - k )   for ( int i = k ;						  
	while ( len ( S ) > 0 and arr [ S [ - 1 ] ] >= arr [  	  while ( ! G . isEmpty ( ) && G . peekFirst ( ) <= i - k )   i < n ;							  
	    S.pop ( )					      	  while ( ! S . isEmpty ( ) && arr [ S . peekLast ( ) ] >=    i ++ ) {							  
	while ( len ( G ) > 0 and arr [ G [ - 1 ] ] <= arr [  	  while ( ! G . isEmpty ( ) && arr [ G . peekLast ( ) ] <=  	Sum += arr [ S . get ( 0 ) ] + arr [ G . get ( 0 ) ] ;	  
	    G.pop ( )					      	  G . addLast ( i ) ;					    	while ( ( S . size ( ) > 0 ) && ( S . get ( 0 ) <= i - k  
	G.append ( i )					      	  S . addLast ( i ) ;					    	  S . removeFirst ( ) ;					  
	S.append ( i )					      	}							    	}							  
    Sum += arr [ S [ 0 ] ] + arr [ G [ 0 ] ]		      	sum += arr [ S . peekFirst ( ) ] + arr [ G . peekFirst ( )  	while ( ( G . size ( ) > 0 ) && ( G . get ( 0 ) <= i - k  
    return Sum						      	return sum ;						    	  G . removeFirst ( ) ;					  
							      }								    	}							  
							      								    	while ( ( S . size ( ) > 0 ) && ( arr [ S . size ( ) - 1  
							      								    	  S . removeFirst ( ) ;					  
							      								    	}							  
							      								    	while ( ( G . size ( ) > 0 ) && ( arr [ G . size ( ) - 1  
							      								    	  G . removeFirst ( ) ;					  
							      								    	}							  
							      								    	G . addFirst ( i ) ;					  
							      								    	S . addFirst ( i ) ;					  
							      								      }								  
							      								      Sum += arr [ S . get ( 0 ) ] + arr [ G . get ( 0 ) ] ;	  
							      								      return Sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		      POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		    POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS			  POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS
--							      --							    --								  --
def pointClip ( XY , n , Xmin , Ymin , Xmax , Ymax ) :	      static void pointClip ( int XY [ ] [ ] , int n , int Xmin , i public static void pointClip ( int [ ] [ ] XY , int n , int X script_not_found : None
    print ( "Point inside the viewing pane:" )		      	System . out . printf ( "Point inside the viewing pane:\n"    System . out . println ( "Point inside the viewing pane:" ) 
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( ( XY [ i ] [ 0 ] >= Xmin ) and ( XY [ i ] [ 0 ]  	i < n ;							      i < n ;							  
	    if ( ( XY [ i ] [ 1 ] >= Ymin ) and ( XY [ i ] [  	i ++ ) {						      i ++ ) {							  
		print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i  	  if ( ( XY [ i ] [ 0 ] >= Xmin ) && ( XY [ i ] [ 0 ] <= Xm 	if ( ( ( XY [ i ] [ 0 ] >= Xmin ) && ( XY [ i ] [ 0 ] <=  
    print ( "\n\nPoint outside the viewing pane:" )	      	    if ( ( XY [ i ] [ 1 ] >= Ymin ) && ( XY [ i ] [ 1 ] <=  	  if ( ( ( XY [ i ] [ 1 ] >= Ymin ) && ( XY [ i ] [ 1 ] < 
    for i in range ( n ) :				      	  }							    	    System . out . print ( "[" + XY [ i ] [ 0 ] + ", " +  
	if ( ( XY [ i ] [ 0 ] < Xmin ) or ( XY [ i ] [ 0 ] >  	}							    	  }							  
	    print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i ] [  	System . out . printf ( "\nPoint outside the viewing pane:\ 	}							  
	if ( ( XY [ i ] [ 1 ] < Ymin ) or ( XY [ i ] [ 1 ] >  	for ( int i = 0 ;					      }								  
	    print ( "[" , XY [ i ] [ 0 ] , ", " , XY [ i ] [  	i < n ;							      System . out . println ( "\n\nPoint outside the viewing pan 
							      	i ++ ) {						      for ( int i = 0 ;						  
							      	  if ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xmax   i < n ;							  
							      	  if ( ( XY [ i ] [ 1 ] < Ymin ) || ( XY [ i ] [ 1 ] > Ymax   i ++ ) {							  
							      	}							    	if ( ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xm 
							      }								    	  System . out . print ( "[" + XY [ i ] [ 0 ] + ", " + XY 
							      								    	}							  
							      								    	if ( ( ( XY [ i ] [ 1 ] < Ymin ) || ( XY [ i ] [ 1 ] > Ym 
							      								    	  System . out . print ( "[" + XY [ i ] [ 0 ] + ", " + XY 
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ROTATIONS_DIVISIBLE_8				      COUNT_ROTATIONS_DIVISIBLE_8				    COUNT_ROTATIONS_DIVISIBLE_8					  COUNT_ROTATIONS_DIVISIBLE_8
--							      --							    --								  --
def countRotationsDivBy8 ( n ) :			      static int countRotationsDivBy8 ( String n ) {		    static int countRotationsDivBy8 ( String n ) {		  error : Exception in thread "main" java.lang.Strin
    l = len ( n )					      	int len = n . length ( ) ;				      int l = n . length ( ) ;					  gIndexOutOfBoundsException: String index out of ra
    count = 0						      	int count = 0 ;						      int count = 0 ;						  nge: 7 	at java.base/java.lang.StringLatin1.charAt
    if ( l == 1 ) :					      	if ( len == 1 ) {					      if ( ( l == 1 ) ) {					  (StringLatin1.java:47) 	at java.base/java.lang.Str
	oneDigit = int ( n [ 0 ] )			      	  int oneDigit = n . charAt ( 0 ) - '0' ;		    	int oneDigit = ( int ) n . charAt ( 0 ) ;		  ing.charAt(String.java:693) 	at COUNT_ROTATIONS_DI
	if ( oneDigit % 8 == 0 ) :			      	  if ( oneDigit % 8 == 0 ) return 1 ;			    	if ( ( oneDigit % 8 == 0 ) ) {				  VISIBLE_8.f_filled(COUNT_ROTATIONS_DIVISIBLE_8.jav
	    return 1					      	  return 0 ;						    	  return 1 ;						  a:68) 	at COUNT_ROTATIONS_DIVISIBLE_8.main(COUNT_R
	return 0					      	}							    	}							  OTATIONS_DIVISIBLE_8.java:100)
    if ( l == 2 ) :					      	if ( len == 2 ) {					    	return 0 ;						  
	first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )	      	  int first = ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charA   }								  
	second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )	      	  int second = ( n . charAt ( 1 ) - '0' ) * 10 + ( n . char   if ( ( l == 2 ) ) {					  
	if ( first % 8 == 0 ) :				      	  if ( first % 8 == 0 ) count ++ ;			    	int first = ( int ) n . charAt ( 0 ) * 10 + ( int ) n . c 
	    count += 1					      	  if ( second % 8 == 0 ) count ++ ;			    	int second = ( int ) n . charAt ( 1 ) * 10 + ( int ) n .  
	if ( second % 8 == 0 ) :			      	  return count ;					    	if ( ( first % 8 == 0 ) ) {				  
	    count += 1					      	}							    	  count ++ ;						  
	return count					      	int threeDigit ;					    	}							  
    threeDigit = 0					      	for ( int i = 0 ;					    	if ( ( second % 8 == 0 ) ) {				  
    for i in range ( 0 , ( l - 2 ) ) :			      	i < ( len - 2 ) ;					    	  count ++ ;						  
	threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i +  	i ++ ) {						    	}							  
	if ( threeDigit % 8 == 0 ) :			      	  threeDigit = ( n . charAt ( i ) - '0' ) * 100 + ( n . cha 	return count ;						  
	    count += 1					      	  if ( threeDigit % 8 == 0 ) count ++ ;			      }								  
    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ]  	}							      int threeDigit = 0 ;					  
    if ( threeDigit % 8 == 0 ) :			      	threeDigit = ( n . charAt ( len - 1 ) - '0' ) * 100 + ( n .   for ( int i = 0 ;						  
	count += 1					      	if ( threeDigit % 8 == 0 ) count ++ ;			      i <= ( l - 2 ) ;						  
    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l -  	threeDigit = ( n . charAt ( len - 2 ) - '0' ) * 100 + ( n .   i ++ ) {							  
    if ( threeDigit % 8 == 0 ) :			      	if ( threeDigit % 8 == 0 ) count ++ ;			    	threeDigit = ( ( int ) n . charAt ( i ) * 100 + ( int ) n 
	count += 1					      	return count ;						    	if ( ( threeDigit % 8 == 0 ) ) {			  
    return count					      }								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      threeDigit = ( ( int ) n . charAt ( l - 1 ) * 100 + ( int ) 
							      								      if ( ( threeDigit % 8 == 0 ) ) {				  
							      								    	count ++ ;						  
							      								      }								  
							      								      threeDigit = ( ( int ) n . charAt ( l - 2 ) * 100 + ( int ) 
							      								      if ( ( threeDigit % 8 == 0 ) ) {				  
							      								    	count ++ ;						  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL
--							      --							    --								  --
def maxArea ( mat ) :					      static int maxArea ( int mat [ ] [ ] ) {			    public static int maxArea ( int [ ] [ ] mat ) {		  script_not_found : None
    hist = [ [ 0 for i in range ( C + 1 ) ] for i in range (  	int hist [ ] [ ] = new int [ R + 1 ] [ C + 1 ] ;	      int [ ] [ ] hist = new int [ C + 1 ] [ R + 1 ] ;		  
    for i in range ( 0 , C , 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	hist [ 0 ] [ i ] = mat [ 0 ] [ i ]		      	i < C ;							      i < C ;							  
	for j in range ( 1 , R , 1 ) :			      	i ++ ) {						      i += 1 ) {						  
	    if ( ( mat [ j ] [ i ] == 0 ) ) :		      	  hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ;			    	hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ;			  
		hist [ j ] [ i ] = 0			      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
	    else :					      	  j < R ;						    	j < R ;							  
		hist [ j ] [ i ] = hist [ j - 1 ] [ i ] + 1   	  j ++ ) {						    	j += 1 ) {						  
    for i in range ( 0 , R , 1 ) :			      	    hist [ j ] [ i ] = ( mat [ j ] [ i ] == 0 ) ? 0 : hist  	  if ( ( ( mat [ j ] [ i ] ) == 0 ) ) {			  
	count = [ 0 for i in range ( R + 1 ) ]		      	  }							    	    hist [ j ] [ i ] = 0 ;				  
	for j in range ( 0 , C , 1 ) :			      	}							    	  }							  
	    count [ hist [ i ] [ j ] ] += 1		      	for ( int i = 0 ;					    	  else {						  
	col_no = 0					      	i < R ;							    	    hist [ j ] [ i ] = hist [ j - 1 ] [ i ] + 1 ;	  
	j = R						      	i ++ ) {						    	  }							  
	while ( j >= 0 ) :				      	  int count [ ] = new int [ R + 1 ] ;			    	}							  
	    if ( count [ j ] > 0 ) :			      	  for ( int j = 0 ;					      }								  
		for k in range ( 0 , count [ j ] , 1 ) :      	  j < C ;						      for ( int i = 0 ;						  
		    hist [ i ] [ col_no ] = j		      	  j ++ ) {						      i < R ;							  
		    col_no += 1				      	    count [ hist [ i ] [ j ] ] ++ ;			      i += 1 ) {						  
	    j -= 1					      	  }							    	int [ ] count = new int [ R + 1 ] ;			  
    max_area = 0					      	  int col_no = 0 ;					    	for ( int j = 0 ;					  
    for i in range ( 0 , R , 1 ) :			      	  for ( int j = R ;					    	j < C ;							  
	for j in range ( 0 , C , 1 ) :			      	  j >= 0 ;						    	j += 1 ) {						  
	    curr_area = ( j + 1 ) * hist [ i ] [ j ]	      	  j -- ) {						    	  count [ hist [ i ] [ j ] ] ++ ;			  
	    if ( curr_area > max_area ) :		      	    if ( count [ j ] > 0 ) {				    	}							  
		max_area = curr_area			      	      for ( int k = 0 ;					    	int colNo = 0 ;						  
    return max_area					      	      k < count [ j ] ;					    	int j = R ;						  
							      	      k ++ ) {						    	while ( ( j >= 0 ) ) {					  
							      		hist [ i ] [ col_no ] = j ;			    	  if ( ( count [ j ] > 0 ) ) {				  
							      		col_no ++ ;					    	    for ( int k = 0 ;					  
							      	      }							    	    k < count [ j ] ;					  
							      	    }							    	    k += 1 ) {						  
							      	  }							    	      hist [ i ] [ colNo ] = j ;			  
							      	}							    	      colNo ++ ;					  
							      	int curr_area , max_area = 0 ;				    	    }							  
							      	for ( int i = 0 ;					    	  }							  
							      	i < R ;							    	}							  
							      	i ++ ) {						    	j -- ;							  
							      	  for ( int j = 0 ;					      }								  
							      	  j < C ;						      int maxArea = 0 ;						  
							      	  j ++ ) {						      for ( int i = 0 ;						  
							      	    curr_area = ( j + 1 ) * hist [ i ] [ j ] ;		      i < R ;							  
							      	    if ( curr_area > max_area ) {			      i += 1 ) {						  
							      	      max_area = curr_area ;				    	for ( int j = 0 ;					  
							      	    }							    	j < C ;							  
							      	  }							    	j += 1 ) {						  
							      	}							    	  int currArea = ( j + 1 ) * hist [ i ] [ j ] ;		  
							      	return max_area ;					    	  if ( ( currArea > maxArea ) ) {			  
							      }								    	    maxArea = currArea ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return maxArea ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT			      PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT			    PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT			  PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT
--							      --							    --								  --
def printSpiral ( mat , r , c ) :			      static void printSpiral ( int [ ] [ ] mat , int r , int c ) { public static void printSpiral ( int [ ] [ ] mat , int r , in script_not_found : None
    a = 0						      	int i , a = 0 , b = 2 ;					      int a = 0 ;						  
    b = 2						      	int low_row = ( 0 > a ) ? 0 : a ;			      int b = 2 ;						  
    low_row = 0 if ( 0 > a ) else a			      	int low_column = ( 0 > b ) ? 0 : b - 1 ;		      int lowRow = ( 0 > a ) ? 0 : a ;				  
    low_column = 0 if ( 0 > b ) else b - 1		      	int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;	      int lowColumn = ( 0 > b ) ? 0 : b - 1 ;			  
    high_row = r - 1 if ( ( a + 1 ) >= r ) else a + 1	      	int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;	      int highRow = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;	  
    high_column = c - 1 if ( ( b + 1 ) >= c ) else b + 1      	while ( ( low_row > 0 - r && low_column > 0 - c ) ) {	      int highColumn = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;	  
    while ( ( low_row > 0 - r and low_column > 0 - c ) ) :    	  for ( i = low_column + 1 ;				      while ( ( lowRow > 0 - r ) && ( lowColumn > 0 - c ) ) {	  
	i = low_column + 1				      	  i <= high_column && i < c && low_row >= 0 ;		    	int i = lowColumn + 1 ;					  
	while ( i <= high_column and i < c and low_row >= 0 ) 	  ++ i ) System . out . print ( mat [ low_row ] [ i ] + " " 	while ( ( i <= highColumn ) && ( i < c ) && ( lowRow >= 0 
	    print ( mat [ low_row ] [ i ] , end = " " )	      	  low_row -= 1 ;					    	  System . out . print ( mat [ lowRow ] [ i ] + " " ) ;	  
	    i += 1					      	  for ( i = low_row + 2 ;				    	  i ++ ;						  
	low_row -= 1					      	  i <= high_row && i < r && high_column < c ;		    	}							  
	i = low_row + 2					      	  ++ i ) System . out . print ( mat [ i ] [ high_column ] + 	lowRow -- ;						  
	while ( i <= high_row and i < r and high_column < c ) 	  high_column += 1 ;					    	i = lowRow + 2 ;					  
	    print ( mat [ i ] [ high_column ] , end = " " )   	  for ( i = high_column - 2 ;				    	while ( ( i <= highRow ) && ( i < r ) && ( highColumn < c 
	    i += 1					      	  i >= low_column && i >= 0 && high_row < r ;		    	  System . out . print ( mat [ i ] [ highColumn ] + " " ) 
	high_column += 1				      	  -- i ) System . out . print ( mat [ high_row ] [ i ] + "  	  i ++ ;						  
	i = high_column - 2				      	  high_row += 1 ;					    	}							  
	while ( i >= low_column and i >= 0 and high_row < r ) 	  for ( i = high_row - 2 ;				    	highColumn ++ ;						  
	    print ( mat [ high_row ] [ i ] , end = " " )      	  i > low_row && i >= 0 && low_column >= 0 ;		    	i = highColumn - 2 ;					  
	    i -= 1					      	  -- i ) System . out . print ( mat [ i ] [ low_column ] +  	while ( ( i >= lowColumn ) && ( i >= 0 ) && ( highRow < r 
	high_row += 1					      	  low_column -= 1 ;					    	  System . out . print ( mat [ highRow ] [ i ] + " " ) ;  
	i = high_row - 2				      	}							    	  i -- ;						  
	while ( i > low_row and i >= 0 and low_column >= 0 )  	System . out . println ( ) ;				    	}							  
	    print ( mat [ i ] [ low_column ] , end = " " )    }								    	highRow ++ ;						  
	    i -= 1					      								    	i = highRow - 2 ;					  
	low_column -= 1					      								    	while ( ( i > lowRow ) && ( i >= 0 ) && ( lowColumn >= 0  
    print ( )						      								    	  System . out . print ( mat [ i ] [ lowColumn ] + " " )  
							      								    	  i -- ;						  
							      								    	}							  
							      								    	lowColumn -- ;						  
							      								      }								  
							      								      System . out . println ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER		      MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER			    MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER			  MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER
--							      --							    --								  --
def findMaxVal ( arr , n , num , maxLimit ) :		      static int findMaxVal ( int [ ] arr , int n , int num , int m static int findMaxVal ( int [ ] arr , int n , int num , int m script_not_found : None
    ind = - 1						      	int ind ;						      int ind = - 1 ;						  
    val = - 1						      	int val ;						      int val = - 1 ;						  
    dp = [ [ 0 for i in range ( maxLimit + 1 ) ] for j in ran 	int [ ] [ ] dp = new int [ n ] [ maxLimit + 1 ] ;	      int [ ] [ ] dp = new int [ maxLimit + 1 ] [ n ] ;		  
    for ind in range ( n ) :				      	for ( ind = 0 ;						      for ( int i = 0 ;						  
	for val in range ( maxLimit + 1 ) :		      	ind < n ;						      i < n ;							  
	    if ( ind == 0 ) :				      	ind ++ ) {						      i ++ ) {							  
		if ( num - arr [ ind ] == val or num + arr [  	  for ( val = 0 ;					    	for ( int j = 0 ;					  
		    dp [ ind ] [ val ] = 1		      	  val <= maxLimit ;					    	j < n ;							  
		else :					      	  val ++ ) {						    	j ++ ) {						  
		    dp [ ind ] [ val ] = 0		      	    if ( ind == 0 ) {					    	  dp [ i ] [ j ] = 0 ;					  
	    else :					      	      if ( num - arr [ ind ] == val || num + arr [ ind ] == 	}							  
		if ( val - arr [ ind ] >= 0 and val + arr [ i 		dp [ ind ] [ val ] = 1 ;			      }								  
		    if ( dp [ ind - 1 ] [ val - arr [ ind ] ] 	      }							      for ( ind = 0 ;						  
			dp [ ind ] [ val ] = 1		      	      else {						      ind < n ;							  
		elif ( val - arr [ ind ] >= 0 ) :	      		dp [ ind ] [ val ] = 0 ;			      ind ++ ) {						  
		    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val 	      }							    	for ( val = 0 ;						  
		elif ( val + arr [ ind ] <= maxLimit ) :      	    }							    	val < maxLimit + 1 ;					  
		    dp [ ind ] [ val ] = dp [ ind - 1 ] [ val 	    else {						    	j ++ ) {						  
		else :					      	      if ( val - arr [ ind ] >= 0 && val + arr [ ind ] <= m 	  if ( ( ind == 0 ) ) {					  
		    dp [ ind ] [ val ] = 0		      		if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 || d 	    if ( ( num - arr [ ind ] == val || num + arr [ ind ]  
    for val in range ( maxLimit , - 1 , - 1 ) :		      	      }							    	      dp [ ind ] [ val ] = 1 ;				  
	if ( dp [ n - 1 ] [ val ] == 1 ) :		      	      else if ( val - arr [ ind ] >= 0 ) {		    	    }							  
	    return val					      		dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ i 	    else {						  
    return - 1						      	      }							    	      dp [ ind ] [ val ] = 0 ;				  
							      	      else if ( val + arr [ ind ] <= maxLimit ) {	    	    }							  
							      		dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ i 	  }							  
							      	      }							    	  else {						  
							      	      else {						    	    if ( ( val - arr [ ind ] >= 0 ) && ( val + arr [ ind  
							      		dp [ ind ] [ val ] = 0 ;			    	      if ( ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 || 
							      	      }							    		dp [ ind ] [ val ] = 1 ;			  
							      	    }							    	      }							  
							      	  }							    	    }							  
							      	}							    	    else if ( ( val - arr [ ind ] >= 0 ) ) {		  
							      	for ( val = maxLimit ;					    	      dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ i 
							      	val >= 0 ;						    	    }							  
							      	val -- ) {						    	    else if ( ( val + arr [ ind ] <= maxLimit ) ) {	  
							      	  if ( dp [ n - 1 ] [ val ] == 1 ) {			    	      dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ i 
							      	    return val ;					    	    }							  
							      	  }							    	    else {						  
							      	}							    	      dp [ ind ] [ val ] = 0 ;				  
							      	return - 1 ;						    	    }							  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( val = maxLimit ;					  
							      								      val >= 0 ;						  
							      								      val -- ) {						  
							      								    	if ( ( dp [ n - 1 ] [ val ] == 1 ) ) {			  
							      								    	  return val ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PARTITION_NUMBER_TWO_DIVISBLE_PARTS			      PARTITION_NUMBER_TWO_DIVISBLE_PARTS			    PARTITION_NUMBER_TWO_DIVISBLE_PARTS				  PARTITION_NUMBER_TWO_DIVISBLE_PARTS
--							      --							    --								  --
def findDivision ( str , a , b ) :			      static void findDivision ( String str , int a , int b ) {	    static void findDivision ( String str , int a , int b ) {	  script_not_found : None
    lenn = len ( str )					      	int len = str . length ( ) ;				      int lenn = str . length ( ) ;				  
    lr = [ 0 ] * ( lenn + 1 )				      	int [ ] lr = new int [ len + 1 ] ;			      int [ ] lr = new int [ lenn + 1 ] ;			  
    lr [ 0 ] = ( int ( str [ 0 ] ) ) % a		      	lr [ 0 ] = ( ( int ) str . charAt ( 0 ) - ( int ) '0' ) % a   lr [ 0 ] = ( ( int ) str . charAt ( 0 ) ) % a ;		  
    for i in range ( 1 , lenn ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + \ int ( str  	i < len ;						      i < lenn ;						  
    rl = [ 0 ] * ( lenn + 1 )				      	i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( ( int ) s   i ++ ) {							  
    rl [ lenn - 1 ] = int ( str [ lenn - 1 ] ) % b	      	int [ ] rl = new int [ len + 1 ] ;			    	lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + new String ( str 
    power10 = 10					      	rl [ len - 1 ] = ( ( int ) str . charAt ( len - 1 ) - ( int   }								  
    for i in range ( lenn - 2 , - 1 , - 1 ) :		      	int power10 = 10 ;					      int [ ] rl = new int [ lenn + 1 ] ;			  
	rl [ i ] = ( rl [ i + 1 ] + int ( str [ i ] ) * power 	for ( int i = len - 2 ;					      rl [ lenn - 1 ] = ( int ) str . charAt ( lenn - 1 ) ;	  
	power10 = ( power10 * 10 ) % b			      	i >= 0 ;						      int power10 = 10 ;					  
    for i in range ( 0 , lenn - 1 ) :			      	i -- ) {						      for ( int i = lenn - 2 ;					  
	if ( lr [ i ] != 0 ) :				      	  rl [ i ] = ( rl [ i + 1 ] + ( ( int ) str . charAt ( i )    i >= 0 ;							  
	    continue					      	  power10 = ( power10 * 10 ) % b ;			      i -- ) {							  
	if ( rl [ i + 1 ] == 0 ) :			      	}							    	rl [ i ] = ( rl [ i + 1 ] + Integer . parseInt ( str . su 
	    print ( "YES" )				      	for ( int i = 0 ;					    	power10 = ( power10 * 10 ) % b ;			  
	    for k in range ( 0 , i + 1 ) :		      	i < len - 1 ;						      }								  
		print ( str [ k ] , end = "" )		      	i ++ ) {						      for ( int i = 0 ;						  
	    print ( "," , end = "" )			      	  if ( lr [ i ] != 0 ) continue ;			      i <= lenn - 1 ;						  
	    for i in range ( i + 1 , lenn ) :		      	  if ( rl [ i + 1 ] == 0 ) {				      i ++ ) {							  
		print ( str [ k ] , end = "" )		      	    System . out . println ( "YES" ) ;			    	if ( ( lr [ i ] != 0 ) ) {				  
		return					      	    for ( int k = 0 ;					    	  continue ;						  
    print ( "NO" )					      	    k <= i ;						    	}							  
							      	    k ++ ) System . out . print ( str . charAt ( k ) ) ;    	if ( ( rl [ i + 1 ] == 0 ) ) {				  
							      	    System . out . print ( ", " ) ;			    	  System . out . println ( "YES" ) ;			  
							      	    for ( int k = i + 1 ;				    	  for ( int k = 0 ;					  
							      	    k < len ;						    	  k <= i ;						  
							      	    k ++ ) System . out . print ( str . charAt ( k ) ) ;    	  k ++ ) {						  
							      	    return ;						    	    System . out . print ( str . charAt ( k ) ) ;	  
							      	  }							    	  }							  
							      	}							    	  System . out . println ( "," ) ;			  
							      	System . out . println ( "NO" ) ;			    	  for ( int k = i + 1 ;					  
							      }								    	  k < lenn ;						  
							      								    	  k ++ ) {						  
							      								    	    System . out . print ( str . charAt ( k ) ) ;	  
							      								    	    return ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "NO" ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER	      COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER		    COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER		  COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER
--							      --							    --								  --
def numofArray ( n , m ) :				      static int numofArray ( int n , int m ) {			    public static int numofArray ( int n , int m ) {		  script_not_found : None
    dp = [ [ 0 for i in range ( MAX ) ] for j in range ( MAX  	int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;		      int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;		  
    di = [ [ ] for i in range ( MAX ) ]			      	Vector < Integer > [ ] di = new Vector [ MAX ] ;	      for ( int i = 0 ;						  
    mu = [ [ ] for i in range ( MAX ) ]			      	Vector < Integer > [ ] mu = new Vector [ MAX ] ;	      i < MAX ;							  
    for i in range ( 1 , m + 1 ) :			      	for ( int i = 0 ;					      i ++ ) {							  
	for j in range ( 2 * i , m + 1 , i ) :		      	i < MAX ;						    	for ( int j = 0 ;					  
	    di [ j ].append ( i )			      	i ++ ) {						    	j < MAX ;						  
	    mu [ i ].append ( j )			      	  for ( int j = 0 ;					    	j ++ ) {						  
	di [ i ].append ( i )				      	  j < MAX ;						    	  dp [ i ] [ j ] = 0 ;					  
    for i in range ( 1 , m + 1 ) :			      	  j ++ ) {						    	}							  
	dp [ 1 ] [ i ] = 1				      	    dp [ i ] [ j ] = 0 ;				      }								  
    for i in range ( 2 , n + 1 ) :			      	  }							      List < Integer > di = new ArrayList < > ( ) ;		  
	for j in range ( 1 , m + 1 ) :			      	}							      List < Integer > mu = new ArrayList < > ( ) ;		  
	    dp [ i ] [ j ] = 0				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	    for x in di [ j ] :				      	i < MAX ;						      i < MAX ;							  
		dp [ i ] [ j ] += dp [ i - 1 ] [ x ]	      	i ++ ) {						      i ++ ) {							  
	    for x in mu [ j ] :				      	  di [ i ] = new Vector < > ( ) ;			    	for ( int j = 0 ;					  
		dp [ i ] [ j ] += dp [ i - 1 ] [ x ]	      	  mu [ i ] = new Vector < > ( ) ;			    	j < 2 * i ;						  
    ans = 0						      	}							    	j <= m ;						  
    for i in range ( 1 , m + 1 ) :			      	for ( int i = 1 ;					    	j += i ) {						  
	ans += dp [ n ] [ i ]				      	i <= m ;						    	  di . add ( i ) ;					  
	di [ i ].clear ( )				      	i ++ ) {						    	  mu . add ( j ) ;					  
	mu [ i ].clear ( )				      	  for ( int j = 2 * i ;					    	}							  
    return ans						      	  j <= m ;						    	di . get ( i ) . add ( i ) ;				  
							      	  j += i ) {						      }								  
							      	    di [ j ] . add ( i ) ;				      for ( int i = 1 ;						  
							      	    mu [ i ] . add ( j ) ;				      i <= m ;							  
							      	  }							      i ++ ) {							  
							      	  di [ i ] . add ( i ) ;				    	dp [ 1 ] [ i ] = 1 ;					  
							      	}							      }								  
							      	for ( int i = 1 ;					      for ( int i = 2 ;						  
							      	i <= m ;						      i <= n ;							  
							      	i ++ ) dp [ 1 ] [ i ] = 1 ;				      i ++ ) {							  
							      	for ( int i = 2 ;					    	for ( int j = 1 ;					  
							      	i <= n ;						    	j <= m ;						  
							      	i ++ ) {						    	j ++ ) {						  
							      	  for ( int j = 1 ;					    	  dp [ i ] [ j ] = 0 ;					  
							      	  j <= m ;						    	  for ( int x : di . get ( j ) ) {			  
							      	  j ++ ) {						    	    dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;		  
							      	    dp [ i ] [ j ] = 0 ;				    	  }							  
							      	    for ( Integer x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 	  for ( int x : mu . get ( j ) ) {			  
							      	    for ( Integer x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 	    dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;		  
							      	  }							    	  }							  
							      	}							    	}							  
							      	int ans = 0 ;						      }								  
							      	for ( int i = 1 ;					      int ans = 0 ;						  
							      	i <= m ;						      for ( int i = 1 ;						  
							      	i ++ ) {						      i <= m ;							  
							      	  ans += dp [ n ] [ i ] ;				      i ++ ) {							  
							      	  di [ i ] . clear ( ) ;				    	ans += dp [ n ] [ i ] ;					  
							      	  mu [ i ] . clear ( ) ;				    	di . clear ( ) ;					  
							      	}							    	mu . get ( i ) . clear ( ) ;				  
							      	return ans ;						      }								  
							      }								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_FOUR_SQUARE_IDENTITY_1				      EULERS_FOUR_SQUARE_IDENTITY_1				    EULERS_FOUR_SQUARE_IDENTITY_1				  EULERS_FOUR_SQUARE_IDENTITY_1
--							      --							    --								  --
def checkEulerFourSquareIdentity ( a , b ) :		      public static void checkEulerFourSquareIdentity ( int a , int static void checkEulerFourSquareIdentity ( int a , int b ) {  script_not_found : None
    ab = a * b						      	int ab = a * b ;					      int ab = a * b ;						  
    flag = False					      	boolean flag = false ;					      boolean flag = false ;					  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while i * i <= ab :					      	while ( i * i <= ab ) {					      while ( i * i <= ab ) {					  
	j = i						      	  int j = i ;						    	int j = i ;						  
	while i * i + j * j <= ab :			      	  while ( i * i + j * j <= ab ) {			    	while ( i * i + j * j <= ab ) {				  
	    k = j					      	    int k = j ;						    	  int k = j ;						  
	    while i * i + j * j + k * k <= ab :		      	    while ( i * i + j * j + k * k <= ab ) {		    	  while ( i * i + j * j + k * k <= ab ) {		  
		l = ( ab - ( i * i + j * j + k * k ) ) ** ( 0 	      double l = Math . sqrt ( ab - ( i * i + j * j + k * k 	    double l = ( ab - ( i * i + j * j + k * k ) ) * ( 0.5 
		if l == int ( l ) and l >= k :		      	      if ( Math . floor ( l ) == Math . ceil ( l ) && l >=  	    if ( l == ( int ) l && l >= k ) {			  
		    flag = True				      		flag = true ;					    	      flag = true ;					  
		    print ( "i = " , i )		      		System . out . print ( "i = " + i + "\n" ) ;	    	      System . out . println ( "i = " + i ) ;		  
		    print ( "j = " , j )		      		System . out . print ( "j = " + j + "\n" ) ;	    	      System . out . println ( "j = " + j ) ;		  
		    print ( "k = " , k )		      		System . out . print ( "k = " + k + "\n" ) ;	    	      System . out . println ( "k = " + k ) ;		  
		    print ( "l = " , l )		      		System . out . print ( "l = " + ( int ) l + "\n" )  	      System . out . println ( "l = " + l ) ;		  
		    print ( "Product of" , a , "and" , b , "c 		System . out . print ( "Product of " + a + " and "  	      System . out . println ( "Product of" + a + " and"  
		    print ( ab , " = " , i , "*" , i , "+" ,  		System . out . print ( ab + " = " + i + "*" + i + " 	      System . out . println ( ab + " = " + i + "*" + i + 
		k += 1					      	      }							    	    }							  
	    j += 1					      	      k += 1 ;						    	    k ++ ;						  
	i += 1						      	    }							    	  }							  
    if flag == False :					      	    j += 1 ;						    	  j ++ ;						  
	print ( "Solution doesn't exist!" )		      	  }							    	}							  
	return						      	  i += 1 ;						    	i ++ ;							  
							      	}							      }								  
							      	if ( flag == false ) {					      i ++ ;							  
							      	  System . out . println ( "Solution doesn't exist!" ) ;    }								  
							      	  return ;						    if ( flag == false ) {					  
							      	}							      System . out . println ( "Solution doesn't exist!" ) ;	  
							      }								      return ;							  
							      								    }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1		      MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1		    MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1		  MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1
--							      --							    --								  --
def MaximumDecimalValue ( mat , n ) :			      static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) {  public static int MaximumDecimalValue ( int [ ] [ ] mat , int script_not_found : None
    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]  	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] dp = new int [ n ] [ n ] ;			  
    if ( mat [ 0 ] [ 0 ] == 1 ) :			      	if ( mat [ 0 ] [ 0 ] == 1 ) {				      for ( int i = 0 ;						  
	dp [ 0 ] [ 0 ] = 1				      	  dp [ 0 ] [ 0 ] = 1 ;					      i < n ;							  
    for i in range ( 1 , n ) :				      	}							      i ++ ) {							  
	if ( mat [ 0 ] [ i ] == 1 ) :			      	for ( int i = 1 ;					    	dp [ i ] [ 0 ] = 0 ;					  
	    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 ** i      	i < n ;							      }								  
	else :						      	i ++ ) {						      if ( ( mat [ 0 ] [ 0 ] == 1 ) ) {				  
	    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ]		      	  if ( mat [ 0 ] [ i ] == 1 ) {				    	dp [ 0 ] [ 0 ] = 1 ;					  
    for i in range ( 1 , n ) :				      	    dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math .    }								  
	if ( mat [ i ] [ 0 ] == 1 ) :			      	  }							      for ( int i = 1 ;						  
	    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + 2 ** i      	  else {						      i < n ;							  
    else :						      	    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;		      i ++ ) {							  
	dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]		      	  }							    	if ( ( mat [ 0 ] [ i ] == 1 ) ) {			  
    for i in range ( 1 , n ) :				      	}							    	  dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 * i ;		  
	for j in range ( 1 , n ) :			      	for ( int i = 1 ;					    	}							  
	    if ( mat [ i ] [ j ] == 1 ) :		      	i < n ;							    	else {							  
		dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , d 	i ++ ) {						    	  dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;			  
	    else :					      	  if ( mat [ i ] [ 0 ] == 1 ) {				    	}							  
		dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , d 	    dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math .    }								  
    return dp [ n - 1 ] [ n - 1 ]			      	  }							      for ( int i = 1 ;						  
							      	  else {						      i < n ;							  
							      	    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;		      i ++ ) {							  
							      	  }							    	if ( ( mat [ i ] [ 0 ] == 1 ) ) {			  
							      	}							    	  dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + 2 * i ;		  
							      	for ( int i = 1 ;					    	}							  
							      	i < n ;							      }								  
							      	i ++ ) {						      else {							  
							      	  for ( int j = 1 ;					    	dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;			  
							      	  j < n ;						      }								  
							      	  j ++ ) {						      for ( int i = 1 ;						  
							      	    if ( mat [ i ] [ j ] == 1 ) {			      i < n ;							  
							      	      dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j    i ++ ) {							  
							      	    }							    	for ( int j = 1 ;					  
							      	    else {						    	j < n ;							  
							      	      dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 	j ++ ) {						  
							      	    }							    	  if ( ( mat [ i ] [ j ] == 1 ) ) {			  
							      	  }							    	    dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 
							      	}							    	  }							  
							      	return dp [ n - 1 ] [ n - 1 ] ;				    	  else {						  
							      }								    	    dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ n - 1 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIRECTION_LAST_SQUARE_BLOCK				      DIRECTION_LAST_SQUARE_BLOCK				    DIRECTION_LAST_SQUARE_BLOCK					  DIRECTION_LAST_SQUARE_BLOCK
--							      --							    --								  --
def direction ( R , C ) :				      static void direction ( int R , int C ) {			    public static void direction ( int R , int C ) {		  script_not_found : None
    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :   	if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 != 0 ) && ( R  
	print ( "Left" )				      	  System . out . println ( "Left" ) ;			    	System . out . println ( "Left" ) ;			  
	return						      	  return ;						    	return ;						  
    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :   	}							      }								  
	print ( "Up" )					      	if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
	return						      	  System . out . println ( "Up" ) ;			    	System . out . println ( "Up" ) ;			  
    if R == C and R % 2 != 0 and C % 2 != 0 :		      	  return ;						    	return ;						  
	print ( "Right" )				      	}							      }								  
	return						      	if ( R == C && R % 2 != 0 && C % 2 != 0 ) {		      if ( ( R == C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) ) {	  
    if R == C and R % 2 == 0 and C % 2 == 0 :		      	  System . out . println ( "Right" ) ;			    	System . out . println ( "Right" ) ;			  
	print ( "Left" )				      	  return ;						    	return ;						  
	return						      	}							      }								  
    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :   	if ( R == C && R % 2 == 0 && C % 2 == 0 ) {		      if ( ( R == C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
	print ( "Right" )				      	  System . out . println ( "Left" ) ;			    	System . out . println ( "Left" ) ;			  
	return						      	  return ;						    	return ;						  
    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :   	}							      }								  
	print ( "Down" )				      	if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
	return						      	  System . out . println ( "Right" ) ;			    	System . out . println ( "Right" ) ;			  
    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :   	  return ;						    	return ;						  
	print ( "Left" )				      	}							      }								  
	return						      	if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :   	  System . out . println ( "Down" ) ;			    	System . out . println ( "Down" ) ;			  
	print ( "Up" )					      	  return ;						    	return ;						  
	return						      	}							      }								  
    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :   	if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
	print ( "Down" )				      	  System . out . println ( "Left" ) ;			    	System . out . println ( "Left" ) ;			  
	return						      	  return ;						    	return ;						  
    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :   	}							      }								  
	print ( "Right" )				      	if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
	return						      	  System . out . println ( "Up" ) ;			    	System . out . println ( "Up" ) ;			  
							      	  return ;						    	return ;						  
							      	}							      }								  
							      	if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
							      	  System . out . println ( "Down" ) ;			    	System . out . println ( "Down" ) ;			  
							      	  return ;						    	return ;						  
							      	}							      }								  
							      	if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {	      if ( ( R != C ) && ( R % 2 == 0 ) && ( C % 2 == 0 ) && ( R  
							      	  System . out . println ( "Right" ) ;			    	System . out . println ( "Right" ) ;			  
							      	  return ;						    	return ;						  
							      	}							      }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_SPECIFIC_PAIR_IN_MATRIX_1			      FIND_A_SPECIFIC_PAIR_IN_MATRIX_1				    FIND_A_SPECIFIC_PAIR_IN_MATRIX_1				  FIND_A_SPECIFIC_PAIR_IN_MATRIX_1
--							      --							    --								  --
def findMaxValue ( mat ) :				      static int findMaxValue ( int N , int mat [ ] [ ] ) {	    static int findMaxValue ( int [ ] [ ] mat ) {		  script_not_found : None
    maxValue = - sys.maxsize - 1			      	int maxValue = Integer . MIN_VALUE ;			      int maxValue = - Integer . MAX_VALUE - 1 ;		  
    maxArr = [ [ 0 for x in range ( N ) ] for y in range ( N  	int maxArr [ ] [ ] = new int [ N ] [ N ] ;		      int [ ] [ ] maxArr = new int [ N ] [ N ] ;		  
    maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ]      	maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;	      for ( int x = 0 ;						  
    maxv = mat [ N - 1 ] [ N - 1 ]			      	int maxv = mat [ N - 1 ] [ N - 1 ] ;			      x < N ;							  
    for j in range ( N - 2 , - 1 , - 1 ) :		      	for ( int j = N - 2 ;					      x ++ ) {							  
	if ( mat [ N - 1 ] [ j ] > maxv ) :		      	j >= 0 ;						    	for ( int y = 0 ;					  
	    maxv = mat [ N - 1 ] [ j ]			      	j -- ) {						    	y < N ;							  
	maxArr [ N - 1 ] [ j ] = maxv			      	  if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [  	y ++ ) {						  
    maxv = mat [ N - 1 ] [ N - 1 ]			      	  maxArr [ N - 1 ] [ j ] = maxv ;			    	  maxArr [ x ] [ y ] = 0 ;				  
    for i in range ( N - 2 , - 1 , - 1 ) :		      	}							    	}							  
	if ( mat [ i ] [ N - 1 ] > maxv ) :		      	maxv = mat [ N - 1 ] [ N - 1 ] ;			      }								  
	    maxv = mat [ i ] [ N - 1 ]			      	for ( int i = N - 2 ;					      maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;	  
	maxArr [ i ] [ N - 1 ] = maxv			      	i >= 0 ;						      int maxv = mat [ N - 1 ] [ N - 1 ] ;			  
    for i in range ( N - 2 , - 1 , - 1 ) :		      	i -- ) {						      for ( int j = N - 2 ;					  
	for j in range ( N - 2 , - 1 , - 1 ) :		      	  if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N -    j >= 0 ;							  
	    if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] 	  maxArr [ i ] [ N - 1 ] = maxv ;			      j -- ) {							  
		maxValue = ( maxArr [ i + 1 ] [ j + 1 ] - mat 	}							    	if ( ( mat [ N - 1 ] [ j ] > maxv ) ) {			  
	    maxArr [ i ] [ j ] = max ( mat [ i ] [ j ] , max  	for ( int i = N - 2 ;					    	  maxv = mat [ N - 1 ] [ j ] ;				  
    return maxValue					      	i >= 0 ;						    	}							  
							      	i -- ) {						    	maxArr [ N - 1 ] [ j ] = maxv ;				  
							      	  for ( int j = N - 2 ;					      }								  
							      	  j >= 0 ;						      maxv = mat [ N - 1 ] [ N - 1 ] ;				  
							      	  j -- ) {						      for ( int i = N - 2 ;					  
							      	    if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > max   i >= 0 ;							  
							      	    maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Mat   i -- ) {							  
							      	  }							    	if ( ( mat [ i ] [ N - 1 ] > maxv ) ) {			  
							      	}							    	  maxv = mat [ i ] [ N - 1 ] ;				  
							      	return maxValue ;					    	}							  
							      }								    	maxArr [ i ] [ N - 1 ] = maxv ;				  
							      								      }								  
							      								      for ( int i = N - 2 ;					  
							      								      i >= 0 ;							  
							      								      i -- ) {							  
							      								    	for ( int j = N - 2 ;					  
							      								    	j >= 0 ;						  
							      								    	j -- ) {						  
							      								    	  if ( ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ) > 
							      								    	    maxValue = ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ 
							      								    	  }							  
							      								    	  maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Mat 
							      								    	}							  
							      								      }								  
							      								      return maxValue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOOLITTLE_ALGORITHM_LU_DECOMPOSITION			      DOOLITTLE_ALGORITHM_LU_DECOMPOSITION			    DOOLITTLE_ALGORITHM_LU_DECOMPOSITION			  DOOLITTLE_ALGORITHM_LU_DECOMPOSITION
--							      --							    --								  --
def luDecomposition ( mat , n ) :			      static void luDecomposition ( int [ ] [ ] mat , int n ) {	    public static void luDecomposition ( int [ ] [ ] mat , int n  script_not_found : None
    lower = [ [ 0 for x in range ( n ) ] for y in range ( n ) 	int [ ] [ ] lower = new int [ n ] [ n ] ;		      int [ ] [ ] lower = new int [ n ] [ n ] ;			  
    upper = [ [ 0 for x in range ( n ) ] for y in range ( n ) 	int [ ] [ ] upper = new int [ n ] [ n ] ;		      for ( int x = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      x < n ;							  
	for k in range ( i , n ) :			      	i < n ;							      x ++ ) lower [ x ] [ x ] = 0 ;				  
	    sum = 0					      	i ++ ) {						      int [ ] [ ] upper = new int [ n ] [ n ] ;			  
	    for j in range ( i ) :			      	  for ( int k = i ;					      for ( int y = 0 ;						  
		sum += ( lower [ i ] [ j ] * upper [ j ] [ k  	  k < n ;						      y < n ;							  
	    upper [ i ] [ k ] = mat [ i ] [ k ] - sum	      	  k ++ ) {						      y ++ ) upper [ x ] [ y ] = 0 ;				  
	for k in range ( i , n ) :			      	    int sum = 0 ;					      for ( int i = 0 ;						  
	    if ( i == k ) :				      	    for ( int j = 0 ;					      i < n ;							  
		lower [ i ] [ i ] = 1			      	    j < i ;						      i ++ ) {							  
	    else :					      	    j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) 	for ( int k = i ;					  
		sum = 0					      	    upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;		    	k < n ;							  
		for j in range ( i ) :			      	  }							    	k ++ ) {						  
		    sum += ( lower [ k ] [ j ] * upper [ j ]  	  for ( int k = i ;					    	  int sum = 0 ;						  
		lower [ k ] [ i ] = int ( ( mat [ k ] [ i ] - 	  k < n ;						    	  for ( int j = 0 ;					  
    print ( "Lower Triangular\t\tUpper Triangular" )	      	  k ++ ) {						    	  j < i ;						  
    for i in range ( n ) :				      	    if ( i == k ) lower [ i ] [ i ] = 1 ;		    	  j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) 
	for j in range ( n ) :				      	    else {						    	  upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;		  
	    print ( lower [ i ] [ j ] , end = "\t" )	      	      int sum = 0 ;					    	}							  
	print ( "" , end = "\t" )			      	      for ( int j = 0 ;					    	for ( int k = i ;					  
	for j in range ( n ) :				      	      j < i ;						    	k < n ;							  
	    print ( upper [ i ] [ j ] , end = "\t" )	      	      j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] 	k ++ ) {						  
	print ( "" )					      	      lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper 	  if ( ( i == k ) ) lower [ i ] [ i ] = 1 ;		  
							      	    }							    	  else {						  
							      	  }							    	    int sum = 0 ;					  
							      	}							    	    for ( int j = 0 ;					  
							      	System . out . println ( setw ( 2 ) + "	    Lower Triangula 	    j < i ;						  
							      	for ( int i = 0 ;					    	    j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] 
							      	i < n ;							    	    lower [ k ] [ i ] = ( int ) ( ( mat [ k ] [ i ] - sum 
							      	i ++ ) {						    	  }							  
							      	  for ( int j = 0 ;					    	}							  
							      	  j < n ;						      }								  
							      	  j ++ ) System . out . print ( setw ( 4 ) + lower [ i ] [    System . out . println ( "Lower Triangular\t\tUpper Triangu 
							      	  System . out . print ( "\t" ) ;			      for ( int i = 0 ;						  
							      	  for ( int j = 0 ;					      i < n ;							  
							      	  j < n ;						      i ++ ) {							  
							      	  j ++ ) System . out . print ( setw ( 4 ) + upper [ i ] [  	for ( int j = 0 ;					  
							      	  System . out . print ( "\n" ) ;			    	j < n ;							  
							      	}							    	j ++ ) System . out . print ( lower [ i ] [ j ] + "\t" )  
							      }								    	System . out . println ( "" ) ;				  
							      								    	for ( int j = 0 ;					  
							      								    	j < n ;							  
							      								    	j ++ ) System . out . print ( upper [ i ] [ j ] + "\t" )  
							      								    	System . out . println ( "" ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER
--							      --							    --								  --
def findSubString ( string , pat ) :			      static String findSubString ( String str , String pat ) {	    static String findSubString ( String string , String pat ) {  script_not_found : None
    len1 = len ( string )				      	int len1 = str . length ( ) ;				      int len1 = string . length ( ) ;				  
    len2 = len ( pat )					      	int len2 = pat . length ( ) ;				      int len2 = pat . length ( ) ;				  
    if len1 < len2 :					      	if ( len1 < len2 ) {					      if ( len1 < len2 ) {					  
	print ( "No such window exists" )		      	  System . out . println ( "No such window exists" ) ;	    	System . out . println ( "No such window exists" ) ;	  
	return ""					      	  return "" ;						    	return "" ;						  
    hash_pat = [ 0 ] * no_of_chars			      	}							      }								  
    hash_str = [ 0 ] * no_of_chars			      	int hash_pat [ ] = new int [ no_of_chars ] ;		      int [ ] hashPat = new int [ noOfChars ] ;			  
    for i in range ( 0 , len2 ) :			      	int hash_str [ ] = new int [ no_of_chars ] ;		      int [ ] hashStr = new int [ noOfChars ] ;			  
	hash_pat [ ord ( pat [ i ] ) ] += 1		      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    start , start_index , min_len = 0 , - 1 , float ( 'inf' ) 	i < len2 ;						      i <= len2 ;						  
    count = 0						      	i ++ ) hash_pat [ pat . charAt ( i ) ] ++ ;		      i ++ ) {							  
    for j in range ( 0 , len1 ) :			      	int start = 0 , start_index = - 1 , min_len = Integer . MAX 	hashPat [ ( char ) pat . charAt ( i ) ] ++ ;		  
	hash_str [ ord ( string [ j ] ) ] += 1		      	int count = 0 ;						      }								  
	if ( hash_pat [ ord ( string [ j ] ) ] != 0 and hash_ 	for ( int j = 0 ;					      int start = 0 , startIndex = - 1 , minLen = Float . MAX_VAL 
	    count += 1					      	j < len1 ;						      int count = 0 ;						  
	if count == len2 :				      	j ++ ) {						      for ( int j = 0 ;						  
	    while ( hash_str [ ord ( string [ start ] ) ] > h 	  hash_str [ str . charAt ( j ) ] ++ ;			      j <= len1 ;						  
		if ( hash_str [ ord ( string [ start ] ) ] >  	  if ( hash_pat [ str . charAt ( j ) ] != 0 && hash_str [ s   j ++ ) {							  
		    hash_str [ ord ( string [ start ] ) ] -=  	  if ( count == len2 ) {				    	hashStr [ ( char ) string . charAt ( j ) ] ++ ;		  
		start += 1				      	    while ( hash_str [ str . charAt ( start ) ] > hash_pat  	if ( ( hashPat [ ( char ) string . charAt ( j ) ] != 0 )  
	    len_window = j - start + 1			      	      if ( hash_str [ str . charAt ( start ) ] > hash_pat [   }								  
	    if min_len > len_window :			      	      start ++ ;					      if ( count == len2 ) {					  
		min_len = len_window			      	    }							    	while ( ( hashStr [ ( char ) string . charAt ( start ) ]  
		start_index = start			      	    int len_window = j - start + 1 ;			    	  if ( ( hashStr [ ( char ) string . charAt ( start ) ] > 
    if start_index == - 1 :				      	    if ( min_len > len_window ) {			    	  start ++ ;						  
	print ( "No such window exists" )		      	      min_len = len_window ;				    	}							  
	return ""					      	      start_index = start ;				    	int lenWindow = j - start + 1 ;				  
    return string [ start_index : start_index + min_len ]     	    }							    	if ( minLen > lenWindow ) {				  
							      	  }							    	  minLen = lenWindow ;					  
							      	}							    	  startIndex = start ;					  
							      	if ( start_index == - 1 ) {				    	}							  
							      	  System . out . println ( "No such window exists" ) ;	      }								  
							      	  return "" ;						      if ( startIndex == - 1 ) {				  
							      	}							    	System . out . println ( "No such window exists" ) ;	  
							      	return str . substring ( start_index , start_index + min_le 	return "" ;						  
							      }								      }								  
							      								      return string . substring ( startIndex , startIndex + minLe 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_GEOMETRIC_PROGRESSION				      LONGEST_GEOMETRIC_PROGRESSION				    LONGEST_GEOMETRIC_PROGRESSION				  LONGEST_GEOMETRIC_PROGRESSION
--							      --							    --								  --
def lenOfLongestGP ( sett , n ) :			      static int lenOfLongestGP ( int set [ ] , int n ) {	    public static int lenOfLongestGP ( int [ ] sett , int n ) {	  script_not_found : None
    if n < 2 :						      	if ( n < 2 ) {						      if ( n < 2 ) return n ;					  
	return n					      	  return n ;						      if ( n == 2 ) return ( sett [ 1 ] % sett [ 0 ] == 0 ) ;	  
    if n == 2 :						      	}							      Arrays . sort ( sett ) ;					  
	return ( sett [ 1 ] % sett [ 0 ] == 0 )		      	if ( n == 2 ) {						      int [ ] [ ] L = new int [ n ] [ n ] ;			  
    sett.sort ( )					      	  return ( set [ 1 ] % set [ 0 ] == 0 ? 1 : 0 ) ;	      int llgp = 1 ;						  
    L = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]   	}							      for ( int i = 0 ;						  
    llgp = 1						      	Arrays . sort ( set ) ;					      i <= n ;							  
    for i in range ( 0 , n ) :				      	int L [ ] [ ] = new int [ n ] [ n ] ;			      i ++ ) {							  
	if sett [ n - 1 ] % sett [ i ] == 0 :		      	int llgp = 1 ;						    	if ( sett [ n - 1 ] % sett [ i ] == 0 ) L [ i ] [ n - 1 ] 
	    L [ i ] [ n - 1 ] = 2			      	for ( int i = 0 ;					    	else L [ i ] [ n - 1 ] = 1 ;				  
	else :						      	i < n ;							      }								  
	    L [ i ] [ n - 1 ] = 1			      	++ i ) {						      for ( int j = n - 2 ;					  
    for j in range ( n - 2 , 0 , - 1 ) :		      	  if ( set [ n - 1 ] % set [ i ] == 0 ) {		      j > 0 ;							  
	i = j - 1					      	    L [ i ] [ n - 1 ] = 2 ;				      j -- ) {							  
	k = j + 1					      	  }							    	int i = j - 1 ;						  
	while i >= 0 and k <= n - 1 :			      	  else {						    	int k = j + 1 ;						  
	    if sett [ i ] * sett [ k ] < sett [ j ] * sett [  	    L [ i ] [ n - 1 ] = 1 ;				    	while ( i >= 0 && k <= n - 1 ) {			  
		k += 1					      	  }							    	  if ( sett [ i ] * sett [ k ] < sett [ j ] * sett [ j ]  
	    elif sett [ i ] * sett [ k ] > sett [ j ] * sett  	}							    	  else if ( sett [ i ] * sett [ k ] > sett [ j ] * sett [ 
		if sett [ j ] % sett [ i ] == 0 :	      	for ( int j = n - 2 ;					    	    if ( sett [ j ] % sett [ i ] == 0 ) L [ i ] [ j ] = 2 
		    L [ i ] [ j ] = 2			      	j >= 1 ;						    	    else L [ i ] [ j ] = 1 ;				  
		else :					      	-- j ) {						    	    i -- ;						  
		    L [ i ] [ j ] = 1			      	  int i = j - 1 , k = j + 1 ;				    	  }							  
		i -= 1					      	  while ( i >= 0 && k <= n - 1 ) {			    	  else {						  
	    else :					      	    if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) {  	    L [ i ] [ j ] = L [ j ] [ k ] + 1 ;			  
		L [ i ] [ j ] = L [ j ] [ k ] + 1	      	      ++ k ;						    	    if ( L [ i ] [ j ] > llgp ) llgp = L [ i ] [ j ] ;	  
		if L [ i ] [ j ] > llgp :		      	    }							    	    i -- ;						  
		    llgp = L [ i ] [ j ]		      	    else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] 	    k ++ ;						  
		i -= 1					      	      if ( set [ j ] % set [ i ] == 0 ) {		    	  }							  
		k + 1					      		L [ i ] [ j ] = 2 ;				    	}							  
	while i >= 0 :					      	      }							      }								  
	    if sett [ j ] % sett [ i ] == 0 :		      	      else {						      while ( i >= 0 ) {					  
		L [ i ] [ j ] = 2			      		L [ i ] [ j ] = 1 ;				    	if ( sett [ j ] % sett [ i ] == 0 ) L [ i ] [ j ] = 2 ;	  
	    else :					      	      }							    	else L [ i ] [ j ] = 1 ;				  
		L [ i ] [ j ] = 1			      	      -- i ;						    	i -- ;							  
	    i -= 1					      	    }							      }								  
    return llgp						      	    else {						      return llgp ;						  
							      	      L [ i ] [ j ] = L [ j ] [ k ] + 1 ;		    }								  
							      	      if ( L [ i ] [ j ] > llgp ) {			    								  
							      		llgp = L [ i ] [ j ] ;				    								  
							      	      }							    								  
							      	      -- i ;						    								  
							      	      ++ k ;						    								  
							      	    }							    								  
							      	  }							    								  
							      	  while ( i >= 0 ) {					    								  
							      	    if ( set [ j ] % set [ i ] == 0 ) {			    								  
							      	      L [ i ] [ j ] = 2 ;				    								  
							      	    }							    								  
							      	    else {						    								  
							      	      L [ i ] [ j ] = 1 ;				    								  
							      	    }							    								  
							      	    -- i ;						    								  
							      	  }							    								  
							      	}							    								  
							      	return llgp ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS		      SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS			    SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS			  SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS
--							      --							    --								  --
def printSuperSeq ( a , b ) :				      static void printSuperSeq ( String a , String b ) {	    static String printSuperSeq ( String a , String b ) {	  script_not_found : None
    m = len ( a )					      	int m = a . length ( ) , n = b . length ( ) ;		      int m = a . length ( ) ;					  
    n = len ( b )					      	int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		      int n = b . length ( ) ;					  
    dp = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]	      	for ( int i = 0 ;					      int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		  
    for i in range ( 0 , m + 1 ) :			      	i <= m ;						      for ( int i = 0 ;						  
	for j in range ( 0 , n + 1 ) :			      	i ++ ) {						      i <= m ;							  
	    if not i :					      	  for ( int j = 0 ;					      i ++ ) {							  
		dp [ i ] [ j ] = j			      	  j <= n ;						    	for ( int j = 0 ;					  
	    elif not j :				      	  j ++ ) {						    	j <= n ;						  
		dp [ i ] [ j ] = i			      	    if ( i == 0 ) dp [ i ] [ j ] = j ;			    	j ++ ) {						  
	    elif ( a [ i - 1 ] == b [ j - 1 ] ) :	      	    else if ( j == 0 ) dp [ i ] [ j ] = i ;		    	  if ( i == 0 ) dp [ i ] [ j ] = j ;			  
		dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]   	    else if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 )  	  else if ( j == 0 ) dp [ i ] [ j ] = i ;		  
	    else :					      	    else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 	  else if ( ( a . charAt ( i - 1 ) == b . charAt ( j - 1  
		dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] 	  }							    	  else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 
    index = dp [ m ] [ n ]				      	}							    	}							  
    res = [ "" ] * ( index )				      	String res = "" ;					      }								  
    i = m						      	int i = m , j = n ;					      int index = dp [ m ] [ n ] ;				  
    j = n						      	while ( i > 0 && j > 0 ) {				      StringBuilder sb = new StringBuilder ( "" ) ;		  
    while ( i > 0 and j > 0 ) :				      	  if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {	      int i = m ;						  
	if ( a [ i - 1 ] == b [ j - 1 ] ) :		      	    res = a . charAt ( i - 1 ) + res ;			      int j = n ;						  
	    res [ index - 1 ] = a [ i - 1 ]		      	    i -- ;						      while ( ( i > 0 ) && ( j > 0 ) ) {			  
	    i -= 1					      	    j -- ;						    	if ( ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) ) { 
	    j -= 1					      	  }							    	  sb . setCharAt ( index - 1 , a . charAt ( i - 1 ) ) ;	  
	    index -= 1					      	  else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {	    	  i -- ;						  
	elif ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) :    	    res = a . charAt ( i - 1 ) + res ;			    	  j -- ;						  
	    res [ index - 1 ] = a [ i - 1 ]		      	    i -- ;						    	  index -- ;						  
	    i -= 1					      	  }							    	}							  
	    index -= 1					      	  else {						    	else if ( ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) ) { 
	else :						      	    res = b . charAt ( j - 1 ) + res ;			    	  sb . setCharAt ( index - 1 , a . charAt ( i - 1 ) ) ;	  
	    res [ index - 1 ] = b [ j - 1 ]		      	    j -- ;						    	  i -- ;						  
	    j -= 1					      	  }							    	  index -- ;						  
	    index -= 1					      	}							    	}							  
    while ( i > 0 ) :					      	while ( i > 0 ) {					    	else {							  
	res [ index - 1 ] = a [ i - 1 ]			      	  res = a . charAt ( i - 1 ) + res ;			    	  sb . setCharAt ( index - 1 , b . charAt ( j - 1 ) ) ;	  
	i -= 1						      	  i -- ;						    	  j -- ;						  
	index -= 1					      	}							    	  index -- ;						  
    while ( j > 0 ) :					      	while ( j > 0 ) {					    	}							  
	res [ index - 1 ] = b [ j - 1 ]			      	  res = b . charAt ( j - 1 ) + res ;			      }								  
	j -= 1						      	  j -- ;						      while ( ( i > 0 ) ) {					  
	index -= 1					      	}							    	sb . setCharAt ( index - 1 , a . charAt ( i - 1 ) ) ;	  
    print ( "".join ( res ) )				      	System . out . println ( res ) ;			    	i -- ;							  
							      }								    	index -- ;						  
							      								      }								  
							      								      while ( ( j > 0 ) ) {					  
							      								    	sb . setCharAt ( index - 1 , b . charAt ( j - 1 ) ) ;	  
							      								    	j -- ;							  
							      								    	index -- ;						  
							      								      }								  
							      								      return sb . toString ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING    DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING    DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING	  DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING
--							      --							    --								  --
def decode ( Str ) :					      static String decode ( String str ) {			    public static String decode ( String Str ) {		  script_not_found : None
    integerstack = [ ]					      	Stack < Integer > integerstack = new Stack < > ( ) ;	      Stack < Integer > integerstack = new Stack < > ( ) ;	  
    stringstack = [ ]					      	Stack < Character > stringstack = new Stack < > ( ) ;	      Stack < String > stringstack = new Stack < > ( ) ;	  
    temp = ""						      	String temp = "" , result = "" ;			      String temp = "" ;					  
    result = ""						      	for ( int i = 0 ;					      String result = "" ;					  
    for i in range ( len ( Str ) ) :			      	i < str . length ( ) ;					      for ( int i = 0 ;						  
	count = 0					      	i ++ ) {						      i < Str . length ( ) ;					  
	if ( Str [ i ] >= '0' and Str [ i ] <= '9' ) :	      	  int count = 0 ;					      i ++ ) {							  
	    while ( Str [ i ] >= '0' and Str [ i ] <= '9' ) : 	  if ( Character . isDigit ( str . charAt ( i ) ) ) {	    	int count = 0 ;						  
		count = count * 10 + ord ( Str [ i ] ) - ord  	    while ( Character . isDigit ( str . charAt ( i ) ) ) {  	if ( ( Str . charAt ( i ) >= '0' && Str . charAt ( i ) <= 
		i += 1					      	      count = count * 10 + str . charAt ( i ) - '0' ;	    	  while ( ( Str . charAt ( i ) >= '0' && Str . charAt ( i 
	    i -= 1					      	      i ++ ;						    	    count = count * 10 + Str . charAt ( i ) - '0' ;	  
	    integerstack.append ( count )		      	    }							    	    i ++ ;						  
	elif ( Str [ i ] == ']' ) :			      	    i -- ;						    	  }							  
	    temp = ""					      	    integerstack . push ( count ) ;			    	  i -- ;						  
	    count = 0					      	  }							    	  integerstack . push ( count ) ;			  
	    if ( len ( integerstack ) != 0 ) :		      	  else if ( str . charAt ( i ) == ']' ) {		    	}							  
		count = integerstack [ - 1 ]		      	    temp = "" ;						    	else if ( ( Str . charAt ( i ) == ']' ) ) {		  
		integerstack.pop ( )			      	    count = 0 ;						    	  temp = "" ;						  
	    while ( len ( stringstack ) != 0 and stringstack  	    if ( ! integerstack . isEmpty ( ) ) {		    	  count = 0 ;						  
		temp = stringstack [ - 1 ] + temp	      	      count = integerstack . peek ( ) ;			    	  if ( ( integerstack . size ( ) != 0 ) ) {		  
		stringstack.pop ( )			      	      integerstack . pop ( ) ;				    	    count = integerstack . peek ( ) ;			  
	    if ( len ( stringstack ) != 0 and stringstack [ - 	    }							    	    integerstack . pop ( ) ;				  
		stringstack.pop ( )			      	    while ( ! stringstack . isEmpty ( ) && stringstack . pe 	  }							  
	    for j in range ( count ) :			      	      temp = stringstack . peek ( ) + temp ;		    	  while ( ( stringstack . size ( ) != 0 ) && ( stringstac 
		result = result + temp			      	      stringstack . pop ( ) ;				    	    temp = stringstack . peek ( ) + temp ;		  
	    for j in range ( len ( result ) ) :		      	    }							    	    stringstack . pop ( ) ;				  
		stringstack.append ( result [ j ] )	      	    if ( ! stringstack . empty ( ) && stringstack . peek (  	  }							  
	    result = ""					      	    for ( int j = 0 ;					    	  if ( ( stringstack . size ( ) != 0 ) && ( stringstack . 
	elif ( Str [ i ] == '[' ) :			      	    j < count ;						    	    stringstack . pop ( ) ;				  
	    if ( Str [ i - 1 ] >= '0' and Str [ i - 1 ] <= '9 	    j ++ ) result = result + temp ;			    	  }							  
		stringstack.append ( Str [ i ] )	      	    for ( int j = 0 ;					    	  for ( int j = 0 ;					  
	    else :					      	    j < result . length ( ) ;				    	  j < count ;						  
		stringstack.append ( Str [ i ] )	      	    j ++ ) stringstack . push ( result . charAt ( j ) ) ;   	  j ++ ) {						  
		integerstack.append ( 1 )		      	    result = "" ;					    	    result = result + temp ;				  
	else :						      	  }							    	  }							  
	    stringstack.append ( Str [ i ] )		      	  else if ( str . charAt ( i ) == '[' ) {		    	  for ( int j = 0 ;					  
    while len ( stringstack ) != 0 :			      	    if ( Character . isDigit ( str . charAt ( i - 1 ) ) ) s 	  j < result . length ( ) ;				  
	result = stringstack [ - 1 ] + result		      	    else {						    	  j ++ ) {						  
	stringstack.pop ( )				      	      stringstack . push ( str . charAt ( i ) ) ;	    	    stringstack . push ( result . charAt ( j ) ) ;	  
    return result					      	      integerstack . push ( 1 ) ;			    	  }							  
							      	    }							    	  result = "" ;						  
							      	  }							    	}							  
							      	  else stringstack . push ( str . charAt ( i ) ) ;	    	else if ( ( Str . charAt ( i ) == '[' ) ) {		  
							      	}							    	  if ( ( Str . charAt ( i - 1 ) >= '0' && Str . charAt (  
							      	while ( ! stringstack . isEmpty ( ) ) {			    	    stringstack . push ( Str . charAt ( i ) ) ;		  
							      	  result = stringstack . peek ( ) + result ;		    	  }							  
							      	  stringstack . pop ( ) ;				    	  else {						  
							      	}							    	    stringstack . push ( Str . charAt ( i ) ) ;		  
							      	return result ;						    	    integerstack . push ( 1 ) ;				  
							      }								    	  }							  
							      								    	}							  
							      								    	else {							  
							      								    	  stringstack . push ( Str . charAt ( i ) ) ;		  
							      								    	}							  
							      								      }								  
							      								      while ( stringstack . size ( ) != 0 ) {			  
							      								    	result = stringstack . peek ( ) + result ;		  
							      								    	stringstack . pop ( ) ;					  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE		      NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE		    NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE		  NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE
--							      --							    --								  --
def numberofways ( A , B , N , M ) :			      static int numberofways ( String A , String B , int N , int M public static int numberofways ( String A , String B , int N  script_not_found : None
    pos = [ [ ] for _ in range ( MAX ) ]		      	Vector < Integer > [ ] pos = new Vector [ MAX ] ;	      int [ ] [ ] pos = new int [ MAX ] [ M ] ;			  
    for i in range ( M ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	pos [ ord ( B [ i ] ) ].append ( i + 1 )	      	i < MAX ;						      i < M ;							  
    dpl = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]      	i ++ ) pos [ i ] = new Vector < > ( ) ;			      i ++ ) {							  
    for i in range ( 1 , N + 1 ) :			      	for ( int i = 0 ;					    	pos [ ( int ) B . charAt ( i ) ] [ i + 1 ] = i ;	  
	for j in range ( 1 , M + 1 ) :			      	i < M ;							      }								  
	    if A [ i - 1 ] == B [ j - 1 ] :		      	i ++ ) pos [ B . charAt ( i ) ] . add ( i + 1 ) ;	      int [ ] [ ] dpl = new int [ N + 2 ] [ M + 2 ] ;		  
		dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 	int [ ] [ ] dpl = new int [ N + 2 ] [ M + 2 ] ;		      for ( int i = 1 ;						  
	    else :					      	for ( int i = 1 ;					      i <= N ;							  
		dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ] , 	i <= N ;						      i ++ ) {							  
    LCS = dpl [ N ] [ M ]				      	i ++ ) {						    	for ( int j = 1 ;					  
    dpr = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]      	  for ( int j = 1 ;					    	j <= M ;						  
    for i in range ( N , 0 , - 1 ) :			      	  j <= M ;						    	j ++ ) {						  
	for j in range ( M , 0 , - 1 ) :		      	  j ++ ) {						    	  if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) {	  
	    if A [ i - 1 ] == B [ j - 1 ] :		      	    if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpl 	    dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 ;	  
		dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 	    else dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] 	  }							  
	    else :					      	  }							    	  else {						  
		dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ] , 	}							    	    dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] ,  
    ans = 0						      	int LCS = dpl [ N ] [ M ] ;				    	  }							  
    for i in range ( N + 1 ) :				      	int [ ] [ ] dpr = new int [ N + 2 ] [ M + 2 ] ;		    	}							  
	for j in range ( MAX ) :			      	for ( int i = N ;					      }								  
	    for x in pos [ j ] :			      	i >= 1 ;						      int LCS = dpl [ N ] [ M ] ;				  
		if dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x +  	i -- ) {						      int [ ] [ ] dpr = new int [ N + 2 ] [ M + 2 ] ;		  
		    ans += 1				      	  for ( int j = M ;					      for ( int i = 0 ;						  
		    break				      	  j >= 1 ;						      i <= N ;							  
    return ans						      	  j -- ) {						      i ++ ) {							  
							      	    if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpr 	for ( int j = M ;					  
							      	    else dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ] 	j <= 0 ;						  
							      	  }							    	j ++ ) {						  
							      	}							    	  if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) {	  
							      	int ans = 0 ;						    	    dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 ;	  
							      	for ( int i = 0 ;					    	  }							  
							      	i <= N ;						    	  else {						  
							      	i ++ ) {						    	    dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ] ,  
							      	  for ( int j = 0 ;					    	  }							  
							      	  j < MAX ;						    	}							  
							      	  j ++ ) {						      }								  
							      	    for ( int x : pos [ j ] ) {				      int ans = 0 ;						  
							      	      if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] ==   for ( int i = 0 ;						  
							      		ans ++ ;					      i < N + 1 ;						  
							      		break ;						      i ++ ) {							  
							      	      }							    	for ( int j = 0 ;					  
							      	    }							    	j < MAX ;						  
							      	  }							    	j ++ ) {						  
							      	}							    	  for ( int x : pos [ j ] ) {				  
							      	return ans ;						    	    if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == 
							      }								    	      ans ++ ;						  
							      								    	      break ;						  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
