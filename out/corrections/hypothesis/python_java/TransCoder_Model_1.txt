========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
def areaSquare ( side ) :				      static int areaSquare ( int side ) {			    public static int areaSquare ( int side ) {			  success : None
    area = side * side					      	int area = side * side ;				      int area = side * side ;					  
    return area						      	return area ;						      return area ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
def fun ( n ) :						      static int fun ( int n ) {				    public static int fun ( int n ) {				  success : None
    return n & ( n - 1 )				      	return n & ( n - 1 ) ;					      return n & ( n - 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
def intersection ( n ) :				      static int intersection ( int n ) {			    public static int intersection ( int n ) {			  success : None
    return n * ( n - 1 )				      	return n * ( n - 1 ) ;					      return n * ( n - 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
def hexagonalNum ( n ) :				      int hexagonalNum ( int n ) {				    public static int hexagonalNum ( int n ) {			  success : None
    return n * ( 2 * n - 1 )				      	return n * ( 2 * n - 1 ) ;				      return n * ( 2 * n - 1 ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CASSINIS_IDENTITY					      CASSINIS_IDENTITY						    CASSINIS_IDENTITY						  CASSINIS_IDENTITY
--							      --							    --								  --
def cassini ( n ) :					      static int cassini ( int n ) {				    public static int cassini ( int n ) {			  failure : #Results:4, 10
    return - 1 if ( n & 1 ) else 1			      	return ( n & 1 ) != 0 ? - 1 : 1 ;			      return - 1 == ( n & 1 ) ? 1 : - 1 ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
def addOne ( x ) :					      static int addOne ( int x ) {				    public static int addOne ( int x ) {			  success : None
    return ( - ( ~ x ) )				      	return ( - ( ~ x ) ) ;					      return ( - ( ~ x ) ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_HALVES_SORTED				      SORT_ARRAY_TWO_HALVES_SORTED				    SORT_ARRAY_TWO_HALVES_SORTED				  SORT_ARRAY_TWO_HALVES_SORTED
--							      --							    --								  --
def mergeTwoHalf ( A , n ) :				      static void mergeTwoHalf ( int [ ] A , int n ) {		    public static void mergeTwoHalf ( int [ ] A , int n ) {	  error : SORT_ARRAY_TWO_HALVES_SORTED.java:19: erro
    A.sort ( )						      	Arrays . sort ( A ) ;					      mergeTwoHalf ( A , 0 , n ) ;				  r: method f_filled in class SORT_ARRAY_TWO_HALVES_
							      }								    }								  SORTED cannot be applied to given types;   f_fille
							      								    								  d ( A , 0 , n ) ;   ^	  required: int[],int	foun
							      								    								  d: int[],int,int   reason: actual and formal argum
							      								    								  ent lists differ in length 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUMSCRIBED_CIRCLE			      AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				    AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				  AREA_SQUARE_CIRCUMSCRIBED_CIRCLE
--							      --							    --								  --
def find_Area ( r ) :					      static int find_Area ( int r ) {				    public static int findArea ( int r ) {			  success : None
    return ( 2 * r * r )				      	return ( 2 * r * r ) ;					      return ( 2 * r * r ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
def check ( n ) :					      static boolean check ( int n ) {				    public static boolean check ( int n ) {			  success : None
    return 1162261467 % n == 0				      	return 1162261467 % n == 0 ;				      return 1162261467 % n == 0 ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
def isEven ( n ) :					      public static boolean isEven ( int n ) {			    public static boolean isEven ( int n ) {			  success : identical to gold
    return ( n % 2 == 0 )				      	return ( n % 2 == 0 ) ;					      return ( n % 2 == 0 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
def pentagonalNum ( n ) :				      int pentagonalNum ( int n ) {				    public static int pentagonalNum ( int n ) {			  success : None
    return ( 3 * n * n - n ) / 2			      	return ( 3 * n * n - n ) / 2 ;				      return ( 3 * n * n - n ) / 2 ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
def circumference ( r ) :				      static double circumference ( double r ) {		    public static double circumference ( double r ) {		  error : PROGRAM_FIND_CIRCUMFERENCE_CIRCLE.java:21:
    return ( 2 * PI * r )				      	double PI = 3.1415 ;					      return ( 2 * PI * r ) ;					   error: cannot find symbol   return ( 2 * PI * r )
							      	double cir = 2 * PI * r ;				    }								   ;		    ^	symbol:	  variable PI	loca
							      	return cir ;						    								  tion: class PROGRAM_FIND_CIRCUMFERENCE_CIRCLE 1 er
							      }								    								  ror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
def numberOfSticks ( x ) :				      public static int numberOfSticks ( int x ) {		    public static int numberOfSticks ( int x ) {		  success : identical to gold
    return ( 3 * x * ( x + 1 ) ) / 2			      	return ( 3 * x * ( x + 1 ) ) / 2 ;			      return ( 3 * x * ( x + 1 ) ) / 2 ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def binomialCoeffSum ( n ) :				      static int binomialCoeffSum ( int n ) {			    public static double binomialCoeffSum ( int n ) {		  success : None
    return ( 1 << n )					      	return ( 1 << n ) ;					      return ( 1 << n ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
def largest ( arr , n ) :				      static int largest ( int [ ] arr , int n ) {		    public static int largest ( int [ ] arr , int n ) {		  error : C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1.jav
    return max ( arr )					      	Arrays . sort ( arr ) ;					      return Collections . max ( arr , new Comparator < int > ( ) a:20: error: unexpected type	 return Collections
							      	return arr [ n - 1 ] ;					    	@ Override public int compare ( int o1 , int o2 ) {	  . max ( arr , new Comparator < int > ( ) {
							      }								    	  return o2 - o1 ;					  					       ^   r
							      								    	}							  equired: reference   found:	 int C_PROGRAM_FIND_
							      								      }								  LARGEST_ELEMENT_ARRAY_1.java:20: error: no suitabl
							      								      ) ;							  e method found for max(int[],<anonymous Comparator
							      								    }								  <<any>>>)   return Collections . max ( arr , new C
							      								    								  omparator < int > ( ) {		       ^
							      								    								   method Collections.<T#1>max(Collection<? extends
							      								    								  T#1>) is not applicable	(cannot infer type-v
							      								    								  ariable(s) T#1	 (actual and formal argument
							      								    								   lists differ in length))	method Collections.<
							      								    								  T#2>max(Collection<? extends T#2>,Comparator<? sup
							      								    								  er T#2>) is not applicable	   (cannot infer typ
							      								    								  e-variable(s) T#2	    (argument mismatch; int[
							      								    								  ] cannot be converted to Collection<? extends T#2>
							      								    								  ))   where T#1,T#2 are type-variables:     T#1 ext
							      								    								  ends Object,Comparable<? super T#1> declared in me
							      								    								  thod <T#1>max(Collection<? extends T#1>)     T#2 e
							      								    								  xtends Object declared in method <T#2>max(Collecti
							      								    								  on<? extends T#2>,Comparator<? super T#2>) 2 error
							      								    								  s
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
def Circumference ( a ) :				      int Circumference ( int a ) {				    public static Circumference of ( int a ) {			  error : PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENC
    return ( 4 * a )					      	return 4 * a ;						      return ( 4 * a ) ;					  E_SQUARE_RECTANGLE.java:18: error: cannot find sym
							      }								    }								  bol public static Circumference f_filled ( int a )
							      								    								   {		   ^   symbol:	 class Circumference
							      								    								     location: class PYTHON_PROGRAM_FIND_PERIMETER_C
							      								    								  IRCUMFERENCE_SQUARE_RECTANGLE 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
def rangeGCD ( n , m ) :				      static int rangeGCD ( int n , int m ) {			    static int rangeGCD ( int n , int m ) {			  failure : #Results:0, 10
    return n if ( n == m ) else 1			      	return ( n == m ) ? n : 1 ;				      return n == 0 ? ( n == m ? 1 : 0 ) : n >>> m ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
def power ( n ) :					      static int power ( int n ) {				    public static int power ( int n ) {				  success : None
    if n == 1 :						      	if ( n == 1 ) return 2 ;				      if ( n == 1 ) return 2 ;					  
	return 2					      	return 2 * power ( n - 1 ) ;				      return 2 * power ( n - 1 ) ;				  
    return 2 * power ( n - 1 )				      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
def compute_average ( a , b ) :				      static int compute_average ( int a , int b ) {		    public static double computeAverage ( double a , double b ) { success : None
    return floor ( ( a + b ) / 2 )			      	return ( a + b ) / 2 ;					      return Math . floor ( ( a + b ) / 2 ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
def summingSeries ( n ) :				      static int summingSeries ( long n ) {			    public static double summingSeries ( double n ) {		  success : None
    return math.pow ( n , 2 )				      	return ( int ) Math . pow ( n , 2 ) ;			      return Math . pow ( n , 2 ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_AN_INTEGER_WITH_3_5				      MULTIPLY_AN_INTEGER_WITH_3_5				    MULTIPLY_AN_INTEGER_WITH_3_5				  MULTIPLY_AN_INTEGER_WITH_3_5
--							      --							    --								  --
def multiplyWith3Point5 ( x ) :				      static int multiplyWith3Point5 ( int x ) {		    public static int multiplyWith3Point5 ( int x ) {		  success : None
    return ( x << 1 ) + x + ( x >> 1 )			      	return ( x << 1 ) + x + ( x >> 1 ) ;			      return ( x << 1 ) + x + ( x >>> 1 ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
def isEven ( n ) :					      public static boolean isEven ( int n ) {			    public static boolean isEven ( int n ) {			  error : CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1.java
    return ( not ( n & 1 ) )				      	if ( ( n & 1 ) == 0 ) return true ;			      return ( ! ( n & 1 ) ) ;					  :20: error: bad operand type int for unary operato
							      	else return false ;					    }								  r '!'	  return ( ! ( n & 1 ) ) ;	      ^ 1 er
							      }								    								  ror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  error : C_PROGRAM_FACTORIAL_NUMBER.java:20: error:
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if ( n == 0 ) return 1 ;				      return 1 == ( n == 1 || n == 0 ) ? n : n * factorial ( n -   incomparable types: int and boolean	 return 1 ==
							      	return n * factorial ( n - 1 ) ;			    }								   ( n == 1 || n == 0 ) ? n : n * f_filled ( n - 1 )
							      }								    								   ;		^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
def slope ( x1 , y1 , x2 , y2 ) :			      static float slope ( float x1 , float y1 , float x2 , float y public static float slope ( int x1 , int y1 , int x2 , int y2 error : PROGRAM_FIND_SLOPE_LINE.java:71: error: in
    return ( float ) ( y2 - y1 ) / ( x2 - x1 )		      	return ( y2 - y1 ) / ( x2 - x1 ) ;			      return ( float ) ( y2 - y1 ) / ( x2 - x1 ) ;		  compatible types: Float cannot be converted to int
							      }								    }								  	   if(Math.abs(1 - (0.0000001 + Math.abs(f_g
							      								    								  old(param0.get(i),param1.get(i),param2.get(i),para
							      								    								  m3.get(i))) )/ (Math.abs(f_filled(param0.get(i),pa
							      								    								  ram1.get(i),param2.get(i),param3.get(i))) + 0.0000
							      								    								  001)) < 0.001F)
							      								    								  
							      								    								  
							      								    								  	   ^ Note: Some messages have been simplifie
							      								    								  d; recompile with -Xdiags:verbose to get full outp
							      								    								  ut 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
def getModulo ( n , d ) :				      static int getModulo ( int n , int d ) {			    public static int getModulo ( int n , int d ) {		  success : None
    return ( n & ( d - 1 ) )				      	return ( n & ( d - 1 ) ) ;				      return ( n & ( d - 1 ) ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
def oppositeSigns ( x , y ) :				      static boolean oppositeSigns ( int x , int y ) {		    public static boolean oppositeSigns ( int x , int y ) {	  success : None
    return ( ( x ^ y ) < 0 )				      	return ( ( x ^ y ) < 0 ) ;				      return ( ( x ^ y ) < 0 ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
def height ( N ) :					      static int height ( int N ) {				    public static int height ( int N ) {			  error : HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES.j
    return math.ceil ( math.log2 ( N + 1 ) ) - 1	      	return ( int ) Math . ceil ( Math . log ( N + 1 ) / Math .    return Math . ceil ( Math . log2 ( N + 1 ) ) - 1 ;	  ava:19: error: cannot find symbol   return Math .
							      }								    }								  ceil ( Math . log2 ( N + 1 ) ) - 1 ;
							      								    								  		 ^   symbol:   method log2(int)	  lo
							      								    								  cation: class Math 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
def swapNibbles ( x ) :					      static int swapNibbles ( int x ) {			    public static int swapNibbles ( int x ) {			  success : None
    return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	      	return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	      return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >>> 4 ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  error : PROGRAM_FOR_FACTORIAL_OF_A_NUMBER.java:20:
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if ( n == 0 ) return 1 ;				      return 1 == ( n == 1 || n == 0 ) ? n : n * factorial ( n -   error: incomparable types: int and boolean	retu
							      	return n * factorial ( n - 1 ) ;			    }								  rn 1 == ( n == 1 || n == 0 ) ? n : n * f_filled (
							      }								    								  n - 1 ) ;	       ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
def countNonEmptySubstr ( str ) :			      static int countNonEmptySubstr ( String str ) {		    public static int countNonEmptySubstr ( String str ) {	  success : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    return int ( n * ( n + 1 ) / 2 )			      	return n * ( n + 1 ) / 2 ;				      return ( int ) ( n * ( n + 1 ) / 2 ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
def nthTerm ( n ) :					      public static int nthTerm ( int n ) {			    public static long nthTerm ( long n ) {			  success : None
    return ( n * n ) + ( n * n * n )			      	return ( n * n ) + ( n * n * n ) ;			      return ( n * n ) + ( n * n * n ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
def getRemainder ( num , divisor ) :			      static int getRemainder ( int num , int divisor ) {	    static long getRemainder ( long num , long divisor ) {	  success : None
    return ( num - divisor * ( num // divisor ) )	      	return ( num - divisor * ( num / divisor ) ) ;		      return ( num - divisor * ( num / divisor ) ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			      PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES
--							      --							    --								  --
def findMaximumPieces ( n ) :				      static int findMaximumPieces ( int n ) {			    public static int findMaximumPieces ( int n ) {		  success : None
    return int ( 1 + n * ( n + 1 ) / 2 )		      	return 1 + n * ( n + 1 ) / 2 ;				      return ( int ) ( 1 + n * ( n + 1 ) / 2 ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE				      LONGEST_INCREASING_SUBSEQUENCE				    LONGEST_INCREASING_SUBSEQUENCE				  LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr ) :					      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int [ ] arr ) {			  script_not_found : None
    global maximum					      	max_ref = 1 ;						      maximum = 0 ;						  
    n = len ( arr )					      	_lis ( arr , n ) ;					      int n = arr . length ;					  
    maximum = 1						      	return max_ref ;					      maximum = 1 ;						  
    _lis ( arr , n )					      }								      _lis ( arr , n ) ;					  
    return maximum					      								      return maximum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
def gcd ( a , b ) :					      public static int gcd ( int a , int b ) {			    public static long gcd ( long a , long b ) {		  success : None
    if a == 0 :						      	if ( a == 0 ) return b ;				      if ( a == 0 ) return b ;					  
	return b					      	return gcd ( b % a , a ) ;				      return gcd ( b % a , a ) ;				  
    return gcd ( b % a , a )				      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
def rectCount ( n , m ) :				      public static long rectCount ( int n , int m ) {		    static int rectCount ( int n , int m ) {			  success : None
    return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4	      	return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		      return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
def evenbinomialCoeffSum ( n ) :			      static int evenbinomialCoeffSum ( int n ) {		    public static int evenbinomialCoeffSum ( int n ) {		  success : None
    return ( 1 << ( n - 1 ) )				      	return ( 1 << ( n - 1 ) ) ;				      return ( 1 << ( n - 1 ) ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS_1				      BREAK_NUMBER_THREE_PARTS_1				    BREAK_NUMBER_THREE_PARTS_1					  BREAK_NUMBER_THREE_PARTS_1
--							      --							    --								  --
def count_of_ways ( n ) :				      static long count_of_ways ( long n ) {			    public static int countOfWays ( int n ) {			  error : BREAK_NUMBER_THREE_PARTS_1.java:42: error:
    count = 0						      	long count = 0 ;					      int count ;						   incompatible types: Long cannot be converted to i
    count = ( n + 1 ) * ( n + 2 ) // 2			      	count = ( n + 1 ) * ( n + 2 ) / 2 ;			      count = ( n + 1 ) * ( n + 2 ) / 2 ;			  nt	     if(f_filled(param0.get(i)) == f_gold(pa
    return count					      	return count ;						      return count ;						  ram0.get(i)))				      ^ Note
							      }								    }								  : Some messages have been simplified; recompile wi
							      								    								  th -Xdiags:verbose to get full output 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10
--							      --							    --								  --
def isMultipleOf10 ( n ) :				      static boolean isMultipleOf10 ( int n ) {			    public static boolean isMultipleOf10 ( int n ) {		  success : None
    return ( n % 15 == 0 )				      	if ( n % 15 == 0 ) return true ;			      return ( n % 15 == 0 ) ;					  
							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
def areaOctagon ( side ) :				      static double areaOctagon ( double side ) {		    public static double areaOctagon ( double side ) {		  success : None
    return ( 2 * ( 1 + ( math.sqrt ( 2 ) ) ) * side * side )  	return ( float ) ( 2 * ( 1 + Math . sqrt ( 2 ) ) * side * s   return ( 2 * ( 1 + ( Math . sqrt ( 2 ) ) ) * side * side )  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
    return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24     	return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	      return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
def reverse ( string ) :				      static void reverse ( char str [ ] ) {			    public static String reverse ( String string ) {		  script_not_found : None
    string = string [ : : - 1 ]				      	int n = str . length , i ;				      string = string . substring ( 0 , string . length ( ) - 1 ) 
    return string					      	for ( i = 0 ;						      return string ;						  
							      	i < n / 2 ;						    }								  
							      	i ++ ) {						    								  
							      	  swap ( str , i , n - i - 1 ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
def sortit ( arr , n ) :				      static void sortit ( int [ ] arr , int n ) {		    public static void sortit ( int [ ] arr , int n ) {		  success : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	arr [ i ] = i + 1				      	i < n ;							      i < n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  arr [ i ] = i + 1 ;					    	arr [ i ] = i + 1 ;					  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
def factorial ( n ) :					      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  error : PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1.java:2
    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	int res = 1 , i ;					      return 1 == ( n == 1 || n == 0 ) ? n : n * factorial ( n -  3: error: incomparable types: int and boolean	  re
							      	for ( i = 2 ;						    }								  turn 1 == ( n == 1 || n == 0 ) ? n : n * f_filled
							      	i <= n ;						    								  ( n - 1 ) ;		 ^ 1 error
							      	i ++ ) res *= i ;					    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
def surface_area_octahedron ( side ) :			      static double surface_area_octahedron ( double side ) {	    public static double surfaceAreaOctahedron ( double side ) {  success : None
    return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )      	return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;      return ( 2 * ( Math . sqrt ( 3 ) ) ) * ( side * side ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
def Resources ( process , need ) :			      static int Resources ( int process , int need ) {		    public static int Resources ( int process , int need ) {	  success : None
    minResources = 0					      	int minResources = 0 ;					      int minResources ;					  
    minResources = process * ( need - 1 ) + 1		      	minResources = process * ( need - 1 ) + 1 ;		      minResources = process * ( need - 1 ) + 1 ;		  
    return minResources					      	return minResources ;					      return minResources ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
def volumeOfEllipsoid ( r1 , r2 , r3 ) :		      public static float volumeOfEllipsoid ( float r1 , float r2 , public static double volumeOfEllipsoid ( double r1 , double r success : None
    return 1.33 * math.pi * r1 * r2 * r3		      	float pi = ( float ) 3.14 ;				      return 1.33 * Math . PI * r1 * r2 * r3 ;			  
							      	return ( float ) 1.33 * pi * r1 * r2 * r3 ;		    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
def procal ( n ) :					      static double procal ( int n ) {				    public static double procal ( double n ) {			  success : None
    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )	      	return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		      return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
def vol_of_octahedron ( side ) :			      static double vol_of_octahedron ( double side ) {		    public static double volOfOctahedron ( double side ) {	  success : None
    return ( ( side * side * side ) * ( math.sqrt ( 2 ) / 3 ) 	return ( ( side * side * side ) * ( Math . sqrt ( 2 ) / 3 )   return ( ( side * side * side ) * ( Math . sqrt ( 2 ) / 3 ) 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
def countSetBits ( n ) :				      static int countSetBits ( int n ) {			    static int countSetBits ( long n ) {			  failure : #Results:0, 10
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    while ( n ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) && ( n & ( n - 1 ) ) != 0 ) {		  
	n &= ( n - 1 )					      	  n &= ( n - 1 ) ;					    	n &= ( n - 1 ) ;					  
	count += 1					      	  count ++ ;						    	count ++ ;						  
    return count					      	}							      }								  
							      	return count ;						      return count ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
def calculateSum ( n ) :				      static long calculateSum ( int n ) {			    public static int calculateSum ( int n ) {			  success : None
    sum = 0						      	long sum = 0 ;						      int sum ;							  
    sum = 1 << n					      	sum = 1 << n ;						      sum = 1 << n ;						  
    return ( sum - 1 )					      	return ( sum - 1 ) ;					      return ( sum - 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
def isPowerOfTwo ( x ) :				      static boolean isPowerOfTwo ( int x ) {			    public static boolean isPowerOfTwo ( int x ) {		  error : WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_
    return ( x and ( not ( x & ( x - 1 ) ) ) )		      	return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;		      return ( x > 0 ) && ( ! ( x & ( x - 1 ) ) ) ;		  A_NO_IS_POWER_OF_TWO_1.java:19: error: bad operand
							      }								    }								   type int for unary operator '!'   return ( x > 0
							      								    								  ) && ( ! ( x & ( x - 1 ) ) ) ;
							      								    								       ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
def assignValue ( a , b , x ) :				      static int assignValue ( int a , int b , int x ) {	    public static int assignValue ( int a , int b , int x ) {	  script_not_found : None
    arr = [ a , b ]					      	int arr [ ] = {						      int [ ] arr = {						  
    return ( arr [ x ] )				      	  a , b }						    	a , b }							  
							      	  ;							    	;							  
							      	  return ( arr [ x ] ) ;				    	return ( arr [ x ] ) ;					  
							      	}							      }								  
-							      	-							      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
def kthSmallest ( arr , n , k ) :			      public static int kthSmallest ( Integer [ ] arr , int k ) {   public static int kthSmallest ( int [ ] arr , int n , int k ) script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    return arr [ k - 1 ]				      	return arr [ k - 1 ] ;					      return arr [ k - 1 ] ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE      DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
def lis ( arr ) :					      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int [ ] arr ) {			  script_not_found : None
    global maximum					      	max_ref = 1 ;						      maximum = 0 ;						  
    n = len ( arr )					      	_lis ( arr , n ) ;					      int n = arr . length ;					  
    maximum = 1						      	return max_ref ;					      maximum = 1 ;						  
    _lis ( arr , n )					      }								      _lis ( arr , n ) ;					  
    return maximum					      								      return maximum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
def sumOfSeries ( n ) :					      static double sumOfSeries ( int n ) {			    public static double sumOfSeries ( int n ) {		  success : None
    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) )	      	return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;	      return ( ( double ) 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
def countSetBits ( n ) :				      public static int countSetBits ( int n ) {		    static int countSetBits ( int n ) {				  success : None
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) || ( n == 1 ) ) return 0 ;		  
	return 0					      	else return 1 + countSetBits ( n & ( n - 1 ) ) ;	      else return 1 + countSetBits ( n & ( n - 1 ) ) ;		  
    else :						      }								    }								  
	return 1 + countSetBits ( n & ( n - 1 ) )	      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
def repeat ( s , n ) :					      static String repeat ( String s , int n ) {		    public static String repeat ( String s , int n ) {		  success : None
    s1 = s						      	String s1 = s ;						      String s1 = s ;						  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	s += s1						      	i < n ;							      i < n ;							  
    return s						      	i ++ ) s += s1 ;					      i ++ ) {							  
							      	return s ;						    	s += s1 ;						  
							      }								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
def countSetBits ( n ) :				      public static int countSetBits ( int n ) {		    public static int countSetBits ( int n ) {			  failure : #Results:0, 10
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) || ( n == 1 ) ) {				  
	return 0					      	else return ( n & 1 ) + countSetBits ( n >> 1 ) ;	    	return 0 ;						  
    else :						      }								      }								  
	return ( n & 1 ) + countSetBits ( n >> 1 )	      								      else {							  
							      								    	return ( n & 1 ) + countSetBits ( n >> 1 ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
def bin ( n ) :						      static void bin ( Integer n ) {				    public static void bin ( int n ) {				  script_not_found : None
    if ( n > 1 ) :					      	if ( n > 1 ) bin ( n >> 1 ) ;				      if ( ( n > 1 ) && ( n < 2 ) ) bin ( n >>> 1 ) ;		  
	bin ( n >> 1 )					      	System . out . printf ( "%d" , n & 1 ) ;		      System . out . print ( n & 1 + " " ) ;			  
    print ( n & 1 , end = "" )				      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
def printSubStr ( st , low , high ) :			      static void printSubStr ( String str , int low , int high ) { public static String printSubStr ( String st , int low , int  script_not_found : None
    sys.stdout.write ( st [ low : high + 1 ] )		      	System . out . println ( str . substring ( low , high + 1 )   System . out . print ( st . substring ( low , high + 1 ) )  
    sys.stdout.flush ( )				      }								      System . out . flush ( ) ;				  
    return ''						      								      return "" ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING      COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
def getAbs ( n ) :					      static int getAbs ( int n ) {				    static long getAbs ( long n ) {				  script_not_found : None
    mask = n >> ( SIZE_INT * CHARBIT - 1 )		      	int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;		      long mask = n >>> ( SIZE_INT * CHARBIT - 1 ) ;		  
    return ( ( n + mask ) ^ mask )			      	return ( ( n + mask ) ^ mask ) ;			      return ( ( n + mask ) ^ mask ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
def maxSquare ( b , m ) :				      static int maxSquare ( int b , int m ) {			    static int maxSquare ( int b , int m ) {			  success : identical to gold
    return ( b / m - 1 ) * ( b / m ) / 2		      	return ( b / m - 1 ) * ( b / m ) / 2 ;			      return ( b / m - 1 ) * ( b / m ) / 2 ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I
--							      --							    --								  --
def getArea ( a ) :					      static float getArea ( int a ) {				    public static double getArea ( double a ) {			  success : None
    area = ( math.pi * a * a ) / 4			      	float area = ( float ) ( Math . PI * a * a ) / 4 ;	      double area = ( Math . PI * a * a ) / 4 ;			  
    return area						      	return area ;						      return area ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
def minSum ( A ) :					      static int minSum ( int [ ] A , int n ) {			    public static int minSum ( int [ ] A ) {			  error : MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY.j
    min_val = min ( A ) ;				      	int min_val = Arrays . stream ( A ) . min ( ) . getAsInt (    int minVal = Math . min ( A ) ;				  ava:20: error: no suitable method found for min(in
    return min_val * ( len ( A ) - 1 )			      	return ( min_val * ( n - 1 ) ) ;			      ;								  t[])	 int minVal = Math . min ( A ) ;
							      }								      return minVal * ( A . length - 1 ) ;			  	   ^	 method Math.min(int,int) is not app
							      								    }								  licable	(actual and formal argument lists di
							      								    								  ffer in length)     method Math.min(long,long) is
							      								    								  not applicable       (actual and formal argument l
							      								    								  ists differ in length)     method Math.min(float,f
							      								    								  loat) is not applicable	(actual and formal a
							      								    								  rgument lists differ in length)     method Math.mi
							      								    								  n(double,double) is not applicable	   (actual a
							      								    								  nd formal argument lists differ in length) MINIMUM
							      								    								  _SUM_CHOOSING_MINIMUM_PAIRS_ARRAY.java:52: error:
							      								    								  method f_filled in class MINIMUM_SUM_CHOOSING_MINI
							      								    								  MUM_PAIRS_ARRAY cannot be applied to given types;
							      								    								  	  if(f_filled(param0.get(i),param1.get(i)) =
							      								    								  = f_gold(param0.get(i),param1.get(i)))
							      								    								  ^   required: int[]	found: int[],Integer   reaso
							      								    								  n: actual and formal argument lists differ in leng
							      								    								  th 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
def countStr ( n ) :					      static int countStr ( int n ) {				    public static int countStr ( int n ) {			  success : None
    return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) // 2 ) ) 	return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;	      return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ) ;  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		  HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
def turnOffK ( n , k ) :				      static int turnOffK ( int n , int k ) {			    public static int turnOffK ( int n , int k ) {		  failure : #Results:9, 10
    if ( k <= 0 ) :					      	if ( k <= 0 ) return n ;				      if ( ( k <= 0 ) || ( k > n ) ) return n ;			  
	return n					      	return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			      return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			  
    return ( n & ~ ( 1 << ( k - 1 ) ) )			      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
def yMod ( y , x ) :					      static long yMod ( long y , long x ) {			    public static double yMod ( double y , double x ) {		  success : None
    return ( y % pow ( 2 , x ) )			      	if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y   return ( y % Math . pow ( 2 , x ) ) ;			  
							      	if ( x > 63 ) return y ;				    }								  
							      	return ( y % ( 1 << ( int ) x ) ) ;			    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
def search ( arr , n , x ) :				      public static int search ( int arr [ ] , int x ) {	    public static int search ( int [ ] arr , int n , int x ) {	  script_not_found : None
    for i in range ( 0 , n ) :				      	int n = arr . length ;					      for ( int i = 0 ;						  
	if ( arr [ i ] == x ) :				      	for ( int i = 0 ;					      i <= n ;							  
	    return i					      	i < n ;							      i ++ ) {							  
    return - 1						      	i ++ ) {						    	if ( ( arr [ i ] == x ) && ( arr [ i + 1 ] == x ) ) {	  
							      	  if ( arr [ i ] == x ) return i ;			    	  return i ;						  
							      	}							    	}							  
							      	return - 1 ;						      }								  
							      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES
--							      --							    --								  --
def fib ( n ) :						      static int fib ( int n ) {				    static int fib ( int n ) {					  script_not_found : None
    if ( n <= 1 ) :					      	if ( n <= 1 ) return n ;				      if ( ( n <= 1 ) || ( n > 2 ) ) return n ;			  
	return n					      	return fib ( n - 1 ) + fib ( n - 2 ) ;			      return fib ( n - 1 ) + fib ( n - 2 ) ;			  
    return fib ( n - 1 ) + fib ( n - 2 )		      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
def maxTripletSum ( arr , n ) :				      static int maxTripletSum ( int arr [ ] , int n ) {	    public static int maxTripletSum ( int [ ] arr , int n ) {	  success : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] )  	return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;	      return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ) ;  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
def isNumber ( s ) :					      static boolean isNumber ( String s ) {			    public static boolean isNumber ( String s ) {		  failure : #Results:4, 10
    for i in range ( len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if s [ i ].isdigit ( ) != True :		      	i < s . length ( ) ;					      i < s . length ( ) ;					  
	    return False				      	i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == fal   i ++ ) {							  
    return True						      	return true ;						    	if ( s . charAt ( i ) != ' ' ) {			  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
def divisorSum ( n ) :					      static int divisorSum ( int n ) {				    public static int divisorSum ( int n ) {			  success : None
    sum = 0						      	int sum = 0 ;						      long sum = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	sum += int ( n / i ) * i			      	i <= n ;						      i <= n ;							  
    return int ( sum )					      	++ i ) sum += ( n / i ) * i ;				      i ++ ) {							  
							      	return sum ;						    	sum += ( int ) ( n / i ) * i ;				  
							      }								      }								  
							      								      return ( int ) sum ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
def addOne ( x ) :					      static int addOne ( int x ) {				    public static int addOne ( int x ) {			  success : None
    m = 1						      	int m = 1 ;						      int m = 1 ;						  
    while ( x & m ) :					      	while ( ( int ) ( x & m ) >= 1 ) {			      while ( ( x & m ) != 0 ) {				  
	x = x ^ m					      	  x = x ^ m ;						    	x = x ^ m ;						  
	m <<= 1						      	  m <<= 1 ;						    	m <<= 1 ;						  
    x = x ^ m						      	}							      }								  
    return x						      	x = x ^ m ;						      x = x ^ m ;						  
							      	return x ;						      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
def findRepeating ( arr , n ) :				      static int findRepeating ( int [ ] arr , int n ) {	    public static int findRepeating ( int [ ] arr , int n ) {	  error : FIND_REPETITIVE_ELEMENT_1_N_1.java:23: err
    return sum ( arr ) - ( ( ( n - 1 ) * n ) // 2 )	      	int sum = 0 ;						      return Arrays . binarySearch ( arr , 0 , n ) - ( ( ( n - 1  or: no suitable method found for binarySearch(int[
							      	for ( int i = 0 ;					    }								  ],int,int)   return Arrays . binarySearch ( arr ,
							      	i < n ;							    								  0 , n ) - ( ( ( n - 1 ) * n ) / 2 ) ;
							      	i ++ ) sum += arr [ i ] ;				    								      ^	    method Arrays.<T#1>binarySearch(T#1[],T#
							      	return sum - ( ( ( n - 1 ) * n ) / 2 ) ;		    								  1,Comparator<? super T#1>) is not applicable
							      }								    								   (cannot infer type-variable(s) T#1	      (argum
							      								    								  ent mismatch; int cannot be converted to Comparato
							      								    								  r<? super T#1>))     method Arrays.<T#2>binarySear
							      								    								  ch(T#2[],int,int,T#2,Comparator<? super T#2>) is n
							      								    								  ot applicable	      (cannot infer type-variable(s)
							      								    								   T#2	       (actual and formal argument lists dif
							      								    								  fer in length))   where T#1,T#2 are type-variables
							      								    								  :	T#1 extends Object declared in method <T#1>b
							      								    								  inarySearch(T#1[],T#1,Comparator<? super T#1>)
							      								    								   T#2 extends Object declared in method <T#2>binary
							      								    								  Search(T#2[],int,int,T#2,Comparator<? super T#2>)
							      								    								  Note: Some messages have been simplified; recompil
							      								    								  e with -Xdiags:verbose to get full output 1 error
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
def findSum ( N , K ) :					      static int findSum ( int N , int K ) {			    public static int findSum ( int N , int K ) {		  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for i in range ( 1 , N + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	ans += ( i % K )				      	i <= N ;						      i <= N ;							  
    return ans						      	i ++ ) ans += ( i % K ) ;				      i ++ ) {							  
							      	return ans ;						    	ans += ( i % K ) ;					  
							      }								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
def isPrime ( n ) :					      static boolean isPrime ( int n ) {			    public static boolean isPrime ( int n ) {			  failure : #Results:9, 10
    if ( n <= 1 ) :					      	if ( n <= 1 ) return false ;				      if ( ( n <= 1 ) || ( n > n ) ) return false ;		  
	return False					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
    for i in range ( 2 , n ) :				      	i < n ;							      i < n ;							  
	if ( n % i == 0 ) :				      	i ++ ) if ( n % i == 0 ) return false ;			      i ++ ) if ( ( n % i == 0 ) || ( n % i == 1 ) ) return false 
	    return False				      	return true ;						      return true ;						  
    return True						      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
def isPossible ( str , n ) :				      static boolean isPossible ( String str , int n ) {	    public static boolean isPossible ( String str , int n ) {	  failure : #Results:6, 10
    l = len ( str )					      	int len = str . length ( ) ;				      int l = str . length ( ) ;				  
    if ( l >= n ) :					      	if ( len >= n ) return true ;				      if ( ( l >= n ) && ( l < n ) ) {				  
	return True					      	return false ;						    	return true ;						  
    return False					      }								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
def getOddOccurrence ( arr ) :				      int getOddOccurrence ( int ar [ ] , int ar_size ) {	    public static int getOddOccurrence ( int [ ] arr ) {	  error : FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TI
    res = 0						      	int i ;							      int res = 0 ;						  MES_2.java:60: error: method f_filled in class FIN
    for element in arr :				      	int res = 0 ;						      for ( int element : arr ) {				  D_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2 canno
	res = res ^ element				      	for ( i = 0 ;						    	res = res ^ element ;					  t be applied to given types;	       if(f_filled(p
    return res						      	i < ar_size ;						      }								  aram0.get(i),param1.get(i)) == f_gold(param0.get(i
							      	i ++ ) {						      return res ;						  ),param1.get(i)))	       ^   required: int[]
							      	  res = res ^ ar [ i ] ;				    }								   found: int[],Integer	  reason: actual and formal
							      	}							    								  argument lists differ in length 1 error
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
def findArea ( a ) :					      static float findArea ( float a ) {			    public static double findArea ( double a ) {		  success : None
    area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a  	float area ;						      double area = ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqrt ( 
    return area						      	area = ( float ) ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqr   return area ;						  
							      	return area ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1
--							      --							    --								  --
def printArray ( a , n ) :				      static void printArray ( int [ ] a , int n ) {		    static void printArray ( int [ ] a , int n ) {		  script_not_found : None
    for i in a :					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( i , end = " " )				      	i < n ;							      i < n ;							  
    print ( )						      	i ++ ) System . out . print ( a [ i ] + " " ) ;		      i ++ ) {							  
							      	System . out . println ( ) ;				    	System . out . print ( a [ i ] + " " ) ;		  
							      }								      }								  
							      								      System . out . println ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_LENGTH_PALINDROME				      NTH_EVEN_LENGTH_PALINDROME				    NTH_EVEN_LENGTH_PALINDROME					  NTH_EVEN_LENGTH_PALINDROME
--							      --							    --								  --
def evenlength ( n ) :					      static String evenlength ( String n ) {			    public static int evenLength ( int [ ] n ) {		  error : NTH_EVEN_LENGTH_PALINDROME.java:48: error:
    res = n						      	String res = n ;					      int res = n [ 0 ] ;					   incompatible types: String cannot be converted to
    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :	      	for ( int j = n . length ( ) - 1 ;			      for ( int j = n . length - 1 ;				   int[]	 if(f_filled(param0.get(i)).equals(f
	res += n [ j ]					      	j >= 0 ;						      j >= 0 ;							  _gold(param0.get(i))))
    return res						      	-- j ) res += n . charAt ( j ) ;			      j -- ) {							     ^ Note: Some messages have been simplified; rec
							      	return res ;						    	res += n [ j ] ;					  ompile with -Xdiags:verbose to get full output 1 e
							      }								      }								  rror
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
def sequence ( n ) :					      static int sequence ( int n ) {				    public static int sequence ( int n ) {			  script_not_found : None
    if n == 1 or n == 2 :				      	if ( n == 1 || n == 2 ) return 1 ;			      if ( n == 1 || n == 2 ) {					  
	return 1					      	else return sequence ( sequence ( n - 1 ) ) + sequence ( n  	return 1 ;						  
    else :						      }								      }								  
	return sequence ( sequence ( n - 1 ) ) + sequence ( n 								      else {							  
							      								    	return sequence ( sequence ( n - 1 ) ) + sequence ( n - s 
							      								    	;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : NEXT_POWER_OF_2_1.java:23: error: bad oper
    p = 1						      	int p = 1 ;						      int p = 1 ;						  and type int for unary operator '!'	if ( ( n > 0
    if ( n and not ( n & ( n - 1 ) ) ) :		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( ( n > 0 ) && ! ( n & ( n - 1 ) ) ) return n ;	   ) && ! ( n & ( n - 1 ) ) ) return n ;
	return n					      	while ( p < n ) p <<= 1 ;				      while ( ( p < n ) && ( p < n ) ) p <<= 1 ;		  	   ^ 1 error
    while ( p < n ) :					      	return p ;						      return p ;						  
	p <<= 1						      }								    }								  
    return p						      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
def isPowerOfFour ( n ) :				      static boolean isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
    return ( n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not (  	return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ( n & 0xAAAA   return ( n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0x 4_OR_NOT_2.java:19: error: bad operand type int fo
							      }								    }								  r unary operator '!'	 return ( n != 0 && ( ( n &
							      								    								  ( n - 1 ) ) == 0 ) && ! ( n & 0xAAAAAAAA ) ) ;
							      								    								  						  ^
							      								    								  1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
def nswp ( n ) :					      static int nswp ( int n ) {				    public static int nswp ( int n ) {				  script_not_found : None
    if n == 0 or n == 1 :				      	if ( n == 0 || n == 1 ) return 1 ;			      if ( n == 0 || n == 1 ) return 1 ;			  
	return 1					      	return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		      return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		  
    return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
def findTrailingZeros ( n ) :				      static int findTrailingZeros ( int n ) {			    public static int findTrailingZeros ( double n ) {		  failure : #Results:2, 10
    count = 0						      	int count = 0 ;						      long count = 0 ;						  
    i = 5						      	for ( int i = 5 ;					      int i = 5 ;						  
    while ( n / i >= 1 ) :				      	n / i >= 1 ;						      while ( ( n / i >= 1 ) && ( n / i <= 5 ) ) {		  
	count += int ( n / i )				      	i *= 5 ) count += n / i ;				    	count += ( int ) ( n / i ) ;				  
	i *= 5						      	return count ;						    	i *= 5 ;						  
    return int ( count )				      }								      }								  
							      								      return ( int ) count ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
def find ( n , k ) :					      public static int find ( int n , int k ) {		    public static int find ( int n , int k ) {			  success : None
    if ( n + 1 >= k ) :					      	if ( n + 1 >= k ) return ( k - 1 ) ;			      if ( ( n + 1 >= k ) && ( n + 1 >= k ) ) return ( k - 1 ) ;  
	return ( k - 1 )				      	else return ( 2 * n + 1 - k ) ;				      else return ( 2 * n + 1 - k ) ;				  
    else :						      }								    }								  
	return ( 2 * n + 1 - k )			      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
def leonardo ( n ) :					      static int leonardo ( int n ) {				    public static int leonardo ( int n ) {			  script_not_found : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return 1 ;			      if ( ( n == 0 || n == 1 ) && ( n > 0 ) ) return 1 ;	  
	return 1					      	return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;      return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;	  
    return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 )    }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
def CountSquares ( a , b ) :				      double countSquares ( int a , int b ) {			    public static int CountSquares ( double a , double b ) {	  script_not_found : None
    return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 	return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil (   return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
def countPaths ( n , m ) :				      static int countPaths ( int n , int m ) {			    public static int countPaths ( int n , int m ) {		  script_not_found : None
    if ( n == 0 or m == 0 ) :				      	if ( n == 0 || m == 0 ) return 1 ;			      if ( ( n == 0 || m == 0 ) && ( n > m ) ) return 1 ;	  
	return 1					      	return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1    return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  
    return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  success : None
    n -= 1						      	n -- ;							      n -- ;							  
    n |= n >> 1						      	n |= n >> 1 ;						      n |= n >> 1 ;						  
    n |= n >> 2						      	n |= n >> 2 ;						      n |= n >> 2 ;						  
    n |= n >> 4						      	n |= n >> 4 ;						      n |= n >> 4 ;						  
    n |= n >> 8						      	n |= n >> 8 ;						      n |= n >> 8 ;						  
    n |= n >> 16					      	n |= n >> 16 ;						      n |= n >> 16 ;						  
    n += 1						      	n ++ ;							      n ++ ;							  
    return n						      	return n ;						      return n ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
def vol_of_dodecahedron ( side ) :			      static double vol_of_dodecahedron ( int side ) {		    public static double volOfDodecahedron ( double side ) {	  success : None
    return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 	return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * (   return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * ( 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
def largestPower ( n , p ) :				      static int Largestpower ( int n , int p ) {		    public static int largestPower ( int n , int p ) {		  success : None
    x = 0						      	int ans = 0 ;						      int x = 0 ;						  
    while n :						      	while ( n > 0 ) {					      while ( n > 0 ) {						  
	n /= p						      	  n /= p ;						    	n /= p ;						  
	x += n						      	  ans += n ;						    	x += n ;						  
    return x						      	}							      }								  
							      	return ans ;						      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
def checkValidity ( a , b , c ) :			      public static int checkValidity ( int a , int b , int c ) {   public static boolean checkValidity ( int a , int b , int c ) error : CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIV
    if ( a + b <= c ) or ( a + c <= b ) or ( b + c <= a ) :   	if ( a + b <= c || a + c <= b || b + c <= a ) return 0 ;      if ( ( a + b <= c ) || ( a + c <= b ) || ( b + c <= a ) ) { EN.java:66: error: incomparable types: boolean and
	return False					      	else return 1 ;						    	return false ;						   int	       if(f_filled(param0.get(i),param1.get(
    else :						      }								      }								  i),param2.get(i)) == f_gold(param0.get(i),param1.g
	return True					      								      else {							  et(i),param2.get(i)))
							      								    	return true ;						  				     ^ 1 error
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
def PowerOFPINnfactorial ( n , p ) :			      static int PowerOFPINnfactorial ( int n , int p ) {	    public static int PowerOFPINnfactorial ( int n , int p ) {	  success : None
    ans = 0						      	int ans = 0 ;						      double ans = 0 ;						  
    temp = p						      	int temp = p ;						      double temp = p ;						  
    while ( temp <= n ) :				      	while ( temp <= n ) {					      while ( ( temp <= n ) && ( temp > 0 ) ) {			  
	ans += n / temp					      	  ans += n / temp ;					    	ans += n / temp ;					  
	temp = temp * p					      	  temp = temp * p ;					    	temp = temp * p ;					  
    return int ( ans )					      	}							      }								  
							      	return ans ;						      return ( int ) ans ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
def find_extra_element_index ( arrA , arrB ) :		      static int find_extra_element_index ( int [ ] arrA , int [ ]  public static int findExtraElementIndex ( int [ ] arrA , int  script_not_found : None
    extra_element = sum ( arrA ) - sum ( arrB )		      	int extra_element = sum ( arrA ) - sum ( arrB ) ;	      int extraElement = Arrays . binarySearch ( arrA , arrB ) -  
    return arrA.index ( extra_element )			      	return indexOf ( arrA , extra_element ) ;		      return arrA . length - extraElement ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
def getMissingNo ( A ) :				      static int getMissingNo ( int a [ ] , int n ) {		    public static int getMissingNo ( int [ ] A ) {		  script_not_found : None
    n = len ( A )					      	int i , total ;						      int n = A . length ;					  
    total = ( n + 1 ) * ( n + 2 ) / 2			      	total = ( n + 1 ) * ( n + 2 ) / 2 ;			      int total = ( n + 1 ) * ( n + 2 ) / 2 ;			  
    sum_of_A = sum ( A )				      	for ( i = 0 ;						      int sumOfA = sum ( A ) ;					  
    return total - sum_of_A				      	i < n ;							      return total - sumOfA ;					  
							      	i ++ ) total -= a [ i ] ;				    }								  
							      	return total ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
def findLastIndex ( str , x ) :				      static int findLastIndex ( String str , Character x ) {	    public static int findLastIndex ( String str , char x ) {	  script_not_found : None
    index = - 1						      	int index = - 1 ;					      int index = - 1 ;						  
    for i in range ( 0 , len ( str ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if str [ i ] == x :				      	i < str . length ( ) ;					      i != str . length ( ) ;					  
	    index = i					      	i ++ ) if ( str . charAt ( i ) == x ) index = i ;	      i ++ ) {							  
    return index					      	return index ;						    	if ( str . charAt ( i ) == x ) {			  
							      }								    	  index = i ;						  
							      								    	}							  
							      								      }								  
							      								      return index ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
def findLastIndex ( str , x ) :				      static int findLastIndex ( String str , Character x ) {	    public static int findLastIndex ( String str , char x ) {	  script_not_found : None
    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	      	for ( int i = str . length ( ) - 1 ;			      for ( int i = str . length ( ) - 1 ;			  
	if ( str [ i ] == x ) :				      	i >= 0 ;						      i >= 0 ;							  
	    return i					      	i -- ) if ( str . charAt ( i ) == x ) return i ;	      i -- ) {							  
    return - 1						      	return - 1 ;						    	if ( ( str . charAt ( i ) == x ) && ( str . charAt ( i +  
							      }								    	  return i ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
def getMissingNo ( a , n ) :				      static int getMissingNo ( int a [ ] , int n ) {		    public static int getMissingNo ( int [ ] a , int n ) {	  failure : #Results:0, 10
    i , total = 0 , 1					      	int total = 1 ;						      int i , total = 0 ;					  
    for i in range ( 2 , n + 2 ) :			      	for ( int i = 2 ;					      total = 1 ;						  
	total += i					      	i <= ( n + 1 ) ;					      for ( i = 2 ;						  
	total -= a [ i - 2 ]				      	i ++ ) {						      i <= n ;							  
    return total					      	  total += i ;						      i += 2 ) {						  
							      	  total -= a [ i - 2 ] ;				    	total += i ;						  
							      	}							    	total -= a [ i - 2 ] ;					  
							      	return total ;						      }								  
							      }								      return total ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
def cost ( a , n ) :					      static int cost ( int [ ] a , int n ) {			    static int cost ( int [ ] a , int n ) {			  failure : #Results:1, 10
    return ( ( n - 1 ) * min ( a ) )			      	int min = a [ 0 ] ;					      return ( ( n - 1 ) * Math . min ( a . length , n ) ) ;	  
							      	for ( int i = 1 ;					    }								  
							      	i < a . length ;					    								  
							      	i ++ ) {						    								  
							      	  if ( a [ i ] < min ) min = a [ i ] ;			    								  
							      	}							    								  
							      	return ( n - 1 ) * min ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
def largest ( arr , n ) :				      static int largest ( ) {					    public static int largest ( int [ ] arr , int n ) {		  script_not_found : None
    max = arr [ 0 ]					      	int i ;							      int max = arr [ 0 ] ;					  
    for i in range ( 1 , n ) :				      	int max = arr [ 0 ] ;					      for ( int i = 1 ;						  
	if arr [ i ] > max :				      	for ( i = 1 ;						      i < n ;							  
	    max = arr [ i ]				      	i < arr . length ;					      i ++ ) {							  
    return max						      	i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;		    	if ( arr [ i ] > max ) {				  
							      	return max ;						    	  max = arr [ i ] ;					  
							      }								    	}							  
							      								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
def printNos ( n ) :					      static void printNos ( int n ) {				    public static void printNos ( int n ) {			  script_not_found : None
    if n > 0 :						      	if ( n > 0 ) {						      if ( n > 0 ) {						  
	printNos ( n - 1 )				      	  printNos ( n - 1 ) ;					    	printNos ( n - 1 ) ;					  
	print ( n , end = ' ' )				      	  System . out . print ( n + " " ) ;			    	System . out . print ( n + " " ) ;			  
							      	}							      }								  
							      	return ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
def numberOfPaths ( m , n ) :				      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  script_not_found : None
    if ( m == 1 or n == 1 ) :				      	if ( m == 1 || n == 1 ) return 1 ;			      if ( ( m == 1 || n == 1 ) && ( m > n ) ) return 1 ;	  
	return 1					      	return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n    return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  
    return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m ,  }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
def maxvolume ( s ) :					      static int maxvolume ( int s ) {				    public static int maxvolume ( int s ) {			  success : None
    length = int ( s / 3 )				      	int length = s / 3 ;					      int length = ( int ) ( s / 3 ) ;				  
    s -= length						      	s -= length ;						      s -= length ;						  
    breadth = s / 2					      	int breadth = s / 2 ;					      int breadth = s / 2 ;					  
    height = s - breadth				      	int height = s - breadth ;				      int height = s - breadth ;				  
    return int ( length * breadth * height )		      	return length * breadth * height ;			      return ( int ) ( length * breadth * height ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
def findLarger ( arr , n ) :				      static void findLarger ( int arr [ ] , int n ) {		    public static void findLarger ( int [ ] arr , int n ) {	  script_not_found : None
    x = sorted ( arr )					      	Arrays . sort ( arr ) ;					      int [ ] x = new int [ n ] ;				  
    for i in range ( n / 2 , n ) :			      	for ( int i = n - 1 ;					      Arrays . fill ( x , 0 ) ;					  
	print ( x [ i ] ) ,				      	i >= n / 2 ;						      for ( int i = n / 2 ;					  
							      	i -- ) System . out . print ( arr [ i ] + " " ) ;	      i < n ;							  
							      }								      i ++ ) {							  
							      								    	System . out . print ( x [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
def playGame ( arr , n ) :				      public static int playGame ( int arr [ ] ) {		    public static int playGame ( int [ ] arr , int n ) {	  script_not_found : None
    s = set ( )						      	HashSet < Integer > set = new HashSet < > ( ) ;		      Set < Integer > s = new HashSet < Integer > ( ) ;		  
    for i in range ( n ) :				      	for ( int i : arr ) set . add ( i ) ;			      for ( int i = 0 ;						  
	s.add ( arr [ i ] )				      	return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;		      i < n ;							  
    return 1 if len ( s ) % 2 == 0 else 2		      }								      i ++ ) s . add ( arr [ i ] ) ;				  
							      								      return 1 == s . size ( ) % 2 ? 2 : 1 ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY	      QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
def leftRotate ( arr , n , k ) :			      static void leftRotate ( int arr [ ] , int n , int k ) {	    public static void leftRotate ( int [ ] arr , int n , int k ) script_not_found : None
    for i in range ( k , k + n ) :			      	for ( int i = k ;					      for ( int i = k ;						  
	print ( str ( arr [ i % n ] ) , end = " " )	      	i < k + n ;						      i < k + n ;						  
							      	i ++ ) System . out . print ( arr [ i % n ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . print ( Integer . toString ( arr [ i % n ] 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
def horner ( poly , n , x ) :				      static int horner ( int poly [ ] , int n , int x ) {	    public static double horner ( double [ ] poly , int n , doubl error : HORNERS_METHOD_POLYNOMIAL_EVALUATION.java:
    result = poly [ 0 ]					      	int result = poly [ 0 ] ;				      double result = poly [ 0 ] ;				  70: error: incompatible types: int[] cannot be con
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  verted to double[]	     if(f_filled(param0.get(
	result = result * x + poly [ i ]		      	i < n ;							      i < n ;							  i),param1.get(i),param2.get(i)) == f_gold(param0.g
    return result					      	i ++ ) result = result * x + poly [ i ] ;		      i ++ ) {							  et(i),param1.get(i),param2.get(i)))
							      	return result ;						    	result = result * x + poly [ i ] ;			  		  ^ Note: Some messages have been si
							      }								      }								  mplified; recompile with -Xdiags:verbose to get fu
							      								      return result ;						  ll output 1 error
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
    sm = 0						      	int sum = 0 ;						      int sm = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	for j in range ( i , n + 1 ) :			      	i <= n ;						      i <= n ;							  
	    sm = sm + i * j				      	i ++ ) for ( int j = i ;				      i ++ ) {							  
    return sm						      	j <= n ;						    	for ( int j = i ;					  
							      	j ++ ) sum = sum + i * j ;				    	j <= n ;						  
							      	return sum ;						    	j ++ ) {						  
							      }								    	  sm = sm + i * j ;					  
							      								    	}							  
							      								      }								  
							      								      return sm ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
def doublefactorial ( n ) :				      static int doublefactorial ( int n ) {			    public static double doublefactorial ( int n ) {		  failure : #Results:3, 10
    res = 1						      	int res = 1 ;						      double res = 1 ;						  
    for i in range ( n , - 1 , - 2 ) :			      	for ( int i = n ;					      for ( int i = n ;						  
	if ( i == 0 or i == 1 ) :			      	i >= 0 ;						      i >= 0 ;							  
	    return res					      	i = i - 2 ) {						      i -- ) {							  
	else :						      	  if ( i == 0 || i == 1 ) return res ;			    	if ( ( i == 0 || i == 1 ) && ( i == 2 ) ) {		  
	    res *= i					      	  else res *= i ;					    	  return res ;						  
							      	}							    	}							  
							      	return res ;						    	else {							  
							      }								    	  res *= i ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
def printFun ( test ) :					      static void printFun ( int test ) {			    public static void printFun ( int test ) {			  script_not_found : None
    if ( test < 1 ) :					      	if ( test < 1 ) return ;				      if ( ( test < 1 ) || ( test > 2 ) ) {			  
	return						      	else {							    	return ;						  
    else :						      	  System . out . printf ( "%d " , test ) ;		      }								  
	print ( test , end = " " )			      	  printFun ( test - 1 ) ;				      else {							  
	printFun ( test - 1 )				      	  System . out . printf ( "%d " , test ) ;		    	System . out . print ( test + " " ) ;			  
	print ( test , end = " " )			      	  return ;						    	printFun ( test - 1 ) ;					  
	return						      	}							    	System . out . print ( test + " " ) ;			  
							      }								    	return ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
def exponential ( n , x ) :				      static float exponential ( int n , float x ) {		    public static void exponential ( int n , double x ) {	  script_not_found : None
    sum = 1.0						      	float sum = 1 ;						      double sum = 1.0 ;					  
    for i in range ( n , 0 , - 1 ) :			      	for ( int i = n - 1 ;					      for ( int i = n ;						  
	sum = 1 + x * sum / i				      	i > 0 ;							      i > 0 ;							  
    print ( "e^x =" , sum )				      	-- i ) sum = 1 + x * sum / i ;				      i -- ) sum = 1 + x * sum / i ;				  
							      	return sum ;						      System . out . println ( "e^x =" + sum ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
def squareRoot ( n ) :					      static float squareRoot ( float n ) {			    public static double squareRoot ( double n ) {		  success : None
    x = n						      	float x = n ;						      double x = n ;						  
    y = 1						      	float y = 1 ;						      double y = 1 ;						  
    e = 0.000001					      	double e = 0.000001 ;					      double e = 0.000001 ;					  
    while ( x - y > e ) :				      	while ( x - y > e ) {					      while ( ( x - y > e ) && ( x > y ) ) {			  
	x = ( x + y ) / 2				      	  x = ( x + y ) / 2 ;					    	x = ( x + y ) / 2 ;					  
	y = n / x					      	  y = n / x ;						    	y = n / x ;						  
    return x						      	}							      }								  
							      	return x ;						      return x ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
def printFactorialNums ( n ) :				      static void printFactorialNums ( int n ) {		    public static void printFactorialNums ( int n ) {		  script_not_found : None
    fact = 1						      	int fact = 1 ;						      int fact = 1 ;						  
    x = 2						      	int x = 2 ;						      int x = 2 ;						  
    while fact <= n :					      	while ( fact <= n ) {					      while ( fact <= n ) {					  
	print ( fact , end = " " )			      	  System . out . print ( fact + " " ) ;			    	System . out . print ( fact + " " ) ;			  
	fact = fact * x					      	  fact = fact * x ;					    	fact = fact * x ;					  
	x += 1						      	  x ++ ;						    	x ++ ;							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
def divisibleBy20 ( num ) :				      static Boolean divisibleBy20 ( String num ) {		    public static boolean divisibleBy20 ( String num ) {	  script_not_found : None
    lastTwoDigits = int ( num [ - 2 : ] )		      	int lastTwoDigits = Integer . parseInt ( num . substring (    int lastTwoDigits = Integer . parseInt ( num . substring (  
    return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 = 	return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4    return ( ( lastTwoDigits % 5 == 0 && lastTwoDigits % 4 == 0 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
def floorSqrt ( x ) :					      static int floorSqrt ( int x ) {				    public static int floorSqrt ( int x ) {			  success : None
    if ( x == 0 or x == 1 ) :				      	if ( x == 0 || x == 1 ) return x ;			      if ( ( x == 0 || x == 1 ) && ( x > 0 ) ) {		  
	return x					      	int i = 1 , result = 1 ;				    	return x ;						  
    i = 1 result = 1					      	while ( result <= x ) {					      }								  
    while ( result <= x ) :				      	  i ++ ;						      int i = 1 ;						  
	i += 1						      	  result = i * i ;					      int result = 1 ;						  
	result = i * i					      	}							      while ( ( result <= x ) && ( result > 0 ) ) {		  
    return i - 1					      	return i - 1 ;						    	i ++ ;							  
							      }								    	result = i * i ;					  
							      								      }								  
							      								      return i - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
def search ( arr , x ) :				      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int [ ] arr , int x ) {		  error : HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING.
    n = len ( arr )					      	for ( int i = 0 ;					      int n = arr . length ;					  java:73: error: method f_filled in class HOW_TO_BE
    for j in range ( 0 , n ) :				      	i < n ;							      for ( int j = 0 ;						  GIN_WITH_COMPETITIVE_PROGRAMMING cannot be applied
	if ( x == arr [ j ] ) :				      	i ++ ) {						      j <= n ;							   to given types;	   if(f_filled(param0.get(i)
	    return j					      	  if ( arr [ i ] == x ) return i ;			      j ++ ) {							  ,param1.get(i),param2.get(i)) == f_gold(param0.get
    return - 1						      	}							    	if ( ( x == arr [ j ] ) && ( x != 0 ) ) {		  (i),param1.get(i),param2.get(i)))	       ^   r
							      	return - 1 ;						    	  return j ;						  equired: int[],int   found: int[],Integer,Integer
							      }								    	}							    reason: actual and formal argument lists differ
							      								      }								  in length 1 error
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			      MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			    MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			  MULTIPLICATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
def modInverse ( a , m ) :				      static int modInverse ( int a , int m ) {			    static int modInverse ( int a , int m ) {			  script_not_found : None
    a = a % m						      	a = a % m ;						      a = a % m ;						  
    for x in range ( 1 , m ) :				      	for ( int x = 1 ;					      for ( int x = 1 ;						  
	if ( ( a * x ) % m == 1 ) :			      	x < m ;							      x < m ;							  
	    return x					      	x ++ ) if ( ( a * x ) % m == 1 ) return x ;		      x ++ ) if ( ( ( a * x ) % m == 1 ) && ( ( a * x ) % m == 0  
    return 1						      	return 1 ;						      return 1 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
def count ( s , c ) :					      public static int count ( String s , char c ) {		    public static int count ( String s , char c ) {		  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( s [ i ] == c ) :				      	i < s . length ( ) ;					      i < s . length ( ) ;					  
	    res = res + 1				      	i ++ ) {						      i ++ ) if ( ( s . charAt ( i ) == c ) && ( s . charAt ( i ) 
    return res						      	  if ( s . charAt ( i ) == c ) res ++ ;			      return res ;						  
							      	}							    }								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
def sumOfSeries ( n ) :					      static int sumOfSeries ( int n ) {			    public static int sumOfSeries ( int n ) {			  success : None
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )	      	i <= n ;						      i <= n ;							  
    return sum						      	i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;	      i ++ ) {							  
							      	return sum ;						    	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;		  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : NEXT_POWER_OF_2.java:26: error: bad operan
    count = 0						      	int count = 0 ;						      int count = 0 ;						  d type int for unary operator '!'   if ( ( n > 0 )
    if ( n and not ( n & ( n - 1 ) ) ) :		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( ( n > 0 ) && ! ( n & ( n - 1 ) ) ) return n ;	   && ! ( n & ( n - 1 ) ) ) return n ;
	return n					      	while ( n != 0 ) {					      while ( ( n != 0 ) && ( n != 1 ) ) {			  	 ^ 1 error
    while ( n != 0 ) :					      	  n >>= 1 ;						    	n >>>= 1 ;						  
	n >>= 1						      	  count += 1 ;						    	count ++ ;						  
	count += 1					      	}							      }								  
    return 1 << count					      	return 1 << count ;					      return 1 << count ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
def isPower ( x , y ) :					      public static boolean isPower ( int x , int y ) {		    public static boolean isPower ( int x , int y ) {		  success : None
    if ( x == 1 ) :					      	if ( x == 1 ) return ( y == 1 ) ;			      if ( ( x == 1 ) || ( y == 1 ) ) return ( y == 1 ) ;	  
	return ( y == 1 )				      	int pow = 1 ;						      int pow = 1 ;						  
    pow = 1						      	while ( pow < y ) pow = pow * x ;			      while ( ( pow < y ) && ( pow != 0 ) ) pow = pow * x ;	  
    while ( pow < y ) :					      	return ( pow == y ) ;					      return ( pow == y ) ;					  
	pow = pow * x					      }								    }								  
    return ( pow == y )					      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
def allCharactersSame ( s ) :				      static boolean allCharactersSame ( String s ) {		    public static boolean allCharactersSame ( String s ) {	  success : None
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if s [ i ] != s [ 0 ] :				      	i < n ;							      i < n ;							  
	    return False				      	i ++ ) if ( s . charAt ( i ) != s . charAt ( 0 ) ) return f   i ++ ) {							  
    return True						      	return true ;						    	if ( s . charAt ( i ) != s . charAt ( 0 ) ) {		  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER			  FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
def center ( x1 , x2 , y1 , y2 ) :			      static void center ( int x1 , int x2 , int y1 , int y2 ) {    public static void center ( int x1 , int x2 , int y1 , int y2 script_not_found : None
    print ( int ( ( x1 + x2 ) / 2 ) , end = "" )	      	System . out . print ( ( float ) ( x1 + x2 ) / 2 + ", " + (   System . out . print ( Integer . toString ( ( x1 + x2 ) / 2 
    print ( "," , int ( ( y1 + y2 ) / 2 ) )		      }								      System . out . print ( "," + Integer . toString ( ( y1 + y2 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
def kthgroupsum ( k ) :					      public static int kthgroupsum ( int k ) {			    public static int kthGroupSum ( int k ) {			  success : None
    cur = int ( ( k * ( k - 1 ) ) + 1 )			      	int cur = ( k * ( k - 1 ) ) + 1 ;			      int cur = ( int ) ( ( k * ( k - 1 ) ) + 1 ) ;		  
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    while k :						      	while ( k -- > 0 ) {					      while ( k > 0 ) {						  
	sum += cur					      	  sum += cur ;						    	sum += cur ;						  
	cur += 2					      	  cur += 2 ;						    	cur += 2 ;						  
	k = k - 1					      	}							    	k = k - 1 ;						  
    return sum						      	return sum ;						      }								  
							      }								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
def getSum ( n ) :					      static int getSum ( int n ) {				    public static int getSum ( int n ) {			  failure : #Results:0, 10
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    while ( n != 0 ) :					      	while ( n != 0 ) {					      while ( ( n != 0 ) && ( n % 10 == 0 ) ) {			  
	sum = sum + int ( n % 10 )			      	  sum = sum + n % 10 ;					    	sum = sum + ( int ) ( n % 10 ) ;			  
	n = int ( n / 10 )				      	  n = n / 10 ;						    	n = ( int ) ( n / 10 ) ;				  
    return sum						      	}							      }								  
							      	return sum ;						      return sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
def spiralDiaSum ( n ) :				      static int spiralDiaSum ( int n ) {			    public static int spiralDiaSum ( int n ) {			  script_not_found : None
    if n == 1 :						      	if ( n == 1 ) return 1 ;				      if ( n == 1 ) return 1 ;					  
	return 1					      	return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ;   return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 
    return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
def isDivisible ( n ) :					      static boolean isDivisible ( long n ) {			    public static boolean isDivisible ( int n ) {		  error : NUMBER_IS_DIVISIBLE_BY_29_OR_NOT.java:48:
    while ( int ( n / 100 ) ) :				      	while ( n / 100 > 0 ) {					      while ( ( int ) ( n / 100 ) != 0 ) {			  error: incompatible types: Long cannot be converte
	last_digit = int ( n % 10 )			      	  int last_digit = ( int ) n % 10 ;			    	int lastDigit = ( int ) ( n % 10 ) ;			  d to int	   if(f_filled(param0.get(i)) == f_g
	n = int ( n / 10 )				      	  n /= 10 ;						    	n = ( int ) ( n / 10 ) ;				  old(param0.get(i)))
	n += last_digit * 3				      	  n += last_digit * 3 ;					    	n += lastDigit * 3 ;					  ^ Note: Some messages have been simplified; recomp
    return ( n % 29 == 0 )				      	}							      }								  ile with -Xdiags:verbose to get full output 1 erro
							      	return ( n % 29 == 0 ) ;				      return ( n % 29 == 0 ) ;					  r
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
def countOccurrences ( arr , n , x ) :			      static int countOccurrences ( int arr [ ] , int n , int x ) { public static int countOccurrences ( int [ ] arr , int n , in success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if x == arr [ i ] :				      	i < n ;							      i < n ;							  
	    res += 1					      	i ++ ) if ( x == arr [ i ] ) res ++ ;			      i ++ ) {							  
    return res						      	return res ;						    	if ( x == arr [ i ] ) {					  
							      }								    	  res ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
def Right_most_setbit ( num ) :				      static int Right_most_setbit ( int num ) {		    public static int Right_most_setbit ( int num ) {		  script_not_found : None
    pos = 1						      	int pos = 1 ;						      int pos = 1 ;						  
    for i in range ( INT_SIZE ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if not ( num & ( 1 << i ) ) :			      	i < INT_SIZE ;						      i < INT_SIZE ;						  
	    pos += 1					      	i ++ ) {						      i ++ ) {							  
	else :						      	  if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;		    	if ( ! ( num & ( 1 << i ) ) ) {				  
	    break					      	  else break ;						    	  pos ++ ;						  
    return pos						      	}							    	}							  
							      	return pos ;						    	else {							  
							      }								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return pos ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_
    p = 1						      	int p = 1 ;						      int p = 1 ;						  TO_N_1.java:23: error: bad operand type int for un
    if ( n and not ( n & ( n - 1 ) ) ) :		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( ( n > 0 ) && ! ( n & ( n - 1 ) ) ) return n ;	  ary operator '!'   if ( ( n > 0 ) && ! ( n & ( n -
	return n					      	while ( p < n ) p <<= 1 ;				      while ( ( p < n ) && ( p < n ) ) p <<= 1 ;		   1 ) ) ) return n ;			  ^ 1 error
    while ( p < n ) :					      	return p ;						      return p ;						  
	p <<= 1						      }								    }								  
    return p						      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
def numberOfPaths ( m , n ) :				      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  error : COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT
    for i in range ( n , ( m + n - 1 ) ) :		      	int path = 1 ;						      for ( int i = n ;						  _NXM_MATRIX_3.java:29: error: cannot find symbol
	path *= i					      	for ( int i = n ;					      i < ( m + n - 1 ) ;					     path *= i ;     ^	 symbol:   variable path   l
	path //= ( i - n + 1 )				      	i < ( m + n - 1 ) ;					      i ++ ) {							  ocation: class COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTO
    return path						      	i ++ ) {						    	path *= i ;						  M_RIGHT_NXM_MATRIX_3 COUNT_POSSIBLE_PATHS_TOP_LEFT
							      	  path *= i ;						    	path /= ( i - n + 1 ) ;					  _BOTTOM_RIGHT_NXM_MATRIX_3.java:30: error: cannot
							      	  path /= ( i - n + 1 ) ;				      }								  find symbol	  path /= ( i - n + 1 ) ;     ^	  sy
							      	}							      return path ;						  mbol:	  variable path	  location: class COUNT_POSS
							      	return path ;						    }								  IBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3 COUN
							      }								    								  T_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_
							      								    								  3.java:32: error: cannot find symbol	 return path
							      								    								   ;	      ^	  symbol:   variable path   location
							      								    								  : class COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT
							      								    								  _NXM_MATRIX_3 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
def search ( arr , n , x ) :				      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int [ ] arr , int n , int x ) {	  failure : #Results:9, 10
    i = 0						      	int i ;							      int i ;							  
    for i in range ( i , n ) :				      	for ( i = 0 ;						      for ( i = 0 ;						  
	if ( arr [ i ] == x ) :				      	i < n ;							      i < n ;							  
	    return i					      	i ++ ) {						      i ++ ) {							  
    return - 1						      	  if ( arr [ i ] == x ) {				    	if ( ( arr [ i ] == x ) && ( arr [ i + 1 ] == x ) ) {	  
							      	    return i ;						    	  return i ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return - 1 ;						      return - 1 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
def isPerfectSquare ( n ) :				      static boolean isPerfectSquare ( int n ) {		    public static boolean isPerfectSquare ( int n ) {		  success : None
    i = 1						      	for ( int sum = 0 , i = 1 ;				      int i = 1 ;						  
    the_sum = 0						      	sum < n ;						      int the_sum = 0 ;						  
    while the_sum < n :					      	i += 2 ) {						      while ( the_sum < n ) {					  
	the_sum += i					      	  sum += i ;						    	the_sum += i ;						  
	if the_sum == n :				      	  if ( sum == n ) return true ;				    	if ( the_sum == n ) return true ;			  
	    return True					      	}							    	i += 2 ;						  
	i += 2						      	return false ;						      }								  
    return False					      }								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
def catalan ( n ) :					      int catalan ( int n ) {					    public static double catalan ( int n ) {			  script_not_found : None
    if n <= 1 :						      	int res = 0 ;						      if ( n <= 1 ) return 1 ;					  
	return 1					      	if ( n <= 1 ) {						      double res = 0 ;						  
    res = 0						      	  return 1 ;						      for ( int i = 0 ;						  
    for i in range ( n ) :				      	}							      i < n ;							  
	res += catalan ( i ) * catalan ( n - i - 1 )	      	for ( int i = 0 ;					      i ++ ) res += catalan ( i ) * catalan ( n - i - 1 ) ;	  
    return res						      	i < n ;							      return res ;						  
							      	i ++ ) {						    }								  
							      	  res += catalan ( i ) * catalan ( n - i - 1 ) ;	    								  
							      	}							    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
def transpose ( A , B ) :				      static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {	    public static void transpose ( double [ ] [ ] A , double [ ]  script_not_found : None
    for i in range ( N ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( N ) :				      	for ( i = 0 ;						      i < N ;							  
	    B [ i ] [ j ] = A [ j ] [ i ]		      	i < N ;							      i ++ ) {							  
							      	i ++ ) for ( j = 0 ;					    	for ( int j = 0 ;					  
							      	j < N ;							    	j < N ;							  
							      	j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			    	j ++ ) {						  
							      }								    	  B [ i ] [ j ] = A [ j ] [ i ] ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
def first ( str ) :					      static char first ( String str ) {			    public static String first ( String str ) {			  error : FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATI
    for i in range ( 0 , len ( str ) ) :		      	for ( int i = 0 ;					      for ( int i = 0 ;						  VE_AND_RECURSIVE.java:25: error: char cannot be de
	if ( str [ i ].istitle ( ) ) :			      	i < str . length ( ) ;					      i != str . length ( ) ;					  referenced	 if ( ( str . charAt ( i ) ) . istit
	    return str [ i ]				      	i ++ ) if ( Character . isUpperCase ( str . charAt ( i ) )    i ++ ) {							  le ( ) ) {				     ^ FIRST
    return 0						      	return 0 ;						    	if ( ( str . charAt ( i ) ) . istitle ( ) ) {		  _UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURS
							      }								    	  return str . substring ( i ) ;			  IVE.java:29: error: incompatible types: int cannot
							      								    	}							   be converted to String   return 0 ;		^ FI
							      								      }								  RST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_REC
							      								      return 0 ;						  URSIVE.java:48: error: bad operand types for binar
							      								    }								  y operator '=='	  if(f_filled(param0.get(i))
							      								    								   == f_gold(param0.get(i)))
							      								    								  	      ^	  first type:  String	second type:
							      								    								   char 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
def rotate ( arr , n ) :				      static void rotate ( ) {					    public static void rotate ( int [ ] arr , int n ) {		  script_not_found : None
    x = arr [ n - 1 ]					      	int x = arr [ arr . length - 1 ] , i ;			      int x = arr [ n - 1 ] ;					  
    for i in range ( n - 1 , 0 , - 1 ) :		      	for ( i = arr . length - 1 ;				      for ( int i = n - 1 ;					  
	arr [ i ] = arr [ i - 1 ]			      	i > 0 ;							      i > 0 ;							  
    arr [ 0 ] = x					      	i -- ) arr [ i ] = arr [ i - 1 ] ;			      i -- ) {							  
							      	arr [ 0 ] = x ;						    	arr [ i ] = arr [ i - 1 ] ;				  
							      }								      }								  
							      								      arr [ 0 ] = x ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
def evenFib ( n ) :					      static long evenFib ( int n ) {				    public static int evenFib ( int n ) {			  script_not_found : None
    if ( n < 1 ) :					      	if ( n < 1 ) return n ;					      if ( ( n < 1 ) || ( n > 2 ) ) return n ;			  
	return n					      	if ( n == 1 ) return 2 ;				      if ( ( n == 1 ) || ( n == 2 ) ) return 2 ;		  
    if ( n == 1 ) :					      	return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;  
	return 2					      }								    }								  
    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )  								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
def kLargest ( arr , k ) :				      public static void kLargest ( Integer [ ] arr , int k ) {	    public static void kLargest ( int [ ] arr , int k ) {	  script_not_found : None
    arr.sort ( reverse = True )				      	Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;      Arrays . sort ( arr ) ;					  
    for i in range ( k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	print ( arr [ i ] , end = " " )			      	i < k ;							      i < k ;							  
							      	i ++ ) System . out . print ( arr [ i ] + " " ) ;	      i ++ ) {							  
							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
def compute ( a , b ) :					      static double compute ( int a , int b ) {			    public static double compute ( double a , double b ) {	  failure : #Results:1, 10
    AM = ( a + b ) / 2					      	double AM , GM , HM ;					      double AM = ( a + b ) / 2 ;				  
    GM = math.sqrt ( a * b )				      	AM = ( a + b ) / 2 ;					      double GM = Math . sqrt ( a * b ) ;			  
    HM = ( GM * GM ) / AM				      	GM = Math . sqrt ( a * b ) ;				      double HM = ( GM * GM ) / AM ;				  
    return HM						      	HM = ( GM * GM ) / AM ;					      return HM ;						  
							      	return HM ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			      SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			    SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES				  SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES
--							      --							    --								  --
def findS ( s ) :					      static int findS ( int s ) {				    public static int findS ( int s ) {				  success : None
    _sum = 0						      	int sum = 0 ;						      int _sum = 0 ;						  
    n = 1						      	for ( int n = 1 ;					      int n = 1 ;						  
    while ( _sum < s ) :				      	sum < s ;						      while ( ( _sum < s ) && ( _sum < s ) ) {			  
	_sum += n * n					      	n ++ ) {						    	_sum += n * n ;						  
	n += 1						      	  sum += n * n ;					    	n ++ ;							  
    n -= 1						      	  if ( sum == s ) return n ;				      }								  
    if _sum == s :					      	}							      n -- ;							  
	return n					      	return - 1 ;						      if ( _sum == s ) return n ;				  
    return - 1						      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
def isTriangular ( num ) :				      static boolean isTriangular ( int num ) {			    public static boolean isTriangular ( int num ) {		  success : None
    if ( num < 0 ) :					      	if ( num < 0 ) return false ;				      if ( ( num < 0 ) || ( num > num ) ) return false ;	  
	return False					      	int sum = 0 ;						      int sum = 0 , n = 1 ;					  
    sum , n = 0 , 1					      	for ( int n = 1 ;					      while ( ( sum <= num ) && ( sum <= num ) ) {		  
    while ( sum <= num ) :				      	sum <= num ;						    	sum = sum + n ;						  
	sum = sum + n					      	n ++ ) {						    	if ( ( sum == num ) || ( sum == num ) ) return true ;	  
	if ( sum == num ) :				      	  sum = sum + n ;					    	n ++ ;							  
	    return True					      	  if ( sum == num ) return true ;			      }								  
	n += 1						      	}							      return false ;						  
    return False					      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
def nextPowerOf2 ( n ) :				      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  success : None
    n -= 1						      	n -- ;							      n -- ;							  
    n |= n >> 1						      	n |= n >> 1 ;						      n |= n >> 1 ;						  
    n |= n >> 2						      	n |= n >> 2 ;						      n |= n >> 2 ;						  
    n |= n >> 4						      	n |= n >> 4 ;						      n |= n >> 4 ;						  
    n |= n >> 8						      	n |= n >> 8 ;						      n |= n >> 8 ;						  
    n |= n >> 16					      	n |= n >> 16 ;						      n |= n >> 16 ;						  
    n += 1						      	n ++ ;							      n ++ ;							  
    return n						      	return n ;						      return n ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
def PowerOFPINnfactorial ( n , p ) :			      static int PowerOFPINnfactorial ( int n , int p ) {	    public static int PowerOFPINnfactorial ( int n , int p ) {	  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    temp = p						      	for ( int i = 1 ;					      int temp = p ;						  
    while ( temp <= n ) :				      	i <= n ;						      while ( ( temp <= n ) && ( temp > 0 ) ) {			  
	ans += n / temp					      	i ++ ) {						    	ans += n / temp ;					  
	temp = temp * p					      	  int count = 0 , temp = i ;				    	temp = temp * p ;					  
    return ans						      	  while ( temp % p == 0 ) {				      }								  
							      	    count ++ ;						      return ans ;						  
							      	    temp = temp / p ;					    }								  
							      	  }							    								  
							      	  ans += count ;					    								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
def reverse ( string ) :				      void reverse ( String str ) {				    public static void reverse ( String string ) {		  script_not_found : None
    if len ( string ) == 0 :				      	if ( ( str == null ) || ( str . length ( ) <= 1 ) ) System    if ( string . length ( ) == 0 ) return ;			  
	return						      	else {							      String temp = string . substring ( 0 , 1 ) ;		  
    temp = string [ 0 ]					      	  System . out . print ( str . charAt ( str . length ( ) -    reverse ( string . substring ( 1 ) ) ;			  
    reverse ( string [ 1 : ] )				      	  reverse ( str . substring ( 0 , str . length ( ) - 1 ) )    System . out . print ( temp + " " ) ;			  
    print ( temp , end = '' )				      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
def isPowerOfFour ( n ) :				      static int isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
    if ( n == 0 ) :					      	if ( n == 0 ) return 0 ;				      if ( ( n == 0 ) || ( n == 1 ) ) {				  4_OR_NOT.java:52: error: incomparable types: boole
	return False					      	while ( n != 1 ) {					    	return false ;						  an and int	     if(f_filled(param0.get(i)) == f
    while ( n != 1 ) :					      	  if ( n % 4 != 0 ) return 0 ;				      }								  _gold(param0.get(i)))
	if ( n % 4 != 0 ) :				      	  n = n / 4 ;						      while ( ( n != 1 ) && ( n % 4 != 0 ) ) {			  	 ^ 1 error
	    return False				      	}							    	if ( ( n % 4 != 0 ) ) {					  
	n = n // 4					      	return 1 ;						    	  return false ;					  
    return True						      }								    	}							  
							      								    	n = n / 4 ;						  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
def isPowerOfTwo ( n ) :				      static boolean isPowerOfTwo ( int n ) {			    public static boolean isPowerOfTwo ( int n ) {		  failure : #Results:6, 10
    if ( n == 0 ) :					      	if ( n == 0 ) return false ;				      if ( ( n == 0 ) || ( n == 1 ) ) {				  
	return False					      	while ( n != 1 ) {					    	return false ;						  
    while ( n != 1 ) :					      	  if ( n % 2 != 0 ) return false ;			      }								  
	if ( n % 2 != 0 ) :				      	  n = n / 2 ;						      while ( ( n != 1 ) && ( n % 2 != 0 ) ) {			  
	    return False				      	}							    	if ( ( n % 2 != 0 ) ) {					  
	n = n // 2					      	return true ;						    	  return false ;					  
    return True						      }								    	}							  
							      								    	n = n / 2 ;						  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
def findMinZero ( p ) :					      static int findMinZero ( int p ) {			    public static int findMinZero ( int p ) {			  failure : #Results:0, 10
    first = 1						      	int first = 1 , second = 1 , number = 2 , next = 1 ;	      int first = 1 ;						  
    second = 1						      	while ( next > 0 ) {					      int second = 1 ;						  
    number = 2						      	  next = ( first + second ) % p ;			      int number = 2 ;						  
    next = 1						      	  first = second ;					      int next = 1 ;						  
    while ( next ) :					      	  second = next ;					      while ( ( next = first + second ) > p ) {			  
	next = ( first + second ) % p			      	  number ++ ;						    	next = ( first + second ) % p ;				  
	first = second					      	}							    	first = second ;					  
	second = next					      	return number ;						    	second = next ;						  
	number = number + 1				      }								    	number = number + 1 ;					  
    return number					      								      }								  
							      								      return number ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
def findExtra ( arr1 , arr2 , n ) :			      static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n )  static int findExtra ( int [ ] arr1 , int [ ] arr2 , int n )  success : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr1 [ i ] != arr2 [ i ] ) :		      	i < n ;							      i != n ;							  
	    return i					      	i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;	      i ++ ) if ( ( arr1 [ i ] != arr2 [ i ] ) && ( arr1 [ i ] != 
    return n						      	return n ;						      return n ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1
--							      --							    --								  --
def countDigits ( a , b ) :				      public static int countDigits ( int a , int b ) {		    public static int countDigits ( int a , int b ) {		  error : NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1.java:2
    if ( a == 0 or b == 0 ) :				      	if ( a == 0 || b == 0 ) return 1 ;			      if ( ( a == 0 || b == 0 ) && ( a == 0 || b == 0 ) ) return  1: error: incompatible types: possible lossy conve
	return 1					      	return ( int ) Math . floor ( Math . log10 ( Math . abs ( a   return Math . floor ( Math . log10 ( Math . abs ( a ) ) + M rsion from double to int   return Math . floor ( M
    return math.floor ( math.log10 ( abs ( a ) ) + math.log10 }								    }								  ath . log10 ( Math . abs ( a ) ) + Math . log10 (
							      								    								  Math . abs ( b ) ) ) + 1 ;
							      								    								  
							      								    								  			 ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
def isPower ( x , y ) :					      static boolean isPower ( int x , int y ) {		    public static int isPower ( double x , double y ) {		  error : CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMB
    res1 = math.log ( y ) / math.log ( x )		      	int res1 = ( int ) Math . log ( y ) / ( int ) Math . log (    double res1 = Math . log ( y ) / Math . log ( x ) ;	  ER_1.java:23: error: incomparable types: int and b
    res2 = math.log ( y ) / math.log ( x )		      	double res2 = Math . log ( y ) / Math . log ( x ) ;	      double res2 = Math . log ( y ) / Math . log ( x ) ;	  oolean   return 1 == ( res1 == res2 ) ? 0 : 1 ;
    return 1 if ( res1 == res2 ) else 0			      	return ( res1 == res2 ) ;				      return 1 == ( res1 == res2 ) ? 0 : 1 ;			  	   ^ CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_N
							      }								    }								  UMBER_1.java:53: error: incomparable types: int an
							      								    								  d boolean	    if(f_filled(param0.get(i),param1
							      								    								  .get(i)) == f_gold(param0.get(i),param1.get(i)))
							      								    								  						  ^
							      								    								  2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
def smallest ( x , y , z ) :				      static int smallest ( int x , int y , int z ) {		    public static int smallest ( int x , int y , int z ) {	  success : None
    c = 0						      	int c = 0 ;						      int c = 0 ;						  
    while ( x and y and z ) :				      	while ( x != 0 && y != 0 && z != 0 ) {			      while ( ( x > 0 ) && ( y > 0 ) && ( z > 0 ) ) {		  
	x = x - 1					      	  x -- ;						    	x = x - 1 ;						  
	y = y - 1					      	  y -- ;						    	y = y - 1 ;						  
	z = z - 1					      	  z -- ;						    	z = z - 1 ;						  
	c = c + 1					      	  c ++ ;						    	c = c + 1 ;						  
    return c						      	}							      }								  
							      	return c ;						      return c ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
def findS ( s ) :					      static int findS ( int s ) {				    public static int findS ( int s ) {				  success : None
    _sum = 0						      	int sum = 0 ;						      int _sum = 0 ;						  
    n = 1						      	for ( int n = 1 ;					      int n = 1 ;						  
    while ( _sum < s ) :				      	sum < s ;						      while ( ( _sum < s ) && ( _sum < s ) ) {			  
	_sum += n * n * n				      	n ++ ) {						    	_sum += n * n * n ;					  
	n += 1						      	  sum += n * n * n ;					    	n ++ ;							  
    n -= 1						      	  if ( sum == s ) return n ;				      }								  
    if _sum == s :					      	}							      n -- ;							  
	return n					      	return - 1 ;						      if ( _sum == s ) return n ;				  
    return - 1						      }								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
def check ( st ) :					      static boolean check ( String str ) {			    public static boolean check ( String st ) {			  error : Exception in thread "main" java.lang.Strin
    n = len ( st )					      	int n = str . length ( ) ;				      int n = st . length ( ) ;					  gIndexOutOfBoundsException: String index out of ra
    digitSum = 0					      	int digitSum = 0 ;					      int digitSum = 0 ;					  nge: 5 	at java.base/java.lang.StringLatin1.charAt
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  (StringLatin1.java:47) 	at java.base/java.lang.Str
	digitSum = digitSum + ( int ) ( st [ i ] )	      	i < n ;							      i <= n ;							  ing.charAt(String.java:693) 	at CHECK_LARGE_NUMBER
    return ( digitSum % 9 == 0 )			      	i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      i ++ ) {							  _DIVISIBLE_9_NOT.f_filled(CHECK_LARGE_NUMBER_DIVIS
							      	return ( digitSum % 9 == 0 ) ;				    	digitSum = digitSum + ( int ) ( st . charAt ( i ) ) ;	  IBLE_9_NOT.java:29) 	at CHECK_LARGE_NUMBER_DIVISIB
							      }								      }								  LE_9_NOT.main(CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT.j
							      								      return ( digitSum % 9 == 0 ) ;				  ava:50)
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS
--							      --							    --								  --
def countDigits ( a , b ) :				      static int countDigits ( int a , int b ) {		    public static int countDigits ( int a , int b ) {		  failure : #Results:0, 10
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    p = abs ( a * b )					      	int p = Math . abs ( a * b ) ;				      int p = Math . abs ( a * b ) ;				  
    if ( p == 0 ) :					      	if ( p == 0 ) return 1 ;				      if ( ( p == 0 ) || ( p > 10 ) ) {				  
	return 1					      	while ( p > 0 ) {					    	return 1 ;						  
    while ( p > 0 ) :					      	  count ++ ;						      }								  
	count = count + 1				      	  p = p / 10 ;						      while ( ( p > 0 ) && ( p < 10 ) ) {			  
	p = p // 10					      	}							    	count = count + 1 ;					  
    return count					      	return count ;						    	p = p / 10 ;						  
							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
def answer_query ( a , n , l , r ) :			      static int answer_query ( int a [ ] , int n , int l , int r ) public static int answerQuery ( int [ ] a , int n , int l , i failure : #Results:9, 10
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( l , r ) :				      	for ( int i = l ;					      for ( int i = l ;						  
	if ( a [ i ] == a [ i + 1 ] ) :			      	i < r ;							      i < r ;							  
	    count += 1					      	i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;	      i ++ ) {							  
    return count					      	return count ;						    	if ( ( a [ i ] == a [ i + 1 ] ) && ( a [ i ] == a [ i + 2 
							      }								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
def swap ( xp , yp ) :					      static void swap ( int [ ] xp , int [ ] yp ) {		    public static void swap ( int [ ] xp , int [ ] yp ) {	  success : None
    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;				  
    yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      	yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;				  
    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			      	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
def findFrequency ( arr , n , left , right , element ) :      public static int findFrequency ( int arr [ ] , int n , int l public static int findFrequency ( int [ ] arr , int n , int l script_not_found : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( left - 1 , right ) :		      	for ( int i = left - 1 ;				      for ( int i = left - 1 ;					  
	if ( arr [ i ] == element ) :			      	i < right ;						      i < right ;						  
	    count += 1					      	++ i ) if ( arr [ i ] == element ) ++ count ;		      i ++ ) {							  
    return count					      	return count ;						    	if ( ( arr [ i ] == element ) && ( arr [ i + 1 ] == eleme 
							      }								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
def lexSmallest ( a , n ) :				      static String lexsmallest ( String a [ ] , int n ) {	    public static String lexSmallest ( String [ ] a , int n ) {	  script_not_found : None
    a.sort ( reverse = True )				      	sort ( a , n ) ;					      Arrays . sort ( a ) ;					  
    answer = ""						      	String answer = "" ;					      String answer = "" ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	answer += a [ i ]				      	i < n ;							      i < n ;							  
    return answer					      	i ++ ) answer += a [ i ] ;				      i ++ ) {							  
							      	return answer ;						    	answer += a [ i ] ;					  
							      }								      }								  
							      								      return answer ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
def minSum ( n ) :					      static int minSum ( int n ) {				    public static int minSum ( int n ) {			  failure : #Results:0, 10
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  
    while ( n > 0 ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) && ( n % 10 == 0 ) ) {			  
	sum += ( n % 10 )				      	  sum += ( n % 10 ) ;					    	sum += ( n % 10 ) ;					  
	n //= 10					      	  n /= 10 ;						    	n /= 10 ;						  
    if ( sum == 1 ) :					      	}							      }								  
	return 10					      	if ( sum == 1 ) return 10 ;				      if ( ( sum == 1 ) || ( sum == 2 ) ) {			  
    return sum						      	return sum ;						    	return 10 ;						  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
def fib ( n ) :						      static int fib ( int n ) {				    public static int fib ( int n ) {				  script_not_found : None
    if n < 6 :						      	if ( n < 6 ) return f [ n ] ;				      if ( n < 6 ) return f [ n ] ;				  
	return f [ n ]					      	int t = 5 ;						      int t = 5 ;						  
    t = 5						      	int fn = 5 ;						      int fn = 5 ;						  
    fn = 5						      	while ( t < n ) {					      while ( t < n ) {						  
    while t < n :					      	  fn = ( int ) Math . round ( fn * PHI ) ;		    	fn = Math . round ( fn * PHI ) ;			  
	fn = round ( fn * PHI )				      	  t ++ ;						    	t ++ ;							  
	t += 1						      	}							      }								  
    return fn						      	return fn ;						      return fn ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
def check ( degree , n ) :				      static boolean check ( int degree [ ] , int n ) {		    public static boolean check ( int [ ] degree , int n ) {	  error : CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRE
    deg_sum = sum ( degree )				      	int deg_sum = 0 ;					      int deg_sum = sum ( degree ) ;				  SENT_GRAPH_TREE.java:25: error: cannot find symbol
    if ( 2 * ( n - 1 ) == deg_sum ) :			      	for ( int i = 0 ;					      if ( ( 2 * ( n - 1 ) ) == deg_sum ) {			     int deg_sum = sum ( degree ) ;
	return True					      	i < n ;							    	return true ;						  ^   symbol:	method sum(int[])   location: class
    else :						      	i ++ ) {						      }								  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRA
	return False					      	  deg_sum += degree [ i ] ;				      else {							  PH_TREE 1 error
							      	}							    	return false ;						  
							      	return ( 2 * ( n - 1 ) == deg_sum ) ;			      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS
--							      --							    --								  --
def squareRootExists ( n , p ) :			      static boolean squareRootExists ( int n , int p ) {	    public static boolean squareRootExists ( int n , int p ) {	  success : None
    n = n % p						      	n = n % p ;						      n = n % p ;						  
    for x in range ( 2 , p , 1 ) :			      	for ( int x = 2 ;					      for ( int x = 2 ;						  
	if ( ( x * x ) % p == n ) :			      	x < p ;							      x < p ;							  
	    return True					      	x ++ ) if ( ( x * x ) % p == n ) return true ;		      x += 1 ) {						  
    return False					      	return false ;						    	if ( ( ( x * x ) % p == n ) && ( ( x * x ) % p == n ) ) { 
							      }								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
def count ( n , x ) :					      static int count ( int n , int x ) {			    public static int count ( int n , int x ) {			  success : None
    cnt = 0						      	int count = 0 ;						      int cnt = 0 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	if i <= x :					      	i <= n && i <= x ;					      i <= n ;							  
	    if x // i <= n and x % i == 0 :		      	i ++ ) {						      i ++ ) {							  
		cnt += 1				      	  if ( x / i <= n && x % i == 0 ) count ++ ;		    	if ( i <= x ) {						  
    return cnt						      	}							    	  if ( x / i <= n && x % i == 0 ) {			  
							      	return count ;						    	    cnt ++ ;						  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return cnt ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
def smallest ( x , y , z ) :				      static int smallest ( int x , int y , int z ) {		    public static double smallest ( double x , double y , double  error : SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARI
    if ( not ( y / x ) ) :				      	if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;     if ( ( ! ( y / x ) ) && ( ! ( y / z ) ) ) {		  SON_OPERATORS_1.java:20: error: bad operand type d
	return y if ( not ( y / z ) ) else z		      	return ( ( x / z ) != 1 ) ? x : z ;			    	return y == 0 ? z : z ;					  ouble for unary operator '!'	 if ( ( ! ( y / x )
    return x if ( not ( x / z ) ) else z		      }								      }								  ) && ( ! ( y / z ) ) ) {	    ^ SMALLEST_OF_TH
							      								      return x == 0 ? z : x ;					  REE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1.java:2
							      								    }								  0: error: bad operand type double for unary operat
							      								    								  or '!'   if ( ( ! ( y / x ) ) && ( ! ( y / z ) ) )
							      								    								   {				 ^ 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
def binomialCoeff ( n , k ) :				      static int binomialCoeff ( int n , int k ) {		    public static double binomialCoeff ( int n , int k ) {	  script_not_found : None
    if k == 0 or k == n :				      	if ( k == 0 || k == n ) return 1 ;			      if ( k == 0 || k == n ) return 1 ;			  
	return 1					      	return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n    return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n  
    return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff (  }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
def sumBetweenTwoKth ( arr , n , k1 , k2 ) :		      static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) public static int sumBetweenTwoKth ( int [ ] arr , int n , in script_not_found : None
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( k1 , k2 - 1 ) :			      	for ( int i = k1 ;					      for ( int i = k1 ;					  
	result += arr [ i ]				      	i < k2 - 1 ;						      i <= k2 - 1 ;						  
    return result					      	i ++ ) result += arr [ i ] ;				      i ++ ) {							  
							      	return result ;						    	result += arr [ i ] ;					  
							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
def decimalToBinary ( N ) :				      static int decimalToBinary ( int N ) {			    public static int decimalToBinary ( int N ) {		  error : PROGRAM_DECIMAL_BINARY_CONVERSION_2.java:3
    B_Number = 0					      	int B_Number = 0 ;					      int B_Number = 0 ;					  2: error: incompatible types: possible lossy conve
    cnt = 0						      	int cnt = 0 ;						      int cnt = 0 ;						  rsion from double to int     int c = Math . pow (
    while ( N != 0 ) :					      	while ( N != 0 ) {					      while ( ( N != 0 ) && ( N % 2 == 0 ) ) {			  10 , cnt ) ;			      ^ 1 error
	rem = N % 2					      	  int rem = N % 2 ;					    	int rem = N % 2 ;					  
	c = pow ( 10 , cnt )				      	  double c = Math . pow ( 10 , cnt ) ;			    	int c = Math . pow ( 10 , cnt ) ;			  
	B_Number += rem * c				      	  B_Number += rem * c ;					    	B_Number += rem * c ;					  
	N //= 2						      	  N /= 2 ;						    	N /= 2 ;						  
	cnt += 1					      	  cnt ++ ;						    	cnt ++ ;						  
    return B_Number					      	}							      }								  
							      	return B_Number ;					      return B_Number ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
def isOneFlip ( str ) :					      static boolean isOneFlip ( String str ) {			    public static boolean isOneFlip ( String str ) {		  error : Exception in thread "main" java.lang.Strin
    sum = 0						      	int sum = 0 ;						      int sum = 0 ;						  gIndexOutOfBoundsException: begin 5, end 6, length
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				   5 	at java.base/java.lang.String.checkBoundsBegin
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  End(String.java:3319) 	at java.base/java.lang.Stri
	sum += int ( str [ i ] ) - int ( '0' )		      	i < n ;							      i <= n ;							  ng.substring(String.java:1874) 	at CHANGE_BITS_CAN
    return ( sum == n - 1 or sum == 1 )			      	i ++ ) sum += str . charAt ( i ) - '0' ;		      i ++ ) {							  _MADE_ONE_FLIP_1.f_filled(CHANGE_BITS_CAN_MADE_ONE
							      	return ( sum == n - 1 || sum == 1 ) ;			    	sum += Integer . parseInt ( str . substring ( i , i + 1 ) _FLIP_1.java:29) 	at CHANGE_BITS_CAN_MADE_ONE_FLIP
							      }								      }								  _1.main(CHANGE_BITS_CAN_MADE_ONE_FLIP_1.java:50)
							      								      return ( sum == n - 1 || sum == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
def recursiveReverse ( str , i = 0 ) :			      static void recursiveReverse ( char [ ] str , int i ) {	    public static void recursiveReverse ( String str , int i ) {  script_not_found : None
    n = len ( str )					      	int n = str . length ;					      int n = str . length ( ) ;				  
    if i == n // 2 :					      	if ( i == n / 2 ) return ;				      if ( i == n / 2 ) return ;				  
	return						      	swap ( str , i , n - i - 1 ) ;				      str = str . substring ( i , n - i - 1 ) ;			  
    str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] , str [ 	recursiveReverse ( str , i + 1 ) ;			      recursiveReverse ( str , i + 1 ) ;			  
    recursiveReverse ( str , i + 1 )			      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
def countNonDecreasing ( n ) :				      static long countNonDecreasing ( int n ) {		    public static int countNonDecreasing ( int n ) {		  failure : #Results:2, 10
    N = 10						      	int N = 10 ;						      int N = 10 ;						  
    count = 1						      	long count = 1 ;					      int count = 1 ;						  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	count = int ( count * ( N + i - 1 ) )		      	i <= n ;						      i <= n ;							  
	count = int ( count / i )			      	i ++ ) {						      i ++ ) {							  
    return count					      	  count *= ( N + i - 1 ) ;				    	count = ( int ) ( count * ( N + i - 1 ) ) ;		  
							      	  count /= i ;						    	count = ( int ) ( count / i ) ;				  
							      	}							      }								  
							      	return count ;						      return count ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
def isPalindrome ( string ) :				      static boolean isPalindrome ( String str ) {		    public static boolean isPalindrome ( String string ) {	  success : None
    l = 0						      	int l = 0 ;						      int l = 0 ;						  
    h = len ( string ) - 1				      	int h = str . length ( ) - 1 ;				      int h = string . length ( ) - 1 ;				  
    while h > l :					      	while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt    while ( h > l ) {						  
	l += 1						      	return true ;						    	l ++ ;							  
	h -= 1						      }								    	h -- ;							  
	if string [ l - 1 ] != string [ h + 1 ] :	      								    	if ( string . charAt ( l - 1 ) != string . charAt ( h + 1 
	    return False				      								    	  return false ;					  
    return True						      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
def countSubStr ( st , n ) :				      int countSubStr ( char str [ ] , int n ) {		    public static int countSubStr ( String st , int n ) {	  script_not_found : None
    m = 0						      	int m = 0 ;						      int m = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( st [ i ] == '1' ) :			      	i < n ;							      i <= n ;							  
	    m = m + 1					      	i ++ ) {						      i ++ ) {							  
    return m * ( m - 1 ) // 2				      	  if ( str [ i ] == '1' ) m ++ ;			    	if ( ( st . charAt ( i ) == '1' ) && ( st . charAt ( i +  
							      	}							    	  m = m + 1 ;						  
							      	return m * ( m - 1 ) / 2 ;				    	}							  
							      }								      }								  
							      								      return m * ( m - 1 ) / 2 ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
    n -= 1						      	n -- ;							      n -- ;							  
    sum = 0						      	int sum = 0 ;						      double sum = 0 ;						  
    sum += ( n * ( n + 1 ) ) / 2			      	sum += ( n * ( n + 1 ) ) / 2 ;				      sum += ( n * ( n + 1 ) ) / 2 ;				  
    sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6	      	sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		      sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		  
    return int ( sum )					      	return sum ;						      return ( int ) sum ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
def decToBinary ( n ) :					      public void decToBinary ( int n ) {			    public static void decToBinary ( int n ) {			  script_not_found : None
    for i in range ( 31 , - 1 , - 1 ) :			      	for ( int i = 31 ;					      for ( int i = 31 ;					  
	k = n >> i					      	i >= 0 ;						      i >= 0 ;							  
	if ( k & 1 ) :					      	i -- ) {						      i -- ) {							  
	    print ( "1" , end = "" )			      	  int k = n >> i ;					    	int k = n >> i ;					  
	else :						      	  if ( ( k & 1 ) > 0 ) System . out . print ( "1" ) ;	    	if ( ( k & 1 ) != 0 ) {					  
	    print ( "0" , end = "" )			      	  else System . out . print ( "0" ) ;			    	  System . out . print ( "1" + " " ) ;			  
							      	}							    	}							  
							      }								    	else {							  
							      								    	  System . out . print ( "0" + " " ) ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
def query ( s , i , j ) :				      static void query ( String s , int i , int j ) {		    public static void query ( String s , int i , int j ) {	  script_not_found : None
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    i %= n						      	i %= n ;						      i %= n ;							  
    j %= n						      	j %= n ;						      j %= n ;							  
    print ( "Yes" ) if s [ i ] == s [ j ] else print ( "No" ) 	if ( s . charAt ( i ) == s . charAt ( j ) ) System . out .    System . out . println ( "Yes" ) ? s . charAt ( i ) : s . c 
							      	else System . out . println ( "No" ) ;			    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
def isDivBy9 ( n ) :					      static boolean isDivBy9 ( int n ) {			    public static boolean isDivBy9 ( int n ) {			  error : Exception in thread "main" java.lang.Stack
    if ( n == 0 or n == 9 ) :				      	if ( n == 0 || n == 9 ) return true ;			      if ( ( n == 0 || n == 9 ) && ( n & 7 ) == 0 ) return true ; OverflowError 	at DIVISIBILITY_9_USING_BITWISE_OPE
	return True					      	if ( n < 9 ) return false ;				      if ( ( n < 9 ) && ( n & 7 ) == 0 ) return false ;		  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
    if ( n < 9 ) :					      	return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )    return isDivBy9 ( ( int ) ( n >>> 3 ) - ( int ) ( n & 7 ) ) TORS.java:21) 	at DIVISIBILITY_9_USING_BITWISE_OPE
	return False					      }								    }								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
    return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 )  								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23) 	at DIVISIBILITY_9_USING_BITWISE_OPE
							      								    								  RATORS.f_filled(DIVISIBILITY_9_USING_BITWISE_OPERA
							      								    								  TORS.java:23)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
def getInvCount ( arr , n ) :				      static int getInvCount ( int n ) {			    public static int getInvCount ( int [ ] arr , int n ) {	  script_not_found : None
    inv_count = 0					      	int inv_count = 0 ;					      int inv_count = 0 ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n - 1 ;						      i < n ;							  
	    if ( arr [ i ] > arr [ j ] ) :		      	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		inv_count += 1				      	j < n ;							    	for ( int j = i + 1 ;					  
    return inv_count					      	j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	    	j < n ;							  
							      	return inv_count ;					    	j ++ ) {						  
							      }								    	  if ( ( arr [ i ] > arr [ j ] ) && ( arr [ i ] < arr [ j 
							      								    	    inv_count ++ ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return inv_count ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
def isDivisible ( str , k ) :				      static boolean isDivisible ( String str , int k ) {	    public static boolean isDivisible ( String str , int k ) {	  script_not_found : None
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    c = 0						      	int c = 0 ;						      int c = 0 ;						  
    for i in range ( 0 , k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( str [ n - i - 1 ] == '0' ) :		      	i < k ;							      i <= k ;							  
	    c += 1					      	i ++ ) if ( str . charAt ( n - i - 1 ) == '0' ) c ++ ;	      i ++ ) {							  
    return ( c == k )					      	return ( c == k ) ;					    	if ( ( str . charAt ( n - i - 1 ) == '0' ) && ( str . cha 
							      }								    	  c ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return ( c == k ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
def printSquares ( n ) :				      static void printSquares ( int n ) {			    public static void printSquares ( int n ) {			  script_not_found : None
    square = 0						      	int square = 0 , odd = 1 ;				      int square = 0 ;						  
    odd = 1						      	for ( int x = 0 ;					      int odd = 1 ;						  
    for x in range ( 0 , n ) :				      	x < n ;							      for ( int x = 0 ;						  
	print ( square , end = " " )			      	x ++ ) {						      x <= n ;							  
	square = square + odd				      	  System . out . print ( square + " " ) ;		      x ++ ) {							  
	odd = odd + 2					      	  square = square + odd ;				    	System . out . print ( square + " " ) ;			  
							      	  odd = odd + 2 ;					    	square = square + odd ;					  
							      	}							    	odd = odd + 2 ;						  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
def breakSum ( n ) :					      static int breakSum ( int n ) {				    public static int breakSum ( int n ) {			  success : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return n ;			      if ( ( n == 0 || n == 1 ) && ( n % 2 == 0 ) ) return n ;	  
	return n					      	return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3   return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 
    return max ( ( breakSum ( n // 2 ) + breakSum ( n // 3 )  }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
def findRotations ( str ) :				      static int findRotations ( String str ) {			    public static int findRotations ( String str ) {		  success : None
    tmp = str + str					      	String tmp = str + str ;				      String tmp = str + str ;					  
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    for i in range ( 1 , n + 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	substring = tmp [ i : n ]			      	i <= n ;						      i <= n ;							  
	if ( str == substring ) :			      	i ++ ) {						      i ++ ) {							  
	    return i					      	  String substring = tmp . substring ( i , str . length ( ) 	String substring = tmp . substring ( i , n ) ;		  
    return n						      	  if ( str == substring ) return i ;			    	if ( ( str . equals ( substring ) ) && ( str . equals ( s 
							      	}							    	  return i ;						  
							      	return n ;						    	}							  
							      }								      }								  
							      								      return n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
def fib ( n , lookup ) :				      int fib ( int n ) {					    static int fib ( int n , int [ ] lookup ) {			  script_not_found : None
    if n == 0 or n == 1 :				      	if ( lookup [ n ] == NIL ) {				      if ( n == 0 || n == 1 ) lookup [ n ] = n ;		  
	lookup [ n ] = n				      	  if ( n <= 1 ) lookup [ n ] = n ;			      if ( lookup [ n ] == 0 ) lookup [ n ] = fib ( n - 1 , looku 
    if lookup [ n ] is None :				      	  else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	      return lookup [ n ] ;					  
	lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , 	}							    }								  
    return lookup [ n ]					      	return lookup [ n ] ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
def selectRandom ( x ) :				      static int selectRandom ( int x ) {			    public static int selectRandom ( int x ) {			  script_not_found : None
    res = 0						      	count ++ ;						      int res = 0 ;						  
    count = 0						      	if ( count == 1 ) res = x ;				      int count = 0 ;						  
    count += 1						      	else {							      count ++ ;						  
    if ( count == 1 ) :					      	  Random r = new Random ( ) ;				      if ( ( count == 1 ) || ( count == 2 ) ) {			  
	res = x						      	  int i = r . nextInt ( count ) ;			    	res = x ;						  
    else :						      	  if ( i == count - 1 ) res = x ;			      }								  
	i = random.randrange ( count )			      	}							      else {							  
	if ( i == count - 1 ) :				      	return res ;						    	int i = random . nextInt ( count ) ;			  
	    res = x					      }								    	if ( ( i == count - 1 ) || ( i == count - 2 ) ) {	  
    return res						      								    	  res = x ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_MULTIPLICATION			      CHECK_INTEGER_OVERFLOW_MULTIPLICATION			    CHECK_INTEGER_OVERFLOW_MULTIPLICATION			  CHECK_INTEGER_OVERFLOW_MULTIPLICATION
--							      --							    --								  --
def isOverflow ( a , b ) :				      static Boolean isOverflow ( long a , long b ) {		    public static boolean isOverflow ( long a , long b ) {	  error : CHECK_INTEGER_OVERFLOW_MULTIPLICATION.java
    if ( a == 0 or b == 0 ) :				      	if ( a == 0 || b == 0 ) return false ;			      if ( ( a == 0 || b == 0 ) && ( a >= - 9223372036854775807 | :22: error: integer number too large	 if ( ( a ==
	return False					      	long result = a * b ;					    	return false ;						   0 || b == 0 ) && ( a >= - 9223372036854775807 ||
    result = a * b					      	if ( a == result / b ) return false ;			      }								  a <= - 9223372036854775808 ) ) {
    if ( result >= 9223372036854775807 or result <= - 9223372 	else return true ;					      long result = a * b ;					  			 ^ CHECK_INTEGER_OVERFLOW_MU
	result = 0					      }								      if ( ( result >= 9223372036854775807 || result <= - 9223372 LTIPLICATION.java:22: error: integer number too la
    if ( a == ( result // b ) ) :			      								    	System . out . println ( result / b ) ;			  rge	if ( ( a == 0 || b == 0 ) && ( a >= - 922337
	print ( result // b )				      								    	return false ;						  2036854775807 || a <= - 9223372036854775808 ) ) {
	return False					      								      }								  
    else :						      								      else {							  		      ^ CHECK_INTEGER_OVERFLOW_MULTI
	return True					      								    	return true ;						  PLICATION.java:26: error: integer number too large
							      								      }								     if ( ( result >= 9223372036854775807 || result
							      								    								  <= - 9223372036854775808 ) && ( a == ( result / b
							      								    								  ) ) ) {		     ^ CHECK_INTEGER_OVERFLO
							      								    								  W_MULTIPLICATION.java:26: error: integer number to
							      								    								  o large   if ( ( result >= 9223372036854775807 ||
							      								    								  result <= - 9223372036854775808 ) && ( a == ( resu
							      								    								  lt / b ) ) ) {
							      								    								  		     ^ CHECK_INTEGER_OVERFLOW_MULTIP
							      								    								  LICATION.java:35: error: illegal start of expressi
							      								    								  on public static void main(String args[]) { ^ 5 er
							      								    								  rors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
def findNth ( n ) :					      public static int findNth ( int n ) {			    public static int findNth ( int n ) {			  success : identical to gold
    nthElement = 19 + ( n - 1 ) * 9			      	int nthElement = 19 + ( n - 1 ) * 9 ;			      int nthElement = 19 + ( n - 1 ) * 9 ;			  
    outliersCount = int ( math.log10 ( nthElement ) ) - 1     	int outliersCount = ( int ) Math . log10 ( nthElement ) - 1   int outliersCount = ( int ) Math . log10 ( nthElement ) - 1 
    nthElement += 9 * outliersCount			      	nthElement += 9 * outliersCount ;			      nthElement += 9 * outliersCount ;				  
    return nthElement					      	return nthElement ;					      return nthElement ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
def remainder ( st ) :					      static int remainder ( String str ) {			    public static int remainder ( String st ) {			  error : Exception in thread "main" java.lang.Strin
    ln = len ( st )					      	int len = str . length ( ) ;				      int ln = st . length ( ) ;				  gIndexOutOfBoundsException: String index out of ra
    rem = 0						      	int num , rem = 0 ;					      int rem = 0 ;						  nge: 8 	at java.base/java.lang.StringLatin1.charAt
    for i in range ( 0 , ln ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  (StringLatin1.java:47) 	at java.base/java.lang.Str
	num = rem * 10 + ( int ) ( st [ i ] )		      	i < len ;						      i <= ln ;							  ing.charAt(String.java:693) 	at PROGRAM_FIND_REMAI
	rem = num % 11					      	i ++ ) {						      i ++ ) {							  NDER_LARGE_NUMBER_DIVIDED_11.f_filled(PROGRAM_FIND
    return rem						      	  num = rem * 10 + ( str . charAt ( i ) - '0' ) ;	    	int num = rem * 10 + ( int ) ( st . charAt ( i ) ) ;	  _REMAINDER_LARGE_NUMBER_DIVIDED_11.java:32) 	at PR
							      	  rem = num % 11 ;					    	rem = num % 11 ;					  OGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11.main(
							      	}							      }								  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11.jav
							      	return rem ;						      return rem ;						  a:54)
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
def arcLength ( diameter , angle ) :			      static double arcLength ( double diameter , double angle ) {  public static double arcLength ( double diameter , double ang script_not_found : None
    if angle >= 360 :					      	double pi = 22.0 / 7.0 ;				      if ( angle >= 360 ) {					  
	print ( "Angle cannot be formed" )		      	double arc ;						    	System . out . println ( "Angle cannot be formed" ) ;	  
	return 0					      	if ( angle >= 360 ) {					    	return 0 ;						  
    else :						      	  System . out . println ( "Angle cannot" + " be formed" )    }								  
	arc = ( 3.142857142857143 * diameter ) * ( angle / 36 	  return 0 ;						      else {							  
	return arc					      	}							    	double arc = ( 3.142857142857143 * diameter ) * ( angle / 
							      	else {							    	return arc ;						  
							      	  arc = ( pi * diameter ) * ( angle / 360.0 ) ;		      }								  
							      	  return arc ;						    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
def countRect ( n ) :					      static int countRect ( int n ) {				    public static int countRect ( int n ) {			  success : None
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 	for ( int length = 1 ;					      for ( int length = 1 ;					  
	height = length					      	length <= Math . sqrt ( n ) ;				      length <= ( int ) Math . sqrt ( n ) ;			  
	while ( height * length <= n ) :		      	++ length ) for ( int height = length ;			      length ++ ) {						  
	    ans += 1					      	height * length <= n ;					    	int height = length ;					  
	    height += 1					      	++ height ) ans ++ ;					    	while ( ( height * length <= n ) && ( height * length <=  
    return ans						      	return ans ;						    	  ans ++ ;						  
							      }								    	  height ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
def firstFactorialDivisibleNumber ( x ) :		      static int firstFactorialDivisibleNumber ( int x ) {	    public static int firstFactorialDivisibleNumber ( int x ) {	  failure : #Results:0, 10
    i = 1						      	int i = 1 ;						      int i ;							  
    fact = 1						      	int fact = 1 ;						      int fact = 1 ;						  
    for i in range ( 1 , x ) :				      	for ( i = 1 ;						      for ( i = 1 ;						  
	fact = fact * i					      	i < x ;							      i <= x ;							  
	if ( fact % x == 0 ) :				      	i ++ ) {						      i ++ ) {							  
	    break					      	  fact = fact * i ;					    	fact = fact * i ;					  
    return i						      	  if ( fact % x == 0 ) break ;				    	if ( ( fact % x == 0 ) && ( i % x == 0 ) ) break ;	  
							      	}							      }								  
							      	return i ;						      return i ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
def gcd ( a , b ) :					      static double gcd ( double a , double b ) {		    public static double gcd ( double a , double b ) {		  script_not_found : None
    if ( a < b ) :					      	if ( a < b ) return gcd ( b , a ) ;			      if ( ( a < b ) || ( b < a ) ) return gcd ( b , a ) ;	  
	return gcd ( b , a )				      	if ( Math . abs ( b ) < 0.001 ) return a ;		      if ( ( Math . abs ( b ) < 0.001 ) || ( Math . abs ( b ) > 0 
    if ( abs ( b ) < 0.001 ) :				      	else return ( gcd ( b , a - Math . floor ( a / b ) * b ) )    else return ( gcd ( b , a - Math . floor ( a / b ) * b ) )  
	return a					      }								    }								  
    else :						      								    								  
	return ( gcd ( b , a - math.floor ( a / b ) * b ) )   								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
def isPrime ( n , i = 2 ) :				      static boolean isPrime ( int n , int i ) {		    public static boolean isPrime ( int n , int i ) {		  failure : #Results:4, 10
    if ( n <= 2 ) :					      	if ( n <= 2 ) return ( n == 2 ) ? true : false ;	      if ( ( n <= 2 ) || ( n == 2 ) ) return true ? ( n == 2 ) :  
	return True if ( n == 2 ) else False		      	if ( n % i == 0 ) return false ;			      if ( ( n % i == 0 ) || ( n % i == 1 ) ) return false ;	  
    if ( n % i == 0 ) :					      	if ( i * i > n ) return true ;				      if ( ( i * i > n ) && ( i * i > n ) ) return true ;	  
	return False					      	return isPrime ( n , i + 1 ) ;				      return isPrime ( n , i + 1 ) ;				  
    if ( i * i > n ) :					      }								    }								  
	return true					      								    								  
    return isPrime ( n , i + 1 )			      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
def countPairs ( arr , n ) :				      static int countPairs ( int arr [ ] , int n ) {		    public static int countPairs ( int [ ] arr , int n ) {	  failure : #Results:6, 10
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if ( arr [ i ] == arr [ j ] ) :		      	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		ans += 1				      	j < n ;							    	for ( int j = i + 1 ;					  
    return ans						      	j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		    	j <= n ;						  
							      	return ans ;						    	j ++ ) {						  
							      }								    	  if ( ( arr [ i ] == arr [ j ] ) && ( arr [ i ] != arr [ 
							      								    	    ans ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
def countInRange ( arr , n , x , y ) :			      static int countInRange ( int arr [ ] , int n , int x , int y public static int countInRange ( int [ ] arr , int n , int x  success : None
    count = 0 ;						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      ;								  
	if ( arr [ i ] >= x and arr [ i ] <= y ) :	      	i < n ;							      for ( int i = 0 ;						  
	    count += 1					      	i ++ ) {						      i < n ;							  
    return count					      	  if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;	      i ++ ) {							  
							      	}							    	if ( ( arr [ i ] >= x && arr [ i ] <= y ) || ( arr [ i ]  
							      	return count ;						    	  count ++ ;						  
							      }								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
def isSymmetric ( mat , N ) :				      static boolean isSymmetric ( int mat [ ] [ ] , int N ) {	    public static boolean isSymmetric ( int [ ] [ ] mat , int N ) success : None
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( N ) :				      	i < N ;							      i < N ;							  
	    if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :	      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		return False				      	j < N ;							    	for ( int j = 0 ;					  
    return True						      	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal 	j < N ;							  
							      	return true ;						    	j ++ ) {						  
							      }								    	  if ( ( mat [ i ] [ j ] != mat [ j ] [ i ] ) && ( mat [  
							      								    	    return false ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
def countCommon ( mat , n ) :				      static int countCommon ( int mat [ ] [ ] , int n ) {	    public static int countCommon ( int [ ] [ ] mat , int n ) {	  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	      	i < n ;							      i < n ;							  
	    res = res + 1				      	i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re   i ++ ) {							  
    return res						      	return res ;						    	if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) {	  
							      }								    	  res = res + 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
def first ( str , i ) :					      static char first ( String str , int i ) {		    public static int first ( String str , int i ) {		  script_not_found : None
    if ( str [ i ] == '\0' ) :				      	if ( str . charAt ( i ) == '\0' ) return 0 ;		      if ( ( str . charAt ( i ) == '\0' ) || ( str . charAt ( i ) 
	return 0					      	if ( Character . isUpperCase ( str . charAt ( i ) ) ) retur 	return 0 ;						  
    if ( str [ i ].isupper ( ) ) :			      	return first ( str , i + 1 ) ;				      }								  
	return str [ i ]				      }								      if ( ( str . charAt ( i ) == ' ' ) || ( str . charAt ( i )  
    return first ( str , i + 1 )			      								    	return str . charAt ( i ) ;				  
							      								      }								  
-							      -								      return first ( str-					  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
def findSum ( n ) :					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
    multiTerms = n * ( n + 1 ) // 2			      	int multiTerms = n * ( n + 1 ) / 2 ;			      int multiTerms = n * ( n + 1 ) / 2 ;			  
    sm = multiTerms					      	int sum = multiTerms ;					      int sm = multiTerms ;					  
    for i in range ( 2 , n + 1 ) :			      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	multiTerms = multiTerms - ( i - 1 )		      	i <= n ;						      i <= n ;							  
	sm = sm + multiTerms * i			      	i ++ ) {						      i ++ ) {							  
    return sm						      	  multiTerms = multiTerms - ( i - 1 ) ;			    	multiTerms = multiTerms - ( i - 1 ) ;			  
							      	  sum = sum + multiTerms * i ;				    	sm = sm + multiTerms * i ;				  
							      	}							      }								  
							      	return sum ;						      return sm ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
def maxProd ( n ) :					      static int maxProd ( int n ) {				    public static int maxProd ( int n ) {			  failure : #Results:9, 10
    if ( n == 2 or n == 3 ) :				      	if ( n == 2 || n == 3 ) return ( n - 1 ) ;		      if ( ( n == 2 || n == 3 ) && ( n > 4 ) ) return ( n - 1 ) ; 
	return ( n - 1 )				      	int res = 1 ;						      int res = 1 ;						  
    res = 1						      	while ( n > 4 ) {					      while ( ( n > 4 ) && ( n > 3 ) ) {			  
    while ( n > 4 ) :					      	  n -= 3 ;						    	n -= 3 ;						  
	n -= 3						      	  res *= 3 ;						    	res *= 3 ;						  
	res *= 3					      	}							      }								  
    return ( n * res )					      	return ( n * res ) ;					      return ( n * res ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_OCTAL_DECIMAL_CONVERSION			      PROGRAM_OCTAL_DECIMAL_CONVERSION				    PROGRAM_OCTAL_DECIMAL_CONVERSION				  PROGRAM_OCTAL_DECIMAL_CONVERSION
--							      --							    --								  --
def octalToDecimal ( n ) :				      static int octalToDecimal ( int n ) {			    public static int octalToDecimal ( int n ) {		  failure : #Results:2, 10
    num = n						      	int num = n ;						      int num = n ;						  
    dec_value = 0					      	int dec_value = 0 ;					      int decValue = 0 ;					  
    base = 1						      	int base = 1 ;						      int base = 1 ;						  
    temp = num						      	int temp = num ;					      int temp = num ;						  
    while ( temp ) :					      	while ( temp > 0 ) {					      while ( ( temp = temp % 10 ) != 0 ) {			  
	last_digit = temp % 10				      	  int last_digit = temp % 10 ;				    	int lastDigit = temp % 10 ;				  
	temp = int ( temp / 10 )			      	  temp = temp / 10 ;					    	temp = ( int ) ( temp / 10 ) ;				  
	dec_value += last_digit * base			      	  dec_value += last_digit * base ;			    	decValue += lastDigit * base ;				  
	base = base * 8					      	  base = base * 8 ;					    	base = base * 8 ;					  
    return dec_value					      	}							      }								  
							      	return dec_value ;					      return decValue ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
def minTime ( arr , n , m ) :				      static int minTime ( int [ ] arr , int n , int m ) {	    public static long minTime ( int [ ] arr , int n , int m ) {  script_not_found : None
    t = 0						      	int t = 0 ;						      long t = 0 ;						  
    while ( 1 ) :					      	while ( true ) {					      while ( ( 1 ) ) {						  
	items = 0					      	  int items = 0 ;					    	long items = 0 ;					  
	for i in range ( n ) :				      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
	    items += ( t // arr [ i ] )			      	  i < n ;						    	i < n ;							  
	if ( items >= m ) :				      	  i ++ ) items += ( t / arr [ i ] ) ;			    	i ++ ) {						  
	    return t					      	  if ( items >= m ) return t ;				    	  items += ( t / arr [ i ] ) ;				  
	t += 1						      	  t ++ ;						    	}							  
							      	}							    	if ( ( items >= m ) && ( items < n ) ) {		  
							      }								    	  return t ;						  
							      								    	}							  
							      								    	t ++ ;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
def printSquares ( n ) :				      static void printSquares ( int n ) {			    public static void printSquares ( int n ) {			  script_not_found : None
    square = 0 ; prev_x = 0 ;				      	int square = 0 , prev_x = 0 ;				      int square = 0 ;						  
    for x in range ( 0 , n ) :				      	for ( int x = 0 ;					      int prevX = 0 ;						  
	square = ( square + x + prev_x )		      	x < n ;							      ;								  
	print ( square , end = " " )			      	x ++ ) {						      for ( int x = 0 ;						  
	prev_x = x					      	  square = ( square + x + prev_x ) ;			      x <= n ;							  
							      	  System . out . print ( square + " " ) ;		      x ++ ) {							  
							      	  prev_x = x ;						    	square = ( square + x + prevX ) ;			  
							      	}							    	System . out . print ( square + " " ) ;			  
							      }								    	prevX = x ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
def isCornerPresent ( str , corner ) :			      static boolean isCornerPresent ( String str , String corner ) public static boolean isCornerPresent ( String str , String c failure : #Results:5, 10
    n = len ( str )					      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
    cl = len ( corner )					      	int cl = corner . length ( ) ;				      int cl = corner . length ( ) ;				  
    if ( n < cl ) :					      	if ( n < cl ) return false ;				      if ( ( n < cl ) || ( n > cl ) ) return false ;		  
	return False					      	return ( str . substring ( 0 , cl ) . equals ( corner ) &&    return ( ( str . substring ( 0 , cl ) . equals ( corner ) ) 
    return ( ( str [ : cl ] == corner ) and ( str [ n - cl :  }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
def add ( A , B , C ) :					      static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ public static void add ( int [ ] [ ] A , int [ ] [ ] B , int  script_not_found : None
    for i in range ( N ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( N ) :				      	for ( i = 0 ;						      i < N ;							  
	    C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]     	i < N ;							      i ++ ) {							  
							      	i ++ ) for ( j = 0 ;					    	for ( int j = 0 ;					  
							      	j < N ;							    	j < N ;							  
							      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	    	j ++ ) {						  
							      }								    	  C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
def findStep ( n ) :					      public static int findStep ( int n ) {			    public static int findStep ( int n ) {			  script_not_found : None
    if ( n == 1 or n == 0 ) :				      	if ( n == 1 || n == 0 ) return 1 ;			      if ( ( n == 1 ) || ( n == 0 ) ) {				  
	return 1					      	else if ( n == 2 ) return 2 ;				    	return 1 ;						  
    elif ( n == 2 ) :					      	else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS   }								  
	return 2					      }								      else if ( ( n == 2 ) || ( n == 3 ) ) {			  
    else :						      								    	return 2 ;						  
	return findStep ( n - 3 ) + findStep ( n - 2 ) + find 								      }								  
							      								      else {							  
							      								    	return findStep ( n - 3 ) + findStep ( n - 2 ) + findStep 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
def isPossibleTriangle ( arr , N ) :			      static boolean isPossibleTriangle ( int [ ] arr , int N ) {   public static boolean isPossibleTriangle ( int [ ] arr , int  success : None
    if N < 3 :						      	if ( N < 3 ) return false ;				      if ( N < 3 ) return false ;				  
	return False					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    arr.sort ( )					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for i in range ( N - 2 ) :				      	i < N - 2 ;						      i < N - 2 ;						  
	if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	      	i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret   i ++ ) {							  
	    return True					      	return false ;						    	if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return t 
							      }								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  failure : #Results:2, 10
    x = a - b						      	int x = a - b ;						      int x = a - b ;						  
    y = b - c						      	int y = b - c ;						      int y = b - c ;						  
    z = a - c						      	int z = a - c ;						      int z = a - c ;						  
    if x * y > 0 :					      	if ( x * y > 0 ) return b ;				      if ( x * y > 0 ) {					  
	return b					      	else if ( x * z > 0 ) return c ;			    	return b ;						  
    elif ( x * z > 0 ) :				      	else return a ;						      }								  
	return						      }								      else if ( ( x * z > 0 ) && ( y * z < 0 ) ) {		  
    else :						      								    	return a ;						  
	return a					      								      }								  
							      								      else {							  
							      								    	return b ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
def findRepeating ( arr , n ) :				      static int findRepeating ( int arr [ ] , int n ) {	    public static int findRepeating ( int [ ] arr , int n ) {	  error : FIND_REPETITIVE_ELEMENT_1_N_1_1.java:35: e
    s = set ( )						      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      Set < Integer > s = new HashSet < Integer > ( ) ;		  rror: not a statement	  rteurn - 1 ;		^ 1
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  error
	if arr [ i ] in s :				      	i < n ;							      i < n ;							  
	    return arr [ i ]				      	i ++ ) {						      i ++ ) {							  
	s.add ( arr [ i ] )				      	  if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;	    	if ( arr [ i ] < s . size ( ) ) {			  
    rteurn - 1						      	  s . add ( arr [ i ] ) ;				    	  return arr [ i ] ;					  
							      	}							    	}							  
							      	return - 1 ;						    	s . add ( arr [ i ] ) ;					  
							      }								      }								  
							      								      rteurn - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET
--							      --							    --								  --
def minRevolutions ( r , x1 , y1 , x2 , y2 ) :		      static double minRevolutions ( double r , int x1 , int y1 , i public static double minRevolutions ( double r , double x1 ,  script_not_found : None
    d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 	double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 -   double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - 
    return math.ceil ( d // ( 2 * r ) )			      	return Math . ceil ( d / ( 2 * r ) ) ;			      return Math . ceil ( d / ( 2 * r ) ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
def maxArea ( a , b , c , d ) :				      static double maxArea ( double a , double b , double c , doub public static double maxArea ( double a , double b , double c script_not_found : None
    semiperimeter = ( a + b + c + d ) / 2		      	double semiperimeter = ( a + b + c + d ) / 2 ;		      double semiperimeter = ( a + b + c + d ) / 2 ;		  
    return math.sqrt ( ( semiperimeter - a ) * ( semiperimete 	return Math . sqrt ( ( semiperimeter - a ) * ( semiperimete   return Math . sqrt ( ( semiperimeter - a ) * ( semiperimete 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
def checkcircle ( r , R , r1 , x1 , y1 ) :		      public static boolean checkcircle ( int r , int R , int r1 ,  public static boolean checkcircle ( double r , double R , dou success : None
    dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )	      	int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;	      int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;	  
    return ( dis - r1 >= R and dis + r1 <= r )		      	return ( dis - r1 >= R && dis + r1 <= r ) ;		      return ( dis - r1 >= R && dis + r1 <= r ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
def isDiagonalMatrix ( mat ) :				      static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {	    public static boolean isDiagonalMatrix ( int [ ] [ ] mat ) {  script_not_found : None
    for i in range ( 0 , N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( 0 , N ) :			      	i < N ;							      i != N ;							  
	    if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		return False				      	j < N ;							    	for ( int j = 0 ;					  
    return True						      	j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 	j != N ;						  
							      	return true ;						    	j ++ ) {						  
							      }								    	  if ( ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) || ( (  
							      								    	    return false ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	      MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
def minValue ( A , B , n ) :				      static int minValue ( int A [ ] , int B [ ] , int n ) {	    public static int minValue ( int [ ] A , int [ ] B , int n )  success : None
    sorted ( A )					      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
    sorted ( B )					      	Arrays . sort ( B ) ;					      Arrays . sort ( B ) ;					  
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	result += ( A [ i ] * B [ n - i - 1 ] )		      	i < n ;							      i < n ;							  
    return result					      	i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ;	      i ++ ) {							  
							      	return result ;						    	result += ( A [ i ] * B [ n - i - 1 ] ) ;		  
							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
def findMod ( a , b ) :					      static double findMod ( double a , double b ) {		    public static int findMod ( int a , int b ) {		  error : MODULUS_TWO_FLOAT_DOUBLE_NUMBERS.java:37:
    if ( a < 0 ) :					      	if ( a < 0 ) a = - a ;					      if ( ( a < 0 ) || ( b < 0 ) ) {				  error: illegal start of expression public static v
	a = - a						      	if ( b < 0 ) b = - b ;					    	a = - a ;						  oid main(String args[]) { ^ 1 error
    if ( b < 0 ) :					      	double mod = a ;					      }								  
	b = - b						      	while ( mod >= b ) mod = mod - b ;			      if ( ( b < 0 ) || ( a > b ) ) {				  
    mod = a						      	if ( a < 0 ) return - mod ;				    	b = - b ;						  
    while ( mod >= b ) :				      	return mod ;						      }								  
	mod = mod - b					      }								      int mod = a ;						  
    if ( a < 0 ) :					      								      while ( ( mod >= b ) && ( mod < a ) ) {			  
	return - mod					      								    	mod = mod - b ;						  
    return mod						      								      }								  
							      								      if ( ( a < 0 ) || ( b < a ) ) {				  
-							      -								    	return-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
def arraySortedOrNot ( arr , n ) :			      static boolean arraySortedOrNot ( int arr [ ] , int n ) {	    public static boolean arraySortedOrNot ( int [ ] arr , int n  failure : #Results:7, 10
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return true ;			      if ( ( n == 0 || n == 1 ) && ( arr [ 0 ] > arr [ 1 ] ) ) re 
	return True					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    for i in range ( 1 , n ) :				      	i < n ;							      i < n ;							  
	if ( arr [ i - 1 ] > arr [ i ] ) :		      	i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;	      i ++ ) if ( ( arr [ i - 1 ] > arr [ i ] ) && ( arr [ i ] >  
	    return False				      	return true ;						      return true ;						  
    return True						      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
def multiply ( A , B , C ) :				      static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C  public static void multiply ( int [ ] [ ] A , int [ ] [ ] B , script_not_found : None
    for i in range ( N ) :				      	int i , j ;						      for ( int i = 0 ;						  
	for j in range ( N ) :				      	for ( i = 0 ;						      i < N ;							  
	    C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]     	i < N ;							      i ++ ) {							  
							      	i ++ ) for ( j = 0 ;					    	for ( int j = 0 ;					  
							      	j < N ;							    	j < N ;							  
							      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	    	j ++ ) {						  
							      }								    	  C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
def minimumflip ( mat , n ) :				      static int minimumflip ( int mat [ ] [ ] , int n ) {	    public static int minimumflip ( int [ ] [ ] mat , int n ) {	  success : None
    flip = 0						      	int flip = 0 ;						      int flip = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i ) :				      	i < n ;							      i < n ;							  
	    if mat [ i ] [ j ] != mat [ j ] [ i ] :	      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		flip += 1				      	j < i ;							    	for ( int j = 0 ;					  
    return flip						      	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;  	j < i ;							  
							      	return flip ;						    	j ++ ) {						  
							      }								    	  if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) {		  
							      								    	    flip ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return flip ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
def sumNodes ( l ) :					      static double sumNodes ( int l ) {			    public static int sumNodes ( int l ) {			  error : FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
    leafNodeCount = math.pow ( 2 , l - 1 )		      	double leafNodeCount = Math . pow ( 2 , l - 1 ) ;	      int leafNodeCount = Math . pow ( 2 , l - 1 ) ;		  .java:23: error: incompatible types: possible loss
    sumLastLevel = 0					      	double sumLastLevel = 0 ;				      int sumLastLevel ;					  y conversion from double to int   int leafNodeCoun
    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 )  	sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 ) )  t = Math . pow ( 2 , l - 1 ) ;
    sum = sumLastLevel * l				      	double sum = sumLastLevel * l ;				      double sum = sumLastLevel * l ;				  		^ 1 error
    return int ( sum )					      	return sum ;						      return ( int ) sum ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			      NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			    NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			  NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
def findPosition ( k , n ) :				      public static int findPosition ( int k , int n ) {	    public static int findPosition ( int k , int n ) {		  failure : #Results:8, 10
    f1 = 0						      	long f1 = 0 , f2 = 1 , f3 ;				      int f1 = 0 ;						  
    f2 = 1						      	int i = 2 ;						      int f2 = 1 ;						  
    i = 2						      	while ( i != 0 ) {					      int i = 2 ;						  
    while i != 0 :					      	  f3 = f1 + f2 ;					      while ( i != 0 ) {					  
	f3 = f1 + f2					      	  f1 = f2 ;						    	int f3 = f1 + f2 ;					  
	f1 = f2						      	  f2 = f3 ;						    	f1 = f2 ;						  
	f2 = f3						      	  if ( f2 % k == 0 ) {					    	f2 = f3 ;						  
	if f2 % k == 0 :				      	    return n * i ;					    	if ( f2 % k == 0 ) {					  
	    return n * i				      	  }							    	  return n * i ;					  
	i += 1						      	  i ++ ;						    	}							  
    return						      	}							    	i ++ ;							  
							      	return 0 ;						      }								  
							      }								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
def findIndex ( n ) :					      static int findIndex ( int n ) {				    public static int findIndex ( int n ) {			  success : None
    if ( n <= 1 ) :					      	if ( n <= 1 ) return n ;				      if ( ( n <= 1 ) || ( n > n ) ) return n ;			  
	return n					      	int a = 0 , b = 1 , c = 1 ;				      int a = 0 ;						  
    a = 0						      	int res = 1 ;						      int b = 1 ;						  
    b = 1						      	while ( c < n ) {					      int c = 1 ;						  
    c = 1						      	  c = a + b ;						      int res = 1 ;						  
    res = 1						      	  res ++ ;						      while ( ( c < n ) && ( res < n ) ) {			  
    while ( c < n ) :					      	  a = b ;						    	c = a + b ;						  
	c = a + b					      	  b = c ;						    	res = res + 1 ;						  
	res = res + 1					      	}							    	a = b ;							  
	a = b						      	return res ;						    	b = c ;							  
	b = c						      }								      }								  
    return res						      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
def minimumSquare ( a , b ) :				      static int minimumSquare ( int a , int b ) {		    public static int minimumSquare ( int a , int b ) {		  script_not_found : None
    result = 0						      	int result = 0 , rem = 0 ;				      int result = 0 ;						  
    rem = 0						      	if ( a < b ) swap ( a , b ) ;				      int rem ;							  
    if ( a < b ) :					      	while ( b > 0 ) {					      if ( ( a < b ) || ( b < a ) ) {				  
	a , b = b , a					      	  result += a / b ;					    	a = b ;							  
    while ( b > 0 ) :					      	  rem = a % b ;						    	b = a ;							  
	result += int ( a / b )				      	  a = b ;						      }								  
	rem = int ( a % b )				      	  b = rem ;						      while ( ( b > 0 ) && ( a % b == 0 ) ) {			  
	a = b						      	}							    	result += ( int ) ( a / b ) ;				  
	b = rem						      	return result ;						    	rem = ( int ) ( a % b == 0 ) ;				  
    return result					      }								    	a = b ;							  
							      								    	b = rem ;						  
							      								      }								  
							      								      return result ;						  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
def constructArr ( arr , pair , n ) :			      static void constructArr ( int arr [ ] , int pair [ ] , int n public static void constructArr ( int [ ] arr , int [ ] pair  script_not_found : None
    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] )  	arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /  
    for i in range ( 1 , n ) :				      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		      	i < n ;							      i < n ;							  
							      	i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		      i ++ ) {							  
							      }								    	arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN
--							      --							    --								  --
def findMaximum ( arr , low , high ) :			      static int findMaximum ( int arr [ ] , int low , int high ) { public static int findMaximum ( int [ ] arr , int low , int h failure : #Results:6, 10
    max = arr [ low ]					      	int max = arr [ low ] ;					      int max = arr [ low ] ;					  
    i = low						      	int i ;							      int i ;							  
    for i in range ( high + 1 ) :			      	for ( i = low ;						      for ( i = low ;						  
	if arr [ i ] > max :				      	i <= high ;						      i < high ;						  
	    max = arr [ i ]				      	i ++ ) {						      i ++ ) {							  
    return max						      	  if ( arr [ i ] > max ) max = arr [ i ] ;		    	if ( arr [ i ] > max ) {				  
							      	}							    	  max = arr [ i ] ;					  
							      	return max ;						    	}							  
							      }								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
def minimum_cost ( a , n ) :				      static int minimum_cost ( int a [ ] , int n ) {		    public static double minimumCost ( double [ ] a , int n ) {	  error : MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRES
    mn = sys.maxsize					      	int mn = Integer . MAX_VALUE ;				      double mn = Double . MAX_VALUE ;				  ENTED_ARRAY.java:65: error: incompatible types: in
    sum = 0						      	int sum = 0 ;						      double sum = 0 ;						  t[] cannot be converted to double[]	      if(f_f
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  illed(param0.get(i),param1.get(i)) == f_gold(param
	mn = min ( a [ i ] , mn )			      	i < n ;							      i < n ;							  0.get(i),param1.get(i)))
	sum += a [ i ]					      	i ++ ) {						      i ++ ) {							       ^ Note: Some messages have been simplified; r
    return mn * ( sum - mn )				      	  mn = Math . min ( a [ i ] , mn ) ;			    	mn = Math . min ( a [ i ] , mn ) ;			  ecompile with -Xdiags:verbose to get full output 1
							      	  sum += a [ i ] ;					    	sum += a [ i ] ;					   error
							      	}							      }								  
							      	return mn * ( sum - mn ) ;				      return mn * ( sum - mn ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
def decToBin ( n ) :					      static String decToBin ( int n ) {			    public static String decToBin ( int n ) {			  failure : #Results:0, 10
    if ( n == 0 ) :					      	if ( n == 0 ) return "0" ;				      if ( ( n == 0 ) || ( n == 1 ) ) return "0" ;		  
	return "0"					      	String bin = "" ;					      String bin = "" ;						  
    bin = ""						      	while ( n > 0 ) {					      while ( ( n > 0 ) && ( n % 2 == 0 ) ) {			  
    while ( n > 0 ) :					      	  bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;		    	if ( ( n & 1 ) == 0 ) bin = "0" + bin ;			  
	if ( n & 1 == 0 ) :				      	  n >>= 1 ;						    	else bin = "1" + bin ;					  
	    bin = '0' + bin				      	}							    	n = n >> 1 ;						  
	else :						      	return bin ;						      }								  
	    bin = '1' + bin				      }								      return bin ;						  
	n = n >> 1					      								    }								  
    return bin						      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
def isInorder ( arr , n ) :				      static boolean isInorder ( int [ ] arr , int n ) {	    public static boolean isInorder ( int [ ] arr , int n ) {	  failure : #Results:8, 10
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) {				      if ( ( n == 0 || n == 1 ) && ( arr [ 0 ] > arr [ 1 ] ) ) re 
	return True					      	  return true ;						      for ( int i = 1 ;						  
    for i in range ( 1 , n , 1 ) :			      	}							      i < n ;							  
	if ( arr [ i - 1 ] > arr [ i ] ) :		      	for ( int i = 1 ;					      i += 1 ) if ( ( arr [ i - 1 ] > arr [ i ] ) && ( arr [ i ]  
	    return False				      	i < n ;							      return true ;						  
    return True						      	i ++ ) {						    }								  
							      	  if ( arr [ i - 1 ] > arr [ i ] ) {			    								  
							      	    return false ;					    								  
							      	  }							    								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
def shuffle ( card , n ) :				      public static void shuffle ( int card [ ] , int n ) {	    public static void shuffle ( int [ ] card , int n ) {	  script_not_found : None
    for i in range ( n ) :				      	Random rand = new Random ( ) ;				      for ( int i = 0 ;						  
	r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )    	for ( int i = 0 ;					      i < n ;							  
	tmp = card [ i ]				      	i < n ;							      i ++ ) {							  
	card [ i ] = card [ r ]				      	i ++ ) {						    	int r = i + ( rand . nextInt ( 55 ) % ( 52 - i ) ) ;	  
	card [ r ] = tmp				      	  int r = i + rand . nextInt ( 52 - i ) ;		    	int tmp = card [ i ] ;					  
							      	  int temp = card [ r ] ;				    	card [ i ] = card [ r ] ;				  
							      	  card [ r ] = card [ i ] ;				    	card [ r ] = tmp ;					  
							      	  card [ i ] = temp ;					      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
def mirrorImage ( a , b , c , x1 , y1 ) :		      static pair mirrorImage ( double a , double b , double c , do public static Point mirrorImage ( int a , int b , int c , int script_not_found : None
    temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )  	double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b *   double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * 
    x = temp * a + x1					      	double x = temp * a + x1 ;				      double x = temp * a + x1 ;				  
    y = temp * b + y1					      	double y = temp * b + y1 ;				      double y = temp * b + y1 ;				  
    return ( x , y )					      	return new pair ( x , y ) ;				      return new Point ( x , y ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
def numberOfWays ( x ) :				      static int numberOfWays ( int x ) {			    public static int numberOfWays ( int x ) {			  timeout : None
    if x == 0 or x == 1 :				      	int dp [ ] = new int [ x + 1 ] ;			      if ( x == 0 || x == 1 ) {					  
	return 1					      	dp [ 0 ] = dp [ 1 ] = 1 ;				    	return 1 ;						  
    else :						      	for ( int i = 2 ;					      }								  
	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	i <= x ;						      else {							  
							      	i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWay 
							      	return dp [ x ] ;					      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
def leonardo ( n ) :					      static int leonardo ( int n ) {				    public static int leonardo ( int n ) {			  failure : #Results:0, 10
    dp = [ ]						      	int dp [ ] = new int [ n + 1 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  
    dp.append ( 1 )					      	dp [ 0 ] = dp [ 1 ] = 1 ;				      dp [ 0 ] = 1 ;						  
    dp.append ( 1 )					      	for ( int i = 2 ;					      dp [ n - 1 ] = 1 ;					  
    for i in range ( 2 , n + 1 ) :			      	i <= n ;						      for ( int i = 2 ;						  
	dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 )	      	i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;	      i <= n ;							  
    return dp [ n ]					      	return dp [ n ] ;					      i ++ ) {							  
							      }								    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;		  
							      								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
def CountPairs ( n ) :					      static int CountPairs ( int n ) {				    public static int CountPairs ( int n ) {			  failure : #Results:0, 10
    k = n						      	int k = n ;						      int k = n ;						  
    imin = 1						      	int imin = 1 ;						      int imin = 1 ;						  
    ans = 0						      	int ans = 0 ;						      int ans = 0 ;						  
    while ( imin <= n ) :				      	while ( imin <= n ) {					      while ( ( imin <= n ) && ( ans < k ) ) {			  
	imax = n / k					      	  int imax = n / k ;					    	int imax = n / k ;					  
	ans += k * ( imax - imin + 1 )			      	  ans += k * ( imax - imin + 1 ) ;			    	ans += k * ( imax - imin + 1 ) ;			  
	imin = imax + 1					      	  imin = imax + 1 ;					    	imin = imax + 1 ;					  
	k = n / imin					      	  k = n / imin ;					    	k = n / imin ;						  
    return ans						      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION     DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	    DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
def lastPosition ( n , m , k ) :			      static int lastPosition ( int n , int m , int k ) {	    public static int lastPosition ( int n , int m , int k ) {	  failure : #Results:5, 10
    if ( m <= n - k + 1 ) :				      	if ( m <= n - k + 1 ) return m + k - 1 ;		      if ( ( m <= n - k + 1 ) && ( m > n - k + 1 ) ) return m + k 
	return m + k - 1				      	m = m - ( n - k + 1 ) ;					      m = m - ( n - k + 1 ) ;					  
    m = m - ( n - k + 1 )				      	return ( m % n == 0 ) ? n : ( m % n ) ;			      if ( ( m % n == 0 ) || ( m % n == 1 ) ) return n ;	  
    if ( m % n == 0 ) :					      }								      else return m % n ;					  
	return n					      								    }								  
    else :						      								    								  
	return m % n					      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
def kthdigit ( a , b , k ) :				      public static int kthdigit ( int a , int b , int k ) {	    public static int kthdigit ( int a , int b , int k ) {	  failure : #Results:4, 10
    p = a ** b						      	int p = ( int ) Math . pow ( a , b ) ;			      int p = a * b ;						  
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    while ( p > 0 and count < k ) :			      	while ( p > 0 && count < k ) {				      while ( ( p > 0 ) && ( count < k ) ) {			  
	rem = p % 10					      	  int rem = p % 10 ;					    	int rem = p % 10 ;					  
	count = count + 1				      	  count ++ ;						    	count = count + 1 ;					  
	if ( count == k ) :				      	  if ( count == k ) return rem ;			    	if ( ( count == k ) && ( rem > 0 ) ) return rem ;	  
	    return rem					      	  p = p / 10 ;						    	p = p / 10 ;						  
	p = p / 10					      	}							      }								  
							      	return 0 ;						      return 0 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
def splitArr ( arr , n , k ) :				      public static void splitArr ( int arr [ ] , int n , int k ) { public static void splitArr ( int [ ] arr , int n , int k ) { error : Exception in thread "main" java.lang.Array
    for i in range ( 0 , k ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  IndexOutOfBoundsException: Index -1 out of bounds
	x = arr [ 0 ]					      	i < k ;							      i <= k ;							  for length 1 	at SPLIT_ARRAY_ADD_FIRST_PART_END.f_
	for j in range ( 0 , n - 1 ) :			      	i ++ ) {						      i ++ ) {							  filled(SPLIT_ARRAY_ADD_FIRST_PART_END.java:36) 	at
	    arr [ j ] = arr [ j + 1 ]			      	  int x = arr [ 0 ] ;					    	int x = arr [ 0 ] ;					   SPLIT_ARRAY_ADD_FIRST_PART_END.main(SPLIT_ARRAY_A
	arr [ n - 1 ] = x				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  DD_FIRST_PART_END.java:112)
							      	  j < n - 1 ;						    	j <= n - 1 ;						  
							      	  ++ j ) arr [ j ] = arr [ j + 1 ] ;			    	j ++ ) {						  
							      	  arr [ n - 1 ] = x ;					    	  arr [ j ] = arr [ j + 1 ] ;				  
							      	}							    	}							  
							      }								    	arr [ n - 1 ] = x ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
def rotateMatrix ( mat ) :				      static void rotateMatrix ( int mat [ ] [ ] ) {		    public static void rotateMatrix ( int [ ] [ ] mat ) {	  script_not_found : None
    i = N - 1						      	for ( int i = N - 1 ;					      int i = N - 1 ;						  
    while ( i >= 0 ) :					      	i >= 0 ;						      while ( ( i >= 0 ) && ( i < N ) ) {			  
	j = N - 1					      	i -- ) {						    	int j = N - 1 ;						  
	while ( j >= 0 ) :				      	  for ( int j = N - 1 ;					    	while ( ( j >= 0 ) && ( j < N ) ) {			  
	    print ( mat [ i ] [ j ] , end = " " )	      	  j >= 0 ;						    	  System . out . print ( mat [ i ] [ j ] + " " ) ;	  
	    j = j - 1					      	  j -- ) System . out . print ( mat [ i ] [ j ] + " " ) ;   	  j = j - 1 ;						  
	print ( )					      	  System . out . println ( ) ;				    	}							  
	i = i - 1					      	}							    	System . out . println ( ) ;				  
							      }								    	i = i - 1 ;						  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA
--							      --							    --								  --
def russianPeasant ( a , b ) :				      static int russianPeasant ( int a , int b ) {		    public static int russianPeasant ( int a , int b ) {	  failure : #Results:0, 10
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    while ( b > 0 ) :					      	while ( b > 0 ) {					      while ( ( b > 0 ) && ( ( b & 1 ) != 0 ) ) {		  
	if ( b & 1 ) :					      	  if ( ( b & 1 ) != 0 ) res = res + a ;			    	if ( ( b & 1 ) != 0 ) {					  
	    res = res + a				      	  a = a << 1 ;						    	  res = res + a ;					  
	a = a << 1					      	  b = b >> 1 ;						    	}							  
	b = b >> 1					      	}							    	a = a << 1 ;						  
    return res						      	return res ;						    	b = b >>> 1 ;						  
							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
def findDigits ( n ) :					      static int findDigits ( int n ) {				    public static int findDigits ( int n ) {			  error : COUNT_DIGITS_FACTORIAL_SET_1.java:31: erro
    if ( n < 0 ) :					      	if ( n < 0 ) return 0 ;					      if ( ( n < 0 ) || ( n <= 1 ) ) return 0 ;			  r: incompatible types: possible lossy conversion f
	return 0					      	if ( n <= 1 ) return 1 ;				      if ( ( n <= 2 ) || ( n <= 3 ) ) return 1 ;		  rom double to int   return Math . floor ( digits )
    if ( n <= 1 ) :					      	double digits = 0 ;					      double digits = 0 ;					   + 1 ;				  ^ 1 error
	return 1					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
    digits = 0						      	i <= n ;						      i <= n ;							  
    for i in range ( 2 , n + 1 ) :			      	i ++ ) digits += Math . log10 ( i ) ;			      i ++ ) digits += Math . log10 ( i ) ;			  
	digits += math.log10 ( i )			      	return ( int ) ( Math . floor ( digits ) ) + 1 ;	      return Math . floor ( digits ) + 1 ;			  
    return math.floor ( digits ) + 1			      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
def swapDiagonal ( matrix ) :				      static void swapDiagonal ( int matrix [ ] [ ] ) {		    static void swapDiagonal ( int [ ] [ ] matrix ) {		  script_not_found : None
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \   	i < N ;							      i < N ;							  
	    matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]   	i ++ ) {						      i ++ ) {							  
							      	  int temp = matrix [ i ] [ i ] ;			    	matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] = \ ;	  
							      	  matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;	      }								  
							      	  matrix [ i ] [ N - i - 1 ] = temp ;			    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
def checkMarkov ( m ) :					      static boolean checkMarkov ( double m [ ] [ ] ) {		    public static boolean checkMarkov ( int [ ] [ ] m ) {	  error : MARKOV_MATRIX.java:56: error: incompatible
    for i in range ( 0 , len ( m ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						   types: double[][] cannot be converted to int[][]
	sm = 0						      	i < m . length ;					      i != m . length ;						  	  if(f_filled(param0.get(i)) == f_gold(param
	for j in range ( 0 , len ( m [ i ] ) ) :	      	i ++ ) {						      i ++ ) {							  0.get(i)))				   ^ Note: S
	    sm = sm + m [ i ] [ j ]			      	  double sum = 0 ;					    	int sm = 0 ;						  ome messages have been simplified; recompile with
	if ( sm != 1 ) :				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  -Xdiags:verbose to get full output 1 error
	    return False				      	  j < m [ i ] . length ;				    	j != m [ i ] . length ;					  
    return True						      	  j ++ ) sum = sum + m [ i ] [ j ] ;			    	j ++ ) sm = sm + m [ i ] [ j ] ;			  
							      	  if ( sum != 1 ) return false ;			    	if ( ( sm != 1 ) && ( sm != 0 ) ) return false ;	  
							      	}							      }								  
							      	return true ;						      return true ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
def search ( arr , n , x ) :				      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int [ ] arr , int n , int x ) {	  failure : #Results:5, 10
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( i <= n - 1 ) :				      	while ( i <= n - 1 ) {					      while ( ( i <= n - 1 ) && ( arr [ i ] == x ) ) {		  
	if ( arr [ i ] == x ) :				      	  if ( arr [ i ] == x ) return i ;			    	if ( ( arr [ i ] == x ) || ( arr [ i ] == 0 ) ) {	  
	    return i					      	  i += Math . abs ( arr [ i ] - x ) ;			    	  return i ;						  
	i += abs ( arr [ i ] - x )			      	}							    	}							  
    return - 1						      	return - 1 ;						    	i += Math . abs ( arr [ i ] - x ) ;			  
							      }								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS	      MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		    MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		  MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS
--							      --							    --								  --
def findMinSum ( a , b , n ) :				      static long findMinSum ( long a [ ] , long b [ ] , long n ) { public static int findMinSum ( int [ ] a , int [ ] b , int n  script_not_found : None
    a.sort ( )						      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
    b.sort ( )						      	Arrays . sort ( b ) ;					      Arrays . sort ( b ) ;					  
    sum = 0						      	long sum = 0 ;						      int sum = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	sum = sum + abs ( a [ i ] - b [ i ] )		      	i < n ;							      i < n ;							  
    return sum						      	i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;	      i ++ ) {							  
							      	return sum ;						    	sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;		  
							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER	  MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
def maxPrefix ( s , t ) :				      static int maxPrefix ( String s , String t ) {		    public static int maxPrefix ( String s , String t ) {	  error : MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SU
    count = 0						      	int count = 0 ;						      int count = 0 ;						  BSEQUENCE_ANOTHER.java:33: error: illegal start of
    for i in range ( 0 , len ( t ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						   expression public static void main(String args[])
	if ( count == len ( s ) ) :			      	i < t . length ( ) ;					      ;								   { ^ 1 error
	    break					      	i ++ ) {						      i ++ ) {							  
	if ( t [ i ] == s [ count ] ) :			      	  if ( count == t . length ( ) ) break ;		    	if ( ( count == s . length ( ) ) && ( t . length ( ) > s  
	    count = count + 1				      	  if ( t . charAt ( i ) == s . charAt ( count ) ) count ++  	if ( ( t . charAt ( i ) == s . charAt ( count ) ) && ( t  
    return count					      	}							    								  
							      	return count ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
def transpose ( A ) :					      static void transpose ( int A [ ] [ ] ) {			    public static void transpose ( int [ ] [ ] A ) {		  script_not_found : None
    for i in range ( N ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , N ) :			      	i < N ;							      i < N ;							  
	    A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A 	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
							      	j < N ;							    	for ( int j = i + 1 ;					  
							      	j ++ ) {						    	j < N ;							  
							      	  int temp = A [ i ] [ j ] ;				    	j ++ ) {						  
							      	  A [ i ] [ j ] = A [ j ] [ i ] ;			    	  A [ i ] [ j ] = A [ j ] [ i ] ;			  
							      	  A [ j ] [ i ] = temp ;				    	  A [ j ] [ i ] = A [ i ] [ j ] ;			  
							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
def findMinDiff ( arr , n ) :				      static int findMinDiff ( int [ ] arr , int n ) {		    public static int findMinDiff ( int [ ] arr , int n ) {	  failure : #Results:9, 10
    arr = sorted ( arr )				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    diff = 10 ** 20					      	int diff = Integer . MAX_VALUE ;			      int diff = 10 * 20 ;					  
    for i in range ( n - 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if arr [ i + 1 ] - arr [ i ] < diff :		      	i < n - 1 ;						      i < n - 1 ;						  
	    diff = arr [ i + 1 ] - arr [ i ]		      	i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [   i ++ ) {							  
    return diff						      	return diff ;						    	if ( arr [ i + 1 ] - arr [ i ] < diff ) {		  
							      }								    	  diff = arr [ i + 1 ] - arr [ i ] ;			  
							      								    	}							  
							      								      }								  
							      								      return diff ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
def CountSquares ( a , b ) :				      static int countSquares ( int a , int b ) {		    public static int CountSquares ( int a , int b ) {		  failure : #Results:5, 10
    cnt = 0						      	int cnt = 0 ;						      int cnt = 0 ;						  
    for i in range ( a , b + 1 ) :			      	for ( int i = a ;					      for ( int i = a ;						  
	j = 1 ;						      	i <= b ;						      i <= b ;							  
	while j * j <= i :				      	i ++ ) for ( int j = 1 ;				      i ++ ) {							  
	    if j * j == i :				      	j * j <= i ;						    	int j = 1 ;						  
		cnt = cnt + 1				      	j ++ ) if ( j * j == i ) cnt ++ ;			    	;							  
	    j = j + 1					      	return cnt ;						    	while ( j * j <= i ) {					  
	i = i + 1					      }								    	  if ( j * j == i ) cnt = cnt + 1 ;			  
    return cnt						      								    	  j = j + 1 ;						  
							      								    	}							  
							      								    	i = i + 1 ;						  
							      								      }								  
							      								      return cnt ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS				      BREAK_NUMBER_THREE_PARTS					    BREAK_NUMBER_THREE_PARTS					  BREAK_NUMBER_THREE_PARTS
--							      --							    --								  --
def count_of_ways ( n ) :				      static long count_of_ways ( long n ) {			    public static int countOfWays ( int n ) {			  error : BREAK_NUMBER_THREE_PARTS.java:62: error: i
    count = 0						      	long count = 0 ;					      int count = 0 ;						  ncompatible types: Long cannot be converted to int
    for i in range ( 0 , n + 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  	   if(f_filled(param0.get(i)) == f_gold(para
	for j in range ( 0 , n + 1 ) :			      	i <= n ;						      i <= n ;							  m0.get(i)))				    ^ Note:
	    for k in range ( 0 , n + 1 ) :		      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  Some messages have been simplified; recompile with
		if ( i + j + k == n ) :			      	j <= n ;						    	for ( int j = 0 ;					   -Xdiags:verbose to get full output 1 error
		    count = count + 1			      	j ++ ) for ( int k = 0 ;				    	j <= n ;						  
    return count					      	k <= n ;						    	j ++ ) {						  
							      	k ++ ) if ( i + j + k == n ) count ++ ;			    	  for ( int k = 0 ;					  
							      	return count ;						    	  k <= n ;						  
							      }								    	  k ++ ) {						  
							      								    	    if ( ( i + j + k ) == n ) {				  
							      								    	      count = count + 1 ;				  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
def findHeight ( parent , n ) :				      static int findHeight ( int [ ] parent , int n ) {	    public static int findHeight ( int [ ] parent , int n ) {	  script_not_found : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	p = i						      	i < n ;							      i < n ;							  
	current = 1					      	i ++ ) {						      i ++ ) {							  
	while ( parent [ p ] != - 1 ) :			      	  int p = i , current = 1 ;				    	int p = i ;						  
	    current += 1				      	  while ( parent [ p ] != - 1 ) {			    	int current = 1 ;					  
	    p = parent [ p ]				      	    current ++ ;					    	while ( ( parent [ p ] != - 1 ) && ( parent [ p ] != - 1  
	res = max ( res , current )			      	    p = parent [ p ] ;					    	  current ++ ;						  
    return res						      	  }							    	  p = parent [ p ] ;					  
							      	  res = Math . max ( res , current ) ;			    	}							  
							      	}							    	res = Math . max ( res , current ) ;			  
							      	return res ;						      }								  
							      }								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
def countFriendsPairings ( n ) :			      static int countFriendsPairings ( int n ) {		    public static int countFriendsPairings ( int n ) {		  failure : #Results:9, 10
    a , b , c = 1 , 2 , 0				      	int a = 1 , b = 2 , c = 0 ;				      int a = 1 , b = 2 , c = 0 ;				  
    if ( n <= 2 ) :					      	if ( n <= 2 ) {						      if ( ( n <= 2 ) && ( n > 3 ) ) return n ;			  
	return n					      	  return n ;						      for ( int i = 3 ;						  
    for i in range ( 3 , n + 1 ) :			      	}							      i <= n ;							  
	c = b + ( i - 1 ) * a				      	for ( int i = 3 ;					      i ++ ) {							  
	a = b						      	i <= n ;						    	c = b + ( i - 1 ) * a ;					  
	b = c						      	i ++ ) {						    	a = b ;							  
    return c						      	  c = b + ( i - 1 ) * a ;				    	b = c ;							  
							      	  a = b ;						      }								  
							      	  b = c ;						      return c ;						  
							      	}							    }								  
							      	return c ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
def numofsubset ( arr , n ) :				      static int numofsubset ( int arr [ ] , int n ) {		    public static int numofsubset ( int [ ] arr , int n ) {	  error : COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_
    x = sorted ( arr )					      	Arrays . sort ( arr ) ;					      int [ ] x = new int [ n ] ;				  CONSECUTIVE_NUMBERS.java:35: error: illegal start
    count = 1						      	int count = 1 ;						      Arrays . fill ( x , 0 ) ;					  of expression public static void main(String args[
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      int count = 1 ;						  ]) { ^ 1 error
	if ( x [ i ] + 1 != x [ i + 1 ] ) :		      	i < n - 1 ;						      for ( int i = 0 ;						  
	    count = count + 1				      	i ++ ) {						      i <= n - 1 ;						  
    return count					      	  if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;	      i ++ ) {							  
							      	}							    	if ( ( x [ i ] + 1 != x [ i + 1 ] ) && ( x [ i ] + 1 != x 
							      	return count ;						    	  count = count +					  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
def printFibonacciNumbers ( n ) :			      static void printFibonacciNumbers ( int n ) {		    public static void printFibonacciNumbers ( int n ) {	  script_not_found : None
    f1 = 0						      	int f1 = 0 , f2 = 1 , i ;				      int f1 = 0 ;						  
    f2 = 1						      	if ( n < 1 ) return ;					      int f2 = 1 ;						  
    if ( n < 1 ) :					      	for ( i = 1 ;						      if ( ( n < 1 ) || ( n > n ) ) return ;			  
	return						      	i <= n ;						      for ( int x = 0 ;						  
    for x in range ( 0 , n ) :				      	i ++ ) {						      x <= n ;							  
	print ( f2 , end = " " )			      	  System . out . print ( f2 + " " ) ;			      x ++ ) {							  
	next = f1 + f2					      	  int next = f1 + f2 ;					    	System . out . print ( f2 + " " ) ;			  
	f1 = f2						      	  f1 = f2 ;						    	int next = f1 + f2 ;					  
	f2 = next					      	  f2 = next ;						    	f1 = f2 ;						  
							      	}							    	f2 = next ;						  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1	      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1
--							      --							    --								  --
def exponentiation ( bas , exp ) :			      static long exponentiation ( long base , long exp ) {	    public static long exponentiation ( long bas , long exp ) {	  script_not_found : None
    t = 1						      	long t = 1L ;						      long t = 1 ;						  
    while ( exp > 0 ) :					      	while ( exp > 0 ) {					      while ( ( exp > 0 ) && ( exp % 2 != 0 ) ) {		  
	if ( exp % 2 != 0 ) :				      	  if ( exp % 2 != 0 ) t = ( t * base ) % N ;		    	if ( ( exp % 2 != 0 ) ) t = ( t * bas ) % N ;		  
	    t = ( t * bas ) % N				      	  base = ( base * base ) % N ;				    	bas = ( bas * bas ) % N ;				  
	bas = ( bas * bas ) % N				      	  exp /= 2 ;						    	exp = ( long ) ( exp / 2 ) ;				  
	exp = int ( exp / 2 )				      	}							      }								  
    return t % N					      	return t % N ;						      return t % N ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
def countSolutions ( n ) :				      static int countSolutions ( int n ) {			    public static int countSolutions ( int n ) {		  success : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    x = 0						      	for ( int x = 0 ;					      int x = 0 ;						  
    while ( x * x < n ) :				      	x * x < n ;						      while ( ( x * x < n ) && ( x * x < n ) ) {		  
	y = 0						      	x ++ ) for ( int y = 0 ;				    	int y = 0 ;						  
	while ( x * x + y * y < n ) :			      	x * x + y * y < n ;					    	while ( ( x * x + y * y < n ) && ( x * x + y * y < n ) )  
	    res = res + 1				      	y ++ ) res ++ ;						    	  res = res + 1 ;					  
	    y = y + 1					      	return res ;						    	  y = y + 1 ;						  
	x = x + 1					      }								    	}							  
    return res						      								    	x = x + 1 ;						  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
def randomize ( arr , n ) :				      static void randomize ( int arr [ ] , int n ) {		    public static int [ ] randomize ( int [ ] arr , int n ) {	  script_not_found : None
    for i in range ( n - 1 , 0 , - 1 ) :		      	Random r = new Random ( ) ;				      for ( int i = n - 1 ;					  
	j = random.randint ( 0 , i + 1 )		      	for ( int i = n - 1 ;					      i > 0 ;							  
	arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	      	i > 0 ;							      i -- ) {							  
    return arr						      	i -- ) {						    	int j = new Random ( ) . nextInt ( i + 1 ) ;		  
							      	  int j = r . nextInt ( i + 1 ) ;			    	arr [ i ] = arr [ j ] ;					  
							      	  int temp = arr [ i ] ;				    	arr [ j ] = arr [ i ] ;					  
							      	  arr [ i ] = arr [ j ] ;				      }								  
							      	  arr [ j ] = temp ;					      return arr ;						  
							      	}							    }								  
							      	System . out . println ( Arrays . toString ( arr ) ) ;	    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
def isDivisibleBy7 ( num ) :				      static boolean isDivisibleBy7 ( int num ) {		    public static boolean isDivisibleBy7 ( int num ) {		  error : DIVISIBILITY_BY_7.java:31: error: ')' expe
    if num < 0 :					      	if ( num < 0 ) return isDivisibleBy7 ( - num ) ;	      if ( num < 0 ) {						  cted	 return f_filled ( num
	return isDivisibleBy7 ( - num )			      	if ( num == 0 || num == 7 ) return true ;		    	return isDivisibleBy7 ( - num ) ;			    ^ DIVISIBILITY_BY_7.java:33: error: illegal star
    if ( num == 0 or num == 7 ) :			      	if ( num < 10 ) return false ;				      }								  t of expression public static void main(String arg
	return True					      	return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1   if ( ( num == 0 || num == 7 ) && ( num % 10 == 0 || num % 1 s[]) { ^ 2 errors
    if ( num < 10 ) :					      }								    	return true ;						  
	return False					      								      }								  
    return isDivisibleBy7 ( num // 10 - 2 * ( num - num // 10 								      if ( ( num < 10 ) && ( num % 10 == 0 || num % 10 == 7 ) ) { 
							      								    	return false ;						  
							      								      }								  
-							      -								      return isDivisibleBy7 ( num-				  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		      MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		    MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO			  MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
def moduloMultiplication ( a , b , mod ) :		      static long moduloMultiplication ( long a , long b , long mod public static int moduloMultiplication ( int a , int b , int  error : MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
    res = 0 ;						      	long res = 0 ;						      int res = 0 ;						  .java:79: error: incompatible types: Long cannot b
    a = a % mod ;					      	a %= mod ;						      ;								  e converted to int	     if(f_filled(param0.get(
    while ( b ) :					      	while ( b > 0 ) {					      a = a % mod ;						  i),param1.get(i),param2.get(i)) == f_gold(param0.g
	if ( b & 1 ) :					      	  if ( ( b & 1 ) > 0 ) {				      while ( ( b ) > 0 ) {					  et(i),param1.get(i),param2.get(i)))
	    res = ( res + a ) % mod ;			      	    res = ( res + a ) % mod ;				    	if ( ( b & 1 ) != 0 ) {					  		  ^ Note: Some messages have been si
	a = ( 2 * a ) % mod ;				      	  }							    	  res = ( res + a ) % mod ;				  mplified; recompile with -Xdiags:verbose to get fu
	b >>= 1 ;					      	  a = ( 2 * a ) % mod ;					    	}							  ll output 1 error
    return res ;					      	  b >>= 1 ;						    	a = ( 2 * a ) % mod ;					  
							      	}							    	b >>= 1 ;						  
							      	return res ;						      }								  
							      }								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
def maximizecube ( l , b , h ) :			      static void maximizecube ( int l , int b , int h ) {	    public static void maximizecube ( int l , int b , int h ) {	  script_not_found : None
    side = gcd ( l , gcd ( b , h ) )			      	int side = gcd ( l , gcd ( b , h ) ) ;			      int side = gcd ( l , gcd ( b , h ) ) ;			  
    num = int ( l / side )				      	int num = l / side ;					      int num = ( int ) ( l / side ) ;				  
    num = int ( num * b / side )			      	num = ( num * b / side ) ;				      num = ( int ) ( num * b / side ) ;			  
    num = int ( num * h / side )			      	num = ( num * h / side ) ;				      num = ( int ) ( num * h / side ) ;			  
    print ( side , num )				      	System . out . println ( side + " " + num ) ;		      System . out . println ( side + " " + num ) ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
def recSearch ( arr , l , r , x ) :			      static int recSearch ( int arr [ ] , int l , int r , int x )  public static int recSearch ( int [ ] arr , int l , int r , i success : None
    if r < l :						      	if ( r < l ) return - 1 ;				      if ( r < l ) return - 1 ;					  
	return - 1					      	if ( arr [ l ] == x ) return l ;			      if ( arr [ l ] == x ) return l ;				  
    if arr [ l ] == x :					      	if ( arr [ r ] == x ) return r ;			      if ( arr [ r ] == x ) return r ;				  
	return l					      	return recSearch ( arr , l + 1 , r - 1 , x ) ;		      return recSearch ( arr , l + 1 , r - 1 , x ) ;		  
    if arr [ r ] == x :					      }								    }								  
	return r					      								    								  
    return recSearch ( arr , l + 1 , r - 1 , x )	      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
def eulerian ( n , m ) :				      public static int eulerian ( int n , int m ) {		    public static double eulerian ( int n , int m ) {		  script_not_found : None
    if ( m >= n or n == 0 ) :				      	if ( m >= n || n == 0 ) return 0 ;			      if ( ( m >= n || n == 0 ) && ( m > 0 ) ) return 0 ;	  
	return 0					      	if ( m == 0 ) return 1 ;				      if ( ( m == 0 ) || ( m < 0 ) ) return 1 ;			  
    if ( m == 0 ) :					      	return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) *   return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) 
	return 1					      }								    }								  
    return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
def minLexRotation ( str_ ) :				      static String minLexRotation ( String str ) {		    public static int [ ] minLexRotation ( String str_ ) {	  error : LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION.
    n = len ( str_ )					      	int n = str . length ( ) ;				      int n = str_ . length ( ) ;				  java:35: error: incompatible types: String cannot
    arr = [ 0 ] * n					      	String arr [ ] = new String [ n ] ;			      int [ ] arr = new int [ n ] ;				  be converted to int	  arr [ i ] = concat . subst
    concat = str_ + str_				      	String concat = str + str ;				      Arrays . fill ( arr , 0 ) ;				  ring ( i , n + i ) ;
    for i in range ( n ) :				      	for ( int i = 0 ;					      String concat = str_ + str_ ;				  	^ 1 error
	arr [ i ] = concat [ i : n + i ]		      	i < n ;							      for ( int i = 0 ;						  
    arr.sort ( )					      	i ++ ) {						      i < n ;							  
    return arr [ 0 ]					      	  arr [ i ] = concat . substring ( i , i + n ) ;	      i ++ ) {							  
							      	}							    	arr [ i ] = concat . substring ( i , n + i ) ;		  
							      	Arrays . sort ( arr ) ;					      }								  
							      	return arr [ 0 ] ;					      Arrays . sort ( arr ) ;					  
							      }								      return arr ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		    PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
def isPossible ( a , b , n , k ) :			      static boolean isPossible ( Integer a [ ] , int b [ ] , int n public static boolean isPossible ( int [ ] a , int [ ] b , in error : PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_
    a.sort ( reverse = True )				      	Arrays . sort ( a , Collections . reverseOrder ( ) ) ;	      Arrays . sort ( a ) ;					  EQUAL_K.java:85: error: incompatible types: Intege
    b.sort ( )						      	Arrays . sort ( b ) ;					      Arrays . sort ( b ) ;					  r[] cannot be converted to int[]	   if(f_fill
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  ed(param0.get(i),param1.get(i),param2.get(i),param
	if ( a [ i ] + b [ i ] < k ) :			      	i < n ;							      i < n ;							  3.get(i)) == f_gold(param0.get(i),param1.get(i),pa
	    return False				      	i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	      i ++ ) {							  ram2.get(i),param3.get(i)))
    return True						      	return true ;						    	if ( ( a [ i ] + b [ i ] ) < k ) {			  	  ^ Note: Some messages have been simplified
							      }								    	  return false ;					  ; recompile with -Xdiags:verbose to get full outpu
							      								    	}							  t 1 error
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
def maxProduct ( arr , n ) :				      static int maxProduct ( int arr [ ] , int n ) {		    public static int maxProduct ( int [ ] arr , int n ) {	  success : None
    if n < 3 :						      	if ( n < 3 ) {						      if ( n < 3 ) return - 1 ;					  
	return - 1					      	  return - 1 ;						      Arrays . sort ( arr ) ;					  
    arr.sort ( )					      	}							      return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , 
    return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr  	Arrays . sort ( arr ) ;					    }								  
							      	return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , 								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
def canMakeAllSame ( str ) :				      static boolean canMakeAllSame ( String str ) {		    public static boolean canMakeAllSame ( String str ) {	  failure : #Results:8, 10
    zeros = 0						      	int zeros = 0 , ones = 0 ;				      int zeros = 0 ;						  
    ones = 0						      	for ( int i = 0 ;					      int ones = 0 ;						  
    for i in range ( 0 , len ( str ) ) :		      	i < str . length ( ) ;					      for ( int i = 0 ;						  
	ch = str [ i ]					      	i ++ ) {						      i != str . length ( ) ;					  
	if ( ch == '0' ) :				      	  char ch = str . charAt ( i ) ;			      i ++ ) {							  
	    zeros = zeros + 1				      	  if ( ch == '0' ) ++ zeros ;				    	char ch = str . charAt ( i ) ;				  
	else :						      	  else ++ ones ;					    	if ( ( ch == '0' ) || ( ch == '1' ) ) {			  
	    ones = ones + 1				      	}							    	  zeros = zeros + 1 ;					  
    return ( zeros == 1 or ones == 1 )			      	return ( zeros == 1 || ones == 1 ) ;			    	}							  
							      }								    	else {							  
							      								    	  ones = ones + 1 ;					  
							      								    	}							  
							      								      }								  
							      								      return ( zeros == 1 || ones == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS
--							      --							    --								  --
def middleOfThree ( a , b , c ) :			      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  error : MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS.
    if ( ( a < b and b < c ) or ( c < b and b < a ) ) :	      	if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;    if ( ( ( a < b && b < c ) || ( c < b && b < a ) ) && ( ( b  java:24: error: illegal start of expression public
	return b					      	else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return   if ( ( ( b < a && a < c ) || ( c < a && a < b ) ) && ( ( c   static void main(String args[]) { ^ 1 error
    if ( ( b < a and a < c ) or ( c < a and a < b ) ) :	      	else return c ;						    								  
	return a					      }								    								  
    else :						      								    								  
	return c					      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
def binaryToDecimal ( n ) :				      static int binaryToDecimal ( String n ) {			    public static int binaryToDecimal ( String n ) {		  error : Exception in thread "main" java.lang.Strin
    num = n						      	String num = n ;					      String num = n ;						  gIndexOutOfBoundsException: String index out of ra
    dec_value = 0					      	int dec_value = 0 ;					      int decValue = 0 ;					  nge: 9 	at java.base/java.lang.StringLatin1.charAt
    base1 = 1						      	int base = 1 ;						      int base1 = 1 ;						  (StringLatin1.java:47) 	at java.base/java.lang.Str
    len1 = len ( num )					      	int len = num . length ( ) ;				      int len1 = num . length ( ) ;				  ing.charAt(String.java:693) 	at PROGRAM_BINARY_DEC
    for i in range ( len1 - 1 , - 1 , - 1 ) :		      	for ( int i = len - 1 ;					      for ( int i = len1 - 1 ;					  IMAL_CONVERSION_1.f_filled(PROGRAM_BINARY_DECIMAL_
	if ( num [ i ] == '1' ) :			      	i >= 0 ;						      i >= 0 ;							  CONVERSION_1.java:36) 	at PROGRAM_BINARY_DECIMAL_C
	    dec_value += base1				      	i -- ) {						      i -- ) {							  ONVERSION_1.main(PROGRAM_BINARY_DECIMAL_CONVERSION
	base1 = base1 * 2				      	  if ( num . charAt ( i ) == '1' ) dec_value += base ;	    	if ( ( num . charAt ( i ) == '1' ) && ( num . charAt ( i  _1.java:58)
    return dec_value					      	  base = base * 2 ;					    	base1 = base1 * 2 ;					  
							      	}							      }								  
							      	return dec_value ;					      return decValue ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
def minXOR ( arr , n ) :				      static int minXOR ( int arr [ ] , int n ) {		    public static int minXOR ( int [ ] arr , int n ) {		  error : MINIMUM_XOR_VALUE_PAIR.java:41: error: ill
    arr.sort ( )					      	int min_xor = Integer . MAX_VALUE ;			      Arrays . sort ( arr ) ;					  egal start of expression public static void main(S
    min_xor = 999999					      	for ( int i = 0 ;					      int minXor = 999999 ;					  tring args[]) { ^ 1 error
    val = 0						      	i < n ;							      int val ;							  
    for i in range ( 0 , n - 1 ) :			      	i ++ ) for ( int j = i + 1 ;				      for ( int i = 0 ;						  
	for j in range ( i + 1 , n - 1 ) :		      	j < n ;							      i <= n - 1 ;						  
	    val = arr [ i ] ^ arr [ j ]			      	j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j   i ++ ) {							  
	    min_xor = min ( min_xor , val )		      	return min_xor ;					    	for ( int j = i + 1 ;					  
    return min_xor					      }								    	j <= n - 1 ;						  
							      								    	j ++ ) {						  
							      								    	  val = arr [ i ] ^ arr [ j ] ;				  
							      								    	  minXor = Math . min ( minXor , val ) ;		  
							      								    	}							  
							      								      }								  
							      								      return minXor ;						  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION
--							      --							    --								  --
def mulmod ( a , b , mod ) :				      static long mulmod ( long a , long b , long mod ) {	    public static int mulMod ( int a , int b , int mod ) {	  error : HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLIC
    res = 0						      	long res = 0 ;						      int res = 0 ;						  ATION.java:38: error: illegal start of expression
    a = a % mod						      	a = a % mod ;						      a = a % mod ;						  public static void main(String args[]) { ^ 1 error
    while ( b > 0 ) :					      	while ( b > 0 ) {					      while ( ( b > 0 ) && ( ( b % 2 == 1 ) || ( b % 2 == 0 ) ) ) 
	if ( b % 2 == 1 ) :				      	  if ( b % 2 == 1 ) {					    	if ( ( b % 2 == 1 ) || ( b % 2 == 0 ) ) {		  
	    res = ( res + a ) % mod			      	    res = ( res + a ) % mod ;				    	  res = ( res + a ) % mod ;				  
	a = ( a * 2 ) % mod				      	  }							    	}							  
	b //= 2						      	  a = ( a * 2 ) % mod ;					    	a = ( a * 2 ) % mod ;					  
    return res % mod					      	  b /= 2 ;						    	b /= 2 ;						  
							      	}							    								  
							      	return res % mod ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
def nonFibonacci ( n ) :				      static int nonFibonacci ( int n ) {			    public static int nonFibonacci ( int n ) {			  success : None
    prevPrev = 1					      	int prevPrev = 1 , prev = 2 , curr = 3 ;		      int prevPrev = 1 ;					  
    prev = 2						      	while ( n > 0 ) {					      int prev = 2 ;						  
    curr = 3						      	  prevPrev = prev ;					      int curr = 3 ;						  
    while n > 0 :					      	  prev = curr ;						      while ( n > 0 ) {						  
	prevPrev = prev					      	  curr = prevPrev + prev ;				    	prevPrev = prev ;					  
	prev = curr					      	  n = n - ( curr - prev - 1 ) ;				    	prev = curr ;						  
	curr = prevPrev + prev				      	}							    	curr = prevPrev + prev ;				  
	n = n - ( curr - prev - 1 )			      	n = n + ( curr - prev - 1 ) ;				    	n = n - ( curr - prev - 1 ) ;				  
    n = n + ( curr - prev - 1 )				      	return prev + n ;					      }								  
    return prev + n					      }								      n = n + ( curr - prev - 1 ) ;				  
							      								      return prev + n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_
--							      --							    --								  --
def multiply ( x , y ) :				      static int multiply ( int x , int y ) {			    public static int multiply ( int x , int y ) {		  failure : #Results:0, 10
    if ( y == 0 ) :					      	if ( y == 0 ) return 0 ;				      if ( ( y == 0 ) || ( y == 1 ) ) return 0 ;		  
	return 0					      	if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	      if ( ( y > 0 ) || ( y > 2 ) ) return ( x + multiply ( x , y 
    if ( y > 0 ) :					      	if ( y < 0 ) return - multiply ( x , - y ) ;		      if ( ( y < 0 ) || ( y < 2 ) ) return - multiply ( x , - y ) 
	return ( x + multiply ( x , y - 1 ) )		      	return - 1 ;						      return 0 ;						  
    if ( y < 0 ) :					      }								    }								  
	return - multiply ( x , - y )			      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
def firstNonRepeating ( arr , n ) :			      static int firstNonRepeating ( int arr [ ] , int n ) {	    public static int firstNonRepeating ( int [ ] arr , int n ) { error : NON_REPEATING_ELEMENT.java:40: error: ille
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  gal start of expression public static void main(St
	j = 0						      	i < n ;							      i < n ;							  ring args[]) { ^ 1 error
	while ( j < n ) :				      	i ++ ) {						      i ++ ) {							  
	    if ( i != j and arr [ i ] == arr [ j ] ) :	      	  int j ;						    	int j = 0 ;						  
		break					      	  for ( j = 0 ;						    	while ( ( j < n ) && ( arr [ i ] == arr [ j ] ) ) {	  
	    j += 1					      	  j < n ;						    	  if ( ( i != j && arr [ i ] == arr [ j ] ) || ( j == n ) 
	if ( j == n ) :					      	  j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;    	    break ;						  
	    return arr [ i ]				      	  if ( j == n ) return arr [ i ] ;			    	  }							  
    return - 1						      	}							    	  j ++ ;						  
							      	return - 1 ;						    	}							  
							      }								    	if ( ( j == n ) &&					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
def countSubstringWithEqualEnds ( s ) :			      static int countSubstringWithEqualEnds ( String s ) {	    public static int countSubstringWithEqualEnds ( String s ) {  error : COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_
    result = 0						      	int result = 0 ;					      int result = 0 ;						  CHARACTERS.java:35: error: ';' expected	  re
    n = len ( s )					      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  sult = result + 1			       ^ COU
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  NT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS.
	for j in range ( i , n ) :			      	i < n ;							      i < n ;							  java:37: error: illegal start of expression public
	    if ( s [ i ] == s [ j ] ) :			      	i ++ ) for ( int j = i ;				      i ++ ) {							   static void main(String args[]) { ^ 2 errors
		result = result + 1			      	j < n ;							    	for ( int j = i ;					  
    return result					      	j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result + 	j < n ;							  
							      	return result ;						    	j ++ ) {						  
							      }								    	  if ( ( s . charAt ( i ) == s . charAt ( j ) ) && ( s .  
-							      -								    	    result = result + 1-				  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
def countNegative ( M , n , m ) :			      static int countNegative ( int M [ ] [ ] , int n , int m ) {  public static int countNegative ( int [ ] [ ] M , int n , int success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( m ) :				      	i < n ;							      i < n ;							  
	    if M [ i ] [ j ] < 0 :			      	i ++ ) {						      i ++ ) {							  
		count += 1				      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	    else :					      	  j < m ;						    	j < m ;							  
		break					      	  j ++ ) {						    	j ++ ) {						  
    return count					      	    if ( M [ i ] [ j ] < 0 ) count += 1 ;		    	  if ( M [ i ] [ j ] < 0 ) {				  
							      	    else break ;					    	    count ++ ;						  
							      	  }							    	  }							  
							      	}							    	  else {						  
							      	return count ;						    	    break ;						  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
def countSeq ( n ) :					      static int countSeq ( int n ) {				    public static int countSeq ( int n ) {			  success : None
    nCr = 1						      	int nCr = 1 , res = 1 ;					      int nCr = 1 ;						  
    res = 1						      	for ( int r = 1 ;					      int res = 1 ;						  
    for r in range ( 1 , n + 1 ) :			      	r <= n ;						      for ( int r = 1 ;						  
	nCr = ( nCr * ( n + 1 - r ) ) / r ;		      	r ++ ) {						      r <= n ;							  
	res += nCr * nCr ;				      	  nCr = ( nCr * ( n + 1 - r ) ) / r ;			      r ++ ) {							  
    return res ;					      	  res += nCr * nCr ;					    	nCr = ( nCr * ( n + 1 - r ) ) / r ;			  
							      	}							    	;							  
							      	return res ;						    	res += nCr * nCr ;					  
							      }								      }								  
							      								      ;								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
def isPrime ( p ) :					      static boolean isPrime ( int p ) {			    public static boolean isPrime ( int p ) {			  failure : #Results:9, 10
    checkNumber = 2 ** p - 1				      	double checkNumber = Math . pow ( 2 , p ) - 1 ;		      int checkNumber = 2 * p - 1 ;				  
    nextval = 4 % checkNumber				      	double nextval = 4 % checkNumber ;			      int nextval = 4 % checkNumber ;				  
    for i in range ( 1 , p - 1 ) :			      	for ( int i = 1 ;					      for ( int i = 1 ;						  
	nextval = ( nextval * nextval - 2 ) % checkNumber     	i < p - 1 ;						      i <= p - 1 ;						  
    if ( nextval == 0 ) : return True			      	i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ;    i ++ ) {							  
    else : return False					      	return ( nextval == 0 ) ;				    	nextval = ( nextval * nextval - 2 ) % checkNumber ;	  
							      }								      }								  
							      								      if ( ( nextval == 0 ) && ( nextval != 1 ) ) {		  
							      								    	return true ;						  
							      								      }								  
							      								      else {							  
							      								    	return false ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
def minXOR ( arr , n ) :				      static int minXOR ( int arr [ ] , int n ) {		    public static int minXOR ( int [ ] arr , int n ) {		  failure : #Results:9, 10
    arr.sort ( )					      	Arrays . parallelSort ( arr ) ;				      Arrays . sort ( arr ) ;					  
    minXor = int ( sys.float_info.max )			      	int minXor = Integer . MAX_VALUE ;			      int minXor = Integer . MAX_VALUE ;			  
    val = 0						      	int val = 0 ;						      int val ;							  
    for i in range ( 0 , n - 1 ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	val = arr [ i ] ^ arr [ i + 1 ]			      	i < n - 1 ;						      i <= n - 1 ;						  
	minXor = min ( minXor , val )			      	i ++ ) {						      i ++ ) {							  
    return minXor					      	  val = arr [ i ] ^ arr [ i + 1 ] ;			    	val = arr [ i ] ^ arr [ i + 1 ] ;			  
							      	  minXor = Math . min ( minXor , val ) ;		    	minXor = Math . min ( minXor , val ) ;			  
							      	}							      }								  
							      	return minXor ;						      return minXor ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
def binarySearch ( arr , l , r , x ) :			      int binarySearch ( int arr [ ] , int x ) {		    public static int binarySearch ( int [ ] arr , int l , int r  script_not_found : None
    while l <= r :					      	int l = 0 , r = arr . length - 1 ;			      while ( l <= r ) {					  
	mid = l + ( r - l ) // 2			      	while ( l <= r ) {					    	int mid = l + ( r - l ) / 2 ;				  
	if arr [ mid ] == x :				      	  int m = l + ( r - l ) / 2 ;				    	if ( arr [ mid ] == x ) {				  
	    return mid					      	  if ( arr [ m ] == x ) return m ;			    	  return mid ;						  
	elif arr [ mid ] < x :				      	  if ( arr [ m ] < x ) l = m + 1 ;			    	}							  
	    l = mid + 1					      	  else r = m - 1 ;					    	else if ( arr [ mid ] < x ) {				  
	else :						      	}							    	  l = mid + 1 ;						  
	    r = mid - 1					      	return - 1 ;						    	}							  
    return - 1						      }								    	else {							  
							      								    	  r = mid - 1 ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
def countIntegralSolutions ( n ) :			      static int countIntegralSolutions ( int n ) {		    public static int countIntegralSolutions ( int n ) {	  success : None
    result = 0						      	int result = 0 ;					      int result = 0 ;						  
    for i in range ( n + 1 ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( n + 1 ) :			      	i <= n ;						      i < n + 1 ;						  
	    for k in range ( n + 1 ) :			      	i ++ ) for ( int j = 0 ;				      i ++ ) {							  
		if i + j + k == n :			      	j <= n - i ;						    	for ( int j = 0 ;					  
		    result += 1				      	j ++ ) for ( int k = 0 ;				    	j < n + 1 ;						  
    return result					      	k <= ( n - i - j ) ;					    	j ++ ) {						  
							      	k ++ ) if ( i + j + k == n ) result ++ ;		    	  for ( int k = 0 ;					  
							      	return result ;						    	  k < n + 1 ;						  
							      }								    	  k ++ ) {						  
							      								    	    if ( i + j + k == n ) {				  
							      								    	      result ++ ;					  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
def power ( x , y , p ) :				      static int power ( int x , int y , int p ) {		    public static int power ( int x , int y , int p ) {		  error : MODULAR_EXPONENTIATION_POWER_IN_MODULAR_AR
    res = 1						      	int res = 1 ;						      int res = 1 ;						  ITHMETIC.java:37: error: illegal start of expressi
    x = x % p						      	x = x % p ;						      x = x % p ;						  on public static void main(String args[]) { ^ 1 er
    while ( y > 0 ) :					      	while ( y > 0 ) {					      while ( ( y > 0 ) && ( ( y & 1 ) == 1 ) ) {		  ror
	if ( ( y & 1 ) == 1 ) :				      	  if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;		    	if ( ( ( y & 1 ) == 1 ) || ( ( y & 2 ) == 2 ) ) {	  
	    res = ( res * x ) % p			      	  y = y >> 1 ;						    	  res = ( res * x ) % p ;				  
	y = y >> 1					      	  x = ( x * x ) % p ;					    	}							  
	x = ( x * x ) % p				      	}							    	y = y >> 1 ;						  
    return res						      	return res ;						    	x = ( x * x ) % p ;					  
							      }								      }								  
-							      -								      return-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
def minPerimeter ( n ) :				      public static long minPerimeter ( int n ) {		    public static int minPerimeter ( int n ) {			  error : MINIMUM_PERIMETER_N_BLOCKS.java:38: error:
    l = math.sqrt ( n )					      	int l = ( int ) Math . sqrt ( n ) ;			      int l = Math . sqrt ( n ) ;				   ';' expected	    return perimeter
    sq = l * l						      	int sq = l * l ;					      int sq = l * l ;						       ^ MINIMUM_PERIMETER_N_BLOCKS.java:40: error:
    if ( sq == n ) :					      	if ( sq == n ) return l * 4 ;				      if ( ( sq == n ) && ( sq == n ) ) {			  illegal start of expression public static void mai
	return l * 4					      	else {							    	return l * 4 ;						  n(String args[]) { ^ 2 errors
    else :						      	  long row = n / l ;					      }								  
	row = n / l					      	  long perimeter = 2 * ( l + row ) ;			      else {							  
	perimeter = 2 * ( l + row )			      	  if ( n % l != 0 ) perimeter += 2 ;			    	int row = n / l ;					  
	if ( n % l != 0 ) :				      	  return perimeter ;					    	int perimeter = 2 * ( l + row ) ;			  
	    perimeter += 2				      	}							    	if ( ( n % l != 0 ) && ( n % l != 0 ) ) {		  
	return perimeter				      }								    	  perimeter += 2 ;					  
							      								    	}							  
-							      -								    	return perimeter-					  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2
--							      --							    --								  --
def numberOfPaths ( p , q ) :				      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int p , int q ) {		  error : COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT
    dp = [ 1 for i in range ( q ) ]			      	int [ ] dp = new int [ n ] ;				      int [ ] dp = new int [ q ] ;				  _NXM_MATRIX_2.java:47: error: illegal start of exp
    for i in range ( p - 1 ) :				      	dp [ 0 ] = 1 ;						      for ( int i = 0 ;						  ression public static void main(String args[]) { ^
	for j in range ( 1 , q ) :			      	for ( int i = 0 ;					      i < q ;							   1 error
	    dp [ j ] += dp [ j - 1 ]			      	i < m ;							      i ++ ) {							  
    return dp [ q - 1 ]					      	i ++ ) {						    	dp [ i ] = 1 ;						  
							      	  for ( int j = 1 ;					      }								  
							      	  j < n ;						      for ( int i = 0 ;						  
							      	  j ++ ) {						      i < p - 1 ;						  
							      	    dp [ j ] += dp [ j - 1 ] ;				      i ++ ) {							  
							      	  }							    	for ( int j = 1 ;					  
							      	}							    	j < q ;							  
							      	return dp [ n - 1 ] ;					    	j ++ ) {						  
							      }								    	  dp [ j ] += dp [ j - 1 ] ;				  
							      								    	}							  
							      								      }								  
-							      -								      return dp [ q --						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
def isPowerOfFour ( n ) :				      static int isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
    count = 0						      	int count = 0 ;						      int count = 0 ;						  4_OR_NOT_1.java:29: error: bad operand type int fo
    if ( n and ( not ( n & ( n - 1 ) ) ) ) :		      	int x = n & ( n - 1 ) ;					      if ( ( n > 0 ) && ( ! ( n & ( n - 1 ) ) ) ) {		  r unary operator '!'	 if ( ( n > 0 ) && ( ! ( n &
	while ( n > 1 ) :				      	if ( n > 0 && x == 0 ) {				    	while ( ( n > 1 ) ) {					   ( n - 1 ) ) ) ) {			   ^ FIND_WH
	    n >>= 1					      	  while ( n > 1 ) {					    	  n >>= 1 ;						  ETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1.java
	    count += 1					      	    n >>= 1 ;						    	  count ++ ;						  :60: error: incomparable types: boolean and int
	if ( count % 2 == 0 ) :				      	    count += 1 ;					    	}							  	if(f_filled(param0.get(i)) == f_gold(param0.
	    return True					      	  }							    	if ( ( count % 2 == 0 ) && ( n > 0 ) ) {		  get(i)))				      ^ 2 er
	else :						      	  return ( count % 2 == 0 ) ? 1 : 0 ;			    	  return true ;						  rors
	    return False				      	}							    	}							  
							      	return 0 ;						    	else {							  
							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
def subArray ( arr , n ) :				      static void subArray ( int n ) {				    public static void subArray ( int [ ] arr , int n ) {	  script_not_found : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i , n ) :			      	i < n ;							      i <= n ;							  
	    for k in range ( i , j + 1 ) :		      	i ++ ) {						      i ++ ) {							  
		print ( arr [ k ] , end = "" )		      	  for ( int j = i ;					    	for ( int j = i ;					  
	    print ( "\n" , end = "" )			      	  j < n ;						    	j <= n ;						  
							      	  j ++ ) {						    	j ++ ) {						  
							      	    for ( int k = i ;					    	  for ( int k = i ;					  
							      	    k <= j ;						    	  k <= j ;						  
							      	    k ++ ) System . out . print ( arr [ k ] + " " ) ;	    	  k ++ ) {						  
							      	  }							    	    System . out . print ( arr [ k ] + " " ) ;		  
							      	}							    	  }							  
							      }								    	  System . out . print ( "\n" + "" ) ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
def countDivisibles ( arr , n ) :			      static int countDivisibles ( int arr [ ] , int n ) {	    public static int countDivisibles ( int [ ] arr , int n ) {	  script_not_found : None
    res = 0						      	int res = 0 ;						      int res = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if ( arr [ i ] % arr [ j ] == 0 or arr [ j ] % ar 	i ++ ) for ( int j = i + 1 ;				      i ++ ) {							  
		res += 1				      	j < n ;							    	for ( int j = i + 1 ;					  
    return res						      	j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ 	j <= n ;						  
							      	return res ;						    	j ++ ) {						  
							      }								    	  if ( ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [  
-							      -								    	    res-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
def findCombinations ( string , index , out ) :		      static void findCombinations ( String str , int index , Strin public static void findCombinations ( String string , int ind script_not_found : None
    if index == len ( string ) :			      	if ( index == str . length ( ) ) System . out . println ( o   if ( index == string . length ( ) ) {			  
	print ( out )					      	for ( int i = index ;					    	System . out . println ( out ) ;			  
    for i in range ( index , len ( string ) , 1 ) :	      	i < str . length ( ) ;					      }								  
	findCombinations ( string , i + 1 , out + "(" + strin 	i ++ ) findCombinations ( str , i + 1 , out + "(" + str . s   for ( int i = index ;					  
							      }								      i < string . length ( ) ;					  
							      								      i += 1 ) {						  
							      								    	findCombinations ( string , i + 1 , out + "(" + string .  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
def decToBinary ( n ) :					      static void decToBinary ( int n ) {			    public static void decToBinary ( int n ) {			  script_not_found : None
    binaryNum = [ 0 ] * n				      	int [ ] binaryNum = new int [ 32 ] ;			      int [ ] binaryNum = new int [ n ] ;			  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    while ( n > 0 ) :					      	while ( n > 0 ) {					      while ( ( n > 0 ) && ( i < n ) ) {			  
	binaryNum [ i ] = n % 2				      	  binaryNum [ i ] = n % 2 ;				    	binaryNum [ i ] = n % 2 ;				  
	n = int ( n / 2 )				      	  n = n / 2 ;						    	n = ( int ) ( n / 2 ) ;					  
	i += 1						      	  i ++ ;						    	i ++ ;							  
    for j in range ( i - 1 , - 1 , - 1 ) :		      	}							      }								  
	print ( binaryNum [ j ] , end = "" )		      	for ( int j = i - 1 ;					      for ( int j = i - 1 ;					  
							      	j >= 0 ;						      j >= 0 ;							  
							      	j -- ) System . out . print ( binaryNum [ j ] ) ;	      j -- ) {							  
							      }								    	System . out . print ( binaryNum [ j ] + "		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
def printDistinct ( arr , n ) :				      static void printDistinct ( int arr [ ] ) {		    public static void printDistinct ( int [ ] arr , int n ) {	  script_not_found : None
    s = dict ( )					      	HashSet < Integer > set = new HashSet < > ( ) ;		      Map s = new HashMap ( ) ;					  
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	if ( arr [ i ] not in s.keys ( ) ) :		      	i < arr . length ;					      i < n ;							  
	    s [ arr [ i ] ] = arr [ i ]			      	i ++ ) {						      i ++ ) {							  
	    print ( arr [ i ] , end = " " )		      	  if ( ! set . contains ( arr [ i ] ) ) {		    	if ( ( arr [ i ] != null ) && ( arr [ i ] != 0 ) ) {	  
							      	    set . add ( arr [ i ] ) ;				    	  s . put ( arr [ i ] , arr [ i ] ) ;			  
							      	    System . out . print ( arr [ i ] + " " ) ;		    	  System . out . print ( arr [ i ] + " " ) ;		  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
def nearestSmallerEqFib ( n ) :				      public static int nearestSmallerEqFib ( int n ) {		    public static int nearestSmallerEqFib ( int n ) {		  success : None
    if ( n == 0 or n == 1 ) :				      	if ( n == 0 || n == 1 ) return n ;			      if ( ( n == 0 || n == 1 ) && ( n == 2 || n == 3 ) ) return  
	return n					      	int f1 = 0 , f2 = 1 , f3 = 1 ;				      int f1 = 0 , f2 = 1 , f3 = 1 ;				  
    f1 , f2 , f3 = 0 , 1 , 1				      	while ( f3 <= n ) {					      while ( ( f3 <= n ) && ( f1 < n ) ) {			  
    while ( f3 <= n ) :					      	  f1 = f2 ;						    	f1 = f2 ;						  
	f1 = f2 ;					      	  f2 = f3 ;						    	f2 = f3 ;						  
	f2 = f3 ;					      	  f3 = f1 + f2 ;					    	f3 = f1 + f2 ;						  
	f3 = f1 + f2 ;					      	}							      }								  
    return f2 ;						      	return f2 ;						      return f2 ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
def maxTasks ( high , low , n ) :			      static int maxTasks ( int high [ ] , int low [ ] , int n ) {  static int maxTasks ( int high [ ] , int low [ ] , int n ) {  success : None
    if ( n <= 0 ) :					      	if ( n <= 0 ) return 0 ;				      if ( ( n <= 0 ) || ( n > ( long ) n ) ) return 0 ;	  
	return 0					      	return Math . max ( high [ n - 1 ] + maxTasks ( high , low    return Math . max ( high [ n - 1 ] + maxTasks ( high , low  
    return max ( high [ n - 1 ] + maxTasks ( high , low , ( n }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
def sequence ( n ) :					      static int sequence ( int n ) {				    public static int sequence ( int n ) {			  error : NEWMAN_CONWAY_SEQUENCE_1.java:35: error: c
    f = array.array ( 'i' , [ 0 , 1 , 1 ] )		      	int f [ ] = new int [ n + 1 ] ;				      int [ ] f = new int [ n + 1 ] ;				  annot find symbol   return r ;	  ^   symbol
    for i in range ( 3 , n + 1 ) :			      	f [ 0 ] = 0 ;						      for ( int i = 3 ;						  :   variable r   location: class NEWMAN_CONWAY_SEQ
	r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]	      	f [ 1 ] = 1 ;						      i <= n ;							  UENCE_1 1 error
	f.append ( r ) ;				      	f [ 2 ] = 1 ;						      i ++ ) {							  
    return r						      	int i ;							    	int r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	  
							      	for ( i = 3 ;						    	f [ i ] = r ;						  
							      	i <= n ;						    	;							  
							      	i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]    }								  
							      	return f [ n ] ;					      return r ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_GAMES_PLAYED_WINNER				      MAXIMUM_GAMES_PLAYED_WINNER				    MAXIMUM_GAMES_PLAYED_WINNER					  MAXIMUM_GAMES_PLAYED_WINNER
--							      --							    --								  --
def maxGameByWinner ( N ) :				      static int maxGameByWinner ( int N ) {			    public static int maxGameByWinner ( int N ) {		  success : None
    dp = [ 0 for i in range ( N ) ]			      	int [ ] dp = new int [ N ] ;				      int [ ] dp = new int [ N ] ;				  
    dp [ 0 ] = 1					      	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
    dp [ 1 ] = 2					      	dp [ 1 ] = 2 ;						      dp [ 1 ] = 2 ;						  
    i = 1						      	int i = 2 ;						      int i = 1 ;						  
    while dp [ i ] <= N :				      	do {							      while ( dp [ i ] <= N ) {					  
	i = i + 1					      	  dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		    	i = i + 1 ;						  
	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ]		      	}							    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		  
    return ( i - 1 )					      	while ( dp [ i ++ ] <= N ) ;				      }								  
							      	return ( i - 2 ) ;					      return ( i - 1 ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OPERATIONS_MAKE_STRINGAB_FREE			      COUNT_OPERATIONS_MAKE_STRINGAB_FREE			    COUNT_OPERATIONS_MAKE_STRINGAB_FREE				  COUNT_OPERATIONS_MAKE_STRINGAB_FREE
--							      --							    --								  --
def abFree ( s ) :					      static int abFree ( char [ ] s ) {			    public static int abFree ( String s ) {			  error : COUNT_OPERATIONS_MAKE_STRINGAB_FREE.java:6
    b_count = 0						      	int b_count = 0 ;					      int bCount = 0 ;						  4: error: incompatible types: char[] cannot be con
    res = 0						      	int res = 0 ;						      int res = 0 ;						  verted to String	   if(f_filled(param0.get(i)
    for i in range ( len ( s ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  ) == f_gold(param0.get(i)))
	if s [ ~ i ] == 'a' :				      	i < s . length ;					      i < s . length ( ) ;					  	  ^ Note: Some messages have been simplified
	    res = ( res + b_count )			      	i ++ ) {						      i ++ ) {							  ; recompile with -Xdiags:verbose to get full outpu
	    b_count = ( b_count * 2 )			      	  if ( s [ s . length - i - 1 ] == 'a' ) {		    	if ( s . charAt ( ~ i ) == 'a' ) {			  t 1 error
	else :						      	    res = ( res + b_count ) ;				    	  res = ( res + bCount ) ;				  
	    b_count += 1				      	    b_count = ( b_count * 2 ) ;				    	  bCount = ( bCount * 2 ) ;				  
    return res						      	  }							    	}							  
							      	  else {						    	else {							  
							      	    b_count += 1 ;					    	  bCount ++ ;						  
							      	  }							    	}							  
							      	}							      }								  
							      	return res ;						      return res ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
def printDistinct ( arr , n ) :				      static void printDistinct ( int arr [ ] , int n ) {	    public static void printDistinct ( int [ ] arr , int n ) {	  script_not_found : None
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	d = 0						      	i < n ;							      i <= n ;							  
	for j in range ( 0 , i ) :			      	i ++ ) {						      i ++ ) {							  
	    if ( arr [ i ] == arr [ j ] ) :		      	  int j ;						    	int d = 0 ;						  
		d = 1					      	  for ( j = 0 ;						    	for ( int j = 0 ;					  
		break					      	  j < i ;						    	j <= i ;						  
	if ( d == 0 ) :					      	  j ++ ) if ( arr [ i ] == arr [ j ] ) break ;		    	j ++ ) {						  
	    print ( arr [ i ] )				      	  if ( i == j ) System . out . print ( arr [ i ] + " " ) ;  	  if ( ( arr [ i ] == arr [ j ] ) && ( arr [ i ] != 0 ) ) 
							      	}							    	    d = 1 ;						  
							      }								    	    break ;						  
							      								    	  }							  
							      								    	}							  
							      								    	if ( ( d == 0 ) || ( d == 1 ) ) {			  
-							      -								    	  -							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
def findElements ( arr , n ) :				      static void findElements ( int arr [ ] , int n ) {	    public static void findElements ( int [ ] arr , int n ) {	  script_not_found : None
    for i in range ( n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count = 0					      	i < n ;							      i < n ;							  
	for j in range ( 0 , n ) :			      	i ++ ) {						      i ++ ) {							  
	    if arr [ j ] > arr [ i ] :			      	  int count = 0 ;					    	int count = 0 ;						  
		count = count + 1			      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
	if count >= 2 :					      	  j < n ;						    	j <= n ;						  
	    print ( arr [ i ] , end = " " )		      	  j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;	    	j ++ ) {						  
							      	  if ( count >= 2 ) System . out . print ( arr [ i ] + " "  	  if ( arr [ j ] > arr [ i ] ) {			  
							      	}							    	    count = count + 1 ;					  
							      }								    	  }							  
							      								    	}							  
							      								    	if ( count >= 2 ) {					  
							      								    	  System . out . print ( arr [ i ] + " " ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
def isIdentity ( mat , N ) :				      static boolean isIdentity ( int mat [ ] [ ] , int N ) {	    public static boolean isIdentity ( int [ ] [ ] mat , int N )  error : PROGRAM_PRINT_IDENTITY_MATRIX_1.java:38: e
    for row in range ( N ) :				      	for ( int row = 0 ;					      for ( int row = 0 ;					  rror: ')' expected	   else if ( ( row != col &&
	for col in range ( N ) :			      	row < N ;						      row < N ;							   mat [ row ]
	    if ( row == col and mat [ row ] [ col ] != 1 ) :  	row ++ ) {						      row ++ ) {						  	^ PROGRAM_PRINT_IDENTITY_MATRIX_1.java:40: e
		return False				      	  for ( int col = 0 ;					    	for ( int col = 0 ;					  rror: illegal start of expression public static vo
	    elif ( row != col and mat [ row ] [ col ] != 0 )  	  col < N ;						    	col < N ;						  id main(String args[]) { ^ 2 errors
		return False				      	  col ++ ) {						    	col ++ ) {						  
    return True						      	    if ( row == col && mat [ row ] [ col ] != 1 ) return fa 	  if ( ( row == col && mat [ row ] [ col ] != 1 ) || ( ro 
							      	    else if ( row != col && mat [ row ] [ col ] != 0 ) retu 	    return false ;					  
							      	  }							    	  }							  
							      	}							    	  else if ( ( row != col && mat [ row ]			  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
def insertSorted ( arr , n , key , capacity ) :		      static int insertSorted ( int arr [ ] , int n , int key , int public static int insertSorted ( int [ ] arr , int n , int ke success : None
    if ( n >= capacity ) :				      	if ( n >= capacity ) return n ;				      if ( ( n >= capacity ) && ( n < arr . length ) ) {	  
	return n					      	int i ;							    	return n ;						  
    i = n - 1						      	for ( i = n - 1 ;					      }								  
    while i >= 0 and arr [ i ] > key :			      	( i >= 0 && arr [ i ] > key ) ;				      int i = n - 1 ;						  
	arr [ i + 1 ] = arr [ i ]			      	i -- ) arr [ i + 1 ] = arr [ i ] ;			      while ( i >= 0 && arr [ i ] > key ) {			  
	i -= 1						      	arr [ i + 1 ] = key ;					    	arr [ i + 1 ] = arr [ i ] ;				  
    arr [ i + 1 ] = key					      	return ( n + 1 ) ;					    	i -- ;							  
    return ( n + 1 )					      }								      }								  
							      								      arr [ i + 1 ] = key ;					  
							      								      return ( n + 1 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
def solve ( arr , n ) :					      static int solve ( int arr [ ] , int n ) {		    public static int solve ( int [ ] arr , int n ) {		  failure : #Results:9, 10
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    a = 0 b = 0						      	int a = 0 , b = 0 ;					      int a = 0 ;						  
    for i in range ( n ) :				      	for ( int i = 0 ;					      int b = 0 ;						  
	if ( i % 2 != 0 ) :				      	i < n ;							      for ( int i = 0 ;						  
	    a = a * 10 + arr [ i ]			      	i ++ ) {						      i < n ;							  
	else :						      	  if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;		      i ++ ) {							  
	    b = b * 10 + arr [ i ]			      	  else b = b * 10 + arr [ i ] ;				    	if ( ( i % 2 != 0 ) && ( arr [ i ] != 0 ) ) a = a * 10 +  
    return a + b					      	}							    	else b = b * 10 + arr [ i ] ;				  
							      	return a + b ;						      }								  
							      }								      return a + b ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION
--							      --							    --								  --
def findMinX ( num , rem , k ) :			      static int findMinX ( int num [ ] , int rem [ ] , int k ) {   public static int findMinX ( int [ ] num , int [ ] rem , int  script_not_found : None
    x = 1						      	int x = 1 ;						      int x = 1 ;						  
    while ( True ) :					      	while ( true ) {					      while ( ( true ) && ( x < k ) ) {				  
	j = 0						      	  int j ;						    	int j = 0 ;						  
	while ( j < k ) :				      	  for ( j = 0 ;						    	while ( ( j < k ) ) {					  
	    if ( x % num [ j ] != rem [ j ] ) :		      	  j < k ;						    	  if ( ( x % num [ j ] != rem [ j ] ) && ( j < k ) ) {	  
		break					      	  j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	    	    break ;						  
	    j += 1					      	  if ( j == k ) return x ;				    	  }							  
	if ( j == k ) :					      	  x ++ ;						    	  j ++ ;						  
	    return x					      	}							    	}							  
	x += 1						      }								    	if ( ( j == k ) || ( j == k ) ) {			  
-							      -								    	  -							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
def countNegative ( M , n , m ) :			      static int countNegative ( int M [ ] [ ] , int n , int m ) {  public static int countNegative ( int [ ] [ ] M , int n , int success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    i = 0						      	int i = 0 ;						      int i = 0 ;						  
    j = m - 1						      	int j = m - 1 ;						      int j = m - 1 ;						  
    while j >= 0 and i < n :				      	while ( j >= 0 && i < n ) {				      while ( j >= 0 && i < n ) {				  
	if M [ i ] [ j ] < 0 :				      	  if ( M [ i ] [ j ] < 0 ) {				    	if ( M [ i ] [ j ] < 0 ) {				  
	    count += ( j + 1 )				      	    count += j + 1 ;					    	  count += ( j + 1 ) ;					  
	    i += 1					      	    i += 1 ;						    	  i ++ ;						  
	else :						      	  }							    	}							  
	    j -= 1					      	  else j -= 1 ;						    	else {							  
    return count					      	}							    	  j -- ;						  
							      	return count ;						    	}							  
							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
def to_upper ( string ) :				      static String to_upper ( char [ ] in ) {			    public static String toUpperCase ( String string ) {	  error : LOWER_CASE_UPPER_CASE_INTERESTING_FACT.jav
    for i in range ( len ( string ) ) :			      	for ( int i = 0 ;					      for ( int i = 0 ;						  a:30: error: <identifier> expected	   string =
	if ( 'a' <= string [ i ] <= 'z' ) :		      	i < in . length ;					      i < string . length ( ) ;					  ( string . substring ( 0 , i ) + Character . f_fil
	    string = ( string [ 0 : i ] + chr ( ord ( string  	i ++ ) {						      i ++ ) {							  led ( string .
    return string					      	  if ( 'a' <= in [ i ] & in [ i ] <= 'z' ) {		    	if ( ( 'a' <= string . charAt ( i ) && string . charAt (  					      ^ LOWE
							      	    in [ i ] = ( char ) ( in [ i ] - 'a' + 'A' ) ;	    	  string = ( string . substring ( 0 , i ) + Character . t R_CASE_UPPER_CASE_INTERESTING_FACT.java:32: error:
							      	  }							    								   illegal start of expression public static void ma
							      	}							    								  in(String args[]) { ^ 2 errors
							      	return String . valueOf ( in ) ;			    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
def countPairsWithDiffK ( arr , n , k ) :		      static int countPairsWithDiffK ( int arr [ ] , int n , int k  public static int countPairsWithDiffK ( int [ ] arr , int n , success : None
    count = 0						      	int count = 0 ;						      int count = 0 ;						  
    for i in range ( 0 , n ) :				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	for j in range ( i + 1 , n ) :			      	i < n ;							      i <= n ;							  
	    if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  	i ++ ) {						      i ++ ) {							  
		count += 1				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    return count					      	  j < n ;						    	j <= n ;						  
							      	  j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 	j ++ ) {						  
							      	}							    	  if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr [ i  
							      	return count ;						    	    count ++ ;						  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
def checkIsAP ( arr , n ) :				      static boolean checkIsAP ( int arr [ ] , int n ) {	    public static boolean checkIsAP ( int [ ] arr , int n ) {	  success : None
    if ( n == 1 ) : return True				      	if ( n == 1 ) return true ;				      if ( ( n == 1 ) || ( n == 2 ) ) return true ;		  
    arr.sort ( )					      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
    d = arr [ 1 ] - arr [ 0 ]				      	int d = arr [ 1 ] - arr [ 0 ] ;				      int d = arr [ 1 ] - arr [ 0 ] ;				  
    for i in range ( 2 , n ) :				      	for ( int i = 2 ;					      for ( int i = 2 ;						  
	if ( arr [ i ] - arr [ i - 1 ] != d ) :		      	i < n ;							      i < n ;							  
	    return False				      	i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;   i ++ ) {							  
    return True						      	return true ;						    	if ( ( arr [ i ] - arr [ i - 1 ] ) != d ) return false ;  
							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
def insertionSortRecursive ( arr , n ) :		      static void insertionSortRecursive ( int arr [ ] , int n ) {  public static void insertionSortRecursive ( int [ ] arr , int script_not_found : None
    if n <= 1 :						      	if ( n <= 1 ) return ;					      if ( n <= 1 ) return ;					  
	return						      	insertionSortRecursive ( arr , n - 1 ) ;		      insertionSortRecursive ( arr , n - 1 ) ;			  
    insertionSortRecursive ( arr , n - 1 )		      	int last = arr [ n - 1 ] ;				      int last = arr [ n - 1 ] ;				  
    last = arr [ n - 1 ]				      	int j = n - 2 ;						      int j = n - 2 ;						  
    j = n - 2						      	while ( j >= 0 && arr [ j ] > last ) {			      while ( ( j >= 0 ) && arr [ j ] > last ) {		  
    while ( j >= 0 and arr [ j ] > last ) :		      	  arr [ j + 1 ] = arr [ j ] ;				    	arr [ j + 1 ] = arr [ j ] ;				  
	arr [ j + 1 ] = arr [ j ]			      	  j -- ;						    	j = j - 1 ;						  
	j = j - 1					      	}							      }								  
    arr [ j + 1 ] = last				      	arr [ j + 1 ] = last ;					      arr [ j + 1 ] = last ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
