========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
static double findArea ( int r ) {			      def findArea ( r ) :					    def find_area ( r ) :					  error : Traceback (most recent call last):   File
  return PI * Math . pow ( r , 2 ) ;			      	  PI = 3.142						    	return PI * pow ( r , 2 )				  "dump/transcoder/eval/java_python/model_2/transcod
}							      	  return PI * ( r * r )					    								  er_eval/20642196/eval_scripts/java_sa-python_sa.va
							      								    								  lid/C_PROGRAM_FIND_AREA_CIRCLE.py", line 41, in <m
							      								    								  odule>     if abs(1 - (0.0000001 + abs(f_gold(*par
							      								    								  ameters_set))) / (abs(f_filled(*parameters_set)) +
							      								    								   0.0000001)) < 0.001:	  File "dump/transcoder/eval
							      								    								  /java_python/model_2/transcoder_eval/20642196/eval
							      								    								  _scripts/java_sa-python_sa.valid/C_PROGRAM_FIND_AR
							      								    								  EA_CIRCLE.py", line 23, in f_filled	  return PI
							      								    								  * pow ( r , 2 ) NameError: name 'PI' is not define
							      								    								  d
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
static int perimeter ( int diameter , int height ) {	      def perimeter ( diameter , height ) :			    def perimeter ( diameter , height ) :			  success : identical to gold
  return 2 * ( diameter + height ) ;			      	  return 2 * ( diameter + height )			    	return 2 * ( diameter + height )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1
--							      --							    --								  --
public static int kthgroupsum ( int k ) {		      def kthgroupsum ( k ) :					    def kthgroupsum ( k ) :					  success : identical to gold
  return k * k * k ;					      	  return k * k * k					    	return k * k * k					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION						      TAIL_RECURSION						    TAIL_RECURSION						  TAIL_RECURSION
--							      --							    --								  --
static int fact ( int n ) {				      def fact ( n ) :						    def fact ( n ) :						  success : None
  if ( n == 0 ) return 1 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  return n * fact ( n - 1 ) ;				      	      return 1						    	    return 1						  
}							      	  return n * fact ( n - 1 )				    	return n * fact ( n - 1 )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_TO_MULTIPLY_WITH_7			      EFFICIENT_WAY_TO_MULTIPLY_WITH_7				    EFFICIENT_WAY_TO_MULTIPLY_WITH_7				  EFFICIENT_WAY_TO_MULTIPLY_WITH_7
--							      --							    --								  --
static int multiplyBySeven ( int n ) {			      def multiplyBySeven ( n ) :				    def multiplyBySeven ( n ) :					  success : identical to gold
  return ( ( n << 3 ) - n ) ;				      	  return ( ( n << 3 ) - n )				    	return ( ( n << 3 ) - n )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES_1				      NUMBER_TRIANGLES_N_MOVES_1				    NUMBER_TRIANGLES_N_MOVES_1					  NUMBER_TRIANGLES_N_MOVES_1
--							      --							    --								  --
public static double numberOfTriangles ( int n ) {	      def numberOfTriangles ( n ) :				    def number_of_triangles ( n ) :				  error : Traceback (most recent call last):   File
  double ans = 2 * ( pow ( 3 , n ) ) - 1 ;		      	  ans = 2 * ( pow ( 3 , n ) ) - 1			    	ans = 2 ** ( pow ( 3 , n ) ) - 1			  "dump/transcoder/eval/java_python/model_2/transcod
  return ans ;						      	  return ans						    	return ans						  er_eval/20642196/eval_scripts/java_sa-python_sa.va
}							      								    								  lid/NUMBER_TRIANGLES_N_MOVES_1.py", line 42, in <m
							      								    								  odule>     if abs(1 - (0.0000001 + abs(f_gold(*par
							      								    								  ameters_set))) / (abs(f_filled(*parameters_set)) +
							      								    								   0.0000001)) < 0.001:	  File "dump/transcoder/eval
							      								    								  /java_python/model_2/transcoder_eval/20642196/eval
							      								    								  _scripts/java_sa-python_sa.valid/NUMBER_TRIANGLES_
							      								    								  N_MOVES_1.py", line 23, in f_filled	  ans = 2 **
							      								    								   ( pow ( 3 , n ) ) - 1 OverflowError: (34, 'Numeri
							      								    								  cal result out of range')
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_NUMBER_USING_LOG				      SQUARE_ROOT_NUMBER_USING_LOG				    SQUARE_ROOT_NUMBER_USING_LOG				  SQUARE_ROOT_NUMBER_USING_LOG
--							      --							    --								  --
static double squareRoot ( double n ) {			      def squareRoot ( n ) :					    def squared_root ( n ) :					  script_not_found : None
  return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . l 	  return pow ( 2 , 0.5 * math.log2 ( n ) )		    	return pow ( 2 , 0.5 * ( log ( n ) / log ( 2 ) ) )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			      MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			    MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			  MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA
--							      --							    --								  --
static double minHeight ( double base , double area ) {	      def minHeight ( area , base ) :				    def minHeight ( base , area ) :				  success : None
  double d = ( 2 * area ) / base ;			      	  return math.ceil ( ( 2 * area ) / base )		    	d = ( 2 * area ) / base					  
  return Math . ceil ( d ) ;				      								    	return math.ceil ( d )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
static float circumferenceparallelogram ( float a , float b ) def circumferenceparallelogram ( a , b ) :		    def circumferenceparallelogram ( a , b ) :			  success : identical to gold
  return ( ( 2 * a ) + ( 2 * b ) ) ;			      	  return ( ( 2 * a ) + ( 2 * b ) )			    	return ( ( 2 * a ) + ( 2 * b ) )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
int factorial ( int n ) {				      def factorial ( n ) :					    def factorial ( n ) :					  error : Traceback (most recent call last):   File
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n == 1 or n == 0 ) * factorial ( n - 1 )	  "dump/transcoder/eval/java_python/model_2/transcod
}							      								    								  er_eval/20642196/eval_scripts/java_sa-python_sa.va
							      								    								  lid/C_PROGRAM_FACTORIAL_NUMBER_2.py", line 40, in
							      								    								  <module>     if f_filled(*parameters_set) == f_gol
							      								    								  d(*parameters_set):	File "dump/transcoder/eval/j
							      								    								  ava_python/model_2/transcoder_eval/20642196/eval_s
							      								    								  cripts/java_sa-python_sa.valid/C_PROGRAM_FACTORIAL
							      								    								  _NUMBER_2.py", line 22, in f_filled	  return ( n
							      								    								   == 1 or n == 0 ) * f_filled ( n - 1 )   File "dum
							      								    								  p/transcoder/eval/java_python/model_2/transcoder_e
							      								    								  val/20642196/eval_scripts/java_sa-python_sa.valid/
							      								    								  C_PROGRAM_FACTORIAL_NUMBER_2.py", line 22, in f_fi
							      								    								  lled	   return ( n == 1 or n == 0 ) * f_filled (
							      								    								  n - 1 )   File "dump/transcoder/eval/java_python/m
							      								    								  odel_2/transcoder_eval/20642196/eval_scripts/java_
							      								    								  sa-python_sa.valid/C_PROGRAM_FACTORIAL_NUMBER_2.py
							      								    								  ", line 22, in f_filled     return ( n == 1 or n =
							      								    								  = 0 ) * f_filled ( n - 1 )   [Previous line repeat
							      								    								  ed 995 more times] RecursionError: maximum recursi
							      								    								  on depth exceeded in comparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_CIRCUMSCRIBED_CIRCLE_SQUARE			      AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				    AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				  AREA_CIRCUMSCRIBED_CIRCLE_SQUARE
--							      --							    --								  --
static float areacircumscribed ( float a ) {		      def areacircumscribed ( a ) :				    def areacircumscribed ( a ) :				  script_not_found : None
  float PI = 3.14159265f ;				      	  return ( a * a * ( PI / 2 ) )				    	PI = 3.14159265f					  
  return ( a * a * ( PI / 2 ) ) ;			      								    	return ( a * a * ( PI / 2 ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
static void sortString ( String str ) {			      def sortString ( str ) :					    def sortString ( str ) :					  script_not_found : None
  char [ ] arr = str . toCharArray ( ) ;		      	  str = ''.join ( sorted ( str ) )			    	arr = str.split ( " " )					  
  Arrays . sort ( arr ) ;				      	  print ( str )						    	arr.sort ( )						  
  System . out . print ( String . valueOf ( arr ) ) ;	      								    	print ( str )						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT				      POSITION_OF_RIGHTMOST_SET_BIT				    POSITION_OF_RIGHTMOST_SET_BIT				  POSITION_OF_RIGHTMOST_SET_BIT
--							      --							    --								  --
public static int getFirstSetBitPos ( int n ) {		      def getFirstSetBitPos ( n ) :				    def get_first_set_bit_pos ( n ) :				  success : None
  return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log1 	  return math.log2 ( n & - n ) + 1			    	return int ( ( math.log10 ( n & - n ) ) / math.log10 ( 2  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SEQUENCE_2_22_222					      SUM_SEQUENCE_2_22_222					    SUM_SEQUENCE_2_22_222					  SUM_SEQUENCE_2_22_222
--							      --							    --								  --
static double sumOfSeries ( int n ) {			      def sumOfSeries ( n ) :					    def sum_of_series ( n ) :					  failure : #Results: 3, 10
  return 0.0246 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ; 	  return 0.0246 * ( math.pow ( 10 , n ) - 1 - ( 9 * n ) )   	return 0.0246 * ( np.power ( 10 , n ) - 1 - ( 9 * n ) )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_HEXAGON					      AREA_OF_A_HEXAGON						    AREA_OF_A_HEXAGON						  AREA_OF_A_HEXAGON
--							      --							    --								  --
public static double hexagonArea ( double s ) {		      def hexagonArea ( s ) :					    def hexagon_area ( s ) :					  success : None
  return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;      	  return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 )	    	return ( ( 3 * np.sqrt ( 3 ) * ( s ** 2 ) ) / 2 )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
static int Circumference ( int l , int w ) {		      def Circumference ( l , w ) :				    def Circumference ( l , w ) :				  success : identical to gold
  return ( 2 * ( l + w ) ) ;				      	  return ( 2 * ( l + w ) )				    	return ( 2 * ( l + w ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
int factorial ( int n ) {				      def factorial ( n ) :					    def factorial ( n ) :					  error : Traceback (most recent call last):   File
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n == 1 or n == 0 ) * factorial ( n - 1 )	  "dump/transcoder/eval/java_python/model_2/transcod
}							      								    								  er_eval/20642196/eval_scripts/java_sa-python_sa.va
							      								    								  lid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2.py", line
							      								    								  40, in <module>     if f_filled(*parameters_set) =
							      								    								  = f_gold(*parameters_set):   File "dump/transcoder
							      								    								  /eval/java_python/model_2/transcoder_eval/20642196
							      								    								  /eval_scripts/java_sa-python_sa.valid/PROGRAM_FOR_
							      								    								  FACTORIAL_OF_A_NUMBER_2.py", line 22, in f_filled
							      								    								      return ( n == 1 or n == 0 ) * f_filled ( n - 1
							      								    								   )   File "dump/transcoder/eval/java_python/model_
							      								    								  2/transcoder_eval/20642196/eval_scripts/java_sa-py
							      								    								  thon_sa.valid/PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2.
							      								    								  py", line 22, in f_filled	return ( n == 1 or n
							      								    								   == 0 ) * f_filled ( n - 1 )	 File "dump/transcod
							      								    								  er/eval/java_python/model_2/transcoder_eval/206421
							      								    								  96/eval_scripts/java_sa-python_sa.valid/PROGRAM_FO
							      								    								  R_FACTORIAL_OF_A_NUMBER_2.py", line 22, in f_fille
							      								    								  d	return ( n == 1 or n == 0 ) * f_filled ( n -
							      								    								   1 )	 [Previous line repeated 995 more times] Rec
							      								    								  ursionError: maximum recursion depth exceeded in c
							      								    								  omparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM	      PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		    PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		  PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM
--							      --							    --								  --
static float findVolume ( float l , float b , float h ) {     def findVolume ( l , b , h ) :				    def find_volume ( l , b , h ) :				  success : None
  float volume = ( l * b * h ) / 2 ;			      	  return ( ( l * b * h ) / 2 )				    	volume = ( l * b * h ) / 2				  
  return volume ;					      								    	return volume						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL					      DOUBLE_FACTORIAL						    DOUBLE_FACTORIAL						  DOUBLE_FACTORIAL
--							      --							    --								  --
static long doublefactorial ( long n ) {		      def doublefactorial ( n ) :				    def doublefactorial ( n ) :					  success : None
  if ( n == 0 || n == 1 ) return 1 ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  return n * doublefactorial ( n - 2 ) ;		      	      return 1						    	    return 1						  
}							      	  return n * doublefactorial ( n - 2 )			    	return n * doublefactorial ( n - 2 )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_FACTORIALS_TWO_NUMBERS				      GCD_FACTORIALS_TWO_NUMBERS				    GCD_FACTORIALS_TWO_NUMBERS					  GCD_FACTORIALS_TWO_NUMBERS
--							      --							    --								  --
static int gcdOfFactorial ( int m , int n ) {		      def gcdOfFactorial ( m , n ) :				    def gcdOfFactorial ( m , n ) :				  success : None
  int min = m < n ? m : n ;				      	  return math.factorial ( min ( m , n ) )		    	min = m if m < n else n					  
  return factorial ( min ) ;				      								    	return factorial ( min )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
static boolean checkOrigin ( int x1 , int y1 , int x2 , int y def checkOrigin ( x1 , y1 , x2 , y2 ) :			    def check_origin ( x1 , y1 , x2 , y2 ) :			  success : None
  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ;	      	  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )	    	return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
static int factorial ( int n ) {			      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  int res = 1 , i ;					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	res , i = 1 , 0						  
  for ( i = 2 ;						      								    	for i in range ( 2 , n + 1 ) :				  
  i <= n ;						      								    	    res *= i						  
  i ++ ) res *= i ;					      								    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
static void timeToMeet ( double s , double v ) {	      def timeToMeet ( s , v ) :				    def timeToMeet ( s , v ) :					  script_not_found : None
  double V = 3 * v / 2 ;				      	  V = 3 * v / 2						    	V = 3 * v / 2						  
  double time = s / V ;					      	  time = s / V						    	time = s / V						  
  System . out . println ( ( float ) time ) ;		      	  print ( time )					    	print ( float ( time ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		      ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		    ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER			  ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
static int factorial ( int n ) {			      def factorial ( n ) :					    def factorial ( n ) :					  failure : #Results: 0, 10
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n == 1 or n == 0 )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1
--							      --							    --								  --
static int countIntegralSolutions ( int n ) {		      def countIntegralSolutions ( n ) :			    def count_integral_solutions ( n ) :			  success : None
  return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;		      	  return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )		    	return ( ( n + 1 ) * ( n + 2 ) ) / 2			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER				      COUNT_SET_BITS_IN_AN_INTEGER				    COUNT_SET_BITS_IN_AN_INTEGER				  COUNT_SET_BITS_IN_AN_INTEGER
--							      --							    --								  --
static int countSetBits ( int n ) {			      def countSetBits ( n ) :					    def countSetBits ( n ) :					  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  while ( n > 0 ) {					      	  while ( n ) :						    	while n :						  
    count += n & 1 ;					      	      count += n & 1					    	    count += n & 1					  
    n >>= 1 ;						      	      n >>= 1						    	    n >>= 1						  
  }							      	  return count						    	return count						  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2
--							      --							    --								  --
static int getRemainder ( int num , int divisor ) {	      def getRemainder ( num , divisor ) :			    def getRemainder ( num , divisor ) :			  success : None
  while ( num >= divisor ) num -= divisor ;		      	  while ( num >= divisor ) :				    	while num >= divisor :					  
  return num ;						      	      num -= divisor					    	    num -= divisor					  
}							      	  return num						    	return num						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
static double find ( double p ) {			      def find ( p ) :						    def find ( p ) :						  script_not_found : None
  return Math . ceil ( Math . sqrt ( 2 * 365 * Math . log ( 1 	  return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 	return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE
--							      --							    --								  --
static double areaOfInscribedCircle ( float a ) {	      def areaOfInscribedCircle ( a ) :				    def areaOfInscribedCircle ( a ) :				  script_not_found : None
  return ( PI / 4 ) * a * a ;				      	  return ( PI / 4 ) * a * a				    	return ( PI / 4 ) * a * a				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
static void bin ( int n ) {				      def bin ( n ) :						    def bin ( n ) :						  script_not_found : None
  if ( n > 1 ) bin ( n / 2 ) ;				      	  if n > 1 :						    	if n > 1 :						  
  System . out . print ( n % 2 ) ;			      	      bin ( n // 2 )					    	    bin ( n / 2 )					  
}							      	  print ( n % 2 , end = "" )				    	print ( n % 2 )						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
static int sumOfSeries ( int n ) {			      def sumOfSeries ( n ) :					    def sum_of_series ( n ) :					  success : None
  return ( int ) ( 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0 	  return ( int ) ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * 	return int ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * n ) 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12_1				      SUM_SERIES_12_32_52_2N_12_1				    SUM_SERIES_12_32_52_2N_12_1					  SUM_SERIES_12_32_52_2N_12_1
--							      --							    --								  --
static int sumOfSeries ( int n ) {			      def sumOfSeries ( n ) :					    def sum_of_series ( n ) :					  success : None
  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;	      	  return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )  	return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
static int countNumberOfTriangles ( int n ) {		      def countNumberOfTriangles ( n ) :			    def count_number_of_triangles ( n ) :			  success : None
  return n * ( n - 1 ) * ( n - 2 ) / 6 ;		      	  return ( n * ( n - 1 ) * ( n - 2 ) // 6 )		    	return n * ( n - 1 ) * ( n - 2 ) / 6			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_AREA_TETRAHEDRON				      CALCULATE_AREA_TETRAHEDRON				    CALCULATE_AREA_TETRAHEDRON					  CALCULATE_AREA_TETRAHEDRON
--							      --							    --								  --
static double vol_tetra ( int side ) {			      def vol_tetra ( side ) :					    def vol_tetra ( side ) :					  success : None
  double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sq 	  volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )	    	volume = ( pow ( side , 3 ) / ( 6 * sqrt ( 2 ) ) )	  
  return volume ;					      	  return round ( volume , 2 )				    	return volume						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
static long findSumSubsets ( int n ) {			      def findSumSubsets ( n ) :				    def find_sum_subsets ( n ) :				  success : None
  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) ) ;	      	  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	    	return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
static void myCopy ( char s1 [ ] , char s2 [ ] ) {	      def myCopy ( s1 , s2 ) :					    def my_copy ( s1 , s2 ) :					  script_not_found : None
  int i = 0 ;						      	  for i in range ( len ( s1 ) ) :			    	i = 0							  
  for ( i = 0 ;						      	      s2 [ i ] = s1 [ i ]				    	for c in s1 :						  
  i < s1 . length ;					      								    	    s2 [ i ] = c					  
  i ++ ) s2 [ i ] = s1 [ i ] ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_MID_POINT_LINE				      PROGRAM_FIND_MID_POINT_LINE				    PROGRAM_FIND_MID_POINT_LINE					  PROGRAM_FIND_MID_POINT_LINE
--							      --							    --								  --
static void midpoint ( int x1 , int x2 , int y1 , int y2 ) {  def midpoint ( x1 , x2 , y1 , y2 ) :			    def midpoint ( x1 , x2 , y1 , y2 ) :			  script_not_found : None
  System . out . print ( ( x1 + x2 ) / 2 + " , " + ( y1 + y2  	  print ( ( x1 + x2 ) // 2 , " , " , ( y1 + y2 ) // 2 )	    	print ( ( x1 + x2 ) / 2 , ( y1 + y2 ) / 2 )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1
--							      --							    --								  --
static int compute_average ( int a , int b ) {		      def compute_average ( a , b ) :				    def compute_average ( a , b ) :				  failure : #Results: 1, 10
  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;  	  return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 	return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 )  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POWER_POWER_MOD_PRIME				      FIND_POWER_POWER_MOD_PRIME				    FIND_POWER_POWER_MOD_PRIME					  FIND_POWER_POWER_MOD_PRIME
--							      --							    --								  --
static int Calculate ( int A , int B , int C , int M ) {      def calculate ( A , B , C , M ) :				    def Calculate ( A , B , C , M ) :				  error : Traceback (most recent call last):   File
  int res , ans ;					      	  res = pow ( B , C , M - 1 )				    	res , ans = power ( B , C , M - 1 )			  "dump/transcoder/eval/java_python/model_2/transcod
  res = power ( B , C , M - 1 ) ;			      	  ans = pow ( A , res , M )				    	ans = power ( A , res , M )				  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  ans = power ( A , res , M ) ;				      	  return ans						    	return ans						  lid/FIND_POWER_POWER_MOD_PRIME.py", line 44, in <m
  return ans ;						      								    								  odule>     if f_filled(*parameters_set) == f_gold(
}							      								    								  *parameters_set):   File "dump/transcoder/eval/jav
							      								    								  a_python/model_2/transcoder_eval/20642196/eval_scr
							      								    								  ipts/java_sa-python_sa.valid/FIND_POWER_POWER_MOD_
							      								    								  PRIME.py", line 24, in f_filled     res , ans = po
							      								    								  wer ( B , C , M - 1 ) NameError: name 'power' is n
							      								    								  ot defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1
--							      --							    --								  --
static int MaximumHeight ( int a [ ] , int n ) {	      def MaximumHeight ( a , n ) :				    def MaximumHeight ( a , n ) :				  success : None
  return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 	  return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2 	return int ( math.floor ( ( - 1 + math.sqrt ( 1 + ( 8 * n 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10	      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10
--							      --							    --								  --
static int round ( int n ) {				      def round ( n ) :						    def round ( n ) :						  failure : #Results: 1, 10
  int a = ( n / 10 ) * 10 ;				      	  a = ( n // 10 ) * 10					    	a = ( n / 10 ) * 10					  
  int b = a + 10 ;					      	  b = a + 10						    	b = a + 10						  
  return ( n - a > b - n ) ? b : a ;			      	  return ( b if n - a > b - n else a )			    	return ( n - a > b - n )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER	  WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER
--							      --							    --								  --
static boolean getParity ( int n ) {			      def getParity ( n ) :					    def getParity ( n ) :					  failure : #Results: 5, 10
  boolean parity = false ;				      	  parity = 0						    	parity = False						  
  while ( n != 0 ) {					      	  while n :						    	while n != 0 :						  
    parity = ! parity ;					      	      parity = ~ parity					    	    parity = not parity					  
    n = n & ( n - 1 ) ;					      	      n = n & ( n - 1 )					    	    n = n & ( n - 1 )					  
  }							      	  return parity						    	return parity						  
  return parity ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
static int findIndex ( int n ) {			      def findIndex ( n ) :					    def find_index ( n ) :					  error :   File "dump/transcoder/eval/java_python/m
  float fibo = 2.078087F * ( float ) Math . log ( n ) + 1.672 	  fibo = 2.078087 * math.log ( n ) + 1.672276		    	fibo = 2.078087F * float ( math.log ( n , 2 ) ) + 1.67227 odel_2/transcoder_eval/20642196/eval_scripts/java_
  return Math . round ( fibo ) ;			      	  return round ( fibo )					    	return round ( fibo , 3 )				  sa-python_sa.valid/FIND_INDEX_GIVEN_FIBONACCI_NUMB
}							      								    								  ER_CONSTANT_TIME_1.py", line 25     fibo = 2.07808
							      								    								  7F * float ( math.log ( n , 2 ) ) + 1.672276F
							      								    								  		 ^ SyntaxError: invalid syntax
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
static int sumDigits ( int no ) {			      def sumDigits ( no ) :					    def sum_digits ( no ) :					  failure : #Results: 0, 10
  return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 ) ;      	  return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 	return no if no % 10 == 0 else no % 10 + sum_digits ( no  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_1				      POSITION_OF_RIGHTMOST_SET_BIT_1				    POSITION_OF_RIGHTMOST_SET_BIT_1				  POSITION_OF_RIGHTMOST_SET_BIT_1
--							      --							    --								  --
static int PositionRightmostSetbit ( int n ) {		      def PositionRightmostSetbit ( n ) :			    def PositionRightmostSetbit ( n ) :				  success : None
  int position = 1 ;					      	  position = 1						    	position = 1						  
  int m = 1 ;						      	  m = 1							    	m = 1							  
  while ( ( n & m ) == 0 ) {				      	  while ( not ( n & m ) ) :				    	while ( n & m ) == 0 :					  
    m = m << 1 ;					      	      m = m << 1					    	    m = m << 1						  
    position ++ ;					      	      position += 1					    	    position += 1					  
  }							      	  return position					    	return position						  
  return position ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
static int linearSearch ( int arr [ ] , int n ) {	      def linearSearch ( arr , n ) :				    def linearSearch ( arr , n ) :				  success : None
  int i ;						      	  for i in range ( n ) :				    	i = 0							  
  for ( i = 0 ;						      	      if arr [ i ] is i :				    	for i in range ( n ) :					  
  i < n ;						      		  return i					    	    if arr [ i ] == i :					  
  i ++ ) {						      	  return - 1						    		return i					  
    if ( arr [ i ] == i ) return i ;			      								    	return - 1						  
  }							      								    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
static int Add ( int x , int y ) {			      def Add ( x , y ) :					    def Add ( x , y ) :						  success : None
  while ( y != 0 ) {					      	  while ( y != 0 ) :					    	while y != 0 :						  
    int carry = x & y ;					      	      carry = x & y					    	    carry = x & y					  
    x = x ^ y ;						      	      x = x ^ y						    	    x = x ^ y						  
    y = carry << 1 ;					      	      y = carry << 1					    	    y = carry << 1					  
  }							      	  return x						    	return x						  
  return x ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI
--							      --							    --								  --
public static int numberOfSquares ( int base ) {	      def numberOfSquares ( base ) :				    def number_of_squares ( base ) :				  success : None
  base = ( base - 2 ) ;					      	  base = ( base - 2 )					    	base = ( base - 2 )					  
  base = base / 2 ;					      	  base = base / 2					    	base = base / 2						  
  return base * ( base + 1 ) / 2 ;			      	  return base * ( base + 1 ) / 2			    	return base * ( base + 1 ) / 2				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		  SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
static int findElement ( int arr [ ] , int n , int key ) {    def findElement ( arr , n , key ) :			    def findElement ( arr , n , key ) :				  success : None
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( arr [ i ] == key ) :				    	    if arr [ i ] == key :				  
  i ++ ) if ( arr [ i ] == key ) return i ;		      		  return i					    		return i					  
  return - 1 ;						      	  return - 1						    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y				    FIND_UNIT_DIGIT_X_RAISED_POWER_Y				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y
--							      --							    --								  --
static int unitDigitXRaisedY ( int x , int y ) {	      def unitDigitXRaisedY ( x , y ) :				    def unit_digit_x_raised_y ( x , y ) :			  success : None
  int res = 1 ;						      	  res = 1						    	res = 1							  
  for ( int i = 0 ;					      	  for i in range ( y ) :				    	for i in range ( y ) :					  
  i < y ;						      	      res = ( res * x ) % 10				    	    res = ( res * x ) % 10				  
  i ++ ) res = ( res * x ) % 10 ;			      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
static int findSum ( int n ) {				      def findSum ( n ) :					    def find_sum ( n ) :					  success : None
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += i * ( n - i )				    	    sum += i * ( n - i )				  
  i ++ ) sum += i * ( n - i ) ;				      	  return 2 * sum					    	return 2 * sum						  
  return 2 * sum ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_ARRII					      MAXIMIZE_SUM_ARRII					    MAXIMIZE_SUM_ARRII						  MAXIMIZE_SUM_ARRII
--							      --							    --								  --
static int maxSum ( int arr [ ] , int n ) {		      def maxSum ( arr , n ) :					    def max_sum ( arr , n ) :					  success : None
  Arrays . sort ( arr ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += arr [ i ] * i				    	    sum += ( arr [ i ] * i )				  
  i ++ ) sum += ( arr [ i ] * i ) ;			      	  return sum						    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	      SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE
--							      --							    --								  --
static long calculateSum ( int n ) {			      def calculateSum ( n ) :					    def calculate_sum ( n ) :					  success : None
  long sum = 0 ;					      	  sum = 0						    	sum = 0							  
  for ( int row = 0 ;					      	  for row in range ( n ) :				    	for row in range ( n ) :				  
  row < n ;						      	      sum = sum + ( 1 << row )				    	    sum = sum + ( 1 << row )				  
  row ++ ) {						      	  return sum						    	return sum						  
    sum = sum + ( 1 << row ) ;				      								    								  
  }							      								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE_1			      SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				    SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				  SQUARE_ROOT_OF_A_PERFECT_SQUARE_1
--							      --							    --								  --
static long squareRoot ( int n ) {			      def squareRoot ( n ) :					    def square_root ( n ) :					  script_not_found : None
  int x = n ;						      	  x = n							    	x = n							  
  int y = 1 ;						      	  y = 1							    	y = 1							  
  while ( x > y ) {					      	  while ( x > y ) :					    	while x > y :						  
    x = ( x + y ) / 2 ;					      	      x = ( x + y ) / 2					    	    x = ( x + y ) / 2					  
    y = n / x ;						      	      y = n / x						    	    y = n // x						  
  }							      	  return x						    	return long ( x )					  
  return ( long ) x ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_ALL_ODD_AND_EVEN_BITS				      SWAP_ALL_ODD_AND_EVEN_BITS				    SWAP_ALL_ODD_AND_EVEN_BITS					  SWAP_ALL_ODD_AND_EVEN_BITS
--							      --							    --								  --
static int swapBits ( int x ) {				      def swapBits ( x ) :					    def swap_bits ( x ) :					  success : None
  int even_bits = x & 0xAAAAAAAA ;			      	  even_bits = x & 0xAAAAAAAA				    	even_bits = x & 0xAAAAAAAA				  
  int odd_bits = x & 0x55555555 ;			      	  odd_bits = x & 0x55555555				    	odd_bits = x & 0x55555555				  
  even_bits >>= 1 ;					      	  even_bits >>= 1					    	even_bits >>= 1						  
  odd_bits <<= 1 ;					      	  odd_bits <<= 1					    	odd_bits <<= 1						  
  return ( even_bits | odd_bits ) ;			      	  return ( even_bits | odd_bits )			    	return ( even_bits | odd_bits )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2					      SORT_ARRAY_WAVE_FORM_2					    SORT_ARRAY_WAVE_FORM_2					  SORT_ARRAY_WAVE_FORM_2
--							      --							    --								  --
void sortInWave ( int arr [ ] , int n ) {		      def sortInWave ( arr , n ) :				    def sort_in_wave ( arr , n ) :				  error : Traceback (most recent call last):   File
  Arrays . sort ( arr ) ;				      	  arr.sort ( )						    	arr.sort ( )						  "dump/transcoder/eval/java_python/model_2/transcod
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 1 , 2 ) :			    	for i in range ( 0 , n - 1 , 2 ) :			  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  i < n - 1 ;						      	      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] 	    swap ( arr , i , i + 1 )				  lid/SORT_ARRAY_WAVE_FORM_2.py", line 56, in <modul
  i += 2 ) swap ( arr , i , i + 1 ) ;			      								    								  e>	 f_filled(*(filled_function_param[i]))	 Fil
}							      								    								  e "dump/transcoder/eval/java_python/model_2/transc
							      								    								  oder_eval/20642196/eval_scripts/java_sa-python_sa.
							      								    								  valid/SORT_ARRAY_WAVE_FORM_2.py", line 26, in f_fi
							      								    								  lled	   swap ( arr , i , i + 1 ) NameError: name
							      								    								  'swap' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION_FIBONACCI				      TAIL_RECURSION_FIBONACCI					    TAIL_RECURSION_FIBONACCI					  TAIL_RECURSION_FIBONACCI
--							      --							    --								  --
static int fib ( int n , int a , int b ) {		      def fib ( n , a = 0 , b = 1 ) :				    def fib ( n , a , b ) :					  success : None
  if ( n == 0 ) return a ;				      	  if n == 0 :						    	if n == 0 : return a					  
  if ( n == 1 ) return b ;				      	      return a						    	if n == 1 : return b					  
  return fib ( n - 1 , b , a + b ) ;			      	  if n == 1 :						    	return fib ( n - 1 , b , a + b )			  
}							      	      return b						    								  
							      	  return fib ( n - 1 , b , a + b ) ;			    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM
--							      --							    --								  --
static int summingSeries ( long n ) {			      def summingSeries ( n ) :					    def summing_series ( n ) :					  success : None
  int S = 0 ;						      	  S = 0							    	S = 0							  
  for ( i = 1 ;						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      S += i * i - ( i - 1 ) * ( i - 1 )		    	    S += i ** 2 - ( i - 1 ) ** 2			  
  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;		      	  return S						    	return S						  
  return S ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
public static int minMaxProduct ( int arr1 [ ] , int arr2 [ ] def minmaxProduct ( arr1 , arr2 , n1 , n2 ) :		    def minMaxProduct ( arr1 , arr2 , n1 , n2 ) :		  script_not_found : None
  Arrays . sort ( arr1 ) ;				      	  arr1.sort ( )						    	arr1.sort ( )						  
  Arrays . sort ( arr2 ) ;				      	  arr2.sort ( )						    	arr2.sort ( )						  
  return arr1 [ n1 - 1 ] * arr2 [ 0 ] ;			      	  return arr1 [ n1 - 1 ] * arr2 [ 0 ]			    	return arr1 [ n1 - 1 ] * arr2 [ 0 ]			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD		  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD
--							      --							    --								  --
static boolean isPrime ( int n ) {			      def isPrime ( n ) :					    def isPrime ( n ) :						  success : None
  if ( n <= 1 ) return false ;				      	  if n <= 1 :						    	if n <= 1 : return False				  
  for ( int i = 2 ;					      	      return False					    	for i in range ( 2 , n ) :				  
  i < n ;						      	  for i in range ( 2 , n ) :				    	    if n % i == 0 : return False			  
  i ++ ) if ( n % i == 0 ) return false ;		      	      if n % i == 0 :					    	return True						  
  return true ;						      		  return False					    								  
}							      	  return True						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
static float calc_Expectation ( float a [ ] , float n ) {     def calc_Expectation ( a , n ) :				    def calc_expectation ( a , n ) :				  script_not_found : None
  float prb = ( 1 / n ) ;				      	  prb = 1 / n						    	prb = ( 1 / n )						  
  float sum = 0 ;					      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += ( a [ i ] * prb )				    	    sum += a [ i ] * prb				  
  i ++ ) sum += a [ i ] * prb ;				      	  return float ( sum )					    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1
--							      --							    --								  --
static void findElements ( int arr [ ] , int n ) {	      def findElements ( arr , n ) :				    def find_elements ( arr , n ) :				  script_not_found : None
  Arrays . sort ( arr ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 2 ) :			    	for i in range ( n - 2 ) :				  
  i < n - 2 ;						      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] , end = ' ' )			  
  i ++ ) System . out . print ( arr [ i ] + " " ) ;	      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
public static int countDyckPaths ( int n ) {		      def countDyckPaths ( n ) :				    def count_dyck_paths ( n ) :				  success : None
  int res = 1 ;						      	  res = 1						    	res = 1							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      res *= ( 2 * n - i )				    	    res *= ( 2 * n - i )				  
  ++ i ) {						      	      res /= ( i + 1 )					    	    res /= ( i + 1 )					  
    res *= ( 2 * n - i ) ;				      	  return res / ( n + 1 )				    	return res / ( n + 1 )					  
    res /= ( i + 1 ) ;					      								    								  
  }							      								    								  
  return res / ( n + 1 ) ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_N_UNDER_MODULO_P				      COMPUTE_N_UNDER_MODULO_P					    COMPUTE_N_UNDER_MODULO_P					  COMPUTE_N_UNDER_MODULO_P
--							      --							    --								  --
static int modFact ( int n , int p ) {			      def modFact ( n , p ) :					    def modFact ( n , p ) :					  success : identical to gold
  if ( n >= p ) return 0 ;				      	  if n >= p :						    	if n >= p :						  
  int result = 1 ;					      	      return 0						    	    return 0						  
  for ( int i = 1 ;					      	  result = 1						    	result = 1						  
  i <= n ;						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i ++ ) result = ( result * i ) % p ;			      	      result = ( result * i ) % p			    	    result = ( result * i ) % p				  
  return result ;					      	  return result						    	return result						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
static void myCopy ( char s1 [ ] , char s2 [ ] , int index )  def myCopy ( s1 , s2 , index ) :				    def my_copy ( s1 , s2 , index ) :				  failure : #Results: 3, 10
  s2 [ index ] = s1 [ index ] ;				      	  s2 [ index ] = s1 [ index ]				    	s2 = s1 [ index ]					  
  if ( index == s1 . length - 1 ) {			      	  if ( index == len ( s1 ) - 1 ) :			    	if index == len ( s1 ) - 1 :				  
    return ;						      	      return						    	    return						  
  }							      	  myCopy ( s1 , s2 , index + 1 )			    	return s1 [ index ]					  
  myCopy ( s1 , s2 , index + 1 ) ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
static int getSum ( int n ) {				      def getSum ( n ) :					    def getSum ( n ) :						  error :   File "dump/transcoder/eval/java_python/m
  int sum ;						      	  sum = 0						    	sum = 0							  odel_2/transcoder_eval/20642196/eval_scripts/java_
  for ( sum = 0 ;					      	  while ( n > 0 ) :					    	for n in range ( 0 , n ) :				  sa-python_sa.valid/HOW_CAN_WE_SUM_THE_DIGITS_OF_A_
  n > 0 ;						      	      sum += int ( n % 10 )				    	    sum += n % 10 , n /= 10				  GIVEN_NUMBER_IN_SINGLE_STATEMENT_1.py", line 28
  sum += n % 10 , n /= 10 ) ;				      	      n = int ( n / 10 )				    	return sum						    sum += n % 10 , n /= 10			   ^
  return sum ;						      	  return sum						    								   SyntaxError: invalid syntax
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN
--							      --							    --								  --
static int findSum ( int n ) {				      def findSum ( N ) :					    def find_sum ( n ) :					  failure : #Results: 0, 10
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  for ( int i = 1 ;					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      for j in range ( 1 , N + 1 ) :			    	    for j in range ( 1 , n + 1 ) :			  
  i ++ ) for ( int j = 1 ;				      		  ans += i // j					    		ans += ( i / j )				  
  j <= n ;						      	  return ans						    	return ans						  
  j ++ ) ans += ( i / j ) ;				      								    								  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			    FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1
--							      --							    --								  --
static int unitnumber ( int x , int y ) {		      def unitnumber ( x , y ) :				    def unitnumber ( x , y = None ) :				  error :   File "dump/transcoder/eval/java_python/m
  x = x % 10 ;						      	  x = x % 10						    	x = x % 10						  odel_2/transcoder_eval/20642196/eval_scripts/java_
  if ( y != 0 ) y = y % 4 + 4 ;				      	  if y != 0 :						    	if y is not None :					  sa-python_sa.valid/FIND_UNIT_DIGIT_X_RAISED_POWER_
  return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;      	      y = y % 4 + 4					    	    y = y % 4 + 4					  Y_1.py", line 32     if __name__ == '__main__':
}							      	  return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )	    	return ( ( ( int ( math.pow ( x , y ) ) ) % 10 ) , ( ( in    ^ SyntaxError: invalid syntax
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
static Boolean pythagorean_quadruple ( int a , int b , int c  def pythagorean_quadruple ( a , b , c , d ) :		    def pythagorean_quadruple ( a , b , c , d ) :		  success : None
  int sum = a * a + b * b + c * c ;			      	  sum = a * a + b * b + c * c				    	sum = a * a + b * b + c * c				  
  if ( d * d == sum ) return true ;			      	  if ( d * d == sum ) :					    	if d * d == sum :					  
  else return false ;					      	      return True					    	    return True						  
}							      	  else :						    	else :							  
							      	      return False					    	    return False					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
static int numberOfWays ( int x ) {			      def numberOfWays ( x ) :					    def number_of_ways ( x ) :					  script_not_found : None
  if ( x == 0 || x == 1 ) return 1 ;			      	  if x == 0 or x == 1 :					    	if x == 0 or x == 1 :					  
  else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWa 	      return 1						    	    return 1						  
}							      	  else :						    	else :							  
							      	      return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	    return number_of_ways ( x - 1 ) + ( x - 1 ) * number_ 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT
--							      --							    --								  --
static boolean check ( String str ) {			      def check ( num ) :					    def check ( str ) :						  script_not_found : None
  int n = str . length ( ) ;				      	  digitSum = 0						    	n = len ( str )						  
  int digitSum = 0 ;					      	  while num > 0 :					    	digitSum = 0						  
  for ( int i = 0 ;					      	      rem = num % 10					    	for i in range ( n ) :					  
  i < n ;						      	      digitSum = digitSum + rem				    	    digitSum += ( str [ i ] - '0' )			  
  i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      	      num = num // 10					    	return ( digitSum % 3 == 0 )				  
  return ( digitSum % 3 == 0 ) ;			      	  return ( digitSum % 3 == 0 )				    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
static int mod ( String num , int a ) {			      def mod ( num , a ) :					    def mod ( num , a ) :					  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , len ( num ) ) :			    	for c in num :						  
  i < num . length ( ) ;				      	      res = ( res * 10 + int ( num [ i ] ) ) % a	    	    res = ( res * 10 + ord ( c ) - ord ( '0' ) ) % a	  
  i ++ ) res = ( res * 10 + ( int ) num . charAt ( i ) - '0'  	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH      COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	    COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	  COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH
--							      --							    --								  --
static int compute ( int [ ] graph , int N ) {		      def compute ( graph , N ) :				    def compute ( graph , N ) :					  script_not_found : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 1 ;					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , 7 ) :				  
  i < 7 ;						      	      if ( len ( graph [ i ] ) == 0 ) :			    	    if graph [ i ] == 0 :				  
  i ++ ) {						      		  count += 1					    		count += 1					  
    if ( graph [ i ] == 0 ) count ++ ;			      	  return count						    	return count						  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
static int countSetBitsRec ( int num ) {		      def countSetBitsRec ( num ) :				    def countSetBitsRec ( num ) :				  script_not_found : None
  int nibble = 0 ;					      	  nibble = 0						    	nibble = 0						  
  if ( 0 == num ) return num_to_bits [ 0 ] ;		      	  if ( 0 == num ) :					    	if 0 == num :						  
  nibble = num & 0xf ;					      	      return num_to_bits [ 0 ]				    	    return num_to_bits [ 0 ]				  
  return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4  	  nibble = num & 0xf					    	nibble = num & 0xf					  
}							      	  return num_to_bits [ nibble ] + countSetBitsRec ( num >>  	return num_to_bits [ nibble ] + countSetBitsRec ( num >>  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
static int findRoot ( pair arr [ ] , int n ) {		      def findRoot ( arr , n ) :				    def find_root ( arr , n ) :					  script_not_found : None
  int root = 0 ;					      	  root = 0						    	root = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	    	    root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	  
  i ++ ) {						      	  return root						    	return root						  
    root += ( arr [ i ] . first - arr [ i ] . second ) ;      								    								  
  }							      								    								  
  return root ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE
--							      --							    --								  --
static int printCountRec ( int dist ) {			      def printCountRec ( dist ) :				    def printCountRec ( dist ) :				  script_not_found : None
  if ( dist < 0 ) return 0 ;				      	  if dist < 0 :						    	if dist < 0 :						  
  if ( dist == 0 ) return 1 ;				      	      return 0						    	    return 0						  
  return printCountRec ( dist - 1 ) + printCountRec ( dist -  	  if dist == 0 :					    	if dist == 0 :						  
}							      	      return 1						    	    return 1						  
							      	  return ( printCountRec ( dist - 1 ) + printCountRec ( dis 	return printCountRec ( dist - 1 ) + printCountRec ( dist  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1
--							      --							    --								  --
static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {     def transpose ( A , B ) :					    def transpose ( A , B ) :					  script_not_found : None
  int i , j ;						      	  for i in range ( N ) :				    	i , j = 0 , 0						  
  for ( i = 0 ;						      	      for j in range ( M ) :				    	for i in range ( N ) :					  
  i < N ;						      		  B [ i ] [ j ] = A [ j ] [ i ]			    	    for j in range ( M ) :				  
  i ++ ) for ( j = 0 ;					      								    		B [ i ] [ j ] = A [ j ] [ i ]			  
  j < M ;						      								    								  
  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;		      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
static void swap ( int xp , int yp ) {			      def swap ( xp , yp ) :					    def swap ( xp , yp ) :					  script_not_found : None
  if ( xp == yp ) return ;				      	  if ( xp [ 0 ] == yp [ 0 ] ) :				    	if xp == yp :						  
  xp = xp + yp ;					      	      return						    	    return						  
  yp = xp - yp ;					      	  xp [ 0 ] = xp [ 0 ] + yp [ 0 ]			    	xp , yp = xp + yp , xp - yp				  
  xp = xp - yp ;					      	  yp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    	xp , yp = xp - yp , xp					  
}							      	  xp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		      PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		    PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		  PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX
--							      --							    --								  --
static void scalarProductMat ( int mat [ ] [ ] , int k ) {    def scalarProductMat ( mat , k ) :			    def scalar_product_mat ( mat , k ) :			  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
  i < N ;						      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
  i ++ ) for ( int j = 0 ;				      		  mat [ i ] [ j ] = mat [ i ] [ j ] * k		    		mat [ i ] [ j ] = mat [ i ] [ j ] * k		  
  j < N ;						      								    								  
  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;	      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
static int zigzag ( int n , int k ) {			      def zigzag ( n , k ) :					    def zigzag ( n , k ) :					  script_not_found : None
  if ( n == 0 && k == 0 ) return 1 ;			      	  if ( n == 0 and k == 0 ) :				    	if n == 0 and k == 0 :					  
  if ( k == 0 ) return 0 ;				      	      return 1						    	    return 1						  
  return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;    	  if ( k == 0 ) :					    	if k == 0 :						  
}							      	      return 0						    	    return 0						  
							      	  return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k )    	return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k )	  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
static int seiresSum ( int n , int [ ] a ) {		      def seiresSum ( n , a ) :					    def seires_sum ( n , a ) :					  script_not_found : None
  return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 *  	  return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [  	return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
static boolean isReversible ( String str ) {		      def isReversible ( str ) :				    def is_reversible ( str ) :					  success : None
  int i = 0 , j = str . length ( ) - 1 ;		      	  i = 0 j = len ( str ) - 1				    	i , j = 0 , len ( str ) - 1				  
  while ( i < j ) {					      	  while ( i < j ) :					    	while i < j :						  
    if ( str . charAt ( i ) != str . charAt ( j ) ) return fa 	      if ( str [ i ] != str [ j ] ) :			    	    if str [ i ] != str [ j ] :				  
    i ++ ;						      		  return False					    		return False					  
    j -- ;						      	      i += 1						    	    i += 1						  
  }							      	      j -= 1						    	    j -= 1						  
  return true ;						      	  return True						    	return True						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SUM_FACTORS_NUMBER				      FIND_MINIMUM_SUM_FACTORS_NUMBER				    FIND_MINIMUM_SUM_FACTORS_NUMBER				  FIND_MINIMUM_SUM_FACTORS_NUMBER
--							      --							    --								  --
static int findMinSum ( int num ) {			      def findMinSum ( num ) :					    def find_min_sum ( num ) :					  error : Traceback (most recent call last):   File
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  "dump/transcoder/eval/java_python/model_2/transcod
  for ( int i = 2 ;					      	  i = 2							    	for i in range ( 2 , num * i <= num ) :			  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  i * i <= num ;					      	  while ( i * i <= num ) :				    	    while num % i == 0 :				  lid/FIND_MINIMUM_SUM_FACTORS_NUMBER.py", line 54,
  i ++ ) {						      	      while ( num % i == 0 ) :				    		sum += i					  in <module>	  if f_filled(*parameters_set) == f_
    while ( num % i == 0 ) {				      		  sum += i					    		num /= i					  gold(*parameters_set):   File "dump/transcoder/eva
      sum += i ;					      		  num /= i					    	sum += num						  l/java_python/model_2/transcoder_eval/20642196/eva
      num /= i ;					      	      i += 1						    	return sum						  l_scripts/java_sa-python_sa.valid/FIND_MINIMUM_SUM
    }							      	  sum += num						    								  _FACTORS_NUMBER.py", line 31, in f_filled	for
  }							      	  return sum						    								  i in range ( 2 , num * i <= num ) : UnboundLocalEr
  sum += num ;						      								    								  ror: local variable 'i' referenced before assignme
  return sum ;						      								    								  nt
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		      PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		    PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER			  PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER
--							      --							    --								  --
static void print ( int n , int k ) {			      def Print ( n , k ) :					    def print ( n , k ) :					  script_not_found : None
  int rem = 1 ;						      	  rem = 1						    	rem = 1							  
  for ( int i = 0 ;					      	  for i in range ( 0 , k ) :				    	for i in range ( k ) :					  
  i < k ;						      	      print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = " 	    print ( ( 10 * rem ) / n )				  
  i ++ ) {						      	      rem = ( 10 * rem ) % n				    	    rem = ( 10 * rem ) % n				  
    System . out . print ( ( 10 * rem ) / n ) ;		      								    								  
    rem = ( 10 * rem ) % n ;				      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING		      LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			    LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			  LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING
--							      --							    --								  --
static String LexicographicalMaxString ( String str ) {	      def LexicographicalMaxString ( str ) :			    def LexicographicalMaxGrad ( op , grad ) :			  error : Traceback (most recent call last):   File
  String mx = "" ;					      	  mx = ""						    	"""Gradient for Lexicographic Max."""			  "dump/transcoder/eval/java_python/model_2/transcod
  for ( int i = 0 ;					      	  for i in range ( len ( str ) ) :			    	mx = op.inputs [ 0 ]					  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  i < str . length ( ) ;				      	      mx = max ( mx , str [ i : ] )			    	return ( math_ops.reduce_max ( grad , op.get_attr ( "x" ) lid/LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING.py",
  ++ i ) {						      	  return mx						    								  line 45, in <module>	   if f_filled(*parameters_s
    if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) {    								    								  et) == f_gold(*parameters_set): TypeError: f_fille
      mx = str . substring ( i ) ;			      								    								  d() missing 1 required positional argument: 'grad'
    }							      								    								  
  }							      								    								  
  return mx ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
static void printSeries ( int n ) {			      def printSeries ( n ) :					    def print_series ( n ) :					  script_not_found : None
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      num = i * ( i + 1 ) * ( i + 2 ) // 6		    	    num = i * ( i + 1 ) * ( i + 2 ) / 6			  
  i ++ ) {						      	      print ( num , end = ' ' )				    	    print ( num , end = ' ' )				  
    int num = i * ( i + 1 ) * ( i + 2 ) / 6 ;		      								    								  
    System . out . print ( num + " " ) ;		      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_2				      FIND_REPETITIVE_ELEMENT_1_N_1_2				    FIND_REPETITIVE_ELEMENT_1_N_1_2				  FIND_REPETITIVE_ELEMENT_1_N_1_2
--							      --							    --								  --
static int findRepeating ( int arr [ ] , int n ) {	      def findRepeating ( arr , n ) :				    def find_repeating ( arr , n ) :				  success : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      res = res ^ ( i + 1 ) ^ arr [ i ]			    	    res = res ^ ( i + 1 ) ^ arr [ i ]			  
  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;		      	  res = res ^ arr [ n - 1 ]				    	res = res ^ arr [ n - 1 ]				  
  res = res ^ arr [ n - 1 ] ;				      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE		  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
--							      --							    --								  --
static int arraySortedOrNot ( int arr [ ] , int n ) {	      def arraySortedOrNot ( arr ) :				    def array_sorted_or_not ( arr , n ) :			  script_not_found : None
  if ( n == 1 || n == 0 ) return 1 ;			      	  n = len ( arr )					    	if n == 1 or n == 0 :					  
  if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ;	      	  if n == 1 or n == 0 :					    	    return 1						  
  return arraySortedOrNot ( arr , n - 1 ) ;		      	      return True					    	if arr [ n - 1 ] < arr [ n - 2 ] :			  
}							      	  return arr [ 0 ] <= arr [ 1 ] and arraySortedOrNot ( arr  	    return 0						  
							      								    	return array_sorted_or_not ( arr , n - 1 )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_SECTOR					      AREA_OF_A_SECTOR						    AREA_OF_A_SECTOR						  AREA_OF_A_SECTOR
--							      --							    --								  --
static void SectorArea ( double radius , double angle ) {     def SectorArea ( radius , angle ) :			    def SectorArea ( radius , angle ) :				  script_not_found : None
  if ( angle >= 360 ) System . out . println ( "Angle not pos 	  pi = 22 / 7						    	if angle >= 360 :					  
  else {						      	  if angle >= 360 :					    	    print ( "Angle not possible" )			  
    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angl 	      print ( "Angle not possible" )			    	else :							  
    System . out . println ( sector ) ;			      	      return						    	    sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 
  }							      	  else :						    	    print ( sector )					  
}							      	      sector = ( pi * radius ** 2 ) * ( angle / 360 )	    								  
							      	      print ( sector )					    								  
							      	      return						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
static int nextPowerOf2 ( int n ) {			      def nextPowerOf2 ( n ) :					    def next_power_of_2 ( n ) :					  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and ( n & ( n - 1 ) ) == 0 :			  
  while ( n != 0 ) {					      	      return n						    	    return n						  
    n >>= 1 ;						      	  while ( n != 0 ) :					    	while n != 0 :						  
    count += 1 ;					      	      n >>= 1						    	    n >>= 1						  
  }							      	      count += 1					    	    count += 1						  
  return 1 << count ;					      	  return 1 << count					    	return 1 << count					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
boolean isProduct ( int arr [ ] , int n , int x ) {	      def isProduct ( arr , n , x ) :				    def isProduct ( arr , n , x ) :				  success : None
  for ( int i = 0 ;					      	  for i in arr :					    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      for j in arr :					    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  if i * j == x :				    		if arr [ i ] * arr [ j ] == x :			  
  j < n ;						      		      return True				    		    return True					  
  j ++ ) if ( arr [ i ] * arr [ j ] == x ) return true ;      	  return False						    	return False						  
  return false ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
static int numOfways ( int n , int k ) {		      def numOfways ( n , k ) :					    def numOfways ( n , k ) :					  success : None
  int p = 1 ;						      	  p = 1							    	p = 1							  
  if ( k % 2 != 0 ) p = - 1 ;				      	  if ( k % 2 ) :					    	if k % 2 != 0 :						  
  return ( int ) ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) 	      p = - 1						    	    p = - 1						  
}							      	  return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	    	return int ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			      NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			    NUMBER_DAYS_TANK_WILL_BECOME_EMPTY				  NUMBER_DAYS_TANK_WILL_BECOME_EMPTY
--							      --							    --								  --
static int minDaysToEmpty ( int C , int l ) {		      def minDaysToEmpty ( C , l ) :				    def min_days_to_empty ( C , l ) :				  success : None
  if ( l >= C ) return C ;				      	  if ( l >= C ) : return C				    	if l >= C :						  
  double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 )  	  eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2	    	    return C						  
  return ( int ) ( Math . ceil ( eq_root ) + l ) ;	      	  return math.ceil ( eq_root ) + l			    	eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2	  
}							      								    	return int ( math.ceil ( eq_root ) + l )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES				      NUMBER_TRIANGLES_N_MOVES					    NUMBER_TRIANGLES_N_MOVES					  NUMBER_TRIANGLES_N_MOVES
--							      --							    --								  --
public static int numberOfTriangles ( int n ) {		      def numberOfTriangles ( n ) :				    def number_of_triangles ( n ) :				  success : None
  int [ ] answer = new int [ n + 1 ] ;			      	  answer = [ None ] * ( n + 1 )				    	answer = [ 1 ] * ( n + 1 )				  
  answer [ 0 ] = 1 ;					      	  answer [ 0 ] = 1					    	for i in range ( 1 , n + 1 ) :				  
  for ( int i = 1 ;					      	  i = 1							    	    answer [ i ] = answer [ i - 1 ] * 3 + 2		  
  i <= n ;						      	  while i <= n :					    	return answer [ n ]					  
  i ++ ) answer [ i ] = answer [ i - 1 ] * 3 + 2 ;	      	      answer [ i ] = answer [ i - 1 ] * 3 + 2		    								  
  return answer [ n ] ;					      	      i = i + 1						    								  
}							      	  return answer [ n ]					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_
--							      --							    --								  --
public static boolean isPossibleToMakeDivisible ( int arr [ ] def isPossibleToMakeDivisible ( arr , n ) :		    def is_possible_to_make_visible ( arr , n ) :		  success : None
  int remainder = 0 ;					      	  remainder = 0						    	remainder = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      remainder = ( remainder + arr [ i ] ) % 3		    	    remainder = ( remainder + arr [ i ] ) % 3		  
  i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ;	      	  return ( remainder == 0 )				    	return ( remainder == 0 )				  
  return ( remainder == 0 ) ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	      FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	    FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	  FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY
--							      --							    --								  --
int findSmallest ( int arr [ ] , int n ) {		      def findSmallest ( arr , n ) :				    def findSmallest ( arr , n ) :				  error : Traceback (most recent call last):   File
  int res = 1 ;						      	  res = 1						    	res = 1							  "dump/transcoder/eval/java_python/model_2/transcod
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n and arr [ i ] <= res ) :		  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  i < n && arr [ i ] <= res ;				      	      if arr [ i ] <= res :				    	    res = res + arr [ i ]				  lid/FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIV
  i ++ ) res = res + arr [ i ] ;			      		  res = res + arr [ i ]				    	return res						  EN_ARRAY.py", line 49, in <module>	 if f_filled
  return res ;						      	      else :						    								  (*parameters_set) == f_gold(*parameters_set):	  Fi
}							      		  break						    								  le "dump/transcoder/eval/java_python/model_2/trans
							      	  return res						    								  coder_eval/20642196/eval_scripts/java_sa-python_sa
							      								    								  .valid/FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_
							      								    								  GIVEN_ARRAY.py", line 29, in f_filled	    for i in
							      								    								   range ( n and arr [ i ] <= res ) : UnboundLocalEr
							      								    								  ror: local variable 'i' referenced before assignme
							      								    								  nt
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION			      PROGRAM_BINARY_DECIMAL_CONVERSION				    PROGRAM_BINARY_DECIMAL_CONVERSION				  PROGRAM_BINARY_DECIMAL_CONVERSION
--							      --							    --								  --
static int binaryToDecimal ( int n ) {			      def binaryToDecimal ( n ) :				    def binary_to_decimal ( n ) :				  failure : #Results: 0, 10
  int num = n ;						      	  num = n						    	num = n							  
  int dec_value = 0 ;					      	  dec_value = 0						    	dec_value = 0						  
  int base = 1 ;					      	  base = 1						    	base = 1						  
  int temp = num ;					      	  temp = num						    	temp = num						  
  while ( temp > 0 ) {					      	  while ( temp ) :					    	while temp > 0 :					  
    int last_digit = temp % 10 ;			      	      last_digit = temp % 10				    	    last_digit = temp % 10				  
    temp = temp / 10 ;					      	      temp = int ( temp / 10 )				    	    temp = temp / 10					  
    dec_value += last_digit * base ;			      	      dec_value += last_digit * base			    	    dec_value += last_digit * base			  
    base = base * 2 ;					      	      base = base * 2					    	    base = base * 2					  
  }							      	  return dec_value					    	return dec_value					  
  return dec_value ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT				      CHECK_TWO_GIVEN_SETS_DISJOINT				    CHECK_TWO_GIVEN_SETS_DISJOINT				  CHECK_TWO_GIVEN_SETS_DISJOINT
--							      --							    --								  --
boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {	      def areDisjoint ( set1 , set2 , m , n ) :			    def aredisjoint ( set1 , set2 ) :				  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( 0 , m ) :				    	for i in range ( len ( set1 ) ) :			  
  i < set1 . length ;					      	      for j in range ( 0 , n ) :			    	    for j in range ( len ( set2 ) ) :			  
  i ++ ) {						      		  if ( set1 [ i ] == set2 [ j ] ) :		    		if set1 [ i ] == set2 [ j ] :			  
    for ( int j = 0 ;					      		      return False				    		    return False				  
    j < set2 . length ;					      	  return True						    	return True						  
    j ++ ) {						      								    								  
      if ( set1 [ i ] == set2 [ j ] ) return false ;	      								    								  
    }							      								    								  
  }							      								    								  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT
--							      --							    --								  --
static int countToMake0lternate ( String s ) {		      def countToMake0lternate ( s ) :				    def count_to_make0lternate ( s ) :				  script_not_found : None
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( len ( s ) - 1 ) :			    	for i in ( 0 , len ( s ) - 1 ) :			  
  i < ( s . length ( ) - 1 ) ;				      	      if ( s [ i ] == s [ i + 1 ] ) :			    	    if s [ i ] == s [ i + 1 ] :				  
  i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) resu 		  result += 1					    		result += 1					  
  return result ;					      	  return result						    	return result						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1
--							      --							    --								  --
static int findSum ( int N , int K ) {			      def findSum ( N , K ) :					    def find_sum ( N , K ) :					  failure : #Results: 7, 10
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  int y = N / K ;					      	  y = N / K						    	y = N / K						  
  int x = N % K ;					      	  x = N % K						    	x = N % K						  
  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;   	  ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 	ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2	  
  return ans ;						      	  return int ( ans )					    	return ans						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY
--							      --							    --								  --
static int countRotations ( int arr [ ] , int n ) {	      def countRotations ( arr , n ) :				    def count_rotations ( arr , n ) :				  script_not_found : None
  int min = arr [ 0 ] , min_index = - 1 ;		      	  min = arr [ 0 ]					    	min , min_index = arr [ 0 ] , - 1			  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( min > arr [ i ] ) :				    	    if min > arr [ i ] :				  
  i ++ ) {						      		  min = arr [ i ]				    		min , min_index = arr [ i ] , i			  
    if ( min > arr [ i ] ) {				      		  min_index = i					    	return min_index					  
      min = arr [ i ] ;					      	  return min_index					    								  
      min_index = i ;					      								    								  
    }							      								    								  
  }							      								    								  
  return min_index ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS     SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	    SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS
--							      --							    --								  --
static int getTotalNumberOfSequences ( int m , int n ) {      def getTotalNumberOfSequences ( m , n ) :			    def getTotalNumberOfSequences ( m , n ) :			  success : None
  if ( m < n ) return 0 ;				      	  if m < n :						    	if m < n :						  
  if ( n == 0 ) return 1 ;				      	      return 0						    	    return 0						  
  return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNu 	  if n == 0 :						    	if n == 0 :						  
}							      	      return 1						    	    return 1						  
							      	  res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTota 	return getTotalNumberOfSequences ( m - 1 , n ) + getTotal 
							      	  return res						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			      CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			    CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			  CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT
--							      --							    --								  --
static int check_duck ( String num ) {			      def check_duck ( num ) :					    def check_duck ( num ) :					  success : None
  int len = num . length ( ) ;				      	  l = len ( num )					    	num = num.upper ( )					  
  int count_zero = 0 ;					      	  count_zero = 0					    	count_zero = 0						  
  char ch ;						      	  i = 1							    	ch = None						  
  for ( int i = 1 ;					      	  while i < l :						    	for i in range ( 1 , len ( num ) ) :			  
  i < len ;						      	      ch = num [ i ]					    	    ch = num [ i ]					  
  i ++ ) {						      	      if ( ch == "0" ) :				    	    if ch == '0' :					  
    ch = num . charAt ( i ) ;				      		  count_zero = count_zero + 1			    		count_zero += 1					  
    if ( ch == '0' ) count_zero ++ ;			      	      i = i + 1						    	return count_zero					  
  }							      	  return count_zero					    								  
  return count_zero ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER						      DELANNOY_NUMBER						    DELANNOY_NUMBER						  DELANNOY_NUMBER
--							      --							    --								  --
public static int dealnnoy ( int n , int m ) {		      def dealnnoy ( n , m ) :					    def dealnnoy ( n , m ) :					  script_not_found : None
  if ( m == 0 || n == 0 ) return 1 ;			      	  if ( m == 0 or n == 0 ) :				    	if m == 0 or n == 0 :					  
  return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1 )  	      return 1						    	    return 1						  
}							      	  return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  	return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
static int MaximumHeight ( int [ ] a , int n ) {	      def MaximumHeight ( a , n ) :				    def MaximumHeight ( a , n ) :				  success : None
  int result = 1 ;					      	  result = 1						    	result = 1						  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      y = ( i * ( i + 1 ) ) / 2				    	    y = ( i * ( i + 1 ) ) / 2				  
  ++ i ) {						      	      if ( y < n ) :					    	    if y < n :						  
    int y = ( i * ( i + 1 ) ) / 2 ;			      		  result = i					    		result = i					  
    if ( y < n ) result = i ;				      	      else :						    	    else :						  
    else break ;					      		  break						    		break						  
  }							      	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_ZEROES_END_ARRAY					      MOVE_ZEROES_END_ARRAY					    MOVE_ZEROES_END_ARRAY					  MOVE_ZEROES_END_ARRAY
--							      --							    --								  --
static void pushZerosToEnd ( int arr [ ] , int n ) {	      def pushZerosToEnd ( arr , n ) :				    def push_zeros_to_end ( arr , n ) :				  error :   File "dump/transcoder/eval/java_python/m
  int count = 0 ;					      	  count = 0						    	count = 0						  odel_2/transcoder_eval/20642196/eval_scripts/java_
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  sa-python_sa.valid/MOVE_ZEROES_END_ARRAY.py", line
  i < n ;						      	      if arr [ i ] != 0 :				    	    if arr [ i ] != 0 :					   32	  arr [ count ++ ] = arr [ i ]
  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; 		  arr [ count ] = arr [ i ]			    		arr [ count ++ ] = arr [ i ]			  	^ SyntaxError: invalid syntax
  while ( count < n ) arr [ count ++ ] = 0 ;		      		  count += 1					    	while count < n :					  
}							      	  while count < n :					    	    arr [ count ++ ] = 0				  
							      	      arr [ count ] = 0					    								  
							      	      count += 1					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PADOVAN_SEQUENCE					      PADOVAN_SEQUENCE						    PADOVAN_SEQUENCE						  PADOVAN_SEQUENCE
--							      --							    --								  --
static int pad ( int n ) {				      def pad ( n ) :						    def pad ( n ) :						  failure : #Results: 1, 10
  int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;     	  pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	    	pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	  
  for ( int i = 3 ;					      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 , n ) :				  
  i <= n ;						      	      pNext = pPrevPrev + pPrev				    	    pNext = pPrevPrev + pPrev				  
  i ++ ) {						      	      pPrevPrev = pPrev					    	    pPrevPrev = pPrev					  
    pNext = pPrevPrev + pPrev ;				      	      pPrev = pCurr					    	    pPrev = pCurr					  
    pPrevPrev = pPrev ;					      	      pCurr = pNext					    	    pCurr = pNext					  
    pPrev = pCurr ;					      	  return pNext ;					    	return pNext						  
    pCurr = pNext ;					      								    								  
  }							      								    								  
  return pNext ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
static int countPairs ( int a [ ] , int n ) {		      def countPairs ( a , n ) :				    def countPairs ( a , n ) :					  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) {						      		  if ( a [ i ] & a [ j ] ) == 0 :		    		if ( a [ i ] & a [ j ] ) == 0 :			  
    for ( int j = i + 1 ;				      		      count += 2				    		    count += 2					  
    j < n ;						      	  return count						    	return count						  
    j ++ ) if ( ( a [ i ] & a [ j ] ) == 0 ) count += 2 ;     								    								  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		      COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		    COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		  COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME
--							      --							    --								  --
static int countFibs ( int low , int high ) {		      def countFibs ( low , high ) :				    def count_fibs ( low , high ) :				  failure : #Results: 7, 10
  int f1 = 0 , f2 = 1 , f3 = 1 ;			      	  f1 , f2 , f3 = 0 , 1 , 1				    	f1 , f2 , f3 = 0 , 1 , 1				  
  int result = 0 ;					      	  result = 0						    	result = 0						  
  while ( f1 <= high ) {				      	  while ( f1 <= high ) :				    	while f1 <= high :					  
    if ( f1 >= low ) result ++ ;			      	      if ( f1 >= low ) :				    	    if f1 >= low :					  
    f1 = f2 ;						      		  result += 1					    		result += 1					  
    f2 = f3 ;						      	      f1 = f2						    	    f1 , f2 , f3 = f2 , f3 , f1 + f2			  
    f3 = f1 + f2 ;					      	      f2 = f3						    	return result						  
  }							      	      f3 = f1 + f2					    								  
  return result ;					      	  return result						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
static int getMissingNo ( int a [ ] , int n ) {		      def getMissingNo ( a , n ) :				    def getMissingNo ( a , n ) :				  failure : #Results: 0, 10
  int x1 = a [ 0 ] ;					      	  x1 = a [ 0 ]						    	x1 = a [ 0 ]						  
  int x2 = 1 ;						      	  x2 = 1						    	x2 = 1							  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  i < n ;						      	      x1 = x1 ^ a [ i ]					    	    x1 = x1 ^ a [ i ]					  
  i ++ ) x1 = x1 ^ a [ i ] ;				      	  for i in range ( 2 , n + 2 ) :			    	for i in range ( 2 , n + 1 ) :				  
  for ( int i = 2 ;					      	      x2 = x2 ^ i					    	    x2 = x2 ^ i						  
  i <= n + 1 ;						      	  return x1 ^ x2					    	return ( x1 ^ x2 )					  
  i ++ ) x2 = x2 ^ i ;					      								    								  
  return ( x1 ^ x2 ) ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
static boolean isLucky ( int n ) {			      def isLucky ( n ) :					    def isLucky ( n ) :						  script_not_found : None
  int next_position = n ;				      	  next_position = n					    	next_position = n					  
  if ( counter > n ) return true ;			      	  if isLucky.counter > n :				    	if counter > n :					  
  if ( n % counter == 0 ) return false ;		      	      return 1						    	    return True						  
  next_position -= next_position / counter ;		      	  if n % isLucky.counter == 0 :				    	if n % counter == 0 :					  
  counter ++ ;						      	      return 0						    	    return False					  
  return isLucky ( next_position ) ;			      	  next_position = next_position - next_position / isLucky.c 	next_position -= next_position / counter		  
}							      	  isLucky.counter = isLucky.counter + 1			    	counter += 1						  
							      	  return isLucky ( next_position )			    	return isLucky ( next_position )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
static int countFact ( int low , int high ) {		      def countFact ( low , high ) :				    def count_fact ( low , high ) :				  timeout : None
  int fact = 1 , x = 1 ;				      	  fact = 1						    	fact , x = 1 , 1					  
  while ( fact < low ) {				      	  x = 1							    	while fact < low :					  
    fact = fact * x ;					      	  while ( fact < low ) :				    	    fact , x = fact * x , x				  
    x ++ ;						      	      fact = fact * x					    	res = 0							  
  }							      	      x += 1						    	while fact <= high :					  
  int res = 0 ;						      	  res = 0						    	    res += 1						  
  while ( fact <= high ) {				      	  while ( fact <= high ) :				    	    fact , x = fact * x , x				  
    res ++ ;						      	      res += 1						    	return res						  
    fact = fact * x ;					      	      fact = fact * x					    								  
    x ++ ;						      	      x += 1						    								  
  }							      	  return res						    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
static boolean ispalindrome ( String s ) {		      def ispalindrome ( s ) :					    def ispalindrome ( s ) :					  error : Traceback (most recent call last):   File
  int l = s . length ( ) ;				      	  l = len ( s )						    	l = len ( s )						  "dump/transcoder/eval/java_python/model_2/transcod
  for ( int i = 0 , j = l - 1 ;				      	  i = 0							    	for i , j in enumerate ( l - 1 ) :			  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  i <= j ;						      	  j = l - 1						    	    if s [ i ] != s [ j ] :				  lid/MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PAL
  i ++ , j -- ) {					      	  while i <= j :					    		return False					  INDROME.py", line 52, in <module>	if f_filled(
    if ( s . charAt ( i ) != s . charAt ( j ) ) {	      	      if ( s [ i ] != s [ j ] ) :			    	return True						  *parameters_set) == f_gold(*parameters_set):	 Fil
      return false ;					      		  return False					    								  e "dump/transcoder/eval/java_python/model_2/transc
    }							      	      i += 1						    								  oder_eval/20642196/eval_scripts/java_sa-python_sa.
  }							      	      j -= 1						    								  valid/MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_P
  return true ;						      	  return True						    								  ALINDROME.py", line 31, in f_filled	  for i , j
}							      								    								  in enumerate ( l - 1 ) : TypeError: 'int' object i
							      								    								  s not iterable
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1
--							      --							    --								  --
static boolean isSubSequence ( String str1 , String str2 , in def isSubSequence ( str1 , str2 , m , n ) :		    def is_subsequence ( str1 , str2 , m , n ) :		  script_not_found : None
  int j = 0 ;						      	  j = 0							    	j = 0							  
  for ( int i = 0 ;					      	  i = 0							    	for i in range ( n and j < m ) :			  
  i < n && j < m ;					      	  while j < m and i < n :				    	    if str1 [ j ] == str2 [ i ] :			  
  i ++ ) if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j  	      if str1 [ j ] == str2 [ i ] :			    		j += 1						  
  return ( j == m ) ;					      		  j = j + 1					    	return ( j == m )					  
}							      	      i = i + 1						    								  
							      	  return j == m						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	      CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	    CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION		  CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION
--							      --							    --								  --
public static int stirlingFactorial ( double n ) {	      def stirlingFactorial ( n ) :				    def stirlingFactorial ( n ) :				  script_not_found : None
  if ( n == 1 ) return 1 ;				      	  if ( n == 1 ) :					    	if n == 1 :						  
  double z ;						      	      return 1						    	    return 1						  
  double e = 2.71 ;					      	  e = 2.71						    	z = 0							  
  z = Math . sqrt ( 2 * 3.14 * n ) * Math . pow ( ( n / e ) , 	  z = ( math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , 	e = 2.71						  
  return ( int ) ( z ) ;				      	  return math.floor ( z )				    	z = math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , n 
}							      								    	return int ( z )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	      K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	    K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	  K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED
--							      --							    --								  --
static int minDiff ( int arr [ ] , int n , int k ) {	      def minDiff ( arr , n , k ) :				    def min_diff ( arr , n , k ) :				  failure : #Results: 0, 10
  int result = Integer . MAX_VALUE ;			      	  result = + 2147483647					    	result = int ( arr [ 0 ] )				  
  Arrays . sort ( arr ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  for ( int i = 0 ;					      	  for i in range ( n - k + 1 ) :			    	for i in range ( 0 , n - k ) :				  
  i <= n - k ;						      	      result = int ( min ( result , arr [ i + k - 1 ] - arr 	    result = min ( result , arr [ i + k - 1 ] - arr [ i ] 
  i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - a 	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_ELEMENT_STABLE_SORT				      POSITION_ELEMENT_STABLE_SORT				    POSITION_ELEMENT_STABLE_SORT				  POSITION_ELEMENT_STABLE_SORT
--							      --							    --								  --
static int getIndexInSortedArray ( int arr [ ] , int n , int  def getIndexInSortedArray ( arr , n , idx ) :		    def getIndexInSortedArray ( arr , n , idx ) :		  success : None
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( arr [ i ] < arr [ idx ] ) :			    	    if arr [ i ] < arr [ idx ] :			  
  i ++ ) {						      		  result += 1					    		result += 1					  
    if ( arr [ i ] < arr [ idx ] ) result ++ ;		      	      if ( arr [ i ] == arr [ idx ] and i < idx ) :	    	    if arr [ i ] == arr [ idx ] and i < idx :		  
    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;    		  result += 1					    		result += 1					  
  }							      	  return result ;					    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
public static void printPascal ( int n ) {		      def printPascal ( n ) :					    def print_pascal ( n ) :					  script_not_found : None
  for ( int line = 1 ;					      	  for line in range ( 1 , n + 1 ) :			    	for line in range ( 1 , n + 1 ) :			  
  line <= n ;						      	      C = 1						    	    C = 1						  
  line ++ ) {						      	      for i in range ( 1 , line + 1 ) :			    	    for i in range ( 1 , line + 1 ) :			  
    int C = 1 ;						      		  print ( C , end = "" )			    		print ( C , end = ' ' )				  
    for ( int i = 1 ;					      		  C = int ( C * ( line - i ) / i )		    		C = C * ( line - i ) / i			  
    i <= line ;						      	      print ( "" )					    	    print ( )						  
    i ++ ) {						      								    								  
      System . out . print ( C + " " ) ;		      								    								  
      C = C * ( line - i ) / i ;			      								    								  
    }							      								    								  
    System . out . println ( ) ;			      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT
--							      --							    --								  --
static int countObtuseAngles ( int a , int b , int k ) {      def countObtuseAngles ( a , b , k ) :			    def countObtuseAngles ( a , b , k ) :			  success : None
  int c1 = ( b - a ) - 1 ;				      	  c1 = ( b - a ) - 1					    	c1 = ( b - a ) - 1					  
  int c2 = ( k - b ) + ( a - 1 ) ;			      	  c2 = ( k - b ) + ( a - 1 )				    	c2 = ( k - b ) + ( a - 1 )				  
  if ( c1 == c2 ) return 0 ;				      	  if ( c1 == c2 ) :					    	if c1 == c2 : return 0					  
  return min ( c1 , c2 ) ;				      	      return 0						    	return min ( c1 , c2 )					  
}							      	  return min ( c1 , c2 )				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			      PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			    PROGRAM_FIND_AREA_CIRCULAR_SEGMENT				  PROGRAM_FIND_AREA_CIRCULAR_SEGMENT
--							      --							    --								  --
static float area_of_segment ( float radius , float angle ) { def area_of_segment ( radius , angle ) :			    def area_of_segment ( radius , angle ) :			  script_not_found : None
  float area_of_sector = pi * ( radius * radius ) * ( angle / 	  area_of_sector = pi *					    	area_of_sector = pi * ( radius ** 2 ) * ( angle / 360 )	  
  float area_of_triangle = ( float ) 1 / 2 * ( radius * radiu 	      ( radius * radius )				    	area_of_triangle = float ( 1 ) / 2 * ( radius ** 2 ) * fl 
  return area_of_sector - area_of_triangle ;		      	      * ( angle / 360 )					    	return area_of_sector - area_of_triangle		  
}							      	  area_of_triangle = 1 / 2 *				    								  
							      	      ( radius * radius ) *				    								  
							      	      math.sin ( ( angle * pi ) / 180 )			    								  
							      	  return area_of_sector - area_of_triangle ;		    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM
--							      --							    --								  --
static int findFlips ( String str , int n ) {		      def findFlips ( str , n ) :				    def find_flips ( str , n ) :				  script_not_found : None
  char last = ' ' ;					      	  last = ' '						    	last = ' '						  
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( last != str [ i ] ) :			    	    if last != str [ i ] :				  
  i ++ ) {						      		  res += 1					    		res += 1					  
    if ( last != str . charAt ( i ) ) res ++ ;		      	      last = str [ i ]					    	    last = str [ i ]					  
    last = str . charAt ( i ) ;				      	  return res // 2					    	return res / 2						  
  }							      								    								  
  return res / 2 ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	      SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	    SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	  SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST
--							      --							    --								  --
private static void printSorted ( int [ ] arr , int start , i def printSorted ( arr , start , end ) :			    def _print_sorted ( arr , start , end ) :			  script_not_found : None
  if ( start > end ) return ;				      	  if start > end :					    	if start > end :					  
  printSorted ( arr , start * 2 + 1 , end ) ;		      	      return						    	    return						  
  System . out . print ( arr [ start ] + " " ) ;	      	  printSorted ( arr , start * 2 + 1 , end )		    	_print_sorted ( arr , start * 2 + 1 , end )		  
  printSorted ( arr , start * 2 + 2 , end ) ;		      	  print ( arr [ start ] , end = " " )			    	print ( arr [ start ] , end )				  
}							      	  printSorted ( arr , start * 2 + 2 , end )		    	_print_sorted ( arr , start * 2 + 2 , end )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
static long findDigits ( int n ) {			      def findDigits ( n ) :					    def find_digits ( n ) :					  error : Traceback (most recent call last):   File
  if ( n < 0 ) return 0 ;				      	  if ( n < 0 ) :					    	if n < 0 :						  "dump/transcoder/eval/java_python/model_2/transcod
  if ( n <= 1 ) return 1 ;				      	      return 0						    	    return 0						  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  double x = ( n * Math . log10 ( n / M_E ) + Math . log10 (  	  if ( n <= 1 ) :					    	if n <= 1 :						  lid/COUNT_DIGITS_FACTORIAL_SET_2.py", line 52, in
  return ( long ) Math . floor ( x ) + 1 ;		      	      return 1						    	    return 1						  <module>     if f_filled(*parameters_set) == f_gol
}							      	  x = ( ( n * math.log10 ( n / math.e ) + math.log10 ( 2 *  	x = ( n * np.log10 ( n / M_E ) + np.log10 ( 2 * np.pi * n d(*parameters_set):	File "dump/transcoder/eval/j
							      	  return math.floor ( x ) + 1				    	return int ( np.floor ( x ) + 1 )			  ava_python/model_2/transcoder_eval/20642196/eval_s
							      								    								  cripts/java_sa-python_sa.valid/COUNT_DIGITS_FACTOR
							      								    								  IAL_SET_2.py", line 33, in f_filled	  x = ( n *
							      								    								  np.log10 ( n / M_E ) + np.log10 ( 2 * np.pi * n )
							      								    								  / 2.0 ) NameError: name 'M_E' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
public static int countP ( int n , int k ) {		      def countP ( n , k ) :					    def count_p ( n , k ) :					  script_not_found : None
  if ( n == 0 || k == 0 || k > n ) return 0 ;		      	  if ( n == 0 or k == 0 or k > n ) :			    	if n == 0 or k == 0 or k > n :				  
  if ( k == 1 || k == n ) return 1 ;			      	      return 0						    	    return 0						  
  return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1  	  if ( k == 1 or k == n ) :				    	if k == 1 or k == n :					  
}							      	      return 1						    	    return 1						  
							      	  return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k -  	return ( k * count_p ( n - 1 , k ) + count_p ( n - 1 , k  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_ROTATIONS_GIVEN_STRING_1			      GENERATE_ROTATIONS_GIVEN_STRING_1				    GENERATE_ROTATIONS_GIVEN_STRING_1				  GENERATE_ROTATIONS_GIVEN_STRING_1
--							      --							    --								  --
static void printRotatedString ( String str ) {		      def printRotatedString ( string ) :			    def printRotatedString ( str ) :				  script_not_found : None
  int n = str . length ( ) ;				      	  n = len ( string )					    	n = len ( str )						  
  StringBuffer sb = new StringBuffer ( str ) ;		      	  temp = string + string				    	s = str							  
  sb . append ( str ) ;					      	  for i in range ( n ) :				    	s = s.replace ( '\n' , '\n' )				  
  for ( int i = 0 ;					      	      for j in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      		  print ( temp [ i + j ] , end = "" )		    	    for j in range ( 0 , n ) :				  
  i ++ ) {						      	      print ( )						    		print ( s [ i + j ] )				  
    for ( int j = 0 ;					      								    	    print ( )						  
    j != n ;						      								    								  
    j ++ ) System . out . print ( sb . charAt ( i + j ) ) ;   								    								  
    System . out . println ( ) ;			      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		      ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		    ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		  ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION
--							      --							    --								  --
static void concatenate ( char a [ ] , char b [ ] , char c [  def concatenate ( a , b , c , n1 , n2 ) :			    def concatenate ( a , b , c , n1 , n2 ) :			  script_not_found : None
  int i ;						      	  i = - 1						    	i = 0							  
  for ( i = 0 ;						      	  for i in range ( n1 ) :				    	for i in range ( n1 ) : c [ i ] = a [ i ]		  
  i < n1 ;						      	      c [ i ] = a [ i ]					    	for j in range ( n2 ) : c [ i ] += b [ j ]		  
  i ++ ) {						      	  for j in range ( n2 ) :				    								  
    c [ i ] = a [ i ] ;					      	      c [ i ] = b [ j ]					    								  
  }							      	      i += 1						    								  
  for ( int j = 0 ;					      								    								  
  j < n2 ;						      								    								  
  j ++ ) {						      								    								  
    c [ i ++ ] = b [ j ] ;				      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		      CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		    CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		  CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD
--							      --							    --								  --
static boolean isPowerOfK ( int n , int k ) {		      def isPowerOfK ( n , k ) :				    def is_power_of_k ( n , k ) :				  success : None
  boolean oneSeen = false ;				      	  oneSeen = False					    	one_seen = False					  
  while ( n > 0 ) {					      	  while ( n > 0 ) :					    	while n :						  
    int digit = n % k ;					      	      digit = n % k					    	    digit = n % k					  
    if ( digit > 1 ) return false ;			      	      if ( digit > 1 ) :				    	    if digit > 1 :					  
    if ( digit == 1 ) {					      		  return False					    		return False					  
      if ( oneSeen ) return false ;			      	      if ( digit == 1 ) :				    	    if digit == 1 :					  
      oneSeen = true ;					      		  if ( oneSeen ) :				    		if one_seen :					  
    }							      		      return False				    		    return False				  
    n /= k ;						      		  oneSeen = True				    		one_seen = True					  
  }							      	      n //= k						    	    n /= k						  
  return true ;						      	  return True						    	return True						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
static int maxSum ( int arr [ ] , int n ) {		      def maxSum ( arr , n ) :					    def max_sum ( arr , n ) :					  success : None
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  Arrays . sort ( arr ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  for ( int i = 0 ;					      	  for i in range ( 0 , int ( n / 2 ) ) :		    	for i in range ( n // 2 ) :				  
  i < n / 2 ;						      	      sum -= ( 2 * arr [ i ] )				    	    sum -= ( 2 * arr [ i ] )				  
  i ++ ) {						      	      sum += ( 2 * arr [ n - i - 1 ] )			    	    sum += ( 2 * arr [ n - i - 1 ] )			  
    sum -= ( 2 * arr [ i ] ) ;				      	  return sum						    	return sum						  
    sum += ( 2 * arr [ n - i - 1 ] ) ;			      								    								  
  }							      								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		      COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		    COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS			  COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS
--							      --							    --								  --
static int findCount ( String str ) {			      def findCount ( str ) :					    def find_count ( str ) :					  failure : #Results: 4, 10
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( len ( str ) ) :			    	for c in str :						  
  i < str . length ( ) ;				      	      if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i  	    if c in ( ord ( 'a' ) , ord ( 'z' ) ) :		  
  i ++ ) {						      		  result += 1					    		result += 1					  
    if ( i == ( str . charAt ( i ) - 'a' ) || i == ( str . ch 	  return result						    	return result						  
      result ++ ;					      								    								  
    }							      								    								  
  }							      								    								  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1
--							      --							    --								  --
public static int difference ( int arr [ ] [ ] , int n ) {    def difference ( arr , n ) :				    def difference ( arr , n ) :				  success : None
  int d1 = 0 , d2 = 0 ;					      	  d1 = 0						    	d1 , d2 = 0 , 0						  
  for ( int i = 0 ;					      	  d2 = 0						    	for i in range ( n ) :					  
  i < n ;						      	  for i in range ( 0 , n ) :				    	    d1 += arr [ i ] [ i ]				  
  i ++ ) {						      	      d1 = d1 + arr [ i ] [ i ]				    	    d2 += arr [ i ] [ n - i - 1 ]			  
    d1 += arr [ i ] [ i ] ;				      	      d2 = d2 + arr [ i ] [ n - i - 1 ]			    	return abs ( d1 - d2 )					  
    d2 += arr [ i ] [ n - i - 1 ] ;			      	  return abs ( d1 - d2 )				    								  
  }							      								    								  
  return Math . abs ( d1 - d2 ) ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
static int seiresSum ( int n , int [ ] a ) {		      def seiresSum ( n , a ) :					    def seires_sum ( n , a ) :					  script_not_found : None
  int res = 0 , i ;					      	  res = 0						    	res , i = 0 , 0						  
  for ( i = 0 ;						      	  for i in range ( 0 , 2 * n ) :			    	for i in range ( 2 * n ) :				  
  i < 2 * n ;						      	      if ( i % 2 == 0 ) :				    	    if i % 2 == 0 :					  
  i ++ ) {						      		  res += a [ i ] * a [ i ]			    		res += a [ i ] * a [ i ]			  
    if ( i % 2 == 0 ) res += a [ i ] * a [ i ] ;	      	      else :						    	    else :						  
    else res -= a [ i ] * a [ i ] ;			      		  res -= a [ i ] * a [ i ]			    		res -= a [ i ] * a [ i ]			  
  }							      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE_1				      C_PROGRAM_FIND_AREA_TRIANGLE_1				    C_PROGRAM_FIND_AREA_TRIANGLE_1				  C_PROGRAM_FIND_AREA_TRIANGLE_1
--							      --							    --								  --
static double polygonArea ( double X [ ] , double Y [ ] , int def polygonArea ( X , Y , n ) :				    def polygonArea ( X , Y , n ) :				  script_not_found : None
  double area = 0.0 ;					      	  area = 0.0						    	area = 0.0						  
  int j = n - 1 ;					      	  j = n - 1						    	j = n - 1						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ 	    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) 
  i ++ ) {						      	      j = i						    	    j = i						  
    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	  return abs ( area // 2.0 )				    	return abs ( area / 2.0 )				  
    j = i ;						      								    								  
  }							      								    								  
  return Math . abs ( area / 2.0 ) ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
static String sortString ( String str , int n ) {	      def sortString ( str , n ) :				    def sort_string ( str , n ) :				  script_not_found : None
  String new_str = "" ;					      	  new_str = ""						    	new_str = ""						  
  for ( int i = 'a' ;					      	  for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	    	for i in [ 'a' , 'z' ] :				  
  i <= 'z' ;						      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
  i ++ ) for ( int j = 0 ;				      		  if ( str [ j ] == chr ( i ) ) :		    		if str [ j ] == i :				  
  j < n ;						      		      new_str += str [ j ]			    		    new_str += str [ j ]			  
  j ++ ) if ( str . charAt ( j ) == i ) new_str += str . char 	  return new_str					    	return new_str						  
  return new_str ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
static long countWays ( int n , int k ) {		      def countWays ( n , k ) :					    def countWays ( n , k ) :					  failure : #Results: 0, 10
  long total = k ;					      	  total = k						    	total = k						  
  int mod = 1000000007 ;				      	  mod = 1000000007					    	mod = 1000000007					  
  int same = 0 , diff = k ;				      	  same , diff = 0 , k					    	same , diff = 0 , k					  
  for ( int i = 2 ;					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n ) :				  
  i <= n ;						      	      same = diff					    	    same , diff = diff , int ( total * ( k - 1 ) )	  
  i ++ ) {						      	      diff = total * ( k - 1 )				    	    diff = diff % mod					  
    same = diff ;					      	      diff = diff % mod					    	    total = ( same + diff ) % mod			  
    diff = ( int ) total * ( k - 1 ) ;			      	      total = ( same + diff ) % mod			    	return total						  
    diff = diff % mod ;					      	  return total						    								  
    total = ( same + diff ) % mod ;			      								    								  
  }							      								    								  
  return total ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION
--							      --							    --								  --
static int pow ( int a , int b ) {			      def pow ( a , b ) :					    def pow ( a , b ) :						  success : None
  if ( b == 0 ) return 1 ;				      	  if ( b == 0 ) :					    	if b == 0 :						  
  int answer = a ;					      	      return 1						    	    return 1						  
  int increment = a ;					      	  answer = a						    	answer = a						  
  int i , j ;						      	  increment = a						    	increment = a						  
  for ( i = 1 ;						      	  for i in range ( 1 , b ) :				    	i , j = 1 , 0						  
  i < b ;						      	      for j in range ( 1 , a ) :			    	for i in range ( 1 , b ) :				  
  i ++ ) {						      		  answer += increment				    	    for j in range ( 1 , a ) :				  
    for ( j = 1 ;					      	      increment = answer				    		answer += increment				  
    j < a ;						      	  return answer						    	    increment = answer					  
    j ++ ) {						      								    	return answer						  
      answer += increment ;				      								    								  
    }							      								    								  
    increment = answer ;				      								    								  
  }							      								    								  
  return answer ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		      FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		    FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		  FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY
--							      --							    --								  --
static int findSum ( int arr [ ] , int n ) {		      def findSum ( arr , n ) :					    def find_sum ( arr , n ) :					  failure : #Results: 3, 10
  int sum = 0 ;						      	  s = set ( )						    	sum = 0							  
  HashSet < Integer > s = new HashSet < Integer > ( ) ;	      	  sum = 0						    	s = set ( )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if arr [ i ] not in s :				    	    if not s.add ( arr [ i ] ) :			  
  i ++ ) {						      		  s.add ( arr [ i ] )				    		sum += arr [ i ]				  
    if ( ! s . contains ( arr [ i ] ) ) {		      	  for i in s :						    		s.add ( arr [ i ] )				  
      sum += arr [ i ] ;				      	      sum = sum + i					    	return sum						  
      s . add ( arr [ i ] ) ;				      	  return sum						    								  
    }							      								    								  
  }							      								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX				      PROGRAM_PRINT_IDENTITY_MATRIX				    PROGRAM_PRINT_IDENTITY_MATRIX				  PROGRAM_PRINT_IDENTITY_MATRIX
--							      --							    --								  --
static int identity ( int num ) {			      def Identity ( size ) :					    def identity ( num ) :					  script_not_found : None
  int row , col ;					      	  for row in range ( 0 , size ) :			    	row , col = 0 , 0					  
  for ( row = 0 ;					      	      for col in range ( 0 , size ) :			    	for row in range ( num ) :				  
  row < num ;						      		  if ( row == col ) :				    	    for col in range ( num ) :				  
  row ++ ) {						      		      print ( "1 " , end = " " )		    		if row == col :					  
    for ( col = 0 ;					      		  else :					    		    print ( 1 , end = ' ' )			  
    col < num ;						      		      print ( "0 " , end = " " )		    		else :						  
    col ++ ) {						      	      print ( )						    		    print ( 0 , end = ' ' )			  
      if ( row == col ) System . out . print ( 1 + " " ) ;    								    	    print ( )						  
      else System . out . print ( 0 + " " ) ;		      								    	return 0						  
    }							      								    								  
    System . out . println ( ) ;			      								    								  
  }							      								    								  
  return 0 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
static void interchangeFirstLast ( int m [ ] [ ] ) {	      def interchangeFirstLast ( mat , n , m ) :		    def interchange_first_last ( m ) :				  script_not_found : None
  int rows = m . length ;				      	  rows = n						    	rows = m.shape [ 0 ]					  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( m.shape [ 0 ] ) :			  
  i < m [ 0 ] . length ;				      	      t = mat [ 0 ] [ i ]				    	    t = m [ : , i ]					  
  i ++ ) {						      	      mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]		    	    m [ : , i ] = m [ rows - 1 , i ]			  
    int t = m [ 0 ] [ i ] ;				      	      mat [ rows - 1 ] [ i ] = t			    	    m [ rows - 1 , i ] = t				  
    m [ 0 ] [ i ] = m [ rows - 1 ] [ i ] ;		      								    								  
    m [ rows - 1 ] [ i ] = t ;				      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			      DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			    DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			  DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE
--							      --							    --								  --
static int count ( int S [ ] , int m , int n ) {	      def count ( S , m , n ) :					    def count ( S , m , n ) :					  script_not_found : None
  if ( n == 0 ) return 1 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  if ( n < 0 ) return 0 ;				      	      return 1						    	    return 1						  
  if ( m <= 0 && n >= 1 ) return 0 ;			      	  if ( n < 0 ) :					    	if n < 0 :						  
  return count ( S , m - 1 , n ) + count ( S , m , n - S [ m  	      return 0						    	    return 0						  
}							      	  if ( m <= 0 and n >= 1 ) :				    	if m <= 0 and n >= 1 :					  
							      	      return 0						    	    return 0						  
							      	  return count ( S , m - 1 , n ) + count ( S , m , n - S [  	return count ( S , m - 1 , n ) + count ( S , m , n - S [  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_EQUAL_PAIRS_STRING				      NUMBER_EQUAL_PAIRS_STRING					    NUMBER_EQUAL_PAIRS_STRING					  NUMBER_EQUAL_PAIRS_STRING
--							      --							    --								  --
static int countPairs ( String s ) {			      def countPairs ( s ) :					    def count_pairs ( s ) :					  script_not_found : None
  int cnt [ ] = new int [ MAX ] ;			      	  cnt = [ 0 for i in range ( 0 , MAX ) ]		    	cnt = [ 0 ] * MAX					  
  for ( int i = 0 ;					      	  for i in range ( len ( s ) ) :			    	for i in s :						  
  i < s . length ( ) ;					      	      cnt [ ord ( s [ i ] ) - 97 ] += 1			    	    cnt [ i ] += 1					  
  i ++ ) cnt [ s . charAt ( i ) ] ++ ;			      	  ans = 0						    	ans = 0							  
  int ans = 0 ;						      	  for i in range ( 0 , MAX ) :				    	for i in range ( MAX ) :				  
  for ( int i = 0 ;					      	      ans += cnt [ i ] * cnt [ i ]			    	    ans += cnt [ i ] * cnt [ i ]			  
  i < MAX ;						      	  return ans						    	return ans						  
  i ++ ) ans += cnt [ i ] * cnt [ i ] ;			      								    								  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
static float power ( float x , int y ) {		      def power ( x , y ) :					    def power ( x , y ) :					  error : Traceback (most recent call last):   File
  float temp ;						      	  if ( y == 0 ) : return 1				    	temp = 0						  "dump/transcoder/eval/java_python/model_2/transcod
  if ( y == 0 ) return 1 ;				      	  temp = power ( x , int ( y / 2 ) )			    	if y == 0 : return 1					  er_eval/20642196/eval_scripts/java_sa-python_sa.va
  temp = power ( x , y / 2 ) ;				      	  if ( y % 2 == 0 ) :					    	temp = power ( x , y / 2 )				  lid/WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1.py", li
  if ( y % 2 == 0 ) return temp * temp ;		      	      return temp * temp				    	if y % 2 == 0 : return temp * temp			  ne 52, in <module>	 if abs(1 - (0.0000001 + abs
  else {						      	  else :						    	else :							  (f_gold(*parameters_set))) / (abs(f_filled(*parame
    if ( y > 0 ) return x * temp * temp ;		      	      if ( y > 0 ) : return x * temp * temp		    	    if y > 0 : return x * temp * temp			  ters_set)) + 0.0000001)) < 0.001:   File "dump/tra
    else return ( temp * temp ) / x ;			      	      else : return ( temp * temp ) / x			    	    else : return ( temp * temp ) / x			  nscoder/eval/java_python/model_2/transcoder_eval/2
  }							      								    								  0642196/eval_scripts/java_sa-python_sa.valid/WRITE
}							      								    								  _A_C_PROGRAM_TO_CALCULATE_POWXN_1.py", line 30, in
							      								    								   f_filled	temp = f_filled ( x , y / 2 )	File
							      								    								   "dump/transcoder/eval/java_python/model_2/transco
							      								    								  der_eval/20642196/eval_scripts/java_sa-python_sa.v
							      								    								  alid/WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1.py", l
							      								    								  ine 30, in f_filled	  temp = f_filled ( x , y /
							      								    								  2 )	File "dump/transcoder/eval/java_python/model
							      								    								  _2/transcoder_eval/20642196/eval_scripts/java_sa-p
							      								    								  ython_sa.valid/WRITE_A_C_PROGRAM_TO_CALCULATE_POWX
							      								    								  N_1.py", line 30, in f_filled	    temp = f_filled
							      								    								  ( x , y / 2 )	  [Previous line repeated 994 more t
							      								    								  imes]	  File "dump/transcoder/eval/java_python/mod
							      								    								  el_2/transcoder_eval/20642196/eval_scripts/java_sa
							      								    								  -python_sa.valid/WRITE_A_C_PROGRAM_TO_CALCULATE_PO
							      								    								  WXN_1.py", line 29, in f_filled     if y == 0 : re
							      								    								  turn 1 RecursionError: maximum recursion depth exc
							      								    								  eeded in comparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1
--							      --							    --								  --
static int findInteger ( int arr [ ] , int n ) {	      def findInteger ( arr , n ) :				    def findInteger ( arr , n ) :				  success : None
  int neg = 0 , pos = 0 ;				      	  neg = 0						    	neg , pos = 0 , 0					  
  int sum = 0 ;						      	  pos = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  sum = 0						    	for i in range ( n ) :					  
  i < n ;						      	  for i in range ( 0 , n ) :				    	    sum += arr [ i ]					  
  i ++ ) {						      	      sum += arr [ i ]					    	    if arr [ i ] < 0 :					  
    sum += arr [ i ] ;					      	      if ( arr [ i ] < 0 ) :				    		neg += 1					  
    if ( arr [ i ] < 0 ) neg ++ ;			      		  neg += 1					    	    else :						  
    else pos ++ ;					      	      else :						    		pos += 1					  
  }							      		  pos += 1					    	return ( sum / abs ( neg - pos ) )			  
  return ( sum / Math . abs ( neg - pos ) ) ;		      	  return ( sum / abs ( neg - pos ) )			    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
static int countDer ( int n ) {				      def countDer ( n ) :					    def countDer ( n ) :					  script_not_found : None
  if ( n == 1 ) return 0 ;				      	  if ( n == 1 ) : return 0				    	if n == 1 :						  
  if ( n == 0 ) return 1 ;				      	  if ( n == 0 ) : return 1				    	    return 0						  
  if ( n == 2 ) return 1 ;				      	  if ( n == 2 ) : return 1				    	if n == 0 :						  
  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2  	  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  	    return 1						  
}							      								    	if n == 2 :						  
							      								    	    return 1						  
							      								    	return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES
--							      --							    --								  --
static int maxvolume ( int s ) {			      def maxvolume ( s ) :					    def maxvolume ( s ) :					  success : None
  int maxvalue = 0 ;					      	  maxvalue = 0						    	maxvalue = 0						  
  for ( int i = 1 ;					      	  i = 1							    	for i in range ( 1 , s - 2 ) :				  
  i <= s - 2 ;						      	  for i in range ( s - 1 ) :				    	    for j in range ( 1 , s - 1 ) :			  
  i ++ ) {						      	      j = 1						    		k = s - i - j					  
    for ( int j = 1 ;					      	      for j in range ( s ) :				    		maxvalue = max ( maxvalue , i * j * k )		  
    j <= s - 1 ;					      		  k = s - i - j					    	return maxvalue						  
    j ++ ) {						      		  maxvalue = max ( maxvalue , i * j * k )	    								  
      int k = s - i - j ;				      	  return maxvalue					    								  
      maxvalue = Math . max ( maxvalue , i * j * k ) ;	      								    								  
    }							      								    								  
  }							      								    								  
  return maxvalue ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_SPARSE_NOT				      CHECK_GIVEN_MATRIX_SPARSE_NOT				    CHECK_GIVEN_MATRIX_SPARSE_NOT				  CHECK_GIVEN_MATRIX_SPARSE_NOT
--							      --							    --								  --
static boolean isSparse ( int array [ ] [ ] , int m , int n ) def isSparse ( array , m , n ) :				    def is_sparse ( array , m , n ) :				  success : None
  int counter = 0 ;					      	  counter = 0						    	counter = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , m ) :				    	for i in range ( m ) :					  
  i < m ;						      	      for j in range ( 0 , n ) :			    	    for j in range ( n ) :				  
  ++ i ) for ( int j = 0 ;				      		  if ( array [ i ] [ j ] == 0 ) :		    		if array [ i ] [ j ] == 0 :			  
  j < n ;						      		      counter = counter + 1			    		    counter += 1				  
  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;	      	  return ( counter > ( ( m * n ) // 2 ) )		    	return ( counter > ( ( m * n ) / 2 ) )			  
  return ( counter > ( ( m * n ) / 2 ) ) ;		      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
static int countLattice ( int r ) {			      def countLattice ( r ) :					    def countLattice ( r ) :					  success : None
  if ( r <= 0 ) return 0 ;				      	  if ( r <= 0 ) :					    	if r <= 0 :						  
  int result = 4 ;					      	      return 0						    	    return 0						  
  for ( int x = 1 ;					      	  result = 4						    	result = 4						  
  x < r ;						      	  for x in range ( 1 , r ) :				    	for x in range ( 1 , r ) :				  
  x ++ ) {						      	      ySquare = r * r - x * x				    	    ySquare = r ** 2 - x ** 2				  
    int ySquare = r * r - x * x ;			      	      y = int ( math.sqrt ( ySquare ) )			    	    y = int ( math.sqrt ( ySquare ) )			  
    int y = ( int ) Math . sqrt ( ySquare ) ;		      	      if ( y * y == ySquare ) :				    	    if y * y == ySquare :				  
    if ( y * y == ySquare ) result += 4 ;		      		  result += 4					    		result += 4					  
  }							      	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME     MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	    MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	  MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME
--							      --							    --								  --
static int maxRemoval ( int arr [ ] , int n ) {		      def maxRemoval ( arr , n ) :				    def max_removal ( arr , n ) :				  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  int cummulative_sum = 0 ;				      	  cummulative_sum = 0					    	cummulative_sum = 0					  
  Arrays . sort ( arr ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if arr [ i ] >= cummulative_sum :			    	    if arr [ i ] >= cummulative_sum :			  
  i ++ ) {						      		  count += 1					    		count += 1					  
    if ( arr [ i ] >= cummulative_sum ) {		      		  cummulative_sum += arr [ i ]			    		cummulative_sum += arr [ i ]			  
      count ++ ;					      	  return count						    	return count						  
      cummulative_sum += arr [ i ] ;			      								    								  
    }							      								    								  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
int countSubStr ( char str [ ] , int n ) {		      def countSubStr ( st , n ) :				    def countSubStr ( str , n ) :				  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( st [ i ] == '1' ) :				    	    if str [ i ] == '1' :				  
  i ++ ) {						      		  for j in range ( i + 1 , n ) :		    		for j in range ( i + 1 , n ) :			  
    if ( str [ i ] == '1' ) {				      		      if ( st [ j ] == '1' ) :			    		    if str [ j ] == '1' :			  
      for ( int j = i + 1 ;				      			  res = res + 1				    			res += 1				  
      j < n ;						      	  return res						    	return res						  
      j ++ ) {						      								    								  
	if ( str [ j ] == '1' ) res ++ ;		      								    								  
      }							      								    								  
    }							      								    								  
  }							      								    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1		      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1
--							      --							    --								  --
public static int gcdExtended ( int a , int b , int x , int y def gcdExtended ( a , b , x , y ) :			    def gcdExtended ( a , b , x , y ) :				  success : None
  if ( a == 0 ) {					      	  if a == 0 :						    	if a == 0 :						  
    x = 0 ;						      	      x = 0						    	    x = 0						  
    y = 1 ;						      	      y = 1						    	    y = 1						  
    return b ;						      	      return b						    	    return b						  
  }							      	  x1 = 1						    	x1 , y1 = 1 , 1						  
  int x1 = 1 , y1 = 1 ;					      	  y1 = 1						    	gcd = gcdExtended ( b % a , a , x1 , y1 )		  
  int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;	      	  gcd = gcdExtended ( b % a , a , x1 , y1 )		    	x = y1 - ( b // a ) * x1				  
  x = y1 - ( b / a ) * x1 ;				      	  x = y1 - ( b / a ) * x1				    	y = x1							  
  y = x1 ;						      	  y = x1						    	return gcd						  
  return gcd ;						      	  return gcd						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE
--							      --							    --								  --
static boolean checkCount ( int [ ] arr , int n , int k ) {   def checkCount ( arr , n , k ) :				    def check_count ( arr , n , k ) :				  success : None
  int count ;						      	  for i in range ( n ) :				    	count = 0						  
  for ( int i = 0 ;					      	      count = 0						    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( n ) :				    	    count = 0						  
  i ++ ) {						      		  if arr [ j ] == arr [ i ] :			    	    for j in range ( n ) :				  
    count = 0 ;						      		      count += 1				    		if arr [ j ] == arr [ i ] :			  
    for ( int j = 0 ;					      		  if count > 2 * k :				    		    count += 1					  
    j < n ;						      		      return False				    		if count > 2 * k :				  
    j ++ ) {						      	  return True						    		    return False				  
      if ( arr [ j ] == arr [ i ] ) count ++ ;		      								    	return True						  
      if ( count > 2 * k ) return false ;		      								    								  
    }							      								    								  
  }							      								    								  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES			  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES
--							      --							    --								  --
static void reorder ( ) {				      def reorder ( arr , index , n ) :				    def reorder ( ) :						  script_not_found : None
  int temp [ ] = new int [ arr . length ] ;		      	  temp = [ 0 ] * n					    	temp = [ ]						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( len ( arr ) ) :			  
  i < arr . length ;					      	      temp [ index [ i ] ] = arr [ i ]			    	    temp.append ( index [ i ] )				  
  i ++ ) temp [ index [ i ] ] = arr [ i ] ;		      	  for i in range ( 0 , n ) :				    	for i in range ( len ( arr ) ) :			  
  for ( int i = 0 ;					      	      arr [ i ] = temp [ i ]				    	    arr [ i ] = temp [ i ]				  
  i < arr . length ;					      	      index [ i ] = i					    	    index [ i ] = i					  
  i ++ ) {						      								    								  
    arr [ i ] = temp [ i ] ;				      								    								  
    index [ i ] = i ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
static boolean check ( String str ) {			      def check ( st ) :					    def check ( str ) :						  script_not_found : None
  int n = str . length ( ) ;				      	  n = len ( st )					    	n = len ( str )						  
  if ( ( str . charAt ( n - 1 ) - '0' ) % 2 != 0 ) return fal 	  if ( ( ( int ) ( st [ n - 1 ] ) % 2 ) != 0 ) :	    	if ( str [ n - 1 ] - '0' ) % 2 != 0 :			  
  int digitSum = 0 ;					      	      return False					    	    return False					  
  for ( int i = 0 ;					      	  digitSum = 0						    	digitSum = 0						  
  i < n ;						      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      	      digitSum = digitSum + ( int ) ( st [ i ] )	    	    digitSum += ( str [ i ] - '0' )			  
  return ( digitSum % 3 == 0 ) ;			      	  return ( digitSum % 3 == 0 )				    	return ( digitSum % 3 == 0 )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	      BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		    BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		  BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS
--							      --							    --								  --
static int nextFit ( int weight [ ] , int n , int c ) {	      def nextfit ( weight , c ) :				    def next_fit ( weight , n , c ) :				  script_not_found : None
  int res = 0 , bin_rem = c ;				      	  res = 0						    	res , bin_rem = 0 , c					  
  for ( int i = 0 ;					      	  rem = c						    	for i in range ( n ) :					  
  i < n ;						      	  for _ in range ( len ( weight ) ) :			    	    if weight [ i ] > bin_rem :				  
  i ++ ) {						      	      if rem >= weight [ _ ] :				    		res += 1					  
    if ( weight [ i ] > bin_rem ) {			      		  rem = rem - weight [ _ ]			    		bin_rem = c - weight [ i ]			  
      res ++ ;						      	      else :						    	    else :						  
      bin_rem = c - weight [ i ] ;			      		  res += 1					    		bin_rem -= weight [ i ]				  
    }							      		  rem = c - weight [ _ ]			    	return res						  
    else bin_rem -= weight [ i ] ;			      	  return res						    								  
  }							      								    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_ARRAY_REVERSE_AROUND_MIDDLE			      SORTING_ARRAY_REVERSE_AROUND_MIDDLE			    SORTING_ARRAY_REVERSE_AROUND_MIDDLE				  SORTING_ARRAY_REVERSE_AROUND_MIDDLE
--							      --							    --								  --
static boolean ifPossible ( int arr [ ] , int n ) {	      def ifPossible ( arr , n ) :				    def if_possible ( arr , n ) :				  script_not_found : None
  int copy [ ] = Arrays . copyOf ( arr , arr . length ) ;     	  cp = [ 0 ] * n					    	copy = list ( arr )					  
  Arrays . sort ( copy ) ;				      	  cp = arr						    	copy.sort ( )						  
  for ( int i = 0 ;					      	  cp.sort ( )						    	for i in range ( n ) :					  
  i < n ;						      	  for i in range ( 0 , n ) :				    	    if not ( arr [ i ] == copy [ i ] ) and not ( arr [ n  
  i ++ ) {						      	      if ( not ( arr [ i ] == cp [ i ] ) and not ( arr [ n  		return False					  
    if ( ! ( arr [ i ] == copy [ i ] ) && ! ( arr [ n - 1 - i 		  return False					    	return True						  
  }							      	  return True						    								  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_OCTAL_CONVERSION			      PROGRAM_DECIMAL_OCTAL_CONVERSION				    PROGRAM_DECIMAL_OCTAL_CONVERSION				  PROGRAM_DECIMAL_OCTAL_CONVERSION
--							      --							    --								  --
static void decToOctal ( int n ) {			      def decToOctal ( n ) :					    def dec_to_oct ( n ) :					  script_not_found : None
  int [ ] octalNum = new int [ 100 ] ;			      	  octalNum = [ 0 ] * 100				    	octal_num = [ ]						  
  int i = 0 ;						      	  i = 0							    	i = 0							  
  while ( n != 0 ) {					      	  while ( n != 0 ) :					    	while n != 0 :						  
    octalNum [ i ] = n % 8 ;				      	      octalNum [ i ] = n % 8				    	    octal_num.append ( n % 8 )				  
    n = n / 8 ;						      	      n = int ( n / 8 )					    	    n = n // 8						  
    i ++ ;						      	      i += 1						    	    i += 1						  
  }							      	  for j in range ( i - 1 , - 1 , - 1 ) :		    	for j in range ( i - 1 , - 1 , - 1 ) :			  
  for ( int j = i - 1 ;					      	      print ( octalNum [ j ] , end = "" )		    	    print ( octal_num [ j ] )				  
  j >= 0 ;						      								    								  
  j -- ) System . out . print ( octalNum [ j ] ) ;	      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
static String lexNext ( String str , int n ) {		      def lexNext ( s , n ) :					    def lexnext ( str , n ) :					  script_not_found : None
  char [ ] s = str . toCharArray ( ) ;			      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	s = str							  
  for ( int i = n - 1 ;					      	      if s [ i ] != 'z' :				    	for i in range ( n - 1 , - 1 , - 1 ) :			  
  i >= 0 ;						      		  k = ord ( s [ i ] )				    	    if s [ i ] != 'z' :					  
  i -- ) {						      		  s [ i ] = chr ( k + 1 )			    		s [ i ] += 1					  
    if ( s [ i ] != 'z' ) {				      		  return ''.join ( s )				    		return str [ i ]				  
      s [ i ] ++ ;					      	      s [ i ] = 'a'					    	    s [ i ] = 'a'					  
      return String . valueOf ( s ) ;			      								    	return None						  
    }							      								    								  
    s [ i ] = 'a' ;					      								    								  
  }							      								    								  
  return null ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
static int ceilSearch ( int arr [ ] , int low , int high , in def ceilSearch ( arr , low , high , x ) :			    def ceil_search ( arr , low , high , x ) :			  failure : #Results: 9, 10
  int i ;						      	  if x <= arr [ low ] :					    	i = None						  
  if ( x <= arr [ low ] ) return low ;			      	      return low					    	if x <= arr [ low ] :					  
  for ( i = low ;					      	  i = low						    	    return low						  
  i < high ;						      	  for i in range ( high ) :				    	for i in range ( low , high ) :				  
  i ++ ) {						      	      if arr [ i ] == x :				    	    if arr [ i ] == x :					  
    if ( arr [ i ] == x ) return i ;			      		  return i					    		return i					  
    if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; 	      if arr [ i ] < x and arr [ i + 1 ] >= x :		    	    if arr [ i ] < x and arr [ i + 1 ] >= x :		  
  }							      		  return i + 1					    		return i + 1					  
  return - 1 ;						      	  return - 1						    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2		  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY_2
--							      --							    --								  --
static int minSum ( int a [ ] , int n ) {		      def minSum ( a , n ) :					    def minSum ( a , n ) :					  success : None
  Arrays . sort ( a ) ;					      	  a = sorted ( a )					    	a.sort ( )						  
  int num1 = 0 ;					      	  num1 , num2 = 0 , 0					    	num1 = 0						  
  int num2 = 0 ;					      	  for i in range ( n ) :				    	num2 = 0						  
  for ( int i = 0 ;					      	      if i % 2 == 0 :					    	for i in range ( n ) :					  
  i < n ;						      		  num1 = num1 * 10 + a [ i ]			    	    if i % 2 == 0 :					  
  i ++ ) {						      	      else :						    		num1 = num1 * 10 + a [ i ]			  
    if ( i % 2 == 0 ) num1 = num1 * 10 + a [ i ] ;	      		  num2 = num2 * 10 + a [ i ]			    	    else :						  
    else num2 = num2 * 10 + a [ i ] ;			      	  return num2 + num1					    		num2 = num2 * 10 + a [ i ]			  
  }							      								    	return num2 + num1					  
  return num2 + num1 ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			      FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			    FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			  FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE
--							      --							    --								  --
static int dayofweek ( int d , int m , int y ) {	      def dayofweek ( d , m , y ) :				    def dayofweek ( d , m , y ) :				  script_not_found : None
  int t [ ] = {						      	  t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]	    	t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]	  
    0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 }	      	  y -= m < 3						    	y -= ( m < 3 )						  
    ;							      	  return ( ( y + int ( y / 4 ) - int ( y / 100 ) + int ( y  	return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  
    y -= ( m < 3 ) ? 1 : 0 ;				      								    								  
    return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ALTERNATIVE_SORTING					      ALTERNATIVE_SORTING					    ALTERNATIVE_SORTING						  ALTERNATIVE_SORTING
--							      --							    --								  --
static void alternateSort ( int arr [ ] , int n ) {	      def alternateSort ( arr , n ) :				    def alternate_sort ( arr , n ) :				  error :   File "dump/transcoder/eval/java_python/m
  Arrays . sort ( arr ) ;				      	  arr.sort ( )						    	arr.sort ( )						  odel_2/transcoder_eval/20642196/eval_scripts/java_
  int i = 0 , j = n - 1 ;				      	  i = 0							    	i , j = 0 , n - 1					  sa-python_sa.valid/ALTERNATIVE_SORTING.py", line 3
  while ( i < j ) {					      	  j = n - 1						    	while i < j :						  4	print ( arr [ j -- ] , end = ' ' )
    System . out . print ( arr [ j -- ] + " " ) ;	      	  while ( i < j ) :					    	    print ( arr [ j -- ] , end = ' ' )			  		^ SyntaxError: invalid syntax
    System . out . print ( arr [ i ++ ] + " " ) ;	      	      print ( arr [ j ] , end = " " )			    	    print ( arr [ i ++ ] , end = ' ' )			  
  }							      	      j -= 1						    	if n % 2 != 0 :						  
  if ( n % 2 != 0 ) System . out . print ( arr [ i ] ) ;      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] )					  
}							      	      i += 1						    								  
							      	  if ( n % 2 != 0 ) :					    								  
							      	      print ( arr [ i ] )				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT     DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	    DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT
--							      --							    --								  --
static int maxProd ( int n ) {				      def maxProd ( n ) :					    def max_prod ( n ) :					  script_not_found : None
  if ( n == 0 || n == 1 ) return 0 ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  int max_val = 0 ;					      	      return 0						    	    return 0						  
  for ( int i = 1 ;					      	  max_val = 0						    	max_val = 0						  
  i < n ;						      	  for i in range ( 1 , n - 1 ) :			    	for i in range ( 1 , n ) :				  
  i ++ ) max_val = Math . max ( max_val , Math . max ( i * (  	      max_val = max ( max_val , max ( i * ( n - i ) , maxPr 	    max_val = max ( max_val , max ( i * ( n - i ) , max_p 
  return max_val ;					      	  return max_val					    	return max_val						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
