========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
float findArea ( float r ) {				      def findArea ( r ) :					    def findArea ( r ) :					  success : None
  return ( pi * r * r ) ;				      	  PI = 3.142						    	return ( pi * r * r )					  
}							      	  return PI * ( r * r )					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
int perimeter ( int diameter , int height ) {		      def perimeter ( diameter , height ) :			    def perimeter ( diameter , height ) :			  success : identical to gold
  return 2 * ( diameter + height ) ;			      	  return 2 * ( diameter + height )			    	return 2 * ( diameter + height )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1
--							      --							    --								  --
int kthgroupsum ( int k ) {				      def kthgroupsum ( k ) :					    def kthgroupsum ( k ) :					  success : identical to gold
  return k * k * k ;					      	  return k * k * k					    	return k * k * k					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_NUMBER_USING_LOG				      SQUARE_ROOT_NUMBER_USING_LOG				    SQUARE_ROOT_NUMBER_USING_LOG				  SQUARE_ROOT_NUMBER_USING_LOG
--							      --							    --								  --
double squareRoot ( double n ) {			      def squareRoot ( n ) :					    def squareRoot ( n ) :					  script_not_found : None
  return pow ( 2 , 0.5 * log2 ( n ) ) ;			      	  return pow ( 2 , 0.5 * math.log2 ( n ) )		    	return pow ( 2 , 0.5 * log2 ( n ) )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT				      POSITION_OF_RIGHTMOST_SET_BIT				    POSITION_OF_RIGHTMOST_SET_BIT				  POSITION_OF_RIGHTMOST_SET_BIT
--							      --							    --								  --
public : unsigned int getFirstSetBitPos ( int n ) {	      def getFirstSetBitPos ( n ) :				    def get_first_set_bit_pos ( n ) :				  success : None
  return log2 ( n & - n ) + 1 ;				      	  return math.log2 ( n & - n ) + 1			    	return log2 ( n & - n ) + 1				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
void sortString ( string & str ) {			      def sortString ( str ) :					    def sortString ( str ) :					  script_not_found : None
  sort ( str . begin ( ) , str . end ( ) ) ;		      	  str = ''.join ( sorted ( str ) )			    	str = sorted ( str )					  
  cout << str ;						      	  print ( str )						    	print ( str )						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_TO_MULTIPLY_WITH_7			      EFFICIENT_WAY_TO_MULTIPLY_WITH_7				    EFFICIENT_WAY_TO_MULTIPLY_WITH_7				  EFFICIENT_WAY_TO_MULTIPLY_WITH_7
--							      --							    --								  --
long multiplyBySeven ( long n ) {			      def multiplyBySeven ( n ) :				    def multiplyBySeven ( n ) :					  success : identical to gold
  return ( ( n << 3 ) - n ) ;				      	  return ( ( n << 3 ) - n )				    	return ( ( n << 3 ) - n )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION						      TAIL_RECURSION						    TAIL_RECURSION						  TAIL_RECURSION
--							      --							    --								  --
unsigned int fact ( unsigned int n ) {			      def fact ( n ) :						    def fact ( n ) :						  success : None
  if ( n == 0 ) return 1 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  return n * fact ( n - 1 ) ;				      	      return 1						    	    return 1						  
}							      	  return n * fact ( n - 1 )				    	return n * fact ( n - 1 )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			      MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			    MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			  MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA
--							      --							    --								  --
int minHeight ( int base , int area ) {			      def minHeight ( area , base ) :				    def minHeight ( base , area ) :				  success : None
  return ceil ( ( float ) ( 2 * area ) / base ) ;	      	  return math.ceil ( ( 2 * area ) / base )		    	return math.ceil ( float ( 2 * area ) / base )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_CIRCUMSCRIBED_CIRCLE_SQUARE			      AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				    AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				  AREA_CIRCUMSCRIBED_CIRCLE_SQUARE
--							      --							    --								  --
float areacircumscribed ( float a ) {			      def areacircumscribed ( a ) :				    def areacircumscribed ( a ) :				  script_not_found : None
  return ( a * a * ( PI / 2 ) ) ;			      	  return ( a * a * ( PI / 2 ) )				    	return ( a * a * ( PI / 2 ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES_1				      NUMBER_TRIANGLES_N_MOVES_1				    NUMBER_TRIANGLES_N_MOVES_1					  NUMBER_TRIANGLES_N_MOVES_1
--							      --							    --								  --
int numberOfTriangles ( int n ) {			      def numberOfTriangles ( n ) :				    def number_of_triangles ( n ) :				  error : Traceback (most recent call last):   File
  int ans = 2 * ( pow ( 3 , n ) ) - 1 ;			      	  ans = 2 * ( pow ( 3 , n ) ) - 1			    	ans = 2 ** ( pow ( 3 , n ) ) - 1			  "dump/transcoder/eval/cpp_python/model_2/transcode
  return ans ;						      	  return ans						    	return ans						  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
}							      								    								  d/NUMBER_TRIANGLES_N_MOVES_1.py", line 42, in <mod
							      								    								  ule>	   if abs(1 - (0.0000001 + abs(f_gold(*param
							      								    								  eters_set))) / (abs(f_filled(*parameters_set)) + 0
							      								    								  .0000001)) < 0.001:	File "dump/transcoder/eval/c
							      								    								  pp_python/model_2/transcoder_eval/20643759/eval_sc
							      								    								  ripts/cpp_sa-python_sa.valid/NUMBER_TRIANGLES_N_MO
							      								    								  VES_1.py", line 23, in f_filled     ans = 2 ** ( p
							      								    								  ow ( 3 , n ) ) - 1 OverflowError: (34, 'Numerical
							      								    								  result out of range')
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
float circumferenceparallelogram ( float a , float b ) {      def circumferenceparallelogram ( a , b ) :		    def circumferenceparallelogram ( a , b ) :			  success : identical to gold
  return ( ( 2 * a ) + ( 2 * b ) ) ;			      	  return ( ( 2 * a ) + ( 2 * b ) )			    	return ( ( 2 * a ) + ( 2 * b ) )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
void timeToMeet ( double s , double v ) {		      def timeToMeet ( s , v ) :				    def timeToMeet ( s , v ) :					  script_not_found : None
  double V = 3 * v / 2 ;				      	  V = 3 * v / 2						    	V = 3 * v / 2						  
  double time = s / V ;					      	  time = s / V						    	time = s / V						  
  cout << time ;					      	  print ( time )					    	print ( time )						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_FACTORIALS_TWO_NUMBERS				      GCD_FACTORIALS_TWO_NUMBERS				    GCD_FACTORIALS_TWO_NUMBERS					  GCD_FACTORIALS_TWO_NUMBERS
--							      --							    --								  --
int gcdOfFactorial ( int m , int n ) {			      def gcdOfFactorial ( m , n ) :				    def gcdOfFactorial ( m , n ) :				  success : None
  return factorial ( min ( m , n ) ) ;			      	  return math.factorial ( min ( m , n ) )		    	return factorial ( min ( m , n ) )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
int factorial ( int n ) {				      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n if n == 1 or n == 0 else n * factorial ( n - 1 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_HEXAGON					      AREA_OF_A_HEXAGON						    AREA_OF_A_HEXAGON						  AREA_OF_A_HEXAGON
--							      --							    --								  --
double hexagonArea ( double s ) {			      def hexagonArea ( s ) :					    def hexagon_area ( s ) :					  success : None
  return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	      	  return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 )	    	return ( ( 3 * math.sqrt ( 3 ) * ( s ** 2 ) ) / 2 )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SEQUENCE_2_22_222					      SUM_SEQUENCE_2_22_222					    SUM_SEQUENCE_2_22_222					  SUM_SEQUENCE_2_22_222
--							      --							    --								  --
float sumOfSeries ( int n ) {				      def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  success : None
  return 0.0246 * ( pow ( 10 , n ) - 1 - ( 9 * n ) ) ;	      	  return 0.0246 * ( math.pow ( 10 , n ) - 1 - ( 9 * n ) )   	return 0.0246 * ( pow ( 10 , n ) - 1 - ( 9 * n ) )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
int Circumference ( int l , int w ) {			      def Circumference ( l , w ) :				    def Circumference ( l , w ) :				  success : identical to gold
  return ( 2 * ( l + w ) ) ;				      	  return ( 2 * ( l + w ) )				    	return ( 2 * ( l + w ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM	      PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		    PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		  PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM
--							      --							    --								  --
float findVolume ( float l , float b , float h ) {	      def findVolume ( l , b , h ) :				    def findVolume ( l , b , h ) :				  success : None
  float volume = ( l * b * h ) / 2 ;			      	  return ( ( l * b * h ) / 2 )				    	volume = ( l * b * h ) / 2				  
  return volume ;					      								    	return volume						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
int find ( double p ) {					      def find ( p ) :						    def find ( p ) :						  script_not_found : None
  return ceil ( sqrt ( 2 * 365 * log ( 1 / ( 1 - p ) ) ) ) ;  	  return math.ceil ( math.sqrt ( 2 * 365 * math.log ( 1 / ( 	return ceil ( sqrt ( 2 * 365 * log ( 1 / ( 1 - p ) ) ) )  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
int factorial ( int n ) {				      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n if n == 1 or n == 0 else n * factorial ( n - 1 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
bool checkOrigin ( int x1 , int y1 , int x2 , int y2 ) {      def checkOrigin ( x1 , y1 , x2 , y2 ) :			    def checkOrigin ( x1 , y1 , x2 , y2 ) :			  success : identical to gold
  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ;	      	  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )	    	return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL					      DOUBLE_FACTORIAL						    DOUBLE_FACTORIAL						  DOUBLE_FACTORIAL
--							      --							    --								  --
unsigned int doublefactorial ( unsigned int n ) {	      def doublefactorial ( n ) :				    def doublefactorial ( n ) :					  success : None
  if ( n == 0 || n == 1 ) return 1 ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  return n * doublefactorial ( n - 2 ) ;		      	      return 1						    	    return 1						  
}							      	  return n * doublefactorial ( n - 2 )			    	return n * doublefactorial ( n - 2 )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		      ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		    ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER			  ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
int factorial ( int n ) {				      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	return ( n if n == 1 or n == 0 else n * factorial ( n - 1 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
void bin ( unsigned n ) {				      def bin ( n ) :						    def bin ( n ) :						  script_not_found : None
  if ( n > 1 ) bin ( n / 2 ) ;				      	  if n > 1 :						    	if n > 1 :						  
  cout << n % 2 ;					      	      bin ( n // 2 )					    	    bin ( n / 2 )					  
}							      	  print ( n % 2 , end = "" )				    	print ( n % 2 )						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
int sumOfSeries ( int n ) {				      def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  failure : #Results: 7, 10
  return 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * n ;	      	  return ( int ) ( 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * 	return 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * n	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  int res = 1 , i ;					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	res , i = 1 , 0						  
  for ( i = 2 ;						      								    	for i in range ( 2 , n + 1 ) :				  
  i <= n ;						      								    	    res *= i						  
  i ++ ) res *= i ;					      								    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1
--							      --							    --								  --
int countIntegralSolutions ( int n ) {			      def countIntegralSolutions ( n ) :			    def countIntegralSolutions ( n ) :				  success : None
  return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;		      	  return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )		    	return ( ( n + 1 ) * ( n + 2 ) ) / 2			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER				      COUNT_SET_BITS_IN_AN_INTEGER				    COUNT_SET_BITS_IN_AN_INTEGER				  COUNT_SET_BITS_IN_AN_INTEGER
--							      --							    --								  --
unsigned int countSetBits ( unsigned int n ) {		      def countSetBits ( n ) :					    def countSetBits ( n ) :					  success : None
  unsigned int count = 0 ;				      	  count = 0						    	count = 0						  
  while ( n ) {						      	  while ( n ) :						    	while n :						  
    count += n & 1 ;					      	      count += n & 1					    	    count += n & 1					  
    n >>= 1 ;						      	      n >>= 1						    	    n >>= 1						  
  }							      	  return count						    	return count						  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2
--							      --							    --								  --
int getRemainder ( int num , int divisor ) {		      def getRemainder ( num , divisor ) :			    def getRemainder ( num , divisor ) :			  success : None
  while ( num >= divisor ) num -= divisor ;		      	  while ( num >= divisor ) :				    	while num >= divisor :					  
  return num ;						      	      num -= divisor					    	    num -= divisor					  
}							      	  return num						    	return num						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE
--							      --							    --								  --
float areaOfInscribedCircle ( float a ) {		      def areaOfInscribedCircle ( a ) :				    def areaOfInscribedCircle ( a ) :				  script_not_found : None
  return ( PI / 4 ) * a * a ;				      	  return ( PI / 4 ) * a * a				    	return ( PI / 4 ) * a * a				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_AREA_TETRAHEDRON				      CALCULATE_AREA_TETRAHEDRON				    CALCULATE_AREA_TETRAHEDRON					  CALCULATE_AREA_TETRAHEDRON
--							      --							    --								  --
double vol_tetra ( int side ) {				      def vol_tetra ( side ) :					    def vol_tetra ( side ) :					  success : None
  double volume = ( pow ( side , 3 ) / ( 6 * sqrt ( 2 ) ) ) ; 	  volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )	    	volume = ( pow ( side , 3 ) / ( 6 * sqrt ( 2 ) ) )	  
  return volume ;					      	  return round ( volume , 2 )				    	return volume						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12_1				      SUM_SERIES_12_32_52_2N_12_1				    SUM_SERIES_12_32_52_2N_12_1					  SUM_SERIES_12_32_52_2N_12_1
--							      --							    --								  --
int sumOfSeries ( int n ) {				      def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  success : None
  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;	      	  return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )  	return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
int countNumberOfTriangles ( int n ) {			      def countNumberOfTriangles ( n ) :			    def countNumberOfTriangles ( n ) :				  success : None
  return n * ( n - 1 ) * ( n - 2 ) / 6 ;		      	  return ( n * ( n - 1 ) * ( n - 2 ) // 6 )		    	return n * ( n - 1 ) * ( n - 2 ) / 6			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1
--							      --							    --								  --
int MaximumHeight ( int a [ ] , int n ) {		      def MaximumHeight ( a , n ) :				    def MaximumHeight ( a , n ) :				  success : None
  return floor ( ( - 1 + sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ;     	  return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2 	return math.floor ( ( - 1 + math.sqrt ( 1 + ( 8 * n ) ) ) 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
int findIndex ( int n ) {				      def findIndex ( n ) :					    def findIndex ( n ) :					  failure : #Results: 0, 10
  float fibo = 2.078087 * log ( n ) + 1.672276 ;	      	  fibo = 2.078087 * math.log ( n ) + 1.672276		    	fibo = 2.078087 * math.log ( n , 2 ) + 1.672276		  
  return round ( fibo ) ;				      	  return round ( fibo )					    	return round ( fibo , 2 )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
unsigned long long findSumSubsets ( int n ) {		      def findSumSubsets ( n ) :				    def findSumSubsets ( n ) :					  success : identical to gold
  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) ) ;	      	  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	    	return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_MID_POINT_LINE				      PROGRAM_FIND_MID_POINT_LINE				    PROGRAM_FIND_MID_POINT_LINE					  PROGRAM_FIND_MID_POINT_LINE
--							      --							    --								  --
void midpoint ( int x1 , int x2 , int y1 , int y2 ) {	      def midpoint ( x1 , x2 , y1 , y2 ) :			    def midpoint ( x1 , x2 , y1 , y2 ) :			  script_not_found : None
  cout << ( float ) ( x1 + x2 ) / 2 << " , " << ( float ) ( y 	  print ( ( x1 + x2 ) // 2 , " , " , ( y1 + y2 ) // 2 )	    	print ( "%.2f , %.2f" % ( float ( x1 + x2 ) / 2 , float ( 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1
--							      --							    --								  --
int compute_average ( int a , int b ) {			      def compute_average ( a , b ) :				    def compute_average ( a , b ) :				  failure : #Results: 1, 10
  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;  	  return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 	return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 )  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER	  WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER
--							      --							    --								  --
bool getParity ( unsigned int n ) {			      def getParity ( n ) :					    def getParity ( n ) :					  failure : #Results: 5, 10
  bool parity = 0 ;					      	  parity = 0						    	parity = 0						  
  while ( n ) {						      	  while n :						    	while n :						  
    parity = ! parity ;					      	      parity = ~ parity					    	    parity = not parity					  
    n = n & ( n - 1 ) ;					      	      n = n & ( n - 1 )					    	    n = n & ( n - 1 )					  
  }							      	  return parity						    	return parity						  
  return parity ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10	      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10
--							      --							    --								  --
int round ( int n ) {					      def round ( n ) :						    def round ( n ) :						  failure : #Results: 1, 10
  int a = ( n / 10 ) * 10 ;				      	  a = ( n // 10 ) * 10					    	a = ( n / 10 ) * 10					  
  int b = a + 10 ;					      	  b = a + 10						    	b = a + 10						  
  return ( n - a > b - n ) ? b : a ;			      	  return ( b if n - a > b - n else a )			    	return ( n - a > b - n )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_1				      POSITION_OF_RIGHTMOST_SET_BIT_1				    POSITION_OF_RIGHTMOST_SET_BIT_1				  POSITION_OF_RIGHTMOST_SET_BIT_1
--							      --							    --								  --
int PositionRightmostSetbit ( int n ) {			      def PositionRightmostSetbit ( n ) :			    def PositionRightmostSetbit ( n ) :				  success : None
  int position = 1 ;					      	  position = 1						    	position = 1						  
  int m = 1 ;						      	  m = 1							    	m = 1							  
  while ( ! ( n & m ) ) {				      	  while ( not ( n & m ) ) :				    	while not ( n & m ) :					  
    m = m << 1 ;					      	      m = m << 1					    	    m = m << 1						  
    position ++ ;					      	      position += 1					    	    position += 1					  
  }							      	  return position					    	return position						  
  return position ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
void myCopy ( char s1 [ ] , char s2 [ ] ) {		      def myCopy ( s1 , s2 ) :					    def myCopy ( s1 , s2 ) :					  script_not_found : None
  int i = 0 ;						      	  for i in range ( len ( s1 ) ) :			    	i = 0							  
  for ( i = 0 ;						      	      s2 [ i ] = s1 [ i ]				    	for i in range ( len ( s1 ) ) :				  
  s1 [ i ] != '\0' ;					      								    	    s2 [ i ] = s1 [ i ]					  
  i ++ ) s2 [ i ] = s1 [ i ] ;				      								    	s2 = s2 [ i : ]						  
  s2 [ i ] = '\0' ;					      								    	return s2						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI
--							      --							    --								  --
int numberOfSquares ( int base ) {			      def numberOfSquares ( base ) :				    def numberOfSquares ( base ) :				  success : identical to gold
  base = ( base - 2 ) ;					      	  base = ( base - 2 )					    	base = ( base - 2 )					  
  base = base / 2 ;					      	  base = base / 2					    	base = base / 2						  
  return base * ( base + 1 ) / 2 ;			      	  return base * ( base + 1 ) / 2			    	return base * ( base + 1 ) / 2				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
int linearSearch ( int arr [ ] , int n ) {		      def linearSearch ( arr , n ) :				    def linearSearch ( arr , n ) :				  success : None
  int i ;						      	  for i in range ( n ) :				    	i = 0							  
  for ( i = 0 ;						      	      if arr [ i ] is i :				    	for i in range ( n ) :					  
  i < n ;						      		  return i					    	    if arr [ i ] == i :					  
  i ++ ) {						      	  return - 1						    		return i					  
    if ( arr [ i ] == i ) return i ;			      								    	return - 1						  
  }							      								    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POWER_POWER_MOD_PRIME				      FIND_POWER_POWER_MOD_PRIME				    FIND_POWER_POWER_MOD_PRIME					  FIND_POWER_POWER_MOD_PRIME
--							      --							    --								  --
unsigned int Calculate ( unsigned int A , unsigned int B , un def calculate ( A , B , C , M ) :				    def calculate ( A , B , C , M ) :				  error : Traceback (most recent call last):   File
  unsigned int res , ans ;				      	  res = pow ( B , C , M - 1 )				    	res , ans = power ( B , C , M - 1 )			  "dump/transcoder/eval/cpp_python/model_2/transcode
  res = power ( B , C , M - 1 ) ;			      	  ans = pow ( A , res , M )				    	ans = power ( A , res , M )				  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  ans = power ( A , res , M ) ;				      	  return ans						    	return ans						  d/FIND_POWER_POWER_MOD_PRIME.py", line 44, in <mod
  return ans ;						      								    								  ule>	   if f_filled(*parameters_set) == f_gold(*p
}							      								    								  arameters_set):   File "dump/transcoder/eval/cpp_p
							      								    								  ython/model_2/transcoder_eval/20643759/eval_script
							      								    								  s/cpp_sa-python_sa.valid/FIND_POWER_POWER_MOD_PRIM
							      								    								  E.py", line 24, in f_filled	  res , ans = power
							      								    								  ( B , C , M - 1 ) NameError: name 'power' is not d
							      								    								  efined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
int Add ( int x , int y ) {				      def Add ( x , y ) :					    def Add ( x , y ) :						  success : None
  while ( y != 0 ) {					      	  while ( y != 0 ) :					    	while y != 0 :						  
    int carry = x & y ;					      	      carry = x & y					    	    carry = x & y					  
    x = x ^ y ;						      	      x = x ^ y						    	    x = x ^ y						  
    y = carry << 1 ;					      	      y = carry << 1					    	    y = carry << 1					  
  }							      	  return x						    	return x						  
  return x ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y				    FIND_UNIT_DIGIT_X_RAISED_POWER_Y				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y
--							      --							    --								  --
int unitDigitXRaisedY ( int x , int y ) {		      def unitDigitXRaisedY ( x , y ) :				    def unitDigitXRaisedY ( x , y ) :				  success : identical to gold
  int res = 1 ;						      	  res = 1						    	res = 1							  
  for ( int i = 0 ;					      	  for i in range ( y ) :				    	for i in range ( y ) :					  
  i < y ;						      	      res = ( res * x ) % 10				    	    res = ( res * x ) % 10				  
  i ++ ) res = ( res * x ) % 10 ;			      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
public : int sumDigits ( int no ) {			      def sumDigits ( no ) :					    def sum_digits ( no ) :					  failure : #Results: 0, 10
  return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 ) ;      	  return 0 if no == 0 else int ( no % 10 ) + sumDigits ( in 	return no if no % 10 == 0 else no % 10 + sum_digits ( no  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
int findSum ( int n ) {					      def findSum ( n ) :					    def findSum ( n ) :						  success : identical to gold
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += i * ( n - i )				    	    sum += i * ( n - i )				  
  i ++ ) sum += i * ( n - i ) ;				      	  return 2 * sum					    	return 2 * sum						  
  return 2 * sum ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		  SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
int findElement ( int arr [ ] , int n , int key ) {	      def findElement ( arr , n , key ) :			    def findElement ( arr , n , key ) :				  success : None
  int i ;						      	  for i in range ( n ) :				    	i = 0							  
  for ( i = 0 ;						      	      if ( arr [ i ] == key ) :				    	for i in range ( n ) :					  
  i < n ;						      		  return i					    	    if arr [ i ] == key :				  
  i ++ ) if ( arr [ i ] == key ) return i ;		      	  return - 1						    		return i					  
  return - 1 ;						      								    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_ARRII					      MAXIMIZE_SUM_ARRII					    MAXIMIZE_SUM_ARRII						  MAXIMIZE_SUM_ARRII
--							      --							    --								  --
int maxSum ( int arr [ ] , int n ) {			      def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  success : None
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr = sorted ( arr )					  
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += arr [ i ] * i				    	    sum += ( arr [ i ] * i )				  
  i ++ ) sum += ( arr [ i ] * i ) ;			      	  return sum						    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1
--							      --							    --								  --
void findElements ( int arr [ ] , int n ) {		      def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr = sorted ( arr )					  
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 2 ) :			    	for i in range ( n - 2 ) :				  
  i < n - 2 ;						      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] , end = ' ' )			  
  i ++ ) cout << arr [ i ] << " " ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	      SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE
--							      --							    --								  --
long long int calculateSum ( int n ) {			      def calculateSum ( n ) :					    def calculateSum ( n ) :					  success : identical to gold
  long long int sum = 0 ;				      	  sum = 0						    	sum = 0							  
  for ( int row = 0 ;					      	  for row in range ( n ) :				    	for row in range ( n ) :				  
  row < n ;						      	      sum = sum + ( 1 << row )				    	    sum = sum + ( 1 << row )				  
  row ++ ) {						      	  return sum						    	return sum						  
    sum = sum + ( 1 << row ) ;				      								    								  
  }							      								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM
--							      --							    --								  --
int summingSeries ( long n ) {				      def summingSeries ( n ) :					    def summing_series ( n ) :					  success : None
  int S = 0 ;						      	  S = 0							    	S = 0							  
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      S += i * i - ( i - 1 ) * ( i - 1 )		    	    S += i ** 2 - ( i - 1 ) ** 2			  
  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;		      	  return S						    	return S						  
  return S ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD		  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD
--							      --							    --								  --
bool isPrime ( int n ) {				      def isPrime ( n ) :					    def isPrime ( n ) :						  success : identical to gold
  if ( n <= 1 ) return false ;				      	  if n <= 1 :						    	if n <= 1 :						  
  for ( int i = 2 ;					      	      return False					    	    return False					  
  i < n ;						      	  for i in range ( 2 , n ) :				    	for i in range ( 2 , n ) :				  
  i ++ ) if ( n % i == 0 ) return false ;		      	      if n % i == 0 :					    	    if n % i == 0 :					  
  return true ;						      		  return False					    		return False					  
}							      	  return True						    	return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
float calc_Expectation ( float a [ ] , float n ) {	      def calc_Expectation ( a , n ) :				    def calc_expectation ( a , n ) :				  script_not_found : None
  float prb = ( 1 / n ) ;				      	  prb = 1 / n						    	prb = ( 1 / n )						  
  float sum = 0 ;					      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += ( a [ i ] * prb )				    	    sum += a [ i ] * prb				  
  i ++ ) sum += a [ i ] * prb ;				      	  return float ( sum )					    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
int countDyckPaths ( unsigned int n ) {			      def countDyckPaths ( n ) :				    def countDyckPaths ( n ) :					  success : None
  int res = 1 ;						      	  res = 1						    	res = 1							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      res *= ( 2 * n - i )				    	    res *= ( 2 * n - i )				  
  ++ i ) {						      	      res /= ( i + 1 )					    	    res /= ( i + 1 )					  
    res *= ( 2 * n - i ) ;				      	  return res / ( n + 1 )				    	return res / ( n + 1 )					  
    res /= ( i + 1 ) ;					      								    								  
  }							      								    								  
  return res / ( n + 1 ) ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_ALL_ODD_AND_EVEN_BITS				      SWAP_ALL_ODD_AND_EVEN_BITS				    SWAP_ALL_ODD_AND_EVEN_BITS					  SWAP_ALL_ODD_AND_EVEN_BITS
--							      --							    --								  --
unsigned int swapBits ( unsigned int x ) {		      def swapBits ( x ) :					    def swap_bits ( x ) :					  success : None
  unsigned int even_bits = x & 0xAAAAAAAA ;		      	  even_bits = x & 0xAAAAAAAA				    	even_bits = x & 0xAAAAAAAA				  
  unsigned int odd_bits = x & 0x55555555 ;		      	  odd_bits = x & 0x55555555				    	odd_bits = x & 0x55555555				  
  even_bits >>= 1 ;					      	  even_bits >>= 1					    	even_bits >>= 1						  
  odd_bits <<= 1 ;					      	  odd_bits <<= 1					    	odd_bits <<= 1						  
  return ( even_bits | odd_bits ) ;			      	  return ( even_bits | odd_bits )			    	return ( even_bits | odd_bits )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION_FIBONACCI				      TAIL_RECURSION_FIBONACCI					    TAIL_RECURSION_FIBONACCI					  TAIL_RECURSION_FIBONACCI
--							      --							    --								  --
int fib ( int n , int a = 0 , int b = 1 ) {		      def fib ( n , a = 0 , b = 1 ) :				    def fib ( n , a = 0 , b = 1 ) :				  success : None
  if ( n == 0 ) return a ;				      	  if n == 0 :						    	if n == 0 :						  
  if ( n == 1 ) return b ;				      	      return a						    	    return a						  
  return fib ( n - 1 , b , a + b ) ;			      	  if n == 1 :						    	if n == 1 :						  
}							      	      return b						    	    return b						  
							      	  return fib ( n - 1 , b , a + b ) ;			    	return fib ( n - 1 , b , a + b )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE_1			      SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				    SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				  SQUARE_ROOT_OF_A_PERFECT_SQUARE_1
--							      --							    --								  --
public : float squareRoot ( float n ) {			      def squareRoot ( n ) :					    def square_root ( n ) :					  script_not_found : None
  float x = n ;						      	  x = n							    	x = n							  
  float y = 1 ;						      	  y = 1							    	y = 1							  
  float e = 0.000001 ;					      	  while ( x > y ) :					    	e = 0.000001						  
  while ( x - y > e ) {					      	      x = ( x + y ) / 2					    	while x - y > e :					  
    x = ( x + y ) / 2 ;					      	      y = n / x						    	    x = ( x + y ) / 2					  
    y = n / x ;						      	  return x						    	    y = n / x						  
  }							      								    	return x						  
  return x ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_N_UNDER_MODULO_P				      COMPUTE_N_UNDER_MODULO_P					    COMPUTE_N_UNDER_MODULO_P					  COMPUTE_N_UNDER_MODULO_P
--							      --							    --								  --
int modFact ( int n , int p ) {				      def modFact ( n , p ) :					    def modFact ( n , p ) :					  success : identical to gold
  if ( n >= p ) return 0 ;				      	  if n >= p :						    	if n >= p :						  
  int result = 1 ;					      	      return 0						    	    return 0						  
  for ( int i = 1 ;					      	  result = 1						    	result = 1						  
  i <= n ;						      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i ++ ) result = ( result * i ) % p ;			      	      result = ( result * i ) % p			    	    result = ( result * i ) % p				  
  return result ;					      	  return result						    	return result						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING		      LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			    LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			  LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING
--							      --							    --								  --
string LexicographicalMaxString ( string str ) {	      def LexicographicalMaxString ( str ) :			    def lexists ( path ) :					  error : Traceback (most recent call last):   File
  string mx = "" ;					      	  mx = ""						    	"""Test whether a path exists.Returns True for broken sym "dump/transcoder/eval/cpp_python/model_2/transcode
  for ( int i = 0 ;					      	  for i in range ( len ( str ) ) :			    	try :							  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  i < str . length ( ) ;				      	      mx = max ( mx , str [ i : ] )			    	    os.lstat ( path )					  d/LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING.py", li
  ++ i ) mx = max ( mx , str . substr ( i ) ) ;		      	  return mx						    	except os.error :					  ne 27, in f_filled	 os.lstat ( path ) NameError
  return mx ;						      								    	    return False					  : name 'os' is not defined  During handling of the
}							      								    	return True						   above exception, another exception occurred:	 Tra
							      								    	# Are two filenames really pointing to the same file?	  ceback (most recent call last):   File "dump/trans
							      								    								  coder/eval/cpp_python/model_2/transcoder_eval/2064
							      								    								  3759/eval_scripts/cpp_sa-python_sa.valid/LEXICOGRA
							      								    								  PHICAL_MAXIMUM_SUBSTRING_STRING.py", line 49, in <
							      								    								  module>     if f_filled(*parameters_set) == f_gold
							      								    								  (*parameters_set):   File "dump/transcoder/eval/cp
							      								    								  p_python/model_2/transcoder_eval/20643759/eval_scr
							      								    								  ipts/cpp_sa-python_sa.valid/LEXICOGRAPHICAL_MAXIMU
							      								    								  M_SUBSTRING_STRING.py", line 28, in f_filled	   e
							      								    								  xcept os.error : NameError: name 'os' is not defin
							      								    								  ed
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
int minMaxProduct ( int arr1 [ ] , int arr2 [ ] , int n1 , in def minmaxProduct ( arr1 , arr2 , n1 , n2 ) :		    def minMaxProduct ( arr1 , arr2 , n1 , n2 ) :		  script_not_found : None
  sort ( arr1 , arr1 + n1 ) ;				      	  arr1.sort ( )						    	arr1.sort ( )						  
  sort ( arr2 , arr2 + n2 ) ;				      	  arr2.sort ( )						    	arr2.sort ( )						  
  return arr1 [ n1 - 1 ] * arr2 [ 0 ] ;			      	  return arr1 [ n1 - 1 ] * arr2 [ 0 ]			    	return arr1 [ n1 - 1 ] * arr2 [ 0 ]			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
void myCopy ( char s1 [ ] , char s2 [ ] , int index = 0 ) {   def myCopy ( s1 , s2 , index ) :				    def myCopy ( s1 , s2 , index = 0 ) :			  failure : #Results: 2, 10
  s2 [ index ] = s1 [ index ] ;				      	  s2 [ index ] = s1 [ index ]				    	s2 = s1 [ index : index + 1 ]				  
  if ( s1 [ index ] == '\0' ) return ;			      	  if ( index == len ( s1 ) - 1 ) :			    	if s1 == s2 :						  
  myCopy ( s1 , s2 , index + 1 ) ;			      	      return						    	    return						  
}							      	  myCopy ( s1 , s2 , index + 1 )			    	return s1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			    FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1
--							      --							    --								  --
int unitnumber ( int x , int y ) {			      def unitnumber ( x , y ) :				    def unitnumber ( x , y = None ) :				  failure : #Results: 0, 10
  x = x % 10 ;						      	  x = x % 10						    	x = x % 10						  
  if ( y != 0 ) y = y % 4 + 4 ;				      	  if y != 0 :						    	if y is not None :					  
  return ( ( ( int ) ( pow ( x , y ) ) ) % 10 ) ;	      	      y = y % 4 + 4					    	    y = y % 4 + 4					  
}							      	  return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )	    	return ( ( ( int ( math.pow ( x , y ) ) ) % 10 ) + ( ( in 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT
--							      --							    --								  --
int check ( string str ) {				      def check ( num ) :					    def check ( str ) :						  script_not_found : None
  int n = str . length ( ) ;				      	  digitSum = 0						    	n = len ( str )						  
  int digitSum = 0 ;					      	  while num > 0 :					    	digitSum = 0						  
  for ( int i = 0 ;					      	      rem = num % 10					    	for i in range ( n ) :					  
  i < n ;						      	      digitSum = digitSum + rem				    	    digitSum += ( str [ i ] - '0' )			  
  i ++ ) digitSum += ( str [ i ] - '0' ) ;		      	      num = num // 10					    	return ( digitSum % 3 == 0 )				  
  return ( digitSum % 3 == 0 ) ;			      	  return ( digitSum % 3 == 0 )				    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN
--							      --							    --								  --
int findSum ( int n ) {					      def findSum ( N ) :					    def findSum ( n ) :						  failure : #Results: 0, 10
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  for ( int i = 1 ;					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      for j in range ( 1 , N + 1 ) :			    	    for j in range ( 1 , n + 1 ) :			  
  i ++ ) for ( int j = 1 ;				      		  ans += i // j					    		ans += ( i / j )				  
  j <= n ;						      	  return ans						    	return ans						  
  j ++ ) ans += ( i / j ) ;				      								    								  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2					      SORT_ARRAY_WAVE_FORM_2					    SORT_ARRAY_WAVE_FORM_2					  SORT_ARRAY_WAVE_FORM_2
--							      --							    --								  --
void sortInWave ( int arr [ ] , int n ) {		      def sortInWave ( arr , n ) :				    def sortInWave ( arr , n ) :				  error : Traceback (most recent call last):   File
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr = sorted ( arr )					  "dump/transcoder/eval/cpp_python/model_2/transcode
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 1 , 2 ) :			    	for i in range ( 0 , n - 1 , 2 ) :			  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  i < n - 1 ;						      	      arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ] 	    swap ( [ arr [ i ] , arr [ i + 1 ] ] )		  d/SORT_ARRAY_WAVE_FORM_2.py", line 56, in <module>
  i += 2 ) swap ( & arr [ i ] , & arr [ i + 1 ] ) ;	      								    								       f_filled(*(filled_function_param[i]))   File
}							      								    								  "dump/transcoder/eval/cpp_python/model_2/transcode
							      								    								  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
							      								    								  d/SORT_ARRAY_WAVE_FORM_2.py", line 26, in f_filled
							      								    								       swap ( [ arr [ i ] , arr [ i + 1 ] ] ) NameEr
							      								    								  ror: name 'swap' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
bool pythagorean_quadruple ( int a , int b , int c , int d )  def pythagorean_quadruple ( a , b , c , d ) :		    def pythagorean_quadruple ( a , b , c , d ) :		  success : None
  int sum = a * a + b * b + c * c ;			      	  sum = a * a + b * b + c * c				    	sum = a * a + b * b + c * c				  
  if ( d * d == sum ) return true ;			      	  if ( d * d == sum ) :					    	if d * d == sum :					  
  else return false ;					      	      return True					    	    return True						  
}							      	  else :						    	else :							  
							      	      return False					    	    return False					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
int mod ( string num , int a ) {			      def mod ( num , a ) :					    def mod ( num , a ) :					  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , len ( num ) ) :			    	for c in num :						  
  i < num . length ( ) ;				      	      res = ( res * 10 + int ( num [ i ] ) ) % a	    	    res = ( res * 10 + ord ( c ) - ord ( '0' ) ) % a	  
  i ++ ) res = ( res * 10 + ( int ) num [ i ] - '0' ) % a ;   	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
int numberOfWays ( int x ) {				      def numberOfWays ( x ) :					    def number_of_ways ( x ) :					  script_not_found : None
  if ( x == 0 || x == 1 ) return 1 ;			      	  if x == 0 or x == 1 :					    	if x == 0 or x == 1 :					  
  else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWa 	      return 1						    	    return 1						  
}							      	  else :						    	else :							  
							      	      return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	    return number_of_ways ( x - 1 ) + ( x - 1 ) * number_ 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
public : int getSum ( int n ) {				      def getSum ( n ) :					    def getSum ( n ) :						  error :   File "dump/transcoder/eval/cpp_python/mo
  int sum ;						      	  sum = 0						    	sum = 0							  del_2/transcoder_eval/20643759/eval_scripts/cpp_sa
  for ( sum = 0 ;					      	  while ( n > 0 ) :					    	for n in range ( 0 , n ) :				  -python_sa.valid/HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GI
  n > 0 ;						      	      sum += int ( n % 10 )				    	    sum += n % 10 , n /= 10				  VEN_NUMBER_IN_SINGLE_STATEMENT_1.py", line 28
  sum += n % 10 , n /= 10 ) ;				      	      n = int ( n / 10 )				    	return sum						  sum += n % 10 , n /= 10			 ^ S
  return sum ;						      	  return sum						    								  yntaxError: invalid syntax
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_SECTOR					      AREA_OF_A_SECTOR						    AREA_OF_A_SECTOR						  AREA_OF_A_SECTOR
--							      --							    --								  --
void SectorArea ( double radius , double angle ) {	      def SectorArea ( radius , angle ) :			    def SectorArea ( radius , angle ) :				  script_not_found : None
  if ( angle >= 360 ) cout << "Angle not possible" ;	      	  pi = 22 / 7						    	if angle >= 360 :					  
  else {						      	  if angle >= 360 :					    	    print ( "Angle not possible" )			  
    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angl 	      print ( "Angle not possible" )			    	else :							  
    cout << sector ;					      	      return						    	    sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 
  }							      	  else :						    	    print ( sector )					  
}							      	      sector = ( pi * radius ** 2 ) * ( angle / 360 )	    								  
							      	      print ( sector )					    								  
							      	      return						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
bool isReversible ( string str ) {			      def isReversible ( str ) :				    def isReversible ( str ) :					  success : None
  int i = 0 , j = str . length ( ) - 1 ;		      	  i = 0 j = len ( str ) - 1				    	i , j = 0 , len ( str ) - 1				  
  while ( i < j ) {					      	  while ( i < j ) :					    	while i < j :						  
    if ( str [ i ] != str [ j ] ) return false ;	      	      if ( str [ i ] != str [ j ] ) :			    	    if str [ i ] != str [ j ] :				  
    i ++ ;						      		  return False					    		return False					  
    j -- ;						      	      i += 1						    	    i += 1						  
  }							      	      j -= 1						    	    j -= 1						  
  return true ;						      	  return True						    	return True						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
unsigned int countSetBitsRec ( unsigned int num ) {	      def countSetBitsRec ( num ) :				    def countSetBitsRec ( num ) :				  script_not_found : None
  int nibble = 0 ;					      	  nibble = 0						    	nibble = 0						  
  if ( 0 == num ) return num_to_bits [ 0 ] ;		      	  if ( 0 == num ) :					    	if 0 == num :						  
  nibble = num & 0xf ;					      	      return num_to_bits [ 0 ]				    	    return num_to_bits [ 0 ]				  
  return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4  	  nibble = num & 0xf					    	nibble = num & 0xf					  
}							      	  return num_to_bits [ nibble ] + countSetBitsRec ( num >>  	return num_to_bits [ nibble ] + countSetBitsRec ( num >>  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE
--							      --							    --								  --
int printCountRec ( int dist ) {			      def printCountRec ( dist ) :				    def printCountRec ( dist ) :				  script_not_found : None
  if ( dist < 0 ) return 0 ;				      	  if dist < 0 :						    	if dist < 0 :						  
  if ( dist == 0 ) return 1 ;				      	      return 0						    	    return 0						  
  return printCountRec ( dist - 1 ) + printCountRec ( dist -  	  if dist == 0 :					    	if dist == 0 :						  
}							      	      return 1						    	    return 1						  
							      	  return ( printCountRec ( dist - 1 ) + printCountRec ( dis 	return printCountRec ( dist - 1 ) + printCountRec ( dist  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		      PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		    PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER			  PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER
--							      --							    --								  --
void print ( int n , int k ) {				      def Print ( n , k ) :					    def print ( n , k ) :					  script_not_found : None
  int rem = 1 ;						      	  rem = 1						    	rem = 1							  
  for ( int i = 0 ;					      	  for i in range ( 0 , k ) :				    	for i in range ( k ) :					  
  i < k ;						      	      print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = " 	    print ( ( 10 * rem ) / n )				  
  i ++ ) {						      	      rem = ( 10 * rem ) % n				    	    rem = ( 10 * rem ) % n				  
    cout << ( 10 * rem ) / n ;				      								    								  
    rem = ( 10 * rem ) % n ;				      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
void printSeries ( int n ) {				      def printSeries ( n ) :					    def printSeries ( n ) :					  script_not_found : None
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      num = i * ( i + 1 ) * ( i + 2 ) // 6		    	    num = i * ( i + 1 ) * ( i + 2 ) / 6			  
  i ++ ) {						      	      print ( num , end = ' ' )				    	    print ( num , end = ' ' )				  
    int num = i * ( i + 1 ) * ( i + 2 ) / 6 ;		      								    								  
    cout << num << " " ;				      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
int zigzag ( int n , int k ) {				      def zigzag ( n , k ) :					    def zigzag ( n , k ) :					  script_not_found : None
  if ( n == 0 && k == 0 ) return 1 ;			      	  if ( n == 0 and k == 0 ) :				    	if n == 0 and k == 0 :					  
  if ( k == 0 ) return 0 ;				      	      return 1						    	    return 1						  
  return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;    	  if ( k == 0 ) :					    	if k == 0 :						  
}							      	      return 0						    	    return 0						  
							      	  return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k )    	return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k )	  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
int numOfways ( int n , int k ) {			      def numOfways ( n , k ) :					    def numOfways ( n , k ) :					  success : None
  int p = 1 ;						      	  p = 1							    	p = 1							  
  if ( k % 2 ) p = - 1 ;				      	  if ( k % 2 ) :					    	if k % 2 :						  
  return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ;	      	      p = - 1						    	    p = - 1						  
}							      	  return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	    	return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n	  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1
--							      --							    --								  --
void transpose ( int A [ ] [ N ] , int B [ ] [ M ] ) {	      def transpose ( A , B ) :					    def transpose ( A , N , M ) :				  script_not_found : None
  int i , j ;						      	  for i in range ( N ) :				    	i , j = 0 , N						  
  for ( i = 0 ;						      	      for j in range ( M ) :				    	for i in range ( N ) :					  
  i < N ;						      		  B [ i ] [ j ] = A [ j ] [ i ]			    	    for j in range ( M ) :				  
  i ++ ) for ( j = 0 ;					      								    		B [ i ] [ j ] = A [ j ] [ i ]			  
  j < M ;						      								    								  
  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;		      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		      PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		    PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		  PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX
--							      --							    --								  --
void scalarProductMat ( int mat [ ] [ N ] , int k ) {	      def scalarProductMat ( mat , k ) :			    def scalar_product_mat ( mat , k ) :			  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
  i < N ;						      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
  i ++ ) for ( int j = 0 ;				      		  mat [ i ] [ j ] = mat [ i ] [ j ] * k		    		mat [ i ] [ j ] = mat [ i ] [ j ] * k		  
  j < N ;						      								    								  
  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;	      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH      COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	    COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	  COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH
--							      --							    --								  --
int compute ( vector < int > graph [ ] , int N ) {	      def compute ( graph , N ) :				    def compute ( graph , N ) :					  script_not_found : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 1 ;					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  
  i <= N ;						      	      if ( len ( graph [ i ] ) == 0 ) :			    	    if len ( graph [ i ] ) == 0 :			  
  i ++ ) if ( graph [ i ] . size ( ) == 0 ) count ++ ;	      		  count += 1					    		count += 1					  
  return count ;					      	  return count						    	return count						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
int findRoot ( pair < int , int > arr [ ] , int n ) {	      def findRoot ( arr , n ) :				    def findRoot ( arr , n ) :					  script_not_found : None
  int root = 0 ;					      	  root = 0						    	root = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	    	    root += ( arr [ i ] [ 0 ] - arr [ i ] [ 1 ] )	  
  i ++ ) root += ( arr [ i ] . first - arr [ i ] . second ) ; 	  return root						    	return root						  
  return root ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
int seiresSum ( int n , int a [ ] ) {			      def seiresSum ( n , a ) :					    def seiresSum ( n , a ) :					  script_not_found : None
  return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 *  	  return ( n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [  	return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			      NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			    NUMBER_DAYS_TANK_WILL_BECOME_EMPTY				  NUMBER_DAYS_TANK_WILL_BECOME_EMPTY
--							      --							    --								  --
int minDaysToEmpty ( int C , int l ) {			      def minDaysToEmpty ( C , l ) :				    def minDaysToEmpty ( C , l ) :				  success : None
  if ( l >= C ) return C ;				      	  if ( l >= C ) : return C				    	if l >= C :						  
  double eq_root = ( std :: sqrt ( 1 + 8 * ( C - l ) ) - 1 )  	  eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2	    	    return C						  
  return std :: ceil ( eq_root ) + l ;			      	  return math.ceil ( eq_root ) + l			    	eq_root = ( np.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2	  
}							      								    	return np.ceil ( eq_root ) + l				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SUM_FACTORS_NUMBER				      FIND_MINIMUM_SUM_FACTORS_NUMBER				    FIND_MINIMUM_SUM_FACTORS_NUMBER				  FIND_MINIMUM_SUM_FACTORS_NUMBER
--							      --							    --								  --
int findMinSum ( int num ) {				      def findMinSum ( num ) :					    def findMinSum ( num ) :					  error : Traceback (most recent call last):   File
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  "dump/transcoder/eval/cpp_python/model_2/transcode
  for ( int i = 2 ;					      	  i = 2							    	for i in range ( 2 , num * i <= num ) :			  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  i * i <= num ;					      	  while ( i * i <= num ) :				    	    while num % i == 0 :				  d/FIND_MINIMUM_SUM_FACTORS_NUMBER.py", line 54, in
  i ++ ) {						      	      while ( num % i == 0 ) :				    		sum += i					   <module>	if f_filled(*parameters_set) == f_go
    while ( num % i == 0 ) {				      		  sum += i					    		num /= i					  ld(*parameters_set):	 File "dump/transcoder/eval/
      sum += i ;					      		  num /= i					    	sum += num						  cpp_python/model_2/transcoder_eval/20643759/eval_s
      num /= i ;					      	      i += 1						    	return sum						  cripts/cpp_sa-python_sa.valid/FIND_MINIMUM_SUM_FAC
    }							      	  sum += num						    								  TORS_NUMBER.py", line 31, in f_filled	    for i in
  }							      	  return sum						    								   range ( 2 , num * i <= num ) : UnboundLocalError:
  sum += num ;						      								    								   local variable 'i' referenced before assignment
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_2				      FIND_REPETITIVE_ELEMENT_1_N_1_2				    FIND_REPETITIVE_ELEMENT_1_N_1_2				  FIND_REPETITIVE_ELEMENT_1_N_1_2
--							      --							    --								  --
int findRepeating ( int arr [ ] , int n ) {		      def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  success : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      res = res ^ ( i + 1 ) ^ arr [ i ]			    	    res = res ^ ( i + 1 ) ^ arr [ i ]			  
  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;		      	  res = res ^ arr [ n - 1 ]				    	res = res ^ arr [ n - 1 ]				  
  res = res ^ arr [ n - 1 ] ;				      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE		  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
--							      --							    --								  --
int arraySortedOrNot ( int arr [ ] , int n ) {		      def arraySortedOrNot ( arr ) :				    def arraySortedOrNot ( arr , n ) :				  script_not_found : None
  if ( n == 1 || n == 0 ) return 1 ;			      	  n = len ( arr )					    	if n == 1 or n == 0 :					  
  if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ;	      	  if n == 1 or n == 0 :					    	    return 1						  
  return arraySortedOrNot ( arr , n - 1 ) ;		      	      return True					    	if arr [ n - 1 ] < arr [ n - 2 ] :			  
}							      	  return arr [ 0 ] <= arr [ 1 ] and arraySortedOrNot ( arr  	    return 0						  
							      								    	return arraySortedOrNot ( arr , n - 1 )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  success : None
  unsigned count = 0 ;					      	  count = 0						    	count = 0						  
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and not ( n & ( n - 1 ) ) :			  
  while ( n != 0 ) {					      	      return n						    	    return n						  
    n >>= 1 ;						      	  while ( n != 0 ) :					    	while n != 0 :						  
    count += 1 ;					      	      n >>= 1						    	    n >>= 1						  
  }							      	      count += 1					    	    count += 1						  
  return 1 << count ;					      	  return 1 << count					    	return 1 << count					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
bool isProduct ( int arr [ ] , int n , int x ) {	      def isProduct ( arr , n , x ) :				    def isProduct ( arr , n , x ) :				  success : None
  for ( int i = 0 ;					      	  for i in arr :					    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      for j in arr :					    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  if i * j == x :				    		if arr [ i ] * arr [ j ] == x :			  
  i < n ;						      		      return True				    		    return True					  
  i ++ ) if ( arr [ i ] * arr [ j ] == x ) return true ;      	  return False						    	return False						  
  return false ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES				      NUMBER_TRIANGLES_N_MOVES					    NUMBER_TRIANGLES_N_MOVES					  NUMBER_TRIANGLES_N_MOVES
--							      --							    --								  --
int numberOfTriangles ( int n ) {			      def numberOfTriangles ( n ) :				    def number_of_triangles ( n ) :				  failure : #Results: 0, 10
  int answer [ n + 1 ] = {				      	  answer = [ None ] * ( n + 1 )				    	answer = [ 0 ] * ( n + 1 )				  
    0 }							      	  answer [ 0 ] = 1					    	answer [ 0 ] = 1					  
    ;							      	  i = 1							    	for i in range ( 1 , n + 1 ) :				  
    answer [ 0 ] = 1 ;					      	  while i <= n :					    	    answer [ i ] = answer [ i - 1 ] * 3 + 2		  
    for ( int i = 1 ;					      	      answer [ i ] = answer [ i - 1 ] * 3 + 2		    	return answer						  
    i <= n ;						      	      i = i + 1						    								  
    i ++ ) answer [ i ] = answer [ i - 1 ] * 3 + 2 ;	      	  return answer [ n ]					    								  
    return answer [ n ] ;				      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
void swap ( int * xp , int * yp ) {			      def swap ( xp , yp ) :					    def swap ( xp , yp ) :					  script_not_found : None
  if ( xp == yp ) return ;				      	  if ( xp [ 0 ] == yp [ 0 ] ) :				    	if xp == yp :						  
  * xp = * xp + * yp ;					      	      return						    	    return						  
  * yp = * xp - * yp ;					      	  xp [ 0 ] = xp [ 0 ] + yp [ 0 ]			    	xp = xp + yp						  
  * xp = * xp - * yp ;					      	  yp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    	yp = xp - yp						  
}							      	  xp [ 0 ] = xp [ 0 ] - yp [ 0 ]			    	xp = xp - yp						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_
--							      --							    --								  --
bool isPossibleToMakeDivisible ( int arr [ ] , int n ) {      def isPossibleToMakeDivisible ( arr , n ) :		    def isPossibleToMakeDivisible ( arr , n ) :			  success : None
  int remainder = 0 ;					      	  remainder = 0						    	remainder = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      remainder = ( remainder + arr [ i ] ) % 3		    	    remainder = ( remainder + arr [ i ] ) % 3		  
  i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ;	      	  return ( remainder == 0 )				    	return ( remainder == 0 )				  
  return ( remainder == 0 ) ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION			      PROGRAM_BINARY_DECIMAL_CONVERSION				    PROGRAM_BINARY_DECIMAL_CONVERSION				  PROGRAM_BINARY_DECIMAL_CONVERSION
--							      --							    --								  --
int binaryToDecimal ( int n ) {				      def binaryToDecimal ( n ) :				    def binaryToDecimal ( n ) :					  failure : #Results: 0, 10
  int num = n ;						      	  num = n						    	num = n							  
  int dec_value = 0 ;					      	  dec_value = 0						    	dec_value = 0						  
  int base = 1 ;					      	  base = 1						    	base = 1						  
  int temp = num ;					      	  temp = num						    	temp = num						  
  while ( temp ) {					      	  while ( temp ) :					    	while temp :						  
    int last_digit = temp % 10 ;			      	      last_digit = temp % 10				    	    last_digit = temp % 10				  
    temp = temp / 10 ;					      	      temp = int ( temp / 10 )				    	    temp = temp / 10					  
    dec_value += last_digit * base ;			      	      dec_value += last_digit * base			    	    dec_value += last_digit * base			  
    base = base * 2 ;					      	      base = base * 2					    	    base = base * 2					  
  }							      	  return dec_value					    	return dec_value					  
  return dec_value ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT
--							      --							    --								  --
void countToMake0lternate ( const string & s ) {	      def countToMake0lternate ( s ) :				    def countToMake0lternate ( s ) :				  script_not_found : None
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( len ( s ) - 1 ) :			    	for i in range ( len ( s ) - 1 ) :			  
  i < ( s . length ( ) - 1 ) ;				      	      if ( s [ i ] == s [ i + 1 ] ) :			    	    if s [ i ] == s [ i + 1 ] :				  
  i ++ ) if ( s [ i ] == s [ i + 1 ] ) result ++ ;	      		  result += 1					    		result += 1					  
  return result ;					      	  return result						    	return result						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY
--							      --							    --								  --
int countRotations ( int arr [ ] , int n ) {		      def countRotations ( arr , n ) :				    def countRotations ( arr , n ) :				  script_not_found : None
  int min = arr [ 0 ] , min_index ;			      	  min = arr [ 0 ]					    	min , min_index = arr [ 0 ] , 0				  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( min > arr [ i ] ) :				    	    if min > arr [ i ] :				  
  i ++ ) {						      		  min = arr [ i ]				    		min , min_index = arr [ i ] , i			  
    if ( min > arr [ i ] ) {				      		  min_index = i					    	return min_index					  
      min = arr [ i ] ;					      	  return min_index					    								  
      min_index = i ;					      								    								  
    }							      								    								  
  }							      								    								  
  return min_index ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	      FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	    FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	  FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY
--							      --							    --								  --
int findSmallest ( int arr [ ] , int n ) {		      def findSmallest ( arr , n ) :				    def findSmallest ( arr , n ) :				  failure : #Results: 4, 10
  int res = 1 ;						      	  res = 1						    	res = 1							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n && arr [ i ] <= res ;				      	      if arr [ i ] <= res :				    	    res = res + arr [ i ]				  
  i ++ ) res = res + arr [ i ] ;			      		  res = res + arr [ i ]				    	return res						  
  return res ;						      	      else :						    								  
}							      		  break						    								  
							      	  return res						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT				      CHECK_TWO_GIVEN_SETS_DISJOINT				    CHECK_TWO_GIVEN_SETS_DISJOINT				  CHECK_TWO_GIVEN_SETS_DISJOINT
--							      --							    --								  --
bool areDisjoint ( int set1 [ ] , int set2 [ ] , int m , int  def areDisjoint ( set1 , set2 , m , n ) :			    def areDisjoint ( set1 , set2 , m , n ) :			  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( 0 , m ) :				    	for i in range ( m ) :					  
  i < m ;						      	      for j in range ( 0 , n ) :			    	    for j in range ( n ) :				  
  i ++ ) for ( int j = 0 ;				      		  if ( set1 [ i ] == set2 [ j ] ) :		    		if set1 [ i ] == set2 [ j ] :			  
  j < n ;						      		      return False				    		    return False				  
  j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false ;	      	  return True						    	return True						  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			      CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			    CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			  CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT
--							      --							    --								  --
int check_duck ( char * num ) {				      def check_duck ( num ) :					    def check_duck ( num ) :					  success : None
  int len = strlen ( num ) ;				      	  l = len ( num )					    	num = num.strip ( )					  
  int count_zero = 0 ;					      	  count_zero = 0					    	count_zero = 0						  
  char ch ;						      	  i = 1							    	ch = None						  
  for ( int i = 1 ;					      	  while i < l :						    	for i in range ( 1 , len ( num ) ) :			  
  i < len ;						      	      ch = num [ i ]					    	    ch = num [ i ]					  
  i ++ ) {						      	      if ( ch == "0" ) :				    	    if ch == '0' :					  
    ch = num [ i ] ;					      		  count_zero = count_zero + 1			    		count_zero += 1					  
    if ( ch == '0' ) count_zero ++ ;			      	      i = i + 1						    	return count_zero					  
  }							      	  return count_zero					    								  
  return count_zero ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1
--							      --							    --								  --
int findSum ( int N , int K ) {				      def findSum ( N , K ) :					    def findSum ( N , K ) :					  failure : #Results: 7, 10
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  int y = N / K ;					      	  y = N / K						    	y = N / K						  
  int x = N % K ;					      	  x = N % K						    	x = N % K						  
  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;   	  ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 	ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2	  
  return ans ;						      	  return int ( ans )					    	return ans						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS     SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	    SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS
--							      --							    --								  --
int getTotalNumberOfSequences ( int m , int n ) {	      def getTotalNumberOfSequences ( m , n ) :			    def getTotalNumberOfSequences ( m , n ) :			  success : None
  if ( m < n ) return 0 ;				      	  if m < n :						    	if m < n :						  
  if ( n == 0 ) return 1 ;				      	      return 0						    	    return 0						  
  return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNu 	  if n == 0 :						    	if n == 0 :						  
}							      	      return 1						    	    return 1						  
							      	  res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTota 	return getTotalNumberOfSequences ( m - 1 , n ) + getTotal 
							      	  return res						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER						      DELANNOY_NUMBER						    DELANNOY_NUMBER						  DELANNOY_NUMBER
--							      --							    --								  --
int dealnnoy ( int n , int m ) {			      def dealnnoy ( n , m ) :					    def dealnnoy ( n , m ) :					  script_not_found : None
  if ( m == 0 || n == 0 ) return 1 ;			      	  if ( m == 0 or n == 0 ) :				    	if m == 0 or n == 0 :					  
  return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1 )  	      return 1						    	    return 1						  
}							      	  return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  	return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN	      SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		    SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN		  SCHEDULE_ELEVATOR_TO_REDUCE_THE_TOTAL_TIME_TAKEN
--							      --							    --								  --
int minTime ( int n , int k , int a [ ] ) {		      def minTime ( n , k , a ) :				    def minTime ( n , k , a ) :					  script_not_found : None
  sort ( a , a + n , greater < int > ( ) ) ;		      	  a.sort ( reverse = True )				    	a = sorted ( a , key = lambda x : x [ 1 ] )		  
  int minTime = 0 ;					      	  minTime = 0						    	minTime = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n , k ) :			    	for i in range ( 0 , n , k ) :				  
  i < n ;						      	      minTime += ( 2 * a [ i ] )			    	    minTime += ( 2 * a [ i ] )				  
  i += k ) minTime += ( 2 * a [ i ] ) ;			      	  return minTime					    	return minTime						  
  return minTime ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_ZEROES_END_ARRAY					      MOVE_ZEROES_END_ARRAY					    MOVE_ZEROES_END_ARRAY					  MOVE_ZEROES_END_ARRAY
--							      --							    --								  --
void pushZerosToEnd ( int arr [ ] , int n ) {		      def pushZerosToEnd ( arr , n ) :				    def pushZerosToEnd ( arr , n ) :				  timeout : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if arr [ i ] != 0 :				    	    if arr [ i ] != 0 :					  
  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; 		  arr [ count ] = arr [ i ]			    		arr [ count ] = arr [ i ]			  
  while ( count < n ) arr [ count ++ ] = 0 ;		      		  count += 1					    	while count < n :					  
}							      	  while count < n :					    	    arr [ count ] = 0					  
							      	      arr [ count ] = 0					    								  
							      	      count += 1					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
int MaximumHeight ( int a [ ] , int n ) {		      def MaximumHeight ( a , n ) :				    def MaximumHeight ( a , n ) :				  success : None
  int result = 1 ;					      	  result = 1						    	result = 1						  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      y = ( i * ( i + 1 ) ) / 2				    	    y = ( i * ( i + 1 ) ) / 2				  
  ++ i ) {						      	      if ( y < n ) :					    	    if y < n :						  
    long long y = ( i * ( i + 1 ) ) / 2 ;		      		  result = i					    		result = i					  
    if ( y < n ) result = i ;				      	      else :						    	    else :						  
    else break ;					      		  break						    		break						  
  }							      	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	      CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	    CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION		  CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION
--							      --							    --								  --
long int stirlingFactorial ( int n ) {			      def stirlingFactorial ( n ) :				    def stirlingFactorial ( n ) :				  script_not_found : None
  if ( n == 1 ) return 1 ;				      	  if ( n == 1 ) :					    	if n == 1 :						  
  long int z ;						      	      return 1						    	    return 1						  
  float e = 2.71 ;					      	  e = 2.71						    	z = 0							  
  z = sqrt ( 2 * 3.14 * n ) * pow ( ( n / e ) , n ) ;	      	  z = ( math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , 	e = 2.71						  
  return z ;						      	  return math.floor ( z )				    	z = math.sqrt ( 2 * 3.14 * n ) * math.pow ( ( n / e ) , n 
}							      								    	return z						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
void printPascal ( int n ) {				      def printPascal ( n ) :					    def printPascal ( n ) :					  script_not_found : None
  for ( int line = 1 ;					      	  for line in range ( 1 , n + 1 ) :			    	for line in range ( 1 , n + 1 ) :			  
  line <= n ;						      	      C = 1						    	    C = 1						  
  line ++ ) {						      	      for i in range ( 1 , line + 1 ) :			    	    for i in range ( 1 , line + 1 ) :			  
    int C = 1 ;						      		  print ( C , end = "" )			    		print ( C , end = '' )				  
    for ( int i = 1 ;					      		  C = int ( C * ( line - i ) / i )		    		C = C * ( line - i ) / i			  
    i <= line ;						      	      print ( "" )					    	    print ( '' )					  
    i ++ ) {						      								    								  
      cout << C << " " ;				      								    								  
      C = C * ( line - i ) / i ;			      								    								  
    }							      								    								  
    cout << "\n" ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PADOVAN_SEQUENCE					      PADOVAN_SEQUENCE						    PADOVAN_SEQUENCE						  PADOVAN_SEQUENCE
--							      --							    --								  --
int pad ( int n ) {					      def pad ( n ) :						    def pad ( n ) :						  failure : #Results: 1, 10
  int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;     	  pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	    	pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1	  
  for ( int i = 3 ;					      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 , n ) :				  
  i <= n ;						      	      pNext = pPrevPrev + pPrev				    	    pNext = pPrevPrev + pPrev				  
  i ++ ) {						      	      pPrevPrev = pPrev					    	    pPrevPrev = pPrev					  
    pNext = pPrevPrev + pPrev ;				      	      pPrev = pCurr					    	    pPrev = pCurr					  
    pPrevPrev = pPrev ;					      	      pCurr = pNext					    	    pCurr = pNext					  
    pPrev = pCurr ;					      	  return pNext ;					    	return pNext						  
    pCurr = pNext ;					      								    								  
  }							      								    								  
  return pNext ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
bool ispalindrome ( string s ) {			      def ispalindrome ( s ) :					    def ispalindrome ( s ) :					  error : Traceback (most recent call last):   File
  int l = s . length ( ) ;				      	  l = len ( s )						    	l = len ( s )						  "dump/transcoder/eval/cpp_python/model_2/transcode
  int j ;						      	  i = 0							    	j = 0							  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  for ( int i = 0 , j = l - 1 ;				      	  j = l - 1						    	for i , j in enumerate ( l - 1 ) :			  d/MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALIN
  i <= j ;						      	  while i <= j :					    	    if s [ i ] != s [ j ] :				  DROME.py", line 53, in <module>     if f_filled(*p
  i ++ , j -- ) {					      	      if ( s [ i ] != s [ j ] ) :			    		return False					  arameters_set) == f_gold(*parameters_set):   File
    if ( s [ i ] != s [ j ] ) return false ;		      		  return False					    	return True						  "dump/transcoder/eval/cpp_python/model_2/transcode
  }							      	      i += 1						    								  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  return true ;						      	      j -= 1						    								  d/MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALIN
}							      	  return True						    								  DROME.py", line 32, in f_filled     for i , j in e
							      								    								  numerate ( l - 1 ) : TypeError: 'int' object is no
							      								    								  t iterable
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
int countPairs ( int a [ ] , int n ) {			      def countPairs ( a , n ) :				    def countPairs ( a , n ) :					  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) {						      		  if ( a [ i ] & a [ j ] ) == 0 :		    		if ( a [ i ] & a [ j ] ) == 0 :			  
    for ( int j = i + 1 ;				      		      count += 2				    		    count += 2					  
    j < n ;						      	  return count						    	return count						  
    j ++ ) if ( ( a [ i ] & a [ j ] ) == 0 ) count += 2 ;     								    								  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		      COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		    COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		  COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME
--							      --							    --								  --
int countFibs ( int low , int high ) {			      def countFibs ( low , high ) :				    def countFibs ( low , high ) :				  failure : #Results: 7, 10
  int f1 = 0 , f2 = 1 , f3 = 1 ;			      	  f1 , f2 , f3 = 0 , 1 , 1				    	f1 , f2 , f3 = 0 , 1 , 1				  
  int result = 0 ;					      	  result = 0						    	result = 0						  
  while ( f1 <= high ) {				      	  while ( f1 <= high ) :				    	while f1 <= high :					  
    if ( f1 >= low ) result ++ ;			      	      if ( f1 >= low ) :				    	    if f1 >= low :					  
    f1 = f2 ;						      		  result += 1					    		result += 1					  
    f2 = f3 ;						      	      f1 = f2						    	    f1 , f2 , f3 = f2 , f3 , f1 + f2			  
    f3 = f1 + f2 ;					      	      f2 = f3						    	return result						  
  }							      	      f3 = f1 + f2					    								  
  return result ;					      	  return result						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM				      COUNT_PAIRS_WITH_GIVEN_SUM				    COUNT_PAIRS_WITH_GIVEN_SUM					  COUNT_PAIRS_WITH_GIVEN_SUM
--							      --							    --								  --
int getPairsCount ( int arr [ ] , int n , int sum ) {	      def getPairsCount ( arr , n , sum ) :			    def getPairsCount ( arr , n , sum ) :			  script_not_found : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  if arr [ i ] + arr [ j ] == sum :		    		if arr [ i ] + arr [ j ] == sum :		  
  j < n ;						      		      count += 1				    		    count += 1					  
  j ++ ) if ( arr [ i ] + arr [ j ] == sum ) count ++ ;	      	  return count						    	return count						  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
int getMissingNo ( int a [ ] , int n ) {		      def getMissingNo ( a , n ) :				    def getMissingNo ( a , n ) :				  failure : #Results: 0, 10
  int x1 = a [ 0 ] ;					      	  x1 = a [ 0 ]						    	x1 = a [ 0 ]						  
  int x2 = 1 ;						      	  x2 = 1						    	x2 = 1							  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  i < n ;						      	      x1 = x1 ^ a [ i ]					    	    x1 = x1 ^ a [ i ]					  
  i ++ ) x1 = x1 ^ a [ i ] ;				      	  for i in range ( 2 , n + 2 ) :			    	for i in range ( 2 , n + 1 ) :				  
  for ( int i = 2 ;					      	      x2 = x2 ^ i					    	    x2 = x2 ^ i						  
  i <= n + 1 ;						      	  return x1 ^ x2					    	return ( x1 ^ x2 )					  
  i ++ ) x2 = x2 ^ i ;					      								    								  
  return ( x1 ^ x2 ) ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	      SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	    SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	  SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST
--							      --							    --								  --
void printSorted ( int arr [ ] , int start , int end ) {      def printSorted ( arr , start , end ) :			    def printSorted ( arr , start , end ) :			  script_not_found : None
  if ( start > end ) return ;				      	  if start > end :					    	if start > end :					  
  printSorted ( arr , start * 2 + 1 , end ) ;		      	      return						    	    return						  
  cout << arr [ start ] << " " ;			      	  printSorted ( arr , start * 2 + 1 , end )		    	printSorted ( arr , start * 2 + 1 , end )		  
  printSorted ( arr , start * 2 + 2 , end ) ;		      	  print ( arr [ start ] , end = " " )			    	print ( arr [ start ] , end )				  
}							      	  printSorted ( arr , start * 2 + 2 , end )		    	printSorted ( arr , start * 2 + 2 , end )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			      PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			    PROGRAM_FIND_AREA_CIRCULAR_SEGMENT				  PROGRAM_FIND_AREA_CIRCULAR_SEGMENT
--							      --							    --								  --
float area_of_segment ( float radius , float angle ) {	      def area_of_segment ( radius , angle ) :			    def area_of_segment ( radius , angle ) :			  script_not_found : None
  float area_of_sector = pi * ( radius * radius ) * ( angle / 	  area_of_sector = pi *					    	area_of_sector = pi * ( radius * radius ) * ( angle / 360 
  float area_of_triangle = ( float ) 1 / 2 * ( radius * radiu 	      ( radius * radius )				    	area_of_triangle = float ( 1 ) / 2 * ( radius * radius )  
  return area_of_sector - area_of_triangle ;		      	      * ( angle / 360 )					    	return area_of_sector - area_of_triangle		  
}							      	  area_of_triangle = 1 / 2 *				    								  
							      	      ( radius * radius ) *				    								  
							      	      math.sin ( ( angle * pi ) / 180 )			    								  
							      	  return area_of_sector - area_of_triangle ;		    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
int countFact ( int low , int high ) {			      def countFact ( low , high ) :				    def countFact ( low , high ) :				  success : None
  int fact = 1 , x = 1 ;				      	  fact = 1						    	fact , x = 1 , 1					  
  while ( fact < low ) {				      	  x = 1							    	while fact < low :					  
    fact = fact * x ;					      	  while ( fact < low ) :				    	    fact , x = fact * x , x + 1				  
    x ++ ;						      	      fact = fact * x					    	res = 0							  
  }							      	      x += 1						    	while fact <= high :					  
  int res = 0 ;						      	  res = 0						    	    res += 1						  
  while ( fact <= high ) {				      	  while ( fact <= high ) :				    	    fact , x = fact * x , x + 1				  
    res ++ ;						      	      res += 1						    	return res						  
    fact = fact * x ;					      	      fact = fact * x					    								  
    x ++ ;						      	      x += 1						    								  
  }							      	  return res						    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	      K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	    K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	  K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED
--							      --							    --								  --
int minDiff ( int arr [ ] , int n , int k ) {		      def minDiff ( arr , n , k ) :				    def minDiff ( arr , n , k ) :				  error : Traceback (most recent call last):   File
  int result = INT_MAX ;				      	  result = + 2147483647					    	result = sys.maxint					  "dump/transcoder/eval/cpp_python/model_2/transcode
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr.sort ( )						  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  for ( int i = 0 ;					      	  for i in range ( n - k + 1 ) :			    	for i in range ( 0 , n - k ) :				  d/K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MI
  i <= n - k ;						      	      result = int ( min ( result , arr [ i + k - 1 ] - arr 	    result = min ( result , arr [ i + k - 1 ] - arr [ i ] NIMIZED.py", line 48, in <module>	if f_filled(
  i ++ ) result = min ( result , arr [ i + k - 1 ] - arr [ i  	  return result						    	return result						  *parameters_set) == f_gold(*parameters_set):	 Fil
  return result ;					      								    								  e "dump/transcoder/eval/cpp_python/model_2/transco
}							      								    								  der_eval/20643759/eval_scripts/cpp_sa-python_sa.va
							      								    								  lid/K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_
							      								    								  MINIMIZED.py", line 26, in f_filled	  result = s
							      								    								  ys.maxint AttributeError: module 'sys' has no attr
							      								    								  ibute 'maxint'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
long long findDigits ( int n ) {			      def findDigits ( n ) :					    def findDigits ( n ) :					  error : Traceback (most recent call last):   File
  if ( n < 0 ) return 0 ;				      	  if ( n < 0 ) :					    	if n < 0 :						  "dump/transcoder/eval/cpp_python/model_2/transcode
  if ( n <= 1 ) return 1 ;				      	      return 0						    	    return 0						  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  double x = ( ( n * log10 ( n / M_E ) + log10 ( 2 * M_PI * n 	  if ( n <= 1 ) :					    	if n <= 1 :						  d/COUNT_DIGITS_FACTORIAL_SET_2.py", line 52, in <m
  return floor ( x ) + 1 ;				      	      return 1						    	    return 1						  odule>     if f_filled(*parameters_set) == f_gold(
}							      	  x = ( ( n * math.log10 ( n / math.e ) + math.log10 ( 2 *  	x = ( ( n * math.log10 ( n / M_E ) + math.log10 ( 2 * mat *parameters_set):   File "dump/transcoder/eval/cpp
							      	  return math.floor ( x ) + 1				    	return math.floor ( x ) + 1				  _python/model_2/transcoder_eval/20643759/eval_scri
							      								    								  pts/cpp_sa-python_sa.valid/COUNT_DIGITS_FACTORIAL_
							      								    								  SET_2.py", line 33, in f_filled     x = ( ( n * ma
							      								    								  th.log10 ( n / M_E ) + math.log10 ( 2 * math.pi *
							      								    								  n ) / 2.0 ) ) NameError: name 'M_E' is not defined
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1
--							      --							    --								  --
bool isSubSequence ( char str1 [ ] , char str2 [ ] , int m ,  def isSubSequence ( str1 , str2 , m , n ) :		    def isSubSequence ( str1 , str2 , m , n ) :			  script_not_found : None
  int j = 0 ;						      	  j = 0							    	j = 0							  
  for ( int i = 0 ;					      	  i = 0							    	for i in range ( n and j < m ) :			  
  i < n && j < m ;					      	  while j < m and i < n :				    	    if str1 [ j ] == str2 [ i ] :			  
  i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++ ;		      	      if str1 [ j ] == str2 [ i ] :			    		j += 1						  
  return ( j == m ) ;					      		  j = j + 1					    	return ( j == m )					  
}							      	      i = i + 1						    								  
							      	  return j == m						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX				      PROGRAM_PRINT_IDENTITY_MATRIX				    PROGRAM_PRINT_IDENTITY_MATRIX				  PROGRAM_PRINT_IDENTITY_MATRIX
--							      --							    --								  --
int Identity ( int num ) {				      def Identity ( size ) :					    def Identity ( num ) :					  script_not_found : None
  int row , col ;					      	  for row in range ( 0 , size ) :			    	row , col = 0 , 0					  
  for ( row = 0 ;					      	      for col in range ( 0 , size ) :			    	for row in range ( num ) :				  
  row < num ;						      		  if ( row == col ) :				    	    for col in range ( num ) :				  
  row ++ ) {						      		      print ( "1 " , end = " " )		    		if row == col :					  
    for ( col = 0 ;					      		  else :					    		    print ( 1 , end = ' ' )			  
    col < num ;						      		      print ( "0 " , end = " " )		    		else :						  
    col ++ ) {						      	      print ( )						    		    print ( 0 , end = ' ' )			  
      if ( row == col ) cout << 1 << " " ;		      								    	    print ( )						  
      else cout << 0 << " " ;				      								    	return 0						  
    }							      								    								  
    cout << endl ;					      								    								  
  }							      								    								  
  return 0 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM
--							      --							    --								  --
int findFlips ( char str [ ] , int n ) {		      def findFlips ( str , n ) :				    def findFlips ( str , n ) :					  script_not_found : None
  char last = ' ' ;					      	  last = ' '						    	last = ' '						  
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( last != str [ i ] ) :			    	    if last != str [ i ] :				  
  i ++ ) {						      		  res += 1					    		res += 1					  
    if ( last != str [ i ] ) res ++ ;			      	      last = str [ i ]					    	    last = str [ i ]					  
    last = str [ i ] ;					      	  return res // 2					    	return res / 2						  
  }							      								    								  
  return res / 2 ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_ELEMENT_STABLE_SORT				      POSITION_ELEMENT_STABLE_SORT				    POSITION_ELEMENT_STABLE_SORT				  POSITION_ELEMENT_STABLE_SORT
--							      --							    --								  --
int getIndexInSortedArray ( int arr [ ] , int n , int idx ) { def getIndexInSortedArray ( arr , n , idx ) :		    def getIndexInSortedArray ( arr , n , idx ) :		  success : None
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( arr [ i ] < arr [ idx ] ) :			    	    if arr [ i ] < arr [ idx ] :			  
  i ++ ) {						      		  result += 1					    		result += 1					  
    if ( arr [ i ] < arr [ idx ] ) result ++ ;		      	      if ( arr [ i ] == arr [ idx ] and i < idx ) :	    	    if arr [ i ] == arr [ idx ] and i < idx :		  
    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;    		  result += 1					    		result += 1					  
  }							      	  return result ;					    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT
--							      --							    --								  --
int countObtuseAngles ( int a , int b , int k ) {	      def countObtuseAngles ( a , b , k ) :			    def countObtuseAngles ( a , b , k ) :			  success : None
  int c1 = ( b - a ) - 1 ;				      	  c1 = ( b - a ) - 1					    	c1 = ( b - a ) - 1					  
  int c2 = ( k - b ) + ( a - 1 ) ;			      	  c2 = ( k - b ) + ( a - 1 )				    	c2 = ( k - b ) + ( a - 1 )				  
  if ( c1 == c2 ) return 0 ;				      	  if ( c1 == c2 ) :					    	if c1 == c2 :						  
  return min ( c1 , c2 ) ;				      	      return 0						    	    return 0						  
}							      	  return min ( c1 , c2 )				    	return min ( c1 , c2 )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		      COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		    COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS			  COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS
--							      --							    --								  --
int findCount ( string str ) {				      def findCount ( str ) :					    def findCount ( str ) :					  failure : #Results: 4, 10
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( len ( str ) ) :			    	for c in str :						  
  i < str . size ( ) ;					      	      if ( ( i == ord ( str [ i ] ) - ord ( 'a' ) ) or ( i  	    if c in ( ord ( 'a' ) , ord ( 'z' ) ) :		  
  i ++ ) if ( i == ( str [ i ] - 'a' ) || i == ( str [ i ] -  		  result += 1					    		result += 1					  
  return result ;					      	  return result						    	return result						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
int countP ( int n , int k ) {				      def countP ( n , k ) :					    def countP ( n , k ) :					  script_not_found : None
  if ( n == 0 || k == 0 || k > n ) return 0 ;		      	  if ( n == 0 or k == 0 or k > n ) :			    	if n == 0 or k == 0 or k > n :				  
  if ( k == 1 || k == n ) return 1 ;			      	      return 0						    	    return 0						  
  return k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1 )  	  if ( k == 1 or k == n ) :				    	if k == 1 or k == n :					  
}							      	      return 1						    	    return 1						  
							      	  return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k -  	return k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
int bool isLucky ( int n ) {				      def isLucky ( n ) :					    def isLucky ( n ) :						  script_not_found : None
  static int counter = 2 ;				      	  next_position = n					    	global counter						  
  int next_position = n ;				      	  if isLucky.counter > n :				    	next_position = n					  
  if ( counter > n ) return 1 ;				      	      return 1						    	if counter > n :					  
  if ( n % counter == 0 ) return 0 ;			      	  if n % isLucky.counter == 0 :				    	    return 1						  
  next_position -= next_position / counter ;		      	      return 0						    	if n % counter == 0 :					  
  counter ++ ;						      	  next_position = next_position - next_position / isLucky.c 	    return 0						  
  return isLucky ( next_position ) ;			      	  isLucky.counter = isLucky.counter + 1			    	next_position -= next_position / counter		  
}							      	  return isLucky ( next_position )			    	counter += 1						  
							      								    	return isLucky ( next_position )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
string sortString ( string str , int n ) {		      def sortString ( str , n ) :				    def sortString ( str , n ) :				  script_not_found : None
  string new_str = "" ;					      	  new_str = ""						    	new_str = ""						  
  for ( int i = 'a' ;					      	  for i in range ( ord ( 'a' ) , ord ( 'z' ) + 1 ) :	    	for i in [ 'a' , 'z' ] :				  
  i <= 'z' ;						      	      for j in range ( n ) :				    	    for j in range ( n ) :				  
  i ++ ) for ( int j = 0 ;				      		  if ( str [ j ] == chr ( i ) ) :		    		if str [ j ] == i :				  
  j < n ;						      		      new_str += str [ j ]			    		    new_str += str [ j ]			  
  j ++ ) if ( str [ j ] == i ) new_str += str [ j ] ;	      	  return new_str					    	return new_str						  
  return new_str ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
string lexNext ( string s , int n ) {			      def lexNext ( s , n ) :					    def lexNext ( s , n ) :					  script_not_found : None
  for ( int i = n - 1 ;					      	  for i in range ( n - 1 , - 1 , - 1 ) :		    	for i in range ( n - 1 , - 1 , - 1 ) :			  
  i >= 0 ;						      	      if s [ i ] != 'z' :				    	    if s [ i ] != 'z' :					  
  i -- ) {						      		  k = ord ( s [ i ] )				    		s [ i ] += 1					  
    if ( s [ i ] != 'z' ) {				      		  s [ i ] = chr ( k + 1 )			    		return s					  
      s [ i ] ++ ;					      		  return ''.join ( s )				    	    s [ i ] = 'a'					  
      return s ;					      	      s [ i ] = 'a'					    	return s						  
    }							      								    								  
    s [ i ] = 'a' ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
void interchangeFirstLast ( int m [ ] [ n ] ) {		      def interchangeFirstLast ( mat , n , m ) :		    def interchangeFirstLast ( m ) :				  script_not_found : None
  int rows = n ;					      	  rows = n						    	rows = n						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      t = mat [ 0 ] [ i ]				    	    t = m [ 0 ] [ i ]					  
  i ++ ) {						      	      mat [ 0 ] [ i ] = mat [ rows - 1 ] [ i ]		    	    m [ 0 ] [ i ] = m [ rows - 1 ] [ i ]		  
    int t = m [ 0 ] [ i ] ;				      	      mat [ rows - 1 ] [ i ] = t			    	    m [ rows - 1 ] [ i ] = t				  
    m [ 0 ] [ i ] = m [ rows - 1 ] [ i ] ;		      								    								  
    m [ rows - 1 ] [ i ] = t ;				      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1
--							      --							    --								  --
int difference ( int arr [ ] [ MAX ] , int n ) {	      def difference ( arr , n ) :				    def difference ( arr , n ) :				  success : None
  int d1 = 0 , d2 = 0 ;					      	  d1 = 0						    	d1 , d2 = 0 , 0						  
  for ( int i = 0 ;					      	  d2 = 0						    	for i in range ( n ) :					  
  i < n ;						      	  for i in range ( 0 , n ) :				    	    d1 += arr [ i ] [ i ]				  
  i ++ ) {						      	      d1 = d1 + arr [ i ] [ i ]				    	    d2 += arr [ i ] [ n - i - 1 ]			  
    d1 += arr [ i ] [ i ] ;				      	      d2 = d2 + arr [ i ] [ n - i - 1 ]			    	return abs ( d1 - d2 )					  
    d2 += arr [ i ] [ n - i - 1 ] ;			      	  return abs ( d1 - d2 )				    								  
  }							      								    								  
  return abs ( d1 - d2 ) ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE_1				      C_PROGRAM_FIND_AREA_TRIANGLE_1				    C_PROGRAM_FIND_AREA_TRIANGLE_1				  C_PROGRAM_FIND_AREA_TRIANGLE_1
--							      --							    --								  --
double polygonArea ( double X [ ] , double Y [ ] , int n ) {  def polygonArea ( X , Y , n ) :				    def polygonArea ( X , Y , n ) :				  script_not_found : None
  double area = 0.0 ;					      	  area = 0.0						    	area = 0.0						  
  int j = n - 1 ;					      	  j = n - 1						    	j = n - 1						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ 	    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) 
  i ++ ) {						      	      j = i						    	    j = i						  
    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	  return abs ( area // 2.0 )				    	return abs ( area / 2.0 )				  
    j = i ;						      								    								  
  }							      								    								  
  return abs ( area / 2.0 ) ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
long countWays ( int n , int k ) {			      def countWays ( n , k ) :					    def countWays ( n , k ) :					  success : None
  long total = k ;					      	  total = k						    	total = k						  
  int mod = 1000000007 ;				      	  mod = 1000000007					    	mod = 1000000007					  
  int same = 0 , diff = k ;				      	  same , diff = 0 , k					    	same , diff = 0 , k					  
  for ( int i = 2 ;					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
  i <= n ;						      	      same = diff					    	    same , diff = diff , total * ( k - 1 )		  
  i ++ ) {						      	      diff = total * ( k - 1 )				    	    diff = diff % mod					  
    same = diff ;					      	      diff = diff % mod					    	    total = ( same + diff ) % mod			  
    diff = total * ( k - 1 ) ;				      	      total = ( same + diff ) % mod			    	return total						  
    diff = diff % mod ;					      	  return total						    								  
    total = ( same + diff ) % mod ;			      								    								  
  }							      								    								  
  return total ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
int seiresSum ( int n , int a [ ] ) {			      def seiresSum ( n , a ) :					    def seiresSum ( n , a ) :					  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , 2 * n ) :			    	for i in range ( 2 * n ) :				  
  i < 2 * n ;						      	      if ( i % 2 == 0 ) :				    	    if i % 2 == 0 :					  
  i ++ ) {						      		  res += a [ i ] * a [ i ]			    		res += a [ i ] * a [ i ]			  
    if ( i % 2 == 0 ) res += a [ i ] * a [ i ] ;	      	      else :						    	    else :						  
    else res -= a [ i ] * a [ i ] ;			      		  res -= a [ i ] * a [ i ]			    		res -= a [ i ] * a [ i ]			  
  }							      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		      CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		    CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		  CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD
--							      --							    --								  --
bool isPowerOfK ( unsigned int n , unsigned int k ) {	      def isPowerOfK ( n , k ) :				    def isPowerOfK ( n , k ) :					  success : None
  bool oneSeen = false ;				      	  oneSeen = False					    	oneSeen = False						  
  while ( n > 0 ) {					      	  while ( n > 0 ) :					    	while n > 0 :						  
    int digit = n % k ;					      	      digit = n % k					    	    digit = n % k					  
    if ( digit > 1 ) return false ;			      	      if ( digit > 1 ) :				    	    if digit > 1 :					  
    if ( digit == 1 ) {					      		  return False					    		return False					  
      if ( oneSeen ) return false ;			      	      if ( digit == 1 ) :				    	    if digit == 1 :					  
      oneSeen = true ;					      		  if ( oneSeen ) :				    		if oneSeen :					  
    }							      		      return False				    		    return False				  
    n /= k ;						      		  oneSeen = True				    		oneSeen = True					  
  }							      	      n //= k						    	    n /= k						  
  return true ;						      	  return True						    	return True						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			      FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			    FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM			  FIND_IF_THERE_IS_A_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
bool subArrayExists ( int arr [ ] , int n ) {		      def subArrayExists ( arr , n ) :				    def subArrayExists ( arr , n ) :				  script_not_found : None
  unordered_set < int > sumSet ;			      	  s = set ( )						    	sumSet = set ( )					  
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += arr [ i ]					    	    sum += arr [ i ]					  
  i ++ ) {						      	      if sum == 0 or sum in s :				    	    if sum == 0 or sumSet.count ( sum ) != 0 :		  
    sum += arr [ i ] ;					      		  return True					    		return True					  
    if ( sum == 0 || sumSet . find ( sum ) != sumSet . end (  	      s.add ( sum )					    	    sumSet.add ( sum )					  
    sumSet . insert ( sum ) ;				      	  return False						    	return False						  
  }							      								    								  
  return false ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_EQUAL_PAIRS_STRING				      NUMBER_EQUAL_PAIRS_STRING					    NUMBER_EQUAL_PAIRS_STRING					  NUMBER_EQUAL_PAIRS_STRING
--							      --							    --								  --
int countPairs ( string s ) {				      def countPairs ( s ) :					    def countPairs ( s ) :					  script_not_found : None
  int cnt [ MAX ] = {					      	  cnt = [ 0 for i in range ( 0 , MAX ) ]		    	cnt = [ 0 ]						  
    0 }							      	  for i in range ( len ( s ) ) :			    	for i in s :						  
    ;							      	      cnt [ ord ( s [ i ] ) - 97 ] += 1			    	    cnt [ i ] += 1					  
    for ( int i = 0 ;					      	  ans = 0						    	ans = 0							  
    i < s . length ( ) ;				      	  for i in range ( 0 , MAX ) :				    	for i in range ( MAX ) :				  
    i ++ ) cnt [ s [ i ] ] ++ ;				      	      ans += cnt [ i ] * cnt [ i ]			    	    ans += cnt [ i ] * cnt [ i ]			  
    int ans = 0 ;					      	  return ans						    	return ans						  
    for ( int i = 0 ;					      								    								  
    i < MAX ;						      								    								  
    i ++ ) ans += cnt [ i ] * cnt [ i ] ;		      								    								  
    return ans ;					      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		      FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		    FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		  FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY
--							      --							    --								  --
int findSum ( int arr [ ] , int n ) {			      def findSum ( arr , n ) :					    def findSum ( arr , n ) :					  error : Traceback (most recent call last):   File
  int sum = 0 ;						      	  s = set ( )						    	sum = 0							  "dump/transcoder/eval/cpp_python/model_2/transcode
  unordered_set < int > s ;				      	  sum = 0						    	s = set ( )						  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  d/FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY.p
  i < n ;						      	      if arr [ i ] not in s :				    	    if s.find ( arr [ i ] ) == - 1 :			  y", line 53, in <module>     if f_filled(*paramete
  i ++ ) {						      		  s.add ( arr [ i ] )				    		sum += arr [ i ]				  rs_set) == f_gold(*parameters_set):	File "dump/t
    if ( s . find ( arr [ i ] ) == s . end ( ) ) {	      	  for i in s :						    		s.add ( arr [ i ] )				  ranscoder/eval/cpp_python/model_2/transcoder_eval/
      sum += arr [ i ] ;				      	      sum = sum + i					    	return sum						  20643759/eval_scripts/cpp_sa-python_sa.valid/FIND_
      s . insert ( arr [ i ] ) ;			      	  return sum						    								  SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY.py", lin
    }							      								    								  e 32, in f_filled	if s.find ( arr [ i ] ) == -
  }							      								    								   1 : AttributeError: 'set' object has no attribute
  return sum ;						      								    								   'find'
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
int maxSum ( int arr [ ] , int n ) {			      def maxSum ( arr , n ) :					    def maxSum ( arr , n ) :					  success : None
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr = sorted ( arr )					  
  for ( int i = 0 ;					      	  for i in range ( 0 , int ( n / 2 ) ) :		    	for i in range ( n // 2 ) :				  
  i < n / 2 ;						      	      sum -= ( 2 * arr [ i ] )				    	    sum -= ( 2 * arr [ i ] )				  
  i ++ ) {						      	      sum += ( 2 * arr [ n - i - 1 ] )			    	    sum += ( 2 * arr [ n - i - 1 ] )			  
    sum -= ( 2 * arr [ i ] ) ;				      	  return sum						    	return sum						  
    sum += ( 2 * arr [ n - i - 1 ] ) ;			      								    								  
  }							      								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
int countLattice ( int r ) {				      def countLattice ( r ) :					    def countLattice ( r ) :					  failure : #Results: 0, 10
  if ( r <= 0 ) return 0 ;				      	  if ( r <= 0 ) :					    	if r <= 0 :						  
  int result = 4 ;					      	      return 0						    	    return 0						  
  for ( int x = 1 ;					      	  result = 4						    	result = 4						  
  x < r ;						      	  for x in range ( 1 , r ) :				    	for x in range ( 1 , r ) :				  
  x ++ ) {						      	      ySquare = r * r - x * x				    	    ySquare = r ** 2 - x ** 2				  
    int ySquare = r * r - x * x ;			      	      y = int ( math.sqrt ( ySquare ) )			    	    y = math.sqrt ( ySquare )				  
    int y = sqrt ( ySquare ) ;				      	      if ( y * y == ySquare ) :				    	    if y * y == ySquare :				  
    if ( y * y == ySquare ) result += 4 ;		      		  result += 4					    		result += 4					  
  }							      	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		      ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		    ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		  ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION
--							      --							    --								  --
void concatenate ( char a [ ] , char b [ ] , char c [ ] , int def concatenate ( a , b , c , n1 , n2 ) :			    def concatenate ( a , b , c , n1 , n2 ) :			  script_not_found : None
  int i ;						      	  i = - 1						    	i = 0							  
  for ( i = 0 ;						      	  for i in range ( n1 ) :				    	for i in range ( n1 ) :					  
  i < n1 ;						      	      c [ i ] = a [ i ]					    	    c [ i ] = a [ i ]					  
  i ++ ) c [ i ] = a [ i ] ;				      	  for j in range ( n2 ) :				    	for j in range ( n2 ) :					  
  for ( int j = 0 ;					      	      c [ i ] = b [ j ]					    	    c [ i + 1 ] = b [ j ]				  
  j < n2 ;						      	      i += 1						    	c [ i ] = ''						  
  j ++ ) c [ i ++ ] = b [ j ] ;				      								    								  
  c [ i ] = '\0' ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1
--							      --							    --								  --
int findInteger ( int arr [ ] , int n ) {		      def findInteger ( arr , n ) :				    def findInteger ( arr , n ) :				  success : None
  int neg = 0 , pos = 0 ;				      	  neg = 0						    	neg , pos = 0 , 0					  
  int sum = 0 ;						      	  pos = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  sum = 0						    	for i in range ( n ) :					  
  i < n ;						      	  for i in range ( 0 , n ) :				    	    sum += arr [ i ]					  
  i ++ ) {						      	      sum += arr [ i ]					    	    if arr [ i ] < 0 :					  
    sum += arr [ i ] ;					      	      if ( arr [ i ] < 0 ) :				    		neg += 1					  
    if ( arr [ i ] < 0 ) neg ++ ;			      		  neg += 1					    	    else :						  
    else pos ++ ;					      	      else :						    		pos += 1					  
  }							      		  pos += 1					    	return ( sum / abs ( neg - pos ) )			  
  return ( sum / abs ( neg - pos ) ) ;			      	  return ( sum / abs ( neg - pos ) )			    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION
--							      --							    --								  --
int pow ( int a , int b ) {				      def pow ( a , b ) :					    def pow ( a , b ) :						  success : None
  if ( b == 0 ) return 1 ;				      	  if ( b == 0 ) :					    	if b == 0 :						  
  int answer = a ;					      	      return 1						    	    return 1						  
  int increment = a ;					      	  answer = a						    	answer = a						  
  int i , j ;						      	  increment = a						    	increment = a						  
  for ( i = 1 ;						      	  for i in range ( 1 , b ) :				    	i , j = 1 , 0						  
  i < b ;						      	      for j in range ( 1 , a ) :			    	for i in range ( 1 , b ) :				  
  i ++ ) {						      		  answer += increment				    	    for j in range ( 1 , a ) :				  
    for ( j = 1 ;					      	      increment = answer				    		answer += increment				  
    j < a ;						      	  return answer						    	    increment = answer					  
    j ++ ) {						      								    	return answer						  
      answer += increment ;				      								    								  
    }							      								    								  
    increment = answer ;				      								    								  
  }							      								    								  
  return answer ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES
--							      --							    --								  --
int maxvolume ( int s ) {				      def maxvolume ( s ) :					    def maxvolume ( s ) :					  success : None
  int maxvalue = 0 ;					      	  maxvalue = 0						    	maxvalue = 0						  
  for ( int i = 1 ;					      	  i = 1							    	for i in range ( 1 , s - 2 ) :				  
  i <= s - 2 ;						      	  for i in range ( s - 1 ) :				    	    for j in range ( 1 , s - 1 ) :			  
  i ++ ) {						      	      j = 1						    		k = s - i - j					  
    for ( int j = 1 ;					      	      for j in range ( s ) :				    		maxvalue = max ( maxvalue , i * j * k )		  
    j <= s - 1 ;					      		  k = s - i - j					    	return maxvalue						  
    j ++ ) {						      		  maxvalue = max ( maxvalue , i * j * k )	    								  
      int k = s - i - j ;				      	  return maxvalue					    								  
      maxvalue = max ( maxvalue , i * j * k ) ;		      								    								  
    }							      								    								  
  }							      								    								  
  return maxvalue ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			      DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			    DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			  DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE
--							      --							    --								  --
int count ( int S [ ] , int m , int n ) {		      def count ( S , m , n ) :					    def count ( S , m , n ) :					  script_not_found : None
  if ( n == 0 ) return 1 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  if ( n < 0 ) return 0 ;				      	      return 1						    	    return 1						  
  if ( m <= 0 && n >= 1 ) return 0 ;			      	  if ( n < 0 ) :					    	if n < 0 :						  
  return count ( S , m - 1 , n ) + count ( S , m , n - S [ m  	      return 0						    	    return 0						  
}							      	  if ( m <= 0 and n >= 1 ) :				    	if m <= 0 and n >= 1 :					  
							      	      return 0						    	    return 0						  
							      	  return count ( S , m - 1 , n ) + count ( S , m , n - S [  	return count ( S , m - 1 , n ) + count ( S , m , n - S [  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
float power ( float x , int y ) {			      def power ( x , y ) :					    def power ( x , y ) :					  error : Traceback (most recent call last):   File
  float temp ;						      	  if ( y == 0 ) : return 1				    	temp = 0						  "dump/transcoder/eval/cpp_python/model_2/transcode
  if ( y == 0 ) return 1 ;				      	  temp = power ( x , int ( y / 2 ) )			    	if y == 0 :						  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  temp = power ( x , y / 2 ) ;				      	  if ( y % 2 == 0 ) :					    	    return 1						  d/WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1.py", line
  if ( y % 2 == 0 ) return temp * temp ;		      	      return temp * temp				    	temp = power ( x , y / 2 )				   56, in <module>     if abs(1 - (0.0000001 + abs(f
  else {						      	  else :						    	if y % 2 == 0 :						  _gold(*parameters_set))) / (abs(f_filled(*paramete
    if ( y > 0 ) return x * temp * temp ;		      	      if ( y > 0 ) : return x * temp * temp		    	    return temp * temp					  rs_set)) + 0.0000001)) < 0.001:   File "dump/trans
    else return ( temp * temp ) / x ;			      	      else : return ( temp * temp ) / x			    	else :							  coder/eval/cpp_python/model_2/transcoder_eval/2064
  }							      								    	    if y > 0 :						  3759/eval_scripts/cpp_sa-python_sa.valid/WRITE_A_C
}							      								    		return x * temp * temp				  _PROGRAM_TO_CALCULATE_POWXN_1.py", line 31, in f_f
							      								    	    else :						  illed	    temp = f_filled ( x , y / 2 )   File "du
							      								    		return ( temp * temp ) / x			  mp/transcoder/eval/cpp_python/model_2/transcoder_e
							      								    								  val/20643759/eval_scripts/cpp_sa-python_sa.valid/W
							      								    								  RITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1.py", line 31
							      								    								  , in f_filled	    temp = f_filled ( x , y / 2 )
							      								    								  File "dump/transcoder/eval/cpp_python/model_2/tran
							      								    								  scoder_eval/20643759/eval_scripts/cpp_sa-python_sa
							      								    								  .valid/WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1.py",
							      								    								   line 31, in f_filled	    temp = f_filled ( x , y
							      								    								  / 2 )	  [Previous line repeated 994 more times]
							      								    								  File "dump/transcoder/eval/cpp_python/model_2/tran
							      								    								  scoder_eval/20643759/eval_scripts/cpp_sa-python_sa
							      								    								  .valid/WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1.py",
							      								    								   line 29, in f_filled	    if y == 0 : RecursionErr
							      								    								  or: maximum recursion depth exceeded in comparison
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
int countDer ( int n ) {				      def countDer ( n ) :					    def countDer ( n ) :					  script_not_found : None
  if ( n == 1 ) return 0 ;				      	  if ( n == 1 ) : return 0				    	if n == 1 :						  
  if ( n == 0 ) return 1 ;				      	  if ( n == 0 ) : return 1				    	    return 0						  
  if ( n == 2 ) return 1 ;				      	  if ( n == 2 ) : return 1				    	if n == 0 :						  
  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2  	  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  	    return 1						  
}							      								    	if n == 2 :						  
							      								    	    return 1						  
							      								    	return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n -  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	      DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	    DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST	  DFS_N_ARY_TREE_ACYCLIC_GRAPH_REPRESENTED_ADJACENCY_LIST
--							      --							    --								  --
void dfs ( vector < int > list [ ] , int node , int arrival ) def dfs ( List , node , arrival ) :			    def dfs ( list , node , arrival ) :				  script_not_found : None
  cout << node << '\n' ;				      	  print ( node )					    	print ( node , '\n' )					  
  for ( int i = 0 ;					      	  for i in range ( len ( List [ node ] ) ) :		    	for i in range ( len ( list [ node ] ) ) :		  
  i < list [ node ] . size ( ) ;			      	      if ( List [ node ] [ i ] != arrival ) :		    	    if list [ node ] [ i ] != arrival :			  
  i ++ ) {						      		  dfs ( List , List [ node ] [ i ] , node )	    		dfs ( list , list [ node ] [ i ] , node )	  
    if ( list [ node ] [ i ] != arrival ) dfs ( list , list [ 								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_OCTAL_CONVERSION			      PROGRAM_DECIMAL_OCTAL_CONVERSION				    PROGRAM_DECIMAL_OCTAL_CONVERSION				  PROGRAM_DECIMAL_OCTAL_CONVERSION
--							      --							    --								  --
void decToOctal ( int n ) {				      def decToOctal ( n ) :					    def decToOctal ( n ) :					  script_not_found : None
  int octalNum [ 100 ] ;				      	  octalNum = [ 0 ] * 100				    	octalNum = [ ]						  
  int i = 0 ;						      	  i = 0							    	i = 0							  
  while ( n != 0 ) {					      	  while ( n != 0 ) :					    	while n != 0 :						  
    octalNum [ i ] = n % 8 ;				      	      octalNum [ i ] = n % 8				    	    octalNum.append ( n % 8 )				  
    n = n / 8 ;						      	      n = int ( n / 8 )					    	    n = n // 8						  
    i ++ ;						      	      i += 1						    	    i += 1						  
  }							      	  for j in range ( i - 1 , - 1 , - 1 ) :		    	for j in range ( i - 1 , - 1 , - 1 ) :			  
  for ( int j = i - 1 ;					      	      print ( octalNum [ j ] , end = "" )		    	    print ( octalNum [ j ] )				  
  j >= 0 ;						      								    								  
  j -- ) cout << octalNum [ j ] ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_SPARSE_NOT				      CHECK_GIVEN_MATRIX_SPARSE_NOT				    CHECK_GIVEN_MATRIX_SPARSE_NOT				  CHECK_GIVEN_MATRIX_SPARSE_NOT
--							      --							    --								  --
bool isSparse ( int array [ ] [ MAX ] , int m , int n ) {     def isSparse ( array , m , n ) :				    def isSparse ( array , m , n ) :				  success : None
  int counter = 0 ;					      	  counter = 0						    	counter = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , m ) :				    	for i in range ( m ) :					  
  i < m ;						      	      for j in range ( 0 , n ) :			    	    for j in range ( n ) :				  
  ++ i ) for ( int j = 0 ;				      		  if ( array [ i ] [ j ] == 0 ) :		    		if array [ i ] [ j ] == 0 :			  
  j < n ;						      		      counter = counter + 1			    		    counter += 1				  
  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;	      	  return ( counter > ( ( m * n ) // 2 ) )		    	return ( counter > ( ( m * n ) / 2 ) )			  
  return ( counter > ( ( m * n ) / 2 ) ) ;		      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_IN_A_GIVEN_STRING				      COUNT_WORDS_IN_A_GIVEN_STRING				    COUNT_WORDS_IN_A_GIVEN_STRING				  COUNT_WORDS_IN_A_GIVEN_STRING
--							      --							    --								  --
unsigned countWords ( char * str ) {			      def countWords ( string ) :				    def countWords ( str ) :					  script_not_found : None
  int state = OUT ;					      	  state = OUT						    	state = OUT						  
  unsigned wc = 0 ;					      	  wc = 0						    	wc = 0							  
  while ( * str ) {					      	  for i in range ( len ( string ) ) :			    	while str :						  
    if ( * str == ' ' || * str == '\n' || * str == '\t' ) sta 	      if ( string [ i ] == ' ' or string [ i ] == '\n' or s 	    if str [ 0 ] in [ ' ' , '\n' , '\t' ] :		  
    else if ( state == OUT ) {				      		  state = OUT					    		state = OUT					  
      state = IN ;					      	      elif state == OUT :				    	    elif state == OUT :					  
      ++ wc ;						      		  state = IN					    		state = IN					  
    }							      		  wc += 1					    		wc += 1						  
    ++ str ;						      	  return wc						    	    yield wc						  
  }							      								    								  
  return wc ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
bool check ( string str ) {				      def check ( st ) :					    def check ( str ) :						  script_not_found : None
  int n = str . length ( ) ;				      	  n = len ( st )					    	n = len ( str )						  
  if ( ( str [ n - 1 ] - '0' ) % 2 != 0 ) return false ;      	  if ( ( ( int ) ( st [ n - 1 ] ) % 2 ) != 0 ) :	    	if ( str [ n - 1 ] - '0' ) % 2 != 0 :			  
  int digitSum = 0 ;					      	      return False					    	    return False					  
  for ( int i = 0 ;					      	  digitSum = 0						    	digitSum = 0						  
  i < n ;						      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i ++ ) digitSum += ( str [ i ] - '0' ) ;		      	      digitSum = digitSum + ( int ) ( st [ i ] )	    	    digitSum += ( str [ i ] - '0' )			  
  return ( digitSum % 3 == 0 ) ;			      	  return ( digitSum % 3 == 0 )				    	return ( digitSum % 3 == 0 )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ALTERNATIVE_SORTING					      ALTERNATIVE_SORTING					    ALTERNATIVE_SORTING						  ALTERNATIVE_SORTING
--							      --							    --								  --
void alternateSort ( int arr [ ] , int n ) {		      def alternateSort ( arr , n ) :				    def alternateSort ( arr , n ) :				  error :   File "dump/transcoder/eval/cpp_python/mo
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr = sorted ( arr )					  del_2/transcoder_eval/20643759/eval_scripts/cpp_sa
  int i = 0 , j = n - 1 ;				      	  i = 0							    	i , j = 0 , n - 1					  -python_sa.valid/ALTERNATIVE_SORTING.py", line 34
  while ( i < j ) {					      	  j = n - 1						    	while i < j :						      print ( arr [ j -- ] , end = ' ' )
    cout << arr [ j -- ] << " " ;			      	  while ( i < j ) :					    	    print ( arr [ j -- ] , end = ' ' )			  	      ^ SyntaxError: invalid syntax
    cout << arr [ i ++ ] << " " ;			      	      print ( arr [ j ] , end = " " )			    	    print ( arr [ i ++ ] , end = ' ' )			  
  }							      	      j -= 1						    	if n % 2 != 0 :						  
  if ( n % 2 != 0 ) cout << arr [ i ] ;			      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] )					  
}							      	      i += 1						    								  
							      	  if ( n % 2 != 0 ) :					    								  
							      	      print ( arr [ i ] )				    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND
--							      --							    --								  --
void findMissing ( int a [ ] , int b [ ] , int n , int m ) {  def findMissing ( a , b , n , m ) :			    def findMissing ( a , b , n , m ) :				  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( m ) :				    	    j = 0						  
  i ++ ) {						      		  if ( a [ i ] == b [ j ] ) :			    	    for j in range ( m ) :				  
    int j ;						      		      break					    		if a [ i ] == b [ j ] :				  
    for ( j = 0 ;					      	      if ( j == m - 1 ) :				    		    break					  
    j < m ;						      		  print ( a [ i ] , end = " " )			    	    if j == m :						  
    j ++ ) if ( a [ i ] == b [ j ] ) break ;		      								    		print ( a [ i ] , end = ' ' )			  
    if ( j == m ) cout << a [ i ] << " " ;		      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE
--							      --							    --								  --
bool checkCount ( int arr [ ] , int n , int k ) {	      def checkCount ( arr , n , k ) :				    def checkCount ( arr , n , k ) :				  success : None
  int count ;						      	  for i in range ( n ) :				    	count = 0						  
  for ( int i = 0 ;					      	      count = 0						    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( n ) :				    	    count = 0						  
  i ++ ) {						      		  if arr [ j ] == arr [ i ] :			    	    for j in range ( n ) :				  
    count = 0 ;						      		      count += 1				    		if arr [ j ] == arr [ i ] :			  
    for ( int j = 0 ;					      		  if count > 2 * k :				    		    count += 1					  
    j < n ;						      		      return False				    		if count > 2 * k :				  
    j ++ ) {						      	  return True						    		    return False				  
      if ( arr [ j ] == arr [ i ] ) count ++ ;		      								    	return True						  
      if ( count > 2 * k ) return false ;		      								    								  
    }							      								    								  
  }							      								    								  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME     MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	    MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	  MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME
--							      --							    --								  --
int maxRemoval ( int arr [ ] , int n ) {		      def maxRemoval ( arr , n ) :				    def maxRemoval ( arr , n ) :				  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  int cummulative_sum = 0 ;				      	  cummulative_sum = 0					    	cummulative_sum = 0					  
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr = sorted ( arr )					  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if arr [ i ] >= cummulative_sum :			    	    if arr [ i ] >= cummulative_sum :			  
  i ++ ) {						      		  count += 1					    		count += 1					  
    if ( arr [ i ] >= cummulative_sum ) {		      		  cummulative_sum += arr [ i ]			    		cummulative_sum += arr [ i ]			  
      count ++ ;					      	  return count						    	return count						  
      cummulative_sum += arr [ i ] ;			      								    								  
    }							      								    								  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1
--							      --							    --								  --
int getOddOccurrence ( int arr [ ] , int size ) {	      def getOddOccurrence ( arr , size ) :			    def getOddOccurrence ( arr , size ) :			  error : Traceback (most recent call last):   File
  unordered_map < int , int > hash ;			      	  Hash = dict ( )					    	hash = { }						  "dump/transcoder/eval/cpp_python/model_2/transcode
  for ( int i = 0 ;					      	  for i in range ( size ) :				    	for i in range ( size ) :				  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  i < size ;						      	      Hash [ arr [ i ] ] = Hash.get ( arr [ i ] , 0 ) + 1   	    hash [ arr [ i ] ] += 1				  d/FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1.
  i ++ ) {						      	  for i in Hash :					    	for i in hash :						  py", line 51, in <module>	if f_filled(*paramet
    hash [ arr [ i ] ] ++ ;				      	      if ( Hash [ i ] % 2 != 0 ) :			    	    if i [ 1 ] % 2 != 0 :				  ers_set) == f_gold(*parameters_set):	 File "dump/
  }							      		  return i					    		return i [ 0 ]					  transcoder/eval/cpp_python/model_2/transcoder_eval
  for ( auto i : hash ) {				      	  return - 1						    								  /20643759/eval_scripts/cpp_sa-python_sa.valid/FIND
    if ( i . second % 2 != 0 ) {			      								    								  _THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_1.py", l
      return i . first ;				      								    								  ine 30, in f_filled	  hash [ arr [ i ] ] += 1 Ke
    }							      								    								  yError: 49
  }							      								    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES			  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES
--							      --							    --								  --
void reorder ( int arr [ ] , int index [ ] , int n ) {	      def reorder ( arr , index , n ) :				    def reorder ( arr , index , n ) :				  script_not_found : None
  int temp [ n ] ;					      	  temp = [ 0 ] * n					    	temp = [ ]						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      temp [ index [ i ] ] = arr [ i ]			    	    temp.append ( index [ i ] )				  
  i ++ ) temp [ index [ i ] ] = arr [ i ] ;		      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  for ( int i = 0 ;					      	      arr [ i ] = temp [ i ]				    	    arr [ i ] = temp [ i ]				  
  i < n ;						      	      index [ i ] = i					    	    index [ i ] = i					  
  i ++ ) {						      								    	return arr , index					  
    arr [ i ] = temp [ i ] ;				      								    								  
    index [ i ] = i ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS		      MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			    MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS			  MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS
--							      --							    --								  --
int minDifferenceAmongMaxMin ( int arr [ ] , int N , int K )  def minDifferenceAmongMaxMin ( arr , N , K ) :		    def minDifferenceAmongMaxMin ( arr , N , K ) :		  error : Traceback (most recent call last):   File
  sort ( arr , arr + N ) ;				      	  arr.sort ( )						    	arr.sort ( )						  "dump/transcoder/eval/cpp_python/model_2/transcode
  int res = INT_MAX ;					      	  res = 2147483647					    	res = sys.maxint					  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
  for ( int i = 0 ;					      	  for i in range ( ( N - K ) + 1 ) :			    	for i in range ( 0 , ( N - K ) ) :			  d/MINIMUM_DIFFERENCE_MAX_MIN_K_SIZE_SUBSETS.py", l
  i <= ( N - K ) ;					      	      curSeqDiff = arr [ i + K - 1 ] - arr [ i ]	    	    curSeqDiff = arr [ i + K - 1 ] - arr [ i ]		  ine 50, in <module>	  if f_filled(*parameters_se
  i ++ ) {						      	      res = min ( res , curSeqDiff )			    	    res = min ( res , curSeqDiff )			  t) == f_gold(*parameters_set):   File "dump/transc
    int curSeqDiff = arr [ i + K - 1 ] - arr [ i ] ;	      	  return res						    	return res						  oder/eval/cpp_python/model_2/transcoder_eval/20643
    res = min ( res , curSeqDiff ) ;			      								    								  759/eval_scripts/cpp_sa-python_sa.valid/MINIMUM_DI
  }							      								    								  FFERENCE_MAX_MIN_K_SIZE_SUBSETS.py", line 28, in f
  return res ;						      								    								  _filled     res = sys.maxint AttributeError: modul
}							      								    								  e 'sys' has no attribute 'maxint'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW MINIMUM_COST_FOR_ACQUIRING_ALL_COINS_WITH_K_EXTRA_COINS_ALLOW
--							      --							    --								  --
int minCost ( int coin [ ] , int n , int k ) {		      def minCost ( coin , n , k ) :				    def minCost ( coin , n , k ) :				  success : None
  sort ( coin , coin + n ) ;				      	  coin.sort ( )						    	coin.sort ( )						  
  int coins_needed = ceil ( 1.0 * n / ( k + 1 ) ) ;	      	  coins_needed = math.ceil ( 1.0 * n // ( k + 1 ) )	    	coins_needed = math.ceil ( 1.0 * n / ( k + 1 ) )	  
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  for ( int i = 0 ;					      	  for i in range ( coins_needed - 1 + 1 ) :		    	for i in range ( 0 , coins_needed - 1 ) :		  
  i <= coins_needed - 1 ;				      	      ans += coin [ i ]					    	    ans += coin [ i ]					  
  i ++ ) ans += coin [ i ] ;				      	  return ans						    	return ans						  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	      BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		    BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		  BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS
--							      --							    --								  --
int nextFit ( int weight [ ] , int n , int c ) {	      def nextfit ( weight , c ) :				    def nextFit ( weight , n , c ) :				  script_not_found : None
  int res = 0 , bin_rem = c ;				      	  res = 0						    	res , bin_rem = 0 , c					  
  for ( int i = 0 ;					      	  rem = c						    	for i in range ( n ) :					  
  i < n ;						      	  for _ in range ( len ( weight ) ) :			    	    if weight [ i ] > bin_rem :				  
  i ++ ) {						      	      if rem >= weight [ _ ] :				    		res += 1					  
    if ( weight [ i ] > bin_rem ) {			      		  rem = rem - weight [ _ ]			    		bin_rem = c - weight [ i ]			  
      res ++ ;						      	      else :						    	    else :						  
      bin_rem = c - weight [ i ] ;			      		  res += 1					    		bin_rem -= weight [ i ]				  
    }							      		  rem = c - weight [ _ ]			    	return res						  
    else bin_rem -= weight [ i ] ;			      	  return res						    								  
  }							      								    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1		      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1
--							      --							    --								  --
int gcdExtended ( int a , int b , int * x , int * y ) {	      def gcdExtended ( a , b , x , y ) :			    def gcdExtended ( a , b , x , y ) :				  error : Traceback (most recent call last):   File
  if ( a == 0 ) {					      	  if a == 0 :						    	if a == 0 :						  "dump/transcoder/eval/cpp_python/model_2/transcode
    * x = 0 ;						      	      x = 0						    	    x = 0						  r_eval/20643759/eval_scripts/cpp_sa-python_sa.vali
    * y = 1 ;						      	      y = 1						    	    y = 1						  d/BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1.py", l
    return b ;						      	      return b						    	    return b						  ine 57, in <module>	  if f_filled(*parameters_se
  }							      	  x1 = 1						    	x1 , y1 = x						  t) == f_gold(*parameters_set):   File "dump/transc
  int x1 , y1 ;						      	  y1 = 1						    	gcd = gcdExtended ( b % a , a , [ x1 , y1 ] )		  oder/eval/cpp_python/model_2/transcoder_eval/20643
  int gcd = gcdExtended ( b % a , a , & x1 , & y1 ) ;	      	  gcd = gcdExtended ( b % a , a , x1 , y1 )		    	x = y1 - ( b // a ) * x1				  759/eval_scripts/cpp_sa-python_sa.valid/BASIC_AND_
  * x = y1 - ( b / a ) * x1 ;				      	  x = y1 - ( b / a ) * x1				    	y = x1							  EXTENDED_EUCLIDEAN_ALGORITHMS_1.py", line 35, in f
  * y = x1 ;						      	  y = x1						    	return gcd						  _filled     x1 , y1 = x TypeError: 'int' object is
  return gcd ;						      	  return gcd						    								   not iterable
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
int countSubStr ( char str [ ] ) {			      def countSubStr ( st , n ) :				    def countSubStr ( str ) :					  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( 0 , len ( str ) ) :			  
  str [ i ] != '\0' ;					      	      if ( st [ i ] == '1' ) :				    	    if str [ i ] == '1' :				  
  i ++ ) {						      		  for j in range ( i + 1 , n ) :		    		for j in range ( i + 1 , len ( str ) ) :	  
    if ( str [ i ] == '1' ) {				      		      if ( st [ j ] == '1' ) :			    		    if str [ j ] == '1' :			  
      for ( int j = i + 1 ;				      			  res = res + 1				    			res += 1				  
      str [ j ] != '\0' ;				      	  return res						    	return res						  
      j ++ ) if ( str [ j ] == '1' ) res ++ ;		      								    								  
    }							      								    								  
  }							      								    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT     DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	    DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT
--							      --							    --								  --
int maxProd ( int n ) {					      def maxProd ( n ) :					    def maxProd ( n ) :						  script_not_found : None
  if ( n == 0 || n == 1 ) return 0 ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  int max_val = 0 ;					      	      return 0						    	    return 0						  
  for ( int i = 1 ;					      	  max_val = 0						    	maxVal = 0						  
  i < n ;						      	  for i in range ( 1 , n - 1 ) :			    	for i in range ( 1 , n ) :				  
  i ++ ) max_val = max ( max_val , i * ( n - i ) , maxProd (  	      max_val = max ( max_val , max ( i * ( n - i ) , maxPr 	    maxVal = max ( maxVal , i * ( n - i ) , maxProd ( n - 
  return max_val ;					      	  return max_val					    	return maxVal						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			      FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			    FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			  FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE
--							      --							    --								  --
int dayofweek ( int d , int m , int y ) {		      def dayofweek ( d , m , y ) :				    def dayofweek ( d , m , y ) :				  script_not_found : None
  static int t [ ] = {					      	  t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]	    	t = [ 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ]	  
    0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 }	      	  y -= m < 3						    	y -= m < 3						  
    ;							      	  return ( ( y + int ( y / 4 ) - int ( y / 100 ) + int ( y  	return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  
    y -= m < 3 ;					      								    								  
    return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		      MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		    MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING		  MAXIMUM_NUMBER_CHARACTERS_TWO_CHARACTER_STRING
--							      --							    --								  --
int maximumChars ( string & str ) {			      def maximumChars ( str ) :				    def maximumChars ( str ) :					  success : None
  int n = str . length ( ) ;				      	  n = len ( str )					    	n = len ( str )						  
  int res = - 1 ;					      	  res = - 1						    	res = - 1						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  if ( str [ i ] == str [ j ] ) :		    		if str [ i ] == str [ j ] :			  
  j < n ;						      		      res = max ( res , abs ( j - i - 1 ) )	    		    res = max ( res , abs ( j - i - 1 ) )	  
  j ++ ) if ( str [ i ] == str [ j ] ) res = max ( res , abs  	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
int ceilSearch ( int arr [ ] , int low , int high , int x ) { def ceilSearch ( arr , low , high , x ) :			    def ceil_search ( arr , low , high , x ) :			  failure : #Results: 9, 10
  int i ;						      	  if x <= arr [ low ] :					    	i = None						  
  if ( x <= arr [ low ] ) return low ;			      	      return low					    	if x <= arr [ low ] :					  
  for ( i = low ;					      	  i = low						    	    return low						  
  i < high ;						      	  for i in range ( high ) :				    	for i in range ( low , high ) :				  
  i ++ ) {						      	      if arr [ i ] == x :				    	    if arr [ i ] == x :					  
    if ( arr [ i ] == x ) return i ;			      		  return i					    		return i					  
    if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; 	      if arr [ i ] < x and arr [ i + 1 ] >= x :		    	    if arr [ i ] < x and arr [ i + 1 ] >= x :		  
  }							      		  return i + 1					    		return i + 1					  
  return - 1 ;						      	  return - 1						    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
