========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
int areaSquare ( int side ) {				      def areaSquare ( side ) :					    def area_square ( side ) :					  success : None
  int area = side * side ;				      	  area = side * side					    	area = side * side					  
  return area ;						      	  return area						    	return area						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
int intersection ( int n ) {				      def intersection ( n ) :					    def intersection ( n ) :					  success : identical to gold
  return n * ( n - 1 ) ;				      	  return n * ( n - 1 )					    	return n * ( n - 1 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
int fun ( unsigned int n ) {				      def fun ( n ) :						    def fun ( n ) :						  success : identical to gold
  return n & ( n - 1 ) ;				      	  return n & ( n - 1 )					    	return n & ( n - 1 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CASSINIS_IDENTITY					      CASSINIS_IDENTITY						    CASSINIS_IDENTITY						  CASSINIS_IDENTITY
--							      --							    --								  --
int cassini ( int n ) {					      def cassini ( n ) :					    def cassini ( n ) :						  failure : #Results: 0, 10
  return ( n & 1 ) ? - 1 : 1 ;				      	  return - 1 if ( n & 1 ) else 1			    	return ( n & 1 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
int hexagonalNum ( int n ) {				      def hexagonalNum ( n ) :					    def hexagonalNum ( n ) :					  failure : #Results: 0, 10
  return n * ( 2 * n - 1 ) ;				      	  return n * ( 2 * n - 1 )				    	return n * ( 2 ** n - 1 )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
int addOne ( int x ) {					      def addOne ( x ) :					    def addOne ( x ) :						  success : identical to gold
  return ( - ( ~ x ) ) ;				      	  return ( - ( ~ x ) )					    	return ( - ( ~ x ) )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
double circumference ( double r ) {			      def circumference ( r ) :					    def circumference ( r ) :					  script_not_found : None
  double cir = 2 * PI * r ;				      	  return ( 2 * PI * r )					    	cir = 2 * PI * r					  
  return cir ;						      								    	return cir						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUMSCRIBED_CIRCLE			      AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				    AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				  AREA_SQUARE_CIRCUMSCRIBED_CIRCLE
--							      --							    --								  --
int find_Area ( int r ) {				      def find_Area ( r ) :					    def find_Area ( r ) :					  success : None
  return ( 2 * r * r ) ;				      	  return ( 2 * r * r )					    	return ( 2 * r ** 2 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
bool check ( int n ) {					      def check ( n ) :						    def check ( n ) :						  success : identical to gold
  return 1162261467 % n == 0 ;				      	  return 1162261467 % n == 0				    	return 1162261467 % n == 0				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_HALVES_SORTED				      SORT_ARRAY_TWO_HALVES_SORTED				    SORT_ARRAY_TWO_HALVES_SORTED				  SORT_ARRAY_TWO_HALVES_SORTED
--							      --							    --								  --
void mergeTwoHalf ( int A [ ] , int n ) {		      def mergeTwoHalf ( A , n ) :				    def mergeTwoHalf ( A , n ) :				  failure : #Results: 5, 10
  sort ( A , A + n ) ;					      	  A.sort ( )						    	return sorted ( A )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
bool isEven ( int n ) {					      def isEven ( n ) :					    def isEven ( n ) :						  success : identical to gold
  return ( n % 2 == 0 ) ;				      	  return ( n % 2 == 0 )					    	return ( n % 2 == 0 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
int largest ( int arr [ ] , int n ) {			      def largest ( arr , n ) :					    def largest ( arr , n ) :					  error :   File "dump/transcoder/eval/cpp_python/mo
  return * max_element ( arr , arr + n ) ;		      	  return max ( arr )					    	return * max_element ( arr , n )			  del_1/transcoder_eval/20642414/eval_scripts/cpp_sa
}							      								    								  -python_sa.test/C_PROGRAM_FIND_LARGEST_ELEMENT_ARR
							      								    								  AY_1.py", line 22	return * max_element ( arr ,
							      								    								   n )		  ^ SyntaxError: invalid syntax
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
int height ( int N ) {					      def height ( N ) :					    def height ( N ) :						  success : None
  return ceil ( log2 ( N + 1 ) ) - 1 ;			      	  return math.ceil ( math.log2 ( N + 1 ) ) - 1		    	return ceil ( log2 ( N + 1 ) ) - 1			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
int numberOfSticks ( int x ) {				      def numberOfSticks ( x ) :				    def numberOfSticks ( x ) :					  success : identical to gold
  return ( 3 * x * ( x + 1 ) ) / 2 ;			      	  return ( 3 * x * ( x + 1 ) ) / 2			    	return ( 3 * x * ( x + 1 ) ) / 2			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
int summingSeries ( long n ) {				      def summingSeries ( n ) :					    def summing_series ( n ) :					  success : None
  return pow ( n , 2 ) ;				      	  return math.pow ( n , 2 )				    	return math.pow ( n , 2 )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
int pentagonalNum ( int n ) {				      def pentagonalNum ( n ) :					    def pentagonalNum ( n ) :					  success : None
  return ( 3 * n * n - n ) / 2 ;			      	  return ( 3 * n * n - n ) / 2				    	return ( 3 * n ** 2 - n ) / 2				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
bool isEven ( int n ) {					      def isEven ( n ) :					    def isEven ( n ) :						  success : identical to gold
  return ( ! ( n & 1 ) ) ;				      	  return ( not ( n & 1 ) )				    	return ( not ( n & 1 ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
int binomialCoeffSum ( int n ) {			      def binomialCoeffSum ( n ) :				    def binomial_coeff_sum ( n ) :				  success : None
  return ( 1 << n ) ;					      	  return ( 1 << n )					    	return ( 1 << n )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
int rangeGCD ( int n , int m ) {			      def rangeGCD ( n , m ) :					    def rangeGCD ( n , m ) :					  failure : #Results: 0, 10
  return ( n == m ) ? n : 1 ;				      	  return n if ( n == m ) else 1				    	return ( n , m )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
int power ( int n ) {					      def power ( n ) :						    def power ( n ) :						  timeout : None
  if ( n == 1 ) return 2 ;				      	  if n == 1 :						    	if n == 1 :						  
  return 2 * power ( n - 1 ) ;				      	      return 2						    	    return 2						  
}							      	  return 2 * power ( n - 1 )				    	return 2 ** power ( n - 1 )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
int compute_average ( int a , int b ) {			      def compute_average ( a , b ) :				    def compute_average ( a , b ) :				  failure : #Results: 3, 10
  return ( a + b ) / 2 ;				      	  return floor ( ( a + b ) / 2 )			    	return ( a + b ) / 2					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
int Circumference ( int a ) {				      def Circumference ( a ) :					    def Circumference ( a ) :					  success : None
  return 4 * a ;					      	  return ( 4 * a )					    	return 4 * a						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_AN_INTEGER_WITH_3_5				      MULTIPLY_AN_INTEGER_WITH_3_5				    MULTIPLY_AN_INTEGER_WITH_3_5				  MULTIPLY_AN_INTEGER_WITH_3_5
--							      --							    --								  --
int multiplyWith3Point5 ( int x ) {			      def multiplyWith3Point5 ( x ) :				    def multiplyWith3Point5 ( x ) :				  success : identical to gold
  return ( x << 1 ) + x + ( x >> 1 ) ;			      	  return ( x << 1 ) + x + ( x >> 1 )			    	return ( x << 1 ) + x + ( x >> 1 )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
float slope ( float x1 , float y1 , float x2 , float y2 ) {   def slope ( x1 , y1 , x2 , y2 ) :				    def slope ( x1 , y1 , x2 , y2 ) :				  success : None
  return ( y2 - y1 ) / ( x2 - x1 ) ;			      	  return ( float ) ( y2 - y1 ) / ( x2 - x1 )		    	return ( y2 - y1 ) / ( x2 - x1 )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  if ( n == 0 ) return 1 ;				      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 0 :						  
  return n * factorial ( n - 1 ) ;			      								    	    return 1						  
}							      								    	return n * factorial ( n - 1 )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
bool oppositeSigns ( int x , int y ) {			      def oppositeSigns ( x , y ) :				    def oppositeSigns ( x , y ) :				  success : identical to gold
  return ( ( x ^ y ) < 0 ) ;				      	  return ( ( x ^ y ) < 0 )				    	return ( ( x ^ y ) < 0 )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
int swapNibbles ( int x ) {				      def swapNibbles ( x ) :					    def swapNibbles ( x ) :					  success : identical to gold
  return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	      	  return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	    	return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
int countNonEmptySubstr ( string str ) {		      def countNonEmptySubstr ( str ) :				    def countNonEmptySubstr ( str ) :				  success : None
  int n = str . length ( ) ;				      	  n = len ( str )					    	n = len ( str )						  
  return n * ( n + 1 ) / 2 ;				      	  return int ( n * ( n + 1 ) / 2 )			    	return n * ( n + 1 ) // 2				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
unsigned int getModulo ( unsigned int n , unsigned int d ) {  def getModulo ( n , d ) :					    def getModulo ( n , d ) :					  success : identical to gold
  return ( n & ( d - 1 ) ) ;				      	  return ( n & ( d - 1 ) )				    	return ( n & ( d - 1 ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
int nthTerm ( int n ) {					      def nthTerm ( n ) :					    def nthTerm ( n ) :						  success : None
  return ( n * n ) + ( n * n * n ) ;			      	  return ( n * n ) + ( n * n * n )			    	return ( n ** 2 ) + ( n ** 2 * n )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10
--							      --							    --								  --
bool isMultipleOf10 ( int n ) {				      def isMultipleOf10 ( n ) :				    def isMultipleOf10 ( n ) :					  success : identical to gold
  return ( n % 15 == 0 ) ;				      	  return ( n % 15 == 0 )				    	return ( n % 15 == 0 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  if ( n == 0 ) return 1 ;				      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	if n == 0 :						  
  return n * factorial ( n - 1 ) ;			      								    	    return 1						  
}							      								    	return n * factorial ( n - 1 )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS_1				      BREAK_NUMBER_THREE_PARTS_1				    BREAK_NUMBER_THREE_PARTS_1					  BREAK_NUMBER_THREE_PARTS_1
--							      --							    --								  --
ll count_of_ways ( ll n ) {				      def count_of_ways ( n ) :					    def count_of_ways ( n ) :					  success : None
  ll count ;						      	  count = 0						    	count = 0						  
  count = ( n + 1 ) * ( n + 2 ) / 2 ;			      	  count = ( n + 1 ) * ( n + 2 ) // 2			    	count = ( n + 1 ) * ( n + 2 ) / 2			  
  return count ;					      	  return count						    	return count						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
int gcd ( int a , int b ) {				      def gcd ( a , b ) :					    def gcd ( a , b ) :						  success : identical to gold
  if ( a == 0 ) return b ;				      	  if a == 0 :						    	if a == 0 :						  
  return gcd ( b % a , a ) ;				      	      return b						    	    return b						  
}							      	  return gcd ( b % a , a )				    	return gcd ( b % a , a )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
int rectCount ( int n , int m ) {			      def rectCount ( n , m ) :					    def rectCount ( n , m ) :					  success : None
  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;	      	  return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4		    	return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
float volumeOfEllipsoid ( float r1 , float r2 , float r3 ) {  def volumeOfEllipsoid ( r1 , r2 , r3 ) :			    def volumeOfEllipsoid ( r1 , r2 , r3 ) :			  success : None
  float pi = 3.14 ;					      	  return 1.33 * math.pi * r1 * r2 * r3			    	pi = 3.14						  
  return 1.33 * pi * r1 * r2 * r3 ;			      								    	return 1.33 * pi * r1 * r2 * r3				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
int getRemainder ( int num , int divisor ) {		      def getRemainder ( num , divisor ) :			    def getRemainder ( num , divisor ) :			  failure : #Results: 1, 10
  return ( num - divisor * ( num / divisor ) ) ;	      	  return ( num - divisor * ( num // divisor ) )		    	return ( num - divisor * ( num / divisor ) )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			      PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES
--							      --							    --								  --
int findMaximumPieces ( int n ) {			      def findMaximumPieces ( n ) :				    def findMaximumPieces ( n ) :				  success : None
  return 1 + n * ( n + 1 ) / 2 ;			      	  return int ( 1 + n * ( n + 1 ) / 2 )			    	return 1 + n * ( n + 1 ) / 2				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
int evenbinomialCoeffSum ( int n ) {			      def evenbinomialCoeffSum ( n ) :				    def evenbinomial_coeff_sum ( n ) :				  success : None
  return ( 1 << ( n - 1 ) ) ;				      	  return ( 1 << ( n - 1 ) )				    	return ( 1 << ( n - 1 ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE				      LONGEST_INCREASING_SUBSEQUENCE				    LONGEST_INCREASING_SUBSEQUENCE				  LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
int lis ( int arr [ ] , int n ) {			      def lis ( arr ) :						    def lis ( arr , n ) :					  script_not_found : None
  int max = 1 ;						      	  global maximum					    	max = 1							  
  _lis ( arr , n , & max ) ;				      	  n = len ( arr )					    	_lis ( arr , n , [ max ] )				  
  return max ;						      	  maximum = 1						    	return max						  
}							      	  _lis ( arr , n )					    								  
							      	  return maximum					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
double areaOctagon ( double side ) {			      def areaOctagon ( side ) :				    def areaOctagon ( side ) :					  success : None
  return ( float ) ( 2 * ( 1 + sqrt ( 2 ) ) * side * side ) ; 	  return ( 2 * ( 1 + ( math.sqrt ( 2 ) ) ) * side * side )  	return float ( 2 * ( 1 + math.sqrt ( 2 ) ) * side ** 2 )  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
double surface_area_octahedron ( double side ) {	      def surface_area_octahedron ( side ) :			    def surface_area_octahedron ( side ) :			  success : None
  return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) ) ;	      	  return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )	    	return ( 2 * ( math.sqrt ( 3 ) ) * ( side ** 2 ) )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
void sortit ( int arr [ ] , int n ) {			      def sortit ( arr , n ) :					    def sortit ( arr , n ) :					  success : identical to gold
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      arr [ i ] = i + 1					    	    arr [ i ] = i + 1					  
  i ++ ) {						      								    								  
    arr [ i ] = i + 1 ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
long long int findSum ( int n ) {			      def findSum ( n ) :					    def findSum ( n ) :						  success : identical to gold
  return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;     	  return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24	    	return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
double vol_of_octahedron ( double side ) {		      def vol_of_octahedron ( side ) :				    def vol_of_octahedron ( side ) :				  failure : #Results: 0, 10
  return ( ( side * side * side ) * ( sqrt ( 2 ) / 3 ) ) ;    	  return ( ( side * side * side ) * ( math.sqrt ( 2 ) / 3 ) 	return ( ( side ** 2 ) * ( sqrt ( 2 ) / 3 ) )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
int Resources ( int process , int need ) {		      def Resources ( process , need ) :			    def Resources ( process , need ) :				  success : None
  int minResources = 0 ;				      	  minResources = 0					    	min_resources = 0					  
  minResources = process * ( need - 1 ) + 1 ;		      	  minResources = process * ( need - 1 ) + 1		    	min_resources = process * ( need - 1 ) + 1		  
  return minResources ;					      	  return minResources					    	return min_resources					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
double procal ( int n ) {				      def procal ( n ) :					    def procal ( n ) :						  success : None
  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;	      	  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )		    	return ( 3.0 * n ) / ( 4.0 * ( n ** 2 ) - 1 )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
int cost ( int a [ ] , int n ) {			      def cost ( a , n ) :					    def cost ( a , n ) :					  error :   File "dump/transcoder/eval/cpp_python/mo
  return ( n - 1 ) * ( * min_element ( a , a + n ) ) ;	      	  return ( ( n - 1 ) * min ( a ) )			    	return ( n - 1 ) * ( * min_element ( a , n ) )		  del_1/transcoder_eval/20642414/eval_scripts/cpp_sa
}							      								    								  -python_sa.test/MINIMUM_COST_MAKE_ARRAY_SIZE_1_REM
							      								    								  OVING_LARGER_PAIRS.py", line 22     return ( n - 1
							      								    								   ) * ( * min_element ( a , n ) )
							      								    								  	 ^ SyntaxError: can't use starred expression
							      								    								   here
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
int bool isPowerOfTwo ( int x ) {			      def isPowerOfTwo ( x ) :					    def isPowerOfTwo ( x ) :					  success : None
  return x && ( ! ( x & ( x - 1 ) ) ) ;			      	  return ( x and ( not ( x & ( x - 1 ) ) ) )		    	return x and ( not ( x & ( x - 1 ) ) )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      def factorial ( n ) :					    def factorial ( n ) :					  success : None
  int res = 1 , i ;					      	  return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 	res , i = 1 , 0						  
  for ( i = 2 ;						      								    	for i in range ( 2 , n + 1 ) :				  
  i <= n ;						      								    	    res *= i						  
  i ++ ) res *= i ;					      								    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
int findRepeating ( int arr [ ] , int n ) {		      def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  success : None
  return accumulate ( arr , arr + n , 0 ) - ( ( n - 1 ) * n / 	  return sum ( arr ) - ( ( ( n - 1 ) * n ) // 2 )	    	return sum ( arr ) - ( ( n - 1 ) * n / 2 )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
void reverse ( char str [ ] ) {				      def reverse ( string ) :					    def reverse ( str ) :					  error : Traceback (most recent call last):   File
  int n = strlen ( str ) , i ;				      	  string = string [ : : - 1 ]				    	n , i = len ( str ) , 0					  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( i = 0 ;						      	  return string						    	for i in range ( n // 2 ) :				  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  i < n / 2 ;						      								    	    swap ( str [ i ] , str [ n - i - 1 ] )		  /STACK_SET_3_REVERSE_STRING_USING_STACK.py", line
  i ++ ) swap ( & str [ i ] , & str [ n - i - 1 ] ) ;	      								    								  43, in <module>     if f_filled(*parameters_set) =
}							      								    								  = f_gold(*parameters_set):   File "dump/transcoder
							      								    								  /eval/cpp_python/model_1/transcoder_eval/20642414/
							      								    								  eval_scripts/cpp_sa-python_sa.test/STACK_SET_3_REV
							      								    								  ERSE_STRING_USING_STACK.py", line 25, in f_filled
							      								    								      swap ( str [ i ] , str [ n - i - 1 ] ) NameErr
							      								    								  or: name 'swap' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
int assignValue ( int a , int b , bool x ) {		      def assignValue ( a , b , x ) :				    def assign_value ( a , b , x ) :				  script_not_found : None
  int arr [ ] = {					      	  arr = [ a , b ]					    	arr = [ a , b ]						  
    a , b }						      	  return ( arr [ x ] )					    	return ( arr [ x ] )					  
    ;							      								    								  
    return ( arr [ x ] ) ;				      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
public : unsigned int countSetBits ( int n ) {		      def countSetBits ( n ) :					    def count_set_bits ( n ) :					  success : None
  unsigned int count = 0 ;				      	  count = 0						    	count = 0						  
  while ( n ) {						      	  while ( n ) :						    	while n :						  
    n &= ( n - 1 ) ;					      	      n &= ( n - 1 )					    	    n &= ( n - 1 )					  
    count ++ ;						      	      count += 1					    	    count += 1						  
  }							      	  return count						    	return count						  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
void bin ( unsigned n ) {				      def bin ( n ) :						    def bin ( n ) :						  script_not_found : None
  if ( n > 1 ) bin ( n >> 1 ) ;				      	  if ( n > 1 ) :					    	if n > 1 :						  
  printf ( "%d" , n & 1 ) ;				      	      bin ( n >> 1 )					    	    return bin ( n >> 1 )				  
}							      	  print ( n & 1 , end = "" )				    	return ''.join ( [ chr ( n & 1 ) for n in range ( 256 ) ] 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
float sumOfSeries ( int n ) {				      def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  success : None
  return ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ;	      	  return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) )	    	return ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
long long int calculateSum ( int n ) {			      def calculateSum ( n ) :					    def calculateSum ( n ) :					  success : identical to gold
  long long int sum = 0 ;				      	  sum = 0						    	sum = 0							  
  sum = 1 << n ;					      	  sum = 1 << n						    	sum = 1 << n						  
  return ( sum - 1 ) ;					      	  return ( sum - 1 )					    	return ( sum - 1 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
int countSetBits ( int n ) {				      def countSetBits ( n ) :					    def countSetBits ( n ) :					  success : None
  if ( n == 0 ) return 0 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  else return ( n & 1 ) + countSetBits ( n >> 1 ) ;	      	      return 0						    	    return 0						  
}							      	  else :						    	else :							  
							      	      return ( n & 1 ) + countSetBits ( n >> 1 )	    	    return ( n & 1 ) + countSetBits ( n >> 1 )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
int countSetBits ( int n ) {				      def countSetBits ( n ) :					    def countSetBits ( n ) :					  success : None
  if ( n == 0 ) return 0 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  else return 1 + countSetBits ( n & ( n - 1 ) ) ;	      	      return 0						    	    return 0						  
}							      	  else :						    	else :							  
							      	      return 1 + countSetBits ( n & ( n - 1 ) )		    	    return 1 + countSetBits ( n & ( n - 1 ) )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
int kthSmallest ( int arr [ ] , int n , int k ) {	      def kthSmallest ( arr , n , k ) :				    def kthSmallest ( arr , n , k ) :				  script_not_found : None
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  return arr [ k - 1 ] ;				      	  return arr [ k - 1 ]					    	return arr [ k - 1 ]					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE      DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
int lis ( int arr [ ] , int n ) {			      def lis ( arr ) :						    def lis ( arr , n ) :					  script_not_found : None
  int max = 1 ;						      	  global maximum					    	max = 1							  
  _lis ( arr , n , & max ) ;				      	  n = len ( arr )					    	_lis ( arr , n , [ max ] )				  
  return max ;						      	  maximum = 1						    	return max						  
}							      	  _lis ( arr , n )					    								  
							      	  return maximum					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I
--							      --							    --								  --
float getArea ( int a ) {				      def getArea ( a ) :					    def getArea ( a ) :						  success : None
  float area = ( M_PI * a * a ) / 4.0 ;			      	  area = ( math.pi * a * a ) / 4			    	area = ( math.pi * a ** 2 ) / 4.0			  
  return area ;						      	  return area						    	return area						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
string repeat ( string s , int n ) {			      def repeat ( s , n ) :					    def repeat ( s , n ) :					  success : identical to gold
  string s1 = s ;					      	  s1 = s						    	s1 = s							  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  i < n ;						      	      s += s1						    	    s += s1						  
  i ++ ) s += s1 ;					      	  return s						    	return s						  
  return s ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
long long int yMod ( long long int y , long long int x ) {    def yMod ( y , x ) :					    def yMod ( y , x ) :					  success : None
  if ( log2 ( y ) < x ) return y ;			      	  return ( y % pow ( 2 , x ) )				    	if log2 ( y ) < x :					  
  if ( x > 63 ) return y ;				      								    	    return y						  
  return ( y % ( 1 << x ) ) ;				      								    	if x > 63 :						  
}							      								    	    return y						  
							      								    	return ( y % ( 1 << x ) )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
int minSum ( int A [ ] , int n ) {			      def minSum ( A ) :					    def minSum ( A , n ) :					  script_not_found : None
  int min_val = * min_element ( A , A + n ) ;		      	  min_val = min ( A ) ;					    	min_val = * min_element ( A , n )			  
  return ( min_val * ( n - 1 ) ) ;			      	  return min_val * ( len ( A ) - 1 )			    	return ( min_val * ( n - 1 ) )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
void reverse ( string str ) {				      def reverse ( string ) :					    def reverse ( s ) :						  script_not_found : None
  if ( str . size ( ) == 0 ) {				      	  if len ( string ) == 0 :				    	if len ( s ) == 0 :					  
    return ;						      	      return						    	    return s						  
  }							      	  temp = string [ 0 ]					    	s = s [ 1 : ]						  
  reverse ( str . substr ( 1 ) ) ;			      	  reverse ( string [ 1 : ] )				    	print ( s [ 0 ] )					  
  cout << str [ 0 ] ;					      	  print ( temp , end = '' )				    	return s						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
int addOne ( int x ) {					      def addOne ( x ) :					    def addOne ( x ) :						  success : None
  int m = 1 ;						      	  m = 1							    	m = 1							  
  while ( x & m ) {					      	  while ( x & m ) :					    	while x & m :						  
    x = x ^ m ;						      	      x = x ^ m						    	    x = x ^ m						  
    m <<= 1 ;						      	      m <<= 1						    	    m <<= 1						  
  }							      	  x = x ^ m						    	x = x ^ m						  
  x = x ^ m ;						      	  return x						    	return x						  
  return x ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  script_not_found : None
  int i ;						      	  for i in range ( 0 , n ) :				    	i = 0							  
  for ( i = 0 ;						      	      if ( arr [ i ] == x ) :				    	for i in range ( n ) :					  
  i < n ;						      		  return i					    	    if arr [ i ] == x :					  
  i ++ ) if ( arr [ i ] == x ) return i ;		      	  return - 1						    		return i					  
  return - 1 ;						      								    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
int maxSquare ( int b , int m ) {			      def maxSquare ( b , m ) :					    def maxSquare ( b , m ) :					  failure : #Results: 0, 10
  return ( b / m - 1 ) * ( b / m ) / 2 ;		      	  return ( b / m - 1 ) * ( b / m ) / 2			    	return ( b / m - 1 ) ** 2 / 2				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
bool isNumber ( string s ) {				      def isNumber ( s ) :					    def isNumber ( s ) :					  failure : #Results: 6, 10
  for ( int i = 0 ;					      	  for i in range ( len ( s ) ) :			    	for c in s :						  
  i < s . length ( ) ;					      	      if s [ i ].isdigit ( ) != True :			    	    if ord ( c ) == 0 :					  
  i ++ ) if ( isdigit ( s [ i ] ) == false ) return false ;   		  return False					    		return False					  
  return true ;						      	  return True						    	return True						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1
--							      --							    --								  --
void printArray ( int * a , int n ) {			      def printArray ( a , n ) :				    def printArray ( a , n ) :					  script_not_found : None
  for ( int i = 0 ;					      	  for i in a :						    	for i in range ( n ) :					  
  i < n ;						      	      print ( i , end = " " )				    	    print ( a [ i ] , end = ' ' )			  
  i ++ ) cout << a [ i ] << " " ;			      	  print ( )						    	print ( )						  
  cout << endl ;					      								    	return							  
  return ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
float findArea ( float a ) {				      def findArea ( a ) :					    def findArea ( a ) :					  success : None
  float area ;						      	  area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a  	area = 0						  
  area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a )  	  return area						    	area = ( math.sqrt ( 5 * ( 5 + 2 * ( math.sqrt ( 5 ) ) )  
  return area ;						      								    	return area						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
void printSubStr ( string str , int low , int high ) {	      def printSubStr ( st , low , high ) :			    def printSubStr ( str , low , high ) :			  script_not_found : None
  for ( int i = low ;					      	  sys.stdout.write ( st [ low : high + 1 ] )		    	for i in range ( low , high + 1 ) :			  
  i <= high ;						      	  sys.stdout.flush ( )					    	    print ( str [ i ] )					  
  ++ i ) cout << str [ i ] ;				      	  return ''						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING      COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
unsigned int getAbs ( int n ) {				      def getAbs ( n ) :					    def getAbs ( n ) :						  script_not_found : None
  int const mask = n >> ( sizeof ( int ) * CHARBIT - 1 ) ;    	  mask = n >> ( SIZE_INT * CHARBIT - 1 )		    	mask = n >> ( len ( CHARBIT ) * CHARBIT - 1 )		  
  return ( ( n + mask ) ^ mask ) ;			      	  return ( ( n + mask ) ^ mask )			    	return ( ( n + mask ) ^ mask )				  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
int countStr ( int n ) {				      def countStr ( n ) :					    def countStr ( n ) :					  success : None
  return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;      	  return ( 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) // 2 ) ) 	return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		  HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
int turnOffK ( int n , int k ) {			      def turnOffK ( n , k ) :					    def turnOffK ( n , k ) :					  success : None
  if ( k <= 0 ) return n ;				      	  if ( k <= 0 ) :					    	if k <= 0 :						  
  return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			      	      return n						    	    return n						  
}							      	  return ( n & ~ ( 1 << ( k - 1 ) ) )			    	return ( n & ~ ( 1 << ( k - 1 ) ) )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES
--							      --							    --								  --
int fib ( int n ) {					      def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
  if ( n <= 1 ) return n ;				      	  if ( n <= 1 ) :					    	if n <= 1 :						  
  return fib ( n - 1 ) + fib ( n - 2 ) ;		      	      return n						    	    return n						  
}							      	  return fib ( n - 1 ) + fib ( n - 2 )			    	return fib ( n - 1 ) + fib ( n - 2 )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
int getOddOccurrence ( int ar [ ] , int ar_size ) {	      def getOddOccurrence ( arr ) :				    def getOddOccurrence ( ar , ar_size ) :			  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for element in arr :					    	for i in range ( ar_size ) :				  
  i < ar_size ;						      	      res = res ^ element				    	    res = res ^ ar [ i ]				  
  i ++ ) res = res ^ ar [ i ] ;				      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
int countSquares ( int a , int b ) {			      def CountSquares ( a , b ) :				    def countSquares ( a , b ) :				  script_not_found : None
  return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 ) ; 	  return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 	return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( mat 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
int divisorSum ( int n ) {				      def divisorSum ( n ) :					    def divisor_sum ( n ) :					  failure : #Results: 0, 10
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      sum += int ( n / i ) * i				    	    sum += ( n / i ) ** i				  
  ++ i ) sum += ( n / i ) * i ;				      	  return int ( sum )					    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
int maxTripletSum ( int arr [ ] , int n ) {		      def maxTripletSum ( arr , n ) :				    def maxTripletSum ( arr , n ) :				  success : None
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;      	  return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] )  	return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ]	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_LENGTH_PALINDROME				      NTH_EVEN_LENGTH_PALINDROME				    NTH_EVEN_LENGTH_PALINDROME					  NTH_EVEN_LENGTH_PALINDROME
--							      --							    --								  --
string evenlength ( string n ) {			      def evenlength ( n ) :					    def evenlength ( n ) :					  success : identical to gold
  string res = n ;					      	  res = n						    	res = n							  
  for ( int j = n . length ( ) - 1 ;			      	  for j in range ( len ( n ) - 1 , - 1 , - 1 ) :	    	for j in range ( len ( n ) - 1 , - 1 , - 1 ) :		  
  j >= 0 ;						      	      res += n [ j ]					    	    res += n [ j ]					  
  -- j ) res += n [ j ] ;				      	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
int findSum ( int N , int K ) {				      def findSum ( N , K ) :					    def findSum ( N , K ) :					  success : identical to gold
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  for ( int i = 1 ;					      	  for i in range ( 1 , N + 1 ) :			    	for i in range ( 1 , N + 1 ) :				  
  i <= N ;						      	      ans += ( i % K )					    	    ans += ( i % K )					  
  i ++ ) ans += ( i % K ) ;				      	  return ans						    	return ans						  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
bool isPrime ( int n ) {				      def isPrime ( n ) :					    def isPrime ( n ) :						  success : None
  if ( n <= 1 ) return false ;				      	  if ( n <= 1 ) :					    	if n <= 1 :						  
  for ( int i = 2 ;					      	      return False					    	    return False					  
  i < n ;						      	  for i in range ( 2 , n ) :				    	for i in range ( 2 , n ) :				  
  i ++ ) if ( n % i == 0 ) return false ;		      	      if ( n % i == 0 ) :				    	    if n % i == 0 :					  
  return true ;						      		  return False					    		return False					  
}							      	  return True						    	return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
bool isPossible ( string str , int n ) {		      def isPossible ( str , n ) :				    def ispossible ( str , n ) :				  failure : #Results: 6, 10
  int len = str . length ( ) ;				      	  l = len ( str )					    	try :							  
  if ( len >= n ) return true ;				      	  if ( l >= n ) :					    	    len ( str )						  
  return false ;					      	      return True					    	except :						  
}							      	  return False						    	    return True						  
							      								    	return False						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
void printFun ( int test ) {				      def printFun ( test ) :					    def printFun ( test ) :					  script_not_found : None
  if ( test < 1 ) return ;				      	  if ( test < 1 ) :					    	if test < 1 :						  
  else {						      	      return						    	    return						  
    cout << test << " " ;				      	  else :						    	else :							  
    printFun ( test - 1 ) ;				      	      print ( test , end = " " )			    	    print ( test , end = ' ' )				  
    cout << test << " " ;				      	      printFun ( test - 1 )				    	    printFun ( test - 1 )				  
    return ;						      	      print ( test , end = " " )			    	    print ( test , end = ' ' )				  
  }							      	      return						    	    return						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
int sequence ( int n ) {				      def sequence ( n ) :					    def sequence ( n ) :					  script_not_found : None
  if ( n == 1 || n == 2 ) return 1 ;			      	  if n == 1 or n == 2 :					    	if n == 1 or n == 2 :					  
  else return sequence ( sequence ( n - 1 ) ) + sequence ( n  	      return 1						    	    return 1						  
}							      	  else :						    	else :							  
							      	      return sequence ( sequence ( n - 1 ) ) + sequence ( n 	    return sequence ( sequence ( n - 1 ) ) + sequence ( n 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  success : None
  unsigned int p = 1 ;					      	  p = 1							    	p = 1							  
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and not ( n & ( n - 1 ) ) :			  
  while ( p < n ) p <<= 1 ;				      	      return n						    	    return n						  
  return p ;						      	  while ( p < n ) :					    	while p < n :						  
}							      	      p <<= 1						    	    p <<= 1						  
							      	  return p						    	return p						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
int leonardo ( int n ) {				      def leonardo ( n ) :					    def leonardo ( n ) :					  script_not_found : None
  if ( n == 0 || n == 1 ) return 1 ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ;	      	      return 1						    	    return 1						  
}							      	  return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 )    	return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1	  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  success : identical to gold
  n -- ;						      	  n -= 1						    	n -= 1							  
  n |= n >> 1 ;						      	  n |= n >> 1						    	n |= n >> 1						  
  n |= n >> 2 ;						      	  n |= n >> 2						    	n |= n >> 2						  
  n |= n >> 4 ;						      	  n |= n >> 4						    	n |= n >> 4						  
  n |= n >> 8 ;						      	  n |= n >> 8						    	n |= n >> 8						  
  n |= n >> 16 ;					      	  n |= n >> 16						    	n |= n >> 16						  
  n ++ ;						      	  n += 1						    	n += 1							  
  return n ;						      	  return n						    	return n						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
double vol_of_dodecahedron ( int side ) {		      def vol_of_dodecahedron ( side ) :			    def vol_of_dodecahedron ( side ) :				  success : identical to gold
  return ( ( ( 15 + ( 7 * ( sqrt ( 5 ) ) ) ) / 4 ) * ( pow (  	  return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 	return ( ( ( 15 + ( 7 * ( math.sqrt ( 5 ) ) ) ) / 4 ) * ( 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
int PowerOFPINnfactorial ( int n , int p ) {		      def PowerOFPINnfactorial ( n , p ) :			    def PowerOFPINnfactorial ( n , p ) :			  failure : #Results: 2, 10
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  int temp = p ;					      	  temp = p						    	temp = p						  
  while ( temp <= n ) {					      	  while ( temp <= n ) :					    	while temp <= n :					  
    ans += n / temp ;					      	      ans += n / temp					    	    ans += n // temp					  
    temp = temp * p ;					      	      temp = temp * p					    	    temp = temp * p					  
  }							      	  return ans						    	return ans						  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
int find ( int n , int k ) {				      def find ( n , k ) :					    def find ( n , k ) :					  success : None
  if ( n + 1 >= k ) return ( k - 1 ) ;			      	  if ( n + 1 >= k ) :					    	if n + 1 >= k :						  
  else return ( 2 * n + 1 - k ) ;			      	      return ( k - 1 )					    	    return ( k - 1 )					  
}							      	  else :						    	else :							  
							      	      return ( 2 * n + 1 - k )				    	    return ( 2 * n + 1 - k )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
bool isPowerOfFour ( unsigned int n ) {			      def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  success : None
  return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0xAA 	  return ( n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not (  	return n != 0 and ( ( n & ( n - 1 ) ) == 0 ) and not ( n  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
int nswp ( int n ) {					      def nswp ( n ) :						    def nswp ( n ) :						  script_not_found : None
  if ( n == 0 || n == 1 ) return 1 ;			      	  if n == 0 or n == 1 :					    	if n == 0 or n == 1 :					  
  return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		      	      return 1						    	    return 1						  
}							      	  return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		    	return 2 * nswp ( n - 1 ) + nswp ( n - 2 )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
int findTrailingZeros ( int n ) {			      def findTrailingZeros ( n ) :				    def findTrailingZeros ( n ) :				  error : Traceback (most recent call last):   File
  int count = 0 ;					      	  count = 0						    	count = 0						  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int i = 5 ;					      	  i = 5							    	for i in range ( 5 , n // i >= 1 , 1 , 5 ) :		  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  n / i >= 1 ;						      	  while ( n / i >= 1 ) :				    	    count += n // i					  /COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER.py", line
  i *= 5 ) count += n / i ;				      	      count += int ( n / i )				    	return count						  48, in <module>     if f_filled(*parameters_set) =
  return count ;					      	      i *= 5						    								  = f_gold(*parameters_set):   File "dump/transcoder
}							      	  return int ( count )					    								  /eval/cpp_python/model_1/transcoder_eval/20642414/
							      								    								  eval_scripts/cpp_sa-python_sa.test/COUNT_TRAILING_
							      								    								  ZEROES_FACTORIAL_NUMBER.py", line 28, in f_filled
							      								    								      for i in range ( 5 , n // i >= 1 , 1 , 5 ) : U
							      								    								  nboundLocalError: local variable 'i' referenced be
							      								    								  fore assignment
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
int getMissingNo ( int a [ ] , int n ) {		      def getMissingNo ( A ) :					    def getMissingNo ( a , n ) :				  script_not_found : None
  int total = ( n + 1 ) * ( n + 2 ) / 2 ;		      	  n = len ( A )						    	total = ( n + 1 ) * ( n + 2 ) / 2			  
  for ( int i = 0 ;					      	  total = ( n + 1 ) * ( n + 2 ) / 2			    	for i in range ( n ) :					  
  i < n ;						      	  sum_of_A = sum ( A )					    	    total -= a [ i ]					  
  i ++ ) total -= a [ i ] ;				      	  return total - sum_of_A				    	return total						  
  return total ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
int countPaths ( int n , int m ) {			      def countPaths ( n , m ) :				    def countPaths ( n , m ) :					  script_not_found : None
  if ( n == 0 || m == 0 ) return 1 ;			      	  if ( n == 0 or m == 0 ) :				    	if n == 0 or m == 0 :					  
  return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  	      return 1						    	    return 1						  
}							      	  return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  	return ( countPaths ( n - 1 , m ) + countPaths ( n , m -  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
int largestPower ( int n , int p ) {			      def largestPower ( n , p ) :				    def largestPower ( n , p ) :				  script_not_found : None
  int x = 0 ;						      	  x = 0							    	x = 0							  
  while ( n ) {						      	  while n :						    	while n :						  
    n /= p ;						      	      n /= p						    	    n //= p						  
    x += n ;						      	      x += n						    	    x += n						  
  }							      	  return x						    	return x						  
  return x ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
bool checkValidity ( int a , int b , int c ) {		      def checkValidity ( a , b , c ) :				    def checkValidity ( a , b , c ) :				  success : None
  if ( a + b <= c || a + c <= b || b + c <= a ) return false  	  if ( a + b <= c ) or ( a + c <= b ) or ( b + c <= a ) :   	if a + b <= c or a + c <= b or b + c <= a :		  
  else return true ;					      	      return False					    	    return False					  
}							      	  else :						    	else :							  
							      	      return True					    	    return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY	      QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
void leftRotate ( int arr [ ] , int n , int k ) {	      def leftRotate ( arr , n , k ) :				    def left_rotate ( arr , n , k ) :				  script_not_found : None
  for ( int i = k ;					      	  for i in range ( k , k + n ) :			    	for i in range ( k , k + n ) :				  
  i < k + n ;						      	      print ( str ( arr [ i % n ] ) , end = " " )	    	    print ( arr [ i % n ] , end = ' ' )			  
  i ++ ) cout << arr [ i % n ] << " " ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
int findLastIndex ( string & str , char x ) {		      def findLastIndex ( str , x ) :				    def findLastIndex ( str , x ) :				  script_not_found : None
  int index = - 1 ;					      	  index = - 1						    	index = - 1						  
  for ( int i = 0 ;					      	  for i in range ( 0 , len ( str ) ) :			    	for i in range ( len ( str ) ) :			  
  i < str . length ( ) ;				      	      if str [ i ] == x :				    	    if str [ i ] == x :					  
  i ++ ) if ( str [ i ] == x ) index = i ;		      		  index = i					    		index = i					  
  return index ;					      	  return index						    	return index						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
int PowerOFPINnfactorial ( int n , int p ) {		      def PowerOFPINnfactorial ( n , p ) :			    def PowerOFPINnfactorial ( n , p ) :			  success : None
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  int temp = p ;					      	  temp = p						    	temp = p						  
  while ( temp <= n ) {					      	  while ( temp <= n ) :					    	while temp <= n :					  
    ans += n / temp ;					      	      ans += n / temp					    	    ans += n // temp					  
    temp = temp * p ;					      	      temp = temp * p					    	    temp = temp * p					  
  }							      	  return int ( ans )					    	return ans						  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
int findLastIndex ( string & str , char x ) {		      def findLastIndex ( str , x ) :				    def findLastIndex ( str , x ) :				  script_not_found : None
  for ( int i = str . length ( ) - 1 ;			      	  for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	    	for i in range ( len ( str ) - 1 , - 1 , - 1 ) :	  
  i >= 0 ;						      	      if ( str [ i ] == x ) :				    	    if str [ i ] == x :					  
  i -- ) if ( str [ i ] == x ) return i ;		      		  return i					    		return i					  
  return - 1 ;						      	  return - 1						    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
public : void printNos ( unsigned int n ) {		      def printNos ( n ) :					    def print_nos ( n ) :					  script_not_found : None
  if ( n > 0 ) {					      	  if n > 0 :						    	if n > 0 :						  
    printNos ( n - 1 ) ;				      	      printNos ( n - 1 )				    	    print_nos ( n - 1 )					  
    cout << n << " " ;					      	      print ( n , end = ' ' )				    	    print ( n , end = ' ' )				  
  }							      								    	return							  
  return ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
void findLarger ( int arr [ ] , int n ) {		      def findLarger ( arr , n ) :				    def findLarger ( arr , n ) :				  script_not_found : None
  sort ( arr , arr + n ) ;				      	  x = sorted ( arr )					    	arr.sort ( )						  
  for ( int i = n - 1 ;					      	  for i in range ( n / 2 , n ) :			    	for i in range ( n - 1 , n // 2 , - 1 ) :		  
  i >= n / 2 ;						      	      print ( x [ i ] ) ,				    	    print ( arr [ i ] , end = ' ' )			  
  i -- ) cout << arr [ i ] << " " ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
void swap ( int * xp , int * yp ) {			      def swap ( xp , yp ) :					    def swap ( xp , yp ) :					  error : Traceback (most recent call last):   File
  * xp = * xp ^ * yp ;					      	  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	xp [ 0 ] = xp [ 1 ] ^ yp [ 0 ]				  "dump/transcoder/eval/cpp_python/model_1/transcode
  * yp = * xp ^ * yp ;					      	  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	yp [ 0 ] = xp [ 1 ] ^ yp [ 1 ]				  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  * xp = * xp ^ * yp ;					      	  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]			    	xp [ 1 ] = xp [ 0 ] ^ yp [ 0 ]				  /SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
}							      								    								  .py", line 56, in <module>	 f_filled(*(filled_f
							      								    								  unction_param[i]))   File "dump/transcoder/eval/cp
							      								    								  p_python/model_1/transcoder_eval/20642414/eval_scr
							      								    								  ipts/cpp_sa-python_sa.test/SWAP_TWO_NUMBERS_WITHOU
							      								    								  T_USING_TEMPORARY_VARIABLE.py", line 25, in f_fill
							      								    								  ed	 yp [ 0 ] = xp [ 1 ] ^ yp [ 1 ] IndexError:
							      								    								  list index out of range
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
void printFactorialNums ( int n ) {			      def printFactorialNums ( n ) :				    def printFactorialNums ( n ) :				  script_not_found : None
  int fact = 1 ;					      	  fact = 1						    	fact = 1						  
  int x = 2 ;						      	  x = 2							    	x = 2							  
  while ( fact <= n ) {					      	  while fact <= n :					    	while fact <= n :					  
    cout << fact << " " ;				      	      print ( fact , end = " " )			    	    print ( fact , end = ' ' )				  
    fact = fact * x ;					      	      fact = fact * x					    	    fact = fact * x					  
    x ++ ;						      	      x += 1						    	    x += 1						  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
int getMissingNo ( int a [ ] , int n ) {		      def getMissingNo ( a , n ) :				    def getMissingNo ( a , n ) :				  failure : #Results: 0, 10
  int i , total = 1 ;					      	  i , total = 0 , 1					    	i , total = 1 , 1					  
  for ( i = 2 ;						      	  for i in range ( 2 , n + 2 ) :			    	for i in range ( 2 , ( n + 1 ) ) :			  
  i <= ( n + 1 ) ;					      	      total += i					    	    total += i						  
  i ++ ) {						      	      total -= a [ i - 2 ]				    	    total -= a [ i - 2 ]				  
    total += i ;					      	  return total						    	return total						  
    total -= a [ i - 2 ] ;				      								    								  
  }							      								    								  
  return total ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
int numberOfPaths ( int m , int n ) {			      def numberOfPaths ( m , n ) :				    def number_of_paths ( m , n ) :				  script_not_found : None
  if ( m == 1 || n == 1 ) return 1 ;			      	  if ( m == 1 or n == 1 ) :				    	if m == 1 or n == 1 :					  
  return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  	      return 1						    	    return 1						  
}							      	  return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m ,  	return number_of_paths ( m - 1 , n ) + number_of_paths (  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
int count ( string s , char c ) {			      def count ( s , c ) :					    def count ( s , c ) :					  success : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( len ( s ) ) :			    	for i in s :						  
  i < s . length ( ) ;					      	      if ( s [ i ] == c ) :				    	    if i == c :						  
  i ++ ) if ( s [ i ] == c ) res ++ ;			      		  res = res + 1					    		res += 1					  
  return res ;						      	  return res						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
int maxvolume ( int s ) {				      def maxvolume ( s ) :					    def maxvolume ( s ) :					  failure : #Results: 7, 10
  int length = s / 3 ;					      	  length = int ( s / 3 )				    	length = s / 3						  
  s -= length ;						      	  s -= length						    	s -= length						  
  int breadth = s / 2 ;					      	  breadth = s / 2					    	breadth = s / 2						  
  int height = s - breadth ;				      	  height = s - breadth					    	height = s - breadth					  
  return length * breadth * height ;			      	  return int ( length * breadth * height )		    	return length * breadth * height			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
int horner ( int poly [ ] , int n , int x ) {		      def horner ( poly , n , x ) :				    def horner ( poly , n , x ) :				  success : identical to gold
  int result = poly [ 0 ] ;				      	  result = poly [ 0 ]					    	result = poly [ 0 ]					  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  i < n ;						      	      result = result * x + poly [ i ]			    	    result = result * x + poly [ i ]			  
  i ++ ) result = result * x + poly [ i ] ;		      	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1
--							      --							    --								  --
int countDigits ( int a , int b ) {			      def countDigits ( a , b ) :				    def countDigits ( a , b ) :					  success : None
  if ( a == 0 || b == 0 ) return 1 ;			      	  if ( a == 0 or b == 0 ) :				    	if a == 0 or b == 0 :					  
  return floor ( log10 ( abs ( a ) ) + log10 ( abs ( b ) ) )  	      return 1						    	    return 1						  
}							      	  return math.floor ( math.log10 ( abs ( a ) ) + math.log10 	return math.floor ( math.log10 ( abs ( a ) ) + math.log10 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
bool allCharactersSame ( string s ) {			      def allCharactersSame ( s ) :				    def allCharactersSame ( s ) :				  success : identical to gold
  int n = s . length ( ) ;				      	  n = len ( s )						    	n = len ( s )						  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  i < n ;						      	      if s [ i ] != s [ 0 ] :				    	    if s [ i ] != s [ 0 ] :				  
  i ++ ) if ( s [ i ] != s [ 0 ] ) return false ;	      		  return False					    		return False					  
  return true ;						      	  return True						    	return True						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
bool isPower ( int x , int y ) {			      def isPower ( x , y ) :					    def isPower ( x , y ) :					  success : None
  int res1 = log ( y ) / log ( x ) ;			      	  res1 = math.log ( y ) / math.log ( x )		    	res1 = math.log ( y ) / math.log ( x )			  
  double res2 = log ( y ) / log ( x ) ;			      	  res2 = math.log ( y ) / math.log ( x )		    	res2 = math.log ( y ) / math.log ( x )			  
  return ( res1 == res2 ) ;				      	  return 1 if ( res1 == res2 ) else 0			    	return ( res1 == res2 )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			      MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			    MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			  MULTIPLICATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
int modInverse ( int a , int m ) {			      def modInverse ( a , m ) :				    def modInverse ( a , m ) :					  script_not_found : None
  a = a % m ;						      	  a = a % m						    	a = a % m						  
  for ( int x = 1 ;					      	  for x in range ( 1 , m ) :				    	for x in range ( 1 , m ) :				  
  x < m ;						      	      if ( ( a * x ) % m == 1 ) :			    	    if ( a * x ) % m == 1 :				  
  x ++ ) if ( ( a * x ) % m == 1 ) return x ;		      		  return x					    		return x					  
}							      	  return 1						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
unsigned int doublefactorial ( unsigned int n ) {	      def doublefactorial ( n ) :				    def doublefactorial ( n ) :					  error : Traceback (most recent call last):   File
  int res = 1 ;						      	  res = 1						    	res = 1							  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int i = n ;					      	  for i in range ( n , - 1 , - 2 ) :			    	for i in range ( n , - 1 , - 1 , - 1 ) :		  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  i >= 0 ;						      	      if ( i == 0 or i == 1 ) :				    	    if i == 0 or i == 1 :				  /DOUBLE_FACTORIAL_1.py", line 50, in <module>
  i = i - 2 ) {						      		  return res					    		return res					  if f_filled(*parameters_set) == f_gold(*parameters
    if ( i == 0 || i == 1 ) return res ;		      	      else :						    	    else :						  _set):   File "dump/transcoder/eval/cpp_python/mod
    else res *= i ;					      		  res *= i					    		res *= i					  el_1/transcoder_eval/20642414/eval_scripts/cpp_sa-
  }							      								    								  python_sa.test/DOUBLE_FACTORIAL_1.py", line 28, in
}							      								    								   f_filled	for i in range ( n , - 1 , - 1 , - 1
							      								    								   ) : TypeError: range expected at most 3 arguments
							      								    								  , got 4
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER			  FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
void center ( int x1 , int x2 , int y1 , int y2 ) {	      def center ( x1 , x2 , y1 , y2 ) :			    def center ( x1 , x2 , y1 , y2 ) :				  script_not_found : None
  cout << ( float ) ( x1 + x2 ) / 2 << ", " << ( float ) ( y1 	  print ( int ( ( x1 + x2 ) / 2 ) , end = "" )		    	print ( float ( x1 + x2 ) / 2 , float ( y1 + y2 ) / 2 )	  
}							      	  print ( "," , int ( ( y1 + y2 ) / 2 ) )		    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
float exponential ( int n , float x ) {			      def exponential ( n , x ) :				    def exponential ( n , x ) :					  script_not_found : None
  float sum = 1.0f ;					      	  sum = 1.0						    	sum = 1.0						  
  for ( int i = n - 1 ;					      	  for i in range ( n , 0 , - 1 ) :			    	for i in range ( n - 1 , 0 , - 1 ) :			  
  i > 0 ;						      	      sum = 1 + x * sum / i				    	    sum = 1 + x * sum / i				  
  -- i ) sum = 1 + x * sum / i ;			      	  print ( "e^x =" , sum )				    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
int largest ( int arr [ ] , int n ) {			      def largest ( arr , n ) :					    def largest ( arr , n ) :					  script_not_found : None
  int i ;						      	  max = arr [ 0 ]					    	i = 0							  
  int max = arr [ 0 ] ;					      	  for i in range ( 1 , n ) :				    	max = arr [ 0 ]						  
  for ( i = 1 ;						      	      if arr [ i ] > max :				    	for i in range ( 1 , n ) :				  
  i < n ;						      		  max = arr [ i ]				    	    if arr [ i ] > max :				  
  i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;	      	  return max						    		max = arr [ i ]					  
  return max ;						      								    	return max						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  success : None
  unsigned count = 0 ;					      	  count = 0						    	count = 0						  
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and not ( n & ( n - 1 ) ) :			  
  while ( n != 0 ) {					      	      return n						    	    return n						  
    n >>= 1 ;						      	  while ( n != 0 ) :					    	while n != 0 :						  
    count += 1 ;					      	      n >>= 1						    	    n >>= 1						  
  }							      	      count += 1					    	    count += 1						  
  return 1 << count ;					      	  return 1 << count					    	return 1 << count					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
int floorSqrt ( int x ) {				      def floorSqrt ( x ) :					    def floorSqrt ( x ) :					  failure : #Results: 0, 10
  if ( x == 0 || x == 1 ) return x ;			      	  if ( x == 0 or x == 1 ) :				    	if x == 0 or x == 1 :					  
  int i = 1 , result = 1 ;				      	      return x						    	    return x						  
  while ( result <= x ) {				      	  i = 1 result = 1					    	i , result = 1 , 1					  
    i ++ ;						      	  while ( result <= x ) :				    	while result <= x :					  
    result = i * i ;					      	      i += 1						    	    i += 1						  
  }							      	      result = i * i					    	    result , i = i * i , i * i				  
  return i - 1 ;					      	  return i - 1						    	return i - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      def search ( arr , x ) :					    def search ( arr , n , x ) :				  script_not_found : None
  for ( int i = 0 ;					      	  n = len ( arr )					    	for i in range ( n ) :					  
  i < n ;						      	  for j in range ( 0 , n ) :				    	    if arr [ i ] == x :					  
  i ++ ) {						      	      if ( x == arr [ j ] ) :				    		return i					  
    if ( arr [ i ] == x ) return i ;			      		  return j					    	return - 1						  
  }							      	  return - 1						    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
bool isPower ( int x , long int y ) {			      def isPower ( x , y ) :					    def isPower ( x , y ) :					  success : None
  if ( x == 1 ) return ( y == 1 ) ;			      	  if ( x == 1 ) :					    	if x == 1 :						  
  long int pow = 1 ;					      	      return ( y == 1 )					    	    return ( y == 1 )					  
  while ( pow < y ) pow *= x ;				      	  pow = 1						    	pow = 1							  
  return ( pow == y ) ;					      	  while ( pow < y ) :					    	while pow < y :						  
}							      	      pow = pow * x					    	    pow *= x						  
							      	  return ( pow == y )					    	return ( pow == y )					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
int kthgroupsum ( int k ) {				      def kthgroupsum ( k ) :					    def kthgroupsum ( k ) :					  timeout : None
  int cur = ( k * ( k - 1 ) ) + 1 ;			      	  cur = int ( ( k * ( k - 1 ) ) + 1 )			    	cur = ( k * ( k - 1 ) ) + 1				  
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  while ( k -- ) {					      	  while k :						    	while k :						  
    sum += cur ;					      	      sum += cur					    	    sum += cur						  
    cur += 2 ;						      	      cur += 2						    	    cur += 2						  
  }							      	      k = k - 1						    	return sum						  
  return sum ;						      	  return sum						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
int sumOfSeries ( int n ) {				      def sumOfSeries ( n ) :					    def sumOfSeries ( n ) :					  failure : #Results: 0, 10
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 )		    	    sum = sum + ( 2 ** i - 1 ) * ( 2 ** i - 1 )		  
  i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;	      	  return sum						    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
bool divisibleBy20 ( string num ) {			      def divisibleBy20 ( num ) :				    def divisibleBy20 ( num ) :					  script_not_found : None
  int lastTwoDigits = stoi ( num . substr ( num . length ( )  	  lastTwoDigits = int ( num [ - 2 : ] )			    	last_two_digits = int ( num [ - 2 : ] )			  
  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4  	  return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 = 	return ( ( last_two_digits % 5 == 0 ) and ( last_two_digi 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
public : float squareRoot ( float n ) {			      def squareRoot ( n ) :					    def square_root ( n ) :					  success : None
  float x = n ;						      	  x = n							    	x = n							  
  float y = 1 ;						      	  y = 1							    	y = 1							  
  float e = 0.000001 ;					      	  e = 0.000001						    	e = 0.000001						  
  while ( x - y > e ) {					      	  while ( x - y > e ) :					    	while x - y > e :					  
    x = ( x + y ) / 2 ;					      	      x = ( x + y ) / 2					    	    x = ( x + y ) / 2					  
    y = n / x ;						      	      y = n / x						    	    y = n / x						  
  }							      	  return x						    	return x						  
  return x ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
long long int findSum ( int n ) {			      def findSum ( n ) :					    def findSum ( n ) :						  success : None
  long long int sum = 0 ;				      	  sm = 0						    	sum = 0							  
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      for j in range ( i , n + 1 ) :			    	    for j in range ( i , n + 1 ) :			  
  i ++ ) for ( int j = i ;				      		  sm = sm + i * j				    		sum = sum + i * j				  
  j <= n ;						      	  return sm						    	return sum						  
  j ++ ) sum = sum + i * j ;				      								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
int playGame ( int arr [ ] , int n ) {			      def playGame ( arr , n ) :				    def playGame ( arr , n ) :					  script_not_found : None
  unordered_set < int > hash ;				      	  s = set ( )						    	hash = set ( )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      s.add ( arr [ i ] )				    	    hash.add ( arr [ i ] )				  
  i ++ ) hash . insert ( arr [ i ] ) ;			      	  return 1 if len ( s ) % 2 == 0 else 2			    	return ( len ( hash ) % 2 == 0 )			  
  return ( hash . size ( ) % 2 == 0 ? 1 : 2 ) ;		      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
bool isDivisible ( long long int n ) {			      def isDivisible ( n ) :					    def isDivisible ( n ) :					  timeout : None
  while ( n / 100 ) {					      	  while ( int ( n / 100 ) ) :				    	while n / 100 :						  
    int last_digit = n % 10 ;				      	      last_digit = int ( n % 10 )			    	    last_digit = n % 10					  
    n /= 10 ;						      	      n = int ( n / 10 )				    	    n /= 10						  
    n += last_digit * 3 ;				      	      n += last_digit * 3				    	    n += last_digit * 3					  
  }							      	  return ( n % 29 == 0 )				    	return ( n % 29 == 0 )					  
  return ( n % 29 == 0 ) ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
char first ( string str ) {				      def first ( str ) :					    def first ( s ) :						  failure : #Results: 0, 10
  for ( int i = 0 ;					      	  for i in range ( 0 , len ( str ) ) :			    	for c in s :						  
  i < str . length ( ) ;				      	      if ( str [ i ].istitle ( ) ) :			    	    if ord ( c ) < 128 :				  
  i ++ ) if ( isupper ( str [ i ] ) ) return str [ i ] ;      		  return str [ i ]				    		return c					  
  return 0 ;						      	  return 0						    	return None						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
int find_extra_element_index ( int arrA [ ] , int arrB [ ] ,  def find_extra_element_index ( arrA , arrB ) :		    def find_extra_element_index ( arrA , arrB , n , m ) :	  script_not_found : None
  int extra_element = sum ( arrA , n ) - sum ( arrB , m ) ;   	  extra_element = sum ( arrA ) - sum ( arrB )		    	extra_element = sum ( arrA , n ) - sum ( arrB , m )	  
  return indexOf ( arrA , extra_element , n ) ;		      	  return arrA.index ( extra_element )			    	return indexOf ( arrA , extra_element , n )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
int spiralDiaSum ( int n ) {				      def spiralDiaSum ( n ) :					    def spiral_dia_sum ( n ) :					  script_not_found : None
  if ( n == 1 ) return 1 ;				      	  if n == 1 :						    	if n == 1 :						  
  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 	      return 1						    	    return 1						  
}							      	  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) 	return ( 4 * n ** 2 - 6 * n + 6 + spiral_dia_sum ( n - 2  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
int decToBinary ( int n ) {				      def decToBinary ( n ) :					    def decToBinary ( n ) :					  script_not_found : None
  for ( int i = 31 ;					      	  for i in range ( 31 , - 1 , - 1 ) :			    	for i in range ( 31 , - 1 , - 1 ) :			  
  i >= 0 ;						      	      k = n >> i					    	    k = n >> i						  
  i -- ) {						      	      if ( k & 1 ) :					    	    if k & 1 :						  
    int k = n >> i ;					      		  print ( "1" , end = "" )			    		print ( '1' )					  
    if ( k & 1 ) cout << "1" ;				      	      else :						    	    else :						  
    else cout << "0" ;					      		  print ( "0" , end = "" )			    		print ( '0' )					  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  success : None
  int i ;						      	  i = 0							    	i = 0							  
  for ( i = 0 ;						      	  for i in range ( i , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  
  i ++ ) {						      		  return i					    		return i					  
    if ( arr [ i ] == x ) return i ;			      	  return - 1						    	return - 1						  
  }							      								    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
int Right_most_setbit ( int num ) {			      def Right_most_setbit ( num ) :				    def Right_most_setbit ( num ) :				  script_not_found : None
  int pos = 1 ;						      	  pos = 1						    	pos = 1							  
  for ( int i = 0 ;					      	  for i in range ( INT_SIZE ) :				    	for i in range ( INT_SIZE ) :				  
  i < INT_SIZE ;					      	      if not ( num & ( 1 << i ) ) :			    	    if not ( num & ( 1 << i ) ) :			  
  i ++ ) {						      		  pos += 1					    		pos += 1					  
    if ( ! ( num & ( 1 << i ) ) ) pos ++ ;		      	      else :						    	    else :						  
    else break ;					      		  break						    		break						  
  }							      	  return pos						    	return pos						  
  return pos ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
int smallest ( int x , int y , int z ) {		      def smallest ( x , y , z ) :				    def smallest ( x , y , z ) :				  success : None
  int c = 0 ;						      	  c = 0							    	c = 0							  
  while ( x && y && z ) {				      	  while ( x and y and z ) :				    	while x and y and z :					  
    x -- ;						      	      x = x - 1						    	    x -= 1						  
    y -- ;						      	      y = y - 1						    	    y -= 1						  
    z -- ;						      	      z = z - 1						    	    z -= 1						  
    c ++ ;						      	      c = c + 1						    	    c += 1						  
  }							      	  return c						    	return c						  
  return c ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
int countOccurrences ( int arr [ ] , int n , int x ) {	      def countOccurrences ( arr , n , x ) :			    def countOccurrences ( arr , n , x ) :			  success : identical to gold
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if x == arr [ i ] :				    	    if x == arr [ i ] :					  
  i ++ ) if ( x == arr [ i ] ) res ++ ;			      		  res += 1					    		res += 1					  
  return res ;						      	  return res						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
public : int getSum ( int n ) {				      def getSum ( n ) :					    def getSum ( n ) :						  failure : #Results: 0, 10
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  while ( n != 0 ) {					      	  while ( n != 0 ) :					    	while n != 0 :						  
    sum = sum + n % 10 ;				      	      sum = sum + int ( n % 10 )			    	    sum = sum + n % 10					  
    n = n / 10 ;					      	      n = int ( n / 10 )				    	    n = n / 10						  
  }							      	  return sum						    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  success : None
  unsigned int p = 1 ;					      	  p = 1							    	p = 1							  
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	  if ( n and not ( n & ( n - 1 ) ) ) :			    	if n and not ( n & ( n - 1 ) ) :			  
  while ( p < n ) p <<= 1 ;				      	      return n						    	    return n						  
  return p ;						      	  while ( p < n ) :					    	while p < n :						  
}							      	      p <<= 1						    	    p <<= 1						  
							      	  return p						    	return p						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
int numberOfPaths ( int m , int n ) {			      def numberOfPaths ( m , n ) :				    def numberOfPaths ( m , n ) :				  script_not_found : None
  int path = 1 ;					      	  for i in range ( n , ( m + n - 1 ) ) :		    	path = 1						  
  for ( int i = n ;					      	      path *= i						    	for i in range ( n , ( m + n - 1 ) ) :			  
  i < ( m + n - 1 ) ;					      	      path //= ( i - n + 1 )				    	    path *= i						  
  i ++ ) {						      	  return path						    	    path /= ( i - n + 1 )				  
    path *= i ;						      								    	return path						  
    path /= ( i - n + 1 ) ;				      								    								  
  }							      								    								  
  return path ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      def nextPowerOf2 ( n ) :					    def nextPowerOf2 ( n ) :					  success : identical to gold
  n -- ;						      	  n -= 1						    	n -= 1							  
  n |= n >> 1 ;						      	  n |= n >> 1						    	n |= n >> 1						  
  n |= n >> 2 ;						      	  n |= n >> 2						    	n |= n >> 2						  
  n |= n >> 4 ;						      	  n |= n >> 4						    	n |= n >> 4						  
  n |= n >> 8 ;						      	  n |= n >> 8						    	n |= n >> 8						  
  n |= n >> 16 ;					      	  n |= n >> 16						    	n |= n >> 16						  
  n ++ ;						      	  n += 1						    	n += 1							  
  return n ;						      	  return n						    	return n						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2
--							      --							    --								  --
int singleNumber ( int a [ ] , int n ) {		      def singleNumber ( nums ) :				    def singleNumber ( a , n ) :				  script_not_found : None
  unordered_set < int > s ( a , a + n ) ;		      	  return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2    	s = set ( a )						  
  int arr_sum = accumulate ( a , a + n , 0 ) ;		      								    	arr_sum = sum ( a )					  
  int set_sum = accumulate ( s . begin ( ) , s . end ( ) , 0  								    	set_sum = sum ( s )					  
  return ( 3 * set_sum - arr_sum ) / 2 ;		      								    	return ( 3 * set_sum - arr_sum ) / 2			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
double compute ( int a , int b ) {			      def compute ( a , b ) :					    def compute ( a , b ) :					  error : Traceback (most recent call last):   File
  double AM , GM , HM ;					      	  AM = ( a + b ) / 2					    	AM , GM , HM = ( a + b ) / 2 , sqrt ( a * b )		  "dump/transcoder/eval/cpp_python/model_1/transcode
  AM = ( a + b ) / 2 ;					      	  GM = math.sqrt ( a * b )				    	HM = ( GM * GM ) / AM					  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  GM = sqrt ( a * b ) ;					      	  HM = ( GM * GM ) / AM					    	return HM						  /FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRI
  HM = ( GM * GM ) / AM ;				      	  return HM						    								  C_MEAN.py", line 47, in <module>     if abs(1 - (0
  return HM ;						      								    								  .0000001 + abs(f_gold(*parameters_set))) / (abs(f_
}							      								    								  filled(*parameters_set)) + 0.0000001)) < 0.001:
							      								    								  File "dump/transcoder/eval/cpp_python/model_1/tran
							      								    								  scoder_eval/20642414/eval_scripts/cpp_sa-python_sa
							      								    								  .test/FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEO
							      								    								  METRIC_MEAN.py", line 27, in f_filled	    AM , GM
							      								    								  , HM = ( a + b ) / 2 , sqrt ( a * b ) ValueError:
							      								    								  not enough values to unpack (expected 3, got 2)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
bool isPerfectSquare ( int n ) {			      def isPerfectSquare ( n ) :				    def isPerfectSquare ( n ) :					  failure : #Results: 5, 10
  for ( int sum = 0 , i = 1 ;				      	  i = 1							    	for sum , i in enumerate ( range ( 0 , n , 2 ) ) :	  
  sum < n ;						      	  the_sum = 0						    	    sum += i						  
  i += 2 ) {						      	  while the_sum < n :					    	    if sum == n :					  
    sum += i ;						      	      the_sum += i					    		return True					  
    if ( sum == n ) return true ;			      	      if the_sum == n :					    	return False						  
  }							      		  return True					    								  
  return false ;					      	      i += 2						    								  
}							      	  return False						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
int sumBetweenTwoKth ( int arr [ ] , int n , int k1 , int k2  def sumBetweenTwoKth ( arr , n , k1 , k2 ) :		    def sumBetweenTwoKth ( arr , n , k1 , k2 ) :		  script_not_found : None
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  return accumulate ( arr + k1 , arr + k2 - 1 , 0 ) ;	      	  result = 0						    	return sum ( arr [ k1 : k2 ] )				  
}							      	  for i in range ( k1 , k2 - 1 ) :			    								  
							      	      result += arr [ i ]				    								  
							      	  return result						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
void kLargest ( int arr [ ] , int n , int k ) {		      def kLargest ( arr , k ) :				    def kLargest ( arr , n , k ) :				  script_not_found : None
  sort ( arr , arr + n , greater < int > ( ) ) ;	      	  arr.sort ( reverse = True )				    	arr.sort ( )						  
  for ( int i = 0 ;					      	  for i in range ( k ) :				    	for i in range ( k ) :					  
  i < k ;						      	      print ( arr [ i ] , end = " " )			    	    print ( arr [ i ] , end = ' ' )			  
  i ++ ) cout << arr [ i ] << " " ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
int findMinZero ( int p ) {				      def findMinZero ( p ) :					    def findMinZero ( p ) :					  success : None
  int first = 1 , second = 1 , number = 2 , next = 1 ;	      	  first = 1						    	first , second , number , next = 1 , 1 , 2 , 1		  
  while ( next ) {					      	  second = 1						    	while next :						  
    next = ( first + second ) % p ;			      	  number = 2						    	    next = ( first + second ) % p			  
    first = second ;					      	  next = 1						    	    first , second = second , next			  
    second = next ;					      	  while ( next ) :					    	    number += 1						  
    number ++ ;						      	      next = ( first + second ) % p			    	return number						  
  }							      	      first = second					    								  
  return number ;					      	      second = next					    								  
}							      	      number = number + 1				    								  
							      	  return number						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
unsigned long int catalan ( unsigned int n ) {		      def catalan ( n ) :					    def catalan ( n ) :						  script_not_found : None
  if ( n <= 1 ) return 1 ;				      	  if n <= 1 :						    	if n <= 1 :						  
  unsigned long int res = 0 ;				      	      return 1						    	    return 1						  
  for ( int i = 0 ;					      	  res = 0						    	res = 0							  
  i < n ;						      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i ++ ) res += catalan ( i ) * catalan ( n - i - 1 ) ;	      	      res += catalan ( i ) * catalan ( n - i - 1 )	    	    res += catalan ( i ) * catalan ( n - i - 1 )	  
  return res ;						      	  return res						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			      SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			    SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES				  SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES
--							      --							    --								  --
int findS ( int s ) {					      def findS ( s ) :						    def findS ( s ) :						  failure : #Results: 9, 10
  int sum = 0 ;						      	  _sum = 0						    	sum = 0							  
  for ( int n = 1 ;					      	  n = 1							    	for n in range ( 1 , s ) :				  
  sum < s ;						      	  while ( _sum < s ) :					    	    sum += n ** 2					  
  n ++ ) {						      	      _sum += n * n					    	    if sum == s :					  
    sum += n * n ;					      	      n += 1						    		return n					  
    if ( sum == s ) return n ;				      	  n -= 1						    	return - 1						  
  }							      	  if _sum == s :					    								  
  return - 1 ;						      	      return n						    								  
}							      	  return - 1						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
long int evenFib ( int n ) {				      def evenFib ( n ) :					    def evenFib ( n ) :						  script_not_found : None
  if ( n < 1 ) return n ;				      	  if ( n < 1 ) :					    	if n < 1 :						  
  if ( n == 1 ) return 2 ;				      	      return n						    	    return n						  
  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;  	  if ( n == 1 ) :					    	if n == 1 :						  
}							      	      return 2						    	    return 2						  
							      	  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )  	return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
bool isTriangular ( int num ) {				      def isTriangular ( num ) :				    def isTriangular ( num ) :					  success : None
  if ( num < 0 ) return false ;				      	  if ( num < 0 ) :					    	if num < 0 :						  
  int sum = 0 ;						      	      return False					    	    return False					  
  for ( int n = 1 ;					      	  sum , n = 0 , 1					    	sum = 0							  
  sum <= num ;						      	  while ( sum <= num ) :				    	for n in range ( 1 , num + 1 ) :			  
  n ++ ) {						      	      sum = sum + n					    	    sum = sum + n					  
    sum = sum + n ;					      	      if ( sum == num ) :				    	    if sum == num :					  
    if ( sum == num ) return true ;			      		  return True					    		return True					  
  }							      	      n += 1						    	return False						  
  return false ;					      	  return False						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
int check ( string str ) {				      def check ( st ) :					    def check ( str ) :						  script_not_found : None
  int n = str . length ( ) ;				      	  n = len ( st )					    	n = len ( str )						  
  int digitSum = 0 ;					      	  digitSum = 0						    	digitSum = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      digitSum = digitSum + ( int ) ( st [ i ] )	    	    digitSum += ( str [ i ] - '0' )			  
  i ++ ) digitSum += ( str [ i ] - '0' ) ;		      	  return ( digitSum % 9 == 0 )				    	return ( digitSum % 9 == 0 )				  
  return ( digitSum % 9 == 0 ) ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
void transpose ( int A [ ] [ N ] , int B [ ] [ N ] ) {	      def transpose ( A , B ) :					    def transpose ( A ) :					  script_not_found : None
  int i , j ;						      	  for i in range ( N ) :				    	i , j = A.shape						  
  for ( i = 0 ;						      	      for j in range ( N ) :				    	B = A [ : , i ].T					  
  i < N ;						      		  B [ i ] [ j ] = A [ j ] [ i ]			    	return B						  
  i ++ ) for ( j = 0 ;					      								    								  
  j < N ;						      								    								  
  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;		      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
int fib ( int n ) {					      def fib ( n ) :						    def fib ( n ) :						  script_not_found : None
  if ( n < 6 ) return f [ n ] ;				      	  if n < 6 :						    	if n < 6 :						  
  int t = 5 , fn = 5 ;					      	      return f [ n ]					    	    return f [ n ]					  
  while ( t < n ) {					      	  t = 5							    	t , fn = 5 , 5						  
    fn = round ( fn * PHI ) ;				      	  fn = 5						    	while t < n :						  
    t ++ ;						      	  while t < n :						    	    fn = round ( fn * PHI , 2 )				  
  }							      	      fn = round ( fn * PHI )				    	    t += 1						  
  return fn ;						      	      t += 1						    	return fn						  
}							      	  return fn						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
bool isPowerOfTwo ( int n ) {				      def isPowerOfTwo ( n ) :					    def isPowerOfTwo ( n ) :					  success : None
  if ( n == 0 ) return 0 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  while ( n != 1 ) {					      	      return False					    	    return 0						  
    if ( n % 2 != 0 ) return 0 ;			      	  while ( n != 1 ) :					    	while n != 1 :						  
    n = n / 2 ;						      	      if ( n % 2 != 0 ) :				    	    if n % 2 != 0 :					  
  }							      		  return False					    		return 0					  
  return 1 ;						      	      n = n // 2					    	    n = n / 2						  
}							      	  return True						    	return 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS
--							      --							    --								  --
int countDigits ( int a , int b ) {			      def countDigits ( a , b ) :				    def countDigits ( a , b ) :					  failure : #Results: 0, 10
  int count = 0 ;					      	  count = 0						    	count = 0						  
  int p = abs ( a * b ) ;				      	  p = abs ( a * b )					    	p = abs ( a * b )					  
  if ( p == 0 ) return 1 ;				      	  if ( p == 0 ) :					    	if p == 0 :						  
  while ( p > 0 ) {					      	      return 1						    	    return 1						  
    count ++ ;						      	  while ( p > 0 ) :					    	while p > 0 :						  
    p = p / 10 ;					      	      count = count + 1					    	    count += 1						  
  }							      	      p = p // 10					    	    p = p / 10						  
  return count ;					      	  return count						    	return count						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) {	      def findExtra ( arr1 , arr2 , n ) :			    def findExtra ( arr1 , arr2 , n ) :				  success : None
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( arr1 [ i ] != arr2 [ i ] ) :			    	    if arr1 [ i ] != arr2 [ i ] :			  
  i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;	      		  return i					    		return i					  
  return n ;						      	  return n						    	return n						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
void reverseStr ( string & str ) {			      def reverseStr ( str ) :					    def reverseStr ( str ) :					  script_not_found : None
  int n = str . length ( ) ;				      	  n = len ( str )					    	n = len ( str )						  
  for ( int i = 0 , j = n - 1 ;				      	  i , j = 0 , n - 1					    	for i , j in enumerate ( str ) :			  
  i < j ;						      	  while i < j :						    	    swap ( str [ i ] , str [ j ] )			  
  i ++ , j -- ) swap ( str [ i ] , str [ j ] ) ;	      	      str [ i ] , str [ j ] = str [ j ] , str [ i ]	    								  
}							      	      i += 1						    								  
							      	      j -= 1						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
void rotate ( int arr [ ] , int n ) {			      def rotate ( arr , n ) :					    def rotate ( arr , n ) :					  script_not_found : None
  int x = arr [ n - 1 ] , i ;				      	  x = arr [ n - 1 ]					    	x , i = arr [ n - 1 ] , arr [ n - 2 ]			  
  for ( i = n - 1 ;					      	  for i in range ( n - 1 , 0 , - 1 ) :			    	for i in range ( n - 1 , 0 , - 1 ) :			  
  i > 0 ;						      	      arr [ i ] = arr [ i - 1 ]				    	    arr [ i ] , arr [ i - 1 ] = arr [ i ] , arr [ i - 1 ] 
  i -- ) arr [ i ] = arr [ i - 1 ] ;			      	  arr [ 0 ] = x						    	arr [ 0 ] , arr [ 0 ] = x , arr [ 0 ]			  
  arr [ 0 ] = x ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
int findS ( int s ) {					      def findS ( s ) :						    def findS ( s ) :						  success : None
  int sum = 0 ;						      	  _sum = 0						    	sum = 0							  
  for ( int n = 1 ;					      	  n = 1							    	for n in range ( 1 , s ) :				  
  sum < s ;						      	  while ( _sum < s ) :					    	    sum += n * n * n					  
  n ++ ) {						      	      _sum += n * n * n					    	    if sum == s :					  
    sum += n * n * n ;					      	      n += 1						    		return n					  
    if ( sum == s ) return n ;				      	  n -= 1						    	return - 1						  
  }							      	  if _sum == s :					    								  
  return - 1 ;						      	      return n						    								  
}							      	  return - 1						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
public : bool isPowerOfFour ( int n ) {			      def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  success : None
  if ( n == 0 ) return 0 ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  while ( n != 1 ) {					      	      return False					    	    return 0						  
    if ( n % 4 != 0 ) return 0 ;			      	  while ( n != 1 ) :					    	while n != 1 :						  
    n = n / 4 ;						      	      if ( n % 4 != 0 ) :				    	    if n % 4 != 0 :					  
  }							      		  return False					    		return 0					  
  return 1 ;						      	      n = n // 4					    	    n = n // 4						  
}							      	  return True						    	return 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
int answer_query ( int a [ ] , int n , int l , int r ) {      def answer_query ( a , n , l , r ) :			    def answer_query ( a , n , l , r ) :			  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = l ;					      	  for i in range ( l , r ) :				    	for i in range ( l , r ) :				  
  i < r ;						      	      if ( a [ i ] == a [ i + 1 ] ) :			    	    if a [ i ] == a [ i + 1 ] :				  
  i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;	      		  count += 1					    		count += 1					  
  return count ;					      	  return count						    	return count						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
int findFrequency ( int arr [ ] , int n , int left , int righ def findFrequency ( arr , n , left , right , element ) :	    def findFrequency ( arr , n , left , right , element ) :	  script_not_found : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = left - 1 ;				      	  for i in range ( left - 1 , right ) :			    	for i in range ( left - 1 , right + 1 ) :		  
  i <= right ;						      	      if ( arr [ i ] == element ) :			    	    if arr [ i ] == element :				  
  ++ i ) if ( arr [ i ] == element ) ++ count ;		      		  count += 1					    		count += 1					  
  return count ;					      	  return count						    	return count						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
void query ( char s [ ] , int i , int j ) {		      def query ( s , i , j ) :					    def query ( s , i , j ) :					  script_not_found : None
  int n = strlen ( s ) ;				      	  n = len ( s )						    	n = len ( s )						  
  i %= n ;						      	  i %= n						    	i %= n							  
  j %= n ;						      	  j %= n						    	j %= n							  
  ( s [ i ] == s [ j ] ) ? ( cout << "Yes" << endl ) : ( cout 	  print ( "Yes" ) if s [ i ] == s [ j ] else print ( "No" ) 	( s [ i ] , s [ j ] ) = ( s [ i ] , s [ j ] )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
int smallest ( int x , int y , int z ) {		      def smallest ( x , y , z ) :				    def smallest ( x , y , z ) :				  failure : #Results: 0, 10
  if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z ;	      	  if ( not ( y / x ) ) :				    	if not ( y / x ) :					  
  return ( ! ( x / z ) ) ? x : z ;			      	      return y if ( not ( y / z ) ) else z		    	    return ( not ( y / z ) )				  
}							      	  return x if ( not ( x / z ) ) else z			    	return ( not ( x / z ) )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
bool check ( int degree [ ] , int n ) {			      def check ( degree , n ) :				    def check ( degree , n ) :					  failure : #Results: 7, 10
  int deg_sum = 0 ;					      	  deg_sum = sum ( degree )				    	deg_sum = 0						  
  for ( int i = 0 ;					      	  if ( 2 * ( n - 1 ) == deg_sum ) :			    	for i in range ( n ) :					  
  i < n ;						      	      return True					    	    deg_sum += degree [ i ]				  
  i ++ ) deg_sum += degree [ i ] ;			      	  else :						    	return ( 2 ** ( n - 1 ) == deg_sum )			  
  return ( 2 * ( n - 1 ) == deg_sum ) ;			      	      return False					    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
bool isPalindrome ( string str ) {			      def isPalindrome ( string ) :				    def isPalindrome ( str ) :					  error :   File "dump/transcoder/eval/cpp_python/mo
  int l = 0 ;						      	  l = 0							    	l = 0							  del_1/transcoder_eval/20642414/eval_scripts/cpp_sa
  int h = str . length ( ) - 1 ;			      	  h = len ( string ) - 1				    	h = len ( str ) - 1					  -python_sa.test/CHECK_GIVEN_STRING_ROTATION_PALIND
  while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return  	  while h > l :						    	while h > l :						  ROME.py", line 32	if str [ l ] != str [ h -- ]
  return true ;						      	      l += 1						    	    if str [ l ] != str [ h -- ] :			   :				    ^ SyntaxError: i
}							      	      h -= 1						    		return False					  nvalid syntax
							      	      if string [ l - 1 ] != string [ h + 1 ] :		    	return True						  
							      		  return False					    								  
							      	  return True						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
void printSquares ( int n ) {				      def printSquares ( n ) :					    def print_squares ( n ) :					  script_not_found : None
  int square = 0 , odd = 1 ;				      	  square = 0						    	square , odd = 0 , 1					  
  for ( int x = 0 ;					      	  odd = 1						    	for x in range ( n ) :					  
  x < n ;						      	  for x in range ( 0 , n ) :				    	    print ( square , end = ' ' )			  
  x ++ ) {						      	      print ( square , end = " " )			    	    square , odd = square + odd , odd + 2		  
    cout << square << " " ;				      	      square = square + odd				    								  
    square = square + odd ;				      	      odd = odd + 2					    								  
    odd = odd + 2 ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
int minSum ( int n ) {					      def minSum ( n ) :					    def minSum ( n ) :						  failure : #Results: 0, 10
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  while ( n > 0 ) {					      	  while ( n > 0 ) :					    	while n > 0 :						  
    sum += ( n % 10 ) ;					      	      sum += ( n % 10 )					    	    sum += ( n % 10 )					  
    n /= 10 ;						      	      n //= 10						    	    n /= 10						  
  }							      	  if ( sum == 1 ) :					    	if sum == 1 :						  
  if ( sum == 1 ) return 10 ;				      	      return 10						    	    return 10						  
  return sum ;						      	  return sum						    	return sum						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
bool isOneFlip ( string str ) {				      def isOneFlip ( str ) :					    def isOneFlip ( str ) :					  script_not_found : None
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  int n = str . length ( ) ;				      	  n = len ( str )					    	n = len ( str )						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum += int ( str [ i ] ) - int ( '0' )		    	    sum += str [ i ] - '0'				  
  i ++ ) sum += str [ i ] - '0' ;			      	  return ( sum == n - 1 or sum == 1 )			    	return ( sum == n - 1 or sum == 1 )			  
  return ( sum == n - 1 || sum == 1 ) ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS
--							      --							    --								  --
bool squareRootExists ( int n , int p ) {		      def squareRootExists ( n , p ) :				    def square_root_exists ( n , p ) :				  success : None
  n = n % p ;						      	  n = n % p						    	n = n % p						  
  for ( int x = 2 ;					      	  for x in range ( 2 , p , 1 ) :			    	for x in range ( 2 , p ) :				  
  x < p ;						      	      if ( ( x * x ) % p == n ) :			    	    if ( x ** 2 ) % p == n :				  
  x ++ ) if ( ( x * x ) % p == n ) return true ;	      		  return True					    		return True					  
  return false ;					      	  return False						    	return False						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
int count ( int n , int x ) {				      def count ( n , x ) :					    def count ( n , x ) :					  success : None
  int count = = 0 ;					      	  cnt = 0						    	count = 0						  
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n && i <= x ;					      	      if i <= x :					    	    if x / i <= n and x % i == 0 :			  
  i ++ ) {						      		  if x // i <= n and x % i == 0 :		    		count += 1					  
    if ( x / i <= n && x % i == 0 ) count ++ ;		      		      cnt += 1					    	return count						  
  }							      	  return cnt						    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
int binomialCoeff ( int n , int k ) {			      def binomialCoeff ( n , k ) :				    def binomial_coeff ( n , k ) :				  script_not_found : None
  if ( k == 0 || k == n ) return 1 ;			      	  if k == 0 or k == n :					    	if k == 0 or k == n :					  
  return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n  	      return 1						    	    return 1						  
}							      	  return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff (  	return binomial_coeff ( n - 1 , k - 1 ) + binomial_coeff  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
void swapDiagonal ( int matrix [ ] [ N ] ) {		      def swapDiagonal ( matrix ) :				    def swapDiagonal ( matrix ) :				  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
  i < N ;						      	      matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \   	    swap ( matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1  
  i ++ ) swap ( matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 		  matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]   								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
double arcLength ( double diameter , double angle ) {	      def arcLength ( diameter , angle ) :			    def arcLength ( diameter , angle ) :			  script_not_found : None
  double pi = 22.0 / 7.0 ;				      	  if angle >= 360 :					    	pi = 22.0 / 7.0						  
  double arc ;						      	      print ( "Angle cannot be formed" )		    	arc = None						  
  if ( angle >= 360 ) {					      	      return 0						    	if angle >= 360 :					  
    cout << "Angle cannot" , " be formed" ;		      	  else :						    	    print ( 'Angle cannot' , ' be formed' )		  
    return 0 ;						      	      arc = ( 3.142857142857143 * diameter ) * ( angle / 36 	    return None						  
  }							      	      return arc					    	else :							  
  else {						      								    	    arc = ( pi * diameter ) * ( angle / 360.0 )		  
    arc = ( pi * diameter ) * ( angle / 360.0 ) ;	      								    	    return arc						  
    return arc ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
int breakSum ( int n ) {				      def breakSum ( n ) :					    def break_sum ( n ) :					  error : Traceback (most recent call last):   File
  if ( n == 0 || n == 1 ) return n ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  "dump/transcoder/eval/cpp_python/model_1/transcode
  return max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 ) + br 	      return n						    	    return n						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
}							      	  return max ( ( breakSum ( n // 2 ) + breakSum ( n // 3 )  	return max ( ( break_sum ( n / 2 ) + break_sum ( n / 3 )  /RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM.
							      								    								  py", line 44, in <module>	if f_filled(*paramet
							      								    								  ers_set) == f_gold(*parameters_set):	 File "dump/
							      								    								  transcoder/eval/cpp_python/model_1/transcoder_eval
							      								    								  /20642414/eval_scripts/cpp_sa-python_sa.test/RECUR
							      								    								  SIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM.py", l
							      								    								  ine 26, in f_filled	  return max ( ( f_filled (
							      								    								  n / 2 ) + f_filled ( n / 3 ) + f_filled ( n / 4 )
							      								    								  ) , n )   File "dump/transcoder/eval/cpp_python/mo
							      								    								  del_1/transcoder_eval/20642414/eval_scripts/cpp_sa
							      								    								  -python_sa.test/RECURSIVELY_BREAK_NUMBER_3_PARTS_G
							      								    								  ET_MAXIMUM_SUM.py", line 26, in f_filled     retur
							      								    								  n max ( ( f_filled ( n / 2 ) + f_filled ( n / 3 )
							      								    								  + f_filled ( n / 4 ) ) , n )	 File "dump/transcod
							      								    								  er/eval/cpp_python/model_1/transcoder_eval/2064241
							      								    								  4/eval_scripts/cpp_sa-python_sa.test/RECURSIVELY_B
							      								    								  REAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM.py", line 26,
							      								    								  in f_filled	  return max ( ( f_filled ( n / 2 )
							      								    								  + f_filled ( n / 3 ) + f_filled ( n / 4 ) ) , n )
							      								    								    [Previous line repeated 994 more times]   File "
							      								    								  dump/transcoder/eval/cpp_python/model_1/transcoder
							      								    								  _eval/20642414/eval_scripts/cpp_sa-python_sa.test/
							      								    								  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM.p
							      								    								  y", line 24, in f_filled     if n == 0 or n == 1 :
							      								    								   RecursionError: maximum recursion depth exceeded
							      								    								  in comparison
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
bool isDivBy9 ( int n ) {				      def isDivBy9 ( n ) :					    def isDivBy9 ( n ) :					  success : None
  if ( n == 0 || n == 9 ) return true ;			      	  if ( n == 0 or n == 9 ) :				    	if n == 0 or n == 9 :					  
  if ( n < 9 ) return false ;				      	      return True					    	    return True						  
  return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )  	  if ( n < 9 ) :					    	if n < 9 :						  
}							      	      return False					    	    return False					  
							      	  return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 )  	return isDivBy9 ( int ( n >> 3 ) - int ( n & 7 ) )	  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
bool isDivisible ( char str [ ] , int k ) {		      def isDivisible ( str , k ) :				    def isDivisible ( str , k ) :				  script_not_found : None
  int n = strlen ( str ) ;				      	  n = len ( str )					    	n = len ( str )						  
  int c = 0 ;						      	  c = 0							    	c = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , k ) :				    	for i in range ( k ) :					  
  i < k ;						      	      if ( str [ n - i - 1 ] == '0' ) :			    	    if str [ n - i - 1 ] == '0' :			  
  i ++ ) if ( str [ n - i - 1 ] == '0' ) c ++ ;		      		  c += 1					    		c += 1						  
  return ( c == k ) ;					      	  return ( c == k )					    	return ( c == k )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
int findSum ( int n ) {					      def findSum ( n ) :					    def findSum ( n ) :						  success : None
  n -- ;						      	  n -= 1						    	n -= 1							  
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  sum += ( n * ( n + 1 ) ) / 2 ;			      	  sum += ( n * ( n + 1 ) ) / 2				    	sum += ( n * ( n + 1 ) ) / 2				  
  sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;	      	  sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6		    	sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6		  
  return sum ;						      	  return int ( sum )					    	return sum						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
int findNth ( int n ) {					      def findNth ( n ) :					    def findNth ( n ) :						  success : None
  int nthElement = 19 + ( n - 1 ) * 9 ;			      	  nthElement = 19 + ( n - 1 ) * 9			    	nth_element = 19 + ( n - 1 ) * 9			  
  int outliersCount = ( int ) log10 ( nthElement ) - 1 ;      	  outliersCount = int ( math.log10 ( nthElement ) ) - 1	    	outliers_count = int ( math.log10 ( nth_element ) ) - 1	  
  nthElement += 9 * outliersCount ;			      	  nthElement += 9 * outliersCount			    	nth_element += 9 * outliers_count			  
  return nthElement ;					      	  return nthElement					    	return nth_element					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
unsigned long long int int decimalToBinary ( int N ) {	      def decimalToBinary ( N ) :				    def decimalToBinary ( N ) :					  error : Traceback (most recent call last):   File
  ull B_Number = 0 ;					      	  B_Number = 0						    	B_Number = 0						  "dump/transcoder/eval/cpp_python/model_1/transcode
  int cnt = 0 ;						      	  cnt = 0						    	cnt = 0							  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  while ( N != 0 ) {					      	  while ( N != 0 ) :					    	while N != 0 :						  /PROGRAM_DECIMAL_BINARY_CONVERSION_2.py", line 56,
    int rem = N % 2 ;					      	      rem = N % 2					    	    rem = N % 2						   in <module>	   if f_filled(*parameters_set) == f
    ull c = pow ( 10 , cnt ) ;				      	      c = pow ( 10 , cnt )				    	    c = pow ( 10 , cnt )				  _gold(*parameters_set):   File "dump/transcoder/ev
    B_Number += rem * c ;				      	      B_Number += rem * c				    	    B_Number += rem * c					  al/cpp_python/model_1/transcoder_eval/20642414/eva
    N /= 2 ;						      	      N //= 2						    	    N /= 2						  l_scripts/cpp_sa-python_sa.test/PROGRAM_DECIMAL_BI
    cnt ++ ;						      	      cnt += 1						    	    cnt += 1						  NARY_CONVERSION_2.py", line 34, in f_filled	  c
  }							      	  return B_Number					    	return B_Number						  = pow ( 10 , cnt ) OverflowError: math range error
  return B_Number ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
char first ( string str , int i = 0 ) {			      def first ( str , i ) :					    def first ( s , i = 0 ) :					  script_not_found : None
  if ( str [ i ] == '\0' ) return 0 ;			      	  if ( str [ i ] == '\0' ) :				    	if isinstance ( s , unicode ) :				  
  if ( isupper ( str [ i ] ) ) return str [ i ] ;	      	      return 0						    	    s = s.encode ( 'utf-8' )				  
  return first ( str , i + 1 ) ;			      	  if ( str [ i ].isupper ( ) ) :			    	if isSurrogatePair ( s ) :				  
}							      	      return str [ i ]					    	    return unichr ( ord ( s [ 0 ] ) ) , i + 1		  
							      	  return first ( str , i + 1 )				    	return s [ 0 ] , i + 1					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
string lexSmallest ( string a [ ] , int n ) {		      def lexSmallest ( a , n ) :				    def lexSmallest ( a , n ) :					  script_not_found : None
  sort ( a , a + n , compare ) ;			      	  a.sort ( reverse = True )				    	a.sort ( )						  
  string answer = "" ;					      	  answer = ""						    	answer = ""						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      answer += a [ i ]					    	    answer += a [ i ]					  
  i ++ ) answer += a [ i ] ;				      	  return answer						    	return answer						  
  return answer ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
int countSubStr ( char str [ ] ) {			      def countSubStr ( st , n ) :				    def countSubStr ( str ) :					  script_not_found : None
  int m = 0 ;						      	  m = 0							    	m = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for c in str :						  
  str [ i ] != '\0' ;					      	      if ( st [ i ] == '1' ) :				    	    if c == '1' :					  
  i ++ ) {						      		  m = m + 1					    		m += 1						  
    if ( str [ i ] == '1' ) m ++ ;			      	  return m * ( m - 1 ) // 2				    	return m * ( m - 1 ) / 2				  
  }							      								    								  
  return m * ( m - 1 ) / 2 ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
int remainder ( string str ) {				      def remainder ( st ) :					    def remainder ( str ) :					  script_not_found : None
  int len = str . length ( ) ;				      	  ln = len ( st )					    	"""Return the remainder of a string."""			  
  int num , rem = 0 ;					      	  rem = 0						    	try :							  
  for ( int i = 0 ;					      	  for i in range ( 0 , ln ) :				    	    num , rem = divmod ( str , 11 )			  
  i < len ;						      	      num = rem * 10 + ( int ) ( st [ i ] )		    	except ZeroDivisionError :				  
  i ++ ) {						      	      rem = num % 11					    	    return 0						  
    num = rem * 10 + ( str [ i ] - '0' ) ;		      	  return rem						    	return rem						  
    rem = num % 11 ;					      								    								  
  }							      								    								  
  return rem ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
int findRotations ( string str ) {			      def findRotations ( str ) :				    def findRotations ( str ) :					  failure : #Results: 9, 10
  string tmp = str + str ;				      	  tmp = str + str					    	tmp = str + str						  
  int n = str . length ( ) ;				      	  n = len ( str )					    	n = len ( str )						  
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      substring = tmp [ i : n ]				    	    substring = tmp [ i : i + len ( str ) ]		  
  i ++ ) {						      	      if ( str == substring ) :				    	    if str == substring :				  
    string substring = tmp . substr ( i , str . size ( ) ) ;  		  return i					    		return i					  
    if ( str == substring ) return i ;			      	  return n						    	return n						  
  }							      								    								  
  return n ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
void randomize ( int arr [ ] , int n ) {		      def randomize ( arr , n ) :				    def randomize ( arr , n ) :					  error : Traceback (most recent call last):   File
  srand ( time ( NULL ) ) ;				      	  for i in range ( n - 1 , 0 , - 1 ) :			    	random.seed ( )						  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int i = n - 1 ;					      	      j = random.randint ( 0 , i + 1 )			    	for i in range ( n - 1 , 0 , - 1 ) :			  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  i > 0 ;						      	      arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]	    	    j = random.randint ( 0 , i + 1 )			  /SHUFFLE_A_GIVEN_ARRAY.py", line 48, in <module>
  i -- ) {						      	  return arr						    	    swap ( arr [ i ] , arr [ j ] )			     if f_filled(*parameters_set) == f_gold(*paramet
    int j = rand ( ) % ( i + 1 ) ;			      								    								  ers_set):   File "dump/transcoder/eval/cpp_python/
    swap ( & arr [ i ] , & arr [ j ] ) ;		      								    								  model_1/transcoder_eval/20642414/eval_scripts/cpp_
  }							      								    								  sa-python_sa.test/SHUFFLE_A_GIVEN_ARRAY.py", line
}							      								    								  30, in f_filled     swap ( arr [ i ] , arr [ j ] )
							      								    								   NameError: name 'swap' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
double gcd ( double a , double b ) {			      def gcd ( a , b ) :					    def gcd ( a , b ) :						  script_not_found : None
  if ( a < b ) return gcd ( b , a ) ;			      	  if ( a < b ) :					    	if a < b :						  
  if ( fabs ( b ) < 0.001 ) return a ;			      	      return gcd ( b , a )				    	    return gcd ( b , a )				  
  else return ( gcd ( b , a - floor ( a / b ) * b ) ) ;	      	  if ( abs ( b ) < 0.001 ) :				    	if abs ( b ) < 0.001 :					  
}							      	      return a						    	    return a						  
							      	  else :						    	else :							  
							      	      return ( gcd ( b , a - math.floor ( a / b ) * b ) )   	    return ( gcd ( b , a - floor ( a / b ) * b ) )	  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
long long int countNonDecreasing ( int n ) {		      def countNonDecreasing ( n ) :				    def countNonDecreasing ( n ) :				  success : None
  int N = 10 ;						      	  N = 10						    	N = 10							  
  long long count = 1 ;					      	  count = 1						    	count = 1						  
  for ( int i = 1 ;					      	  for i in range ( 1 , n + 1 ) :			    	for i in range ( 1 , n + 1 ) :				  
  i <= n ;						      	      count = int ( count * ( N + i - 1 ) )		    	    count *= ( N + i - 1 )				  
  i ++ ) {						      	      count = int ( count / i )				    	    count /= i						  
    count *= ( N + i - 1 ) ;				      	  return count						    	return count						  
    count /= i ;					      								    								  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
int countRect ( int n ) {				      def countRect ( n ) :					    def countRect ( n ) :					  error : Traceback (most recent call last):   File
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int length = 1 ;				      	  for length in range ( 1 , int ( math.sqrt ( n ) ) + 1 ) : 	for length in range ( 1 , math.sqrt ( n ) + 1 ) :	  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  length <= sqrt ( n ) ;				      	      height = length					    	    for height in range ( length , height * length <= n ) /NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUA
  ++ length ) for ( int height = length ;		      	      while ( height * length <= n ) :			    		ans += 1					  RES.py", line 52, in <module>	    if f_filled(*par
  height * length <= n ;				      		  ans += 1					    	return ans						  ameters_set) == f_gold(*parameters_set):   File "d
  ++ height ) ans ++ ;					      		  height += 1					    								  ump/transcoder/eval/cpp_python/model_1/transcoder_
  return ans ;						      	  return ans						    								  eval/20642414/eval_scripts/cpp_sa-python_sa.test/N
}							      								    								  UMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARE
							      								    								  S.py", line 31, in f_filled	  for length in rang
							      								    								  e ( 1 , math.sqrt ( n ) + 1 ) : TypeError: 'float'
							      								    								   object cannot be interpreted as an integer
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
bool canMakeAllSame ( string str ) {			      def canMakeAllSame ( str ) :				    def canMakeAllSame ( str ) :				  error : Traceback (most recent call last):   File
  int zeros = 0 , ones = 0 ;				      	  zeros = 0						    	zeros , ones = 0 , 0					  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( char ch : str ) ( ch == '0' ) ? ++ zeros : ++ ones ;  	  ones = 0						    	for ch in str :						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  return ( zeros == 1 || ones == 1 ) ;			      	  for i in range ( 0 , len ( str ) ) :			    	    ( ch , ) = ( ord ( ch ) , ord ( ch ) )		  /CHANGE_BITS_CAN_MADE_ONE_FLIP.py", line 51, in <m
}							      	      ch = str [ i ]					    	return ( zeros == 1 or ones == 1 )			  odule>     if f_filled(*parameters_set) == f_gold(
							      	      if ( ch == '0' ) :				    								  *parameters_set):   File "dump/transcoder/eval/cpp
							      		  zeros = zeros + 1				    								  _python/model_1/transcoder_eval/20642414/eval_scri
							      	      else :						    								  pts/cpp_sa-python_sa.test/CHANGE_BITS_CAN_MADE_ONE
							      		  ones = ones + 1				    								  _FLIP.py", line 32, in f_filled     ( ch , ) = ( o
							      	  return ( zeros == 1 or ones == 1 )			    								  rd ( ch ) , ord ( ch ) ) ValueError: too many valu
							      								    								  es to unpack (expected 1)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
int fib ( int n ) {					      def fib ( n , lookup ) :					    def fib ( n ) :						  script_not_found : None
  if ( lookup [ n ] == NIL ) {				      	  if n == 0 or n == 1 :					    	if lookup [ n ] == NIL :				  
    if ( n <= 1 ) lookup [ n ] = n ;			      	      lookup [ n ] = n					    	    if n <= 1 :						  
    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	      	  if lookup [ n ] is None :				    		lookup [ n ] = n				  
  }							      	      lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , 	    else :						  
  return lookup [ n ] ;					      	  return lookup [ n ]					    		lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 )	  
}							      								    	return lookup [ n ]					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
int selectRandom ( int x ) {				      def selectRandom ( x ) :					    def selectRandom ( x ) :					  error : Traceback (most recent call last):   File
  static int res ;					      	  res = 0						    	global res						  "dump/transcoder/eval/cpp_python/model_1/transcode
  static int count = 0 ;				      	  count = 0						    	global count						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  count ++ ;						      	  count += 1						    	count += 1						  /SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE.
  if ( count == 1 ) res = x ;				      	  if ( count == 1 ) :					    	if count == 1 :						  py", line 58, in <module>	if f_filled(*paramet
  else {						      	      res = x						    	    res = x						  ers_set) == f_gold(*parameters_set):	 File "dump/
    int i = rand ( ) % count ;				      	  else :						    	else :							  transcoder/eval/cpp_python/model_1/transcoder_eval
    if ( i == count - 1 ) res = x ;			      	      i = random.randrange ( count )			    	    i = random.randint ( 0 , count )			  /20642414/eval_scripts/cpp_sa-python_sa.test/SELEC
  }							      	      if ( i == count - 1 ) :				    	    if i == count - 1 :					  T_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE.py", l
  return res ;						      		  res = x					    		res = x						  ine 33, in f_filled	  count += 1 NameError: name
}							      	  return res						    	return res						   'count' is not defined
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
void transpose ( int A [ ] [ N ] ) {			      def transpose ( A ) :					    def transpose ( A ) :					  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
  i < N ;						      	      for j in range ( i + 1 , N ) :			    	    for j in range ( i + 1 , N ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A 		swap ( A [ i ] [ j ] , A [ j ] [ i ] )		  
  j < N ;						      								    								  
  j ++ ) swap ( A [ i ] [ j ] , A [ j ] [ i ] ) ;	      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
void printSquares ( int n ) {				      def printSquares ( n ) :					    def print_squares ( n ) :					  script_not_found : None
  int square = 0 , prev_x = 0 ;				      	  square = 0 ; prev_x = 0 ;				    	square , prev_x = 0 , 0					  
  for ( int x = 0 ;					      	  for x in range ( 0 , n ) :				    	for x in range ( n ) :					  
  x < n ;						      	      square = ( square + x + prev_x )			    	    square = ( square + x + prev_x )			  
  x ++ ) {						      	      print ( square , end = " " )			    	    print ( square , end = ' ' )			  
    square = ( square + x + prev_x ) ;			      	      prev_x = x					    	    prev_x = x						  
    cout << square << " " ;				      								    								  
    prev_x = x ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
int firstFactorialDivisibleNumber ( int x ) {		      def firstFactorialDivisibleNumber ( x ) :			    def firstFactorialDivisibleNumber ( x ) :			  success : None
  int i = 1 ;						      	  i = 1							    	i = 1							  
  int fact = 1 ;					      	  fact = 1						    	fact = 1						  
  for ( i = 1 ;						      	  for i in range ( 1 , x ) :				    	for i in range ( 1 , x ) :				  
  i < x ;						      	      fact = fact * i					    	    fact = fact * i					  
  i ++ ) {						      	      if ( fact % x == 0 ) :				    	    if fact % x == 0 :					  
    fact = fact * i ;					      		  break						    		break						  
    if ( fact % x == 0 ) break ;			      	  return i						    	return i						  
  }							      								    								  
  return i ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
int getInvCount ( int arr [ ] , int n ) {		      def getInvCount ( arr , n ) :				    def getInvCount ( arr , n ) :				  script_not_found : None
  int inv_count = 0 ;					      	  inv_count = 0						    	inv_count = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  if ( arr [ i ] > arr [ j ] ) :		    		if arr [ i ] > arr [ j ] :			  
  j < n ;						      		      inv_count += 1				    		    inv_count += 1				  
  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	      	  return inv_count					    	return inv_count					  
  return inv_count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
int countPairs ( int arr [ ] , int n ) {		      def countPairs ( arr , n ) :				    def countPairs ( arr , n ) :				  success : None
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  if ( arr [ i ] == arr [ j ] ) :		    		if arr [ i ] == arr [ j ] :			  
  j < n ;						      		      ans += 1					    		    ans += 1					  
  j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		      	  return ans						    	return ans						  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
void recursiveReverse ( string & str , int i = 0 ) {	      def recursiveReverse ( str , i = 0 ) :			    def recursive_reverse ( str , i = 0 ) :			  script_not_found : None
  int n = str . length ( ) ;				      	  n = len ( str )					    	n = len ( str )						  
  if ( i == n / 2 ) return ;				      	  if i == n // 2 :					    	if i == n // 2 :					  
  swap ( str [ i ] , str [ n - i - 1 ] ) ;		      	      return						    	    return						  
  recursiveReverse ( str , i + 1 ) ;			      	  str [ i ] , str [ n - i - 1 ] = str [ n - i - 1 ] , str [ 	swap ( str [ i ] , str [ n - i - 1 ] )			  
}							      	  recursiveReverse ( str , i + 1 )			    	recursive_reverse ( str , i + 1 )			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
int countInRange ( int arr [ ] , int n , int x , int y ) {    def countInRange ( arr , n , x , y ) :			    def countInRange ( arr , n , x , y ) :			  success : None
  int count = 0 ;					      	  count = 0 ;						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( arr [ i ] >= x and arr [ i ] <= y ) :	    	    if arr [ i ] >= x and arr [ i ] <= y :		  
  i ++ ) {						      		  count += 1					    		count += 1					  
    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;	      	  return count						    	return count						  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_MULTIPLICATION			      CHECK_INTEGER_OVERFLOW_MULTIPLICATION			    CHECK_INTEGER_OVERFLOW_MULTIPLICATION			  CHECK_INTEGER_OVERFLOW_MULTIPLICATION
--							      --							    --								  --
bool isOverflow ( long long a , long long b ) {		      def isOverflow ( a , b ) :				    def isOverflow ( a , b ) :					  failure : 37 999999999 39 92 14 19 14 88 #Results:
  if ( a == 0 || b == 0 ) return false ;		      	  if ( a == 0 or b == 0 ) :				    	if a == 0 or b == 0 :					   8, 10
  long long result = a * b ;				      	      return False					    	    return False					  
  if ( a == result / b ) return false ;			      	  result = a * b					    	result = a * b						  
  else return true ;					      	  if ( result >= 9223372036854775807 or result <= - 9223372 	if a == result / b :					  
}							      	      result = 0					    	    return False					  
							      	  if ( a == ( result // b ) ) :				    	else :							  
							      	      print ( result // b )				    	    return True						  
							      	      return False					    								  
							      	  else :						    								  
							      	      return True					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
bool checkcircle ( int r , int R , int r1 , int x1 , int y1 ) def checkcircle ( r , R , r1 , x1 , y1 ) :		    def checkcircle ( r , R , r1 , x1 , y1 ) :			  success : None
  int dis = sqrt ( x1 * x1 + y1 * y1 ) ;		      	  dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )		    	dis = math.sqrt ( x1 * x1 + y1 * y1 )			  
  return ( dis - r1 >= R && dis + r1 <= r ) ;		      	  return ( dis - r1 >= R and dis + r1 <= r )		    	return ( dis - r1 >= R and dis + r1 <= r )		  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_OCTAL_DECIMAL_CONVERSION			      PROGRAM_OCTAL_DECIMAL_CONVERSION				    PROGRAM_OCTAL_DECIMAL_CONVERSION				  PROGRAM_OCTAL_DECIMAL_CONVERSION
--							      --							    --								  --
int octalToDecimal ( int n ) {				      def octalToDecimal ( n ) :				    def octal_to_decimal ( n ) :				  failure : #Results: 0, 10
  int num = n ;						      	  num = n						    	num = n							  
  int dec_value = 0 ;					      	  dec_value = 0						    	dec_value = 0						  
  int base = 1 ;					      	  base = 1						    	base = 1						  
  int temp = num ;					      	  temp = num						    	temp = num						  
  while ( temp ) {					      	  while ( temp ) :					    	while temp :						  
    int last_digit = temp % 10 ;			      	      last_digit = temp % 10				    	    last_digit = temp % 10				  
    temp = temp / 10 ;					      	      temp = int ( temp / 10 )				    	    temp = temp / 10					  
    dec_value += last_digit * base ;			      	      dec_value += last_digit * base			    	    dec_value += last_digit * base			  
    base = base * 8 ;					      	      base = base * 8					    	    base = base * 8					  
  }							      	  return dec_value					    	return dec_value					  
  return dec_value ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
bool isSymmetric ( int mat [ ] [ MAX ] , int N ) {	      def isSymmetric ( mat , N ) :				    def isSymmetric ( mat , N ) :				  success : None
  for ( int i = 0 ;					      	  for i in range ( N ) :				    	for i in range ( N ) :					  
  i < N ;						      	      for j in range ( N ) :				    	    for j in range ( N ) :				  
  i ++ ) for ( int j = 0 ;				      		  if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :	    		if mat [ i ] [ j ] != mat [ j ] [ i ] :		  
  j < N ;						      		      return False				    		    return False				  
  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal 	  return True						    	return True						  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
void shuffle ( int card [ ] , int n ) {			      def shuffle ( card , n ) :				    def shuffle ( card , n ) :					  script_not_found : None
  srand ( time ( 0 ) ) ;				      	  for i in range ( n ) :				    	random.seed ( 0 )					  
  for ( int i = 0 ;					      	      r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )    	for i in range ( n ) :					  
  i < n ;						      	      tmp = card [ i ]					    	    r = i + ( random.randint ( 0 , 52 - i ) )		  
  i ++ ) {						      	      card [ i ] = card [ r ]				    	    swap ( card [ i ] , card [ r ] )			  
    int r = i + ( rand ( ) % ( 52 - i ) ) ;		      	      card [ r ] = tmp					    								  
    swap ( card [ i ] , card [ r ] ) ;			      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET
--							      --							    --								  --
int minRevolutions ( double r , int x1 , int y1 , int x2 , in def minRevolutions ( r , x1 , y1 , x2 , y2 ) :		    def minRevolutions ( r , x1 , y1 , x2 , y2 ) :		  script_not_found : None
  double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 	  d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 	d = math.sqrt ( ( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2 )	  
  return ceil ( d / ( 2 * r ) ) ;			      	  return math.ceil ( d // ( 2 * r ) )			    	return math.ceil ( d / ( 2 * r ) )			  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
int countCommon ( int mat [ ] [ MAX ] , int n ) {	      def countCommon ( mat , n ) :				    def countCommon ( mat , n ) :				  success : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	    	    if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :	  
  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re 		  res = res + 1					    		res += 1					  
  return res ;						      	  return res						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
bool isPrime ( int n , int i = 2 ) {			      def isPrime ( n , i = 2 ) :				    def isPrime ( n , i = 2 ) :					  script_not_found : None
  if ( n <= 2 ) return ( n == 2 ) ? true : false ;	      	  if ( n <= 2 ) :					    	if n <= 2 :						  
  if ( n % i == 0 ) return false ;			      	      return True if ( n == 2 ) else False		    	    return ( n == 2 )					  
  if ( i * i > n ) return true ;			      	  if ( n % i == 0 ) :					    	if n % i == 0 :						  
  return isPrime ( n , i + 1 ) ;			      	      return False					    	    return False					  
}							      	  if ( i * i > n ) :					    	if i * i > n :						  
							      	      return true					    	    return True						  
							      	  return isPrime ( n , i + 1 )				    	return isPrime ( n , i + 1 )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
int maxProd ( int n ) {					      def maxProd ( n ) :					    def maxProd ( n ) :						  success : None
  if ( n == 2 || n == 3 ) return ( n - 1 ) ;		      	  if ( n == 2 or n == 3 ) :				    	if n == 2 or n == 3 :					  
  int res = 1 ;						      	      return ( n - 1 )					    	    return ( n - 1 )					  
  while ( n > 4 ) {					      	  res = 1						    	res = 1							  
    n -= 3 ;						      	  while ( n > 4 ) :					    	while n > 4 :						  
    res *= 3 ;						      	      n -= 3						    	    n -= 3						  
  }							      	      res *= 3						    	    res *= 3						  
  return ( n * res ) ;					      	  return ( n * res )					    	return ( n * res )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
int minTime ( int arr [ ] , int n , int m ) {		      def minTime ( arr , n , m ) :				    def minTime ( arr , n , m ) :				  script_not_found : None
  int t = 0 ;						      	  t = 0							    	t = 0							  
  while ( 1 ) {						      	  while ( 1 ) :						    	while 1 :						  
    int items = 0 ;					      	      items = 0						    	    items = 0						  
    for ( int i = 0 ;					      	      for i in range ( n ) :				    	    for i in range ( n ) :				  
    i < n ;						      		  items += ( t // arr [ i ] )			    		items += ( t / arr [ i ] )			  
    i ++ ) items += ( t / arr [ i ] ) ;			      	      if ( items >= m ) :				    	    if items >= m :					  
    if ( items >= m ) return t ;			      		  return t					    		return t					  
    t ++ ;						      	      t += 1						    	    t += 1						  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
bool isPossibleTriangle ( int arr [ ] , int N ) {	      def isPossibleTriangle ( arr , N ) :			    def isPossibleTriangle ( arr , N ) :			  failure : #Results: 7, 10
  if ( N < 3 ) return false ;				      	  if N < 3 :						    	if N < 3 :						  
  sort ( arr , arr + N ) ;				      	      return False					    	    return False					  
  for ( int i = 0 ;					      	  arr.sort ( )						    	arr.sort ( )						  
  i < N - 2 ;						      	  for i in range ( N - 2 ) :				    	for i in range ( N - 2 ) :				  
  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret 	      if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	    	    if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :	  
}							      		  return True					    		return True					  
							      								    	return False						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
int middleOfThree ( int a , int b , int c ) {		      def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , c ) :				  failure : #Results: 4, 10
  int x = a - b ;					      	  x = a - b						    	x = a - b						  
  int y = b - c ;					      	  y = b - c						    	y = b - c						  
  int z = a - c ;					      	  z = a - c						    	z = a - c						  
  if ( x * y > 0 ) return b ;				      	  if x * y > 0 :					    	if x * y > 0 :						  
  else if ( x * z > 0 ) return c ;			      	      return b						    	    return b						  
  else return a ;					      	  elif ( x * z > 0 ) :					    	elif x * z > 0 :					  
}							      	      return						    	    return c						  
							      	  else :						    	else :							  
							      	      return a						    	    return a						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
int findRepeating ( int arr [ ] , int n ) {		      def findRepeating ( arr , n ) :				    def findRepeating ( arr , n ) :				  script_not_found : None
  unordered_set < int > s ;				      	  s = set ( )						    	s = set ( )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if arr [ i ] in s :				    	    if s.issubset ( arr [ i ] ) :			  
  i ++ ) {						      		  return arr [ i ]				    		return arr [ i ]				  
    if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ 	      s.add ( arr [ i ] )				    	    s.add ( arr [ i ] )					  
    s . insert ( arr [ i ] ) ;				      	  rteurn - 1						    	return - 1						  
  }							      								    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
double maxArea ( double a , double b , double c , double d )  def maxArea ( a , b , c , d ) :				    def maxArea ( a , b , c , d ) :				  script_not_found : None
  double semiperimeter = ( a + b + c + d ) / 2 ;	      	  semiperimeter = ( a + b + c + d ) / 2			    	semiperimeter = ( a + b + c + d ) / 2			  
  return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) 	  return math.sqrt ( ( semiperimeter - a ) * ( semiperimete 	return math.sqrt ( ( semiperimeter - a ) ** 2 + ( semiper 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
int findDigits ( int n ) {				      def findDigits ( n ) :					    def findDigits ( n ) :					  success : None
  if ( n < 0 ) return 0 ;				      	  if ( n < 0 ) :					    	if n < 0 :						  
  if ( n <= 1 ) return 1 ;				      	      return 0						    	    return 0						  
  double digits = 0 ;					      	  if ( n <= 1 ) :					    	if n <= 1 :						  
  for ( int i = 2 ;					      	      return 1						    	    return 1						  
  i <= n ;						      	  digits = 0						    	digits = 0						  
  i ++ ) digits += log10 ( i ) ;			      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
  return floor ( digits ) + 1 ;				      	      digits += math.log10 ( i )			    	    digits += math.log10 ( i )				  
}							      	  return math.floor ( digits ) + 1			    	return math.floor ( digits ) + 1			  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
bool isInorder ( int arr [ ] , int n ) {		      def isInorder ( arr , n ) :				    def isInorder ( arr , n ) :					  success : None
  if ( n == 0 || n == 1 ) return true ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  for ( int i = 1 ;					      	      return True					    	    return True						  
  i < n ;						      	  for i in range ( 1 , n , 1 ) :			    	for i in range ( 1 , n ) :				  
  i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;      	      if ( arr [ i - 1 ] > arr [ i ] ) :		    	    if arr [ i - 1 ] > arr [ i ] :			  
  return true ;						      		  return False					    		return False					  
}							      	  return True						    	return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_MAJORITY_ELEMENT				      CHECK_ARRAY_MAJORITY_ELEMENT				    CHECK_ARRAY_MAJORITY_ELEMENT				  CHECK_ARRAY_MAJORITY_ELEMENT
--							      --							    --								  --
bool isMajority ( int a [ ] , int n ) {			      def isMajority ( a ) :					    def isMajority ( a , n ) :					  script_not_found : None
  unordered_map < int , int > mp ;			      	  mp = { }						    	mp = { }						  
  for ( int i = 0 ;					      	  for i in a :						    	for i in range ( n ) :					  
  i < n ;						      	      if i in mp : mp [ i ] += 1			    	    mp [ a [ i ] ] += 1					  
  i ++ ) mp [ a [ i ] ] ++ ;				      	      else : mp [ i ] = 1				    	for x in mp :						  
  for ( auto x : mp ) if ( x . second >= n / 2 ) return true  	  for x in mp :						    	    if x [ 1 ] >= n / 2 :				  
  return false ;					      	      if mp [ x ] >= len ( a ) // 2 :			    		return True					  
}							      		  return True					    	return False						  
							      	  return False						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
public : int findStep ( int n ) {			      def findStep ( n ) :					    def find_step ( n ) :					  script_not_found : None
  if ( n == 1 || n == 0 ) return 1 ;			      	  if ( n == 1 or n == 0 ) :				    	if n == 1 or n == 0 :					  
  else if ( n == 2 ) return 2 ;				      	      return 1						    	    return 1						  
  else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS 	  elif ( n == 2 ) :					    	elif n == 2 :						  
}							      	      return 2						    	    return 2						  
							      	  else :						    	else :							  
							      	      return findStep ( n - 3 ) + findStep ( n - 2 ) + find 	    return find_step ( n - 3 ) + find_step ( n - 2 ) + fi 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			      NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			    NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			  NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
int findPosition ( int k , int n ) {			      def findPosition ( k , n ) :				    def findPosition ( k , n ) :				  error : Traceback (most recent call last):   File
  unsigned long long int f1 = 0 , f2 = 1 , f3 ;		      	  f1 = 0						    	f1 , f2 , f3 = 0 , 1 , 0				  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int i = 2 ;					      	  f2 = 1						    	for i in range ( 2 , MAX ) :				  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  i <= MAX ;						      	  i = 2							    	    f3 = f1 + f2					  /NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES.py", line 55
  i ++ ) {						      	  while i != 0 :					    	    f1 , f2 , f3 = f2 , f3				  , in <module>	    if f_filled(*parameters_set) ==
    f3 = f1 + f2 ;					      	      f3 = f1 + f2					    	    if f2 % k == 0 :					  f_gold(*parameters_set):   File "dump/transcoder/e
    f1 = f2 ;						      	      f1 = f2						    		return n * i					  val/cpp_python/model_1/transcoder_eval/20642414/ev
    f2 = f3 ;						      	      f2 = f3						    								  al_scripts/cpp_sa-python_sa.test/NTH_MULTIPLE_NUMB
    if ( f2 % k == 0 ) return n * i ;			      	      if f2 % k == 0 :					    								  ER_FIBONACCI_SERIES.py", line 33, in f_filled
  }							      		  return n * i					    								  for i in range ( 2 , MAX ) : NameError: name 'MAX'
}							      	      i += 1						    								   is not defined
							      	  return						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
int minimum_cost ( int a [ ] , int n ) {		      def minimum_cost ( a , n ) :				    def minimum_cost ( a , n ) :				  error : Traceback (most recent call last):   File
  int mn = INT_MAX ;					      	  mn = sys.maxsize					    	mn = sys.maxint						  "dump/transcoder/eval/cpp_python/model_1/transcode
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  /MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_A
  i < n ;						      	      mn = min ( a [ i ] , mn )				    	    mn = min ( a [ i ] , mn )				  RRAY.py", line 52, in <module>     if f_filled(*pa
  i ++ ) {						      	      sum += a [ i ]					    	    sum += a [ i ]					  rameters_set) == f_gold(*parameters_set):   File "
    mn = min ( a [ i ] , mn ) ;				      	  return mn * ( sum - mn )				    	return mn * ( sum - mn )				  dump/transcoder/eval/cpp_python/model_1/transcoder
    sum += a [ i ] ;					      								    								  _eval/20642414/eval_scripts/cpp_sa-python_sa.test/
  }							      								    								  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_AR
  return mn * ( sum - mn ) ;				      								    								  RAY.py", line 29, in f_filled	    mn = sys.maxint
}							      								    								  AttributeError: module 'sys' has no attribute 'max
							      								    								  int'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
int kthdigit ( int a , int b , int k ) {		      def kthdigit ( a , b , k ) :				    def kthdigit ( a , b , k ) :				  failure : #Results: 9, 10
  int p = pow ( a , b ) ;				      	  p = a ** b						    	p = pow ( a , b )					  
  int count = 0 ;					      	  count = 0						    	count = 0						  
  while ( p > 0 && count < k ) {			      	  while ( p > 0 and count < k ) :			    	while p > 0 and count < k :				  
    int rem = p % 10 ;					      	      rem = p % 10					    	    rem = p % 10					  
    count ++ ;						      	      count = count + 1					    	    count += 1						  
    if ( count == k ) return rem ;			      	      if ( count == k ) :				    	    if count == k :					  
    p = p / 10 ;					      		  return rem					    		return rem					  
  }							      	      p = p / 10					    	    p = p / 10						  
  return 0 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
int numberOfWays ( int x ) {				      def numberOfWays ( x ) :					    def numberOfWays ( x ) :					  script_not_found : None
  int dp [ x + 1 ] ;					      	  if x == 0 or x == 1 :					    	dp = [ 0 ] * ( x + 1 )					  
  dp [ 0 ] = dp [ 1 ] = 1 ;				      	      return 1						    	dp [ 0 ] = dp [ 1 ] = 1					  
  for ( int i = 2 ;					      	  else :						    	for i in range ( 2 , x + 1 ) :				  
  i <= x ;						      	      return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberO 	    dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]	  
  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 								    	return dp [ x ]						  
  return dp [ x ] ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
int sumNodes ( int l ) {				      def sumNodes ( l ) :					    def sumNodes ( l ) :					  success : None
  int leafNodeCount = pow ( 2 , l - 1 ) ;		      	  leafNodeCount = math.pow ( 2 , l - 1 )		    	leafNodeCount = math.pow ( 2 , l - 1 )			  
  int sumLastLevel = 0 ;				      	  sumLastLevel = 0					    	sumLastLevel = 0					  
  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /  	  sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 )  	sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) )  
  int sum = sumLastLevel * l ;				      	  sum = sumLastLevel * l				    	sum = sumLastLevel * l					  
  return sum ;						      	  return int ( sum )					    	return sum						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
int leonardo ( int n ) {				      def leonardo ( n ) :					    def leonardo ( n ) :					  success : None
  int dp [ n + 1 ] ;					      	  dp = [ ]						    	dp = [ 0 ] * ( n + 1 )					  
  dp [ 0 ] = dp [ 1 ] = 1 ;				      	  dp.append ( 1 )					    	dp [ 0 ] = dp [ 1 ] = 1					  
  for ( int i = 2 ;					      	  dp.append ( 1 )					    	for i in range ( 2 , n + 1 ) :				  
  i <= n ;						      	  for i in range ( 2 , n + 1 ) :			    	    dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1		  
  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;	      	      dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 )	    	return dp [ n ]						  
  return dp [ n ] ;					      	  return dp [ n ]					    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
void add ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N  def add ( A , B , C ) :					    def add ( A , B , C ) :					  script_not_found : None
  int i , j ;						      	  for i in range ( N ) :				    	i , j = A.shape						  
  for ( i = 0 ;						      	      for j in range ( N ) :				    	for i in range ( N ) :					  
  i < N ;						      		  C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]	    	    for j in range ( N ) :				  
  i ++ ) for ( j = 0 ;					      								    		C [ i , j ] = A [ i , j ] + B [ i , j ]		  
  j < N ;						      								    								  
  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
bool arraySortedOrNot ( int arr [ ] , int n ) {		      def arraySortedOrNot ( arr , n ) :			    def arraySortedOrNot ( arr , n ) :				  success : None
  if ( n == 0 || n == 1 ) return true ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  for ( int i = 1 ;					      	      return True					    	    return True						  
  i < n ;						      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;      	      if ( arr [ i - 1 ] > arr [ i ] ) :		    	    if arr [ i - 1 ] > arr [ i ] :			  
  return true ;						      		  return False					    		return False					  
}							      	  return True						    	return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
long long int findSum ( int n ) {			      def findSum ( n ) :					    def findSum ( n ) :						  success : None
  long long int multiTerms = n * ( n + 1 ) / 2 ;	      	  multiTerms = n * ( n + 1 ) // 2			    	multiTerms = n * ( n + 1 ) / 2				  
  long long int sum = multiTerms ;			      	  sm = multiTerms					    	sum = multiTerms					  
  for ( int i = 2 ;					      	  for i in range ( 2 , n + 1 ) :			    	for i in range ( 2 , n + 1 ) :				  
  i <= n ;						      	      multiTerms = multiTerms - ( i - 1 )		    	    multiTerms = multiTerms - ( i - 1 )			  
  i ++ ) {						      	      sm = sm + multiTerms * i				    	    sum = sum + multiTerms * i				  
    multiTerms = multiTerms - ( i - 1 ) ;		      	  return sm						    	return sum						  
    sum = sum + multiTerms * i ;			      								    								  
  }							      								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
bool isCornerPresent ( string str , string corner ) {	      def isCornerPresent ( str , corner ) :			    def isCornerPresent ( str , corner ) :			  success : None
  int n = str . length ( ) ;				      	  n = len ( str )					    	n = len ( str )						  
  int cl = corner . length ( ) ;			      	  cl = len ( corner )					    	cl = len ( corner )					  
  if ( n < cl ) return false ;				      	  if ( n < cl ) :					    	if n < cl :						  
  return ( str . substr ( 0 , cl ) . compare ( corner ) == 0  	      return False					    	    return False					  
}							      	  return ( ( str [ : cl ] == corner ) and ( str [ n - cl :  	return ( str [ : cl ].lower ( ) == corner.lower ( ) and s 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {		      def isDiagonalMatrix ( mat ) :				    def isDiagonalMatrix ( mat ) :				  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( 0 , N ) :				    	for i in range ( N ) :					  
  i < N ;						      	      for j in range ( 0 , N ) :			    	    for j in range ( N ) :				  
  i ++ ) for ( int j = 0 ;				      		  if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :  		if ( i != j ) :					  
  j < N ;						      		      return False				    		    return False				  
  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 	  return True						    	return True						  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
int minimumflip ( int mat [ ] [ N ] , int n ) {		      def minimumflip ( mat , n ) :				    def minimumflip ( mat , n ) :				  success : identical to gold
  int flip = 0 ;					      	  flip = 0						    	flip = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i ) :				    	    for j in range ( i ) :				  
  i ++ ) for ( int j = 0 ;				      		  if mat [ i ] [ j ] != mat [ j ] [ i ] :	    		if mat [ i ] [ j ] != mat [ j ] [ i ] :		  
  j < i ;						      		      flip += 1					    		    flip += 1					  
  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;  	  return flip						    	return flip						  
  return flip ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
int findIndex ( int n ) {				      def findIndex ( n ) :					    def findIndex ( n ) :					  error : Traceback (most recent call last):   File
  if ( n <= 1 ) return n ;				      	  if ( n <= 1 ) :					    	if n <= 1 :						  "dump/transcoder/eval/cpp_python/model_1/transcode
  int a = 0 , b = 1 , c = 1 ;				      	      return n						    	    return n						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  int res = 1 ;						      	  a = 0							    	a , b , c = 0 , 1 , 1					  /FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME.p
  while ( c < n ) {					      	  b = 1							    	res = 1							  y", line 59, in <module>     if f_filled(*paramete
    c = a + b ;						      	  c = 1							    	while c < n :						  rs_set) == f_gold(*parameters_set):	File "dump/t
    res ++ ;						      	  res = 1						    	    c = a + b						  ranscoder/eval/cpp_python/model_1/transcoder_eval/
    a = b ;						      	  while ( c < n ) :					    	    res += 1						  20642414/eval_scripts/cpp_sa-python_sa.test/FIND_I
    b = c ;						      	      c = a + b						    	    a , b , c = b , c					  NDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME.py", lin
  }							      	      res = res + 1					    	return res						  e 40, in f_filled	a , b , c = b , c ValueError
  return res ;						      	      a = b						    								  : not enough values to unpack (expected 3, got 2)
}							      	      b = c						    								  
							      	  return res						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
void constructArr ( int arr [ ] , int pair [ ] , int n ) {    def constructArr ( arr , pair , n ) :			    def constructArr ( arr , pair , n ) :			  script_not_found : None
  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /  	  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] )  	arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] )  
  for ( int i = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  i < n ;						      	      arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		    	    arr [ i ] = pair [ i - 1 ] - arr [ 0 ]		  
  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;	      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
bool checkMarkov ( double m [ ] [ n ] ) {		      def checkMarkov ( m ) :					    def checkMarkov ( m ) :					  error : Traceback (most recent call last):   File
  for ( int i = 0 ;					      	  for i in range ( 0 , len ( m ) ) :			    	for i in range ( n ) :					  "dump/transcoder/eval/cpp_python/model_1/transcode
  i < n ;						      	      sm = 0						    	    sum = 0						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  i ++ ) {						      	      for j in range ( 0 , len ( m [ i ] ) ) :		    	    for j in range ( n ) :				  /MARKOV_MATRIX.py", line 52, in <module>     if f_
    double sum = 0 ;					      		  sm = sm + m [ i ] [ j ]			    		sum = sum + m [ i ] [ j ]			  filled(*parameters_set) == f_gold(*parameters_set)
    for ( int j = 0 ;					      	      if ( sm != 1 ) :					    	    if sum != 1 :					  :   File "dump/transcoder/eval/cpp_python/model_1/
    j < n ;						      		  return False					    		return False					  transcoder_eval/20642414/eval_scripts/cpp_sa-pytho
    j ++ ) sum = sum + m [ i ] [ j ] ;			      	  return True						    	return True						  n_sa.test/MARKOV_MATRIX.py", line 28, in f_filled
    if ( sum != 1 ) return false ;			      								    								      for i in range ( n ) : NameError: name 'n' is
  }							      								    								  not defined
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
double findMod ( double a , double b ) {		      def findMod ( a , b ) :					    def findMod ( a , b ) :					  success : None
  double mod ;						      	  if ( a < 0 ) :					    	mod = 0							  
  if ( a < 0 ) mod = - a ;				      	      a = - a						    	if a < 0 :						  
  else mod = a ;					      	  if ( b < 0 ) :					    	    mod = - a						  
  if ( b < 0 ) b = - b ;				      	      b = - b						    	else :							  
  while ( mod >= b ) mod = mod - b ;			      	  mod = a						    	    mod = a						  
  if ( a < 0 ) return - mod ;				      	  while ( mod >= b ) :					    	if b < 0 :						  
  return mod ;						      	      mod = mod - b					    	    b = - b						  
}							      	  if ( a < 0 ) :					    	while mod >= b :					  
							      	      return - mod					    	    mod = mod - b					  
							      	  return mod						    	if a < 0 :						  
							      								    	    return - mod					  
							      								    	return mod						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE			  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
void recursiveReverse ( string & str ) {		      def recursiveReverse ( str ) :				    def recursive_reverse ( str ) :				  failure : #Results: 6, 10
  stack < char > st ;					      	  stack = [ ]						    	st = [ ]						  
  for ( int i = 0 ;					      	  for i in range ( len ( str ) ) :			    	for char in str :					  
  i < str . length ( ) ;				      	      stack.append ( str [ i ] )			    	    st.append ( char )					  
  i ++ ) st . push ( str [ i ] ) ;			      	  for i in range ( len ( str ) ) :			    	for char in str :					  
  for ( int i = 0 ;					      	      str [ i ] = stack.pop ( )				    	    str [ : ] = st [ : ]				  
  i < str . length ( ) ;				      								    	    st.reverse ( )					  
  i ++ ) {						      								    	return str						  
    str [ i ] = st . top ( ) ;				      								    								  
    st . pop ( ) ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
void multiply ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] def multiply ( A , B , C ) :				    def multiply ( A , B , C ) :				  script_not_found : None
  int i , j ;						      	  for i in range ( N ) :				    	i , j = A.shape						  
  for ( i = 0 ;						      	      for j in range ( N ) :				    	for i in range ( N ) :					  
  i < N ;						      		  C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]	    	    for j in range ( N ) :				  
  i ++ ) for ( j = 0 ;					      								    		C [ i , j ] = A [ i , j ] - B [ i , j ]		  
  j < N ;						      								    								  
  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	      MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
int minValue ( int A [ ] , int B [ ] , int n ) {	      def minValue ( A , B , n ) :				    def minValue ( A , B , n ) :				  failure : #Results: 5, 10
  sort ( A , A + n ) ;					      	  sorted ( A )						    	A = sorted ( A )					  
  sort ( B , B + n ) ;					      	  sorted ( B )						    	B = sorted ( B )					  
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      result += ( A [ i ] * B [ n - i - 1 ] )		    	    result += ( A [ i ] * B [ n - i - 1 ] )		  
  i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ;	      	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
string decToBin ( int n ) {				      def decToBin ( n ) :					    def decToBin ( n ) :					  success : None
  if ( n == 0 ) return "0" ;				      	  if ( n == 0 ) :					    	if n == 0 :						  
  string bin = "" ;					      	      return "0"					    	    return '0'						  
  while ( n > 0 ) {					      	  bin = ""						    	bin = ''						  
    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;	      	  while ( n > 0 ) :					    	while n > 0 :						  
    n >>= 1 ;						      	      if ( n & 1 == 0 ) :				    	    bin = ( ( n & 1 ) == 0 and '0' or '1' ) + bin	  
  }							      		  bin = '0' + bin				    	    n >>= 1						  
  return bin ;						      	      else :						    	return bin						  
}							      		  bin = '1' + bin				    								  
							      	      n = n >> 1					    								  
							      	  return bin						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
void rotateMatrix ( int mat [ ] [ N ] ) {		      def rotateMatrix ( mat ) :				    def rotateMatrix ( mat ) :					  script_not_found : None
  for ( int i = N - 1 ;					      	  i = N - 1						    	for i in range ( N - 1 , - 1 , - 1 ) :			  
  i >= 0 ;						      	  while ( i >= 0 ) :					    	    for j in range ( N - 1 , - 1 , - 1 ) :		  
  i -- ) {						      	      j = N - 1						    		print ( mat [ i ] [ j ] , end = ' ' )		  
    for ( int j = N - 1 ;				      	      while ( j >= 0 ) :				    	    print ( )						  
    j >= 0 ;						      		  print ( mat [ i ] [ j ] , end = " " )		    								  
    j -- ) printf ( "%d " , mat [ i ] [ j ] ) ;		      		  j = j - 1					    								  
    printf ( "\n" ) ;					      	      print ( )						    								  
  }							      	      i = i - 1						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA
--							      --							    --								  --
unsigned int russianPeasant ( unsigned int a , unsigned int b def russianPeasant ( a , b ) :				    def russian_peasant ( a , b ) :				  success : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  while ( b > 0 ) {					      	  while ( b > 0 ) :					    	while b > 0 :						  
    if ( b & 1 ) res = res + a ;			      	      if ( b & 1 ) :					    	    if b & 1 :						  
    a = a << 1 ;					      		  res = res + a					    		res = res + a					  
    b = b >> 1 ;					      	      a = a << 1					    	    a = a << 1						  
  }							      	      b = b >> 1					    	    b = b >> 1						  
  return res ;						      	  return res						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
void splitArr ( int arr [ ] , int n , int k ) {		      def splitArr ( arr , n , k ) :				    def splitArr ( arr , n , k ) :				  success : None
  for ( int i = 0 ;					      	  for i in range ( 0 , k ) :				    	for i in range ( k ) :					  
  i < k ;						      	      x = arr [ 0 ]					    	    x = arr [ 0 ]					  
  i ++ ) {						      	      for j in range ( 0 , n - 1 ) :			    	    for j in range ( n - 1 ) :				  
    int x = arr [ 0 ] ;					      		  arr [ j ] = arr [ j + 1 ]			    		arr [ j ] = arr [ j + 1 ]			  
    for ( int j = 0 ;					      	      arr [ n - 1 ] = x					    	    arr [ n - 1 ] = x					  
    j < n - 1 ;						      								    	return arr						  
    ++ j ) arr [ j ] = arr [ j + 1 ] ;			      								    								  
    arr [ n - 1 ] = x ;					      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
int CountPairs ( int n ) {				      def CountPairs ( n ) :					    def CountPairs ( n ) :					  failure : #Results: 0, 10
  int k = n ;						      	  k = n							    	k = n							  
  int imin = 1 ;					      	  imin = 1						    	imin = 1						  
  int ans = 0 ;						      	  ans = 0						    	ans = 0							  
  while ( imin <= n ) {					      	  while ( imin <= n ) :					    	while imin <= n :					  
    int imax = n / k ;					      	      imax = n / k					    	    imax = n // k					  
    ans += k * ( imax - imin + 1 ) ;			      	      ans += k * ( imax - imin + 1 )			    	    ans += k * ( imax - imin + 1 )			  
    imin = imax + 1 ;					      	      imin = imax + 1					    	    imin = imax + 1					  
    k = n / imin ;					      	      k = n / imin					    	    k = n // imin					  
  }							      	  return ans						    	return ans						  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION     DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	    DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
int lastPosition ( int n , int m , int k ) {		      def lastPosition ( n , m , k ) :				    def lastPosition ( n , m , k ) :				  failure : #Results: 5, 10
  if ( m <= n - k + 1 ) return m + k - 1 ;		      	  if ( m <= n - k + 1 ) :				    	if m <= n - k + 1 :					  
  m = m - ( n - k + 1 ) ;				      	      return m + k - 1					    	    return m + k - 1					  
  return ( m % n == 0 ) ? n : ( m % n ) ;		      	  m = m - ( n - k + 1 )					    	m = m - ( n - k + 1 )					  
}							      	  if ( m % n == 0 ) :					    	return ( m % n == 0 )					  
							      	      return n						    								  
							      	  else :						    								  
							      	      return m % n					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
int minimumSquare ( int a , int b ) {			      def minimumSquare ( a , b ) :				    def minimum_square ( a , b ) :				  error : Traceback (most recent call last):   File
  long long result = 0 , rem = 0 ;			      	  result = 0						    	result , rem = 0 , 0					  "dump/transcoder/eval/cpp_python/model_1/transcode
  if ( a < b ) swap ( a , b ) ;				      	  rem = 0						    	if a < b :						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  while ( b > 0 ) {					      	  if ( a < b ) :					    	    swap ( a , b )					  /PAPER_CUT_MINIMUM_NUMBER_SQUARES.py", line 56, in
    result += a / b ;					      	      a , b = b , a					    	while b > 0 :						   <module>	if f_filled(*parameters_set) == f_go
    long long rem = a % b ;				      	  while ( b > 0 ) :					    	    result += a / b					  ld(*parameters_set):	 File "dump/transcoder/eval/
    a = b ;						      	      result += int ( a / b )				    	    rem = a % b						  cpp_python/model_1/transcoder_eval/20642414/eval_s
    b = rem ;						      	      rem = int ( a % b )				    	    a , b = b , rem					  cripts/cpp_sa-python_sa.test/PAPER_CUT_MINIMUM_NUM
  }							      	      a = b						    	return result						  BER_SQUARES.py", line 33, in f_filled	    swap ( a
  return result ;					      	      b = rem						    								   , b ) NameError: name 'swap' is not defined
}							      	  return result						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
void printFibonacciNumbers ( int n ) {			      def printFibonacciNumbers ( n ) :				    def printFibonacciNumbers ( n ) :				  script_not_found : None
  int f1 = 0 , f2 = 1 , i ;				      	  f1 = 0						    	f1 , f2 , i = 0 , 1 , 1					  
  if ( n < 1 ) return ;					      	  f2 = 1						    	if n < 1 :						  
  for ( i = 1 ;						      	  if ( n < 1 ) :					    	    return						  
  i <= n ;						      	      return						    	for i in range ( 1 , n + 1 ) :				  
  i ++ ) {						      	  for x in range ( 0 , n ) :				    	    print ( f2 , end = ' ' )				  
    cout << f2 << " " ;					      	      print ( f2 , end = " " )				    	    next = f1 + f2					  
    int next = f1 + f2 ;				      	      next = f1 + f2					    	    f1 , f2 = f2 , next					  
    f1 = f2 ;						      	      f1 = f2						    								  
    f2 = next ;						      	      f2 = next						    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
string minLexRotation ( string str ) {			      def minLexRotation ( str_ ) :				    def minLexRotation ( str ) :				  failure : #Results: 1, 10
  int n = str . length ( ) ;				      	  n = len ( str_ )					    	n = len ( str )						  
  string arr [ n ] ;					      	  arr = [ 0 ] * n					    	arr = [ ]						  
  string concat = str + str ;				      	  concat = str_ + str_					    	concat = str + str					  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      arr [ i ] = concat [ i : n + i ]			    	    arr.append ( concat [ i : i + n ] )			  
  i ++ ) arr [ i ] = concat . substr ( i , n ) ;	      	  arr.sort ( )						    	arr.sort ( )						  
  sort ( arr , arr + n ) ;				      	  return arr [ 0 ]					    	return ''.join ( arr )					  
  return arr [ 0 ] ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  success : None
  int i = 0 ;						      	  i = 0							    	i = 0							  
  while ( i <= n - 1 ) {				      	  while ( i <= n - 1 ) :				    	while i <= n - 1 :					  
    if ( arr [ i ] == x ) return i ;			      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  
    i += abs ( arr [ i ] - x ) ;			      		  return i					    		return i					  
  }							      	      i += abs ( arr [ i ] - x )			    	    i += abs ( arr [ i ] - x )				  
  return - 1 ;						      	  return - 1						    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
int findHeight ( int * parent , int n ) {		      def findHeight ( parent , n ) :				    def findHeight ( parent , n ) :				  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      p = i						    	    p , current = i , 1					  
  i ++ ) {						      	      current = 1					    	    while parent [ p ] != - 1 :				  
    int p = i , current = 1 ;				      	      while ( parent [ p ] != - 1 ) :			    		current += 1					  
    while ( parent [ p ] != - 1 ) {			      		  current += 1					    		p = parent [ p ]				  
      current ++ ;					      		  p = parent [ p ]				    	    res = max ( res , current )				  
      p = parent [ p ] ;				      	      res = max ( res , current )			    	return res						  
    }							      	  return res						    								  
    res = max ( res , current ) ;			      								    								  
  }							      								    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER	  MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
int maxPrefix ( char s [ ] , char t [ ] ) {		      def maxPrefix ( s , t ) :					    def maxPrefix ( s , t ) :					  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , len ( t ) ) :			    	for c in t :						  
  i < strlen ( t ) ;					      	      if ( count == len ( s ) ) :			    	    if count == len ( s ) :				  
  i ++ ) {						      		  break						    		break						  
    if ( count == strlen ( s ) ) break ;		      	      if ( t [ i ] == s [ count ] ) :			    	    if c == s [ count ] :				  
    if ( t [ i ] == s [ count ] ) count ++ ;		      		  count = count + 1				    		count += 1					  
  }							      	  return count						    	return count						  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN
--							      --							    --								  --
int findMaximum ( int arr [ ] , int low , int high ) {	      def findMaximum ( arr , low , high ) :			    def findMaximum ( arr , low , high ) :			  failure : #Results: 5, 10
  int max = arr [ low ] ;				      	  max = arr [ low ]					    	max = arr [ low ]					  
  int i ;						      	  i = low						    	i = 0							  
  for ( i = low + 1 ;					      	  for i in range ( high + 1 ) :				    	for i in range ( low + 1 , high + 1 ) :			  
  i <= high ;						      	      if arr [ i ] > max :				    	    if arr [ i ] > max :				  
  i ++ ) {						      		  max = arr [ i ]				    		max = arr [ i ]					  
    if ( arr [ i ] > max ) max = arr [ i ] ;		      	  return max						    	    else :						  
    else break ;					      								    		break						  
  }							      								    	return max						  
  return max ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING	      CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		    CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		  CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING
--							      --							    --								  --
int findSum ( string str ) {				      def findSum ( str1 ) :					    def findSum ( str ) :					  script_not_found : None
  string temp = "" ;					      	  temp = ""						    	temp = ""						  
  int sum = 0 ;						      	  Sum = 0						    	sum = 0							  
  for ( char ch : str ) {				      	  for ch in str1 :					    	for ch in str :						  
    if ( isdigit ( ch ) ) temp += ch ;			      	      if ( ch.isdigit ( ) ) :				    	    if re.match ( "[0-9]+" , ch ) :			  
    else {						      		  temp += ch					    		temp += ch					  
      sum += atoi ( temp . c_str ( ) ) ;		      	      else :						    	    else :						  
      temp = "" ;					      		  Sum += int ( temp )				    		sum += int ( temp )				  
    }							      		  temp = "0"					    		temp = ""					  
  }							      	  return Sum + int ( temp )				    	return sum + int ( temp )				  
  return sum + atoi ( temp . c_str ( ) ) ;		      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
pair < double , double > mirrorImage ( double a , double b ,  def mirrorImage ( a , b , c , x1 , y1 ) :			    def mirror_image ( a , b , c , x1 , y1 ) :			  success : None
  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * 	  temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )  	temp = - 2 * ( a * x1 + b * y1 + c ) / ( a ** 2 + b ** 2  
  double x = temp * a + x1 ;				      	  x = temp * a + x1					    	x = temp * a + x1					  
  double y = temp * b + y1 ;				      	  y = temp * b + y1					    	y = temp * b + y1					  
  return make_pair ( x , y ) ;				      	  return ( x , y )					    	return ( x , y )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		      MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		    MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO			  MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
long long moduloMultiplication ( long long a , long long b ,  def moduloMultiplication ( a , b , mod ) :		    def moduloMultiplication ( a , b , mod ) :			  success : None
  long long res = 0 ;					      	  res = 0 ;						    	res = 0							  
  a %= mod ;						      	  a = a % mod ;						    	a %= mod						  
  while ( b ) {						      	  while ( b ) :						    	while b :						  
    if ( b & 1 ) res = ( res + a ) % mod ;		      	      if ( b & 1 ) :					    	    if b & 1 :						  
    a = ( 2 * a ) % mod ;				      		  res = ( res + a ) % mod ;			    		res = ( res + a ) % mod				  
    b >>= 1 ;						      	      a = ( 2 * a ) % mod ;				    	    a = ( 2 * a ) % mod					  
  }							      	      b >>= 1 ;						    	    b >>= 1						  
  return res ;						      	  return res ;						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1		    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1
--							      --							    --								  --
int subset ( int arr [ ] , int n ) {			      def subset ( arr , n ) :					    def subset ( arr , n ) :					  script_not_found : None
  unordered_map < int , int > mp ;			      	  mp = { i : 0 for i in range ( 10 ) }			    	mp = { }						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      mp [ arr [ i ] ] += 1				    	    mp [ arr [ i ] ] += 1				  
  i ++ ) mp [ arr [ i ] ] ++ ;				      	  res = 0						    	res = 0							  
  int res = 0 ;						      	  for key , value in mp.items ( ) :			    	for x in mp :						  
  for ( auto x : mp ) res = max ( res , x . second ) ;	      	      res = max ( res , value )				    	    res = max ( res , x [ 1 ] )				  
  return res ;						      	  return res						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
int findMinDiff ( int arr [ ] , int n ) {		      def findMinDiff ( arr , n ) :				    def findMinDiff ( arr , n ) :				  error : Traceback (most recent call last):   File
  sort ( arr , arr + n ) ;				      	  arr = sorted ( arr )					    	arr.sort ( )						  "dump/transcoder/eval/cpp_python/model_1/transcode
  int diff = INT_MAX ;					      	  diff = 10 ** 20					    	diff = Integer ( 0 )					  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  for ( int i = 0 ;					      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  /FIND_MINIMUM_DIFFERENCE_PAIR_1.py", line 50, in <
  i < n - 1 ;						      	      if arr [ i + 1 ] - arr [ i ] < diff :		    	    if arr [ i + 1 ] - arr [ i ] < diff :		  module>     if f_filled(*parameters_set) == f_gold
  i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ 		  diff = arr [ i + 1 ] - arr [ i ]		    		diff = arr [ i + 1 ] - arr [ i ]		  (*parameters_set):   File "dump/transcoder/eval/cp
  return diff ;						      	  return diff						    	return diff						  p_python/model_1/transcoder_eval/20642414/eval_scr
}							      								    								  ipts/cpp_sa-python_sa.test/FIND_MINIMUM_DIFFERENCE
							      								    								  _PAIR_1.py", line 28, in f_filled	diff = Integ
							      								    								  er ( 0 ) NameError: name 'Integer' is not defined
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
int countSquares ( int a , int b ) {			      def CountSquares ( a , b ) :				    def countSquares ( a , b ) :				  script_not_found : None
  int cnt = 0 ;						      	  cnt = 0						    	cnt = 0							  
  for ( int i = a ;					      	  for i in range ( a , b + 1 ) :			    	for i in range ( a , b + 1 ) :				  
  i <= b ;						      	      j = 1 ;						    	    for j in range ( 1 , j ** 2 ) :			  
  i ++ ) for ( int j = 1 ;				      	      while j * j <= i :				    		if j ** 2 == i :				  
  j * j <= i ;						      		  if j * j == i :				    		    cnt += 1					  
  j ++ ) if ( j * j == i ) cnt ++ ;			      		      cnt = cnt + 1				    	return cnt						  
  return cnt ;						      		  j = j + 1					    								  
}							      	      i = i + 1						    								  
							      	  return cnt						    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS				      BREAK_NUMBER_THREE_PARTS					    BREAK_NUMBER_THREE_PARTS					  BREAK_NUMBER_THREE_PARTS
--							      --							    --								  --
ll count_of_ways ( ll n ) {				      def count_of_ways ( n ) :					    def count_of_ways ( n ) :					  failure : #Results: 0, 10
  ll count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n + 1 ) :			    	for i in range ( 0 , n ) :				  
  i <= n ;						      	      for j in range ( 0 , n + 1 ) :			    	    for j in range ( 0 , n ) :				  
  i ++ ) for ( int j = 0 ;				      		  for k in range ( 0 , n + 1 ) :		    		for k in range ( 0 , n ) :			  
  j <= n ;						      		      if ( i + j + k == n ) :			    		    if i + j + k == n :				  
  j ++ ) for ( int k = 0 ;				      			  count = count + 1			    			count += 1				  
  k <= n ;						      	  return count						    	return count						  
  k ++ ) if ( i + j + k == n ) count ++ ;		      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
int countFriendsPairings ( int n ) {			      def countFriendsPairings ( n ) :				    def countFriendsPairings ( n ) :				  success : None
  int a = 1 , b = 2 , c = 0 ;				      	  a , b , c = 1 , 2 , 0					    	a , b , c = 1 , 2 , 0					  
  if ( n <= 2 ) {					      	  if ( n <= 2 ) :					    	if n <= 2 :						  
    return n ;						      	      return n						    	    return n						  
  }							      	  for i in range ( 3 , n + 1 ) :			    	for i in range ( 3 , n + 1 ) :				  
  for ( int i = 3 ;					      	      c = b + ( i - 1 ) * a				    	    c = b + ( i - 1 ) * a				  
  i <= n ;						      	      a = b						    	    a , b , c = b , c , c				  
  i ++ ) {						      	      b = c						    	return c						  
    c = b + ( i - 1 ) * a ;				      	  return c						    								  
    a = b ;						      								    								  
    b = c ;						      								    								  
  }							      								    								  
  return c ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1	      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1
--							      --							    --								  --
long exponentiation ( long base , long exp ) {		      def exponentiation ( bas , exp ) :			    def exponentiation ( base , exp ) :				  script_not_found : None
  long t = 1L ;						      	  t = 1							    	t = 1							  
  while ( exp > 0 ) {					      	  while ( exp > 0 ) :					    	while exp > 0 :						  
    if ( exp % 2 != 0 ) t = ( t * base ) % N ;		      	      if ( exp % 2 != 0 ) :				    	    if exp % 2 != 0 :					  
    base = ( base * base ) % N ;			      		  t = ( t * bas ) % N				    		t = ( t * base ) % N				  
    exp /= 2 ;						      	      bas = ( bas * bas ) % N				    	    base = ( base * base ) % N				  
  }							      	      exp = int ( exp / 2 )				    	    exp /= 2						  
  return t % N ;					      	  return t % N						    	return t % N						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
int countSolutions ( int n ) {				      def countSolutions ( n ) :				    def countSolutions ( n ) :					  error : Traceback (most recent call last):   File
  int res = 0 ;						      	  res = 0						    	res = 0							  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int x = 0 ;					      	  x = 0							    	for x in range ( 0 , n * n ) :				  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  x * x < n ;						      	  while ( x * x < n ) :					    	    for y in range ( 0 , x * x + y * y ) :		  /COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INE
  x ++ ) for ( int y = 0 ;				      	      y = 0						    		res += 1					  QUALITY_XX_YY_N_2.py", line 52, in <module>	  if
  x * x + y * y < n ;					      	      while ( x * x + y * y < n ) :			    	return res						   f_filled(*parameters_set) == f_gold(*parameters_s
  y ++ ) res ++ ;					      		  res = res + 1					    								  et):	 File "dump/transcoder/eval/cpp_python/model
  return res ;						      		  y = y + 1					    								  _1/transcoder_eval/20642414/eval_scripts/cpp_sa-py
}							      	      x = x + 1						    								  thon_sa.test/COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y
							      	  return res						    								  _SATISFY_INEQUALITY_XX_YY_N_2.py", line 32, in f_f
							      								    								  illed	    for y in range ( 0 , x * x + y * y ) : U
							      								    								  nboundLocalError: local variable 'y' referenced be
							      								    								  fore assignment
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
void maximizecube ( int l , int b , int h ) {		      def maximizecube ( l , b , h ) :				    def maximizecube ( l , b , h ) :				  script_not_found : None
  int side = __gcd ( l , __gcd ( b , h ) ) ;		      	  side = gcd ( l , gcd ( b , h ) )			    	side = __gcd ( l , __gcd ( b , h ) )			  
  int num = l / side ;					      	  num = int ( l / side )				    	num = l / side						  
  num = ( num * b / side ) ;				      	  num = int ( num * b / side )				    	num = ( num * b / side )				  
  num = ( num * h / side ) ;				      	  num = int ( num * h / side )				    	num = ( num * h / side )				  
  cout << side << " " << num << endl ;			      	  print ( side , num )					    	print ( side , num )					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
int minXOR ( int arr [ ] , int n ) {			      def minXOR ( arr , n ) :					    def minXOR ( arr , n ) :					  error : Traceback (most recent call last):   File
  int min_xor = INT_MAX ;				      	  arr.sort ( )						    	min_xor = sys.maxint					  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int i = 0 ;					      	  min_xor = 999999					    	for i in range ( n ) :					  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  i < n ;						      	  val = 0						    	    for j in range ( i + 1 , n ) :			  /MINIMUM_XOR_VALUE_PAIR.py", line 51, in <module>
  i ++ ) for ( int j = i + 1 ;				      	  for i in range ( 0 , n - 1 ) :			    		min_xor = min ( min_xor , arr [ i ] ^ arr [ j ] )     if f_filled(*parameters_set) == f_gold(*parame
  j < n ;						      	      for j in range ( i + 1 , n - 1 ) :		    	return min_xor						  ters_set):   File "dump/transcoder/eval/cpp_python
  j ++ ) min_xor = min ( min_xor , arr [ i ] ^ arr [ j ] ) ;  		  val = arr [ i ] ^ arr [ j ]			    								  /model_1/transcoder_eval/20642414/eval_scripts/cpp
  return min_xor ;					      		  min_xor = min ( min_xor , val )		    								  _sa-python_sa.test/MINIMUM_XOR_VALUE_PAIR.py", lin
}							      	  return min_xor					    								  e 29, in f_filled	min_xor = sys.maxint Attribu
							      								    								  teError: module 'sys' has no attribute 'maxint'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
int maxProduct ( int arr [ ] , int n ) {		      def maxProduct ( arr , n ) :				    def maxProduct ( arr , n ) :				  success : identical to gold
  if ( n < 3 ) return - 1 ;				      	  if n < 3 :						    	if n < 3 :						  
  sort ( arr , arr + n ) ;				      	      return - 1					    	    return - 1						  
  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [  	  arr.sort ( )						    	arr.sort ( )						  
}							      	  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr  	return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
int isDivisibleBy7 ( int num ) {			      def isDivisibleBy7 ( num ) :				    def isDivisibleBy7 ( num ) :				  success : None
  if ( num < 0 ) return isDivisibleBy7 ( - num ) ;	      	  if num < 0 :						    	if num < 0 :						  
  if ( num == 0 || num == 7 ) return 1 ;		      	      return isDivisibleBy7 ( - num )			    	    return isDivisibleBy7 ( - num )			  
  if ( num < 10 ) return 0 ;				      	  if ( num == 0 or num == 7 ) :				    	if num == 0 or num == 7 :				  
  return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1 	      return True					    	    return 1						  
}							      	  if ( num < 10 ) :					    	if num < 10 :						  
							      	      return False					    	    return 0						  
							      	  return isDivisibleBy7 ( num // 10 - 2 * ( num - num // 10 	return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
int eulerian ( int n , int m ) {			      def eulerian ( n , m ) :					    def eulerian ( n , m ) :					  script_not_found : None
  if ( m >= n || n == 0 ) return 0 ;			      	  if ( m >= n or n == 0 ) :				    	if m >= n or n == 0 :					  
  if ( m == 0 ) return 1 ;				      	      return 0						    	    return 0						  
  return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) * 	  if ( m == 0 ) :					    	if m == 0 :						  
}							      	      return 1						    	    return 1						  
							      	  return ( ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 	return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
int recSearch ( int arr [ ] , int l , int r , int x ) {	      def recSearch ( arr , l , r , x ) :			    def recSearch ( arr , l , r , x ) :				  success : identical to gold
  if ( r < l ) return - 1 ;				      	  if r < l :						    	if r < l :						  
  if ( arr [ l ] == x ) return l ;			      	      return - 1					    	    return - 1						  
  if ( arr [ r ] == x ) return r ;			      	  if arr [ l ] == x :					    	if arr [ l ] == x :					  
  return recSearch ( arr , l + 1 , r - 1 , x ) ;	      	      return l						    	    return l						  
}							      	  if arr [ r ] == x :					    	if arr [ r ] == x :					  
							      	      return r						    	    return r						  
							      	  return recSearch ( arr , l + 1 , r - 1 , x )		    	return recSearch ( arr , l + 1 , r - 1 , x )		  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
int numofsubset ( int arr [ ] , int n ) {		      def numofsubset ( arr , n ) :				    def numofsubset ( arr , n ) :				  success : None
  sort ( arr , arr + n ) ;				      	  x = sorted ( arr )					    	arr.sort ( )						  
  int count = 1 ;					      	  count = 1						    	count = 1						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      if ( x [ i ] + 1 != x [ i + 1 ] ) :		    	    if arr [ i ] + 1 != arr [ i + 1 ] :			  
  i ++ ) {						      		  count = count + 1				    		count += 1					  
    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;	      	  return count						    	return count						  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
int binaryToDecimal ( string n ) {			      def binaryToDecimal ( n ) :				    def binaryToDecimal ( n ) :					  error : Traceback (most recent call last):   File
  string num = n ;					      	  num = n						    	num = n							  "dump/transcoder/eval/cpp_python/model_1/transcode
  int dec_value = 0 ;					      	  dec_value = 0						    	dec_value = 0						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  int base = 1 ;					      	  base1 = 1						    	base = 1						  /PROGRAM_BINARY_DECIMAL_CONVERSION_1.py", line 56,
  int len = num . length ( ) ;				      	  len1 = len ( num )					    	len = len ( num )					   in <module>	   if f_filled(*parameters_set) == f
  for ( int i = len - 1 ;				      	  for i in range ( len1 - 1 , - 1 , - 1 ) :		    	for i in range ( len ( num ) - 1 , - 1 , - 1 ) :	  _gold(*parameters_set):   File "dump/transcoder/ev
  i >= 0 ;						      	      if ( num [ i ] == '1' ) :				    	    if num [ i ] == '1' :				  al/cpp_python/model_1/transcoder_eval/20642414/eva
  i -- ) {						      		  dec_value += base1				    		dec_value += base				  l_scripts/cpp_sa-python_sa.test/PROGRAM_BINARY_DEC
    if ( num [ i ] == '1' ) dec_value += base ;		      	      base1 = base1 * 2					    	    base = base * 2					  IMAL_CONVERSION_1.py", line 33, in f_filled	  le
    base = base * 2 ;					      	  return dec_value					    	return dec_value					  n = len ( num ) UnboundLocalError: local variable
  }							      								    								  'len' referenced before assignment
  return dec_value ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
int countSubstringWithEqualEnds ( string s ) {		      def countSubstringWithEqualEnds ( s ) :			    def countSubstringWithEqualEnds ( s ) :			  success : None
  int result = 0 ;					      	  result = 0						    	result = 0						  
  int n = s . length ( ) ;				      	  n = len ( s )						    	n = len ( s )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
  i ++ ) for ( int j = i ;				      		  if ( s [ i ] == s [ j ] ) :			    		if s [ i ] == s [ j ] :				  
  j < n ;						      		      result = result + 1			    		    result += 1					  
  j ++ ) if ( s [ i ] == s [ j ] ) result ++ ;		      	  return result						    	return result						  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
int binarySearch ( int arr [ ] , int l , int r , int x ) {    def binarySearch ( arr , l , r , x ) :			    def binarySearch ( arr , l , r , x ) :			  script_not_found : None
  while ( l <= r ) {					      	  while l <= r :					    	while l <= r :						  
    int m = l + ( r - l ) / 2 ;				      	      mid = l + ( r - l ) // 2				    	    m = l + ( r - l ) // 2				  
    if ( arr [ m ] == x ) return m ;			      	      if arr [ mid ] == x :				    	    if arr [ m ] == x :					  
    if ( arr [ m ] < x ) l = m + 1 ;			      		  return mid					    		return m					  
    else r = m - 1 ;					      	      elif arr [ mid ] < x :				    	    if arr [ m ] < x :					  
  }							      		  l = mid + 1					    		l = m + 1					  
  return - 1 ;						      	      else :						    	    else :						  
}							      		  r = mid - 1					    		r = m - 1					  
							      	  return - 1						    	return - 1						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
void decToBinary ( int n ) {				      def decToBinary ( n ) :					    def decToBinary ( n ) :					  script_not_found : None
  int binaryNum [ 32 ] ;				      	  binaryNum = [ 0 ] * n					    	binaryNum = [ ]						  
  int i = 0 ;						      	  i = 0							    	i = 0							  
  while ( n > 0 ) {					      	  while ( n > 0 ) :					    	while n > 0 :						  
    binaryNum [ i ] = n % 2 ;				      	      binaryNum [ i ] = n % 2				    	    binaryNum.append ( n % 2 )				  
    n = n / 2 ;						      	      n = int ( n / 2 )					    	    n = n / 2						  
    i ++ ;						      	      i += 1						    	    i += 1						  
  }							      	  for j in range ( i - 1 , - 1 , - 1 ) :		    	for j in range ( i - 1 , - 1 , - 1 ) :			  
  for ( int j = i - 1 ;					      	      print ( binaryNum [ j ] , end = "" )		    	    print ( binaryNum [ j ] )				  
  j >= 0 ;						      								    								  
  j -- ) cout << binaryNum [ j ] ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION
--							      --							    --								  --
ll mulmod ( ll a , ll b , ll mod ) {			      def mulmod ( a , b , mod ) :				    def mulmod ( a , b , mod ) :				  success : None
  ll res = 0 ;						      	  res = 0						    	res = 0							  
  a = a % mod ;						      	  a = a % mod						    	a = a % mod						  
  while ( b > 0 ) {					      	  while ( b > 0 ) :					    	while b > 0 :						  
    if ( b % 2 == 1 ) res = ( res + a ) % mod ;		      	      if ( b % 2 == 1 ) :				    	    if b % 2 == 1 :					  
    a = ( a * 2 ) % mod ;				      		  res = ( res + a ) % mod			    		res = ( res + a ) % mod				  
    b /= 2 ;						      	      a = ( a * 2 ) % mod				    	    a = ( a * 2 ) % mod					  
  }							      	      b //= 2						    	    b //= 2						  
  return res % mod ;					      	  return res % mod					    	return res % mod					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT_1					      NON_REPEATING_ELEMENT_1					    NON_REPEATING_ELEMENT_1					  NON_REPEATING_ELEMENT_1
--							      --							    --								  --
int firstNonRepeating ( int arr [ ] , int n ) {		      def firstNonRepeating ( arr , n ) :			    def firstNonRepeating ( arr , n ) :				  script_not_found : None
  unordered_map < int , int > mp ;			      	  mp = defaultdict ( lambda : 0 )			    	mp = { }						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      mp [ arr [ i ] ] += 1				    	    mp [ arr [ i ] ] += 1				  
  i ++ ) mp [ arr [ i ] ] ++ ;				      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  for ( int i = 0 ;					      	      if mp [ arr [ i ] ] == 1 :			    	    if mp [ arr [ i ] ] == 1 :				  
  i < n ;						      		  return arr [ i ]				    		return arr [ i ]				  
  i ++ ) if ( mp [ arr [ i ] ] == 1 ) return arr [ i ] ;      	  return - 1						    	return - 1						  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS
--							      --							    --								  --
int middleOfThree ( int a , int b , int c ) {		      def middleOfThree ( a , b , c ) :				    def middleOfThree ( a , b , c ) :				  success : None
  if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;  	  if ( ( a < b and b < c ) or ( c < b and b < a ) ) :	    	if ( a < b and b < c ) or ( c < b and b < a ) :		  
  else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return 	      return b						    	    return b						  
  else return c ;					      	  if ( ( b < a and a < c ) or ( c < a and a < b ) ) :	    	elif ( b < a and a < c ) or ( c < a and a < b ) :	  
}							      	      return a						    	    return a						  
							      	  else :						    	else :							  
							      	      return c						    	    return c						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_
--							      --							    --								  --
public : int multiply ( int x , int y ) {		      def multiply ( x , y ) :					    def multiply ( x , y ) :					  success : None
  if ( y == 0 ) return 0 ;				      	  if ( y == 0 ) :					    	if y == 0 :						  
  if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	      	      return 0						    	    return 0						  
  if ( y < 0 ) return - multiply ( x , - y ) ;		      	  if ( y > 0 ) :					    	if y > 0 :						  
}							      	      return ( x + multiply ( x , y - 1 ) )		    	    return ( x + multiply ( x , y - 1 ) )		  
							      	  if ( y < 0 ) :					    	if y < 0 :						  
							      	      return - multiply ( x , - y )			    	    return - multiply ( x , - y )			  
							      								    	return x						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
string to_upper ( string & in ) {			      def to_upper ( string ) :					    def to_upper ( in_string ) :				  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( len ( string ) ) :			    	for i in range ( len ( in_string ) ) :			  
  i < in . length ( ) ;					      	      if ( 'a' <= string [ i ] <= 'z' ) :		    	    if 'a' <= in_string [ i ] <= 'z' :			  
  i ++ ) if ( 'a' <= in [ i ] <= 'z' ) in [ i ] = in [ i ] -  		  string = ( string [ 0 : i ] + chr ( ord ( string  		in_string [ i ] = in_string [ i ] - 'a' + 'A'	  
  return in ;						      	  return string						    	return in_string					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS	      MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		    MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		  MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS
--							      --							    --								  --
long long int findMinSum ( int a [ ] , int b [ ] , int n ) {  def findMinSum ( a , b , n ) :				    def findMinSum ( a , b , n ) :				  script_not_found : None
  sort ( a , a + n ) ;					      	  a.sort ( )						    	a.sort ( )						  
  sort ( b , b + n ) ;					      	  b.sort ( )						    	b.sort ( )						  
  long long int sum = 0 ;				      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      sum = sum + abs ( a [ i ] - b [ i ] )		    	    sum = sum + abs ( a [ i ] - b [ i ] )		  
  i ++ ) sum = sum + abs ( a [ i ] - b [ i ] ) ;	      	  return sum						    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1
--							      --							    --								  --
bool checkCount ( int arr [ ] , int n , int k ) {	      def checkCount ( arr , n , k ) :				    def checkCount ( arr , n , k ) :				  script_not_found : None
  unordered_map < int , int > hash ;			      	  mp = defaultdict ( lambda : 0 )			    	hash = { }						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      mp [ arr [ i ] ] += 1				    	    hash [ arr [ i ] ] += 1				  
  i ++ ) hash [ arr [ i ] ] ++ ;			      	  for key , values in mp.items ( ) :			    	for x in hash :						  
  for ( auto x : hash ) if ( x . second > 2 * k ) return fals 	      if values > 2 * k :				    	    if x > 2 ** k :					  
  return true ;						      		  return False					    		return False					  
}							      	  return True						    	return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
int nonFibonacci ( int n ) {				      def nonFibonacci ( n ) :					    def nonFibonacci ( n ) :					  failure : #Results: 0, 10
  int prevPrev = 1 , prev = 2 , curr = 3 ;		      	  prevPrev = 1						    	prev_prev , prev , curr = 1 , 2 , 3			  
  while ( n > 0 ) {					      	  prev = 2						    	while n > 0 :						  
    prevPrev = prev ;					      	  curr = 3						    	    prev_prev , prev , curr = prev , curr , prev_prev + p 
    prev = curr ;					      	  while n > 0 :						    	    n = n - ( curr - prev - 1 )				  
    curr = prevPrev + prev ;				      	      prevPrev = prev					    	n = n + ( curr - prev - 1 )				  
    n = n - ( curr - prev - 1 ) ;			      	      prev = curr					    	return prev + n						  
  }							      	      curr = prevPrev + prev				    								  
  n = n + ( curr - prev - 1 ) ;				      	      n = n - ( curr - prev - 1 )			    								  
  return prev + n ;					      	  n = n + ( curr - prev - 1 )				    								  
}							      	  return prev + n					    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
int minXOR ( int arr [ ] , int n ) {			      def minXOR ( arr , n ) :					    def minXOR ( arr , n ) :					  error : Traceback (most recent call last):   File
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr.sort ( )						  "dump/transcoder/eval/cpp_python/model_1/transcode
  int minXor = INT_MAX ;				      	  minXor = int ( sys.float_info.max )			    	minXor = sys.maxint					  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  int val = 0 ;						      	  val = 0						    	val = 0							  /MINIMUM_XOR_VALUE_PAIR_1.py", line 54, in <module
  for ( int i = 0 ;					      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( n - 1 ) :				  >	if f_filled(*parameters_set) == f_gold(*para
  i < n - 1 ;						      	      val = arr [ i ] ^ arr [ i + 1 ]			    	    val = arr [ i ] ^ arr [ i + 1 ]			  meters_set):	 File "dump/transcoder/eval/cpp_pyth
  i ++ ) {						      	      minXor = min ( minXor , val )			    	    minXor = min ( minXor , val )			  on/model_1/transcoder_eval/20642414/eval_scripts/c
    val = arr [ i ] ^ arr [ i + 1 ] ;			      	  return minXor						    	return minXor						  pp_sa-python_sa.test/MINIMUM_XOR_VALUE_PAIR_1.py",
    minXor = min ( minXor , val ) ;			      								    								   line 31, in f_filled	    minXor = sys.maxint Attr
  }							      								    								  ibuteError: module 'sys' has no attribute 'maxint'
  return minXor ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
bool isPowerOfFour ( unsigned int n ) {			      def isPowerOfFour ( n ) :					    def isPowerOfFour ( n ) :					  failure : #Results: 5, 10
  int count = 0 ;					      	  count = 0						    	count = 0						  
  if ( n && ! ( n & ( n - 1 ) ) ) {			      	  if ( n and ( not ( n & ( n - 1 ) ) ) ) :		    	if n and not ( n & ( n - 1 ) ) :			  
    while ( n > 1 ) {					      	      while ( n > 1 ) :					    	    while n > 1 :					  
      n >>= 1 ;						      		  n >>= 1					    		n >>= 1						  
      count += 1 ;					      		  count += 1					    		count += 1					  
    }							      	      if ( count % 2 == 0 ) :				    	    return ( count % 2 == 0 )				  
    return ( count % 2 == 0 ) ? 1 : 0 ;			      		  return True					    	return 0						  
  }							      	      else :						    								  
  return 0 ;						      		  return False					    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
int firstNonRepeating ( int arr [ ] , int n ) {		      def firstNonRepeating ( arr , n ) :			    def firstNonRepeating ( arr , n ) :				  failure : #Results: 0, 10
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      j = 0						    	    j = 0						  
  i ++ ) {						      	      while ( j < n ) :					    	    for j in range ( n ) :				  
    int j ;						      		  if ( i != j and arr [ i ] == arr [ j ] ) :	    		if i != j and arr [ i ] == arr [ j ] :		  
    for ( j = 0 ;					      		      break					    		    break					  
    j < n ;						      		  j += 1					    	    if j == n :						  
    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;    	      if ( j == n ) :					    		return arr [ i ]				  
    if ( j == n ) return arr [ i ] ;			      		  return arr [ i ]				    								  
  }							      	  return - 1						    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
int power ( int x , unsigned int y , int p ) {		      def power ( x , y , p ) :					    def power ( x , y , p ) :					  success : None
  int res = 1 ;						      	  res = 1						    	res = 1							  
  x = x % p ;						      	  x = x % p						    	x = x % p						  
  while ( y > 0 ) {					      	  while ( y > 0 ) :					    	while y > 0 :						  
    if ( y & 1 ) res = ( res * x ) % p ;		      	      if ( ( y & 1 ) == 1 ) :				    	    if y & 1 :						  
    y = y >> 1 ;					      		  res = ( res * x ) % p				    		res = ( res * x ) % p				  
    x = ( x * x ) % p ;					      	      y = y >> 1					    	    y = y >> 1						  
  }							      	      x = ( x * x ) % p					    	    x = ( x * x ) % p					  
  return res ;						      	  return res						    	return res						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		    PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
bool isPossible ( int a [ ] , int b [ ] , int n , int k ) {   def isPossible ( a , b , n , k ) :			    def isPossible ( a , b , n , k ) :				  failure : #Results: 9, 10
  sort ( a , a + n ) ;					      	  a.sort ( reverse = True )				    	a.sort ( )						  
  sort ( b , b + n , greater < int > ( ) ) ;		      	  b.sort ( )						    	b.sort ( )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( a [ i ] + b [ i ] < k ) :			    	    if a [ i ] + b [ i ] < k :				  
  i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	      		  return False					    		return False					  
  return true ;						      	  return True						    	return True						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
void printDistinct ( int arr [ ] , int n ) {		      def printDistinct ( arr , n ) :				    def printDistinct ( arr , n ) :				  script_not_found : None
  unordered_set < int > s ;				      	  s = dict ( )						    	s = set ( )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( arr [ i ] not in s.keys ( ) ) :		    	    if s.intersection ( arr [ i ] ) == None :		  
  i ++ ) {						      		  s [ arr [ i ] ] = arr [ i ]			    		s.add ( arr [ i ] )				  
    if ( s . find ( arr [ i ] ) == s . end ( ) ) {	      		  print ( arr [ i ] , end = " " )		    		print ( arr [ i ] , end = ' ' )			  
      s . insert ( arr [ i ] ) ;			      								    								  
      cout << arr [ i ] << " " ;			      								    								  
    }							      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
int countSeq ( int n ) {				      def countSeq ( n ) :					    def countSeq ( n ) :					  failure : #Results: 5, 10
  int nCr = 1 , res = 1 ;				      	  nCr = 1						    	nCr , res = 1 , 1					  
  for ( int r = 1 ;					      	  res = 1						    	for r in range ( 1 , n + 1 ) :				  
  r <= n ;						      	  for r in range ( 1 , n + 1 ) :			    	    nCr = ( nCr * ( n + 1 - r ) ) // r			  
  r ++ ) {						      	      nCr = ( nCr * ( n + 1 - r ) ) / r ;		    	    res += nCr ** 2					  
    nCr = ( nCr * ( n + 1 - r ) ) / r ;			      	      res += nCr * nCr ;				    	return res						  
    res += nCr * nCr ;					      	  return res ;						    								  
  }							      								    								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
int countNegative ( int M [ ] [ 4 ] , int n , int m ) {	      def countNegative ( M , n , m ) :				    def countNegative ( M , n , m ) :				  success : identical to gold
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( m ) :				    	    for j in range ( m ) :				  
  i ++ ) {						      		  if M [ i ] [ j ] < 0 :			    		if M [ i ] [ j ] < 0 :				  
    for ( int j = 0 ;					      		      count += 1				    		    count += 1					  
    j < m ;						      		  else :					    		else :						  
    j ++ ) {						      		      break					    		    break					  
      if ( M [ i ] [ j ] < 0 ) count += 1 ;		      	  return count						    	return count						  
      else break ;					      								    								  
    }							      								    								  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
bool isPrime ( int p ) {				      def isPrime ( p ) :					    def isPrime ( p ) :						  failure : #Results: 9, 10
  long long checkNumber = pow ( 2 , p ) - 1 ;		      	  checkNumber = 2 ** p - 1				    	checkNumber = pow ( 2 , p ) - 1				  
  long long nextval = 4 % checkNumber ;			      	  nextval = 4 % checkNumber				    	nextval = 4 % checkNumber				  
  for ( int i = 1 ;					      	  for i in range ( 1 , p - 1 ) :			    	for i in range ( 1 , p - 1 ) :				  
  i < p - 1 ;						      	      nextval = ( nextval * nextval - 2 ) % checkNumber	    	    nextval = ( nextval * nextval - 2 ) % checkNumber	  
  i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ;  	  if ( nextval == 0 ) : return True			    	return ( nextval == 0 )					  
  return ( nextval == 0 ) ;				      	  else : return False					    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
int minPerimeter ( int n ) {				      def minPerimeter ( n ) :					    def minPerimeter ( n ) :					  failure : #Results: 0, 10
  int l = sqrt ( n ) ;					      	  l = math.sqrt ( n )					    	l = math.sqrt ( n )					  
  int sq = l * l ;					      	  sq = l * l						    	sq = l ** 2						  
  if ( sq == n ) return l * 4 ;				      	  if ( sq == n ) :					    	if sq == n :						  
  else {						      	      return l * 4					    	    return l ** 4					  
    long long int row = n / l ;				      	  else :						    	else :							  
    long long int perimeter = 2 * ( l + row ) ;		      	      row = n / l					    	    row = n // l					  
    if ( n % l != 0 ) perimeter += 2 ;			      	      perimeter = 2 * ( l + row )			    	    perimeter = 2 * ( l + row )				  
    return perimeter ;					      	      if ( n % l != 0 ) :				    	    if n % l != 0 :					  
  }							      		  perimeter += 2				    		perimeter += 2					  
}							      	      return perimeter					    	    return perimeter					  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
int sequence ( int n ) {				      def sequence ( n ) :					    def sequence ( n ) :					  script_not_found : None
  int f [ n + 1 ] ;					      	  f = array.array ( 'i' , [ 0 , 1 , 1 ] )		    	f = [ 0 ] * ( n + 1 )					  
  int i ;						      	  for i in range ( 3 , n + 1 ) :			    	i = 0							  
  f [ 0 ] = 0 ;						      	      r = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]	    	f [ 0 ] = 1						  
  f [ 1 ] = 1 ;						      	      f.append ( r ) ;					    	f [ 1 ] = 1						  
  f [ 2 ] = 1 ;						      	  return r						    	f [ 2 ] = 1						  
  for ( i = 3 ;						      								    	for i in range ( 3 , n + 1 ) :				  
  i <= n ;						      								    	    f [ i ] = f [ i - 1 ] + f [ i - f [ i - 1 ] ]	  
  i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  								    	return f [ n ]						  
  return f [ n ] ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
int countIntegralSolutions ( int n ) {			      def countIntegralSolutions ( n ) :			    def countIntegralSolutions ( n ) :				  failure : #Results: 0, 10
  int result = 0 ;					      	  result = 0						    	result = 0						  
  for ( int i = 0 ;					      	  for i in range ( n + 1 ) :				    	for i in range ( 0 , n ) :				  
  i <= n ;						      	      for j in range ( n + 1 ) :			    	    for j in range ( 0 , n - i ) :			  
  i ++ ) for ( int j = 0 ;				      		  for k in range ( n + 1 ) :			    		for k in range ( 0 , ( n - i - j ) ) :		  
  j <= n - i ;						      		      if i + j + k == n :			    		    if i + j + k == n :				  
  j ++ ) for ( int k = 0 ;				      			  result += 1				    			result += 1				  
  k <= ( n - i - j ) ;					      	  return result						    	return result						  
  k ++ ) if ( i + j + k == n ) result ++ ;		      								    								  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_GAMES_PLAYED_WINNER				      MAXIMUM_GAMES_PLAYED_WINNER				    MAXIMUM_GAMES_PLAYED_WINNER					  MAXIMUM_GAMES_PLAYED_WINNER
--							      --							    --								  --
int maxGameByWinner ( int N ) {				      def maxGameByWinner ( N ) :				    def maxGameByWinner ( N ) :					  error :   File "dump/transcoder/eval/cpp_python/mo
  int dp [ N ] ;					      	  dp = [ 0 for i in range ( N ) ]			    	dp = [ 1 , 2 ]						  del_1/transcoder_eval/20642414/eval_scripts/cpp_sa
  dp [ 0 ] = 1 ;					      	  dp [ 0 ] = 1						    	i = 2							  -python_sa.test/MAXIMUM_GAMES_PLAYED_WINNER.py", l
  dp [ 1 ] = 2 ;					      	  dp [ 1 ] = 2						    	do :							  ine 31     do :	 ^ SyntaxError: invalid synt
  int i = 2 ;						      	  i = 1							    	    dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ]		  ax
  do {							      	  while dp [ i ] <= N :					    	while dp [ i ] <= N :					  
    dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		      	      i = i + 1						    	    i += 1						  
  }							      	      dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ]		    	return ( i - 2 )					  
  while ( dp [ i ++ ] <= N ) ;				      	  return ( i - 1 )					    								  
  return ( i - 2 ) ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2
--							      --							    --								  --
int numberOfPaths ( int m , int n ) {			      def numberOfPaths ( p , q ) :				    def numberOfPaths ( m , n ) :				  error : Traceback (most recent call last):   File
  int dp [ n ] = {					      	  dp = [ 1 for i in range ( q ) ]			    	dp = [ 1 ]						  "dump/transcoder/eval/cpp_python/model_1/transcode
    1 }							      	  for i in range ( p - 1 ) :				    	dp [ 0 ] = 1						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
    ;							      	      for j in range ( 1 , q ) :			    	for i in range ( m ) :					  /COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MA
    dp [ 0 ] = 1 ;					      		  dp [ j ] += dp [ j - 1 ]			    	    for j in range ( 1 , n ) :				  TRIX_2.py", line 49, in <module>     if f_filled(*
    for ( int i = 0 ;					      	  return dp [ q - 1 ]					    		dp [ j ] += dp [ j - 1 ]			  parameters_set) == f_gold(*parameters_set):	File
    i < m ;						      								    	return dp [ n - 1 ]					   "dump/transcoder/eval/cpp_python/model_1/transcod
    i ++ ) {						      								    								  er_eval/20642414/eval_scripts/cpp_sa-python_sa.tes
      for ( int j = 1 ;					      								    								  t/COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_M
      j < n ;						      								    								  ATRIX_2.py", line 30, in f_filled	dp [ j ] +=
      j ++ ) {						      								    								  dp [ j - 1 ] IndexError: list index out of range
	dp [ j ] += dp [ j - 1 ] ;			      								    								  
      }							      								    								  
    }							      								    								  
    return dp [ n - 1 ] ;				      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY		      MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY		    MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY			  MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY
--							      --							    --								  --
int minOperation ( int arr [ ] , int n ) {		      def minOperation ( arr , n ) :				    def minOperation ( arr , n ) :				  script_not_found : None
  unordered_map < int , int > hash ;			      	  Hash = defaultdict ( lambda : 0 )			    	hash = { }						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      Hash [ arr [ i ] ] += 1				    	    hash [ arr [ i ] ] += 1				  
  i ++ ) hash [ arr [ i ] ] ++ ;			      	  max_count = 0						    	max_count = 0						  
  int max_count = 0 ;					      	  for i in Hash :					    	for i in hash :						  
  for ( auto i : hash ) if ( max_count < i . second ) max_cou 	      if max_count < Hash [ i ] :			    	    if max_count < i [ 1 ] :				  
  return ( n - max_count ) ;				      		  max_count = Hash [ i ]			    		max_count = i [ 1 ]				  
}							      	  return n - max_count					    	return ( n - max_count )				  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT						      BUBBLE_SORT						    BUBBLE_SORT							  BUBBLE_SORT
--							      --							    --								  --
void bubbleSort ( int arr [ ] , int n ) {		      def bubbleSort ( arr ) :					    def bubbleSort ( arr , n ) :				  script_not_found : None
  int i , j ;						      	  n = len ( arr )					    	i , j = 0 , 0						  
  for ( i = 0 ;						      	  for i in range ( n ) :				    	for i in range ( n - 1 ) :				  
  i < n - 1 ;						      	      for j in range ( 0 , n - i - 1 ) :		    	    for j in range ( n - i - 1 ) :			  
  i ++ ) for ( j = 0 ;					      		  if arr [ j ] > arr [ j + 1 ] :		    		if arr [ j ] > arr [ j + 1 ] :			  
  j < n - i - 1 ;					      		      arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , a 		    swap ( [ arr [ j ] , arr [ j + 1 ] ] )	  
  j ++ ) if ( arr [ j ] > arr [ j + 1 ] ) swap ( & arr [ j ]  								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
void findCombinations ( string str , int index , string out ) def findCombinations ( string , index , out ) :		    def findCombinations ( str , index , out ) :		  script_not_found : None
  if ( index == str . length ( ) ) cout << out << endl ;      	  if index == len ( string ) :				    	if index == len ( str ) :				  
  for ( int i = index ;					      	      print ( out )					    	    print ( out )					  
  i < str . length ( ) ;				      	  for i in range ( index , len ( string ) , 1 ) :	    	for i in range ( index , len ( str ) ) :		  
  i ++ ) findCombinations ( str , i + 1 , out + "(" + str . s 	      findCombinations ( string , i + 1 , out + "(" + strin 	    findCombinations ( str , i + 1 , out + "(" + str [ in 
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
int countDivisibles ( int arr [ ] , int n ) {		      def countDivisibles ( arr , n ) :				    def countDivisibles ( arr , n ) :				  script_not_found : None
  int res = 0 ;						      	  res = 0						    	res = 0							  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  if ( arr [ i ] % arr [ j ] == 0 or arr [ j ] % ar 		if arr [ i ] % arr [ j ] == 0 or arr [ j ] % arr  
  j < n ;						      		      res += 1					    		    res += 1					  
  j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ 	  return res						    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
int maxTasks ( int high [ ] , int low [ ] , int n ) {	      def maxTasks ( high , low , n ) :				    def maxTasks ( high , low , n ) :				  success : None
  if ( n <= 0 ) return 0 ;				      	  if ( n <= 0 ) :					    	if n <= 0 :						  
  return max ( high [ n - 1 ] + maxTasks ( high , low , ( n - 	      return 0						    	    return 0						  
}							      	  return max ( high [ n - 1 ] + maxTasks ( high , low , ( n 	return max ( high [ n - 1 ] + maxTasks ( high , low , ( n 
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
void printDistinct ( int arr [ ] , int n ) {		      def printDistinct ( arr , n ) :				    def printDistinct ( arr , n ) :				  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      d = 0						    	    j = 0						  
  i ++ ) {						      	      for j in range ( 0 , i ) :			    	    for j in range ( i ) :				  
    int j ;						      		  if ( arr [ i ] == arr [ j ] ) :		    		if arr [ i ] == arr [ j ] :			  
    for ( j = 0 ;					      		      d = 1					    		    break					  
    j < i ;						      		      break					    	    if i == j :						  
    j ++ ) if ( arr [ i ] == arr [ j ] ) break ;	      	      if ( d == 0 ) :					    		print ( arr [ i ] , end = ' ' )			  
    if ( i == j ) cout << arr [ i ] << " " ;		      		  print ( arr [ i ] )				    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
void findElements ( int arr [ ] , int n ) {		      def findElements ( arr , n ) :				    def findElements ( arr , n ) :				  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      count = 0						    	    count = 0						  
  i ++ ) {						      	      for j in range ( 0 , n ) :			    	    for j in range ( n ) :				  
    int count = 0 ;					      		  if arr [ j ] > arr [ i ] :			    		if arr [ j ] > arr [ i ] :			  
    for ( int j = 0 ;					      		      count = count + 1				    		    count += 1					  
    j < n ;						      	      if count >= 2 :					    		if count >= 2 :					  
    j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;	      		  print ( arr [ i ] , end = " " )		    		    print ( arr [ i ] , end = ' ' )		  
    if ( count >= 2 ) cout << arr [ i ] << " " ;	      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
int nearestSmallerEqFib ( int n ) {			      def nearestSmallerEqFib ( n ) :				    def nearestSmallerEqFib ( n ) :				  failure : #Results: 0, 10
  if ( n == 0 || n == 1 ) return n ;			      	  if ( n == 0 or n == 1 ) :				    	if n == 0 or n == 1 :					  
  int f1 = 0 , f2 = 1 , f3 = 1 ;			      	      return n						    	    return n						  
  while ( f3 <= n ) {					      	  f1 , f2 , f3 = 0 , 1 , 1				    	f1 , f2 , f3 = 0 , 1 , 1				  
    f1 = f2 ;						      	  while ( f3 <= n ) :					    	while f3 <= n :						  
    f2 = f3 ;						      	      f1 = f2 ;						    	    f1 , f2 , f3 = f2 , f3 , f1 + f2			  
    f3 = f1 + f2 ;					      	      f2 = f3 ;						    	return f2						  
  }							      	      f3 = f1 + f2 ;					    								  
  return f2 ;						      	  return f2 ;						    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR				      FIND_MINIMUM_DIFFERENCE_PAIR				    FIND_MINIMUM_DIFFERENCE_PAIR				  FIND_MINIMUM_DIFFERENCE_PAIR
--							      --							    --								  --
int findMinDiff ( int arr [ ] , int n ) {		      def findMinDiff ( arr , n ) :				    def findMinDiff ( arr , n ) :				  error : Traceback (most recent call last):   File
  int diff = INT_MAX ;					      	  diff = 10 ** 20					    	diff = sys.maxint					  "dump/transcoder/eval/cpp_python/model_1/transcode
  for ( int i = 0 ;					      	  for i in range ( n - 1 ) :				    	for i in range ( n - 1 ) :				  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  i < n - 1 ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  /FIND_MINIMUM_DIFFERENCE_PAIR.py", line 50, in <mo
  i ++ ) for ( int j = i + 1 ;				      		  if abs ( arr [ i ] - arr [ j ] ) < diff :	    		if abs ( arr [ i ] - arr [ j ] ) < diff :	  dule>	    if f_filled(*parameters_set) == f_gold(*
  j < n ;						      		      diff = abs ( arr [ i ] - arr [ j ] )	    		    diff = abs ( arr [ i ] - arr [ j ] )	  parameters_set):   File "dump/transcoder/eval/cpp_
  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = a 	  return diff						    	return diff						  python/model_1/transcoder_eval/20642414/eval_scrip
  return diff ;						      								    								  ts/cpp_sa-python_sa.test/FIND_MINIMUM_DIFFERENCE_P
}							      								    								  AIR.py", line 27, in f_filled	    diff = sys.maxin
							      								    								  t AttributeError: module 'sys' has no attribute 'm
							      								    								  axint'
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
void subArray ( int arr [ ] , int n ) {			      def subArray ( arr , n ) :				    def subArray ( arr , n ) :					  script_not_found : None
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
  i ++ ) {						      		  for k in range ( i , j + 1 ) :		    		for k in range ( i , j ) :			  
    for ( int j = i ;					      		      print ( arr [ k ] , end = "" )		    		    print ( arr [ k ] , end = ' ' )		  
    j < n ;						      		  print ( "\n" , end = "" )			    		print ( )					  
    j ++ ) {						      								    								  
      for ( int k = i ;					      								    								  
      k <= j ;						      								    								  
      k ++ ) cout << arr [ k ] << " " ;			      								    								  
      cout << endl ;					      								    								  
    }							      								    								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			      SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			    SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			  SUM_MANHATTAN_DISTANCES_PAIRS_POINTS
--							      --							    --								  --
int distancesum ( int x [ ] , int y [ ] , int n ) {	      def distancesum ( x , y , n ) :				    def distancesum ( x , y , n ) :				  success : identical to gold
  int sum = 0 ;						      	  sum = 0						    	sum = 0							  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) for ( int j = i + 1 ;				      		  sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i  		sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i  
  j < n ;						      	  return sum						    	return sum						  
  j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - 								    								  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	      WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	    WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	  WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS
--							      --							    --								  --
int countWays ( int n ) {				      def CountWays ( n ) :					    def countWays ( n ) :					  script_not_found : None
  int table [ n + 1 ] ;					      	  table = [ 0 ] * ( n + 1 )				    	table = [ 0 ] * ( n + 1 )				  
  memset ( table , 0 , sizeof ( table ) ) ;		      	  table [ 0 ] = 1					    	table [ 0 ] = 1						  
  table [ 0 ] = 1 ;					      	  for i in range ( 1 , n ) :				    	for i in range ( 1 , n ) :				  
  for ( int i = 1 ;					      	      for j in range ( i , n + 1 ) :			    	    for j in range ( i , n + 1 ) :			  
  i < n ;						      		  table [ j ] += table [ j - i ]		    		table [ j ] += table [ j - i ]			  
  i ++ ) for ( int j = i ;				      	  return table [ n ]					    	return table [ n ]					  
  j <= n ;						      								    								  
  j ++ ) table [ j ] += table [ j - i ] ;		      								    								  
  return table [ n ] ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		      FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		    FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		  FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY
--							      --							    --								  --
int maxSubarrayXOR ( int arr [ ] , int n ) {		      def maxSubarrayXOR ( arr , n ) :				    def maxSubarrayXOR ( arr , n ) :				  success : None
  int ans = INT_MIN ;					      	  ans = - 2147483648					    	ans = int ( 0 )						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      curr_xor = 0					    	    curr_xor = 0					  
  i ++ ) {						      	      for j in range ( i , n ) :			    	    for j in range ( i , n ) :				  
    int curr_xor = 0 ;					      		  curr_xor = curr_xor ^ arr [ j ]		    		curr_xor = curr_xor ^ arr [ j ]			  
    for ( int j = i ;					      		  ans = max ( ans , curr_xor )			    		ans = max ( ans , curr_xor )			  
    j < n ;						      	  return ans						    	return ans						  
    j ++ ) {						      								    								  
      curr_xor = curr_xor ^ arr [ j ] ;			      								    								  
      ans = max ( ans , curr_xor ) ;			      								    								  
    }							      								    								  
  }							      								    								  
  return ans ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
bool isIdentity ( int mat [ ] [ MAX ] , int N ) {	      def isIdentity ( mat , N ) :				    def isIdentity ( mat , N ) :				  success : None
  for ( int row = 0 ;					      	  for row in range ( N ) :				    	for row in range ( N ) :				  
  row < N ;						      	      for col in range ( N ) :				    	    for col in range ( N ) :				  
  row ++ ) {						      		  if ( row == col and mat [ row ] [ col ] != 1 ) :  		if row == col and mat [ row ] [ col ] != 1 :	  
    for ( int col = 0 ;					      		      return False				    		    return False				  
    col < N ;						      		  elif ( row != col and mat [ row ] [ col ] != 0 )  		elif row != col and mat [ row ] [ col ] != 0 :	  
    col ++ ) {						      		      return False				    		    return False				  
      if ( row == col && mat [ row ] [ col ] != 1 ) return fa 	  return True						    	return True						  
      else if ( row != col && mat [ row ] [ col ] != 0 ) retu 								    								  
    }							      								    								  
  }							      								    								  
  return true ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
int insertSorted ( int arr [ ] , int n , int key , int capaci def insertSorted ( arr , n , key , capacity ) :		    def insertSorted ( arr , n , key , capacity ) :		  error : Traceback (most recent call last):   File
  if ( n >= capacity ) return n ;			      	  if ( n >= capacity ) :				    	if n >= capacity :					  "dump/transcoder/eval/cpp_python/model_1/transcode
  int i ;						      	      return n						    	    return n						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  for ( i = n - 1 ;					      	  i = n - 1						    	i = 0							  /SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1.py",
  ( i >= 0 && arr [ i ] > key ) ;			      	  while i >= 0 and arr [ i ] > key :			    	for ( i , item ) in enumerate ( arr ) :			   line 53, in <module>	    if f_filled(*parameters_
  i -- ) arr [ i + 1 ] = arr [ i ] ;			      	      arr [ i + 1 ] = arr [ i ]				    	    arr [ i + 1 ] = item				  set) == f_gold(*parameters_set):   File "dump/tran
  arr [ i + 1 ] = key ;					      	      i -= 1						    	arr [ i + 1 ] = key					  scoder/eval/cpp_python/model_1/transcoder_eval/206
  return ( n + 1 ) ;					      	  arr [ i + 1 ] = key					    	return ( n + 1 , arr )					  42414/eval_scripts/cpp_sa-python_sa.test/SEARCH_IN
}							      	  return ( n + 1 )					    								  SERT_AND_DELETE_IN_A_SORTED_ARRAY_1.py", line 33,
							      								    								  in f_filled	  arr [ i + 1 ] = item IndexError: l
							      								    								  ist assignment index out of range
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
int solve ( int arr [ ] , int n ) {			      def solve ( arr , n ) :					    def solve ( arr , n ) :					  success : None
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	arr.sort ( )						  
  int a = 0 , b = 0 ;					      	  a = 0 b = 0						    	a , b = 0 , 0						  
  for ( int i = 0 ;					      	  for i in range ( n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      if ( i % 2 != 0 ) :				    	    if i & 1 :						  
  i ++ ) {						      		  a = a * 10 + arr [ i ]			    		a = a * 10 + arr [ i ]				  
    if ( i & 1 ) a = a * 10 + arr [ i ] ;		      	      else :						    	    else :						  
    else b = b * 10 + arr [ i ] ;			      		  b = b * 10 + arr [ i ]			    		b = b * 10 + arr [ i ]				  
  }							      	  return a + b						    	return a + b						  
  return a + b ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
OVERLAPPING_SUM_TWO_ARRAY				      OVERLAPPING_SUM_TWO_ARRAY					    OVERLAPPING_SUM_TWO_ARRAY					  OVERLAPPING_SUM_TWO_ARRAY
--							      --							    --								  --
int findSum ( int A [ ] , int B [ ] , int n ) {		      def findSum ( A , B , n ) :				    def findSum ( A , B , n ) :					  script_not_found : None
  unordered_map < int , int > hash ;			      	  Hash = defaultdict ( lambda : 0 )			    	hash = { }						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      Hash [ A [ i ] ] += 1				    	    hash [ A [ i ] ] += 1				  
  i ++ ) {						      	      Hash [ B [ i ] ] += 1				    	    hash [ B [ i ] ] += 1				  
    hash [ A [ i ] ] ++ ;				      	  Sum = 0						    	sum = 0							  
    hash [ B [ i ] ] ++ ;				      	  for x in Hash :					    	for x in hash :						  
  }							      	      if Hash [ x ] == 1 :				    	    if x [ 1 ] == 1 :					  
  int sum = 0 ;						      		  Sum += x					    		sum += x [ 0 ]					  
  for ( auto x : hash ) if ( x . second == 1 ) sum += x . fir 	  return Sum						    	return sum						  
  return sum ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
int maxLen ( int arr [ ] , int n ) {			      def maxLen ( arr ) :					    def maxLen ( arr , n ) :					  script_not_found : None
  int max_len = 0 ;					      	  max_len = 0						    	max_len = 0						  
  for ( int i = 0 ;					      	  for i in range ( len ( arr ) ) :			    	for i in range ( n ) :					  
  i < n ;						      	      curr_sum = 0					    	    curr_sum = 0					  
  i ++ ) {						      	      for j in range ( i , len ( arr ) ) :		    	    for j in range ( i , n ) :				  
    int curr_sum = 0 ;					      		  curr_sum += arr [ j ]				    		curr_sum += arr [ j ]				  
    for ( int j = i ;					      		  if curr_sum == 0 :				    		if curr_sum == 0 :				  
    j < n ;						      		      max_len = max ( max_len , j - i + 1 )	    		    max_len = max ( max_len , j - i + 1 )	  
    j ++ ) {						      	  return max_len					    	return max_len						  
      curr_sum += arr [ j ] ;				      								    								  
      if ( curr_sum == 0 ) max_len = max ( max_len , j - i +  								    								  
    }							      								    								  
  }							      								    								  
  return max_len ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	      FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	    FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	  FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE
--							      --							    --								  --
int minRadius ( int k , int x [ ] , int y [ ] , int n ) {     def minRadius ( k , x , y , n ) :				    def minRadius ( k , x , y , n ) :				  script_not_found : None
  int dis [ n ] ;					      	  dis = [ 0 ] * n					    	dis = [ ]						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ]	    	    dis.append ( x [ i ] * x [ i ] + y [ i ] * y [ i ] )  
  i ++ ) dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ;  	  dis.sort ( )						    	dis.sort ( )						  
  sort ( dis , dis + n ) ;				      	  return dis [ k - 1 ]					    	return dis [ k - 1 ]					  
  return dis [ k - 1 ] ;				      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS	  GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS
--							      --							    --								  --
void generate ( int ones , int zeroes , string str , int len  def generate ( ones , zeroes , str , len1 ) :		    def generate ( ones , zeroes , str , len ) :		  script_not_found : None
  if ( len == str . length ( ) ) {			      	  if ( len1 == len ( str ) ) :				    	if len == len ( str ) :					  
    cout << str << "  " ;				      	      print ( str , end = " " )				    	    print ( str + "  " )				  
    return ;						      	      return						    	    return						  
  }							      	  generate ( ones + 1 , zeroes , str + "1" , len1 )	    	generate ( ones + 1 , zeroes , str + "1" , len )	  
  generate ( ones + 1 , zeroes , str + "1" , len ) ;	      	  if ( ones > zeroes ) :				    	if ones > zeroes :					  
  if ( ones > zeroes ) generate ( ones , zeroes + 1 , str + " 	      generate ( ones , zeroes + 1 , str + "0" , len1 )	    	    generate ( ones , zeroes + 1 , str + "0" , len )	  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      def search ( arr , n , x ) :				    def search ( arr , n , x ) :				  success : None
  int i = 0 ;						      	  i = 0							    	i = 0							  
  while ( i < n ) {					      	  while ( i < n ) :					    	while i < n :						  
    if ( arr [ i ] == x ) return i ;			      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  
    i = i + abs ( arr [ i ] - x ) ;			      		  return i					    		return i					  
  }							      	      i = i + abs ( arr [ i ] - x )			    	    i = i + abs ( arr [ i ] - x )			  
  cout << "number is not present!" ;			      	  print ( "number is not present!" )			    	print ( "number is not present!" )			  
  return - 1 ;						      	  return - 1						    	return - 1						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_ARRAY_ADJACENT_DIFFER_K			      SEARCHING_ARRAY_ADJACENT_DIFFER_K				    SEARCHING_ARRAY_ADJACENT_DIFFER_K				  SEARCHING_ARRAY_ADJACENT_DIFFER_K
--							      --							    --								  --
int search ( int arr [ ] , int n , int x , int k ) {	      def search ( arr , n , x , k ) :				    def search ( arr , n , x , k ) :				  error : Traceback (most recent call last):   File
  int i = 0 ;						      	  i = 0							    	i = 0							  "dump/transcoder/eval/cpp_python/model_1/transcode
  while ( i < n ) {					      	  while ( i < n ) :					    	while i < n :						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
    if ( arr [ i ] == x ) return i ;			      	      if ( arr [ i ] == x ) :				    	    if arr [ i ] == x :					  /SEARCHING_ARRAY_ADJACENT_DIFFER_K.py", line 52, i
    i = i + max ( 1 , abs ( arr [ i ] - x ) / k ) ;	      		  return i					    		return i					  n <module>	 if f_filled(*parameters_set) == f_g
  }							      	      i = i + max ( 1 , int ( abs ( arr [ i ] - x ) / k ) ) 	    i = i + max ( 1 , abs ( arr [ i ] - x ) / k )	  old(*parameters_set):	  File "dump/transcoder/eval
  cout << "number is not present!" ;			      	  print ( "number is not present!" )			    	print ( "number is not present!" )			  /cpp_python/model_1/transcoder_eval/20642414/eval_
  return - 1 ;						      	  return - 1						    	return - 1						  scripts/cpp_sa-python_sa.test/SEARCHING_ARRAY_ADJA
}							      								    								  CENT_DIFFER_K.py", line 30, in f_filled     if arr
							      								    								   [ i ] == x : TypeError: list indices must be inte
							      								    								  gers or slices, not float
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
int countPairsWithDiffK ( int arr [ ] , int n , int k ) {     def countPairsWithDiffK ( arr , n , k ) :			    def countPairsWithDiffK ( arr , n , k ) :			  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  
  i < n ;						      	      for j in range ( i + 1 , n ) :			    	    for j in range ( i + 1 , n ) :			  
  i ++ ) {						      		  if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  		if arr [ i ] - arr [ j ] == k or arr [ j ] - arr  
    for ( int j = i + 1 ;				      		      count += 1				    		    count += 1					  
    j < n ;						      	  return count						    	return count						  
    j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 								    								  
  }							      								    								  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
int countNegative ( int M [ ] [ 4 ] , int n , int m ) {	      def countNegative ( M , n , m ) :				    def countNegative ( M , n , m ) :				  success : None
  int count = 0 ;					      	  count = 0						    	count = 0						  
  int i = 0 ;						      	  i = 0							    	i = 0							  
  int j = m - 1 ;					      	  j = m - 1						    	j = m - 1						  
  while ( j >= 0 && i < n ) {				      	  while j >= 0 and i < n :				    	while j >= 0 and i < n :				  
    if ( M [ i ] [ j ] < 0 ) {				      	      if M [ i ] [ j ] < 0 :				    	    if M [ i ] [ j ] < 0 :				  
      count += j + 1 ;					      		  count += ( j + 1 )				    		count += j + 1					  
      i += 1 ;						      		  i += 1					    		i += 1						  
    }							      	      else :						    	    else :						  
    else j -= 1 ;					      		  j -= 1					    		j -= 1						  
  }							      	  return count						    	return count						  
  return count ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION
--							      --							    --								  --
int findMinX ( int num [ ] , int rem [ ] , int k ) {	      def findMinX ( num , rem , k ) :				    def findMinX ( num , rem , k ) :				  script_not_found : None
  int x = 1 ;						      	  x = 1							    	x = 1							  
  while ( true ) {					      	  while ( True ) :					    	while True :						  
    int j ;						      	      j = 0						    	    j = 0						  
    for ( j = 0 ;					      	      while ( j < k ) :					    	    for j in range ( k ) :				  
    j < k ;						      		  if ( x % num [ j ] != rem [ j ] ) :		    		if x % num [ j ] != rem [ j ] :			  
    j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	      		      break					    		    break					  
    if ( j == k ) return x ;				      		  j += 1					    	    if j == k :						  
    x ++ ;						      	      if ( j == k ) :					    		return x					  
  }							      		  return x					    	    x += 1						  
  return x ;						      	      x += 1						    	return x						  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_CONSECUTIVE_DUPLICATES_STRING			      REMOVE_CONSECUTIVE_DUPLICATES_STRING			    REMOVE_CONSECUTIVE_DUPLICATES_STRING			  REMOVE_CONSECUTIVE_DUPLICATES_STRING
--							      --							    --								  --
void removeDuplicates ( char S [ ] ) {			      def removeDuplicates ( S ) :				    def removeDuplicates ( S ) :				  error : Traceback (most recent call last):   File
  int n = strlen ( S ) ;				      	  n = len ( S )						    	n = len ( S )						  "dump/transcoder/eval/cpp_python/model_1/transcode
  if ( n < 2 ) return ;					      	  if ( n < 2 ) :					    	if n < 2 :						  r_eval/20642414/eval_scripts/cpp_sa-python_sa.test
  int j = 0 ;						      	      return						    	    return S						  /REMOVE_CONSECUTIVE_DUPLICATES_STRING.py", line 72
  for ( int i = 1 ;					      	  j = 0							    	j = 0							  , in <module>	    f_filled(*(filled_function_param
  i < n ;						      	  for i in range ( n ) :				    	for i in range ( 1 , n ) :				  [i]))	  File "dump/transcoder/eval/cpp_python/mode
  i ++ ) {						      	      if ( S [ j ] != S [ i ] ) :			    	    if S [ j ] != S [ i ] :				  l_1/transcoder_eval/20642414/eval_scripts/cpp_sa-p
    if ( S [ j ] != S [ i ] ) {				      		  j += 1					    		j += 1						  ython_sa.test/REMOVE_CONSECUTIVE_DUPLICATES_STRING
      j ++ ;						      		  S [ j ] = S [ i ]				    		S [ j ] = S [ i ]				  .py", line 41, in f_filled	 S [ j ] = '' IndexE
      S [ j ] = S [ i ] ;				      	  j += 1						    	j += 1							  rror: list assignment index out of range
    }							      	  S = S [ : j ]						    	S [ j ] = ''						  
  }							      	  return S						    	return S						  
  j ++ ;						      								    								  
  S [ j ] = '\0' ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION		      DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			    DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			  DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION
--							      --							    --								  --
bool distributingBalls ( int k , int n , string str ) {	      def distributingBalls ( k , n , string ) :		    def distributingBalls ( k , n , str ) :			  script_not_found : None
  int a [ MAX_CHAR ] = {				      	  a = [ 0 ] * MAX_CHAR					    	a = [ 0 ] * n						  
    0 }							      	  for i in range ( n ) :				    	for i in range ( n ) :					  
    ;							      	      a [ ord ( string [ i ] ) - ord ( 'a' ) ] += 1	    	    a [ str [ i ] - 'a' ] += 1				  
    for ( int i = 0 ;					      	  for i in range ( MAX_CHAR ) :				    	for i in range ( n ) :					  
    i < n ;						      	      if ( a [ i ] > k ) :				    	    if a [ i ] > k :					  
    i ++ ) {						      		  return False					    		return False					  
      a [ str [ i ] - 'a' ] ++ ;			      	  return True						    	return True						  
    }							      								    								  
    for ( int i = 0 ;					      								    								  
    i < MAX_CHAR ;					      								    								  
    i ++ ) if ( a [ i ] > k ) return false ;		      								    								  
    return true ;					      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
void insertionSortRecursive ( int arr [ ] , int n ) {	      def insertionSortRecursive ( arr , n ) :			    def insertionSortRecursive ( arr , n ) :			  success : None
  if ( n <= 1 ) return ;				      	  if n <= 1 :						    	if n <= 1 :						  
  insertionSortRecursive ( arr , n - 1 ) ;		      	      return						    	    return						  
  int last = arr [ n - 1 ] ;				      	  insertionSortRecursive ( arr , n - 1 )		    	insertionSortRecursive ( arr , n - 1 )			  
  int j = n - 2 ;					      	  last = arr [ n - 1 ]					    	last = arr [ n - 1 ]					  
  while ( j >= 0 && arr [ j ] > last ) {		      	  j = n - 2						    	j = n - 2						  
    arr [ j + 1 ] = arr [ j ] ;				      	  while ( j >= 0 and arr [ j ] > last ) :		    	while j >= 0 and arr [ j ] > last :			  
    j -- ;						      	      arr [ j + 1 ] = arr [ j ]				    	    arr [ j + 1 ] = arr [ j ]				  
  }							      	      j = j - 1						    	    j -= 1						  
  arr [ j + 1 ] = last ;				      	  arr [ j + 1 ] = last					    	arr [ j + 1 ] = last					  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			      CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			    CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			  CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT
--							      --							    --								  --
bool areEqual ( int arr1 [ ] , int arr2 [ ] , int n , int m ) def areEqual ( arr1 , arr2 , n , m ) :			    def areEqual ( arr1 , arr2 , n , m ) :			  script_not_found : None
  if ( n != m ) return false ;				      	  if ( n != m ) :					    	if n != m :						  
  sort ( arr1 , arr1 + n ) ;				      	      return False ;					    	    return False					  
  sort ( arr2 , arr2 + m ) ;				      	  arr1.sort ( ) ;					    	arr1.sort ( )						  
  for ( int i = 0 ;					      	  arr2.sort ( ) ;					    	arr2.sort ( )						  
  i < n ;						      	  for i in range ( 0 , n - 1 ) :			    	for i in range ( n ) :					  
  i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ;	      	      if ( arr1 [ i ] != arr2 [ i ] ) :			    	    if arr1 [ i ] != arr2 [ i ] :			  
  return true ;						      		  return False ;				    		return False					  
}							      	  return True ;						    	return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
--							      --							    --								  --
int getOddOccurrence ( int arr [ ] , int arr_size ) {	      def getOddOccurrence ( arr , arr_size ) :			    def getOddOccurrence ( arr , arr_size ) :			  success : None
  for ( int i = 0 ;					      	  for i in range ( 0 , arr_size ) :			    	for i in range ( arr_size ) :				  
  i < arr_size ;					      	      count = 0						    	    count = 0						  
  i ++ ) {						      	      for j in range ( 0 , arr_size ) :			    	    for j in range ( arr_size ) :			  
    int count = 0 ;					      		  if arr [ i ] == arr [ j ] :			    		if arr [ i ] == arr [ j ] :			  
    for ( int j = 0 ;					      		      count += 1				    		    count += 1					  
    j < arr_size ;					      	      if ( count % 2 != 0 ) :				    	    if count % 2 != 0 :					  
    j ++ ) {						      		  return arr [ i ]				    		return arr [ i ]				  
      if ( arr [ i ] == arr [ j ] ) count ++ ;		      	  return - 1						    								  
    }							      								    								  
    if ( count % 2 != 0 ) return arr [ i ] ;		      								    								  
  }							      								    								  
  return - 1 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
bool checkIsAP ( int arr [ ] , int n ) {		      def checkIsAP ( arr , n ) :				    def checkIsAP ( arr , n ) :					  success : None
  if ( n == 1 ) return true ;				      	  if ( n == 1 ) : return True				    	if n == 1 :						  
  sort ( arr , arr + n ) ;				      	  arr.sort ( )						    	    return True						  
  int d = arr [ 1 ] - arr [ 0 ] ;			      	  d = arr [ 1 ] - arr [ 0 ]				    	arr.sort ( )						  
  for ( int i = 2 ;					      	  for i in range ( 2 , n ) :				    	d = arr [ 1 ] - arr [ 0 ]				  
  i < n ;						      	      if ( arr [ i ] - arr [ i - 1 ] != d ) :		    	for i in range ( 2 , n ) :				  
  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; 		  return False					    	    if arr [ i ] - arr [ i - 1 ] != d :			  
  return true ;						      	  return True						    		return False					  
}							      								    	return True						  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	      MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	    MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL		  MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL
--							      --							    --								  --
int minOps ( int arr [ ] , int n , int k ) {		      def minOps ( arr , n , k ) :				    def minOps ( arr , n , k ) :				  error :   File "dump/transcoder/eval/cpp_python/mo
  int max = * max_element ( arr , arr + n ) ;		      	  max1 = max ( arr )					    	max = * max_element ( arr , n )				  del_1/transcoder_eval/20642414/eval_scripts/cpp_sa
  int res = 0 ;						      	  res = 0						    	res = 0							  -python_sa.test/MINIMUM_INCREMENT_K_OPERATIONS_MAK
  for ( int i = 0 ;					      	  for i in range ( 0 , n ) :				    	for i in range ( n ) :					  E_ELEMENTS_EQUAL.py", line 29	    max = * max_elem
  i < n ;						      	      if ( ( max1 - arr [ i ] ) % k != 0 ) :		    	    if ( max - arr [ i ] ) % k != 0 :			  ent ( arr , n )	   ^ SyntaxError: can't use
  i ++ ) {						      		  return - 1					    		return - 1					  starred expression here
    if ( ( max - arr [ i ] ) % k != 0 ) return - 1 ;	      	      else :						    	    else :						  
    else res += ( max - arr [ i ] ) / k ;		      		  res += ( max1 - arr [ i ] ) / k		    		res += ( max - arr [ i ] ) / k			  
  }							      	  return int ( res )					    	return res						  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
