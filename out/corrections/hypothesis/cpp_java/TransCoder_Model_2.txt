========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_CIRCLE				      C_PROGRAM_FIND_AREA_CIRCLE				    C_PROGRAM_FIND_AREA_CIRCLE					  C_PROGRAM_FIND_AREA_CIRCLE
--							      --							    --								  --
float findArea ( float r ) {				      static double findArea ( int r ) {			    public static float findArea ( float r ) {			  script_not_found : None
  return ( pi * r * r ) ;				      	return PI * Math . pow ( r , 2 ) ;			      return ( Math . PI * r * r ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PERIMETER_CYLINDER					      FIND_PERIMETER_CYLINDER					    FIND_PERIMETER_CYLINDER					  FIND_PERIMETER_CYLINDER
--							      --							    --								  --
int perimeter ( int diameter , int height ) {		      static int perimeter ( int diameter , int height ) {	    public static int perimeter ( int diameter , int height ) {	  success : None
  return 2 * ( diameter + height ) ;			      	return 2 * ( diameter + height ) ;			      return 2 * ( diameter + height ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1			  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS_1
--							      --							    --								  --
int kthgroupsum ( int k ) {				      public static int kthgroupsum ( int k ) {			    static int kthgroupsum ( int k ) {				  success : None
  return k * k * k ;					      	return k * k * k ;					      return k * k * k ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION						      TAIL_RECURSION						    TAIL_RECURSION						  TAIL_RECURSION
--							      --							    --								  --
unsigned int fact ( unsigned int n ) {			      static int fact ( int n ) {				    public static int fact ( int n ) {				  success : None
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  return n * fact ( n - 1 ) ;				      	return n * fact ( n - 1 ) ;				      return n * fact ( n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_TO_MULTIPLY_WITH_7			      EFFICIENT_WAY_TO_MULTIPLY_WITH_7				    EFFICIENT_WAY_TO_MULTIPLY_WITH_7				  EFFICIENT_WAY_TO_MULTIPLY_WITH_7
--							      --							    --								  --
long multiplyBySeven ( long n ) {			      static int multiplyBySeven ( int n ) {			    public static long multiplyBySeven ( long n ) {		  success : None
  return ( ( n << 3 ) - n ) ;				      	return ( ( n << 3 ) - n ) ;				      return ( ( n << 3 ) - n ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_NUMBER_USING_LOG				      SQUARE_ROOT_NUMBER_USING_LOG				    SQUARE_ROOT_NUMBER_USING_LOG				  SQUARE_ROOT_NUMBER_USING_LOG
--							      --							    --								  --
double squareRoot ( double n ) {			      static double squareRoot ( double n ) {			    public static double squareRoot ( double n ) {		  script_not_found : None
  return pow ( 2 , 0.5 * log2 ( n ) ) ;			      	return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . l   return Math . pow ( 2 , 0.5 * Math . log2 ( n ) ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPARSE_SEARCH						      SPARSE_SEARCH						    SPARSE_SEARCH						  SPARSE_SEARCH
--							      --							    --								  --
int sparseSearch ( string arr [ ] , string x , int n ) {      static int sparseSearch ( String arr [ ] , String x , int n ) public static int sparseSearch ( String arr [ ] , String x ,  script_not_found : None
  return binarySearch ( arr , 0 , n - 1 , x ) ;		      	return binarySearch ( arr , 0 , n - 1 , x ) ;		      return binarySearch ( arr , 0 , n - 1 , x ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES_1				      NUMBER_TRIANGLES_N_MOVES_1				    NUMBER_TRIANGLES_N_MOVES_1					  NUMBER_TRIANGLES_N_MOVES_1
--							      --							    --								  --
int numberOfTriangles ( int n ) {			      public static double numberOfTriangles ( int n ) {	    public static int numberOfTriangles ( int n ) {		  script_not_found : None
  int ans = 2 * ( pow ( 3 , n ) ) - 1 ;			      	double ans = 2 * ( pow ( 3 , n ) ) - 1 ;		      int ans = 2 * ( Math . pow ( 3 , n ) ) - 1 ;		  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			      MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			    MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA			  MINIMUM_HEIGHT_TRIANGLE_GIVEN_BASE_AREA
--							      --							    --								  --
int minHeight ( int base , int area ) {			      static double minHeight ( double base , double area ) {	    public static int minHeight ( int base , int area ) {	  script_not_found : None
  return ceil ( ( float ) ( 2 * area ) / base ) ;	      	double d = ( 2 * area ) / base ;			      return Math . ceil ( ( float ) ( 2 * area ) / base ) ;	  
}							      	return Math . ceil ( d ) ;				    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			      PROGRAM_CIRCUMFERENCE_PARALLELOGRAM			    PROGRAM_CIRCUMFERENCE_PARALLELOGRAM				  PROGRAM_CIRCUMFERENCE_PARALLELOGRAM
--							      --							    --								  --
float circumferenceparallelogram ( float a , float b ) {      static float circumferenceparallelogram ( float a , float b ) public static float circumferenceParallelogram ( float a , fl success : None
  return ( ( 2 * a ) + ( 2 * b ) ) ;			      	return ( ( 2 * a ) + ( 2 * b ) ) ;			      return ( ( 2 * a ) + ( 2 * b ) ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_2				      C_PROGRAM_FACTORIAL_NUMBER_2				    C_PROGRAM_FACTORIAL_NUMBER_2				  C_PROGRAM_FACTORIAL_NUMBER_2
--							      --							    --								  --
int factorial ( int n ) {				      int factorial ( int n ) {					    public static int factorial ( int n ) {			  success : None
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ;   return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_CIRCUMSCRIBED_CIRCLE_SQUARE			      AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				    AREA_CIRCUMSCRIBED_CIRCLE_SQUARE				  AREA_CIRCUMSCRIBED_CIRCLE_SQUARE
--							      --							    --								  --
float areacircumscribed ( float a ) {			      static float areacircumscribed ( float a ) {		    public static float areacircumscribed ( float a ) {		  error : AREA_CIRCUMSCRIBED_CIRCLE_SQUARE.java:20:
  return ( a * a * ( PI / 2 ) ) ;			      	float PI = 3.14159265f ;				      return ( a * a * ( PI / 2 ) ) ;				  error: cannot find symbol   return ( a * a * ( PI
}							      	return ( a * a * ( PI / 2 ) ) ;				    }								  / 2 ) ) ;			 ^   symbol:   varia
							      }								    								  ble PI   location: class AREA_CIRCUMSCRIBED_CIRCLE
							      								    								  _SQUARE 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SEQUENCE_2_22_222					      SUM_SEQUENCE_2_22_222					    SUM_SEQUENCE_2_22_222					  SUM_SEQUENCE_2_22_222
--							      --							    --								  --
float sumOfSeries ( int n ) {				      static double sumOfSeries ( int n ) {			    public static float sumOfSeries ( int n ) {			  error : SUM_SEQUENCE_2_22_222.java:19: error: inco
  return 0.0246 * ( pow ( 10 , n ) - 1 - ( 9 * n ) ) ;	      	return 0.0246 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ;   return 0.0246 * ( Math . pow ( 10 , n ) - 1 - ( 9 * n ) ) ; mpatible types: possible lossy conversion from dou
}							      }								    }								  ble to float	 return 0.0246 * ( Math . pow ( 10 ,
							      								    								   n ) - 1 - ( 9 * n ) ) ;		   ^ 1 error
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_HEXAGON					      AREA_OF_A_HEXAGON						    AREA_OF_A_HEXAGON						  AREA_OF_A_HEXAGON
--							      --							    --								  --
double hexagonArea ( double s ) {			      public static double hexagonArea ( double s ) {		    public static double hexagonArea ( double s ) {		  success : identical to gold
  return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	      	return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	      return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL					      DOUBLE_FACTORIAL						    DOUBLE_FACTORIAL						  DOUBLE_FACTORIAL
--							      --							    --								  --
unsigned int doublefactorial ( unsigned int n ) {	      static long doublefactorial ( long n ) {			    public static int doublefactorial ( int n ) {		  error : DOUBLE_FACTORIAL.java:40: error: incompati
  if ( n == 0 || n == 1 ) return 1 ;			      	if ( n == 0 || n == 1 ) return 1 ;			      if ( n == 0 || n == 1 ) return 1 ;			  ble types: Long cannot be converted to int
  return n * doublefactorial ( n - 2 ) ;		      	return n * doublefactorial ( n - 2 ) ;			      return n * doublefactorial ( n - 2 ) ;			   if(f_filled(param0.get(i)) == f_gold(param0.get(i
}							      }								    }								  )))				    ^ Note: Some mes
							      								    								  sages have been simplified; recompile with -Xdiags
							      								    								  :verbose to get full output 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT				      POSITION_OF_RIGHTMOST_SET_BIT				    POSITION_OF_RIGHTMOST_SET_BIT				  POSITION_OF_RIGHTMOST_SET_BIT
--							      --							    --								  --
public : unsigned int getFirstSetBitPos ( int n ) {	      public static int getFirstSetBitPos ( int n ) {		    public static int getFirstSetBitPos ( int n ) {		  error : POSITION_OF_RIGHTMOST_SET_BIT.java:19: err
  return log2 ( n & - n ) + 1 ;				      	return ( int ) ( ( Math . log10 ( n & - n ) ) / Math . log1   return log2 ( n & - n ) + 1 ;				  or: cannot find symbol   return log2 ( n & - n ) +
}							      }								    }								   1 ;		^   symbol:   method log2(int)	 loc
							      								    								  ation: class POSITION_OF_RIGHTMOST_SET_BIT 1 error
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_CHARACTERS					      SORT_STRING_CHARACTERS					    SORT_STRING_CHARACTERS					  SORT_STRING_CHARACTERS
--							      --							    --								  --
void sortString ( string & str ) {			      static void sortString ( String str ) {			    public static void sortString ( String str ) {		  script_not_found : None
  sort ( str . begin ( ) , str . end ( ) ) ;		      	char [ ] arr = str . toCharArray ( ) ;			      Collections . sort ( str , new Comparator < String > ( ) {  
  cout << str ;						      	Arrays . sort ( arr ) ;					    	public int compare ( String o1 , String o2 ) {		  
}							      	System . out . print ( String . valueOf ( arr ) ) ;	    	  return o1 . compareTo ( o2 ) ;			  
							      }								    	}							  
							      								      }								  
							      								      ) ;							  
							      								      System . out . println ( str ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_2
--							      --							    --								  --
int factorial ( int n ) {				      int factorial ( int n ) {					    public static int factorial ( int n ) {			  success : None
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ;   return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER
--							      --							    --								  --
void bin ( unsigned n ) {				      static void bin ( int n ) {				    public static void bin ( int n ) {				  script_not_found : None
  if ( n > 1 ) bin ( n / 2 ) ;				      	if ( n > 1 ) bin ( n / 2 ) ;				      if ( n > 1 ) {						  
  cout << n % 2 ;					      	System . out . print ( n % 2 ) ;			    	bin ( n / 2 ) ;						  
}							      }								      }								  
							      								      System . out . println ( n % 2 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_FACTORIALS_TWO_NUMBERS				      GCD_FACTORIALS_TWO_NUMBERS				    GCD_FACTORIALS_TWO_NUMBERS					  GCD_FACTORIALS_TWO_NUMBERS
--							      --							    --								  --
int gcdOfFactorial ( int m , int n ) {			      static int gcdOfFactorial ( int m , int n ) {		    public static int gcdOfFactorial ( int m , int n ) {	  script_not_found : None
  return factorial ( min ( m , n ) ) ;			      	int min = m < n ? m : n ;				      return factorial ( Math . min ( m , n ) ) ;		  
}							      	return factorial ( min ) ;				    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIRTHDAY_PARADOX					      BIRTHDAY_PARADOX						    BIRTHDAY_PARADOX						  BIRTHDAY_PARADOX
--							      --							    --								  --
int find ( double p ) {					      static double find ( double p ) {				    public static int find ( double p ) {			  script_not_found : None
  return ceil ( sqrt ( 2 * 365 * log ( 1 / ( 1 - p ) ) ) ) ;  	return Math . ceil ( Math . sqrt ( 2 * 365 * Math . log ( 1   return Math . ceil ( Math . sqrt ( 2 * 365 * Math . log ( 1 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_ PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE_
--							      --							    --								  --
int Circumference ( int l , int w ) {			      static int Circumference ( int l , int w ) {		    public static int Circumference ( int l , int w ) {		  success : None
  return ( 2 * ( l + w ) ) ;				      	return ( 2 * ( l + w ) ) ;				      return ( 2 * ( l + w ) ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N_1
--							      --							    --								  --
int countIntegralSolutions ( int n ) {			      static int countIntegralSolutions ( int n ) {		    public static int countIntegralSolutions ( int n ) {	  success : None
  return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;		      	return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;			      return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR_2
--							      --							    --								  --
int getRemainder ( int num , int divisor ) {		      static int getRemainder ( int num , int divisor ) {	    public static int getRemainder ( int num , int divisor ) {	  success : None
  while ( num >= divisor ) num -= divisor ;		      	while ( num >= divisor ) num -= divisor ;		      while ( num >= divisor ) {				  
  return num ;						      	return num ;						    	num -= divisor ;					  
}							      }								      }								  
							      								      return num ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		      ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER		    ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER			  ONE_LINE_FUNCTION_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
int factorial ( int n ) {				      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
  return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 	return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ;   return ( n == 1 || n == 0 ) ? 1 : n * factorial ( n - 1 ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TIME_MEET_ANIMALS					      TIME_MEET_ANIMALS						    TIME_MEET_ANIMALS						  TIME_MEET_ANIMALS
--							      --							    --								  --
void timeToMeet ( double s , double v ) {		      static void timeToMeet ( double s , double v ) {		    public static void timeToMeet ( double s , double v ) {	  script_not_found : None
  double V = 3 * v / 2 ;				      	double V = 3 * v / 2 ;					      double V = 3 * v / 2 ;					  
  double time = s / V ;					      	double time = s / V ;					      double time = s / V ;					  
  cout << time ;					      	System . out . println ( ( float ) time ) ;		      System . out . println ( time ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LINE_PASSES_ORIGIN				      CHECK_LINE_PASSES_ORIGIN					    CHECK_LINE_PASSES_ORIGIN					  CHECK_LINE_PASSES_ORIGIN
--							      --							    --								  --
bool checkOrigin ( int x1 , int y1 , int x2 , int y2 ) {      static boolean checkOrigin ( int x1 , int y1 , int x2 , int y public static boolean checkOrigin ( int x1 , int y1 , int x2  success : None
  return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ;	      	return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ;	      return ( x1 * ( y2 - y1 ) == y1 * ( x2 - x1 ) ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM	      PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		    PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM		  PROGRAM_TO_FIND_THE_VOLUME_OF_A_TRIANGULAR_PRISM
--							      --							    --								  --
float findVolume ( float l , float b , float h ) {	      static float findVolume ( float l , float b , float h ) {	    public static float findVolume ( float l , float b , float h  success : None
  float volume = ( l * b * h ) / 2 ;			      	float volume = ( l * b * h ) / 2 ;			      float volume = ( l * b * h ) / 2 ;			  
  return volume ;					      	return volume ;						      return volume ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_555555_N_TERMS				      SUM_SERIES_555555_N_TERMS					    SUM_SERIES_555555_N_TERMS					  SUM_SERIES_555555_N_TERMS
--							      --							    --								  --
int sumOfSeries ( int n ) {				      static int sumOfSeries ( int n ) {			    public static int sumOfSeries ( int n ) {			  error : SUM_SERIES_555555_N_TERMS.java:19: error:
  return 0.6172 * ( pow ( 10 , n ) - 1 ) - 0.55 * n ;	      	return ( int ) ( 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0   return 0.6172 * ( Math . pow ( 10 , n ) - 1 ) - 0.55 * n ;  incompatible types: possible lossy conversion from
}							      }								    }								   double to int   return 0.6172 * ( Math . pow ( 10
							      								    								   , n ) - 1 ) - 0.55 * n ;
							      								    								  			  ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER				      COUNT_SET_BITS_IN_AN_INTEGER				    COUNT_SET_BITS_IN_AN_INTEGER				  COUNT_SET_BITS_IN_AN_INTEGER
--							      --							    --								  --
unsigned int countSetBits ( unsigned int n ) {		      static int countSetBits ( int n ) {			    public static int countSetBits ( int n ) {			  success : None
  unsigned int count = 0 ;				      	int count = 0 ;						      int count = 0 ;						  
  while ( n ) {						      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    count += n & 1 ;					      	  count += n & 1 ;					    	count += n & 1 ;					  
    n >>= 1 ;						      	  n >>= 1 ;						    	n >>>= 1 ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE  PROGRAM_TO_CALCULATE_AREA_OF_AN_CIRCLE_INSCRIBED_IN_A_SQUARE
--							      --							    --								  --
float areaOfInscribedCircle ( float a ) {		      static double areaOfInscribedCircle ( float a ) {		    public static float areaOfInscribedCircle ( float a ) {	  script_not_found : None
  return ( PI / 4 ) * a * a ;				      	return ( PI / 4 ) * a * a ;				      return ( PI / 4 ) * a * a ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12_1				      SUM_SERIES_12_32_52_2N_12_1				    SUM_SERIES_12_32_52_2N_12_1					  SUM_SERIES_12_32_52_2N_12_1
--							      --							    --								  --
int sumOfSeries ( int n ) {				      static int sumOfSeries ( int n ) {			    static int sumOfSeries ( int n ) {				  success : identical to gold
  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;	      	return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;	      return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER_1				      C_PROGRAM_FACTORIAL_NUMBER_1				    C_PROGRAM_FACTORIAL_NUMBER_1				  C_PROGRAM_FACTORIAL_NUMBER_1
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
  int res = 1 , i ;					      	int res = 1 , i ;					      int res = 1 , i ;						  
  for ( i = 2 ;						      	for ( i = 2 ;						      for ( i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) res *= i ;					      	i ++ ) res *= i ;					      i ++ ) {							  
  return res ;						      	return res ;						    	res *= i ;						  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_AREA_TETRAHEDRON				      CALCULATE_AREA_TETRAHEDRON				    CALCULATE_AREA_TETRAHEDRON					  CALCULATE_AREA_TETRAHEDRON
--							      --							    --								  --
double vol_tetra ( int side ) {				      static double vol_tetra ( int side ) {			    public static double volTetra ( int side ) {		  success : None
  double volume = ( pow ( side , 3 ) / ( 6 * sqrt ( 2 ) ) ) ; 	double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sq   double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sq 
  return volume ;					      	return volume ;						      return volume ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE NUMBER_OF_TRIANGLES_IN_A_PLANE_IF_NO_MORE_THAN_TWO_POINTS_ARE
--							      --							    --								  --
int countNumberOfTriangles ( int n ) {			      static int countNumberOfTriangles ( int n ) {		    public static int countNumberOfTriangles ( int n ) {	  success : None
  return n * ( n - 1 ) * ( n - 2 ) / 6 ;		      	return n * ( n - 1 ) * ( n - 2 ) / 6 ;			      return n * ( n - 1 ) * ( n - 2 ) / 6 ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		      SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		    SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS		  SUM_SUBSETS_SET_FORMED_FIRST_N_NATURAL_NUMBERS
--							      --							    --								  --
unsigned long long findSumSubsets ( int n ) {		      static long findSumSubsets ( int n ) {			    public static long findSumSubsets ( int n ) {		  failure : #Results:5, 10
  return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) ) ;	      	return ( n * ( n + 1 ) / 2 ) * ( 1 << ( n - 1 ) ) ;	      return ( n * ( n + 1 ) / 2 ) * ( 1L << ( n - 1 ) ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW_1
--							      --							    --								  --
int compute_average ( int a , int b ) {			      static int compute_average ( int a , int b ) {		    public static int computeAverage ( int a , int b ) {	  success : None
  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;  	return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;    return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
public : int sumDigits ( int no ) {			      static int sumDigits ( int no ) {				    public static int sumDigits ( int no ) {			  success : None
  return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 ) ;      	return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 ) ;	      return no == 0 ? 0 : no % 10 + sumDigits ( no / 10 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_MID_POINT_LINE				      PROGRAM_FIND_MID_POINT_LINE				    PROGRAM_FIND_MID_POINT_LINE					  PROGRAM_FIND_MID_POINT_LINE
--							      --							    --								  --
void midpoint ( int x1 , int x2 , int y1 , int y2 ) {	      static void midpoint ( int x1 , int x2 , int y1 , int y2 ) {  public static void midpoint ( int x1 , int x2 , int y1 , int  script_not_found : None
  cout << ( float ) ( x1 + x2 ) / 2 << " , " << ( float ) ( y 	System . out . print ( ( x1 + x2 ) / 2 + " , " + ( y1 + y2    System . out . println ( ( float ) ( x1 + x2 ) / 2 + " , "  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES_1
--							      --							    --								  --
int MaximumHeight ( int a [ ] , int n ) {		      static int MaximumHeight ( int a [ ] , int n ) {		    public static int MaximumHeight ( int a [ ] , int n ) {	  error : MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_O
  return floor ( ( - 1 + sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ;     	return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8   return Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) F_ARRAY_VALUES_1.java:19: error: incompatible type
}							      }								    }								  s: possible lossy conversion from double to int
							      								    								  return Math . floor ( ( - 1 + Math . sqrt ( 1 + (
							      								    								  8 * n ) ) ) / 2 ) ;			    ^ 1 erro
							      								    								  r
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1	      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME_1
--							      --							    --								  --
int findIndex ( int n ) {				      static int findIndex ( int n ) {				    public static int findIndex ( int n ) {			  error : FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT
  float fibo = 2.078087 * log ( n ) + 1.672276 ;	      	float fibo = 2.078087F * ( float ) Math . log ( n ) + 1.672   float fibo = 2.078087 * Math . log ( n ) + 1.672276 ;	  _TIME_1.java:20: error: incompatible types: possib
  return round ( fibo ) ;				      	return Math . round ( fibo ) ;				      return Math . round ( fibo ) ;				  le lossy conversion from double to float   float f
}							      }								    }								  ibo = 2.078087 * Math . log ( n ) + 1.672276 ;
							      								    								  					  ^ 1 error
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10	      ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		    ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10		  ROUND_THE_GIVEN_NUMBER_TO_NEAREST_MULTIPLE_OF_10
--							      --							    --								  --
int round ( int n ) {					      static int round ( int n ) {				    public static int round ( int n ) {				  success : None
  int a = ( n / 10 ) * 10 ;				      	int a = ( n / 10 ) * 10 ;				      int a = ( n / 10 ) * 10 ;					  
  int b = a + 10 ;					      	int b = a + 10 ;					      int b = a + 10 ;						  
  return ( n - a > b - n ) ? b : a ;			      	return ( n - a > b - n ) ? b : a ;			      return ( n - a > b - n ) ? b : a ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_1				      POSITION_OF_RIGHTMOST_SET_BIT_1				    POSITION_OF_RIGHTMOST_SET_BIT_1				  POSITION_OF_RIGHTMOST_SET_BIT_1
--							      --							    --								  --
int PositionRightmostSetbit ( int n ) {			      static int PositionRightmostSetbit ( int n ) {		    public static int PositionRightmostSetbit ( int n ) {	  error : POSITION_OF_RIGHTMOST_SET_BIT_1.java:27: e
  int position = 1 ;					      	int position = 1 ;					      int position = 1 ;					  rror: int cannot be dereferenced   while ( ! ( n &
  int m = 1 ;						      	int m = 1 ;						      int m = 1 ;						   m ) . equals ( m ) ) {			^ 1
  while ( ! ( n & m ) ) {				      	while ( ( n & m ) == 0 ) {				      while ( ! ( n & m ) . equals ( m ) ) {			  error
    m = m << 1 ;					      	  m = m << 1 ;						    	m = m << 1 ;						  
    position ++ ;					      	  position ++ ;						    	position ++ ;						  
  }							      	}							      }								  
  return position ;					      	return position ;					      return position ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER   WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER	  WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN_UNSIGNED_INTEGER
--							      --							    --								  --
bool getParity ( unsigned int n ) {			      static boolean getParity ( int n ) {			    public static boolean getParity ( int n ) {			  error : WRITE_A_C_PROGRAM_TO_FIND_THE_PARITY_OF_AN
  bool parity = 0 ;					      	boolean parity = false ;				      boolean parity = 0 ;					  _UNSIGNED_INTEGER.java:24: error: incompatible typ
  while ( n ) {						      	while ( n != 0 ) {					      while ( n > 0 ) {						  es: int cannot be converted to boolean   boolean p
    parity = ! parity ;					      	  parity = ! parity ;					    	parity = ! parity ;					  arity = 0 ;			 ^ 1 error
    n = n & ( n - 1 ) ;					      	  n = n & ( n - 1 ) ;					    	n = n & ( n - 1 ) ;					  
  }							      	}							      }								  
  return parity ;					      	return parity ;						      return parity ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	      ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS	    ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS		  ADD_TWO_NUMBERS_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
int Add ( int x , int y ) {				      static int Add ( int x , int y ) {			    public static int add ( int x , int y ) {			  success : None
  while ( y != 0 ) {					      	while ( y != 0 ) {					      while ( y != 0 ) {					  
    int carry = x & y ;					      	  int carry = x & y ;					    	int carry = x & y ;					  
    x = x ^ y ;						      	  x = x ^ y ;						    	x = x ^ y ;						  
    y = carry << 1 ;					      	  y = carry << 1 ;					    	y = carry << 1 ;					  
  }							      	}							      }								  
  return x ;						      	return x ;						      return x ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI MAXIMUM_NUMBER_2X2_SQUARES_CAN_FIT_INSIDE_RIGHT_ISOSCELES_TRI
--							      --							    --								  --
int numberOfSquares ( int base ) {			      public static int numberOfSquares ( int base ) {		    public static int numberOfSquares ( int base ) {		  success : identical to gold
  base = ( base - 2 ) ;					      	base = ( base - 2 ) ;					      base = ( base - 2 ) ;					  
  base = base / 2 ;					      	base = base / 2 ;					      base = base / 2 ;						  
  return base * ( base + 1 ) / 2 ;			      	return base * ( base + 1 ) / 2 ;			      return base * ( base + 1 ) / 2 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1	    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE_1
--							      --							    --								  --
void swap ( int * xp , int * yp ) {			      static void swap ( int xp , int yp ) {			    public static void swap ( int [ ] xp , int [ ] yp ) {	  script_not_found : None
  if ( xp == yp ) return ;				      	if ( xp == yp ) return ;				      if ( xp . length == yp . length ) return ;		  
  * xp = * xp + * yp ;					      	xp = xp + yp ;						      xp [ 0 ] = xp [ 0 ] + yp [ 0 ] ;				  
  * yp = * xp - * yp ;					      	yp = xp - yp ;						      yp [ 0 ] = yp [ 0 ] - xp [ 0 ] ;				  
  * xp = * xp - * yp ;					      	xp = xp - yp ;						      xp [ 0 ] = xp [ 0 ] - yp [ 0 ] ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_1
--							      --							    --								  --
int findSum ( int n ) {					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum += i * ( n - i ) ;				      	i ++ ) sum += i * ( n - i ) ;				      i ++ ) {							  
  return 2 * sum ;					      	return 2 * sum ;					    	sum += i * ( n - i ) ;					  
}							      }								      }								  
							      								      return 2 * sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY		  SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_ARRAY
--							      --							    --								  --
int findElement ( int arr [ ] , int n , int key ) {	      static int findElement ( int arr [ ] , int n , int key ) {    public static int findElement ( int arr [ ] , int n , int key error : SEARCH_INSERT_AND_DELETE_IN_AN_UNSORTED_AR
  int i ;						      	for ( int i = 0 ;					      int i ;							  RAY.java:76: error: class, interface, or enum expe
  for ( i = 0 ;						      	i < n ;							      for ( i = 0 ;						  cted 11 ^ 1 error
  i < n ;						      	i ++ ) if ( arr [ i ] == key ) return i ;		      i < n ;							  
  i ++ ) if ( arr [ i ] == key ) return i ;		      	return - 1 ;						      i ++ ) if ( arr [ i ] == key ) return i ;			  
  return - 1 ;						      }								      return - 1 ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y				    FIND_UNIT_DIGIT_X_RAISED_POWER_Y				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y
--							      --							    --								  --
int unitDigitXRaisedY ( int x , int y ) {		      static int unitDigitXRaisedY ( int x , int y ) {		    public static int unitDigitXRaisedY ( int x , int y ) {	  success : None
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < y ;						      	i < y ;							      i < y ;							  
  i ++ ) res = ( res * x ) % 10 ;			      	i ++ ) res = ( res * x ) % 10 ;				      i ++ ) {							  
  return res ;						      	return res ;						    	res = ( res * x ) % 10 ;				  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TAIL_RECURSION_FIBONACCI				      TAIL_RECURSION_FIBONACCI					    TAIL_RECURSION_FIBONACCI					  TAIL_RECURSION_FIBONACCI
--							      --							    --								  --
int fib ( int n , int a = 0 , int b = 1 ) {		      static int fib ( int n , int a , int b ) {		    public static int fib ( int n , int a = 0 , int b = 1 ) {	  error : TAIL_RECURSION_FIBONACCI.java:20: error: '
  if ( n == 0 ) return a ;				      	if ( n == 0 ) return a ;				      if ( n == 0 ) return a ;					  ,', ')', or '[' expected public static int f_fille
  if ( n == 1 ) return b ;				      	if ( n == 1 ) return b ;				      if ( n == 1 ) return b ;					  d ( int n , int a = 0 , int b = 1 ) {
  return fib ( n - 1 , b , a + b ) ;			      	return fib ( n - 1 , b , a + b ) ;			      return fib ( n - 1 , b , a + b ) ;			  				^ TAIL_RECURSION_FIB
}							      }								    }								  ONACCI.java:20: error: ';' expected public static
							      								    								  int f_filled ( int n , int a = 0 , int b = 1 ) {
							      								    								  
							      								    								  	 ^ 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			      FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY			    FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY				  FIND_A_FIXED_POINT_IN_A_GIVEN_ARRAY
--							      --							    --								  --
int linearSearch ( int arr [ ] , int n ) {		      static int linearSearch ( int arr [ ] , int n ) {		    public static int linearSearch ( int arr [ ] , int n ) {	  success : None
  int i ;						      	int i ;							      int i ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == i ) return i ;			      	  if ( arr [ i ] == i ) return i ;			    	if ( arr [ i ] == i ) return i ;			  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POWER_POWER_MOD_PRIME				      FIND_POWER_POWER_MOD_PRIME				    FIND_POWER_POWER_MOD_PRIME					  FIND_POWER_POWER_MOD_PRIME
--							      --							    --								  --
unsigned int Calculate ( unsigned int A , unsigned int B , un static int Calculate ( int A , int B , int C , int M ) {	    public static int calculate ( int A , int B , int C , int M ) script_not_found : None
  unsigned int res , ans ;				      	int res , ans ;						      int res , ans ;						  
  res = power ( B , C , M - 1 ) ;			      	res = power ( B , C , M - 1 ) ;				      res = power ( B , C , M - 1 ) ;				  
  ans = power ( A , res , M ) ;				      	ans = power ( A , res , M ) ;				      ans = power ( A , res , M ) ;				  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2					      SORT_ARRAY_WAVE_FORM_2					    SORT_ARRAY_WAVE_FORM_2					  SORT_ARRAY_WAVE_FORM_2
--							      --							    --								  --
void sortInWave ( int arr [ ] , int n ) {		      void sortInWave ( int arr [ ] , int n ) {			    public static void sortInWave ( int arr [ ] , int n ) {	  script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      sort ( arr , n ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i += 2 ) swap ( & arr [ i ] , & arr [ i + 1 ] ) ;	      	i += 2 ) swap ( arr , i , i + 1 ) ;			      i += 2 ) {						  
}							      }								    	swap ( new int [ ] {					  
							      								    	  arr [ i ] , arr [ i + 1 ] }				  
							      								    	  ) ;							  
							      								    	}							  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD		  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD
--							      --							    --								  --
bool isPrime ( int n ) {				      static boolean isPrime ( int n ) {			    public static boolean isPrime ( int n ) {			  success : None
  if ( n <= 1 ) return false ;				      	if ( n <= 1 ) return false ;				      if ( n <= 1 ) return false ;				  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( n % i == 0 ) return false ;		      	i ++ ) if ( n % i == 0 ) return false ;			      i ++ ) if ( n % i == 0 ) return false ;			  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
void myCopy ( char s1 [ ] , char s2 [ ] ) {		      static void myCopy ( char s1 [ ] , char s2 [ ] ) {	    public static void myCopy ( char s1 [ ] , char s2 [ ] ) {	  script_not_found : None
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  s1 [ i ] != '\0' ;					      	i < s1 . length ;					      s1 [ i ] != '\0' ;					  
  i ++ ) s2 [ i ] = s1 [ i ] ;				      	i ++ ) s2 [ i ] = s1 [ i ] ;				      i ++ ) {							  
  s2 [ i ] = '\0' ;					      }								    	s2 [ i ] = s1 [ i ] ;					  
}							      								      }								  
							      								      s2 [ i ] = '\0' ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM
--							      --							    --								  --
int summingSeries ( long n ) {				      static int summingSeries ( long n ) {			    public static int summingSeries ( long n ) {		  script_not_found : None
  int S = 0 ;						      	int S = 0 ;						      int S = 0 ;						  
  for ( int i = 1 ;					      	for ( i = 1 ;						      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;		      	i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;		      i ++ ) {							  
  return S ;						      	return S ;						    	S += i * i - ( i - 1 ) * ( i - 1 ) ;			  
}							      }								      }								  
							      								      return S ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE
--							      --							    --								  --
int numberOfWays ( int x ) {				      static int numberOfWays ( int x ) {			    public static int numberOfWays ( int x ) {			  script_not_found : None
  if ( x == 0 || x == 1 ) return 1 ;			      	if ( x == 0 || x == 1 ) return 1 ;			      if ( x == 0 || x == 1 ) {					  
  else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWa 	else return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWa 	return 1 ;						  
}							      }								      }								  
							      								      else {							  
							      								    	return numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
public : int getSum ( int n ) {				      static int getSum ( int n ) {				    public static int getSum ( int n ) {			  success : None
  int sum ;						      	int sum ;						      int sum ;							  
  for ( sum = 0 ;					      	for ( sum = 0 ;						      for ( sum = 0 ;						  
  n > 0 ;						      	n > 0 ;							      n > 0 ;							  
  sum += n % 10 , n /= 10 ) ;				      	sum += n % 10 , n /= 10 ) ;				      sum += n % 10 , n /= 10 ) ;				  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_N_UNDER_MODULO_P				      COMPUTE_N_UNDER_MODULO_P					    COMPUTE_N_UNDER_MODULO_P					  COMPUTE_N_UNDER_MODULO_P
--							      --							    --								  --
int modFact ( int n , int p ) {				      static int modFact ( int n , int p ) {			    public static int modFact ( int n , int p ) {		  success : None
  if ( n >= p ) return 0 ;				      	if ( n >= p ) return 0 ;				      if ( n >= p ) return 0 ;					  
  int result = 1 ;					      	int result = 1 ;					      int result = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) result = ( result * i ) % p ;			      	i ++ ) result = ( result * i ) % p ;			      i ++ ) {							  
  return result ;					      	return result ;						    	result = ( result * i ) % p ;				  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHAGOREAN_QUADRUPLE					      PYTHAGOREAN_QUADRUPLE					    PYTHAGOREAN_QUADRUPLE					  PYTHAGOREAN_QUADRUPLE
--							      --							    --								  --
bool pythagorean_quadruple ( int a , int b , int c , int d )  static Boolean pythagorean_quadruple ( int a , int b , int c  public static boolean pythagoreanQuadruple ( int a , int b ,  error : PYTHAGOREAN_QUADRUPLE.java:75: error: bool
  int sum = a * a + b * b + c * c ;			      	int sum = a * a + b * b + c * c ;			      int sum = a * a + b * b + c * c ;				  ean cannot be dereferenced	     if(f_filled(par
  if ( d * d == sum ) return true ;			      	if ( d * d == sum ) return true ;			      if ( d * d == sum ) return true ;				  am0.get(i),param1.get(i),param2.get(i),param3.get(
  else return false ;					      	else return false ;					      else return false ;					  i)).equals(f_gold(param0.get(i),param1.get(i),para
}							      }								    }								  m2.get(i),param3.get(i))))
							      								    								  
							      								    								     ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_ALL_ODD_AND_EVEN_BITS				      SWAP_ALL_ODD_AND_EVEN_BITS				    SWAP_ALL_ODD_AND_EVEN_BITS					  SWAP_ALL_ODD_AND_EVEN_BITS
--							      --							    --								  --
unsigned int swapBits ( unsigned int x ) {		      static int swapBits ( int x ) {				    public static int swapBits ( int x ) {			  success : None
  unsigned int even_bits = x & 0xAAAAAAAA ;		      	int even_bits = x & 0xAAAAAAAA ;			      int evenBits = x & 0xAAAAAAAA ;				  
  unsigned int odd_bits = x & 0x55555555 ;		      	int odd_bits = x & 0x55555555 ;				      int oddBits = x & 0x55555555 ;				  
  even_bits >>= 1 ;					      	even_bits >>= 1 ;					      evenBits >>>= 1 ;						  
  odd_bits <<= 1 ;					      	odd_bits <<= 1 ;					      oddBits <<= 1 ;						  
  return ( even_bits | odd_bits ) ;			      	return ( even_bits | odd_bits ) ;			      return ( evenBits | oddBits ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPECTATION_EXPECTED_VALUE_ARRAY			      EXPECTATION_EXPECTED_VALUE_ARRAY				    EXPECTATION_EXPECTED_VALUE_ARRAY				  EXPECTATION_EXPECTED_VALUE_ARRAY
--							      --							    --								  --
float calc_Expectation ( float a [ ] , float n ) {	      static float calc_Expectation ( float a [ ] , float n ) {	    public static float calcExpectation ( float a [ ] , float n ) script_not_found : None
  float prb = ( 1 / n ) ;				      	float prb = ( 1 / n ) ;					      float prb = ( 1 / n ) ;					  
  float sum = 0 ;					      	float sum = 0 ;						      float sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum += a [ i ] * prb ;				      	i ++ ) sum += a [ i ] * prb ;				      i ++ ) {							  
  return sum ;						      	return sum ;						    	sum += a [ i ] * prb ;					  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			      FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1			    FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1				  FIND_UNIT_DIGIT_X_RAISED_POWER_Y_1
--							      --							    --								  --
int unitnumber ( int x , int y ) {			      static int unitnumber ( int x , int y ) {			    public static int unitnumber ( int x , int y ) {		  success : None
  x = x % 10 ;						      	x = x % 10 ;						      x = x % 10 ;						  
  if ( y != 0 ) y = y % 4 + 4 ;				      	if ( y != 0 ) y = y % 4 + 4 ;				      if ( y != 0 ) {						  
  return ( ( ( int ) ( pow ( x , y ) ) ) % 10 ) ;	      	return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;	    	y = y % 4 + 4 ;						  
}							      }								      }								  
							      								      return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;	  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_1
--							      --							    --								  --
void findElements ( int arr [ ] , int n ) {		      static void findElements ( int arr [ ] , int n ) {	    public static void findElements ( int arr [ ] , int n ) {	  script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      sort ( arr , 0 , n ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 2 ;						      	i < n - 2 ;						      i < n - 2 ;						  
  i ++ ) cout << arr [ i ] << " " ;			      	i ++ ) System . out . print ( arr [ i ] + " " ) ;	      i ++ ) {							  
}							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	      SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE
--							      --							    --								  --
long long int calculateSum ( int n ) {			      static long calculateSum ( int n ) {			    public static long calculateSum ( int n ) {			  failure : #Results:4, 10
  long long int sum = 0 ;				      	long sum = 0 ;						      long sum = 0 ;						  
  for ( int row = 0 ;					      	for ( int row = 0 ;					      for ( int row = 0 ;					  
  row < n ;						      	row < n ;						      row < n ;							  
  row ++ ) {						      	row ++ ) {						      row ++ ) sum = sum + ( 1L << row ) ;			  
    sum = sum + ( 1 << row ) ;				      	  sum = sum + ( 1 << row ) ;				      return sum ;						  
  }							      	}							    }								  
  return sum ;						      	return sum ;						    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE_1			      SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				    SQUARE_ROOT_OF_A_PERFECT_SQUARE_1				  SQUARE_ROOT_OF_A_PERFECT_SQUARE_1
--							      --							    --								  --
public : float squareRoot ( float n ) {			      static long squareRoot ( int n ) {			    public static float squareRoot ( float n ) {		  error : SQUARE_ROOT_OF_A_PERFECT_SQUARE_1.java:27:
  float x = n ;						      	int x = n ;						      float x = n ;						   error: incompatible types: possible lossy convers
  float y = 1 ;						      	int y = 1 ;						      float y = 1 ;						  ion from double to float   float e = 0.000001 ;
  float e = 0.000001 ;					      	while ( x > y ) {					      float e = 0.000001 ;					  	    ^ 1 error
  while ( x - y > e ) {					      	  x = ( x + y ) / 2 ;					      while ( x - y > e ) {					  
    x = ( x + y ) / 2 ;					      	  y = n / x ;						    	x = ( x + y ) / 2 ;					  
    y = n / x ;						      	}							    	y = n / x ;						  
  }							      	return ( long ) x ;					      }								  
  return x ;						      }								      return x ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYCK_PATH						      DYCK_PATH							    DYCK_PATH							  DYCK_PATH
--							      --							    --								  --
int countDyckPaths ( unsigned int n ) {			      public static int countDyckPaths ( int n ) {		    public static int countDyckPaths ( int n ) {		  success : identical to gold
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  ++ i ) {						      	++ i ) {						      ++ i ) {							  
    res *= ( 2 * n - i ) ;				      	  res *= ( 2 * n - i ) ;				    	res *= ( 2 * n - i ) ;					  
    res /= ( i + 1 ) ;					      	  res /= ( i + 1 ) ;					    	res /= ( i + 1 ) ;					  
  }							      	}							      }								  
  return res / ( n + 1 ) ;				      	return res / ( n + 1 ) ;				      return res / ( n + 1 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_ARRII					      MAXIMIZE_SUM_ARRII					    MAXIMIZE_SUM_ARRII						  MAXIMIZE_SUM_ARRII
--							      --							    --								  --
int maxSum ( int arr [ ] , int n ) {			      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int arr [ ] , int n ) {		  error : MAXIMIZE_SUM_ARRII.java:24: error: cannot
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      sort ( arr , 0 , n ) ;					  find symbol	sort ( arr , 0 , n ) ;	 ^   symbol:
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						     method sort(int[],int,int)	  location: class MA
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  XIMIZE_SUM_ARRII 1 error
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum += ( arr [ i ] * i ) ;			      	i ++ ) sum += ( arr [ i ] * i ) ;			      i ++ ) {							  
  return sum ;						      	return sum ;						    	sum += ( arr [ i ] * i ) ;				  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN
--							      --							    --								  --
int findSum ( int n ) {					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) ans += ( i / j ) ;				      	j ++ ) ans += ( i / j ) ;				      j ++ ) ans += ( i / j ) ;					  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE		      COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			    COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE			  COUNT_NUMBER_OF_WAYS_TO_COVER_A_DISTANCE
--							      --							    --								  --
int printCountRec ( int dist ) {			      static int printCountRec ( int dist ) {			    public static int printCountRec ( int dist ) {		  script_not_found : None
  if ( dist < 0 ) return 0 ;				      	if ( dist < 0 ) return 0 ;				      if ( dist < 0 ) return 0 ;				  
  if ( dist == 0 ) return 1 ;				      	if ( dist == 0 ) return 1 ;				      if ( dist == 0 ) return 1 ;				  
  return printCountRec ( dist - 1 ) + printCountRec ( dist -  	return printCountRec ( dist - 1 ) + printCountRec ( dist -    return printCountRec ( dist - 1 ) + printCountRec ( dist -  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		      FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1		    FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1			  FUNCTION_COPY_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
void myCopy ( char s1 [ ] , char s2 [ ] , int index = 0 ) {   static void myCopy ( char s1 [ ] , char s2 [ ] , int index )  public static void myCopy ( char s1 [ ] , char s2 [ ] , int i error : Exception in thread "main" java.lang.Array
  s2 [ index ] = s1 [ index ] ;				      	s2 [ index ] = s1 [ index ] ;				      s2 [ index ] = s1 [ index ] ;				  IndexOutOfBoundsException: Index 1 out of bounds f
  if ( s1 [ index ] == '\0' ) return ;			      	if ( index == s1 . length - 1 ) {			      if ( s1 [ index ] == '\0' ) return ;			  or length 1 	at FUNCTION_COPY_STRING_ITERATIVE_REC
  myCopy ( s1 , s2 , index + 1 ) ;			      	  return ;						      myCopy ( s1 , s2 , index + 1 ) ;				  URSIVE_1.f_filled(FUNCTION_COPY_STRING_ITERATIVE_R
}							      	}							    }								  ECURSIVE_1.java:23) 	at FUNCTION_COPY_STRING_ITERA
							      	myCopy ( s1 , s2 , index + 1 ) ;			    								  TIVE_RECURSIVE_1.f_filled(FUNCTION_COPY_STRING_ITE
							      }								    								  RATIVE_RECURSIVE_1.java:25) 	at FUNCTION_COPY_STRI
							      								    								  NG_ITERATIVE_RECURSIVE_1.main(FUNCTION_COPY_STRING
							      								    								  _ITERATIVE_RECURSIVE_1.java:99)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER					      ENTRINGER_NUMBER						    ENTRINGER_NUMBER						  ENTRINGER_NUMBER
--							      --							    --								  --
int zigzag ( int n , int k ) {				      static int zigzag ( int n , int k ) {			    public static int zigzag ( int n , int k ) {		  script_not_found : None
  if ( n == 0 && k == 0 ) return 1 ;			      	if ( n == 0 && k == 0 ) return 1 ;			      if ( n == 0 && k == 0 ) return 1 ;			  
  if ( k == 0 ) return 0 ;				      	if ( k == 0 ) return 0 ;				      if ( k == 0 ) return 0 ;					  
  return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;    	return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;      return zigzag ( n , k - 1 ) + zigzag ( n - 1 , n - k ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		      PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER		    PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER			  PRINT_FIRST_K_DIGITS_1N_N_POSITIVE_INTEGER
--							      --							    --								  --
void print ( int n , int k ) {				      static void print ( int n , int k ) {			    public static void print ( int n , int k ) {		  script_not_found : None
  int rem = 1 ;						      	int rem = 1 ;						      int rem = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    cout << ( 10 * rem ) / n ;				      	  System . out . print ( ( 10 * rem ) / n ) ;		    	System . out . println ( ( 10 * rem ) / n ) ;		  
    rem = ( 10 * rem ) % n ;				      	  rem = ( 10 * rem ) % n ;				    	rem = ( 10 * rem ) % n ;				  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_4				      COUNT_SET_BITS_IN_AN_INTEGER_4				    COUNT_SET_BITS_IN_AN_INTEGER_4				  COUNT_SET_BITS_IN_AN_INTEGER_4
--							      --							    --								  --
unsigned int countSetBitsRec ( unsigned int num ) {	      static int countSetBitsRec ( int num ) {			    public static int countSetBitsRec ( int num ) {		  script_not_found : None
  int nibble = 0 ;					      	int nibble = 0 ;					      int nibble = 0 ;						  
  if ( 0 == num ) return num_to_bits [ 0 ] ;		      	if ( 0 == num ) return num_to_bits [ 0 ] ;		      if ( 0 == num ) return numToBits [ 0 ] ;			  
  nibble = num & 0xf ;					      	nibble = num & 0xf ;					      nibble = num & 0xf ;					  
  return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4  	return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4    return numToBits [ nibble ] + countSetBitsRec ( num >> 4 )  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_SECTOR					      AREA_OF_A_SECTOR						    AREA_OF_A_SECTOR						  AREA_OF_A_SECTOR
--							      --							    --								  --
void SectorArea ( double radius , double angle ) {	      static void SectorArea ( double radius , double angle ) {	    public static void SectorArea ( double radius , double angle  script_not_found : None
  if ( angle >= 360 ) cout << "Angle not possible" ;	      	if ( angle >= 360 ) System . out . println ( "Angle not pos   if ( angle >= 360 ) {					  
  else {						      	else {							    	System . out . println ( "Angle not possible" ) ;	  
    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angl 	  double sector = ( ( 22 * radius * radius ) / 7 ) * ( angl   }								  
    cout << sector ;					      	  System . out . println ( sector ) ;			      else {							  
  }							      	}							    	double sector = ( ( 22 * radius * radius ) / 7 ) * ( angl 
}							      }								    	System . out . println ( sector ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERFECT_REVERSIBLE_STRING				      PERFECT_REVERSIBLE_STRING					    PERFECT_REVERSIBLE_STRING					  PERFECT_REVERSIBLE_STRING
--							      --							    --								  --
bool isReversible ( string str ) {			      static boolean isReversible ( String str ) {		    public static boolean isReversible ( String str ) {		  success : None
  int i = 0 , j = str . length ( ) - 1 ;		      	int i = 0 , j = str . length ( ) - 1 ;			      int i = 0 , j = str . length ( ) - 1 ;			  
  while ( i < j ) {					      	while ( i < j ) {					      while ( i < j ) {						  
    if ( str [ i ] != str [ j ] ) return false ;	      	  if ( str . charAt ( i ) != str . charAt ( j ) ) return fa 	if ( str . charAt ( i ) != str . charAt ( j ) ) return fa 
    i ++ ;						      	  i ++ ;						    	i ++ ;							  
    j -- ;						      	  j -- ;						    	j -- ;							  
  }							      	}							      }								  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH      COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	    COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH	  COUNT_SINGLE_NODE_ISOLATED_SUB_GRAPHS_DISCONNECTED_GRAPH
--							      --							    --								  --
int compute ( vector < int > graph [ ] , int N ) {	      static int compute ( int [ ] graph , int N ) {		    public static int compute ( int [ ] graph , int N ) {	  failure : #Results:6, 10
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= N ;						      	i < 7 ;							      i <= N ;							  
  i ++ ) if ( graph [ i ] . size ( ) == 0 ) count ++ ;	      	i ++ ) {						      i ++ ) if ( graph [ i ] == 0 ) count ++ ;			  
  return count ;					      	  if ( graph [ i ] == 0 ) count ++ ;			      return count ;						  
}							      	}							    }								  
							      	return count ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		      PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND		    PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND			  PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
--							      --							    --								  --
int minMaxProduct ( int arr1 [ ] , int arr2 [ ] , int n1 , in public static int minMaxProduct ( int arr1 [ ] , int arr2 [ ] public static int minMaxProduct ( int arr1 [ ] , int arr2 [ ] error : PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
  sort ( arr1 , arr1 + n1 ) ;				      	Arrays . sort ( arr1 ) ;				      sort ( arr1 , arr1 . length , n1 ) ;			  .java:21: error: cannot find symbol	sort ( arr1
  sort ( arr2 , arr2 + n2 ) ;				      	Arrays . sort ( arr2 ) ;				      sort ( arr2 , arr2 . length , n2 ) ;			  , arr1 . length , n1 ) ;   ^	 symbol:   method so
  return arr1 [ n1 - 1 ] * arr2 [ 0 ] ;			      	return arr1 [ n1 - 1 ] * arr2 [ 0 ] ;			      return arr1 [ n1 - 1 ] * arr2 [ 0 ] ;			  rt(int[],int,int)   location: class PRODUCT_MAXIMU
}							      }								    }								  M_FIRST_ARRAY_MINIMUM_SECOND PRODUCT_MAXIMUM_FIRST
							      								    								  _ARRAY_MINIMUM_SECOND.java:22: error: cannot find
							      								    								  symbol   sort ( arr2 , arr2 . length , n2 ) ;	  ^
							      								    								    symbol:   method sort(int[],int,int)   location:
							      								    								   class PRODUCT_MAXIMUM_FIRST_ARRAY_MINIMUM_SECOND
							      								    								  2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LUCKY_NUMBERS						      LUCKY_NUMBERS						    LUCKY_NUMBERS						  LUCKY_NUMBERS
--							      --							    --								  --
int bool isLucky ( int n ) {				      static boolean isLucky ( int n ) {			    public static boolean isLucky ( int n ) {			  script_not_found : None
  static int counter = 2 ;				      	int next_position = n ;					      synchronized ( counter ) {				  
  int next_position = n ;				      	if ( counter > n ) return true ;			    	int nextPosition = n ;					  
  if ( counter > n ) return 1 ;				      	if ( n % counter == 0 ) return false ;			    	if ( counter > n ) return 1 ;				  
  if ( n % counter == 0 ) return 0 ;			      	next_position -= next_position / counter ;		    	if ( n % counter == 0 ) return 0 ;			  
  next_position -= next_position / counter ;		      	counter ++ ;						    	nextPosition -= nextPosition / counter ;		  
  counter ++ ;						      	return isLucky ( next_position ) ;			    	counter ++ ;						  
  return isLucky ( next_position ) ;			      }								    	return isLucky ( nextPosition ) ;			  
}							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			      HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER			    HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER				  HOW_TO_COMPUTE_MOD_OF_A_BIG_NUMBER
--							      --							    --								  --
int mod ( string num , int a ) {			      static int mod ( String num , int a ) {			    public static int mod ( String num , int a ) {		  success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < num . length ( ) ;				      	i < num . length ( ) ;					      i < num . length ( ) ;					  
  i ++ ) res = ( res * 10 + ( int ) num [ i ] - '0' ) % a ;   	i ++ ) res = ( res * 10 + ( int ) num . charAt ( i ) - '0'    i ++ ) {							  
  return res ;						      	return res ;						    	res = ( res * 10 + ( int ) num . charAt ( i ) - '0' ) % a 
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SUM_FACTORS_NUMBER				      FIND_MINIMUM_SUM_FACTORS_NUMBER				    FIND_MINIMUM_SUM_FACTORS_NUMBER				  FIND_MINIMUM_SUM_FACTORS_NUMBER
--							      --							    --								  --
int findMinSum ( int num ) {				      static int findMinSum ( int num ) {			    public static int findMinSum ( int num ) {			  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i * i <= num ;					      	i * i <= num ;						      i * i <= num ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( num % i == 0 ) {				      	  while ( num % i == 0 ) {				    	while ( num % i == 0 ) {				  
      sum += i ;					      	    sum += i ;						    	  sum += i ;						  
      num /= i ;					      	    num /= i ;						    	  num /= i ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  sum += num ;						      	sum += num ;						      sum += num ;						  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT
--							      --							    --								  --
int check ( string str ) {				      static boolean check ( String str ) {			    public static int check ( String str ) {			  error : CHECK_LARGE_NUMBER_DIVISIBLE_3_NOT.java:50
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  : error: incomparable types: int and boolean
  int digitSum = 0 ;					      	int digitSum = 0 ;					      int digitSum = 0 ;					     if(f_filled(param0.get(i)) == f_gold(param0.get
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  (i)))					   ^ 1 error
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) digitSum += ( str [ i ] - '0' ) ;		      	i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      i ++ ) {							  
  return ( digitSum % 3 == 0 ) ;			      	return ( digitSum % 3 == 0 ) ;				    	digitSum += ( str . charAt ( i ) - '0' ) ;		  
}							      }								      }								  
							      								      return ( digitSum % 3 == 0 ) ? 0 : 1 ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1		      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP_1
--							      --							    --								  --
int seiresSum ( int n , int a [ ] ) {			      static int seiresSum ( int n , int [ ] a ) {		    public static int seiresSum ( int n , int [ ] a ) {		  script_not_found : None
  return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 *  	return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 *    return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 *  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_
  unsigned count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  TO_N.java:26: error: bad operand type int for unar
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( n > 0 && ! ( n & ( n - 1 ) ) ) return n ;		  y operator '!'   if ( n > 0 && ! ( n & ( n - 1 ) )
  while ( n != 0 ) {					      	while ( n != 0 ) {					      while ( n != 0 ) {					   ) return n ;			^ 1 error
    n >>= 1 ;						      	  n >>= 1 ;						    	n >>= 1 ;						  
    count += 1 ;					      	  count += 1 ;						    	count += 1 ;						  
  }							      	}							      }								  
  return 1 << count ;					      	return 1 << count ;					      return 1 << count ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	      PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM	    PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM		  PROGRAM_TO_PRINT_TETRAHEDRAL_NUMBERS_UPTO_NTH_TERM
--							      --							    --								  --
void printSeries ( int n ) {				      static void printSeries ( int n ) {			    public static void printSeries ( int n ) {			  script_not_found : None
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int num = i * ( i + 1 ) * ( i + 2 ) / 6 ;		      	  int num = i * ( i + 1 ) * ( i + 2 ) / 6 ;		    	int num = i * ( i + 1 ) * ( i + 2 ) / 6 ;		  
    cout << num << " " ;				      	  System . out . print ( num + " " ) ;			    	System . out . print ( num + " " ) ;			  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECT
--							      --							    --								  --
int numOfways ( int n , int k ) {			      static int numOfways ( int n , int k ) {			    public static int numOfways ( int n , int k ) {		  error : NUMBER_WAYS_NODE_MAKE_LOOP_SIZE_K_UNDIRECT
  int p = 1 ;						      	int p = 1 ;						      int p = 1 ;						  ED_COMPLETE_CONNECTED_GRAPH_N_NODES.java:22: error
  if ( k % 2 ) p = - 1 ;				      	if ( k % 2 != 0 ) p = - 1 ;				      if ( k % 2 ) {						  : incompatible types: int cannot be converted to b
  return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ;	      	return ( int ) ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) 	p = - 1 ;						  oolean   if ( k % 2 ) {	   ^ NUMBER_WAYS_NOD
}							      }								      }								  E_MAKE_LOOP_SIZE_K_UNDIRECTED_COMPLETE_CONNECTED_G
							      								      return ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ;	  RAPH_N_NODES.java:25: error: incompatible types: p
							      								    }								  ossible lossy conversion from double to int	retu
							      								    								  rn ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) /
							      								    								  n ;
							      								    								  	  ^ 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	      FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	    FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY	  FIND_SMALLEST_VALUE_REPRESENTED_SUM_SUBSET_GIVEN_ARRAY
--							      --							    --								  --
int findSmallest ( int arr [ ] , int n ) {		      int findSmallest ( int arr [ ] , int n ) {		    public static int findSmallest ( int arr [ ] , int n ) {	  success : None
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n && arr [ i ] <= res ;				      	i < n && arr [ i ] <= res ;				      i < n && arr [ i ] <= res ;				  
  i ++ ) res = res + arr [ i ] ;			      	i ++ ) res = res + arr [ i ] ;				      i ++ ) {							  
  return res ;						      	return res ;						    	res = res + arr [ i ] ;					  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_TRIANGLES_N_MOVES				      NUMBER_TRIANGLES_N_MOVES					    NUMBER_TRIANGLES_N_MOVES					  NUMBER_TRIANGLES_N_MOVES
--							      --							    --								  --
int numberOfTriangles ( int n ) {			      public static int numberOfTriangles ( int n ) {		    public static int numberOfTriangles ( int n ) {		  success : None
  int answer [ n + 1 ] = {				      	int [ ] answer = new int [ n + 1 ] ;			      int [ ] answer = new int [ n + 1 ] ;			  
    0 }							      	answer [ 0 ] = 1 ;					      answer [ 0 ] = 1 ;					  
    ;							      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    answer [ 0 ] = 1 ;					      	i <= n ;						      i <= n ;							  
    for ( int i = 1 ;					      	i ++ ) answer [ i ] = answer [ i - 1 ] * 3 + 2 ;	      i ++ ) {							  
    i <= n ;						      	return answer [ n ] ;					    	answer [ i ] = answer [ i - 1 ] * 3 + 2 ;		  
    i ++ ) answer [ i ] = answer [ i - 1 ] * 3 + 2 ;	      }								      }								  
    return answer [ n ] ;				      								      return answer [ n ] ;					  
  }							      								    }								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS     SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	    SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS
--							      --							    --								  --
int getTotalNumberOfSequences ( int m , int n ) {	      static int getTotalNumberOfSequences ( int m , int n ) {	    public static int getTotalNumberOfSequences ( int m , int n ) success : None
  if ( m < n ) return 0 ;				      	if ( m < n ) return 0 ;					      if ( m < n ) return 0 ;					  
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNu 	return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNu   return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNu 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		      FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		    FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN		  FIND_ROOT_TREE_CHILDREN_ID_SUM_EVERY_NODE_GIVEN
--							      --							    --								  --
int findRoot ( pair < int , int > arr [ ] , int n ) {	      static int findRoot ( pair arr [ ] , int n ) {		    public static int findRoot ( Pair < Integer , Integer > arr [ script_not_found : None
  int root = 0 ;					      	int root = 0 ;						      int root = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) root += ( arr [ i ] . first - arr [ i ] . second ) ; 	i ++ ) {						      i ++ ) {							  
  return root ;						      	  root += ( arr [ i ] . first - arr [ i ] . second ) ;	    	root += ( arr [ i ] . first - arr [ i ] . second ) ;	  
}							      	}							      }								  
							      	return root ;						      return root ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			      NUMBER_DAYS_TANK_WILL_BECOME_EMPTY			    NUMBER_DAYS_TANK_WILL_BECOME_EMPTY				  NUMBER_DAYS_TANK_WILL_BECOME_EMPTY
--							      --							    --								  --
int minDaysToEmpty ( int C , int l ) {			      static int minDaysToEmpty ( int C , int l ) {		    public static int minDaysToEmpty ( int C , int l ) {	  error : NUMBER_DAYS_TANK_WILL_BECOME_EMPTY.java:23
  if ( l >= C ) return C ;				      	if ( l >= C ) return C ;				      if ( l >= C ) return C ;					  : error: incompatible types: possible lossy conver
  double eq_root = ( std :: sqrt ( 1 + 8 * ( C - l ) ) - 1 )  	double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 )    double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 )  sion from double to int   return Math . ceil ( eq_
  return std :: ceil ( eq_root ) + l ;			      	return ( int ) ( Math . ceil ( eq_root ) + l ) ;	      return Math . ceil ( eq_root ) + l ;			  root ) + l ;					^ 1
}							      }								    }								  error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING		      LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			    LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING			  LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING
--							      --							    --								  --
string LexicographicalMaxString ( string str ) {	      static String LexicographicalMaxString ( String str ) {	    public static String lexicographicalMaxString ( String str )  error : LEXICOGRAPHICAL_MAXIMUM_SUBSTRING_STRING.j
  string mx = "" ;					      	String mx = "" ;					      String mx = "" ;						  ava:31: error: no suitable method found for max(St
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  ring,String)	   mx = Math . max ( mx , str . subs
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  tring ( i ) ) ;		^     method Math.ma
  ++ i ) mx = max ( mx , str . substr ( i ) ) ;		      	++ i ) {						      ++ i ) {							  x(int,int) is not applicable	     (argument misma
  return mx ;						      	  if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) {    	mx = Math . max ( mx , str . substring ( i ) ) ;	  tch; String cannot be converted to int)     method
}							      	    mx = str . substring ( i ) ;			      }								   Math.max(long,long) is not applicable       (argu
							      	  }							      return mx ;						  ment mismatch; String cannot be converted to long)
							      	}							    }								       method Math.max(float,float) is not applicabl
							      	return mx ;						    								  e	  (argument mismatch; String cannot be conve
							      }								    								  rted to float)     method Math.max(double,double)
							      								    								  is not applicable	  (argument mismatch; String
							      								    								   cannot be converted to double) 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_2				      FIND_REPETITIVE_ELEMENT_1_N_1_2				    FIND_REPETITIVE_ELEMENT_1_N_1_2				  FIND_REPETITIVE_ELEMENT_1_N_1_2
--							      --							    --								  --
int findRepeating ( int arr [ ] , int n ) {		      static int findRepeating ( int arr [ ] , int n ) {	    public static int findRepeating ( int arr [ ] , int n ) {	  success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;		      	i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;		      i ++ ) {							  
  res = res ^ arr [ n - 1 ] ;				      	res = res ^ arr [ n - 1 ] ;				    	res = res ^ ( i + 1 ) ^ arr [ i ] ;			  
  return res ;						      	return res ;						      }								  
}							      }								      res = res ^ arr [ n - 1 ] ;				  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE		  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE
--							      --							    --								  --
int arraySortedOrNot ( int arr [ ] , int n ) {		      static int arraySortedOrNot ( int arr [ ] , int n ) {	    public static int arraySortedOrNot ( int arr [ ] , int n ) {  success : None
  if ( n == 1 || n == 0 ) return 1 ;			      	if ( n == 1 || n == 0 ) return 1 ;			      if ( n == 1 || n == 0 ) return 1 ;			  
  if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ;	      	if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ;		      if ( arr [ n - 1 ] < arr [ n - 2 ] ) return 0 ;		  
  return arraySortedOrNot ( arr , n - 1 ) ;		      	return arraySortedOrNot ( arr , n - 1 ) ;		      return arraySortedOrNot ( arr , n - 1 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		      PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		    PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX		  PROGRAM_FOR_SCALAR_MULTIPLICATION_OF_A_MATRIX
--							      --							    --								  --
void scalarProductMat ( int mat [ ] [ N ] , int k ) {	      static void scalarProductMat ( int mat [ ] [ ] , int k ) {    public static void scalarProductMat ( int mat [ ] [ ] , int k script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;	      	j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;		      j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION			      PROGRAM_BINARY_DECIMAL_CONVERSION				    PROGRAM_BINARY_DECIMAL_CONVERSION				  PROGRAM_BINARY_DECIMAL_CONVERSION
--							      --							    --								  --
int binaryToDecimal ( int n ) {				      static int binaryToDecimal ( int n ) {			    public static int binaryToDecimal ( int n ) {		  success : None
  int num = n ;						      	int num = n ;						      int num = n ;						  
  int dec_value = 0 ;					      	int dec_value = 0 ;					      int decValue = 0 ;					  
  int base = 1 ;					      	int base = 1 ;						      int base = 1 ;						  
  int temp = num ;					      	int temp = num ;					      int temp = num ;						  
  while ( temp ) {					      	while ( temp > 0 ) {					      while ( temp > 0 ) {					  
    int last_digit = temp % 10 ;			      	  int last_digit = temp % 10 ;				    	int lastDigit = temp % 10 ;				  
    temp = temp / 10 ;					      	  temp = temp / 10 ;					    	temp = temp / 10 ;					  
    dec_value += last_digit * base ;			      	  dec_value += last_digit * base ;			    	decValue += lastDigit * base ;				  
    base = base * 2 ;					      	  base = base * 2 ;					    	base = base * 2 ;					  
  }							      	}							      }								  
  return dec_value ;					      	return dec_value ;					      return decValue ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			      CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			    CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT			  CHECK_WHETHER_NUMBER_DUCK_NUMBER_NOT
--							      --							    --								  --
int check_duck ( char * num ) {				      static int check_duck ( String num ) {			    public static int checkDuck ( String num ) {		  success : None
  int len = strlen ( num ) ;				      	int len = num . length ( ) ;				      int len = num . length ( ) ;				  
  int count_zero = 0 ;					      	int count_zero = 0 ;					      int countZero = 0 ;					  
  char ch ;						      	char ch ;						      char ch ;							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < len ;						      	i < len ;						      i < len ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    ch = num [ i ] ;					      	  ch = num . charAt ( i ) ;				    	ch = num . charAt ( i ) ;				  
    if ( ch == '0' ) count_zero ++ ;			      	  if ( ch == '0' ) count_zero ++ ;			    	if ( ch == '0' ) {					  
  }							      	}							    	  countZero ++ ;					  
  return count_zero ;					      	return count_zero ;					    	}							  
}							      }								      }								  
							      								      return countZero ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1		    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER_1
--							      --							    --								  --
int findSum ( int N , int K ) {				      static int findSum ( int N , int K ) {			    public static int findSum ( int N , int K ) {		  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  int y = N / K ;					      	int y = N / K ;						      int y = N / K ;						  
  int x = N % K ;					      	int x = N % K ;						      int x = N % K ;						  
  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;   	ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;     ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;	  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER						      DELANNOY_NUMBER						    DELANNOY_NUMBER						  DELANNOY_NUMBER
--							      --							    --								  --
int dealnnoy ( int n , int m ) {			      public static int dealnnoy ( int n , int m ) {		    public static int dealnnoy ( int n , int m ) {		  script_not_found : None
  if ( m == 0 || n == 0 ) return 1 ;			      	if ( m == 0 || n == 0 ) return 1 ;			      if ( m == 0 || n == 0 ) return 1 ;			  
  return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1 )  	return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1 )    return dealnnoy ( m - 1 , n ) + dealnnoy ( m - 1 , n - 1 )  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_ POSSIBLE_TO_MAKE_A_DIVISIBLE_BY_3_NUMBER_USING_ALL_DIGITS_IN_
--							      --							    --								  --
bool isPossibleToMakeDivisible ( int arr [ ] , int n ) {      public static boolean isPossibleToMakeDivisible ( int arr [ ] public static boolean isPossibleToMakeDivisible ( int arr [ ] success : None
  int remainder = 0 ;					      	int remainder = 0 ;					      int remainder = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ;	      	i ++ ) remainder = ( remainder + arr [ i ] ) % 3 ;	      i ++ ) {							  
  return ( remainder == 0 ) ;				      	return ( remainder == 0 ) ;				    	remainder = ( remainder + arr [ i ] ) % 3 ;		  
}							      }								      }								  
							      								      return ( remainder == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_ZEROES_END_ARRAY					      MOVE_ZEROES_END_ARRAY					    MOVE_ZEROES_END_ARRAY					  MOVE_ZEROES_END_ARRAY
--							      --							    --								  --
void pushZerosToEnd ( int arr [ ] , int n ) {		      static void pushZerosToEnd ( int arr [ ] , int n ) {	    public static void pushZerosToEnd ( int arr [ ] , int n ) {	  script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; 	i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ;   i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ; 
  while ( count < n ) arr [ count ++ ] = 0 ;		      	while ( count < n ) arr [ count ++ ] = 0 ;		      while ( count < n ) arr [ count ++ ] = 0 ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT MINIMUM_NUMBER_CHARACTERS_REMOVED_MAKE_BINARY_STRING_ALTERNAT
--							      --							    --								  --
void countToMake0lternate ( const string & s ) {	      static int countToMake0lternate ( String s ) {		    ▁ 0 ▁ if ▁ the ▁ string ▁ is ▁ not ▁ a ▁ number STRNEWLINE ▁  script_not_found : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < ( s . length ( ) - 1 ) ;				      	i < ( s . length ( ) - 1 ) ;				      i < ( s . length ( ) - 1 ) ;				  
  i ++ ) if ( s [ i ] == s [ i + 1 ] ) result ++ ;	      	i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) resu   i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) resu 
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_1
--							      --							    --								  --
void transpose ( int A [ ] [ N ] , int B [ ] [ M ] ) {	      static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {	    public static void transpose ( int A [ ] [ ] , int B [ ] [ ]  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      i ++ ) for ( j = 0 ;					  
  j < M ;						      	j < M ;							      j < M ;							  
  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;		      	j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			      j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_SETS_DISJOINT				      CHECK_TWO_GIVEN_SETS_DISJOINT				    CHECK_TWO_GIVEN_SETS_DISJOINT				  CHECK_TWO_GIVEN_SETS_DISJOINT
--							      --							    --								  --
bool areDisjoint ( int set1 [ ] , int set2 [ ] , int m , int  boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {	    public static boolean areDisjoint ( int set1 [ ] , int set2 [ script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < set1 . length ;					      i < m ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) {						      i ++ ) for ( int j = 0 ;					  
  j < n ;						      	  for ( int j = 0 ;					      j < n ;							  
  j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false ;	      	  j < set2 . length ;					      j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false ;	  
  return true ;						      	  j ++ ) {						      return true ;						  
}							      	    if ( set1 [ i ] == set2 [ j ] ) return false ;	    }								  
							      	  }							    								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_2				      COUNT_DIGITS_FACTORIAL_SET_2				    COUNT_DIGITS_FACTORIAL_SET_2				  COUNT_DIGITS_FACTORIAL_SET_2
--							      --							    --								  --
long long findDigits ( int n ) {			      static long findDigits ( int n ) {			    public static long findDigits ( int n ) {			  script_not_found : None
  if ( n < 0 ) return 0 ;				      	if ( n < 0 ) return 0 ;					      if ( n < 0 ) return 0 ;					  
  if ( n <= 1 ) return 1 ;				      	if ( n <= 1 ) return 1 ;				      if ( n <= 1 ) return 1 ;					  
  double x = ( ( n * log10 ( n / M_E ) + log10 ( 2 * M_PI * n 	double x = ( n * Math . log10 ( n / M_E ) + Math . log10 (    double x = ( ( n * Math . log10 ( n / M_E ) + Math . log10  
  return floor ( x ) + 1 ;				      	return ( long ) Math . floor ( x ) + 1 ;		      return Math . floor ( x ) + 1 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	      CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION	    CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION		  CALCULATING_FACTORIALS_USING_STIRLING_APPROXIMATION
--							      --							    --								  --
long int stirlingFactorial ( int n ) {			      public static int stirlingFactorial ( double n ) {	    public static long stirlingFactorial ( int n ) {		  error : CALCULATING_FACTORIALS_USING_STIRLING_APPR
  if ( n == 1 ) return 1 ;				      	if ( n == 1 ) return 1 ;				      if ( n == 1 ) return 1 ;					  OXIMATION.java:25: error: incompatible types: poss
  long int z ;						      	double z ;						      long z ;							  ible lossy conversion from double to float   float
  float e = 2.71 ;					      	double e = 2.71 ;					      float e = 2.71 ;						   e = 2.71 ;		  ^ CALCULATING_FACTORIALS_U
  z = sqrt ( 2 * 3.14 * n ) * pow ( ( n / e ) , n ) ;	      	z = Math . sqrt ( 2 * 3.14 * n ) * Math . pow ( ( n / e ) ,   z = Math . sqrt ( 2 * 3.14 * n ) * Math . pow ( ( n / e ) , SING_STIRLING_APPROXIMATION.java:26: error: incomp
  return z ;						      	return ( int ) ( z ) ;					      return z ;						  atible types: possible lossy conversion from doubl
}							      }								    }								  e to long   z = Math . sqrt ( 2 * 3.14 * n ) * Mat
							      								    								  h . pow ( ( n / e ) , n ) ;
							      								    								  	       ^ CALCULATING_FACTORIALS_USING_STIRLI
							      								    								  NG_APPROXIMATION.java:46: error: incompatible type
							      								    								  s: Double cannot be converted to int	       if(f_
							      								    								  filled(param0.get(i)) == f_gold(param0.get(i)))
							      								    								  			      ^ Note: Some messages
							      								    								  have been simplified; recompile with -Xdiags:verbo
							      								    								  se to get full output 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES      MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	    MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES	  MAXIMUM_HEIGHT_OF_TRIANGULAR_ARRANGEMENT_OF_ARRAY_VALUES
--							      --							    --								  --
int MaximumHeight ( int a [ ] , int n ) {		      static int MaximumHeight ( int [ ] a , int n ) {		    public static int MaximumHeight ( int a [ ] , int n ) {	  success : None
  int result = 1 ;					      	int result = 1 ;					      int result = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  ++ i ) {						      	++ i ) {						      ++ i ) {							  
    long long y = ( i * ( i + 1 ) ) / 2 ;		      	  int y = ( i * ( i + 1 ) ) / 2 ;			    	long y = ( i * ( i + 1 ) ) / 2 ;			  
    if ( y < n ) result = i ;				      	  if ( y < n ) result = i ;				    	if ( y < n ) {						  
    else break ;					      	  else break ;						    	  result = i ;						  
  }							      	}							    	}							  
  return result ;					      	return result ;						    	else {							  
}							      }								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		      COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		    COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME		  COUNT_FIBONACCI_NUMBERS_GIVEN_RANGE_LOG_TIME
--							      --							    --								  --
int countFibs ( int low , int high ) {			      static int countFibs ( int low , int high ) {		    public static int countFibs ( int low , int high ) {	  success : None
  int f1 = 0 , f2 = 1 , f3 = 1 ;			      	int f1 = 0 , f2 = 1 , f3 = 1 ;				      int f1 = 0 , f2 = 1 , f3 = 1 ;				  
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  while ( f1 <= high ) {				      	while ( f1 <= high ) {					      while ( f1 <= high ) {					  
    if ( f1 >= low ) result ++ ;			      	  if ( f1 >= low ) result ++ ;				    	if ( f1 >= low ) {					  
    f1 = f2 ;						      	  f1 = f2 ;						    	  result ++ ;						  
    f2 = f3 ;						      	  f2 = f3 ;						    	}							  
    f3 = f1 + f2 ;					      	  f3 = f1 + f2 ;					    	f1 = f2 ;						  
  }							      	}							    	f2 = f3 ;						  
  return result ;					      	return result ;						    	f3 = f1 + f2 ;						  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE		      COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			    COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE			  COUNT_FACTORIAL_NUMBERS_IN_A_GIVEN_RANGE
--							      --							    --								  --
int countFact ( int low , int high ) {			      static int countFact ( int low , int high ) {		    public static int countFact ( int low , int high ) {	  success : None
  int fact = 1 , x = 1 ;				      	int fact = 1 , x = 1 ;					      int fact = 1 , x = 1 ;					  
  while ( fact < low ) {				      	while ( fact < low ) {					      while ( fact < low ) {					  
    fact = fact * x ;					      	  fact = fact * x ;					    	fact = fact * x ;					  
    x ++ ;						      	  x ++ ;						    	x ++ ;							  
  }							      	}							      }								  
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  while ( fact <= high ) {				      	while ( fact <= high ) {				      while ( fact <= high ) {					  
    res ++ ;						      	  res ++ ;						    	res ++ ;						  
    fact = fact * x ;					      	  fact = fact * x ;					    	fact = fact * x ;					  
    x ++ ;						      	  x ++ ;						    	x ++ ;							  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY
--							      --							    --								  --
int countRotations ( int arr [ ] , int n ) {		      static int countRotations ( int arr [ ] , int n ) {	    public static int countRotations ( int arr [ ] , int n ) {	  failure : #Results:3, 10
  int min = arr [ 0 ] , min_index ;			      	int min = arr [ 0 ] , min_index = - 1 ;			      int min = arr [ 0 ] , min_index = 0 ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( min > arr [ i ] ) {				      	  if ( min > arr [ i ] ) {				    	if ( min > arr [ i ] ) {				  
      min = arr [ i ] ;					      	    min = arr [ i ] ;					    	  min = arr [ i ] ;					  
      min_index = i ;					      	    min_index = i ;					    	  min_index = i ;					  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return min_index ;					      	return min_index ;					      return min_index ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PADOVAN_SEQUENCE					      PADOVAN_SEQUENCE						    PADOVAN_SEQUENCE						  PADOVAN_SEQUENCE
--							      --							    --								  --
int pad ( int n ) {					      static int pad ( int n ) {				    public static int pad ( int n ) {				  success : None
  int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;     	int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;	      int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;	  
  for ( int i = 3 ;					      	for ( int i = 3 ;					      for ( int i = 3 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    pNext = pPrevPrev + pPrev ;				      	  pNext = pPrevPrev + pPrev ;				    	pNext = pPrevPrev + pPrev ;				  
    pPrevPrev = pPrev ;					      	  pPrevPrev = pPrev ;					    	pPrevPrev = pPrev ;					  
    pPrev = pCurr ;					      	  pPrev = pCurr ;					    	pPrev = pCurr ;						  
    pCurr = pNext ;					      	  pCurr = pNext ;					    	pCurr = pNext ;						  
  }							      	}							      }								  
  return pNext ;					      	return pNext ;						      return pNext ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS
--							      --							    --								  --
int countP ( int n , int k ) {				      public static int countP ( int n , int k ) {		    public static int countP ( int n , int k ) {		  script_not_found : None
  if ( n == 0 || k == 0 || k > n ) return 0 ;		      	if ( n == 0 || k == 0 || k > n ) return 0 ;		      if ( n == 0 || k == 0 || k > n ) return 0 ;		  
  if ( k == 1 || k == n ) return 1 ;			      	if ( k == 1 || k == n ) return 1 ;			      if ( k == 1 || k == n ) return 1 ;			  
  return k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1 )  	return ( k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1    return k * countP ( n - 1 , k ) + countP ( n - 1 , k - 1 )  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			      PROGRAM_FIND_AREA_CIRCULAR_SEGMENT			    PROGRAM_FIND_AREA_CIRCULAR_SEGMENT				  PROGRAM_FIND_AREA_CIRCULAR_SEGMENT
--							      --							    --								  --
float area_of_segment ( float radius , float angle ) {	      static float area_of_segment ( float radius , float angle ) { public static float areaOfSegment ( float radius , float angl script_not_found : None
  float area_of_sector = pi * ( radius * radius ) * ( angle / 	float area_of_sector = pi * ( radius * radius ) * ( angle /   float areaOfSector = Math . PI * ( radius * radius ) * ( an 
  float area_of_triangle = ( float ) 1 / 2 * ( radius * radiu 	float area_of_triangle = ( float ) 1 / 2 * ( radius * radiu   float areaOfTriangle = ( float ) 1 / 2 * ( radius * radius  
  return area_of_sector - area_of_triangle ;		      	return area_of_sector - area_of_triangle ;		      return areaOfSector - areaOfTriangle ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		      COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS		    COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS			  COUNT_CHARACTERS_POSITION_ENGLISH_ALPHABETS
--							      --							    --								  --
int findCount ( string str ) {				      static int findCount ( String str ) {			    public static int findCount ( String str ) {		  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . size ( ) ;					      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) if ( i == ( str [ i ] - 'a' ) || i == ( str [ i ] -  	i ++ ) {						      i ++ ) if ( i == ( str . charAt ( i ) - 'a' ) || i == ( str 
  return result ;					      	  if ( i == ( str . charAt ( i ) - 'a' ) || i == ( str . ch   return result ;						  
}							      	    result ++ ;						    }								  
							      	  }							    								  
							      	}							    								  
							      	return result ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE_1					      PASCAL_TRIANGLE_1						    PASCAL_TRIANGLE_1						  PASCAL_TRIANGLE_1
--							      --							    --								  --
void printPascal ( int n ) {				      public static void printPascal ( int n ) {		    public static void printPascal ( int n ) {			  script_not_found : None
  for ( int line = 1 ;					      	for ( int line = 1 ;					      for ( int line = 1 ;					  
  line <= n ;						      	line <= n ;						      line <= n ;						  
  line ++ ) {						      	line ++ ) {						      line ++ ) {						  
    int C = 1 ;						      	  int C = 1 ;						    	int C = 1 ;						  
    for ( int i = 1 ;					      	  for ( int i = 1 ;					    	for ( int i = 1 ;					  
    i <= line ;						      	  i <= line ;						    	i <= line ;						  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      cout << C << " " ;				      	    System . out . print ( C + " " ) ;			    	  System . out . print ( C + " " ) ;			  
      C = C * ( line - i ) / i ;			      	    C = C * ( line - i ) / i ;				    	  C = C * ( line - i ) / i ;				  
    }							      	  }							    	}							  
    cout << "\n" ;					      	  System . out . println ( ) ;				    	System . out . println ( "" ) ;				  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	      MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	    MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME	  MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING_PALINDROME
--							      --							    --								  --
bool ispalindrome ( string s ) {			      static boolean ispalindrome ( String s ) {		    public static boolean ispalindrome ( String s ) {		  error : MINIMUM_CHARACTERS_ADDED_FRONT_MAKE_STRING
  int l = s . length ( ) ;				      	int l = s . length ( ) ;				      int l = s . length ( ) ;					  _PALINDROME.java:29: error: variable j is already
  int j ;						      	for ( int i = 0 , j = l - 1 ;				      int j ;							  defined in method f_filled(String)   for ( int i =
  for ( int i = 0 , j = l - 1 ;				      	i <= j ;						      for ( int i = 0 , j = l - 1 ;				   0 , j = l - 1 ;		       ^ 1 error
  i <= j ;						      	i ++ , j -- ) {						      i <= j ;							  
  i ++ , j -- ) {					      	  if ( s . charAt ( i ) != s . charAt ( j ) ) {		      i ++ , j -- ) {						  
    if ( s [ i ] != s [ j ] ) return false ;		      	    return false ;					    	if ( s . charAt ( i ) != s . charAt ( j ) ) return false  
  }							      	  }							      }								  
  return true ;						      	}							      return true ;						  
}							      	return true ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		      CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		    CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD		  CHECK_NUMBER_POWER_K_USING_BASE_CHANGING_METHOD
--							      --							    --								  --
bool isPowerOfK ( unsigned int n , unsigned int k ) {	      static boolean isPowerOfK ( int n , int k ) {		    public static boolean isPowerOfK ( int n , int k ) {	  success : None
  bool oneSeen = false ;				      	boolean oneSeen = false ;				      boolean oneSeen = false ;					  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    int digit = n % k ;					      	  int digit = n % k ;					    	int digit = n % k ;					  
    if ( digit > 1 ) return false ;			      	  if ( digit > 1 ) return false ;			    	if ( digit > 1 ) return false ;				  
    if ( digit == 1 ) {					      	  if ( digit == 1 ) {					    	if ( digit == 1 ) {					  
      if ( oneSeen ) return false ;			      	    if ( oneSeen ) return false ;			    	  if ( oneSeen ) return false ;				  
      oneSeen = true ;					      	    oneSeen = true ;					    	  oneSeen = true ;					  
    }							      	  }							    	}							  
    n /= k ;						      	  n /= k ;						    	n /= k ;						  
  }							      	}							      }								  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_ELEMENT_STABLE_SORT				      POSITION_ELEMENT_STABLE_SORT				    POSITION_ELEMENT_STABLE_SORT				  POSITION_ELEMENT_STABLE_SORT
--							      --							    --								  --
int getIndexInSortedArray ( int arr [ ] , int n , int idx ) { static int getIndexInSortedArray ( int arr [ ] , int n , int  public static int getIndexInSortedArray ( int arr [ ] , int n success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] < arr [ idx ] ) result ++ ;		      	  if ( arr [ i ] < arr [ idx ] ) result ++ ;		    	if ( arr [ i ] < arr [ idx ] ) {			  
    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;    	  if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;    	  result ++ ;						  
  }							      	}							    	}							  
  return result ;					      	return result ;						    	if ( arr [ i ] == arr [ idx ] && i < idx ) {		  
}							      }								    	  result ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND_1
--							      --							    --								  --
bool isSubSequence ( char str1 [ ] , char str2 [ ] , int m ,  static boolean isSubSequence ( String str1 , String str2 , in public static boolean isSubSequence ( char str1 [ ] , char st script_not_found : None
  int j = 0 ;						      	int j = 0 ;						      int j = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n && j < m ;					      	i < n && j < m ;					      i < n && j < m ;						  
  i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++ ;		      	i ++ ) if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j    i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++ ;		  
  return ( j == m ) ;					      	return ( j == m ) ;					      return ( j == m ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN
--							      --							    --								  --
public : int power ( int x , unsigned int y ) {		      static int power ( int x , int y ) {			    public static int power ( int x , int y ) {			  success : None
  if ( y == 0 ) return 1 ;				      	if ( y == 0 ) return 1 ;				      if ( y == 0 ) {						  
  else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( 	else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( 	return 1 ;						  
  else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; 	else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ;   }								  
}							      }								      else if ( y % 2 == 0 ) {					  
							      								    	return power ( x , y / 2 ) * power ( x , y / 2 ) ;	  
							      								      }								  
							      								      else {							  
							      								    	return x * power ( x , y / 2 ) * power ( x , y / 2 ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT COUNT_OBTUSE_ANGLES_CIRCLE_K_EQUIDISTANT_POINTS_2_GIVEN_POINT
--							      --							    --								  --
int countObtuseAngles ( int a , int b , int k ) {	      static int countObtuseAngles ( int a , int b , int k ) {	    public static int countObtuseAngles ( int a , int b , int k ) script_not_found : None
  int c1 = ( b - a ) - 1 ;				      	int c1 = ( b - a ) - 1 ;				      int c1 = ( b - a ) - 1 ;					  
  int c2 = ( k - b ) + ( a - 1 ) ;			      	int c2 = ( k - b ) + ( a - 1 ) ;			      int c2 = ( k - b ) + ( a - 1 ) ;				  
  if ( c1 == c2 ) return 0 ;				      	if ( c1 == c2 ) return 0 ;				      if ( c1 == c2 ) return 0 ;				  
  return min ( c1 , c2 ) ;				      	return min ( c1 , c2 ) ;				      return Math . min ( c1 , c2 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_ORDERED_PAIRS_AI_AJ_0				      NUMBER_ORDERED_PAIRS_AI_AJ_0				    NUMBER_ORDERED_PAIRS_AI_AJ_0				  NUMBER_ORDERED_PAIRS_AI_AJ_0
--							      --							    --								  --
int countPairs ( int a [ ] , int n ) {			      static int countPairs ( int a [ ] , int n ) {		    public static int countPairs ( int a [ ] , int n ) {	  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( ( a [ i ] & a [ j ] ) == 0 ) count += 2 ;     	  j ++ ) if ( ( a [ i ] & a [ j ] ) == 0 ) count += 2 ;	    	j ++ ) if ( ( a [ i ] & a [ j ] ) == 0 ) count += 2 ;	  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	      SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	    SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST	  SORTED_ORDER_PRINTING_OF_AN_ARRAY_THAT_REPRESENTS_A_BST
--							      --							    --								  --
void printSorted ( int arr [ ] , int start , int end ) {      private static void printSorted ( int [ ] arr , int start , i public static void printSorted ( int arr [ ] , int start , in script_not_found : None
  if ( start > end ) return ;				      	if ( start > end ) return ;				      if ( start > end ) return ;				  
  printSorted ( arr , start * 2 + 1 , end ) ;		      	printSorted ( arr , start * 2 + 1 , end ) ;		      printSorted ( arr , start * 2 + 1 , end ) ;		  
  cout << arr [ start ] << " " ;			      	System . out . print ( arr [ start ] + " " ) ;		      System . out . print ( arr [ start ] + " " ) ;		  
  printSorted ( arr , start * 2 + 2 , end ) ;		      	printSorted ( arr , start * 2 + 2 , end ) ;		      printSorted ( arr , start * 2 + 2 , end ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_GIVEN_STRING_USING_CHARACTER_SEARCH		      SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			    SORT_GIVEN_STRING_USING_CHARACTER_SEARCH			  SORT_GIVEN_STRING_USING_CHARACTER_SEARCH
--							      --							    --								  --
string sortString ( string str , int n ) {		      static String sortString ( String str , int n ) {		    public static String sortString ( String str , int n ) {	  script_not_found : None
  string new_str = "" ;					      	String new_str = "" ;					      String new_str = "" ;					  
  for ( int i = 'a' ;					      	for ( int i = 'a' ;					      for ( int i = 'a' ;					  
  i <= 'z' ;						      	i <= 'z' ;						      i <= 'z' ;						  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( str [ j ] == i ) new_str += str [ j ] ;	      	j ++ ) if ( str . charAt ( j ) == i ) new_str += str . char   j ++ ) if ( str . charAt ( j ) == i ) new_str += str . char 
  return new_str ;					      	return new_str ;					      return new_str ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS
--							      --							    --								  --
bool isProduct ( int arr [ ] , int n , int x ) {	      boolean isProduct ( int arr [ ] , int n , int x ) {	    public static boolean isProduct ( int arr [ ] , int n , int x error : Exception in thread "main" java.lang.Array
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  IndexOutOfBoundsException: Index 9 out of bounds f
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  or length 9 	at PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  _IF_ANY_PAIR_EXISTS.f_filled(PAIR_WITH_GIVEN_PRODU
  i < n ;						      	j < n ;							      j < n ;							  CT_SET_1_FIND_IF_ANY_PAIR_EXISTS.java:28) 	at PAIR
  i ++ ) if ( arr [ i ] * arr [ j ] == x ) return true ;      	j ++ ) if ( arr [ i ] * arr [ j ] == x ) return true ;	      i ++ ) if ( arr [ i ] * arr [ j ] == x ) return true ;	  _WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS.
  return false ;					      	return false ;						      return false ;						  main(PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAI
}							      }								    }								  R_EXISTS.java:70)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS	      FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		    FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS		  FIND_STRING_LEXICOGRAPHIC_ORDER_GIVEN_TWO_STRINGS
--							      --							    --								  --
string lexNext ( string s , int n ) {			      static String lexNext ( String str , int n ) {		    public static String lexNext ( String s , int n ) {		  script_not_found : None
  for ( int i = n - 1 ;					      	char [ ] s = str . toCharArray ( ) ;			      for ( int i = n - 1 ;					  
  i >= 0 ;						      	for ( int i = n - 1 ;					      i >= 0 ;							  
  i -- ) {						      	i >= 0 ;						      i -- ) {							  
    if ( s [ i ] != 'z' ) {				      	i -- ) {						    	if ( s . charAt ( i ) != 'z' ) {			  
      s [ i ] ++ ;					      	  if ( s [ i ] != 'z' ) {				    	  s . charAt ( i ) ++ ;					  
      return s ;					      	    s [ i ] ++ ;					    	  return s ;						  
    }							      	    return String . valueOf ( s ) ;			    	}							  
    s [ i ] = 'a' ;					      	  }							    	s . charAt ( i ) = 'a' ;				  
  }							      	  s [ i ] = 'a' ;					      }								  
}							      	}							      return s ;						  
							      	return null ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	      K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	    K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED	  K_NUMBERS_DIFFERENCE_MAXIMUM_MINIMUM_K_NUMBER_MINIMIZED
--							      --							    --								  --
int minDiff ( int arr [ ] , int n , int k ) {		      static int minDiff ( int arr [ ] , int n , int k ) {	    public static int minDiff ( int arr [ ] , int n , int k ) {	  script_not_found : None
  int result = INT_MAX ;				      	int result = Integer . MAX_VALUE ;			      int result = Integer . MAX_VALUE ;			  
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      sort ( arr , 0 , n ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n - k ;						      	i <= n - k ;						      i <= n - k ;						  
  i ++ ) result = min ( result , arr [ i + k - 1 ] - arr [ i  	i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - a   i ++ ) {							  
  return result ;					      	return result ;						    	result = Math . min ( result , arr [ i + k - 1 ] - arr [  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_2				      FIND_THE_MISSING_NUMBER_2					    FIND_THE_MISSING_NUMBER_2					  FIND_THE_MISSING_NUMBER_2
--							      --							    --								  --
int getMissingNo ( int a [ ] , int n ) {		      static int getMissingNo ( int a [ ] , int n ) {		    public static int getMissingNo ( int a [ ] , int n ) {	  success : None
  int x1 = a [ 0 ] ;					      	int x1 = a [ 0 ] ;					      int x1 = a [ 0 ] ;					  
  int x2 = 1 ;						      	int x2 = 1 ;						      int x2 = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) x1 = x1 ^ a [ i ] ;				      	i ++ ) x1 = x1 ^ a [ i ] ;				      i ++ ) {							  
  for ( int i = 2 ;					      	for ( int i = 2 ;					    	x1 = x1 ^ a [ i ] ;					  
  i <= n + 1 ;						      	i <= n + 1 ;						      }								  
  i ++ ) x2 = x2 ^ i ;					      	i ++ ) x2 = x2 ^ i ;					      for ( int i = 2 ;						  
  return ( x1 ^ x2 ) ;					      	return ( x1 ^ x2 ) ;					      i <= n + 1 ;						  
}							      }								      i ++ ) {							  
							      								    	x2 = x2 ^ i ;						  
							      								      }								  
							      								      return ( x1 ^ x2 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			      DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			    DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE			  DYNAMIC_PROGRAMMING_SET_7_COIN_CHANGE
--							      --							    --								  --
int count ( int S [ ] , int m , int n ) {		      static int count ( int S [ ] , int m , int n ) {		    public static int count ( int [ ] S , int m , int n ) {	  script_not_found : None
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  if ( n < 0 ) return 0 ;				      	if ( n < 0 ) return 0 ;					      if ( n < 0 ) return 0 ;					  
  if ( m <= 0 && n >= 1 ) return 0 ;			      	if ( m <= 0 && n >= 1 ) return 0 ;			      if ( m <= 0 && n >= 1 ) return 0 ;			  
  return count ( S , m - 1 , n ) + count ( S , m , n - S [ m  	return count ( S , m - 1 , n ) + count ( S , m , n - S [ m    return count ( S , m - 1 , n ) + count ( S , m , n - S [ m  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			      WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			    WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1			  WRITE_A_C_PROGRAM_TO_CALCULATE_POWXN_1
--							      --							    --								  --
float power ( float x , int y ) {			      static float power ( float x , int y ) {			    public static float power ( float x , int y ) {		  script_not_found : None
  float temp ;						      	float temp ;						      float temp ;						  
  if ( y == 0 ) return 1 ;				      	if ( y == 0 ) return 1 ;				      if ( y == 0 ) return 1 ;					  
  temp = power ( x , y / 2 ) ;				      	temp = power ( x , y / 2 ) ;				      temp = power ( x , y / 2 ) ;				  
  if ( y % 2 == 0 ) return temp * temp ;		      	if ( y % 2 == 0 ) return temp * temp ;			      if ( y % 2 == 0 ) return temp * temp ;			  
  else {						      	else {							      else {							  
    if ( y > 0 ) return x * temp * temp ;		      	  if ( y > 0 ) return x * temp * temp ;			    	if ( y > 0 ) return x * temp * temp ;			  
    else return ( temp * temp ) / x ;			      	  else return ( temp * temp ) / x ;			    	else return ( temp * temp ) / x ;			  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_PLUS_PERFECT_NUMBER			      PROGRAM_CHECK_PLUS_PERFECT_NUMBER				    PROGRAM_CHECK_PLUS_PERFECT_NUMBER				  PROGRAM_CHECK_PLUS_PERFECT_NUMBER
--							      --							    --								  --
bool checkplusperfect ( int x ) {			      static boolean checkplusperfect ( int x ) {		    public static boolean checkplusperfect ( int x ) {		  success : None
  int temp = x ;					      	int temp = x ;						      int temp = x ;						  
  int n = 0 ;						      	int n = 0 ;						      int n = 0 ;						  
  while ( x != 0 ) {					      	while ( x != 0 ) {					      while ( x != 0 ) {					  
    x /= 10 ;						      	  x /= 10 ;						    	x /= 10 ;						  
    n ++ ;						      	  n ++ ;						    	n ++ ;							  
  }							      	}							      }								  
  x = temp ;						      	x = temp ;						      x = temp ;						  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  while ( x != 0 ) {					      	while ( x != 0 ) {					      while ( x != 0 ) {					  
    sum += pow ( x % 10 , n ) ;				      	  sum += Math . pow ( x % 10 , n ) ;			    	sum += Math . pow ( x % 10 , n ) ;			  
    x /= 10 ;						      	  x /= 10 ;						    	x /= 10 ;						  
  }							      	}							      }								  
  return ( sum == temp ) ;				      	return ( sum == temp ) ;				      return ( sum == temp ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX				      PROGRAM_PRINT_IDENTITY_MATRIX				    PROGRAM_PRINT_IDENTITY_MATRIX				  PROGRAM_PRINT_IDENTITY_MATRIX
--							      --							    --								  --
int Identity ( int num ) {				      static int identity ( int num ) {				    public static int Identity ( int num ) {			  script_not_found : None
  int row , col ;					      	int row , col ;						      int row , col ;						  
  for ( row = 0 ;					      	for ( row = 0 ;						      for ( row = 0 ;						  
  row < num ;						      	row < num ;						      row < num ;						  
  row ++ ) {						      	row ++ ) {						      row ++ ) {						  
    for ( col = 0 ;					      	  for ( col = 0 ;					    	for ( col = 0 ;						  
    col < num ;						      	  col < num ;						    	col < num ;						  
    col ++ ) {						      	  col ++ ) {						    	col ++ ) {						  
      if ( row == col ) cout << 1 << " " ;		      	    if ( row == col ) System . out . print ( 1 + " " ) ;    	  if ( row == col ) {					  
      else cout << 0 << " " ;				      	    else System . out . print ( 0 + " " ) ;		    	    System . out . print ( 1 + " " ) ;			  
    }							      	  }							    	  }							  
    cout << endl ;					      	  System . out . println ( ) ;				    	  else {						  
  }							      	}							    	    System . out . print ( 0 + " " ) ;			  
  return 0 ;						      	return 0 ;						    	  }							  
}							      }								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM MIN_FLIPS_OF_CONTINUOUS_CHARACTERS_TO_MAKE_ALL_CHARACTERS_SAM
--							      --							    --								  --
int findFlips ( char str [ ] , int n ) {		      static int findFlips ( String str , int n ) {		    public static int findFlips ( char str [ ] , int n ) {	  script_not_found : None
  char last = ' ' ;					      	char last = ' ' ;					      char last = ' ' ;						  
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( last != str [ i ] ) res ++ ;			      	  if ( last != str . charAt ( i ) ) res ++ ;		    	if ( last != str [ i ] ) {				  
    last = str [ i ] ;					      	  last = str . charAt ( i ) ;				    	  res ++ ;						  
  }							      	}							    	}							  
  return res / 2 ;					      	return res / 2 ;					    	last = str [ i ] ;					  
}							      }								      }								  
							      								      return res / 2 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_EQUAL_PAIRS_STRING				      NUMBER_EQUAL_PAIRS_STRING					    NUMBER_EQUAL_PAIRS_STRING					  NUMBER_EQUAL_PAIRS_STRING
--							      --							    --								  --
int countPairs ( string s ) {				      static int countPairs ( String s ) {			    public static int countPairs ( String s ) {			  script_not_found : None
  int cnt [ MAX ] = {					      	int cnt [ ] = new int [ MAX ] ;				      int [ ] cnt = new int [ MAX ] ;				  
    0 }							      	for ( int i = 0 ;					      cnt [ s . length ( ) ] = 0 ;				  
    ;							      	i < s . length ( ) ;					      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	i ++ ) cnt [ s . charAt ( i ) ] ++ ;			      i < s . length ( ) ;					  
    i < s . length ( ) ;				      	int ans = 0 ;						      i ++ ) {							  
    i ++ ) cnt [ s [ i ] ] ++ ;				      	for ( int i = 0 ;					    	cnt [ s . charAt ( i ) ] ++ ;				  
    int ans = 0 ;					      	i < MAX ;						      }								  
    for ( int i = 0 ;					      	i ++ ) ans += cnt [ i ] * cnt [ i ] ;			      int ans = 0 ;						  
    i < MAX ;						      	return ans ;						      for ( int i = 0 ;						  
    i ++ ) ans += cnt [ i ] * cnt [ i ] ;		      }								      i < MAX ;							  
    return ans ;					      								      i ++ ) {							  
  }							      								    	ans += cnt [ i ] * cnt [ i ] ;				  
							      								      }								  
-							      -								      return ans-						  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			      SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			    SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP			  SUM_SERIES_ALTERNATE_SIGNED_SQUARES_AP
--							      --							    --								  --
int seiresSum ( int n , int a [ ] ) {			      static int seiresSum ( int n , int [ ] a ) {		    public static int seiresSum ( int n , int [ ] a ) {		  script_not_found : None
  int res = 0 ;						      	int res = 0 , i ;					      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( i = 0 ;						      for ( int i = 0 ;						  
  i < 2 * n ;						      	i < 2 * n ;						      i < 2 * n ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i % 2 == 0 ) res += a [ i ] * a [ i ] ;	      	  if ( i % 2 == 0 ) res += a [ i ] * a [ i ] ;		    	if ( i % 2 == 0 ) {					  
    else res -= a [ i ] * a [ i ] ;			      	  else res -= a [ i ] * a [ i ] ;			    	  res += a [ i ] * a [ i ] ;				  
  }							      	}							    	}							  
  return res ;						      	return res ;						    	else {							  
}							      }								    	  res -= a [ i ] * a [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCLE_LATTICE_POINTS					      CIRCLE_LATTICE_POINTS					    CIRCLE_LATTICE_POINTS					  CIRCLE_LATTICE_POINTS
--							      --							    --								  --
int countLattice ( int r ) {				      static int countLattice ( int r ) {			    public static int countLattice ( int r ) {			  error : CIRCLE_LATTICE_POINTS.java:36: error: inco
  if ( r <= 0 ) return 0 ;				      	if ( r <= 0 ) return 0 ;				      if ( r <= 0 ) {						  mpatible types: possible lossy conversion from dou
  int result = 4 ;					      	int result = 4 ;					    	return 0 ;						  ble to int	 int y = Math . sqrt ( ySquare ) ;
  for ( int x = 1 ;					      	for ( int x = 1 ;					      }								  			 ^ 1 error
  x < r ;						      	x < r ;							      int result = 4 ;						  
  x ++ ) {						      	x ++ ) {						      for ( int x = 1 ;						  
    int ySquare = r * r - x * x ;			      	  int ySquare = r * r - x * x ;				      x < r ;							  
    int y = sqrt ( ySquare ) ;				      	  int y = ( int ) Math . sqrt ( ySquare ) ;		      x ++ ) {							  
    if ( y * y == ySquare ) result += 4 ;		      	  if ( y * y == ySquare ) result += 4 ;			    	int ySquare = r * r - x * x ;				  
  }							      	}							    	int y = Math . sqrt ( ySquare ) ;			  
  return result ;					      	return result ;						    	if ( y * y == ySquare ) {				  
}							      }								    	  result += 4 ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_OCTAL_CONVERSION			      PROGRAM_DECIMAL_OCTAL_CONVERSION				    PROGRAM_DECIMAL_OCTAL_CONVERSION				  PROGRAM_DECIMAL_OCTAL_CONVERSION
--							      --							    --								  --
void decToOctal ( int n ) {				      static void decToOctal ( int n ) {			    public static void decToOctal ( int n ) {			  script_not_found : None
  int octalNum [ 100 ] ;				      	int [ ] octalNum = new int [ 100 ] ;			      int [ ] octalNum = new int [ 100 ] ;			  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( n != 0 ) {					      	while ( n != 0 ) {					      while ( n != 0 ) {					  
    octalNum [ i ] = n % 8 ;				      	  octalNum [ i ] = n % 8 ;				    	octalNum [ i ] = n % 8 ;				  
    n = n / 8 ;						      	  n = n / 8 ;						    	n = n / 8 ;						  
    i ++ ;						      	  i ++ ;						    	i ++ ;							  
  }							      	}							      }								  
  for ( int j = i - 1 ;					      	for ( int j = i - 1 ;					      for ( int j = i - 1 ;					  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  j -- ) cout << octalNum [ j ] ;			      	j -- ) System . out . print ( octalNum [ j ] ) ;	      j -- ) {							  
}							      }								    	System . out . print ( octalNum [ j ] ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
int countDer ( int n ) {				      static int countDer ( int n ) {				    public static int countDer ( int n ) {			  script_not_found : None
  if ( n == 1 ) return 0 ;				      	if ( n == 1 ) return 0 ;				      if ( n == 1 ) return 0 ;					  
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  if ( n == 2 ) return 1 ;				      	if ( n == 2 ) return 1 ;				      if ( n == 2 ) return 1 ;					  
  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2  	return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2    return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY_1
--							      --							    --								  --
int findInteger ( int arr [ ] , int n ) {		      static int findInteger ( int arr [ ] , int n ) {		    public static int findInteger ( int arr [ ] , int n ) {	  success : None
  int neg = 0 , pos = 0 ;				      	int neg = 0 , pos = 0 ;					      int neg = 0 , pos = 0 ;					  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum += arr [ i ] ;					      	  sum += arr [ i ] ;					    	sum += arr [ i ] ;					  
    if ( arr [ i ] < 0 ) neg ++ ;			      	  if ( arr [ i ] < 0 ) neg ++ ;				    	if ( arr [ i ] < 0 ) {					  
    else pos ++ ;					      	  else pos ++ ;						    	  neg ++ ;						  
  }							      	}							    	}							  
  return ( sum / abs ( neg - pos ) ) ;			      	return ( sum / Math . abs ( neg - pos ) ) ;		    	else {							  
}							      }								    	  pos ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return ( sum / Math . abs ( neg - pos ) ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_6_NOT
--							      --							    --								  --
bool check ( string str ) {				      static boolean check ( String str ) {			    public static boolean check ( String str ) {		  success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  if ( ( str [ n - 1 ] - '0' ) % 2 != 0 ) return false ;      	if ( ( str . charAt ( n - 1 ) - '0' ) % 2 != 0 ) return fal   if ( ( str . charAt ( n - 1 ) - '0' ) % 2 != 0 ) return fal 
  int digitSum = 0 ;					      	int digitSum = 0 ;					      int digitSum = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) digitSum += ( str [ i ] - '0' ) ;		      	i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      i ++ ) {							  
  return ( digitSum % 3 == 0 ) ;			      	return ( digitSum % 3 == 0 ) ;				    	digitSum += ( str . charAt ( i ) - '0' ) ;		  
}							      }								      }								  
							      								      return ( digitSum % 3 == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	      MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY	    MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY		  MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCULAR_ARRAY
--							      --							    --								  --
int maxSum ( int arr [ ] , int n ) {			      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int arr [ ] , int n ) {		  error : MAXIMIZE_SUM_CONSECUTIVE_DIFFERENCES_CIRCU
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  LAR_ARRAY.java:28: error: cannot find symbol	 sor
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      sort ( arr , 0 , n ) ;					  t ( arr , 0 , n ) ;	^   symbol:   method sort(in
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  t[],int,int)	 location: class MAXIMIZE_SUM_CONSEC
  i < n / 2 ;						      	i < n / 2 ;						      i < n / 2 ;						  UTIVE_DIFFERENCES_CIRCULAR_ARRAY 1 error
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum -= ( 2 * arr [ i ] ) ;				      	  sum -= ( 2 * arr [ i ] ) ;				    	sum -= ( 2 * arr [ i ] ) ;				  
    sum += ( 2 * arr [ n - i - 1 ] ) ;			      	  sum += ( 2 * arr [ n - i - 1 ] ) ;			    	sum += ( 2 * arr [ n - i - 1 ] ) ;			  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		      FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		    FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1		  FIND_DIFFERENCE_BETWEEN_SUMS_OF_TWO_DIAGONALS_1
--							      --							    --								  --
int difference ( int arr [ ] [ MAX ] , int n ) {	      public static int difference ( int arr [ ] [ ] , int n ) {    public static int difference ( int arr [ ] [ ] , int n ) {	  success : identical to gold
  int d1 = 0 , d2 = 0 ;					      	int d1 = 0 , d2 = 0 ;					      int d1 = 0 , d2 = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    d1 += arr [ i ] [ i ] ;				      	  d1 += arr [ i ] [ i ] ;				    	d1 += arr [ i ] [ i ] ;					  
    d2 += arr [ i ] [ n - i - 1 ] ;			      	  d2 += arr [ i ] [ n - i - 1 ] ;			    	d2 += arr [ i ] [ n - i - 1 ] ;				  
  }							      	}							      }								  
  return abs ( d1 - d2 ) ;				      	return Math . abs ( d1 - d2 ) ;				      return Math . abs ( d1 - d2 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAINTING_FENCE_ALGORITHM				      PAINTING_FENCE_ALGORITHM					    PAINTING_FENCE_ALGORITHM					  PAINTING_FENCE_ALGORITHM
--							      --							    --								  --
long countWays ( int n , int k ) {			      static long countWays ( int n , int k ) {			    public static long countWays ( int n , int k ) {		  error : PAINTING_FENCE_ALGORITHM.java:37: error: i
  long total = k ;					      	long total = k ;					      long total = k ;						  ncompatible types: possible lossy conversion from
  int mod = 1000000007 ;				      	int mod = 1000000007 ;					      int mod = 1000000007 ;					  long to int	  diff = total * ( k - 1 ) ;
  int same = 0 , diff = k ;				      	int same = 0 , diff = k ;				      int same = 0 , diff = k ;					  	    ^ 1 error
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    same = diff ;					      	  same = diff ;						    	same = diff ;						  
    diff = total * ( k - 1 ) ;				      	  diff = ( int ) total * ( k - 1 ) ;			    	diff = total * ( k - 1 ) ;				  
    diff = diff % mod ;					      	  diff = diff % mod ;					    	diff = diff % mod ;					  
    total = ( same + diff ) % mod ;			      	  total = ( same + diff ) % mod ;			    	total = ( same + diff ) % mod ;				  
  }							      	}							      }								  
  return total ;					      	return total ;						      return total ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_SPARSE_NOT				      CHECK_GIVEN_MATRIX_SPARSE_NOT				    CHECK_GIVEN_MATRIX_SPARSE_NOT				  CHECK_GIVEN_MATRIX_SPARSE_NOT
--							      --							    --								  --
bool isSparse ( int array [ ] [ MAX ] , int m , int n ) {     static boolean isSparse ( int array [ ] [ ] , int m , int n ) public static boolean isSparse ( int array [ ] [ ] , int m ,  success : None
  int counter = 0 ;					      	int counter = 0 ;					      int counter = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  ++ i ) for ( int j = 0 ;				      	++ i ) for ( int j = 0 ;				      ++ i ) for ( int j = 0 ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;	      	++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;	      ++ j ) if ( array [ i ] [ j ] == 0 ) counter ++ ;		  
  return ( counter > ( ( m * n ) / 2 ) ) ;		      	return ( counter > ( ( m * n ) / 2 ) ) ;		      return ( counter > ( ( m * n ) / 2 ) ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ALTERNATIVE_SORTING					      ALTERNATIVE_SORTING					    ALTERNATIVE_SORTING						  ALTERNATIVE_SORTING
--							      --							    --								  --
void alternateSort ( int arr [ ] , int n ) {		      static void alternateSort ( int arr [ ] , int n ) {	    public static void alternateSort ( int arr [ ] , int n ) {	  script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      sort ( arr , 0 , n ) ;					  
  int i = 0 , j = n - 1 ;				      	int i = 0 , j = n - 1 ;					      int i = 0 , j = n - 1 ;					  
  while ( i < j ) {					      	while ( i < j ) {					      while ( i < j ) {						  
    cout << arr [ j -- ] << " " ;			      	  System . out . print ( arr [ j -- ] + " " ) ;		    	System . out . print ( arr [ j -- ] + " " ) ;		  
    cout << arr [ i ++ ] << " " ;			      	  System . out . print ( arr [ i ++ ] + " " ) ;		    	System . out . print ( arr [ i ++ ] + " " ) ;		  
  }							      	}							      }								  
  if ( n % 2 != 0 ) cout << arr [ i ] ;			      	if ( n % 2 != 0 ) System . out . print ( arr [ i ] ) ;	      if ( n % 2 != 0 ) {					  
}							      }								    	System . out . print ( arr [ i ] ) ;			  
-							      -								    	-							  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE_1				      C_PROGRAM_FIND_AREA_TRIANGLE_1				    C_PROGRAM_FIND_AREA_TRIANGLE_1				  C_PROGRAM_FIND_AREA_TRIANGLE_1
--							      --							    --								  --
double polygonArea ( double X [ ] , double Y [ ] , int n ) {  static double polygonArea ( double X [ ] , double Y [ ] , int public static double polygonArea ( double X [ ] , double Y [  script_not_found : None
  double area = 0.0 ;					      	double area = 0.0 ;					      double area = 0.0 ;					  
  int j = n - 1 ;					      	int j = n - 1 ;						      int j = n - 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	  area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;	  
    j = i ;						      	  j = i ;						    	j = i ;							  
  }							      	}							      }								  
  return abs ( area / 2.0 ) ;				      	return Math . abs ( area / 2.0 ) ;			      return Math . abs ( area / 2.0 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		      SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		    SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER		  SUM_OF_ALL_PROPER_DIVISORS_OF_A_NATURAL_NUMBER
--							      --							    --								  --
int divSum ( int num ) {				      static int divSum ( int num ) {				    public static int divSum ( int num ) {			  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= sqrt ( num ) ;					      	i <= Math . sqrt ( num ) ;				      i <= Math . sqrt ( num ) ;				  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( num % i == 0 ) {				      	  if ( num % i == 0 ) {					    	if ( num % i == 0 ) {					  
      if ( i == ( num / i ) ) result += i ;		      	    if ( i == ( num / i ) ) result += i ;		    	  if ( i == ( num / i ) ) {				  
      else result += ( i + num / i ) ;			      	    else result += ( i + num / i ) ;			    	    result += i ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return ( result + 1 ) ;				      	return ( result + 1 ) ;					    	    result += ( i + num / i ) ;				  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( result + 1 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION WRITE_YOU_OWN_POWER_WITHOUT_USING_MULTIPLICATION_AND_DIVISION
--							      --							    --								  --
int pow ( int a , int b ) {				      static int pow ( int a , int b ) {			    public static int pow ( int a , int b ) {			  success : None
  if ( b == 0 ) return 1 ;				      	if ( b == 0 ) return 1 ;				      if ( b == 0 ) return 1 ;					  
  int answer = a ;					      	int answer = a ;					      int answer = a ;						  
  int increment = a ;					      	int increment = a ;					      int increment = a ;					  
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i < b ;						      	i < b ;							      i < b ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( j = 1 ;					      	  for ( j = 1 ;						    	for ( j = 1 ;						  
    j < a ;						      	  j < a ;						    	j < a ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) answer += increment ;				  
      answer += increment ;				      	    answer += increment ;				    	increment = answer ;					  
    }							      	  }							      }								  
    increment = answer ;				      	  increment = answer ;					      return answer ;						  
  }							      	}							    }								  
  return answer ;					      	return answer ;						    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES
--							      --							    --								  --
int maxvolume ( int s ) {				      static int maxvolume ( int s ) {				    public static int maxvolume ( int s ) {			  success : None
  int maxvalue = 0 ;					      	int maxvalue = 0 ;					      int maxvalue = 0 ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= s - 2 ;						      	i <= s - 2 ;						      i <= s - 2 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    j <= s - 1 ;					      	  j <= s - 1 ;						    	j <= s - 1 ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      int k = s - i - j ;				      	    int k = s - i - j ;					    	  int k = s - i - j ;					  
      maxvalue = max ( maxvalue , i * j * k ) ;		      	    maxvalue = Math . max ( maxvalue , i * j * k ) ;	    	  maxvalue = Math . max ( maxvalue , i * j * k ) ;	  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return maxvalue ;					      	return maxvalue ;					      return maxvalue ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	      INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	    INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX	  INTERCHANGE_ELEMENTS_OF_FIRST_AND_LAST_ROWS_IN_MATRIX
--							      --							    --								  --
void interchangeFirstLast ( int m [ ] [ n ] ) {		      static void interchangeFirstLast ( int m [ ] [ ] ) {	    public static void interchangeFirstLast ( int m [ ] [ ] ) {	  script_not_found : None
  int rows = n ;					      	int rows = m . length ;					      int rows = n ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < m [ 0 ] . length ;					      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int t = m [ 0 ] [ i ] ;				      	  int t = m [ 0 ] [ i ] ;				    	int t = m [ 0 ] [ i ] ;					  
    m [ 0 ] [ i ] = m [ rows - 1 ] [ i ] ;		      	  m [ 0 ] [ i ] = m [ rows - 1 ] [ i ] ;		    	m [ 0 ] [ i ] = m [ rows - 1 ] [ i ] ;			  
    m [ rows - 1 ] [ i ] = t ;				      	  m [ rows - 1 ] [ i ] = t ;				    	m [ rows - 1 ] [ i ] = t ;				  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	      GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1
--							      --							    --								  --
int countSubStr ( char str [ ] ) {			      int countSubStr ( char str [ ] , int n ) {		    public static int countSubStr ( char str [ ] ) {		  script_not_found : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  str [ i ] != '\0' ;					      	i < n ;							      str [ i ] != '\0' ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == '1' ) {				      	  if ( str [ i ] == '1' ) {				    	if ( str [ i ] == '1' ) {				  
      for ( int j = i + 1 ;				      	    for ( int j = i + 1 ;				    	  for ( int j = i + 1 ;					  
      str [ j ] != '\0' ;				      	    j < n ;						    	  str [ j ] != '\0' ;					  
      j ++ ) if ( str [ j ] == '1' ) res ++ ;		      	    j ++ ) {						    	  j ++ ) if ( str [ j ] == '1' ) res ++ ;		  
    }							      	      if ( str [ j ] == '1' ) res ++ ;			    	}							  
  }							      	    }							      }								  
  return res ;						      	  }							      return res ;						  
}							      	}							    }								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		      FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		    FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY		  FIND_SUM_NON_REPEATING_DISTINCT_ELEMENTS_ARRAY
--							      --							    --								  --
int findSum ( int arr [ ] , int n ) {			      static int findSum ( int arr [ ] , int n ) {		    public static int findSum ( int arr [ ] , int n ) {		  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  unordered_set < int > s ;				      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < Integer > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( s . find ( arr [ i ] ) == s . end ( ) ) {	      	  if ( ! s . contains ( arr [ i ] ) ) {			    	if ( s . contains ( arr [ i ] ) == false ) {		  
      sum += arr [ i ] ;				      	    sum += arr [ i ] ;					    	  sum += arr [ i ] ;					  
      s . insert ( arr [ i ] ) ;			      	    s . add ( arr [ i ] ) ;				    	  s . add ( arr [ i ] ) ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SURVIVAL						      SURVIVAL							    SURVIVAL							  SURVIVAL
--							      --							    --								  --
void survival ( int S , int N , int M ) {		      static void survival ( int S , int N , int M ) {		    public static void survival ( int S , int N , int M ) {	  script_not_found : None
  if ( ( ( N * 6 ) < ( M * 7 ) && S > 6 ) || M > N ) cout <<  	if ( ( ( N * 6 ) < ( M * 7 ) && S > 6 ) || M > N ) System .   if ( ( ( N * 6 ) < ( M * 7 ) && S > 6 ) || M > N ) {	  
  else {						      	else {							    	System . out . println ( "No\n" ) ;			  
    int days = ( M * S ) / N ;				      	  int days = ( M * S ) / N ;				      }								  
    if ( ( ( M * S ) % N ) != 0 ) days ++ ;		      	  if ( ( ( M * S ) % N ) != 0 ) days ++ ;		      else {							  
    cout << "Yes " << days << endl ;			      	  System . out . println ( "Yes " + days ) ;		    	int days = ( M * S ) / N ;				  
  }							      	}							    	if ( ( ( M * S ) % N ) != 0 ) {				  
}							      }								    	  days ++ ;						  
							      								    	}							  
-							      -								    	System . out . println ( "Yes " + days-			  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT     DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	    DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT
--							      --							    --								  --
int maxProd ( int n ) {					      static int maxProd ( int n ) {				    public static int maxProd ( int n ) {			  script_not_found : None
  if ( n == 0 || n == 1 ) return 0 ;			      	if ( n == 0 || n == 1 ) return 0 ;			      if ( n == 0 || n == 1 ) return 0 ;			  
  int max_val = 0 ;					      	int max_val = 0 ;					      int maxVal = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) max_val = max ( max_val , i * ( n - i ) , maxProd (  	i ++ ) max_val = Math . max ( max_val , Math . max ( i * (    i ++ ) {							  
  return max_val ;					      	return max_val ;					    	maxVal = Math . max ( maxVal , i * ( n - i ) , maxProd (  
}							      }								      }								  
							      								      return maxVal ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_1
--							      --							    --								  --
int findNth ( int n ) {					      public static int findNth ( int n ) {			    public static int findNth ( int n ) {			  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int curr = 19 ;					      	for ( int curr = 19 ;					      for ( int curr = 19 ;					  
  ;							      	;							      ;								  
  curr += 9 ) {						      	curr += 9 ) {						      curr += 9 ) {						  
    int sum = 0 ;					      	  int sum = 0 ;						    	int sum = 0 ;						  
    for ( int x = curr ;				      	  for ( int x = curr ;					    	for ( int x = curr ;					  
    x > 0 ;						      	  x > 0 ;						    	x > 0 ;							  
    x = x / 10 ) sum = sum + x % 10 ;			      	  x = x / 10 ) sum = sum + x % 10 ;			    	x = x / 10 ) {						  
    if ( sum == 10 ) count ++ ;				      	  if ( sum == 10 ) count ++ ;				    	  sum = sum + x % 10 ;					  
    if ( count == n ) return curr ;			      	  if ( count == n ) return curr ;			    	}							  
  }							      	}							    	if ( sum == 10 ) {					  
  return - 1 ;						      }								    	  count ++ ;						  
}							      								    	}							  
							      								    	if ( count == n ) {					  
							      								    	  return curr ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			      FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			    FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE			  FIND_DAY_OF_THE_WEEK_FOR_A_GIVEN_DATE
--							      --							    --								  --
int dayofweek ( int d , int m , int y ) {		      static int dayofweek ( int d , int m , int y ) {		    public static int dayofweek ( int d , int m , int y ) {	  script_not_found : None
  static int t [ ] = {					      	int t [ ] = {						      static int [ ] t = {					  
    0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 }	      	  0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 }	    	0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 }		  
    ;							      	  ;							    	;							  
    y -= m < 3 ;					      	  y -= ( m < 3 ) ? 1 : 0 ;				    	y -= m < 3 ? 1 : 0 ;					  
    return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  	  return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  	return ( y + y / 4 - y / 100 + y / 400 + t [ m - 1 ] + d  
  }							      	}							      }								  
  -							      	-							      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		      ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		    ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION		  ROPES_DATA_STRUCTURE_FAST_STRING_CONCATENATION
--							      --							    --								  --
void concatenate ( char a [ ] , char b [ ] , char c [ ] , int static void concatenate ( char a [ ] , char b [ ] , char c [  public static void concatenate ( char a [ ] , char b [ ] , ch script_not_found : None
  int i ;						      	int i ;							      int i ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n1 ;						      	i < n1 ;						      i < n1 ;							  
  i ++ ) c [ i ] = a [ i ] ;				      	i ++ ) {						      i ++ ) {							  
  for ( int j = 0 ;					      	  c [ i ] = a [ i ] ;					    	c [ i ] = a [ i ] ;					  
  j < n2 ;						      	}							      }								  
  j ++ ) c [ i ++ ] = b [ j ] ;				      	for ( int j = 0 ;					      for ( int j = 0 ;						  
  c [ i ] = '\0' ;					      	j < n2 ;						      j < n2 ;							  
}							      	j ++ ) {						      j ++ ) {							  
							      	  c [ i ++ ] = b [ j ] ;				    	c [ i ++ ] = b [ j ] ;					  
							      	}							      }								  
							      }								      c [ i ] = '\0' ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES			  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES
--							      --							    --								  --
void reorder ( int arr [ ] , int index [ ] , int n ) {	      static void reorder ( ) {					    public static void reorder ( int arr [ ] , int index [ ] , in script_not_found : None
  int temp [ n ] ;					      	int temp [ ] = new int [ arr . length ] ;		      int temp [ ] = new int [ n ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < arr . length ;					      i < n ;							  
  i ++ ) temp [ index [ i ] ] = arr [ i ] ;		      	i ++ ) temp [ index [ i ] ] = arr [ i ] ;		      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	temp [ index [ i ] ] = arr [ i ] ;			  
  i < n ;						      	i < arr . length ;					      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    arr [ i ] = temp [ i ] ;				      	  arr [ i ] = temp [ i ] ;				      i < n ;							  
    index [ i ] = i ;					      	  index [ i ] = i ;					      i ++ ) {							  
  }							      	}							    	arr [ i ] = temp [ i ] ;				  
}							      }								    	index [ i ] = i ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1		      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1
--							      --							    --								  --
int gcdExtended ( int a , int b , int * x , int * y ) {	      public static int gcdExtended ( int a , int b , int x , int y public static int gcdExtended ( int a , int b , int [ ] x , i error : BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1.
  if ( a == 0 ) {					      	if ( a == 0 ) {						      if ( a == 0 ) {						  java:38: error: ']' expected	   y [ 0	  ^
    * x = 0 ;						      	  x = 0 ;						    	x [ 0 ] = 0 ;						  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS_1.java:38:
    * y = 1 ;						      	  y = 1 ;						    	y [ 0 ] = 1 ;						   error: not a statement     y [ 0	  ^ BASIC_AN
    return b ;						      	  return b ;						    	return b ;						  D_EXTENDED_EUCLIDEAN_ALGORITHMS_1.java:40: error:
  }							      	}							      }								  illegal start of expression public static void mai
  int x1 , y1 ;						      	int x1 = 1 , y1 = 1 ;					      int x1 , y1 ;						  n(String args[]) { ^ 3 errors
  int gcd = gcdExtended ( b % a , a , & x1 , & y1 ) ;	      	int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;		      int gcd = gcdExtended ( b % a , a , new int [ ] {		  
  * x = y1 - ( b / a ) * x1 ;				      	x = y1 - ( b / a ) * x1 ;				    	1 , 0 , 0 }						  
  * y = x1 ;						      	y = x1 ;						    	) ;							  
  return gcd ;						      	return gcd ;						    	x [ 0 ] = y1 - ( b / a ) * x1 ;				  
}							      }								    	y [ 0							  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY				      CEILING_IN_A_SORTED_ARRAY					    CEILING_IN_A_SORTED_ARRAY					  CEILING_IN_A_SORTED_ARRAY
--							      --							    --								  --
int ceilSearch ( int arr [ ] , int low , int high , int x ) { static int ceilSearch ( int arr [ ] , int low , int high , in public static int ceilSearch ( int arr [ ] , int low , int hi success : None
  int i ;						      	int i ;							      int i ;							  
  if ( x <= arr [ low ] ) return low ;			      	if ( x <= arr [ low ] ) return low ;			      if ( x <= arr [ low ] ) return low ;			  
  for ( i = low ;					      	for ( i = low ;						      for ( i = low ;						  
  i < high ;						      	i < high ;						      i < high ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
    if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; 	  if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; 	if ( arr [ i ] < x && arr [ i + 1 ] >= x ) return i + 1 ; 
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			      CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT			    CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT				  CHECK_IF_A_NUMBER_IS_JUMBLED_OR_NOT
--							      --							    --								  --
bool checkJumbled ( int num ) {				      static boolean checkJumbled ( int num ) {			    public static boolean checkJumbled ( int num ) {		  success : None
  if ( num / 10 == 0 ) return true ;			      	if ( num / 10 == 0 ) return true ;			      if ( num / 10 == 0 ) return true ;			  
  while ( num != 0 ) {					      	while ( num != 0 ) {					      while ( num != 0 ) {					  
    if ( num / 10 == 0 ) return true ;			      	  if ( num / 10 == 0 ) return true ;			    	if ( num / 10 == 0 ) return true ;			  
    int digit1 = num % 10 ;				      	  int digit1 = num % 10 ;				    	int digit1 = num % 10 ;					  
    int digit2 = ( num / 10 ) % 10 ;			      	  int digit2 = ( num / 10 ) % 10 ;			    	int digit2 = ( num / 10 ) % 10 ;			  
    if ( abs ( digit2 - digit1 ) > 1 ) return false ;	      	  if ( Math . abs ( digit2 - digit1 ) > 1 ) return false ;  	if ( Math . abs ( digit2 - digit1 ) > 1 ) return false ;  
    num = num / 10 ;					      	  num = num / 10 ;					    	num = num / 10 ;					  
  }							      	}							      }								  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME     MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	    MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME	  MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME
--							      --							    --								  --
int maxRemoval ( int arr [ ] , int n ) {		      static int maxRemoval ( int arr [ ] , int n ) {		    public static int maxRemoval ( int arr [ ] , int n ) {	  error : MAXIMUM_REMOVAL_FROM_ARRAY_WHEN_REMOVAL_TI
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  ME_WAITING_TIME.java:32: error: cannot find symbol
  int cummulative_sum = 0 ;				      	int cummulative_sum = 0 ;				      int cummulativeSum = 0 ;					     sort ( arr , n ) ;	  ^   symbol:	method sort(
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      sort ( arr , n ) ;					  int[],int)   location: class MAXIMUM_REMOVAL_FROM_
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  ARRAY_WHEN_REMOVAL_TIME_WAITING_TIME 1 error
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] >= cummulative_sum ) {		      	  if ( arr [ i ] >= cummulative_sum ) {			    	if ( arr [ i ] >= cummulativeSum ) {			  
      count ++ ;					      	    count ++ ;						    	  count ++ ;						  
      cummulative_sum += arr [ i ] ;			      	    cummulative_sum += arr [ i ] ;			    	  cummulativeSum += arr [ i ] ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS	      BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		    BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS		  BIN_PACKING_PROBLEM_MINIMIZE_NUMBER_OF_USED_BINS
--							      --							    --								  --
int nextFit ( int weight [ ] , int n , int c ) {	      static int nextFit ( int weight [ ] , int n , int c ) {	    public static int nextFit ( int weight [ ] , int n , int c )  success : None
  int res = 0 , bin_rem = c ;				      	int res = 0 , bin_rem = c ;				      int res = 0 , binRem = c ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( weight [ i ] > bin_rem ) {			      	  if ( weight [ i ] > bin_rem ) {			    	if ( weight [ i ] > binRem ) {				  
      res ++ ;						      	    res ++ ;						    	  res ++ ;						  
      bin_rem = c - weight [ i ] ;			      	    bin_rem = c - weight [ i ] ;			    	  binRem = c - weight [ i ] ;				  
    }							      	  }							    	}							  
    else bin_rem -= weight [ i ] ;			      	  else bin_rem -= weight [ i ] ;			    	else {							  
  }							      	}							    	  binRem -= weight [ i ] ;				  
  return res ;						      	return res ;						    	}							  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE
--							      --							    --								  --
bool checkCount ( int arr [ ] , int n , int k ) {	      static boolean checkCount ( int [ ] arr , int n , int k ) {   public static boolean checkCount ( int arr [ ] , int n , int  success : None
  int count ;						      	int count ;						      int count ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    count = 0 ;						      	  count = 0 ;						    	count = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ j ] == arr [ i ] ) count ++ ;		      	    if ( arr [ j ] == arr [ i ] ) count ++ ;		    	  if ( arr [ j ] == arr [ i ] ) {			  
      if ( count > 2 * k ) return false ;		      	    if ( count > 2 * k ) return false ;			    	    count ++ ;						  
    }							      	  }							    	  }							  
  }							      	}							    	  if ( count > 2 * k ) {				  
  return true ;						      	return true ;						    	    return false ;					  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
