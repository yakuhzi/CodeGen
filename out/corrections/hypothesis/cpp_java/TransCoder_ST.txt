========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
int intersection ( int n ) {				      static int intersection ( int n ) {			    public static int intersection ( int n ) {			  success : None
  return n * ( n - 1 ) ;				      	return n * ( n - 1 ) ;					      return n * ( n - 1 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
int areaSquare ( int side ) {				      static int areaSquare ( int side ) {			    public static int areaSquare ( int side ) {			  success : None
  int area = side * side ;				      	int area = side * side ;				      int area = side * side ;					  
  return area ;						      	return area ;						      return area ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
int fun ( unsigned int n ) {				      static int fun ( int n ) {				    public static int fun ( int n ) {				  success : None
  return n & ( n - 1 ) ;				      	return n & ( n - 1 ) ;					      return n & ( n - 1 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
int hexagonalNum ( int n ) {				      int hexagonalNum ( int n ) {				    public static int hexagonalNum ( int n ) {			  success : None
  return n * ( 2 * n - 1 ) ;				      	return n * ( 2 * n - 1 ) ;				      return n * ( 2 * n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CASSINIS_IDENTITY					      CASSINIS_IDENTITY						    CASSINIS_IDENTITY						  CASSINIS_IDENTITY
--							      --							    --								  --
int cassini ( int n ) {					      static int cassini ( int n ) {				    public static int cassini ( int n ) {			  success : None
  return ( n & 1 ) ? - 1 : 1 ;				      	return ( n & 1 ) != 0 ? - 1 : 1 ;			      return ( n & 1 ) != 0 ? - 1 : 1 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
int addOne ( int x ) {					      static int addOne ( int x ) {				    public static int addOne ( int x ) {			  success : None
  return ( - ( ~ x ) ) ;				      	return ( - ( ~ x ) ) ;					      return ( - ( ~ x ) ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUMSCRIBED_CIRCLE			      AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				    AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				  AREA_SQUARE_CIRCUMSCRIBED_CIRCLE
--							      --							    --								  --
int find_Area ( int r ) {				      static int find_Area ( int r ) {				    public static int findArea ( int r ) {			  success : None
  return ( 2 * r * r ) ;				      	return ( 2 * r * r ) ;					      return ( 2 * r * r ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
bool check ( int n ) {					      static boolean check ( int n ) {				    public static boolean check ( int n ) {			  success : None
  return 1162261467 % n == 0 ;				      	return 1162261467 % n == 0 ;				      return 1162261467 % n == 0 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
bool isEven ( int n ) {					      public static boolean isEven ( int n ) {			    public static boolean isEven ( int n ) {			  success : identical to gold
  return ( n % 2 == 0 ) ;				      	return ( n % 2 == 0 ) ;					      return ( n % 2 == 0 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
int pentagonalNum ( int n ) {				      int pentagonalNum ( int n ) {				    public static int pentagonalNum ( int n ) {			  success : None
  return ( 3 * n * n - n ) / 2 ;			      	return ( 3 * n * n - n ) / 2 ;				      return ( 3 * n * n - n ) / 2 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
int Circumference ( int a ) {				      int Circumference ( int a ) {				    public static int Circumference ( int a ) {			  success : None
  return 4 * a ;					      	return 4 * a ;						      return 4 * a ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
int numberOfSticks ( int x ) {				      public static int numberOfSticks ( int x ) {		    public static int numberOfSticks ( int x ) {		  success : identical to gold
  return ( 3 * x * ( x + 1 ) ) / 2 ;			      	return ( 3 * x * ( x + 1 ) ) / 2 ;			      return ( 3 * x * ( x + 1 ) ) / 2 ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
int power ( int n ) {					      static int power ( int n ) {				    public static int power ( int n ) {				  success : None
  if ( n == 1 ) return 2 ;				      	if ( n == 1 ) return 2 ;				      if ( n == 1 ) return 2 ;					  
  return 2 * power ( n - 1 ) ;				      	return 2 * power ( n - 1 ) ;				      return 2 * power ( n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
int compute_average ( int a , int b ) {			      static int compute_average ( int a , int b ) {		    public static int computeAverage ( int a , int b ) {	  success : None
  return ( a + b ) / 2 ;				      	return ( a + b ) / 2 ;					      return ( a + b ) / 2 ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
int binomialCoeffSum ( int n ) {			      static int binomialCoeffSum ( int n ) {			    public static int binomialCoeffSum ( int n ) {		  success : None
  return ( 1 << n ) ;					      	return ( 1 << n ) ;					      return ( 1 << n ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_HALVES_SORTED				      SORT_ARRAY_TWO_HALVES_SORTED				    SORT_ARRAY_TWO_HALVES_SORTED				  SORT_ARRAY_TWO_HALVES_SORTED
--							      --							    --								  --
void mergeTwoHalf ( int A [ ] , int n ) {		      static void mergeTwoHalf ( int [ ] A , int n ) {		    public static void mergeTwoHalf ( int [ ] A , int n ) {	  success : None
  sort ( A , A + n ) ;					      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
int rangeGCD ( int n , int m ) {			      static int rangeGCD ( int n , int m ) {			    public static int rangeGCD ( int n , int m ) {		  success : None
  return ( n == m ) ? n : 1 ;				      	return ( n == m ) ? n : 1 ;				      return ( n == m ) ? n : 1 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
int summingSeries ( long n ) {				      static int summingSeries ( long n ) {			    public static int summingSeries ( long n ) {		  error : PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1.java:19
  return pow ( n , 2 ) ;				      	return ( int ) Math . pow ( n , 2 ) ;			      return Math . pow ( n , 2 ) ;				  : error: incompatible types: possible lossy conver
}							      }								    }								  sion from double to int   return Math . pow ( n ,
							      								    								  2 ) ;			    ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
double circumference ( double r ) {			      static double circumference ( double r ) {		    public static double circumference ( double r ) {		  success : None
  double cir = 2 * PI * r ;				      	double PI = 3.1415 ;					      double cir = 2 * Math . PI * r ;				  
  return cir ;						      	double cir = 2 * PI * r ;				      return cir ;						  
}							      	return cir ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_AN_INTEGER_WITH_3_5				      MULTIPLY_AN_INTEGER_WITH_3_5				    MULTIPLY_AN_INTEGER_WITH_3_5				  MULTIPLY_AN_INTEGER_WITH_3_5
--							      --							    --								  --
int multiplyWith3Point5 ( int x ) {			      static int multiplyWith3Point5 ( int x ) {		    public static int multiplyWith3Point5 ( int x ) {		  success : None
  return ( x << 1 ) + x + ( x >> 1 ) ;			      	return ( x << 1 ) + x + ( x >> 1 ) ;			      return ( x << 1 ) + x + ( x >> 1 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
bool isEven ( int n ) {					      public static boolean isEven ( int n ) {			    public static boolean isEven ( int n ) {			  error : CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1.java
  return ( ! ( n & 1 ) ) ;				      	if ( ( n & 1 ) == 0 ) return true ;			      return ( ! ( n & 1 ) ) ;					  :20: error: bad operand type int for unary operato
}							      	else return false ;					    }								  r '!'	  return ( ! ( n & 1 ) ) ;	      ^ 1 er
							      }								    								  ror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  return n * factorial ( n - 1 ) ;			      	return n * factorial ( n - 1 ) ;			      return n * factorial ( n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
int height ( int N ) {					      static int height ( int N ) {				    public static int height ( int N ) {			  error : HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES.j
  return ceil ( log2 ( N + 1 ) ) - 1 ;			      	return ( int ) Math . ceil ( Math . log ( N + 1 ) / Math .    return Math . ceil ( Math . log2 ( N + 1 ) ) - 1 ;	  ava:19: error: cannot find symbol   return Math .
}							      }								    }								  ceil ( Math . log2 ( N + 1 ) ) - 1 ;
							      								    								  		 ^   symbol:   method log2(int)	  lo
							      								    								  cation: class Math 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
int largest ( int arr [ ] , int n ) {			      static int largest ( int [ ] arr , int n ) {		    public static int largest ( int [ ] arr , int n ) {		  error : C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1.jav
  return * max_element ( arr , arr + n ) ;		      	Arrays . sort ( arr ) ;					      return new MaxElement ( arr , n ) ;			  a:20: error: cannot find symbol   return new MaxEl
}							      	return arr [ n - 1 ] ;					    }								  ement ( arr , n ) ;		   ^   symbol:	 cla
							      }								    								  ss MaxElement	  location: class C_PROGRAM_FIND_LAR
							      								    								  GEST_ELEMENT_ARRAY_1 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
float slope ( float x1 , float y1 , float x2 , float y2 ) {   static float slope ( float x1 , float y1 , float x2 , float y public static float slope ( float x1 , float y1 , float x2 ,  success : None
  return ( y2 - y1 ) / ( x2 - x1 ) ;			      	return ( y2 - y1 ) / ( x2 - x1 ) ;			      return ( y2 - y1 ) / ( x2 - x1 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  return n * factorial ( n - 1 ) ;			      	return n * factorial ( n - 1 ) ;			      return n * factorial ( n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
int countNonEmptySubstr ( string str ) {		      static int countNonEmptySubstr ( String str ) {		    public static int countNonEmptySubstr ( String str ) {	  success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  return n * ( n + 1 ) / 2 ;				      	return n * ( n + 1 ) / 2 ;				      return n * ( n + 1 ) / 2 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
bool oppositeSigns ( int x , int y ) {			      static boolean oppositeSigns ( int x , int y ) {		    public static boolean oppositeSigns ( int x , int y ) {	  success : None
  return ( ( x ^ y ) < 0 ) ;				      	return ( ( x ^ y ) < 0 ) ;				      return ( ( x ^ y ) < 0 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
int swapNibbles ( int x ) {				      static int swapNibbles ( int x ) {			    public static int swapNibbles ( int x ) {			  success : None
  return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	      	return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	      return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			      PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES
--							      --							    --								  --
int findMaximumPieces ( int n ) {			      static int findMaximumPieces ( int n ) {			    public static int findMaximumPieces ( int n ) {		  success : None
  return 1 + n * ( n + 1 ) / 2 ;			      	return 1 + n * ( n + 1 ) / 2 ;				      return 1 + n * ( n + 1 ) / 2 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
unsigned int getModulo ( unsigned int n , unsigned int d ) {  static int getModulo ( int n , int d ) {			    public static int getModulo ( int n , int d ) {		  success : None
  return ( n & ( d - 1 ) ) ;				      	return ( n & ( d - 1 ) ) ;				      return ( n & ( d - 1 ) ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
int nthTerm ( int n ) {					      public static int nthTerm ( int n ) {			    public static int nthTerm ( int n ) {			  success : identical to gold
  return ( n * n ) + ( n * n * n ) ;			      	return ( n * n ) + ( n * n * n ) ;			      return ( n * n ) + ( n * n * n ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE				      LONGEST_INCREASING_SUBSEQUENCE				    LONGEST_INCREASING_SUBSEQUENCE				  LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
int lis ( int arr [ ] , int n ) {			      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int arr [ ] , int n ) {		  script_not_found : None
  int max = 1 ;						      	max_ref = 1 ;						      int max = 1 ;						  
  _lis ( arr , n , & max ) ;				      	_lis ( arr , n ) ;					      _lis ( arr , n , new int [ n ] ) ;			  
  return max ;						      	return max_ref ;					      return max ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
int gcd ( int a , int b ) {				      public static int gcd ( int a , int b ) {			    public static int gcd ( int a , int b ) {			  success : identical to gold
  if ( a == 0 ) return b ;				      	if ( a == 0 ) return b ;				      if ( a == 0 ) return b ;					  
  return gcd ( b % a , a ) ;				      	return gcd ( b % a , a ) ;				      return gcd ( b % a , a ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS_1				      BREAK_NUMBER_THREE_PARTS_1				    BREAK_NUMBER_THREE_PARTS_1					  BREAK_NUMBER_THREE_PARTS_1
--							      --							    --								  --
ll count_of_ways ( ll n ) {				      static long count_of_ways ( long n ) {			    public static long countOfWays ( long n ) {			  success : None
  ll count ;						      	long count = 0 ;					      long count ;						  
  count = ( n + 1 ) * ( n + 2 ) / 2 ;			      	count = ( n + 1 ) * ( n + 2 ) / 2 ;			      count = ( n + 1 ) * ( n + 2 ) / 2 ;			  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
int evenbinomialCoeffSum ( int n ) {			      static int evenbinomialCoeffSum ( int n ) {		    public static int evenbinomialCoeffSum ( int n ) {		  success : None
  return ( 1 << ( n - 1 ) ) ;				      	return ( 1 << ( n - 1 ) ) ;				      return ( 1 << ( n - 1 ) ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
int getRemainder ( int num , int divisor ) {		      static int getRemainder ( int num , int divisor ) {	    public static int getRemainder ( int num , int divisor ) {	  success : None
  return ( num - divisor * ( num / divisor ) ) ;	      	return ( num - divisor * ( num / divisor ) ) ;		      return ( num - divisor * ( num / divisor ) ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
int rectCount ( int n , int m ) {			      public static long rectCount ( int n , int m ) {		    public static int rectCount ( int n , int m ) {		  success : None
  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;	      	return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		      return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10
--							      --							    --								  --
bool isMultipleOf10 ( int n ) {				      static boolean isMultipleOf10 ( int n ) {			    public static boolean isMultipleOf10 ( int n ) {		  success : None
  return ( n % 15 == 0 ) ;				      	if ( n % 15 == 0 ) return true ;			      return ( n % 15 == 0 ) ;					  
}							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
double areaOctagon ( double side ) {			      static double areaOctagon ( double side ) {		    public static double areaOctagon ( double side ) {		  success : None
  return ( float ) ( 2 * ( 1 + sqrt ( 2 ) ) * side * side ) ; 	return ( float ) ( 2 * ( 1 + Math . sqrt ( 2 ) ) * side * s   return ( float ) ( 2 * ( 1 + Math . sqrt ( 2 ) ) * side * s 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
double surface_area_octahedron ( double side ) {	      static double surface_area_octahedron ( double side ) {	    public static double surface_area_octahedron ( double side )  success : None
  return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) ) ;	      	return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;      return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
long long int findSum ( int n ) {			      static int findSum ( int n ) {				    public static long findSum ( int n ) {			  success : None
  return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;     	return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	      return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
double vol_of_octahedron ( double side ) {		      static double vol_of_octahedron ( double side ) {		    public static double volOfOctahedron ( double side ) {	  success : None
  return ( ( side * side * side ) * ( sqrt ( 2 ) / 3 ) ) ;    	return ( ( side * side * side ) * ( Math . sqrt ( 2 ) / 3 )   return ( ( side * side * side ) * ( Math . sqrt ( 2 ) / 3 ) 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
double procal ( int n ) {				      static double procal ( int n ) {				    public static double procal ( int n ) {			  success : None
  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;	      	return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		      return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
int countSetBits ( int n ) {				      public static int countSetBits ( int n ) {		    public static int countSetBits ( int n ) {			  success : None
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) {						  
  else return 1 + countSetBits ( n & ( n - 1 ) ) ;	      	else return 1 + countSetBits ( n & ( n - 1 ) ) ;	    	return 0 ;						  
}							      }								      }								  
							      								      else {							  
							      								    	return 1 + countSetBits ( n & ( n - 1 ) ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
int countSetBits ( int n ) {				      public static int countSetBits ( int n ) {		    public static int countSetBits ( int n ) {			  success : None
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return 0 ;					  
  else return ( n & 1 ) + countSetBits ( n >> 1 ) ;	      	else return ( n & 1 ) + countSetBits ( n >> 1 ) ;	      else return ( n & 1 ) + countSetBits ( n >> 1 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
int Resources ( int process , int need ) {		      static int Resources ( int process , int need ) {		    public static int Resources ( int process , int need ) {	  success : None
  int minResources = 0 ;				      	int minResources = 0 ;					      int minResources = 0 ;					  
  minResources = process * ( need - 1 ) + 1 ;		      	minResources = process * ( need - 1 ) + 1 ;		      minResources = process * ( need - 1 ) + 1 ;		  
  return minResources ;					      	return minResources ;					      return minResources ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
int bool isPowerOfTwo ( int x ) {			      static boolean isPowerOfTwo ( int x ) {			    public static boolean isPowerOfTwo ( int x ) {		  error : WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_
  return x && ( ! ( x & ( x - 1 ) ) ) ;			      	return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;		      return x > 0 && ( ! ( x & ( x - 1 ) ) ) ;			  A_NO_IS_POWER_OF_TWO_1.java:19: error: bad operand
}							      }								    }								   type int for unary operator '!'   return x > 0 &&
							      								    								   ( ! ( x & ( x - 1 ) ) ) ;			 ^ 1
							      								    								   error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
public : unsigned int countSetBits ( int n ) {		      static int countSetBits ( int n ) {			    public static final int countSetBits ( int n ) {		  success : None
  unsigned int count = 0 ;				      	int count = 0 ;						      int count = 0 ;						  
  while ( n ) {						      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    n &= ( n - 1 ) ;					      	  n &= ( n - 1 ) ;					    	n &= ( n - 1 ) ;					  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
float volumeOfEllipsoid ( float r1 , float r2 , float r3 ) {  public static float volumeOfEllipsoid ( float r1 , float r2 , public static float volumeOfEllipsoid ( float r1 , float r2 , error : PROGRAM_CALCULATE_VOLUME_ELLIPSOID.java:20
  float pi = 3.14 ;					      	float pi = ( float ) 3.14 ;				      float pi = 3.14 ;						  : error: incompatible types: possible lossy conver
  return 1.33 * pi * r1 * r2 * r3 ;			      	return ( float ) 1.33 * pi * r1 * r2 * r3 ;		      return 1.33 * pi * r1 * r2 * r3 ;				  sion from double to float   float pi = 3.14 ;
}							      }								    }								  	   ^ PROGRAM_CALCULATE_VOLUME_ELLIPSOID.java
							      								    								  :21: error: incompatible types: possible lossy con
							      								    								  version from double to float	 return 1.33 * pi *
							      								    								  r1 * r2 * r3 ;			      ^ 2 er
							      								    								  rors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE      DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
int lis ( int arr [ ] , int n ) {			      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int arr [ ] , int n ) {		  script_not_found : None
  int max = 1 ;						      	max_ref = 1 ;						      int max = 1 ;						  
  _lis ( arr , n , & max ) ;				      	_lis ( arr , n ) ;					      _lis ( arr , n , new int [ n ] ) ;			  
  return max ;						      	return max_ref ;					      return max ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
float sumOfSeries ( int n ) {				      static double sumOfSeries ( int n ) {			    public static float sumOfSeries ( int n ) {			  error : SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS.j
  return ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ;	      	return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;	      return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;	  ava:19: error: incompatible types: possible lossy
}							      }								    }								  conversion from double to float   return ( 0.666 )
							      								    								   * ( 1 - 1 / Math . pow ( 10 , n ) ) ;
							      								    								  	  ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
unsigned int factorial ( unsigned int n ) {		      static int factorial ( int n ) {				    public static int factorial ( int n ) {			  success : None
  int res = 1 , i ;					      	int res = 1 , i ;					      int res = 1 , i ;						  
  for ( i = 2 ;						      	for ( i = 2 ;						      for ( i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) res *= i ;					      	i ++ ) res *= i ;					      i ++ ) {							  
  return res ;						      	return res ;						    	res *= i ;						  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
void sortit ( int arr [ ] , int n ) {			      static void sortit ( int [ ] arr , int n ) {		    public static void sortit ( int arr [ ] , int n ) {		  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) arr [ i ] = i + 1 ;				  
    arr [ i ] = i + 1 ;					      	  arr [ i ] = i + 1 ;					    }								  
  }							      	}							    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
void printSubStr ( string str , int low , int high ) {	      static void printSubStr ( String str , int low , int high ) { public static void printSubStr ( String str , int low , int h script_not_found : None
  for ( int i = low ;					      	System . out . println ( str . substring ( low , high + 1 )   for ( int i = low ;					  
  i <= high ;						      }								      i <= high ;						  
  ++ i ) cout << str [ i ] ;				      								      ++ i ) {							  
}							      								    	System . out . print ( str . charAt ( i ) ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
void bin ( unsigned n ) {				      static void bin ( Integer n ) {				    public static void bin ( int n ) {				  script_not_found : None
  if ( n > 1 ) bin ( n >> 1 ) ;				      	if ( n > 1 ) bin ( n >> 1 ) ;				      if ( n > 1 ) {						  
  printf ( "%d" , n & 1 ) ;				      	System . out . printf ( "%d" , n & 1 ) ;		    	bin ( n >> 1 ) ;					  
}							      }								      }								  
							      								      System . out . println ( n & 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
long long int calculateSum ( int n ) {			      static long calculateSum ( int n ) {			    public static long calculateSum ( int n ) {			  success : None
  long long int sum = 0 ;				      	long sum = 0 ;						      long sum = 0 ;						  
  sum = 1 << n ;					      	sum = 1 << n ;						      sum = 1 << n ;						  
  return ( sum - 1 ) ;					      	return ( sum - 1 ) ;					      return ( sum - 1 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
int assignValue ( int a , int b , bool x ) {		      static int assignValue ( int a , int b , int x ) {	    public static int assignValue ( int a , int b , boolean x ) { script_not_found : None
  int arr [ ] = {					      	int arr [ ] = {						      int [ ] arr = {						  
    a , b }						      	  a , b }						    	a , b }							  
    ;							      	  ;							    	;							  
    return ( arr [ x ] ) ;				      	  return ( arr [ x ] ) ;				    	return ( arr [ x ] ) ;					  
  }							      	}							      }								  
  -							      	-							      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
int kthSmallest ( int arr [ ] , int n , int k ) {	      public static int kthSmallest ( Integer [ ] arr , int k ) {   public static int kthSmallest ( int arr [ ] , int n , int k ) script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  return arr [ k - 1 ] ;				      	return arr [ k - 1 ] ;					      return arr [ k - 1 ] ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
string repeat ( string s , int n ) {			      static String repeat ( String s , int n ) {		    public static String repeat ( String s , int n ) {		  success : None
  string s1 = s ;					      	String s1 = s ;						      String s1 = s ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) s += s1 ;					      	i ++ ) s += s1 ;					      i ++ ) {							  
  return s ;						      	return s ;						    	s += s1 ;						  
}							      }								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I
--							      --							    --								  --
float getArea ( int a ) {				      static float getArea ( int a ) {				    public static float getArea ( int a ) {			  error : AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A
  float area = ( M_PI * a * a ) / 4.0 ;			      	float area = ( float ) ( Math . PI * a * a ) / 4 ;	      float area = ( Math . PI * a * a ) / 4.0 ;		  _CIRCLE_INSCRIBED_IN_IT.java:20: error: incompatib
  return area ;						      	return area ;						      return area ;						  le types: possible lossy conversion from double to
}							      }								    }								   float   float area = ( Math . PI * a * a ) / 4.0
							      								    								  ;					 ^ 1 error
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		  HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
int turnOffK ( int n , int k ) {			      static int turnOffK ( int n , int k ) {			    public static int turnOffK ( int n , int k ) {		  success : None
  if ( k <= 0 ) return n ;				      	if ( k <= 0 ) return n ;				      if ( k <= 0 ) return n ;					  
  return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			      	return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			      return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES
--							      --							    --								  --
int fib ( int n ) {					      static int fib ( int n ) {				    public static int fib ( int n ) {				  script_not_found : None
  if ( n <= 1 ) return n ;				      	if ( n <= 1 ) return n ;				      if ( n <= 1 ) return n ;					  
  return fib ( n - 1 ) + fib ( n - 2 ) ;		      	return fib ( n - 1 ) + fib ( n - 2 ) ;			      return fib ( n - 1 ) + fib ( n - 2 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
int maxSquare ( int b , int m ) {			      static int maxSquare ( int b , int m ) {			    public static int maxSquare ( int b , int m ) {		  success : None
  return ( b / m - 1 ) * ( b / m ) / 2 ;		      	return ( b / m - 1 ) * ( b / m ) / 2 ;			      return ( b / m - 1 ) * ( b / m ) / 2 ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
bool isPrime ( int n ) {				      static boolean isPrime ( int n ) {			    public static boolean isPrime ( int n ) {			  success : None
  if ( n <= 1 ) return false ;				      	if ( n <= 1 ) return false ;				      if ( n <= 1 ) return false ;				  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( n % i == 0 ) return false ;		      	i ++ ) if ( n % i == 0 ) return false ;			      i ++ ) if ( n % i == 0 ) return false ;			  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
int countStr ( int n ) {				      static int countStr ( int n ) {				    public static int countStr ( int n ) {			  success : None
  return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;      	return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;	      return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
int divisorSum ( int n ) {				      static int divisorSum ( int n ) {				    public static int divisorSum ( int n ) {			  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  ++ i ) sum += ( n / i ) * i ;				      	++ i ) sum += ( n / i ) * i ;				      ++ i ) {							  
  return sum ;						      	return sum ;						    	sum += ( n / i ) * i ;					  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
int sequence ( int n ) {				      static int sequence ( int n ) {				    public static int sequence ( int n ) {			  script_not_found : None
  if ( n == 1 || n == 2 ) return 1 ;			      	if ( n == 1 || n == 2 ) return 1 ;			      if ( n == 1 || n == 2 ) {					  
  else return sequence ( sequence ( n - 1 ) ) + sequence ( n  	else return sequence ( sequence ( n - 1 ) ) + sequence ( n  	return 1 ;						  
}							      }								      }								  
							      								      else {							  
							      								    	return sequence ( sequence ( n - 1 ) ) + sequence ( n - s 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING      COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
unsigned int getAbs ( int n ) {				      static int getAbs ( int n ) {				    public static int getAbs ( int n ) {			  script_not_found : None
  int const mask = n >> ( sizeof ( int ) * CHARBIT - 1 ) ;    	int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;		      final int mask = n >>> ( Integer . SIZE * CHARBIT - 1 ) ;	  
  return ( ( n + mask ) ^ mask ) ;			      	return ( ( n + mask ) ^ mask ) ;			      return ( ( n + mask ) ^ mask ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
int findTrailingZeros ( int n ) {			      static int findTrailingZeros ( int n ) {			    public static int findTrailingZeros ( int n ) {		  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 5 ;					      	for ( int i = 5 ;					      for ( int i = 5 ;						  
  n / i >= 1 ;						      	n / i >= 1 ;						      n / i >= 1 ;						  
  i *= 5 ) count += n / i ;				      	i *= 5 ) count += n / i ;				      i *= 5 ) {						  
  return count ;					      	return count ;						    	count += n / i ;					  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
int addOne ( int x ) {					      static int addOne ( int x ) {				    public static int addOne ( int x ) {			  error : ADD_1_TO_A_GIVEN_NUMBER.java:26: error: ba
  int m = 1 ;						      	int m = 1 ;						      int m = 1 ;						  d operand types for binary operator '&'   while (
  while ( x & m ) {					      	while ( ( int ) ( x & m ) >= 1 ) {			      while ( x & m != m ) {					  x & m != m ) {	     ^	 first type:  int
    x = x ^ m ;						      	  x = x ^ m ;						    	x = x ^ m ;						  second type: boolean 1 error
    m <<= 1 ;						      	  m <<= 1 ;						    	m <<= 1 ;						  
  }							      	}							      }								  
  x = x ^ m ;						      	x = x ^ m ;						      x = x ^ m ;						  
  return x ;						      	return x ;						      return x ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
int find ( int n , int k ) {				      public static int find ( int n , int k ) {		    public static int find ( int n , int k ) {			  success : None
  if ( n + 1 >= k ) return ( k - 1 ) ;			      	if ( n + 1 >= k ) return ( k - 1 ) ;			      if ( n + 1 >= k ) {					  
  else return ( 2 * n + 1 - k ) ;			      	else return ( 2 * n + 1 - k ) ;				    	return ( k - 1 ) ;					  
}							      }								      }								  
							      								      else {							  
							      								    	return ( 2 * n + 1 - k ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
bool checkValidity ( int a , int b , int c ) {		      public static int checkValidity ( int a , int b , int c ) {   public static boolean checkValidity ( int a , int b , int c ) error : CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIV
  if ( a + b <= c || a + c <= b || b + c <= a ) return false  	if ( a + b <= c || a + c <= b || b + c <= a ) return 0 ;      if ( a + b <= c || a + c <= b || b + c <= a ) {		  EN.java:66: error: incomparable types: boolean and
  else return true ;					      	else return 1 ;						    	return false ;						   int	       if(f_filled(param0.get(i),param1.get(
}							      }								      }								  i),param2.get(i)) == f_gold(param0.get(i),param1.g
							      								      else {							  et(i),param2.get(i)))
							      								    	return true ;						  				     ^ 1 error
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
bool isNumber ( string s ) {				      static boolean isNumber ( String s ) {			    public static boolean isNumber ( String s ) {		  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < s . length ( ) ;					      	i < s . length ( ) ;					      i < s . length ( ) ;					  
  i ++ ) if ( isdigit ( s [ i ] ) == false ) return false ;   	i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == fal   i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == fal 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
int countSquares ( int a , int b ) {			      double countSquares ( int a , int b ) {			    public static int countSquares ( int a , int b ) {		  script_not_found : None
  return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 ) ; 	return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil (   return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : NEXT_POWER_OF_2_1.java:23: error: bad oper
  unsigned int p = 1 ;					      	int p = 1 ;						      int p = 1 ;						  and type int for unary operator '!'	if ( n > 0 &
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( n > 0 && ! ( n & ( n - 1 ) ) ) return n ;		  & ! ( n & ( n - 1 ) ) ) return n ;
  while ( p < n ) p <<= 1 ;				      	while ( p < n ) p <<= 1 ;				      while ( p < n ) {						   ^ 1 error
  return p ;						      	return p ;						    	p <<= 1 ;						  
}							      }								      }								  
							      								      return p ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
int leonardo ( int n ) {				      static int leonardo ( int n ) {				    public static int leonardo ( int n ) {			  script_not_found : None
  if ( n == 0 || n == 1 ) return 1 ;			      	if ( n == 0 || n == 1 ) return 1 ;			      if ( n == 0 || n == 1 ) return 1 ;			  
  return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ;	      	return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;      return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
bool isPossible ( string str , int n ) {		      static boolean isPossible ( String str , int n ) {	    public static boolean isPossible ( String str , int n ) {	  success : None
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  
  if ( len >= n ) return true ;				      	if ( len >= n ) return true ;				      if ( len >= n ) {						  
  return false ;					      	return false ;						    	return true ;						  
}							      }								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      public static int search ( int arr [ ] , int x ) {	    public static int search ( int arr [ ] , int n , int x ) {	  script_not_found : None
  int i ;						      	int n = arr . length ;					      int i ;							  
  for ( i = 0 ;						      	for ( int i = 0 ;					      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] == x ) return i ;		      	i ++ ) {						      i ++ ) if ( arr [ i ] == x ) return i ;			  
  return - 1 ;						      	  if ( arr [ i ] == x ) return i ;			      return - 1 ;						  
}							      	}							    }								  
							      	return - 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
int maxTripletSum ( int arr [ ] , int n ) {		      static int maxTripletSum ( int arr [ ] , int n ) {	    public static int maxTripletSum ( int arr [ ] , int n ) {	  success : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;      	return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;	      return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_LENGTH_PALINDROME				      NTH_EVEN_LENGTH_PALINDROME				    NTH_EVEN_LENGTH_PALINDROME					  NTH_EVEN_LENGTH_PALINDROME
--							      --							    --								  --
string evenlength ( string n ) {			      static String evenlength ( String n ) {			    public static String evenlength ( String n ) {		  success : None
  string res = n ;					      	String res = n ;					      String res = n ;						  
  for ( int j = n . length ( ) - 1 ;			      	for ( int j = n . length ( ) - 1 ;			      for ( int j = n . length ( ) - 1 ;			  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  -- j ) res += n [ j ] ;				      	-- j ) res += n . charAt ( j ) ;			      -- j ) {							  
  return res ;						      	return res ;						    	res += n . charAt ( j ) ;				  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
int findSum ( int N , int K ) {				      static int findSum ( int N , int K ) {			    public static int findSum ( int N , int K ) {		  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= N ;						      	i <= N ;						      i <= N ;							  
  i ++ ) ans += ( i % K ) ;				      	i ++ ) ans += ( i % K ) ;				      i ++ ) {							  
  return ans ;						      	return ans ;						    	ans += ( i % K ) ;					  
}							      }								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_MULTIPLICATION			      CHECK_INTEGER_OVERFLOW_MULTIPLICATION			    CHECK_INTEGER_OVERFLOW_MULTIPLICATION			  CHECK_INTEGER_OVERFLOW_MULTIPLICATION
--							      --							    --								  --
bool isOverflow ( long long a , long long b ) {		      static Boolean isOverflow ( long a , long b ) {		    public static boolean isOverflow ( long a , long b ) {	  error : CHECK_INTEGER_OVERFLOW_MULTIPLICATION.java
  if ( a == 0 || b == 0 ) return false ;		      	if ( a == 0 || b == 0 ) return false ;			      if ( a == 0 || b == 0 ) {					  :61: error: boolean cannot be dereferenced
  long long result = a * b ;				      	long result = a * b ;					    	return false ;						   if(f_filled(param0.get(i),param1.get(i)).equals(f
  if ( a == result / b ) return false ;			      	if ( a == result / b ) return false ;			      }								  _gold(param0.get(i),param1.get(i))))
  else return true ;					      	else return true ;					      long result = a * b ;					  				     ^ 1 error
}							      }								      if ( a == result / b ) {					  
							      								    	return false ;						  
							      								      }								  
							      								      else {							  
							      								    	return true ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
int nswp ( int n ) {					      static int nswp ( int n ) {				    public static int nswp ( int n ) {				  script_not_found : None
  if ( n == 0 || n == 1 ) return 1 ;			      	if ( n == 0 || n == 1 ) return 1 ;			      if ( n == 0 || n == 1 ) return 1 ;			  
  return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		      	return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		      return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
int countPaths ( int n , int m ) {			      static int countPaths ( int n , int m ) {			    public static int countPaths ( int n , int m ) {		  script_not_found : None
  if ( n == 0 || m == 0 ) return 1 ;			      	if ( n == 0 || m == 0 ) return 1 ;			      if ( n == 0 || m == 0 ) return 1 ;			  
  return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  	return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1    return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
bool isPowerOfFour ( unsigned int n ) {			      static boolean isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
  return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0xAA 	return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ( n & 0xAAAA   return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0xAA 4_OR_NOT_2.java:19: error: bad operand type int fo
}							      }								    }								  r unary operator '!'	 return n != 0 && ( ( n & (
							      								    								  n - 1 ) ) == 0 ) && ! ( n & 0xAAAAAAAA ) ;
							      								    								  					    ^ 1 erro
							      								    								  r
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
void printFun ( int test ) {				      static void printFun ( int test ) {			    public static void printFun ( int test ) {			  script_not_found : None
  if ( test < 1 ) return ;				      	if ( test < 1 ) return ;				      if ( test < 1 ) {						  
  else {						      	else {							    	return ;						  
    cout << test << " " ;				      	  System . out . printf ( "%d " , test ) ;		      }								  
    printFun ( test - 1 ) ;				      	  printFun ( test - 1 ) ;				      else {							  
    cout << test << " " ;				      	  System . out . printf ( "%d " , test ) ;		    	System . out . print ( test + " " ) ;			  
    return ;						      	  return ;						    	printFun ( test - 1 ) ;					  
  }							      	}							    	System . out . print ( test + " " ) ;			  
}							      }								    	return ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
double vol_of_dodecahedron ( int side ) {		      static double vol_of_dodecahedron ( int side ) {		    public static double volOfDodecahedron ( int side ) {	  success : None
  return ( ( ( 15 + ( 7 * ( sqrt ( 5 ) ) ) ) / 4 ) * ( pow (  	return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * (   return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * ( 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
float findArea ( float a ) {				      static float findArea ( float a ) {			    public static float findArea ( float a ) {			  error : PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON.java:
  float area ;						      	float area ;						      float area ;						  22: error: incompatible types: possible lossy conv
  area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a )  	area = ( float ) ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqr   area = ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqrt ( 5 ) )  ersion from double to float	area = ( Math . sqrt
  return area ;						      	return area ;						      return area ;						   ( 5 * ( 5 + 2 * ( Math . sqrt ( 5 ) ) ) ) * a * a
}							      }								    }								   ) / 4 ;
							      								    								  				    ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
int minSum ( int A [ ] , int n ) {			      static int minSum ( int [ ] A , int n ) {			    public static int minSum ( int [ ] A , int n ) {		  error : MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY.j
  int min_val = * min_element ( A , A + n ) ;		      	int min_val = Arrays . stream ( A ) . min ( ) . getAsInt (    int minVal = Arrays . stream ( A ) . min ( ) . sum ( ) ;	  ava:20: error: cannot find symbol   int minVal = A
  return ( min_val * ( n - 1 ) ) ;			      	return ( min_val * ( n - 1 ) ) ;			      return ( minVal * ( n - 1 ) ) ;				  rrays . stream ( A ) . min ( ) . sum ( ) ;
}							      }								    }								  					  ^   symbol
							      								    								  :   method sum()   location: class OptionalInt 1 e
							      								    								  rror
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
int findLastIndex ( string & str , char x ) {		      static int findLastIndex ( String str , Character x ) {	    public static int findLastIndex ( String str , char x ) {	  script_not_found : None
  for ( int i = str . length ( ) - 1 ;			      	for ( int i = str . length ( ) - 1 ;			      for ( int i = str . length ( ) - 1 ;			  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) if ( str [ i ] == x ) return i ;		      	i -- ) if ( str . charAt ( i ) == x ) return i ;	      i -- ) if ( str . charAt ( i ) == x ) return i ;		  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  success : None
  n -- ;						      	n -- ;							      n -- ;							  
  n |= n >> 1 ;						      	n |= n >> 1 ;						      n |= n >> 1 ;						  
  n |= n >> 2 ;						      	n |= n >> 2 ;						      n |= n >> 2 ;						  
  n |= n >> 4 ;						      	n |= n >> 4 ;						      n |= n >> 4 ;						  
  n |= n >> 8 ;						      	n |= n >> 8 ;						      n |= n >> 8 ;						  
  n |= n >> 16 ;					      	n |= n >> 16 ;						      n |= n >> 16 ;						  
  n ++ ;						      	n ++ ;							      n ++ ;							  
  return n ;						      	return n ;						      return n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
int findRepeating ( int arr [ ] , int n ) {		      static int findRepeating ( int [ ] arr , int n ) {	    public static int findRepeating ( int arr [ ] , int n ) {	  error : FIND_REPETITIVE_ELEMENT_1_N_1.java:23: err
  return accumulate ( arr , arr + n , 0 ) - ( ( n - 1 ) * n / 	int sum = 0 ;						      return Arrays . stream ( arr ) . mapToInt ( arr :: length ) or: invalid method reference	 return Arrays . str
}							      	for ( int i = 0 ;					    }								  eam ( arr ) . mapToInt ( arr :: length ) . sum ( )
							      	i < n ;							    								   - ( ( n - 1 ) * n / 2 ) ;
							      	i ++ ) sum += arr [ i ] ;				    								  			 ^   cannot find symbol
							      	return sum - ( ( ( n - 1 ) * n ) / 2 ) ;		    								  symbol:   method length()	location: class int[
							      }								    								  ] 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
int PowerOFPINnfactorial ( int n , int p ) {		      static int PowerOFPINnfactorial ( int n , int p ) {	    public static int PowerOFPINnfactorial ( int n , int p ) {	  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  int temp = p ;					      	int temp = p ;						      int temp = p ;						  
  while ( temp <= n ) {					      	while ( temp <= n ) {					      while ( temp <= n ) {					  
    ans += n / temp ;					      	  ans += n / temp ;					    	ans += n / temp ;					  
    temp = temp * p ;					      	  temp = temp * p ;					    	temp = temp * p ;					  
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
float exponential ( int n , float x ) {			      static float exponential ( int n , float x ) {		    public static float exponential ( int n , float x ) {	  script_not_found : None
  float sum = 1.0f ;					      	float sum = 1 ;						      float sum = 1.0f ;					  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  -- i ) sum = 1 + x * sum / i ;			      	-- i ) sum = 1 + x * sum / i ;				      -- i ) {							  
  return sum ;						      	return sum ;						    	sum = 1 + x * sum / i ;					  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
int numberOfPaths ( int m , int n ) {			      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  script_not_found : None
  if ( m == 1 || n == 1 ) return 1 ;			      	if ( m == 1 || n == 1 ) return 1 ;			      if ( m == 1 || n == 1 ) return 1 ;			  
  return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  	return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n    return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
int maxvolume ( int s ) {				      static int maxvolume ( int s ) {				    public static int maxvolume ( int s ) {			  success : None
  int length = s / 3 ;					      	int length = s / 3 ;					      int length = s / 3 ;					  
  s -= length ;						      	s -= length ;						      s -= length ;						  
  int breadth = s / 2 ;					      	int breadth = s / 2 ;					      int breadth = s / 2 ;					  
  int height = s - breadth ;				      	int height = s - breadth ;				      int height = s - breadth ;				  
  return length * breadth * height ;			      	return length * breadth * height ;			      return length * breadth * height ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
int largestPower ( int n , int p ) {			      static int Largestpower ( int n , int p ) {		    public static int largestPower ( int n , int p ) {		  success : None
  int x = 0 ;						      	int ans = 0 ;						      int x = 0 ;						  
  while ( n ) {						      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    n /= p ;						      	  n /= p ;						    	n /= p ;						  
    x += n ;						      	  ans += n ;						    	x += n ;						  
  }							      	}							      }								  
  return x ;						      	return ans ;						      return x ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
void reverse ( char str [ ] ) {				      static void reverse ( char str [ ] ) {			    public static void reverse ( String str ) {			  script_not_found : None
  int n = strlen ( str ) , i ;				      	int n = str . length , i ;				      int n = str . length ( ) , i ;				  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n / 2 ;						      	i < n / 2 ;						      i < n / 2 ;						  
  i ++ ) swap ( & str [ i ] , & str [ n - i - 1 ] ) ;	      	i ++ ) {						      i ++ ) {							  
}							      	  swap ( str , i , n - i - 1 ) ;			    	swap ( str , i , n - i - 1 ) ;				  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1
--							      --							    --								  --
void printArray ( int * a , int n ) {			      static void printArray ( int [ ] a , int n ) {		    public static void printArray ( int [ ] a , int n ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) cout << a [ i ] << " " ;			      	i ++ ) System . out . print ( a [ i ] + " " ) ;		      i ++ ) {							  
  cout << endl ;					      	System . out . println ( ) ;				    	System . out . print ( a [ i ] + " " ) ;		  
  return ;						      }								      }								  
}							      								      System . out . println ( ) ;				  
							      								      return ;							  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
int floorSqrt ( int x ) {				      static int floorSqrt ( int x ) {				    public static int floorSqrt ( int x ) {			  success : None
  if ( x == 0 || x == 1 ) return x ;			      	if ( x == 0 || x == 1 ) return x ;			      if ( x == 0 || x == 1 ) {					  
  int i = 1 , result = 1 ;				      	int i = 1 , result = 1 ;				    	return x ;						  
  while ( result <= x ) {				      	while ( result <= x ) {					      }								  
    i ++ ;						      	  i ++ ;						      int i = 1 , result = 1 ;					  
    result = i * i ;					      	  result = i * i ;					      while ( result <= x ) {					  
  }							      	}							    	i ++ ;							  
  return i - 1 ;					      	return i - 1 ;						    	result = i * i ;					  
}							      }								      }								  
							      								      return i - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
bool isPower ( int x , long int y ) {			      public static boolean isPower ( int x , int y ) {		    public static boolean isPower ( int x , long y ) {		  success : None
  if ( x == 1 ) return ( y == 1 ) ;			      	if ( x == 1 ) return ( y == 1 ) ;			      if ( x == 1 ) {						  
  long int pow = 1 ;					      	int pow = 1 ;						    	return ( y == 1 ) ;					  
  while ( pow < y ) pow *= x ;				      	while ( pow < y ) pow = pow * x ;			      }								  
  return ( pow == y ) ;					      	return ( pow == y ) ;					      long pow = 1 ;						  
}							      }								      while ( pow < y ) {					  
							      								    	pow *= x ;						  
							      								      }								  
							      								      return ( pow == y ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			      MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			    MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			  MULTIPLICATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
int modInverse ( int a , int m ) {			      static int modInverse ( int a , int m ) {			    public static int modInverse ( int a , int m ) {		  script_not_found : None
  a = a % m ;						      	a = a % m ;						      a = a % m ;						  
  for ( int x = 1 ;					      	for ( int x = 1 ;					      for ( int x = 1 ;						  
  x < m ;						      	x < m ;							      x < m ;							  
  x ++ ) if ( ( a * x ) % m == 1 ) return x ;		      	x ++ ) if ( ( a * x ) % m == 1 ) return x ;		      x ++ ) if ( ( a * x ) % m == 1 ) return x ;		  
}							      	return 1 ;						      return m ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
bool isDivisible ( long long int n ) {			      static boolean isDivisible ( long n ) {			    public static boolean isDivisible ( long n ) {		  error : NUMBER_IS_DIVISIBLE_BY_29_OR_NOT.java:25:
  while ( n / 100 ) {					      	while ( n / 100 > 0 ) {					      while ( n / 100 != 0 ) {					  error: incompatible types: possible lossy conversi
    int last_digit = n % 10 ;				      	  int last_digit = ( int ) n % 10 ;			    	int lastDigit = n % 10 ;				  on from long to int	  int lastDigit = n % 10 ;
    n /= 10 ;						      	  n /= 10 ;						    	n /= 10 ;						  		       ^ 1 error
    n += last_digit * 3 ;				      	  n += last_digit * 3 ;					    	n += lastDigit * 3 ;					  
  }							      	}							      }								  
  return ( n % 29 == 0 ) ;				      	return ( n % 29 == 0 ) ;				      return ( n % 29 == 0 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY	      QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
void leftRotate ( int arr [ ] , int n , int k ) {	      static void leftRotate ( int arr [ ] , int n , int k ) {	    public static void leftRotate ( int arr [ ] , int n , int k ) script_not_found : None
  for ( int i = k ;					      	for ( int i = k ;					      for ( int i = k ;						  
  i < k + n ;						      	i < k + n ;						      i < k + n ;						  
  i ++ ) cout << arr [ i % n ] << " " ;			      	i ++ ) System . out . print ( arr [ i % n ] + " " ) ;	      i ++ ) {							  
}							      }								    	System . out . print ( arr [ i % n ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
unsigned int doublefactorial ( unsigned int n ) {	      static int doublefactorial ( int n ) {			    public static int doublefactorial ( int n ) {		  success : None
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  for ( int i = n ;					      	for ( int i = n ;					      for ( int i = n ;						  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i = i - 2 ) {						      	i = i - 2 ) {						      i = i - 2 ) {						  
    if ( i == 0 || i == 1 ) return res ;		      	  if ( i == 0 || i == 1 ) return res ;			    	if ( i == 0 || i == 1 ) {				  
    else res *= i ;					      	  else res *= i ;					    	  return res ;						  
  }							      	}							    	}							  
}							      	return res ;						    	else {							  
							      }								    	  res *= i ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
int findLastIndex ( string & str , char x ) {		      static int findLastIndex ( String str , Character x ) {	    public static int findLastIndex ( String str , char x ) {	  script_not_found : None
  int index = - 1 ;					      	int index = - 1 ;					      int index = - 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) if ( str [ i ] == x ) index = i ;		      	i ++ ) if ( str . charAt ( i ) == x ) index = i ;	      i ++ ) if ( str . charAt ( i ) == x ) index = i ;		  
  return index ;					      	return index ;						      return index ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
public : void printNos ( unsigned int n ) {		      static void printNos ( int n ) {				    public static final void printNos ( int n ) {		  script_not_found : None
  if ( n > 0 ) {					      	if ( n > 0 ) {						      if ( n > 0 ) {						  
    printNos ( n - 1 ) ;				      	  printNos ( n - 1 ) ;					    	printNos ( n - 1 ) ;					  
    cout << n << " " ;					      	  System . out . print ( n + " " ) ;			    	System . out . print ( n + " " ) ;			  
  }							      	}							      }								  
  return ;						      	return ;						      return ;							  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
int kthgroupsum ( int k ) {				      public static int kthgroupsum ( int k ) {			    public static int kthgroupsum ( int k ) {			  success : identical to gold
  int cur = ( k * ( k - 1 ) ) + 1 ;			      	int cur = ( k * ( k - 1 ) ) + 1 ;			      int cur = ( k * ( k - 1 ) ) + 1 ;				  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  while ( k -- ) {					      	while ( k -- > 0 ) {					      while ( k -- > 0 ) {					  
    sum += cur ;					      	  sum += cur ;						    	sum += cur ;						  
    cur += 2 ;						      	  cur += 2 ;						    	cur += 2 ;						  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
void printFactorialNums ( int n ) {			      static void printFactorialNums ( int n ) {		    public static void printFactorialNums ( int n ) {		  script_not_found : None
  int fact = 1 ;					      	int fact = 1 ;						      int fact = 1 ;						  
  int x = 2 ;						      	int x = 2 ;						      int x = 2 ;						  
  while ( fact <= n ) {					      	while ( fact <= n ) {					      while ( fact <= n ) {					  
    cout << fact << " " ;				      	  System . out . print ( fact + " " ) ;			    	System . out . print ( fact + " " ) ;			  
    fact = fact * x ;					      	  fact = fact * x ;					    	fact = fact * x ;					  
    x ++ ;						      	  x ++ ;						    	x ++ ;							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : NEXT_POWER_OF_2.java:26: error: bad operan
  unsigned count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  d type int for unary operator '!'   if ( n > 0 &&
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( n > 0 && ! ( n & ( n - 1 ) ) ) {			  ! ( n & ( n - 1 ) ) ) {		  ^ 1 error
  while ( n != 0 ) {					      	while ( n != 0 ) {					    	return n ;						  
    n >>= 1 ;						      	  n >>= 1 ;						      }								  
    count += 1 ;					      	  count += 1 ;						      while ( n != 0 ) {					  
  }							      	}							    	n >>= 1 ;						  
  return 1 << count ;					      	return 1 << count ;					    	count += 1 ;						  
}							      }								      }								  
							      								      return 1 << count ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER			  FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
void center ( int x1 , int x2 , int y1 , int y2 ) {	      static void center ( int x1 , int x2 , int y1 , int y2 ) {    public static void center ( int x1 , int x2 , int y1 , int y2 script_not_found : None
  cout << ( float ) ( x1 + x2 ) / 2 << ", " << ( float ) ( y1 	System . out . print ( ( float ) ( x1 + x2 ) / 2 + ", " + (   System . out . println ( ( float ) ( x1 + x2 ) / 2 + ", " + 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int arr [ ] , int n , int x ) {	  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			      SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			    SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES				  SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES
--							      --							    --								  --
int findS ( int s ) {					      static int findS ( int s ) {				    public static int findS ( int s ) {				  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int n = 1 ;					      	for ( int n = 1 ;					      for ( int n = 1 ;						  
  sum < s ;						      	sum < s ;						      sum < s ;							  
  n ++ ) {						      	n ++ ) {						      n ++ ) {							  
    sum += n * n ;					      	  sum += n * n ;					    	sum += n * n ;						  
    if ( sum == s ) return n ;				      	  if ( sum == s ) return n ;				    	if ( sum == s ) return n ;				  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
public : int getSum ( int n ) {				      static int getSum ( int n ) {				    public static int getSum ( int n ) {			  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  while ( n != 0 ) {					      	while ( n != 0 ) {					      while ( n != 0 ) {					  
    sum = sum + n % 10 ;				      	  sum = sum + n % 10 ;					    	sum = sum + n % 10 ;					  
    n = n / 10 ;					      	  n = n / 10 ;						    	n = n / 10 ;						  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
void swap ( int * xp , int * yp ) {			      static void swap ( int [ ] xp , int [ ] yp ) {		    public static void swap ( int [ ] xp , int [ ] yp ) {	  error : Exception in thread "main" java.lang.Array
  * xp = * xp ^ * yp ;					      	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      xp [ 0 ] = xp [ 1 ] ^ yp [ 0 ] ;				  IndexOutOfBoundsException: Index 1 out of bounds f
  * yp = * xp ^ * yp ;					      	yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      yp [ 0 ] = xp [ 1 ] ^ yp [ 1 ] ;				  or length 1 	at SWAP_TWO_NUMBERS_WITHOUT_USING_TEM
  * xp = * xp ^ * yp ;					      	xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      xp [ 1 ] = xp [ 0 ] ^ yp [ 0 ] ;				  PORARY_VARIABLE.f_filled(SWAP_TWO_NUMBERS_WITHOUT_
}							      }								    }								  USING_TEMPORARY_VARIABLE.java:22) 	at SWAP_TWO_NUM
							      								    								  BERS_WITHOUT_USING_TEMPORARY_VARIABLE.main(SWAP_TW
							      								    								  O_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE.java:75
							      								    								  )
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
int count ( string s , char c ) {			      public static int count ( String s , char c ) {		    public static int count ( String s , char c ) {		  success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < s . length ( ) ;					      	i < s . length ( ) ;					      i < s . length ( ) ;					  
  i ++ ) if ( s [ i ] == c ) res ++ ;			      	i ++ ) {						      i ++ ) if ( s . charAt ( i ) == c ) res ++ ;		  
  return res ;						      	  if ( s . charAt ( i ) == c ) res ++ ;			      return res ;						  
}							      	}							    }								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
int largest ( int arr [ ] , int n ) {			      static int largest ( ) {					    public static int largest ( int arr [ ] , int n ) {		  script_not_found : None
  int i ;						      	int i ;							      int i ;							  
  int max = arr [ 0 ] ;					      	int max = arr [ 0 ] ;					      int max = arr [ 0 ] ;					  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i < n ;						      	i < arr . length ;					      i < n ;							  
  i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;	      	i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;		      i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;		  
  return max ;						      	return max ;						      return max ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
int getMissingNo ( int a [ ] , int n ) {		      static int getMissingNo ( int a [ ] , int n ) {		    public static int getMissingNo ( int a [ ] , int n ) {	  script_not_found : None
  int total = ( n + 1 ) * ( n + 2 ) / 2 ;		      	int i , total ;						      int total = ( n + 1 ) * ( n + 2 ) / 2 ;			  
  for ( int i = 0 ;					      	total = ( n + 1 ) * ( n + 2 ) / 2 ;			      for ( int i = 0 ;						  
  i < n ;						      	for ( i = 0 ;						      i < n ;							  
  i ++ ) total -= a [ i ] ;				      	i < n ;							      i ++ ) {							  
  return total ;					      	i ++ ) total -= a [ i ] ;				    	total -= a [ i ] ;					  
}							      	return total ;						      }								  
							      }								      return total ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
int decToBinary ( int n ) {				      public void decToBinary ( int n ) {			    public static int decToBinary ( int n ) {			  script_not_found : None
  for ( int i = 31 ;					      	for ( int i = 31 ;					      for ( int i = 31 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    int k = n >> i ;					      	  int k = n >> i ;					    	int k = n >> i ;					  
    if ( k & 1 ) cout << "1" ;				      	  if ( ( k & 1 ) > 0 ) System . out . print ( "1" ) ;	    	if ( k & 1 ) {						  
    else cout << "0" ;					      	  else System . out . print ( "0" ) ;			    	  System . out . println ( "1" ) ;			  
  }							      	}							    	}							  
}							      }								    	else {							  
							      								    	  System . out . println ( "0" ) ;			  
							      								    	}							  
							      								      }								  
							      								      return n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
int getMissingNo ( int a [ ] , int n ) {		      static int getMissingNo ( int a [ ] , int n ) {		    public static int getMissingNo ( int a [ ] , int n ) {	  success : None
  int i , total = 1 ;					      	int total = 1 ;						      int i , total = 1 ;					  
  for ( i = 2 ;						      	for ( int i = 2 ;					      for ( i = 2 ;						  
  i <= ( n + 1 ) ;					      	i <= ( n + 1 ) ;					      i <= ( n + 1 ) ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    total += i ;					      	  total += i ;						    	total += i ;						  
    total -= a [ i - 2 ] ;				      	  total -= a [ i - 2 ] ;				    	total -= a [ i - 2 ] ;					  
  }							      	}							      }								  
  return total ;					      	return total ;						      return total ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
int sumOfSeries ( int n ) {				      static int sumOfSeries ( int n ) {			    public static int sumOfSeries ( int n ) {			  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;	      	i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;	      i ++ ) {							  
  return sum ;						      	return sum ;						    	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;		  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
int smallest ( int x , int y , int z ) {		      static int smallest ( int x , int y , int z ) {		    public static int smallest ( int x , int y , int z ) {	  success : None
  int c = 0 ;						      	int c = 0 ;						      int c = 0 ;						  
  while ( x && y && z ) {				      	while ( x != 0 && y != 0 && z != 0 ) {			      while ( x > 0 && y > 0 && z > 0 ) {			  
    x -- ;						      	  x -- ;						    	x -- ;							  
    y -- ;						      	  y -- ;						    	y -- ;							  
    z -- ;						      	  z -- ;						    	z -- ;							  
    c ++ ;						      	  c ++ ;						    	c ++ ;							  
  }							      	}							      }								  
  return c ;						      	return c ;						      return c ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
bool isPowerOfTwo ( int n ) {				      static boolean isPowerOfTwo ( int n ) {			    public static boolean isPowerOfTwo ( int n ) {		  error : WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return false ;				      if ( n == 0 ) {						  A_NO_IS_POWER_OF_TWO.java:25: error: incompatible
  while ( n != 1 ) {					      	while ( n != 1 ) {					    	return 0 ;						  types: int cannot be converted to boolean	retu
    if ( n % 2 != 0 ) return 0 ;			      	  if ( n % 2 != 0 ) return false ;			      }								  rn 0 ;	    ^ WRITE_ONE_LINE_C_FUNCTION_TO_F
    n = n / 2 ;						      	  n = n / 2 ;						      while ( n != 1 ) {					  IND_WHETHER_A_NO_IS_POWER_OF_TWO.java:29: error: i
  }							      	}							    	if ( n % 2 != 0 ) {					  ncompatible types: int cannot be converted to bool
  return 1 ;						      	return true ;						    	  return 0 ;						  ean	    return 0 ;		    ^ WRITE_ONE_LINE
}							      }								    	}							  _C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TWO.j
							      								    	n = n / 2 ;						  ava:33: error: incompatible types: int cannot be c
							      								      }								  onverted to boolean	return 1 ;	    ^ 3 erro
							      								      return 1 ;						  rs
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
long long int findSum ( int n ) {			      static int findSum ( int n ) {				    public static long findSum ( int n ) {			  success : None
  long long int sum = 0 ;				      	int sum = 0 ;						      long sum = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = i ;				      	i ++ ) for ( int j = i ;				      i ++ ) for ( int j = i ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) sum = sum + i * j ;				      	j ++ ) sum = sum + i * j ;				      j ++ ) sum = sum + i * j ;				  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
bool isTriangular ( int num ) {				      static boolean isTriangular ( int num ) {			    public static boolean isTriangular ( int num ) {		  success : None
  if ( num < 0 ) return false ;				      	if ( num < 0 ) return false ;				      if ( num < 0 ) {						  
  int sum = 0 ;						      	int sum = 0 ;						    	return false ;						  
  for ( int n = 1 ;					      	for ( int n = 1 ;					      }								  
  sum <= num ;						      	sum <= num ;						      int sum = 0 ;						  
  n ++ ) {						      	n ++ ) {						      for ( int n = 1 ;						  
    sum = sum + n ;					      	  sum = sum + n ;					      sum <= num ;						  
    if ( sum == num ) return true ;			      	  if ( sum == num ) return true ;			      n ++ ) {							  
  }							      	}							    	sum = sum + n ;						  
  return false ;					      	return false ;						    	if ( sum == num ) {					  
}							      }								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
int findS ( int s ) {					      static int findS ( int s ) {				    public static int findS ( int s ) {				  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int n = 1 ;					      	for ( int n = 1 ;					      for ( int n = 1 ;						  
  sum < s ;						      	sum < s ;						      sum < s ;							  
  n ++ ) {						      	n ++ ) {						      n ++ ) {							  
    sum += n * n * n ;					      	  sum += n * n * n ;					    	sum += n * n * n ;					  
    if ( sum == s ) return n ;				      	  if ( sum == s ) return n ;				    	if ( sum == s ) return n ;				  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
int getOddOccurrence ( int ar [ ] , int ar_size ) {	      int getOddOccurrence ( int ar [ ] , int ar_size ) {	    public static int getOddOccurrence ( int [ ] ar , int arSize  success : None
  int res = 0 ;						      	int i ;							      int res = 0 ;						  
  for ( int i = 0 ;					      	int res = 0 ;						      for ( int i = 0 ;						  
  i < ar_size ;						      	for ( i = 0 ;						      i < arSize ;						  
  i ++ ) res = res ^ ar [ i ] ;				      	i < ar_size ;						      i ++ ) {							  
  return res ;						      	i ++ ) {						    	res = res ^ ar [ i ] ;					  
}							      	  res = res ^ ar [ i ] ;				      }								  
							      	}							      return res ;						  
							      	return res ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
long int evenFib ( int n ) {				      static long evenFib ( int n ) {				    public static long evenFib ( int n ) {			  script_not_found : None
  if ( n < 1 ) return n ;				      	if ( n < 1 ) return n ;					      if ( n < 1 ) return n ;					  
  if ( n == 1 ) return 2 ;				      	if ( n == 1 ) return 2 ;				      if ( n == 1 ) return 2 ;					  
  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;  	return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
public : float squareRoot ( float n ) {			      static float squareRoot ( float n ) {			    public static float squareRoot ( float n ) {		  error : SQUARE_ROOT_OF_A_PERFECT_SQUARE.java:28: e
  float x = n ;						      	float x = n ;						      float x = n ;						  rror: incompatible types: possible lossy conversio
  float y = 1 ;						      	float y = 1 ;						      float y = 1 ;						  n from double to float   float e = 0.000001 ;
  float e = 0.000001 ;					      	double e = 0.000001 ;					      float e = 0.000001 ;					  	  ^ 1 error
  while ( x - y > e ) {					      	while ( x - y > e ) {					      while ( x - y > e ) {					  
    x = ( x + y ) / 2 ;					      	  x = ( x + y ) / 2 ;					    	x = ( x + y ) / 2 ;					  
    y = n / x ;						      	  y = n / x ;						    	y = n / x ;						  
  }							      	}							      }								  
  return x ;						      	return x ;						      return x ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
bool isPerfectSquare ( int n ) {			      static boolean isPerfectSquare ( int n ) {		    public static boolean isPerfectSquare ( int n ) {		  success : None
  for ( int sum = 0 , i = 1 ;				      	for ( int sum = 0 , i = 1 ;				      for ( int sum = 0 , i = 1 ;				  
  sum < n ;						      	sum < n ;						      sum < n ;							  
  i += 2 ) {						      	i += 2 ) {						      i += 2 ) {						  
    sum += i ;						      	  sum += i ;						    	sum += i ;						  
    if ( sum == n ) return true ;			      	  if ( sum == n ) return true ;				    	if ( sum == n ) {					  
  }							      	}							    	  return true ;						  
  return false ;					      	return false ;						    	}							  
}							      }								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1
--							      --							    --								  --
int countDigits ( int a , int b ) {			      public static int countDigits ( int a , int b ) {		    public static int countDigits ( int a , int b ) {		  error : NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1.java:2
  if ( a == 0 || b == 0 ) return 1 ;			      	if ( a == 0 || b == 0 ) return 1 ;			      if ( a == 0 || b == 0 ) {					  3: error: incompatible types: possible lossy conve
  return floor ( log10 ( abs ( a ) ) + log10 ( abs ( b ) ) )  	return ( int ) Math . floor ( Math . log10 ( Math . abs ( a 	return 1 ;						  rsion from double to int   return Math . floor ( M
}							      }								      }								  ath . log10 ( Math . abs ( a ) ) + Math . log10 (
							      								      return Math . floor ( Math . log10 ( Math . abs ( a ) ) + M Math . abs ( b ) ) ) + 1 ;
							      								    }								  
							      								    								  			 ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
bool allCharactersSame ( string s ) {			      static boolean allCharactersSame ( String s ) {		    public static boolean allCharactersSame ( String s ) {	  success : None
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( s [ i ] != s [ 0 ] ) return false ;	      	i ++ ) if ( s . charAt ( i ) != s . charAt ( 0 ) ) return f   i ++ ) if ( s . charAt ( i ) != s . charAt ( 0 ) ) return f 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
bool isPower ( int x , int y ) {			      static boolean isPower ( int x , int y ) {		    public static boolean isPower ( int x , int y ) {		  error : CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMB
  int res1 = log ( y ) / log ( x ) ;			      	int res1 = ( int ) Math . log ( y ) / ( int ) Math . log (    int res1 = Math . log ( y ) / Math . log ( x ) ;		  ER_1.java:21: error: incompatible types: possible
  double res2 = log ( y ) / log ( x ) ;			      	double res2 = Math . log ( y ) / Math . log ( x ) ;	      double res2 = Math . log ( y ) / Math . log ( x ) ;	  lossy conversion from double to int	int res1 = M
  return ( res1 == res2 ) ;				      	return ( res1 == res2 ) ;				      return ( res1 == res2 ) ;					  ath . log ( y ) / Math . log ( x ) ;
}							      }								    }								  		   ^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
void reverse ( string str ) {				      void reverse ( String str ) {				    public static void reverse ( String str ) {			  script_not_found : None
  if ( str . size ( ) == 0 ) {				      	if ( ( str == null ) || ( str . length ( ) <= 1 ) ) System    if ( str . length ( ) == 0 ) {				  
    return ;						      	else {							    	return ;						  
  }							      	  System . out . print ( str . charAt ( str . length ( ) -    }								  
  reverse ( str . substr ( 1 ) ) ;			      	  reverse ( str . substring ( 0 , str . length ( ) - 1 ) )    reverse ( str . substring ( 1 ) ) ;			  
  cout << str [ 0 ] ;					      	}							      System . out . println ( str . charAt ( 0 ) ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
public : bool isPowerOfFour ( int n ) {			      static int isPowerOfFour ( int n ) {			    public static final boolean isPowerOfFour ( int n ) {	  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return 0 ;					  4_OR_NOT.java:24: error: incompatible types: int c
  while ( n != 1 ) {					      	while ( n != 1 ) {					      while ( n != 1 ) {					  annot be converted to boolean	  if ( n == 0 ) retu
    if ( n % 4 != 0 ) return 0 ;			      	  if ( n % 4 != 0 ) return 0 ;				    	if ( n % 4 != 0 ) return 0 ;				  rn 0 ;			^ FIND_WHETHER_A_GIV
    n = n / 4 ;						      	  n = n / 4 ;						    	n = n / 4 ;						  EN_NUMBER_IS_A_POWER_OF_4_OR_NOT.java:26: error: i
  }							      	}							      }								  ncompatible types: int cannot be converted to bool
  return 1 ;						      	return 1 ;						      return 1 ;						  ean	  if ( n % 4 != 0 ) return 0 ;
}							      }								    }								  		  ^ FIND_WHETHER_A_GIVEN_NUMBER_IS_A
							      								    								  _POWER_OF_4_OR_NOT.java:29: error: incompatible ty
							      								    								  pes: int cannot be converted to boolean   return 1
							      								    								   ;	      ^ FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POW
							      								    								  ER_OF_4_OR_NOT.java:48: error: incomparable types:
							      								    								   boolean and int	   if(f_filled(param0.get(i)
							      								    								  ) == f_gold(param0.get(i)))
							      								    								  	       ^ 4 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
int horner ( int poly [ ] , int n , int x ) {		      static int horner ( int poly [ ] , int n , int x ) {	    public static int horner ( int [ ] poly , int n , int x ) {	  success : None
  int result = poly [ 0 ] ;				      	int result = poly [ 0 ] ;				      int result = poly [ 0 ] ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) result = result * x + poly [ i ] ;		      	i ++ ) result = result * x + poly [ i ] ;		      i ++ ) {							  
  return result ;					      	return result ;						    	result = result * x + poly [ i ] ;			  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  error : SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_
  unsigned int p = 1 ;					      	int p = 1 ;						      int p = 1 ;						  TO_N_1.java:23: error: bad operand type int for un
  if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      	if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      if ( n > 0 && ! ( n & ( n - 1 ) ) ) return n ;		  ary operator '!'   if ( n > 0 && ! ( n & ( n - 1 )
  while ( p < n ) p <<= 1 ;				      	while ( p < n ) p <<= 1 ;				      while ( p < n ) {						   ) ) return n ;		  ^ 1 error
  return p ;						      	return p ;						    	p <<= 1 ;						  
}							      }								      }								  
							      								      return p ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
int spiralDiaSum ( int n ) {				      static int spiralDiaSum ( int n ) {			    public static int spiralDiaSum ( int n ) {			  script_not_found : None
  if ( n == 1 ) return 1 ;				      	if ( n == 1 ) return 1 ;				      if ( n == 1 ) return 1 ;					  
  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 	return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ;   return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
int cost ( int a [ ] , int n ) {			      static int cost ( int [ ] a , int n ) {			    public static int cost ( int a [ ] , int n ) {		  error : MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LA
  return ( n - 1 ) * ( * min_element ( a , a + n ) ) ;	      	int min = a [ 0 ] ;					      return ( n - 1 ) * ( * minElement ( a , n ) ) ;		  RGER_PAIRS.java:25: error: illegal start of expres
}							      	for ( int i = 1 ;					    }								  sion	 return ( n - 1 ) * ( * minElement ( a , n )
							      	i < a . length ;					    								   ) ;			      ^ 1 error
							      	i ++ ) {						    								  
							      	  if ( a [ i ] < min ) min = a [ i ] ;			    								  
							      	}							    								  
							      	return ( n - 1 ) * min ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
char first ( string str ) {				      static char first ( String str ) {			    public static char first ( String str ) {			  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) if ( isupper ( str [ i ] ) ) return str [ i ] ;      	i ++ ) if ( Character . isUpperCase ( str . charAt ( i ) )    i ++ ) if ( Character . isUpperCase ( str . charAt ( i ) )  
  return 0 ;						      	return 0 ;						      return 0 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
int Right_most_setbit ( int num ) {			      static int Right_most_setbit ( int num ) {		    public static int Right_most_setbit ( int num ) {		  script_not_found : None
  int pos = 1 ;						      	int pos = 1 ;						      int pos = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < INT_SIZE ;					      	i < INT_SIZE ;						      i < INT_SIZE ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( ! ( num & ( 1 << i ) ) ) pos ++ ;		      	  if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;		    	if ( ! ( num & ( 1 << i ) ) ) {				  
    else break ;					      	  else break ;						    	  pos ++ ;						  
  }							      	}							    	}							  
  return pos ;						      	return pos ;						    	else {							  
}							      }								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return pos ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
void findLarger ( int arr [ ] , int n ) {		      static void findLarger ( int arr [ ] , int n ) {		    public static void findLarger ( int [ ] arr , int n ) {	  script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i >= n / 2 ;						      	i >= n / 2 ;						      i >= n / 2 ;						  
  i -- ) cout << arr [ i ] << " " ;			      	i -- ) System . out . print ( arr [ i ] + " " ) ;	      i -- ) {							  
}							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
int playGame ( int arr [ ] , int n ) {			      public static int playGame ( int arr [ ] ) {		    public static int playGame ( int arr [ ] , int n ) {	  script_not_found : None
  unordered_set < int > hash ;				      	HashSet < Integer > set = new HashSet < > ( ) ;		      HashSet < Integer > hash = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i : arr ) set . add ( i ) ;			      for ( int i = 0 ;						  
  i < n ;						      	return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;		      i < n ;							  
  i ++ ) hash . insert ( arr [ i ] ) ;			      }								      i ++ ) {							  
  return ( hash . size ( ) % 2 == 0 ? 1 : 2 ) ;		      								    	hash . add ( arr [ i ] ) ;				  
}							      								      }								  
							      								      return ( hash . size ( ) % 2 == 0 ? 1 : 2 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
long long int yMod ( long long int y , long long int x ) {    static long yMod ( long y , long x ) {			    public static long yMod ( long y , long x ) {		  error : FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X.ja
  if ( log2 ( y ) < x ) return y ;			      	if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y   if ( log2 ( y ) < x ) return y ;				  va:21: error: cannot find symbol   if ( log2 ( y )
  if ( x > 63 ) return y ;				      	if ( x > 63 ) return y ;				      if ( x > 63 ) return y ;					   < x ) return y ;	   ^   symbol:	 method log2
  return ( y % ( 1 << x ) ) ;				      	return ( y % ( 1 << ( int ) x ) ) ;			      return ( y % ( 1 << x ) ) ;				  (long)   location: class FIND_VALUE_OF_Y_MOD_2_RAI
}							      }								    }								  SED_TO_POWER_X 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
int findMinZero ( int p ) {				      static int findMinZero ( int p ) {			    public static int findMinZero ( int p ) {			  success : None
  int first = 1 , second = 1 , number = 2 , next = 1 ;	      	int first = 1 , second = 1 , number = 2 , next = 1 ;	      int first = 1 , second = 1 , number = 2 , next = 1 ;	  
  while ( next ) {					      	while ( next > 0 ) {					      while ( next > 0 ) {					  
    next = ( first + second ) % p ;			      	  next = ( first + second ) % p ;			    	next = ( first + second ) % p ;				  
    first = second ;					      	  first = second ;					    	first = second ;					  
    second = next ;					      	  second = next ;					    	second = next ;						  
    number ++ ;						      	  number ++ ;						    	number ++ ;						  
  }							      	}							      }								  
  return number ;					      	return number ;						      return number ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS
--							      --							    --								  --
int countDigits ( int a , int b ) {			      static int countDigits ( int a , int b ) {		    public static int countDigits ( int a , int b ) {		  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int p = abs ( a * b ) ;				      	int p = Math . abs ( a * b ) ;				      int p = Math . abs ( a * b ) ;				  
  if ( p == 0 ) return 1 ;				      	if ( p == 0 ) return 1 ;				      if ( p == 0 ) return 1 ;					  
  while ( p > 0 ) {					      	while ( p > 0 ) {					      while ( p > 0 ) {						  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
    p = p / 10 ;					      	  p = p / 10 ;						    	p = p / 10 ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int arr [ ] , int n , int x ) {	  success : None
  int i ;						      	int i ;							      int i ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) {				    	if ( arr [ i ] == x ) return i ;			  
  }							      	    return i ;						      }								  
  return - 1 ;						      	  }							      return - 1 ;						  
}							      	}							    }								  
							      	return - 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
bool isPalindrome ( string str ) {			      static boolean isPalindrome ( String str ) {		    public static boolean isPalindrome ( String str ) {		  success : None
  int l = 0 ;						      	int l = 0 ;						      int l = 0 ;						  
  int h = str . length ( ) - 1 ;			      	int h = str . length ( ) - 1 ;				      int h = str . length ( ) - 1 ;				  
  while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return  	while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt    while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
void recursiveReverse ( string & str , int i = 0 ) {	      static void recursiveReverse ( char [ ] str , int i ) {	    public static void recursiveReverse ( String str , int i ) {  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ;					      int n = str . length ( ) ;				  
  if ( i == n / 2 ) return ;				      	if ( i == n / 2 ) return ;				      if ( i == n / 2 ) return ;				  
  swap ( str [ i ] , str [ n - i - 1 ] ) ;		      	swap ( str , i , n - i - 1 ) ;				      System . arraycopy ( str . toCharArray ( ) , i , str . toCh 
  recursiveReverse ( str , i + 1 ) ;			      	recursiveReverse ( str , i + 1 ) ;			      recursiveReverse ( str , i + 1 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
unsigned int nextPowerOf2 ( unsigned int n ) {		      static int nextPowerOf2 ( int n ) {			    public static int nextPowerOf2 ( int n ) {			  success : None
  n -- ;						      	n -- ;							      n -- ;							  
  n |= n >> 1 ;						      	n |= n >> 1 ;						      n |= n >> 1 ;						  
  n |= n >> 2 ;						      	n |= n >> 2 ;						      n |= n >> 2 ;						  
  n |= n >> 4 ;						      	n |= n >> 4 ;						      n |= n >> 4 ;						  
  n |= n >> 8 ;						      	n |= n >> 8 ;						      n |= n >> 8 ;						  
  n |= n >> 16 ;					      	n |= n >> 16 ;						      n |= n >> 16 ;						  
  n ++ ;						      	n ++ ;							      n ++ ;							  
  return n ;						      	return n ;						      return n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
int minSum ( int n ) {					      static int minSum ( int n ) {				    public static int minSum ( int n ) {			  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    sum += ( n % 10 ) ;					      	  sum += ( n % 10 ) ;					    	sum += ( n % 10 ) ;					  
    n /= 10 ;						      	  n /= 10 ;						    	n /= 10 ;						  
  }							      	}							      }								  
  if ( sum == 1 ) return 10 ;				      	if ( sum == 1 ) return 10 ;				      if ( sum == 1 ) {						  
  return sum ;						      	return sum ;						    	return 10 ;						  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
int find_extra_element_index ( int arrA [ ] , int arrB [ ] ,  static int find_extra_element_index ( int [ ] arrA , int [ ]  public static int findExtraElementIndex ( int arrA [ ] , int  script_not_found : None
  int extra_element = sum ( arrA , n ) - sum ( arrB , m ) ;   	int extra_element = sum ( arrA ) - sum ( arrB ) ;	      int extraElement = sum ( arrA , n ) - sum ( arrB , m ) ;	  
  return indexOf ( arrA , extra_element , n ) ;		      	return indexOf ( arrA , extra_element ) ;		      return indexOf ( arrA , extraElement , n ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
int countOccurrences ( int arr [ ] , int n , int x ) {	      static int countOccurrences ( int arr [ ] , int n , int x ) { public static int countOccurrences ( int arr [ ] , int n , in success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( x == arr [ i ] ) res ++ ;			      	i ++ ) if ( x == arr [ i ] ) res ++ ;			      i ++ ) if ( x == arr [ i ] ) res ++ ;			  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
int PowerOFPINnfactorial ( int n , int p ) {		      static int PowerOFPINnfactorial ( int n , int p ) {	    public static int PowerOFPINnfactorial ( int n , int p ) {	  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  int temp = p ;					      	for ( int i = 1 ;					      int temp = p ;						  
  while ( temp <= n ) {					      	i <= n ;						      while ( temp <= n ) {					  
    ans += n / temp ;					      	i ++ ) {						    	ans += n / temp ;					  
    temp = temp * p ;					      	  int count = 0 , temp = i ;				    	temp = temp * p ;					  
  }							      	  while ( temp % p == 0 ) {				      }								  
  return ans ;						      	    count ++ ;						      return ans ;						  
}							      	    temp = temp / p ;					    }								  
							      	  }							    								  
							      	  ans += count ;					    								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
int fib ( int n ) {					      int fib ( int n ) {					    public static int fib ( int n ) {				  script_not_found : None
  if ( lookup [ n ] == NIL ) {				      	if ( lookup [ n ] == NIL ) {				      if ( lookup [ n ] == NIL ) {				  
    if ( n <= 1 ) lookup [ n ] = n ;			      	  if ( n <= 1 ) lookup [ n ] = n ;			    	if ( n <= 1 ) {						  
    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	      	  else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	    	  lookup [ n ] = n ;					  
  }							      	}							    	}							  
  return lookup [ n ] ;					      	return lookup [ n ] ;					    	else {							  
}							      }								    	  lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	  
							      								    	}							  
							      								      }								  
							      								      return lookup [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
void rotate ( int arr [ ] , int n ) {			      static void rotate ( ) {					    public static void rotate ( int arr [ ] , int n ) {		  script_not_found : None
  int x = arr [ n - 1 ] , i ;				      	int x = arr [ arr . length - 1 ] , i ;			      int x = arr [ n - 1 ] , i ;				  
  for ( i = n - 1 ;					      	for ( i = arr . length - 1 ;				      for ( i = n - 1 ;						  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  i -- ) arr [ i ] = arr [ i - 1 ] ;			      	i -- ) arr [ i ] = arr [ i - 1 ] ;			      i -- ) {							  
  arr [ 0 ] = x ;					      	arr [ 0 ] = x ;						    	arr [ i ] = arr [ i - 1 ] ;				  
}							      }								      }								  
							      								      arr [ 0 ] = x ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
bool isDivBy9 ( int n ) {				      static boolean isDivBy9 ( int n ) {			    public static boolean isDivBy9 ( int n ) {			  success : None
  if ( n == 0 || n == 9 ) return true ;			      	if ( n == 0 || n == 9 ) return true ;			      if ( n == 0 || n == 9 ) {					  
  if ( n < 9 ) return false ;				      	if ( n < 9 ) return false ;				    	return true ;						  
  return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )  	return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )    }								  
}							      }								      if ( n < 9 ) {						  
							      								    	return false ;						  
							      								      }								  
							      								      return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
int check ( string str ) {				      static boolean check ( String str ) {			    public static int check ( String str ) {			  error : CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT.java:50
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  : error: incomparable types: int and boolean
  int digitSum = 0 ;					      	int digitSum = 0 ;					      int digitSum = 0 ;					     if(f_filled(param0.get(i)) == f_gold(param0.get
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  (i)))					   ^ 1 error
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) digitSum += ( str [ i ] - '0' ) ;		      	i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      i ++ ) {							  
  return ( digitSum % 9 == 0 ) ;			      	return ( digitSum % 9 == 0 ) ;				    	digitSum += ( str . charAt ( i ) - '0' ) ;		  
}							      }								      }								  
							      								      return ( digitSum % 9 == 0 ) ? 1 : 0 ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
double gcd ( double a , double b ) {			      static double gcd ( double a , double b ) {		    public static double gcd ( double a , double b ) {		  script_not_found : None
  if ( a < b ) return gcd ( b , a ) ;			      	if ( a < b ) return gcd ( b , a ) ;			      if ( a < b ) return gcd ( b , a ) ;			  
  if ( fabs ( b ) < 0.001 ) return a ;			      	if ( Math . abs ( b ) < 0.001 ) return a ;		      if ( Math . abs ( b ) < 0.001 ) return a ;		  
  else return ( gcd ( b , a - floor ( a / b ) * b ) ) ;	      	else return ( gcd ( b , a - Math . floor ( a / b ) * b ) )    else return ( gcd ( b , a - Math . floor ( a / b ) * b ) )  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
int sumBetweenTwoKth ( int arr [ ] , int n , int k1 , int k2  static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) public static int sumBetweenTwoKth ( int arr [ ] , int n , in script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  return accumulate ( arr + k1 , arr + k2 - 1 , 0 ) ;	      	int result = 0 ;					      return Arrays . binarySearch ( arr , k1 , k2 - 1 ) ;	  
}							      	for ( int i = k1 ;					    }								  
							      	i < k2 - 1 ;						    								  
							      	i ++ ) result += arr [ i ] ;				    								  
							      	return result ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS
--							      --							    --								  --
bool squareRootExists ( int n , int p ) {		      static boolean squareRootExists ( int n , int p ) {	    public static boolean squareRootExists ( int n , int p ) {	  success : None
  n = n % p ;						      	n = n % p ;						      n = n % p ;						  
  for ( int x = 2 ;					      	for ( int x = 2 ;					      for ( int x = 2 ;						  
  x < p ;						      	x < p ;							      x < p ;							  
  x ++ ) if ( ( x * x ) % p == n ) return true ;	      	x ++ ) if ( ( x * x ) % p == n ) return true ;		      x ++ ) if ( ( x * x ) % p == n ) return true ;		  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
int count ( int n , int x ) {				      static int count ( int n , int x ) {			    public static int count ( int n , int x ) {			  success : None
  int count = = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n && i <= x ;					      	i <= n && i <= x ;					      i <= n && i <= x ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( x / i <= n && x % i == 0 ) count ++ ;		      	  if ( x / i <= n && x % i == 0 ) count ++ ;		    	if ( x / i <= n && x % i == 0 ) {			  
  }							      	}							    	  count ++ ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
int selectRandom ( int x ) {				      static int selectRandom ( int x ) {			    public static int selectRandom ( int x ) {			  script_not_found : None
  static int res ;					      	count ++ ;						      final int res ;						  
  static int count = 0 ;				      	if ( count == 1 ) res = x ;				      final int count = 0 ;					  
  count ++ ;						      	else {							      count ++ ;						  
  if ( count == 1 ) res = x ;				      	  Random r = new Random ( ) ;				      if ( count == 1 ) {					  
  else {						      	  int i = r . nextInt ( count ) ;			    	res = x ;						  
    int i = rand ( ) % count ;				      	  if ( i == count - 1 ) res = x ;			      }								  
    if ( i == count - 1 ) res = x ;			      	}							      else {							  
  }							      	return res ;						    	final int i = Math . random ( ) % count ;		  
  return res ;						      }								    	if ( i == count - 1 ) {					  
}							      								    	  res = x ;						  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) {	      static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n )  public static int findExtra ( int arr1 [ ] , int arr2 [ ] , i success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;	      	i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;	      i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;		  
  return n ;						      	return n ;						      return n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
unsigned long int catalan ( unsigned int n ) {		      int catalan ( int n ) {					    public static long catalan ( int n ) {			  script_not_found : None
  if ( n <= 1 ) return 1 ;				      	int res = 0 ;						      if ( n <= 1 ) return 1 ;					  
  unsigned long int res = 0 ;				      	if ( n <= 1 ) {						      long res = 0 ;						  
  for ( int i = 0 ;					      	  return 1 ;						      for ( int i = 0 ;						  
  i < n ;						      	}							      i < n ;							  
  i ++ ) res += catalan ( i ) * catalan ( n - i - 1 ) ;	      	for ( int i = 0 ;					      i ++ ) {							  
  return res ;						      	i < n ;							    	res += catalan ( i ) * catalan ( n - i - 1 ) ;		  
}							      	i ++ ) {						      }								  
							      	  res += catalan ( i ) * catalan ( n - i - 1 ) ;	      return res ;						  
							      	}							    }								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
int fib ( int n ) {					      static int fib ( int n ) {				    public static int fib ( int n ) {				  script_not_found : None
  if ( n < 6 ) return f [ n ] ;				      	if ( n < 6 ) return f [ n ] ;				      if ( n < 6 ) return f [ n ] ;				  
  int t = 5 , fn = 5 ;					      	int t = 5 ;						      int t = 5 , fn = 5 ;					  
  while ( t < n ) {					      	int fn = 5 ;						      while ( t < n ) {						  
    fn = round ( fn * PHI ) ;				      	while ( t < n ) {					    	fn = Math . round ( fn * PHI ) ;			  
    t ++ ;						      	  fn = ( int ) Math . round ( fn * PHI ) ;		    	t ++ ;							  
  }							      	  t ++ ;						      }								  
  return fn ;						      	}							      return fn ;						  
}							      	return fn ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
bool isPrime ( int n , int i = 2 ) {			      static boolean isPrime ( int n , int i ) {		    public static boolean isPrime ( int n , int i = 2 ) {	  error : RECURSIVE_PROGRAM_PRIME_NUMBER.java:21: er
  if ( n <= 2 ) return ( n == 2 ) ? true : false ;	      	if ( n <= 2 ) return ( n == 2 ) ? true : false ;	      if ( n <= 2 ) {						  ror: ',', ')', or '[' expected public static boole
  if ( n % i == 0 ) return false ;			      	if ( n % i == 0 ) return false ;			    	return ( n == 2 ) ? true : false ;			  an f_filled ( int n , int i = 2 ) {
  if ( i * i > n ) return true ;			      	if ( i * i > n ) return true ;				      }								  				  ^ 1 error
  return isPrime ( n , i + 1 ) ;			      	return isPrime ( n , i + 1 ) ;				      if ( n % i == 0 ) {					  
}							      }								    	return false ;						  
							      								      }								  
							      								      if ( i * i > n ) {					  
							      								    	return true ;						  
							      								      }								  
							      								      return isPrime ( n , i + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
int numberOfPaths ( int m , int n ) {			      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  success : None
  int path = 1 ;					      	int path = 1 ;						      int path = 1 ;						  
  for ( int i = n ;					      	for ( int i = n ;					      for ( int i = n ;						  
  i < ( m + n - 1 ) ;					      	i < ( m + n - 1 ) ;					      i < ( m + n - 1 ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    path *= i ;						      	  path *= i ;						    	path *= i ;						  
    path /= ( i - n + 1 ) ;				      	  path /= ( i - n + 1 ) ;				    	path /= ( i - n + 1 ) ;					  
  }							      	}							      }								  
  return path ;						      	return path ;						      return path ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
int countRect ( int n ) {				      static int countRect ( int n ) {				    public static int countRect ( int n ) {			  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int length = 1 ;				      	for ( int length = 1 ;					      for ( int length = 1 ;					  
  length <= sqrt ( n ) ;				      	length <= Math . sqrt ( n ) ;				      length <= Math . sqrt ( n ) ;				  
  ++ length ) for ( int height = length ;		      	++ length ) for ( int height = length ;			      ++ length ) for ( int height = length ;			  
  height * length <= n ;				      	height * length <= n ;					      height * length <= n ;					  
  ++ height ) ans ++ ;					      	++ height ) ans ++ ;					      ++ height ) ans ++ ;					  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
int smallest ( int x , int y , int z ) {		      static int smallest ( int x , int y , int z ) {		    public static int smallest ( int x , int y , int z ) {	  error : SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARI
  if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z ;	      	if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;     if ( ! ( y / x ) . equals ( y ) ) return ( ! ( y / z ) . eq SON_OPERATORS_1.java:20: error: int cannot be dere
  return ( ! ( x / z ) ) ? x : z ;			      	return ( ( x / z ) != 1 ) ? x : z ;			      return ( ! ( x / z ) . equals ( x ) ) ? x : z ;		  ferenced   if ( ! ( y / x ) . equals ( y ) ) retur
}							      }								    }								  n ( ! ( y / z ) . equals ( y ) ) ? y : z ;
							      								    								  	      ^ SMALLEST_OF_THREE_INTEGERS_WITHOUT_C
							      								    								  OMPARISON_OPERATORS_1.java:20: error: int cannot b
							      								    								  e dereferenced   if ( ! ( y / x ) . equals ( y ) )
							      								    								   return ( ! ( y / z ) . equals ( y ) ) ? y : z ;
							      								    								  
							      								    								  	^ SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARI
							      								    								  SON_OPERATORS_1.java:21: error: int cannot be dere
							      								    								  ferenced   return ( ! ( x / z ) . equals ( x ) ) ?
							      								    								   x : z ;			  ^ 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
long long int countNonDecreasing ( int n ) {		      static long countNonDecreasing ( int n ) {		    public static long countNonDecreasing ( int n ) {		  success : None
  int N = 10 ;						      	int N = 10 ;						      int N = 10 ;						  
  long long count = 1 ;					      	long count = 1 ;					      long count = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    count *= ( N + i - 1 ) ;				      	  count *= ( N + i - 1 ) ;				    	count *= ( N + i - 1 ) ;				  
    count /= i ;					      	  count /= i ;						    	count /= i ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
double compute ( int a , int b ) {			      static double compute ( int a , int b ) {			    public static double compute ( int a , int b ) {		  success : None
  double AM , GM , HM ;					      	double AM , GM , HM ;					      double AM , GM , HM ;					  
  AM = ( a + b ) / 2 ;					      	AM = ( a + b ) / 2 ;					      AM = ( a + b ) / 2 ;					  
  GM = sqrt ( a * b ) ;					      	GM = Math . sqrt ( a * b ) ;				      GM = Math . sqrt ( a * b ) ;				  
  HM = ( GM * GM ) / AM ;				      	HM = ( GM * GM ) / AM ;					      HM = ( GM * GM ) / AM ;					  
  return HM ;						      	return HM ;						      return HM ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
int binomialCoeff ( int n , int k ) {			      static int binomialCoeff ( int n , int k ) {		    public static int binomialCoeff ( int n , int k ) {		  script_not_found : None
  if ( k == 0 || k == n ) return 1 ;			      	if ( k == 0 || k == n ) return 1 ;			      if ( k == 0 || k == n ) return 1 ;			  
  return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n  	return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n    return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
int answer_query ( int a [ ] , int n , int l , int r ) {      static int answer_query ( int a [ ] , int n , int l , int r ) public static int answerQuery ( int a [ ] , int n , int l , i success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = l ;					      	for ( int i = l ;					      for ( int i = l ;						  
  i < r ;						      	i < r ;							      i < r ;							  
  i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;	      	i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;	      i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;		  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
int findSum ( int n ) {					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
  n -- ;						      	n -- ;							      n -- ;							  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  sum += ( n * ( n + 1 ) ) / 2 ;			      	sum += ( n * ( n + 1 ) ) / 2 ;				      sum += ( n * ( n + 1 ) ) / 2 ;				  
  sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;	      	sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		      sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
int breakSum ( int n ) {				      static int breakSum ( int n ) {				    public static int breakSum ( int n ) {			  success : None
  if ( n == 0 || n == 1 ) return n ;			      	if ( n == 0 || n == 1 ) return n ;			      if ( n == 0 || n == 1 ) return n ;			  
  return max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 ) + br 	return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3   return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
bool isOneFlip ( string str ) {				      static boolean isOneFlip ( String str ) {			    public static boolean isOneFlip ( String str ) {		  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum += str [ i ] - '0' ;			      	i ++ ) sum += str . charAt ( i ) - '0' ;		      i ++ ) {							  
  return ( sum == n - 1 || sum == 1 ) ;			      	return ( sum == n - 1 || sum == 1 ) ;			    	sum += str . charAt ( i ) - '0' ;			  
}							      }								      }								  
							      								      return ( sum == n - 1 || sum == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
bool canMakeAllSame ( string str ) {			      static boolean canMakeAllSame ( String str ) {		    public static boolean canMakeAllSame ( String str ) {	  success : None
  int zeros = 0 , ones = 0 ;				      	int zeros = 0 , ones = 0 ;				      int zeros = 0 , ones = 0 ;				  
  for ( char ch : str ) ( ch == '0' ) ? ++ zeros : ++ ones ;  	for ( int i = 0 ;					      for ( char ch : str . toCharArray ( ) ) {			  
  return ( zeros == 1 || ones == 1 ) ;			      	i < str . length ( ) ;					    	if ( ch == '0' ) {					  
}							      	i ++ ) {						    	  ++ zeros ;						  
							      	  char ch = str . charAt ( i ) ;			    	}							  
							      	  if ( ch == '0' ) ++ zeros ;				    	else {							  
							      	  else ++ ones ;					    	  ++ ones ;						  
							      	}							    	}							  
							      	return ( zeros == 1 || ones == 1 ) ;			      }								  
							      }								      return ( zeros == 1 || ones == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
bool divisibleBy20 ( string num ) {			      static Boolean divisibleBy20 ( String num ) {		    public static boolean divisibleBy20 ( String num ) {	  script_not_found : None
  int lastTwoDigits = stoi ( num . substr ( num . length ( )  	int lastTwoDigits = Integer . parseInt ( num . substring (    int lastTwoDigits = Integer . parseInt ( num . substring (  
  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4  	return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4    return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
int findFrequency ( int arr [ ] , int n , int left , int righ public static int findFrequency ( int arr [ ] , int n , int l public static int findFrequency ( int arr [ ] , int n , int l script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = left - 1 ;				      	for ( int i = left - 1 ;				      for ( int i = left - 1 ;					  
  i <= right ;						      	i < right ;						      i <= right ;						  
  ++ i ) if ( arr [ i ] == element ) ++ count ;		      	++ i ) if ( arr [ i ] == element ) ++ count ;		      ++ i ) if ( arr [ i ] == element ) ++ count ;		  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
string decToBin ( int n ) {				      static String decToBin ( int n ) {			    public static String decToBin ( int n ) {			  error : DECIMAL_BINARY_CONVERSION_WITHOUT_USING_AR
  if ( n == 0 ) return "0" ;				      	if ( n == 0 ) return "0" ;				      if ( n == 0 ) return "0" ;				  ITHMETIC_OPERATORS.java:28: error: ';' expected
  string bin = "" ;					      	String bin = "" ;					      String bin = "" ;						    bin = ( ( n & 1 ) == 0 ) ? "0" : "1" ) + bin ;
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  					 ^ DECIMAL_B
    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;	      	  bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;		    	bin = ( ( n & 1 ) == 0 ) ? "0" : "1" ) + bin ;		  INARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATOR
    n >>= 1 ;						      	  n >>= 1 ;						    	n >>= 1 ;						  S.java:28: error: not a statement	bin = ( ( n
  }							      	}							      }								  & 1 ) == 0 ) ? "0" : "1" ) + bin ;
  return bin ;						      	return bin ;						      return bin ;						  				^ 2 errors
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
int countSubStr ( char str [ ] ) {			      int countSubStr ( char str [ ] , int n ) {		    public static int countSubStr ( char [ ] str ) {		  script_not_found : None
  int m = 0 ;						      	int m = 0 ;						      int m = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  str [ i ] != '\0' ;					      	i < n ;							      i < str . length ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == '1' ) m ++ ;			      	  if ( str [ i ] == '1' ) m ++ ;			    	if ( str [ i ] == '1' ) {				  
  }							      	}							    	  m ++ ;						  
  return m * ( m - 1 ) / 2 ;				      	return m * ( m - 1 ) / 2 ;				    	}							  
}							      }								      }								  
							      								      return m * ( m - 1 ) / 2 ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
char first ( string str , int i = 0 ) {			      static char first ( String str , int i ) {		    public static char first ( String str , int i ) {		  script_not_found : None
  if ( str [ i ] == '\0' ) return 0 ;			      	if ( str . charAt ( i ) == '\0' ) return 0 ;		      if ( str . length ( ) == 0 ) {				  
  if ( isupper ( str [ i ] ) ) return str [ i ] ;	      	if ( Character . isUpperCase ( str . charAt ( i ) ) ) retur 	return 0 ;						  
  return first ( str , i + 1 ) ;			      	return first ( str , i + 1 ) ;				      }								  
}							      }								      if ( Character . isUpperCase ( str . charAt ( i ) ) ) {	  
							      								    	return str . charAt ( i ) ;				  
							      								      }								  
							      								      return first ( str , i + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
bool isDivisible ( char str [ ] , int k ) {		      static boolean isDivisible ( String str , int k ) {	    public static boolean isDivisible ( String str , int k ) {	  script_not_found : None
  int n = strlen ( str ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int c = 0 ;						      	int c = 0 ;						      int c = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) if ( str [ n - i - 1 ] == '0' ) c ++ ;		      	i ++ ) if ( str . charAt ( n - i - 1 ) == '0' ) c ++ ;	      i ++ ) if ( str . charAt ( n - i - 1 ) == '0' ) c ++ ;	  
  return ( c == k ) ;					      	return ( c == k ) ;					      return ( c == k ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
void printSquares ( int n ) {				      static void printSquares ( int n ) {			    public static void printSquares ( int n ) {			  script_not_found : None
  int square = 0 , odd = 1 ;				      	int square = 0 , odd = 1 ;				      int square = 0 , odd = 1 ;				  
  for ( int x = 0 ;					      	for ( int x = 0 ;					      for ( int x = 0 ;						  
  x < n ;						      	x < n ;							      x < n ;							  
  x ++ ) {						      	x ++ ) {						      x ++ ) {							  
    cout << square << " " ;				      	  System . out . print ( square + " " ) ;		    	System . out . print ( square + " " ) ;			  
    square = square + odd ;				      	  square = square + odd ;				    	square = square + odd ;					  
    odd = odd + 2 ;					      	  odd = odd + 2 ;					    	odd = odd + 2 ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
public : int findStep ( int n ) {			      public static int findStep ( int n ) {			    public static int findStep ( int n ) {			  script_not_found : None
  if ( n == 1 || n == 0 ) return 1 ;			      	if ( n == 1 || n == 0 ) return 1 ;			      if ( n == 1 || n == 0 ) {					  
  else if ( n == 2 ) return 2 ;				      	else if ( n == 2 ) return 2 ;				    	return 1 ;						  
  else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS 	else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS   }								  
}							      }								      else if ( n == 2 ) {					  
							      								    	return 2 ;						  
							      								      }								  
							      								      else {							  
							      								    	return findStep ( n - 3 ) + findStep ( n - 2 ) + findStep 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
void kLargest ( int arr [ ] , int n , int k ) {		      public static void kLargest ( Integer [ ] arr , int k ) {	    public static void kLargest ( int [ ] arr , int n , int k ) { script_not_found : None
  sort ( arr , arr + n , greater < int > ( ) ) ;	      	Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;      Arrays . sort ( arr , n , new Comparator < Integer > ( ) {  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	public int compare ( Integer o1 , Integer o2 ) {	  
  i < k ;						      	i < k ;							    	  return o1 . compareTo ( o2 ) ;			  
  i ++ ) cout << arr [ i ] << " " ;			      	i ++ ) System . out . print ( arr [ i ] + " " ) ;	    	}							  
}							      }								      }								  
							      								      ) ;							  
							      								      for ( int i = 0 ;						  
							      								      i < k ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
double findMod ( double a , double b ) {		      static double findMod ( double a , double b ) {		    public static double findMod ( double a , double b ) {	  success : None
  double mod ;						      	if ( a < 0 ) a = - a ;					      double mod ;						  
  if ( a < 0 ) mod = - a ;				      	if ( b < 0 ) b = - b ;					      if ( a < 0 ) {						  
  else mod = a ;					      	double mod = a ;					    	mod = - a ;						  
  if ( b < 0 ) b = - b ;				      	while ( mod >= b ) mod = mod - b ;			      }								  
  while ( mod >= b ) mod = mod - b ;			      	if ( a < 0 ) return - mod ;				      else {							  
  if ( a < 0 ) return - mod ;				      	return mod ;						    	mod = a ;						  
  return mod ;						      }								      }								  
}							      								      if ( b < 0 ) {						  
							      								    	b = - b ;						  
							      								      }								  
							      								      while ( mod >= b ) {					  
							      								    	mod = mod - b ;						  
							      								      }								  
							      								      if ( a < 0 ) {						  
							      								    	return - mod ;						  
							      								      }								  
							      								      return mod ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
unsigned long long int int decimalToBinary ( int N ) {	      static int decimalToBinary ( int N ) {			    public static long long int decimalToBinary ( int N ) {	  error : PROGRAM_DECIMAL_BINARY_CONVERSION_2.java:2
  ull B_Number = 0 ;					      	int B_Number = 0 ;					      long B_Number = 0 ;					  7: error: <identifier> expected public static long
  int cnt = 0 ;						      	int cnt = 0 ;						      int cnt = 0 ;						   long int f_filled ( int N ) {		   ^
  while ( N != 0 ) {					      	while ( N != 0 ) {					      while ( N != 0 ) {					   PROGRAM_DECIMAL_BINARY_CONVERSION_2.java:27: erro
    int rem = N % 2 ;					      	  int rem = N % 2 ;					    	int rem = N % 2 ;					  r: <identifier> expected public static long long i
    ull c = pow ( 10 , cnt ) ;				      	  double c = Math . pow ( 10 , cnt ) ;			    	long c = Math . pow ( 10 , cnt ) ;			  nt f_filled ( int N ) {			 ^ 2
    B_Number += rem * c ;				      	  B_Number += rem * c ;					    	B_Number += rem * c ;					   errors
    N /= 2 ;						      	  N /= 2 ;						    	N /= 2 ;						  
    cnt ++ ;						      	  cnt ++ ;						    	cnt ++ ;						  
  }							      	}							      }								  
  return B_Number ;					      	return B_Number ;					      return B_Number ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
int maxProd ( int n ) {					      static int maxProd ( int n ) {				    public static int maxProd ( int n ) {			  success : None
  if ( n == 2 || n == 3 ) return ( n - 1 ) ;		      	if ( n == 2 || n == 3 ) return ( n - 1 ) ;		      if ( n == 2 || n == 3 ) return ( n - 1 ) ;		  
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  while ( n > 4 ) {					      	while ( n > 4 ) {					      while ( n > 4 ) {						  
    n -= 3 ;						      	  n -= 3 ;						    	n -= 3 ;						  
    res *= 3 ;						      	  res *= 3 ;						    	res *= 3 ;						  
  }							      	}							      }								  
  return ( n * res ) ;					      	return ( n * res ) ;					      return ( n * res ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
int findNth ( int n ) {					      public static int findNth ( int n ) {			    public static int findNth ( int n ) {			  success : identical to gold
  int nthElement = 19 + ( n - 1 ) * 9 ;			      	int nthElement = 19 + ( n - 1 ) * 9 ;			      int nthElement = 19 + ( n - 1 ) * 9 ;			  
  int outliersCount = ( int ) log10 ( nthElement ) - 1 ;      	int outliersCount = ( int ) Math . log10 ( nthElement ) - 1   int outliersCount = ( int ) Math . log10 ( nthElement ) - 1 
  nthElement += 9 * outliersCount ;			      	nthElement += 9 * outliersCount ;			      nthElement += 9 * outliersCount ;				  
  return nthElement ;					      	return nthElement ;					      return nthElement ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
string lexSmallest ( string a [ ] , int n ) {		      static String lexsmallest ( String a [ ] , int n ) {	    public static String lexSmallest ( String a [ ] , int n ) {	  script_not_found : None
  sort ( a , a + n , compare ) ;			      	sort ( a , n ) ;					      Arrays . sort ( a , 0 , n ) ;				  
  string answer = "" ;					      	String answer = "" ;					      String answer = "" ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) answer += a [ i ] ;				      	i ++ ) answer += a [ i ] ;				      i ++ ) {							  
  return answer ;					      	return answer ;						    	answer += a [ i ] ;					  
}							      }								      }								  
							      								      return answer ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
int firstFactorialDivisibleNumber ( int x ) {		      static int firstFactorialDivisibleNumber ( int x ) {	    public static int firstFactorialDivisibleNumber ( int x ) {	  success : None
  int i = 1 ;						      	int i = 1 ;						      int i = 1 ;						  
  int fact = 1 ;					      	int fact = 1 ;						      int fact = 1 ;						  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i < x ;						      	i < x ;							      i < x ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    fact = fact * i ;					      	  fact = fact * i ;					    	fact = fact * i ;					  
    if ( fact % x == 0 ) break ;			      	  if ( fact % x == 0 ) break ;				    	if ( fact % x == 0 ) {					  
  }							      	}							    	  break ;						  
  return i ;						      	return i ;						    	}							  
}							      }								      }								  
							      								      return i ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
int getInvCount ( int arr [ ] , int n ) {		      static int getInvCount ( int n ) {			    public static int getInvCount ( int arr [ ] , int n ) {	  script_not_found : None
  int inv_count = 0 ;					      	int inv_count = 0 ;					      int inv_count = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	      	j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	      j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	  
  return inv_count ;					      	return inv_count ;					      return inv_count ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
bool check ( int degree [ ] , int n ) {			      static boolean check ( int degree [ ] , int n ) {		    public static boolean check ( int degree [ ] , int n ) {	  success : None
  int deg_sum = 0 ;					      	int deg_sum = 0 ;					      int deg_sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) deg_sum += degree [ i ] ;			      	i ++ ) {						      i ++ ) {							  
  return ( 2 * ( n - 1 ) == deg_sum ) ;			      	  deg_sum += degree [ i ] ;				    	deg_sum += degree [ i ] ;				  
}							      	}							      }								  
							      	return ( 2 * ( n - 1 ) == deg_sum ) ;			      return ( 2 * ( n - 1 ) == deg_sum ) ;			  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
int countPairs ( int arr [ ] , int n ) {		      static int countPairs ( int arr [ ] , int n ) {		    public static int countPairs ( int arr [ ] , int n ) {	  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		      	j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		      j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	      REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	    REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE		  REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE
--							      --							    --								  --
string reversingString ( string str , int start , int end ) { static String reversingString ( char [ ] str , int start , in public static String reversingString ( String str , int start script_not_found : None
  while ( start < end ) {				      	while ( start < end ) {					      while ( start < end ) {					  
    str [ start ] ^= str [ end ] ;			      	  str [ start ] ^= str [ end ] ;			    	str [ start ] ^= str [ end ] ;				  
    str [ end ] ^= str [ start ] ;			      	  str [ end ] ^= str [ start ] ;			    	str [ end ] ^= str [ start ] ;				  
    str [ start ] ^= str [ end ] ;			      	  str [ start ] ^= str [ end ] ;			    	str [ start ] ^= str [ end ] ;				  
    ++ start ;						      	  ++ start ;						    	++ start ;						  
    -- end ;						      	  -- end ;						    	-- end ;						  
  }							      	}							      }								  
  return str ;						      	return String . valueOf ( str ) ;			      return str ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
int minimumSquare ( int a , int b ) {			      static int minimumSquare ( int a , int b ) {		    public static int minimumSquare ( int a , int b ) {		  script_not_found : None
  long long result = 0 , rem = 0 ;			      	int result = 0 , rem = 0 ;				      long result = 0 , rem = 0 ;				  
  if ( a < b ) swap ( a , b ) ;				      	if ( a < b ) swap ( a , b ) ;				      if ( a < b ) {						  
  while ( b > 0 ) {					      	while ( b > 0 ) {					    	swap ( a , b ) ;					  
    result += a / b ;					      	  result += a / b ;					      }								  
    long long rem = a % b ;				      	  rem = a % b ;						      while ( b > 0 ) {						  
    a = b ;						      	  a = b ;						    	result += a / b ;					  
    b = rem ;						      	  b = rem ;						    	long rem = a % b ;					  
  }							      	}							    	a = b ;							  
  return result ;					      	return result ;						    	b = rem ;						  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
int findDigits ( int n ) {				      static int findDigits ( int n ) {				    public static int findDigits ( int n ) {			  error : COUNT_DIGITS_FACTORIAL_SET_1.java:33: erro
  if ( n < 0 ) return 0 ;				      	if ( n < 0 ) return 0 ;					      if ( n < 0 ) return 0 ;					  r: incompatible types: possible lossy conversion f
  if ( n <= 1 ) return 1 ;				      	if ( n <= 1 ) return 1 ;				      if ( n <= 1 ) return 1 ;					  rom double to int   return Math . floor ( digits )
  double digits = 0 ;					      	double digits = 0 ;					      double digits = 0 ;					   + 1 ;				  ^ 1 error
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) digits += log10 ( i ) ;			      	i ++ ) digits += Math . log10 ( i ) ;			      i ++ ) {							  
  return floor ( digits ) + 1 ;				      	return ( int ) ( Math . floor ( digits ) ) + 1 ;	    	digits += Math . log10 ( i ) ;				  
}							      }								      }								  
							      								      return Math . floor ( digits ) + 1 ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
int middleOfThree ( int a , int b , int c ) {		      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  success : None
  int x = a - b ;					      	int x = a - b ;						      int x = a - b ;						  
  int y = b - c ;					      	int y = b - c ;						      int y = b - c ;						  
  int z = a - c ;					      	int z = a - c ;						      int z = a - c ;						  
  if ( x * y > 0 ) return b ;				      	if ( x * y > 0 ) return b ;				      if ( x * y > 0 ) {					  
  else if ( x * z > 0 ) return c ;			      	else if ( x * z > 0 ) return c ;			    	return b ;						  
  else return a ;					      	else return a ;						      }								  
}							      }								      else if ( x * z > 0 ) {					  
							      								    	return c ;						  
							      								      }								  
							      								      else {							  
							      								    	return a ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
void swapDiagonal ( int matrix [ ] [ N ] ) {		      static void swapDiagonal ( int matrix [ ] [ ] ) {		    public static void swapDiagonal ( int [ ] [ ] matrix ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < matrix . length ;					  
  i ++ ) swap ( matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 	i ++ ) {						      i ++ ) {							  
}							      	  int temp = matrix [ i ] [ i ] ;			    	swap ( matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] )  
							      	  matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;	      }								  
							      	  matrix [ i ] [ N - i - 1 ] = temp ;			    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION     DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	    DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
int lastPosition ( int n , int m , int k ) {		      static int lastPosition ( int n , int m , int k ) {	    public static int lastPosition ( int n , int m , int k ) {	  success : None
  if ( m <= n - k + 1 ) return m + k - 1 ;		      	if ( m <= n - k + 1 ) return m + k - 1 ;		      if ( m <= n - k + 1 ) return m + k - 1 ;			  
  m = m - ( n - k + 1 ) ;				      	m = m - ( n - k + 1 ) ;					      m = m - ( n - k + 1 ) ;					  
  return ( m % n == 0 ) ? n : ( m % n ) ;		      	return ( m % n == 0 ) ? n : ( m % n ) ;			      return ( m % n == 0 ) ? n : ( m % n ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
int findIndex ( int n ) {				      static int findIndex ( int n ) {				    public static int findIndex ( int n ) {			  success : None
  if ( n <= 1 ) return n ;				      	if ( n <= 1 ) return n ;				      if ( n <= 1 ) return n ;					  
  int a = 0 , b = 1 , c = 1 ;				      	int a = 0 , b = 1 , c = 1 ;				      int a = 0 , b = 1 , c = 1 ;				  
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  while ( c < n ) {					      	while ( c < n ) {					      while ( c < n ) {						  
    c = a + b ;						      	  c = a + b ;						    	c = a + b ;						  
    res ++ ;						      	  res ++ ;						    	res ++ ;						  
    a = b ;						      	  a = b ;						    	a = b ;							  
    b = c ;						      	  b = c ;						    	b = c ;							  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
int findRotations ( string str ) {			      static int findRotations ( String str ) {			    public static int findRotations ( String str ) {		  success : None
  string tmp = str + str ;				      	String tmp = str + str ;				      String tmp = str + str ;					  
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    string substring = tmp . substr ( i , str . size ( ) ) ;  	  String substring = tmp . substring ( i , str . length ( ) 	String substring = tmp . substring ( i , str . length ( ) 
    if ( str == substring ) return i ;			      	  if ( str == substring ) return i ;			    	if ( str . equals ( substring ) ) {			  
  }							      	}							    	  return i ;						  
  return n ;						      	return n ;						    	}							  
}							      }								      }								  
							      								      return n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
void transpose ( int A [ ] [ N ] , int B [ ] [ N ] ) {	      static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {	    public static void transpose ( int A [ ] [ ] , int B [ ] [ ]  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      i ++ ) for ( j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;		      	j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			      j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
int countSquares ( int a , int b ) {			      static int countSquares ( int a , int b ) {		    public static int countSquares ( int a , int b ) {		  success : None
  int cnt = 0 ;						      	int cnt = 0 ;						      int cnt = 0 ;						  
  for ( int i = a ;					      	for ( int i = a ;					      for ( int i = a ;						  
  i <= b ;						      	i <= b ;						      i <= b ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  j * j <= i ;						      	j * j <= i ;						      j * j <= i ;						  
  j ++ ) if ( j * j == i ) cnt ++ ;			      	j ++ ) if ( j * j == i ) cnt ++ ;			      j ++ ) if ( j * j == i ) cnt ++ ;				  
  return cnt ;						      	return cnt ;						      return cnt ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_OCTAL_DECIMAL_CONVERSION			      PROGRAM_OCTAL_DECIMAL_CONVERSION				    PROGRAM_OCTAL_DECIMAL_CONVERSION				  PROGRAM_OCTAL_DECIMAL_CONVERSION
--							      --							    --								  --
int octalToDecimal ( int n ) {				      static int octalToDecimal ( int n ) {			    public static int octalToDecimal ( int n ) {		  success : None
  int num = n ;						      	int num = n ;						      int num = n ;						  
  int dec_value = 0 ;					      	int dec_value = 0 ;					      int decValue = 0 ;					  
  int base = 1 ;					      	int base = 1 ;						      int base = 1 ;						  
  int temp = num ;					      	int temp = num ;					      int temp = num ;						  
  while ( temp ) {					      	while ( temp > 0 ) {					      while ( temp > 0 ) {					  
    int last_digit = temp % 10 ;			      	  int last_digit = temp % 10 ;				    	int lastDigit = temp % 10 ;				  
    temp = temp / 10 ;					      	  temp = temp / 10 ;					    	temp = temp / 10 ;					  
    dec_value += last_digit * base ;			      	  dec_value += last_digit * base ;			    	decValue += lastDigit * base ;				  
    base = base * 8 ;					      	  base = base * 8 ;					    	base = base * 8 ;					  
  }							      	}							      }								  
  return dec_value ;					      	return dec_value ;					      return decValue ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
bool arraySortedOrNot ( int arr [ ] , int n ) {		      static boolean arraySortedOrNot ( int arr [ ] , int n ) {	    public static boolean arraySortedOrNot ( int arr [ ] , int n  success : None
  if ( n == 0 || n == 1 ) return true ;			      	if ( n == 0 || n == 1 ) return true ;			      if ( n == 0 || n == 1 ) {					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	return true ;						  
  i < n ;						      	i < n ;							      }								  
  i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;      	i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;	      for ( int i = 1 ;						  
  return true ;						      	return true ;						      i < n ;							  
}							      }								      i ++ ) {							  
							      								    	if ( arr [ i - 1 ] > arr [ i ] ) {			  
							      								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
double arcLength ( double diameter , double angle ) {	      static double arcLength ( double diameter , double angle ) {  public static double arcLength ( double diameter , double ang script_not_found : None
  double pi = 22.0 / 7.0 ;				      	double pi = 22.0 / 7.0 ;				      double pi = 22.0 / 7.0 ;					  
  double arc ;						      	double arc ;						      double arc ;						  
  if ( angle >= 360 ) {					      	if ( angle >= 360 ) {					      if ( angle >= 360 ) {					  
    cout << "Angle cannot" , " be formed" ;		      	  System . out . println ( "Angle cannot" + " be formed" )  	System . out . println ( "Angle cannot" + " be formed" )  
    return 0 ;						      	  return 0 ;						    	return 0 ;						  
  }							      	}							      }								  
  else {						      	else {							      else {							  
    arc = ( pi * diameter ) * ( angle / 360.0 ) ;	      	  arc = ( pi * diameter ) * ( angle / 360.0 ) ;		    	arc = ( pi * diameter ) * ( angle / 360.0 ) ;		  
    return arc ;					      	  return arc ;						    	return arc ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
void printSquares ( int n ) {				      static void printSquares ( int n ) {			    public static void printSquares ( int n ) {			  script_not_found : None
  int square = 0 , prev_x = 0 ;				      	int square = 0 , prev_x = 0 ;				      int square = 0 , prevX = 0 ;				  
  for ( int x = 0 ;					      	for ( int x = 0 ;					      for ( int x = 0 ;						  
  x < n ;						      	x < n ;							      x < n ;							  
  x ++ ) {						      	x ++ ) {						      x ++ ) {							  
    square = ( square + x + prev_x ) ;			      	  square = ( square + x + prev_x ) ;			    	square = ( square + x + prevX ) ;			  
    cout << square << " " ;				      	  System . out . print ( square + " " ) ;		    	System . out . print ( square + " " ) ;			  
    prev_x = x ;					      	  prev_x = x ;						    	prevX = x ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1	      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1
--							      --							    --								  --
long exponentiation ( long base , long exp ) {		      static long exponentiation ( long base , long exp ) {	    public static long exponentiation ( long base , long exp ) {  script_not_found : None
  long t = 1L ;						      	long t = 1L ;						      long t = 1L ;						  
  while ( exp > 0 ) {					      	while ( exp > 0 ) {					      while ( exp > 0 ) {					  
    if ( exp % 2 != 0 ) t = ( t * base ) % N ;		      	  if ( exp % 2 != 0 ) t = ( t * base ) % N ;		    	if ( exp % 2 != 0 ) {					  
    base = ( base * base ) % N ;			      	  base = ( base * base ) % N ;				    	  t = ( t * base ) % N ;				  
    exp /= 2 ;						      	  exp /= 2 ;						    	}							  
  }							      	}							    	base = ( base * base ) % N ;				  
  return t % N ;					      	return t % N ;						    	exp /= 2 ;						  
}							      }								      }								  
							      								      return t % N ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
int countSolutions ( int n ) {				      static int countSolutions ( int n ) {			    public static int countSolutions ( int n ) {		  success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int x = 0 ;					      	for ( int x = 0 ;					      for ( int x = 0 ;						  
  x * x < n ;						      	x * x < n ;						      x * x < n ;						  
  x ++ ) for ( int y = 0 ;				      	x ++ ) for ( int y = 0 ;				      x ++ ) for ( int y = 0 ;					  
  x * x + y * y < n ;					      	x * x + y * y < n ;					      x * x + y * y < n ;					  
  y ++ ) res ++ ;					      	y ++ ) res ++ ;						      y ++ ) res ++ ;						  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
int remainder ( string str ) {				      static int remainder ( String str ) {			    public static int remainder ( String str ) {		  success : None
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  
  int num , rem = 0 ;					      	int num , rem = 0 ;					      int num = 0 , rem = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < len ;						      	i < len ;						      i < len ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    num = rem * 10 + ( str [ i ] - '0' ) ;		      	  num = rem * 10 + ( str . charAt ( i ) - '0' ) ;	    	num = rem * 10 + ( str . charAt ( i ) - '0' ) ;		  
    rem = num % 11 ;					      	  rem = num % 11 ;					    	rem = num % 11 ;					  
  }							      	}							      }								  
  return rem ;						      	return rem ;						      return rem ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
int sumNodes ( int l ) {				      static double sumNodes ( int l ) {			    public static int sumNodes ( int l ) {			  error : FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
  int leafNodeCount = pow ( 2 , l - 1 ) ;		      	double leafNodeCount = Math . pow ( 2 , l - 1 ) ;	      int leafNodeCount = Math . pow ( 2 , l - 1 ) ;		  .java:23: error: incompatible types: possible loss
  int sumLastLevel = 0 ;				      	double sumLastLevel = 0 ;				      int sumLastLevel = 0 ;					  y conversion from double to int   int leafNodeCoun
  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /  	sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /    sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /  t = Math . pow ( 2 , l - 1 ) ;
  int sum = sumLastLevel * l ;				      	double sum = sumLastLevel * l ;				      int sum = sumLastLevel * l ;				  		^ 1 error
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
bool isInorder ( int arr [ ] , int n ) {		      static boolean isInorder ( int [ ] arr , int n ) {	    public static boolean isInorder ( int arr [ ] , int n ) {	  success : None
  if ( n == 0 || n == 1 ) return true ;			      	if ( n == 0 || n == 1 ) {				      if ( n == 0 || n == 1 ) return true ;			  
  for ( int i = 1 ;					      	  return true ;						      for ( int i = 1 ;						  
  i < n ;						      	}							      i < n ;							  
  i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;      	for ( int i = 1 ;					      i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;	  
  return true ;						      	i < n ;							      return true ;						  
}							      	i ++ ) {						    }								  
							      	  if ( arr [ i - 1 ] > arr [ i ] ) {			    								  
							      	    return false ;					    								  
							      	  }							    								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
int minTime ( int arr [ ] , int n , int m ) {		      static int minTime ( int [ ] arr , int n , int m ) {	    public static int minTime ( int arr [ ] , int n , int m ) {	  script_not_found : None
  int t = 0 ;						      	int t = 0 ;						      int t = 0 ;						  
  while ( 1 ) {						      	while ( true ) {					      while ( 1 ) {						  
    int items = 0 ;					      	  int items = 0 ;					    	int items = 0 ;						  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) items += ( t / arr [ i ] ) ;			      	  i ++ ) items += ( t / arr [ i ] ) ;			    	i ++ ) {						  
    if ( items >= m ) return t ;			      	  if ( items >= m ) return t ;				    	  items += ( t / arr [ i ] ) ;				  
    t ++ ;						      	  t ++ ;						    	}							  
  }							      	}							    	if ( items >= m ) {					  
}							      }								    	  return t ;						  
							      								    	}							  
							      								    	t ++ ;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
int countInRange ( int arr [ ] , int n , int x , int y ) {    static int countInRange ( int arr [ ] , int n , int x , int y public static int countInRange ( int arr [ ] , int n , int x  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;	      	  if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;	    	if ( arr [ i ] >= x && arr [ i ] <= y ) {		  
  }							      	}							    	  count ++ ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
int countCommon ( int mat [ ] [ MAX ] , int n ) {	      static int countCommon ( int mat [ ] [ ] , int n ) {	    public static int countCommon ( int [ ] mat , int n ) {	  error : ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQU
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  ARE_MATRIX.java:26: error: array required, but int
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						   found   i ++ ) if ( mat [ i ] == mat [ i ] [ n -
  i < n ;						      	i < n ;							      i < n ;							  i - 1 ] ) res ++ ;
  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re 	i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re   i ++ ) if ( mat [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ; 	^ ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQU
  return res ;						      	return res ;						      return res ;						  ARE_MATRIX.java:57: error: incompatible types: int
}							      }								    }								  [][] cannot be converted to int[]	    if(f_fil
							      								    								  led(param0.get(i),param1.get(i)) == f_gold(param0.
							      								    								  get(i),param1.get(i)))
							      								    								     ^ Note: Some messages have been simplified; rec
							      								    								  ompile with -Xdiags:verbose to get full output 2 e
							      								    								  rrors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET
--							      --							    --								  --
int minRevolutions ( double r , int x1 , int y1 , int x2 , in static double minRevolutions ( double r , int x1 , int y1 , i public static int minRevolutions ( double r , int x1 , int y1 script_not_found : None
  double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 	double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 -   double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - 
  return ceil ( d / ( 2 * r ) ) ;			      	return Math . ceil ( d / ( 2 * r ) ) ;			      return Math . ceil ( d / ( 2 * r ) ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
bool checkcircle ( int r , int R , int r1 , int x1 , int y1 ) public static boolean checkcircle ( int r , int R , int r1 ,  public static boolean checkcircle ( int r , int R , int r1 ,  error : CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_
  int dis = sqrt ( x1 * x1 + y1 * y1 ) ;		      	int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;	      int dis = Math . sqrt ( x1 * x1 + y1 * y1 ) ;		  RING_FORMED_TWO_CONCENTRIC_CIRCLES.java:20: error:
  return ( dis - r1 >= R && dis + r1 <= r ) ;		      	return ( dis - r1 >= R && dis + r1 <= r ) ;		      return ( dis - r1 >= R && dis + r1 <= r ) ;		   incompatible types: possible lossy conversion fro
}							      }								    }								  m double to int   int dis = Math . sqrt ( x1 * x1
							      								    								  + y1 * y1 ) ;				^ 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
void query ( char s [ ] , int i , int j ) {		      static void query ( String s , int i , int j ) {		    public static void query ( char [ ] s , int i , int j ) {	  script_not_found : None
  int n = strlen ( s ) ;				      	int n = s . length ( ) ;				      int n = s . length ;					  
  i %= n ;						      	i %= n ;						      i %= n ;							  
  j %= n ;						      	j %= n ;						      j %= n ;							  
  ( s [ i ] == s [ j ] ) ? ( cout << "Yes" << endl ) : ( cout 	if ( s . charAt ( i ) == s . charAt ( j ) ) System . out .    ( s [ i ] == s [ j ] ) ? ( System . out . println ( "Yes" ) 
}							      	else System . out . println ( "No" ) ;			    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
bool isSymmetric ( int mat [ ] [ MAX ] , int N ) {	      static boolean isSymmetric ( int mat [ ] [ ] , int N ) {	    public static boolean isSymmetric ( int mat [ ] [ ] , int N ) success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal 	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal   j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
double maxArea ( double a , double b , double c , double d )  static double maxArea ( double a , double b , double c , doub public static double maxArea ( double a , double b , double c script_not_found : None
  double semiperimeter = ( a + b + c + d ) / 2 ;	      	double semiperimeter = ( a + b + c + d ) / 2 ;		      double semiperimeter = ( a + b + c + d ) / 2 ;		  
  return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) 	return Math . sqrt ( ( semiperimeter - a ) * ( semiperimete   return Math . sqrt ( ( semiperimeter - a ) * ( semiperimete 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS				      BREAK_NUMBER_THREE_PARTS					    BREAK_NUMBER_THREE_PARTS					  BREAK_NUMBER_THREE_PARTS
--							      --							    --								  --
ll count_of_ways ( ll n ) {				      static long count_of_ways ( long n ) {			    public static long countOfWays ( long n ) {			  success : None
  ll count = 0 ;					      	long count = 0 ;					      long count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) for ( int k = 0 ;				      	j ++ ) for ( int k = 0 ;				      j ++ ) for ( int k = 0 ;					  
  k <= n ;						      	k <= n ;						      k <= n ;							  
  k ++ ) if ( i + j + k == n ) count ++ ;		      	k ++ ) if ( i + j + k == n ) count ++ ;			      k ++ ) if ( i + j + k == n ) count ++ ;			  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
int isDivisibleBy7 ( int num ) {			      static boolean isDivisibleBy7 ( int num ) {		    public static int isDivisibleBy7 ( int num ) {		  error : DIVISIBILITY_BY_7.java:44: error: incompar
  if ( num < 0 ) return isDivisibleBy7 ( - num ) ;	      	if ( num < 0 ) return isDivisibleBy7 ( - num ) ;	      if ( num < 0 ) return isDivisibleBy7 ( - num ) ;		  able types: int and boolean	      if(f_filled(pa
  if ( num == 0 || num == 7 ) return 1 ;		      	if ( num == 0 || num == 7 ) return true ;		      if ( num == 0 || num == 7 ) return 1 ;			  ram0.get(i)) == f_gold(param0.get(i)))
  if ( num < 10 ) return 0 ;				      	if ( num < 10 ) return false ;				      if ( num < 10 ) return 0 ;				  			  ^ 1 error
  return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1 	return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1   return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
bool isPossibleTriangle ( int arr [ ] , int N ) {	      static boolean isPossibleTriangle ( int [ ] arr , int N ) {   public static boolean isPossibleTriangle ( int arr [ ] , int  success : None
  if ( N < 3 ) return false ;				      	if ( N < 3 ) return false ;				      if ( N < 3 ) return false ;				  
  sort ( arr , arr + N ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N - 2 ;						      	i < N - 2 ;						      i < N - 2 ;						  
  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret 	i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret   i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret 
}							      	return false ;						      return false ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
long long int findSum ( int n ) {			      static int findSum ( int n ) {				    public static long findSum ( int n ) {			  success : None
  long long int multiTerms = n * ( n + 1 ) / 2 ;	      	int multiTerms = n * ( n + 1 ) / 2 ;			      long multiTerms = n * ( n + 1 ) / 2 ;			  
  long long int sum = multiTerms ;			      	int sum = multiTerms ;					      long sum = multiTerms ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    multiTerms = multiTerms - ( i - 1 ) ;		      	  multiTerms = multiTerms - ( i - 1 ) ;			    	multiTerms = multiTerms - ( i - 1 ) ;			  
    sum = sum + multiTerms * i ;			      	  sum = sum + multiTerms * i ;				    	sum = sum + multiTerms * i ;				  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {		      static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {	    public static boolean isDiagonalMatrix ( int [ ] [ ] mat ) {  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 	j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return   j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
int minXOR ( int arr [ ] , int n ) {			      static int minXOR ( int arr [ ] , int n ) {		    public static int minXOR ( int arr [ ] , int n ) {		  success : None
  int min_xor = INT_MAX ;				      	int min_xor = Integer . MAX_VALUE ;			      int minXor = Integer . MAX_VALUE ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) min_xor = min ( min_xor , arr [ i ] ^ arr [ j ] ) ;  	j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j   j ++ ) minXor = Math . min ( minXor , arr [ i ] ^ arr [ j ] 
  return min_xor ;					      	return min_xor ;					      return minXor ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
void rotateMatrix ( int mat [ ] [ N ] ) {		      static void rotateMatrix ( int mat [ ] [ ] ) {		    public static void rotateMatrix ( int mat [ ] [ ] ) {	  script_not_found : None
  for ( int i = N - 1 ;					      	for ( int i = N - 1 ;					      for ( int i = N - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    for ( int j = N - 1 ;				      	  for ( int j = N - 1 ;					    	for ( int j = N - 1 ;					  
    j >= 0 ;						      	  j >= 0 ;						    	j >= 0 ;						  
    j -- ) printf ( "%d " , mat [ i ] [ j ] ) ;		      	  j -- ) System . out . print ( mat [ i ] [ j ] + " " ) ;   	j -- ) {						  
    printf ( "\n" ) ;					      	  System . out . println ( ) ;				    	  System . out . print ( mat [ i ] [ j ] + " " ) ;	  
  }							      	}							    	}							  
}							      }								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
int leonardo ( int n ) {				      static int leonardo ( int n ) {				    public static int leonardo ( int n ) {			  success : None
  int dp [ n + 1 ] ;					      	int dp [ ] = new int [ n + 1 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  
  dp [ 0 ] = dp [ 1 ] = 1 ;				      	dp [ 0 ] = dp [ 1 ] = 1 ;				      dp [ 0 ] = dp [ 1 ] = 1 ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;	      	i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;	      i ++ ) {							  
  return dp [ n ] ;					      	return dp [ n ] ;					    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;		  
}							      }								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
int eulerian ( int n , int m ) {			      public static int eulerian ( int n , int m ) {		    public static int eulerian ( int n , int m ) {		  script_not_found : None
  if ( m >= n || n == 0 ) return 0 ;			      	if ( m >= n || n == 0 ) return 0 ;			      if ( m >= n || n == 0 ) return 0 ;			  
  if ( m == 0 ) return 1 ;				      	if ( m == 0 ) return 1 ;				      if ( m == 0 ) return 1 ;					  
  return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) * 	return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) *   return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) * 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			      NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			    NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			  NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
int findPosition ( int k , int n ) {			      public static int findPosition ( int k , int n ) {	    public static int findPosition ( int k , int n ) {		  error : NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES.java:
  unsigned long long int f1 = 0 , f2 = 1 , f3 ;		      	long f1 = 0 , f2 = 1 , f3 ;				      long f1 = 0 , f2 = 1 , f3 ;				  39: error: ';' expected   return n * n * n * n * n
  for ( int i = 2 ;					      	int i = 2 ;						      for ( int i = 2 ;						   * n * n * n * n * n * n * n * n * n * n * n * n *
  i <= MAX ;						      	while ( i != 0 ) {					      i <= MAX ;						   n * n * n * n * n * n * n * n * n * n * n * n * n
  i ++ ) {						      	  f3 = f1 + f2 ;					      i ++ ) {							   * n * n * n * n * n * n * n * n * n * n * n * n *
    f3 = f1 + f2 ;					      	  f1 = f2 ;						    	f3 = f1 + f2 ;						   n * n * n * n * n * n * n * n * n * n * n * n * n
    f1 = f2 ;						      	  f2 = f3 ;						    	f1 = f2 ;						   * n * n * n * n * n * n * n * n * n * n * n * n *
    f2 = f3 ;						      	  if ( f2 % k == 0 ) {					    	f2 = f3 ;						   n * n * n * n * n * n * n * n * n * n
    if ( f2 % k == 0 ) return n * i ;			      	    return n * i ;					    	if ( f2 % k == 0 ) return n * i ;			  
  }							      	  }							      }								  
}							      	  i ++ ;						      return n * n * n * n * n * n * n * n * n * n * n * n * n *  
							      	}							    								  
							      	return 0 ;						    								  
							      }								    								  
							      								    								     ^ NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES.java:41:
							      								    								   error: illegal start of expression public static
							      								    								  void main(String args[]) { ^ 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
void shuffle ( int card [ ] , int n ) {			      public static void shuffle ( int card [ ] , int n ) {	    public static void shuffle ( int card [ ] , int n ) {	  script_not_found : None
  srand ( time ( 0 ) ) ;				      	Random rand = new Random ( ) ;				      Random random = new Random ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int r = i + ( rand ( ) % ( 52 - i ) ) ;		      	  int r = i + rand . nextInt ( 52 - i ) ;		    	int r = i + ( random . nextInt ( 52 - i ) ) ;		  
    swap ( card [ i ] , card [ r ] ) ;			      	  int temp = card [ r ] ;				    	Arrays . swap ( card , i , r ) ;			  
  }							      	  card [ r ] = card [ i ] ;				      }								  
}							      	  card [ i ] = temp ;					    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA
--							      --							    --								  --
unsigned int russianPeasant ( unsigned int a , unsigned int b static int russianPeasant ( int a , int b ) {		    public static int russianPeasant ( int a , int b ) {	  error : FAST_MULTIPLICATION_METHOD_WITHOUT_USING_M
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  ULTIPLICATION_OPERATOR_RUSSIAN_PEASANTS_ALGORITHM.
  while ( b > 0 ) {					      	while ( b > 0 ) {					      while ( b > 0 ) {						  java:27: error: incompatible types: int cannot be
    if ( b & 1 ) res = res + a ;			      	  if ( ( b & 1 ) != 0 ) res = res + a ;			    	if ( b & 1 ) {						  converted to boolean	   if ( b & 1 ) {
    a = a << 1 ;					      	  a = a << 1 ;						    	  res = res + a ;					   ^ 1 error
    b = b >> 1 ;					      	  b = b >> 1 ;						    	}							  
  }							      	}							    	a = a << 1 ;						  
  return res ;						      	return res ;						    	b = b >> 1 ;						  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
bool checkMarkov ( double m [ ] [ n ] ) {		      static boolean checkMarkov ( double m [ ] [ ] ) {		    public static boolean checkMarkov ( double [ ] [ ] m ) {	  error : MARKOV_MATRIX.java:29: error: cannot find
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  symbol   i < n ;	 ^   symbol:   variable n
  i < n ;						      	i < m . length ;					      i < n ;							  location: class MARKOV_MATRIX MARKOV_MATRIX.java:3
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  3: error: cannot find symbol	   j < n ;	   ^
    double sum = 0 ;					      	  double sum = 0 ;					    	double sum = 0 ;					     symbol:   variable n   location: class MARKOV_M
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  ATRIX 2 errors
    j < n ;						      	  j < m [ i ] . length ;				    	j < n ;							  
    j ++ ) sum = sum + m [ i ] [ j ] ;			      	  j ++ ) sum = sum + m [ i ] [ j ] ;			    	j ++ ) {						  
    if ( sum != 1 ) return false ;			      	  if ( sum != 1 ) return false ;			    	  sum = sum + m [ i ] [ j ] ;				  
  }							      	}							    	}							  
  return true ;						      	return true ;						    	if ( sum != 1 ) {					  
}							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		      MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		    MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO			  MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
long long moduloMultiplication ( long long a , long long b ,  static long moduloMultiplication ( long a , long b , long mod public static long moduloMultiplication ( long a , long b , l error : MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
  long long res = 0 ;					      	long res = 0 ;						      long res = 0 ;						  .java:31: error: incompatible types: long cannot b
  a %= mod ;						      	a %= mod ;						      a %= mod ;						  e converted to boolean     if ( b & 1 ) {
  while ( b ) {						      	while ( b > 0 ) {					      while ( b != 0 ) {					     ^ 1 error
    if ( b & 1 ) res = ( res + a ) % mod ;		      	  if ( ( b & 1 ) > 0 ) {				    	if ( b & 1 ) {						  
    a = ( 2 * a ) % mod ;				      	    res = ( res + a ) % mod ;				    	  res = ( res + a ) % mod ;				  
    b >>= 1 ;						      	  }							    	}							  
  }							      	  a = ( 2 * a ) % mod ;					    	a = ( 2 * a ) % mod ;					  
  return res ;						      	  b >>= 1 ;						    	b >>= 1 ;						  
}							      	}							      }								  
							      	return res ;						      return res ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS
--							      --							    --								  --
int middleOfThree ( int a , int b , int c ) {		      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  success : None
  if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;  	if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;    if ( ( a < b && b < c ) || ( c < b && b < a ) ) {		  
  else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return 	else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return 	return b ;						  
  else return c ;					      	else return c ;						      }								  
}							      }								      else if ( ( b < a && a < c ) || ( c < a && a < b ) ) {	  
							      								    	return a ;						  
							      								      }								  
							      								      else {							  
							      								    	return c ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
void transpose ( int A [ ] [ N ] ) {			      static void transpose ( int A [ ] [ ] ) {			    public static void transpose ( int A [ ] [ ] ) {		  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) swap ( A [ i ] [ j ] , A [ j ] [ i ] ) ;	      	j ++ ) {						      j ++ ) swap ( A [ i ] [ j ] , A [ j ] [ i ] ) ;		  
}							      	  int temp = A [ i ] [ j ] ;				    }								  
							      	  A [ i ] [ j ] = A [ j ] [ i ] ;			    								  
							      	  A [ j ] [ i ] = temp ;				    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
void reverseStr ( string & str ) {			      static void reverseStr ( String str ) {			    public static void reverseStr ( String str ) {		  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  for ( int i = 0 , j = n - 1 ;				      	char [ ] ch = str . toCharArray ( ) ;			      for ( int i = 0 , j = n - 1 ;				  
  i < j ;						      	char temp ;						      i < j ;							  
  i ++ , j -- ) swap ( str [ i ] , str [ j ] ) ;	      	for ( int i = 0 , j = n - 1 ;				      i ++ , j -- ) {						  
}							      	i < j ;							    	swap ( str , i , j ) ;					  
							      	i ++ , j -- ) {						      }								  
							      	  temp = ch [ i ] ;					    }								  
							      	  ch [ i ] = ch [ j ] ;					    								  
							      	  ch [ j ] = temp ;					    								  
							      	}							    								  
							      	System . out . println ( ch ) ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
int CountPairs ( int n ) {				      static int CountPairs ( int n ) {				    public static int CountPairs ( int n ) {			  success : None
  int k = n ;						      	int k = n ;						      int k = n ;						  
  int imin = 1 ;					      	int imin = 1 ;						      int imin = 1 ;						  
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  while ( imin <= n ) {					      	while ( imin <= n ) {					      while ( imin <= n ) {					  
    int imax = n / k ;					      	  int imax = n / k ;					    	int imax = n / k ;					  
    ans += k * ( imax - imin + 1 ) ;			      	  ans += k * ( imax - imin + 1 ) ;			    	ans += k * ( imax - imin + 1 ) ;			  
    imin = imax + 1 ;					      	  imin = imax + 1 ;					    	imin = imax + 1 ;					  
    k = n / imin ;					      	  k = n / imin ;					    	k = n / imin ;						  
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
int kthdigit ( int a , int b , int k ) {		      public static int kthdigit ( int a , int b , int k ) {	    public static int kthdigit ( int a , int b , int k ) {	  error : K_TH_DIGIT_RAISED_POWER_B.java:27: error:
  int p = pow ( a , b ) ;				      	int p = ( int ) Math . pow ( a , b ) ;			      int p = Math . pow ( a , b ) ;				  incompatible types: possible lossy conversion from
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						   double to int   int p = Math . pow ( a , b ) ;
  while ( p > 0 && count < k ) {			      	while ( p > 0 && count < k ) {				      while ( p > 0 && count < k ) {				  		     ^ 1 error
    int rem = p % 10 ;					      	  int rem = p % 10 ;					    	int rem = p % 10 ;					  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
    if ( count == k ) return rem ;			      	  if ( count == k ) return rem ;			    	if ( count == k ) return rem ;				  
    p = p / 10 ;					      	  p = p / 10 ;						    	p = p / 10 ;						  
  }							      	}							      }								  
  return 0 ;						      	return 0 ;						      return 0 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_
--							      --							    --								  --
public : int multiply ( int x , int y ) {		      static int multiply ( int x , int y ) {			    public static int multiply ( int x , int y ) {		  error : MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPL
  if ( y == 0 ) return 0 ;				      	if ( y == 0 ) return 0 ;				      if ( y == 0 ) return 0 ;					  Y_DIVISION_BITWISE_OPERATORS_AND_NO_LOOPS.java:27:
  if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	      	if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	      if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	   error: illegal start of expression public static
  if ( y < 0 ) return - multiply ( x , - y ) ;		      	if ( y < 0 ) return - multiply ( x , - y ) ;		      if ( y < 0 ) return - multiply ( x , - y ) ;		  void main(String args[]) { ^ 1 error
}							      	return - 1 ;						      return x * x * x * x * x * x * x * x * x * x * x * x * x *  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
void decToBinary ( int n ) {				      static void decToBinary ( int n ) {			    public static void decToBinary ( int n ) {			  script_not_found : None
  int binaryNum [ 32 ] ;				      	int [ ] binaryNum = new int [ 32 ] ;			      int [ ] binaryNum = new int [ 32 ] ;			  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    binaryNum [ i ] = n % 2 ;				      	  binaryNum [ i ] = n % 2 ;				    	binaryNum [ i ] = n % 2 ;				  
    n = n / 2 ;						      	  n = n / 2 ;						    	n = n / 2 ;						  
    i ++ ;						      	  i ++ ;						    	i ++ ;							  
  }							      	}							      }								  
  for ( int j = i - 1 ;					      	for ( int j = i - 1 ;					      for ( int j = i - 1 ;					  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  j -- ) cout << binaryNum [ j ] ;			      	j -- ) System . out . print ( binaryNum [ j ] ) ;	      j -- ) {							  
}							      }								    	System . out . println ( binaryNum [ j ] ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER	  MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
int maxPrefix ( char s [ ] , char t [ ] ) {		      static int maxPrefix ( String s , String t ) {		    public static int maxPrefix ( char [ ] s , char [ ] t ) {	  error : MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SU
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  BSEQUENCE_ANOTHER.java:63: error: incompatible typ
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  es: String cannot be converted to char[]	   i
  i < strlen ( t ) ;					      	i < t . length ( ) ;					      i < t . length ;						  f(f_filled(param0.get(i),param1.get(i)) == f_gold(
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  param0.get(i),param1.get(i)))
    if ( count == strlen ( s ) ) break ;		      	  if ( count == t . length ( ) ) break ;		    	if ( count == s . length ) break ;			  	    ^ Note: Some messages have been simplifi
    if ( t [ i ] == s [ count ] ) count ++ ;		      	  if ( t . charAt ( i ) == s . charAt ( count ) ) count ++  	if ( t [ i ] == s [ count ] ) count ++ ;		  ed; recompile with -Xdiags:verbose to get full out
  }							      	}							      }								  put 1 error
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int arr [ ] , int n , int x ) {	  success : None
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( i <= n - 1 ) {				      	while ( i <= n - 1 ) {					      while ( i <= n - 1 ) {					  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
    i += abs ( arr [ i ] - x ) ;			      	  i += Math . abs ( arr [ i ] - x ) ;			    	i += Math . abs ( arr [ i ] - x ) ;			  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
string to_upper ( string & in ) {			      static String to_upper ( char [ ] in ) {			    public static String toUpperCase ( String in ) {		  error : LOWER_CASE_UPPER_CASE_INTERESTING_FACT.jav
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  a:28: error: cannot find symbol   i ++ ) if ( 'a'
  i < in . length ( ) ;					      	i < in . length ;					      i < in . length ( ) ;					  <= in . charAt ( i ) && in . charAt ( i ) <= 'z' )
  i ++ ) if ( 'a' <= in [ i ] <= 'z' ) in [ i ] = in [ i ] -  	i ++ ) {						      i ++ ) if ( 'a' <= in . charAt ( i ) && in . charAt ( i ) <  in . setCharAt ( i , in . charAt ( i ) - 'a' + 'A
  return in ;						      	  if ( 'a' <= in [ i ] & in [ i ] <= 'z' ) {		      return in ;						  ' ) ;
}							      	    in [ i ] = ( char ) ( in [ i ] - 'a' + 'A' ) ;	    }								  			      ^	  symbol:   method s
							      	  }							    								  etCharAt(int,int)   location: variable in of type
							      	}							    								  String LOWER_CASE_UPPER_CASE_INTERESTING_FACT.java
							      	return String . valueOf ( in ) ;			    								  :48: error: incompatible types: char[] cannot be c
							      }								    								  onverted to String	     if(f_filled(param0.get(
							      								    								  i)).equals(f_gold(param0.get(i))))
							      								    								  		 ^ Note: Some messages have been sim
							      								    								  plified; recompile with -Xdiags:verbose to get ful
							      								    								  l output 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
bool isCornerPresent ( string str , string corner ) {	      static boolean isCornerPresent ( String str , String corner ) public static boolean isCornerPresent ( String str , String c error : Exception in thread "main" java.lang.Strin
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  gIndexOutOfBoundsException: begin 11, end 5, lengt
  int cl = corner . length ( ) ;			      	int cl = corner . length ( ) ;				      int cl = corner . length ( ) ;				  h 16 	at java.base/java.lang.String.checkBoundsBeg
  if ( n < cl ) return false ;				      	if ( n < cl ) return false ;				      if ( n < cl ) {						  inEnd(String.java:3319) 	at java.base/java.lang.St
  return ( str . substr ( 0 , cl ) . compare ( corner ) == 0  	return ( str . substring ( 0 , cl ) . equals ( corner ) &&  	return false ;						  ring.substring(String.java:1874) 	at PROGRAM_FIND_
}							      }								      }								  STRING_START_END_GEEKS.f_filled(PROGRAM_FIND_STRIN
							      								      return ( str . substring ( 0 , cl ) . equalsIgnoreCase ( co G_START_END_GEEKS.java:27) 	at PROGRAM_FIND_STRING
							      								    }								  _START_END_GEEKS.main(PROGRAM_FIND_STRING_START_EN
							      								    								  D_GEEKS.java:57)
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
void constructArr ( int arr [ ] , int pair [ ] , int n ) {    static void constructArr ( int arr [ ] , int pair [ ] , int n public static void constructArr ( int arr [ ] , int pair [ ]  script_not_found : None
  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /  	arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;	      	i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		      i ++ ) {							  
}							      }								    	arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
void printFibonacciNumbers ( int n ) {			      static void printFibonacciNumbers ( int n ) {		    public static void printFibonacciNumbers ( int n ) {	  script_not_found : None
  int f1 = 0 , f2 = 1 , i ;				      	int f1 = 0 , f2 = 1 , i ;				      int f1 = 0 , f2 = 1 , i ;					  
  if ( n < 1 ) return ;					      	if ( n < 1 ) return ;					      if ( n < 1 ) return ;					  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    cout << f2 << " " ;					      	  System . out . print ( f2 + " " ) ;			    	System . out . print ( f2 + " " ) ;			  
    int next = f1 + f2 ;				      	  int next = f1 + f2 ;					    	int next = f1 + f2 ;					  
    f1 = f2 ;						      	  f1 = f2 ;						    	f1 = f2 ;						  
    f2 = next ;						      	  f2 = next ;						    	f2 = next ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL		      MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			    MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			  MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL
--							      --							    --								  --
void moveSpaceInFront ( char str [ ] ) {		      static void moveSpaceInFront ( char str [ ] ) {		    public static void moveSpaceInFront ( char [ ] str ) {	  script_not_found : None
  int i = strlen ( str ) ;				      	int i = str . length - 1 ;				      int i = str . length ;					  
  for ( int j = i ;					      	for ( int j = i ;					      for ( int j = i ;						  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ] ;   	j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ] ;     j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ] ;	  
  while ( i >= 0 ) str [ i -- ] = ' ' ;			      	while ( i >= 0 ) str [ i -- ] = ' ' ;			      while ( i >= 0 ) str [ i -- ] = ' ' ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
int minimumflip ( int mat [ ] [ N ] , int n ) {		      static int minimumflip ( int mat [ ] [ ] , int n ) {	    public static int minimumflip ( int mat [ ] [ ] , int n ) {	  success : None
  int flip = 0 ;					      	int flip = 0 ;						      int flip = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < i ;						      	j < i ;							      j < i ;							  
  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;  	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;    j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;  
  return flip ;						      	return flip ;						      return flip ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
bool isPowerOfFour ( unsigned int n ) {			      static int isPowerOfFour ( int n ) {			    public static boolean isPowerOfFour ( int n ) {		  error : FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  4_OR_NOT_1.java:29: error: bad operand type int fo
  if ( n && ! ( n & ( n - 1 ) ) ) {			      	int x = n & ( n - 1 ) ;					      if ( n > 0 && ! ( n & ( n - 1 ) ) ) {			  r unary operator '!'	 if ( n > 0 && ! ( n & ( n -
    while ( n > 1 ) {					      	if ( n > 0 && x == 0 ) {				    	while ( n > 1 ) {					   1 ) ) ) {		     ^ FIND_WHETHER_A_GIVEN_
      n >>= 1 ;						      	  while ( n > 1 ) {					    	  n >>= 1 ;						  NUMBER_IS_A_POWER_OF_4_OR_NOT_1.java:34: error: in
      count += 1 ;					      	    n >>= 1 ;						    	  count += 1 ;						  compatible types: int cannot be converted to boole
    }							      	    count += 1 ;					    	}							  an	 return ( count % 2 == 0 ) ? 1 : 0 ;
    return ( count % 2 == 0 ) ? 1 : 0 ;			      	  }							    	return ( count % 2 == 0 ) ? 1 : 0 ;			  			 ^ FIND_WHETHER_A_GIVEN_NUMB
  }							      	  return ( count % 2 == 0 ) ? 1 : 0 ;			      }								  ER_IS_A_POWER_OF_4_OR_NOT_1.java:36: error: incomp
  return 0 ;						      	}							      return 0 ;						  atible types: int cannot be converted to boolean
}							      	return 0 ;						    }								   return 0 ;	       ^ FIND_WHETHER_A_GIVEN_NUMBER
							      }								    								  _IS_A_POWER_OF_4_OR_NOT_1.java:55: error: incompar
							      								    								  able types: boolean and int	      if(f_filled(pa
							      								    								  ram0.get(i)) == f_gold(param0.get(i)))
							      								    								  			  ^ 4 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
int countFriendsPairings ( int n ) {			      static int countFriendsPairings ( int n ) {		    public static int countFriendsPairings ( int n ) {		  success : None
  int a = 1 , b = 2 , c = 0 ;				      	int a = 1 , b = 2 , c = 0 ;				      int a = 1 , b = 2 , c = 0 ;				  
  if ( n <= 2 ) {					      	if ( n <= 2 ) {						      if ( n <= 2 ) {						  
    return n ;						      	  return n ;						    	return n ;						  
  }							      	}							      }								  
  for ( int i = 3 ;					      	for ( int i = 3 ;					      for ( int i = 3 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    c = b + ( i - 1 ) * a ;				      	  c = b + ( i - 1 ) * a ;				    	c = b + ( i - 1 ) * a ;					  
    a = b ;						      	  a = b ;						    	a = b ;							  
    b = c ;						      	  b = c ;						    	b = c ;							  
  }							      	}							      }								  
  return c ;						      	return c ;						      return c ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
int binaryToDecimal ( string n ) {			      static int binaryToDecimal ( String n ) {			    public static int binaryToDecimal ( String n ) {		  success : None
  string num = n ;					      	String num = n ;					      String num = n ;						  
  int dec_value = 0 ;					      	int dec_value = 0 ;					      int decValue = 0 ;					  
  int base = 1 ;					      	int base = 1 ;						      int base = 1 ;						  
  int len = num . length ( ) ;				      	int len = num . length ( ) ;				      int len = num . length ( ) ;				  
  for ( int i = len - 1 ;				      	for ( int i = len - 1 ;					      for ( int i = len - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( num [ i ] == '1' ) dec_value += base ;		      	  if ( num . charAt ( i ) == '1' ) dec_value += base ;	    	if ( num . charAt ( i ) == '1' ) {			  
    base = base * 2 ;					      	  base = base * 2 ;					    	  decValue += base ;					  
  }							      	}							    	}							  
  return dec_value ;					      	return dec_value ;					    	base = base * 2 ;					  
}							      }								      }								  
							      								      return decValue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
int minimum_cost ( int a [ ] , int n ) {		      static int minimum_cost ( int a [ ] , int n ) {		    public static int minimumCost ( int a [ ] , int n ) {	  success : None
  int mn = INT_MAX ;					      	int mn = Integer . MAX_VALUE ;				      int mn = Integer . MAX_VALUE ;				  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    mn = min ( a [ i ] , mn ) ;				      	  mn = Math . min ( a [ i ] , mn ) ;			    	mn = Math . min ( a [ i ] , mn ) ;			  
    sum += a [ i ] ;					      	  sum += a [ i ] ;					    	sum += a [ i ] ;					  
  }							      	}							      }								  
  return mn * ( sum - mn ) ;				      	return mn * ( sum - mn ) ;				      return mn * ( sum - mn ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER					      SUM_FACTORS_NUMBER					    SUM_FACTORS_NUMBER						  SUM_FACTORS_NUMBER
--							      --							    --								  --
int divSum ( int n ) {					      static int divSum ( int n ) {				    public static int divSum ( int n ) {			  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      i <= Math . sqrt ( n ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( n % i == 0 ) {					      	  if ( n % i == 0 ) {					    	if ( n % i == 0 ) {					  
      if ( i == ( n / i ) ) result += i ;		      	    if ( i == ( n / i ) ) result += i ;			    	  if ( i == ( n / i ) ) {				  
      else result += ( i + n / i ) ;			      	    else result += ( i + n / i ) ;			    	    result += i ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return ( result + n + 1 ) ;				      	return ( result + n + 1 ) ;				    	    result += ( i + n / i ) ;				  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( result + n + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
int recSearch ( int arr [ ] , int l , int r , int x ) {	      static int recSearch ( int arr [ ] , int l , int r , int x )  public static int recSearch ( int arr [ ] , int l , int r , i success : None
  if ( r < l ) return - 1 ;				      	if ( r < l ) return - 1 ;				      if ( r < l ) return - 1 ;					  
  if ( arr [ l ] == x ) return l ;			      	if ( arr [ l ] == x ) return l ;			      if ( arr [ l ] == x ) return l ;				  
  if ( arr [ r ] == x ) return r ;			      	if ( arr [ r ] == x ) return r ;			      if ( arr [ r ] == x ) return r ;				  
  return recSearch ( arr , l + 1 , r - 1 , x ) ;	      	return recSearch ( arr , l + 1 , r - 1 , x ) ;		      return recSearch ( arr , l + 1 , r - 1 , x ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION
--							      --							    --								  --
ll mulmod ( ll a , ll b , ll mod ) {			      static long mulmod ( long a , long b , long mod ) {	    public static long mulmod ( long a , long b , long mod ) {	  success : None
  ll res = 0 ;						      	long res = 0 ;						      long res = 0 ;						  
  a = a % mod ;						      	a = a % mod ;						      a = a % mod ;						  
  while ( b > 0 ) {					      	while ( b > 0 ) {					      while ( b > 0 ) {						  
    if ( b % 2 == 1 ) res = ( res + a ) % mod ;		      	  if ( b % 2 == 1 ) {					    	if ( b % 2 == 1 ) {					  
    a = ( a * 2 ) % mod ;				      	    res = ( res + a ) % mod ;				    	  res = ( res + a ) % mod ;				  
    b /= 2 ;						      	  }							    	}							  
  }							      	  a = ( a * 2 ) % mod ;					    	a = ( a * 2 ) % mod ;					  
  return res % mod ;					      	  b /= 2 ;						    	b /= 2 ;						  
}							      	}							      }								  
							      	return res % mod ;					      return res % mod ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
int findRepeating ( int arr [ ] , int n ) {		      static int findRepeating ( int arr [ ] , int n ) {	    public static int findRepeating ( int arr [ ] , int n ) {	  success : None
  unordered_set < int > s ;				      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ 	  if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;	    	if ( s . contains ( arr [ i ] ) ) {			  
    s . insert ( arr [ i ] ) ;				      	  s . add ( arr [ i ] ) ;				    	  return arr [ i ] ;					  
  }							      	}							    	}							  
  return - 1 ;						      	return - 1 ;						    	s . add ( arr [ i ] ) ;					  
}							      }								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN
--							      --							    --								  --
int findMaximum ( int arr [ ] , int low , int high ) {	      static int findMaximum ( int arr [ ] , int low , int high ) { public static int findMaximum ( int arr [ ] , int low , int h failure : #Results:8, 10
  int max = arr [ low ] ;				      	int max = arr [ low ] ;					      int max = arr [ low ] ;					  
  int i ;						      	int i ;							      int i ;							  
  for ( i = low + 1 ;					      	for ( i = low ;						      for ( i = low + 1 ;					  
  i <= high ;						      	i <= high ;						      i <= high ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] > max ) max = arr [ i ] ;		      	  if ( arr [ i ] > max ) max = arr [ i ] ;		    	if ( arr [ i ] > max ) {				  
    else break ;					      	}							    	  max = arr [ i ] ;					  
  }							      	return max ;						    	}							  
  return max ;						      }								    	else {							  
}							      								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1
--							      --							    --								  --
int middleOfThree ( int a , int b , int c ) {		      public static int middleOfThree ( int a , int b , int c ) {   public static int middleOfThree ( int a , int b , int c ) {	  success : None
  if ( a > b ) {					      	if ( a > b ) {						      if ( a > b ) {						  
    if ( b > c ) return b ;				      	  if ( b > c ) return b ;				    	if ( b > c ) {						  
    else if ( a > c ) return c ;			      	  else if ( a > c ) return c ;				    	  return b ;						  
    else return a ;					      	  else return a ;					    	}							  
  }							      	}							    	else if ( a > c ) {					  
  else {						      	else {							    	  return c ;						  
    if ( a > c ) return a ;				      	  if ( a > c ) return a ;				    	}							  
    else if ( b > c ) return c ;			      	  else if ( b > c ) return c ;				    	else {							  
    else return b ;					      	  else return b ;					    	  return a ;						  
  }							      	}							    	}							  
}							      }								      }								  
							      								      else {							  
							      								    	if ( a > c ) {						  
							      								    	  return a ;						  
							      								    	}							  
							      								    	else if ( b > c ) {					  
							      								    	  return c ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  return b ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
int numofsubset ( int arr [ ] , int n ) {		      static int numofsubset ( int arr [ ] , int n ) {		    public static int numofsubset ( int arr [ ] , int n ) {	  success : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int count = 1 ;					      	int count = 1 ;						      int count = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;	      	  if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;	    	if ( arr [ i ] + 1 != arr [ i + 1 ] ) {			  
  }							      	}							    	  count ++ ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
void randomize ( int arr [ ] , int n ) {		      static void randomize ( int arr [ ] , int n ) {		    public static void randomize ( int arr [ ] , int n ) {	  script_not_found : None
  srand ( time ( NULL ) ) ;				      	Random r = new Random ( ) ;				      Random random = new Random ( ) ;				  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    int j = rand ( ) % ( i + 1 ) ;			      	  int j = r . nextInt ( i + 1 ) ;			    	int j = random . nextInt ( i + 1 ) ;			  
    swap ( & arr [ i ] , & arr [ j ] ) ;		      	  int temp = arr [ i ] ;				    	Arrays . swap ( arr , i , j ) ;				  
  }							      	  arr [ i ] = arr [ j ] ;				      }								  
}							      	  arr [ j ] = temp ;					    }								  
							      	}							    								  
							      	System . out . println ( Arrays . toString ( arr ) ) ;	    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
void splitArr ( int arr [ ] , int n , int k ) {		      public static void splitArr ( int arr [ ] , int n , int k ) { public static void splitArr ( int arr [ ] , int n , int k ) { success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int x = arr [ 0 ] ;					      	  int x = arr [ 0 ] ;					    	int x = arr [ 0 ] ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n - 1 ;						      	  j < n - 1 ;						    	j < n - 1 ;						  
    ++ j ) arr [ j ] = arr [ j + 1 ] ;			      	  ++ j ) arr [ j ] = arr [ j + 1 ] ;			    	++ j ) {						  
    arr [ n - 1 ] = x ;					      	  arr [ n - 1 ] = x ;					    	  arr [ j ] = arr [ j + 1 ] ;				  
  }							      	}							    	}							  
}							      }								    	arr [ n - 1 ] = x ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
int firstNonRepeating ( int arr [ ] , int n ) {		      static int firstNonRepeating ( int arr [ ] , int n ) {	    public static int firstNonRepeating ( int arr [ ] , int n ) { success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;    	  j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;    	j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;	  
    if ( j == n ) return arr [ i ] ;			      	  if ( j == n ) return arr [ i ] ;			    	if ( j == n ) return arr [ i ] ;			  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
int power ( int x , unsigned int y , int p ) {		      static int power ( int x , int y , int p ) {		    public static int power ( int x , int y , int p ) {		  error : MODULAR_EXPONENTIATION_POWER_IN_MODULAR_AR
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  ITHMETIC.java:29: error: incompatible types: int c
  x = x % p ;						      	x = x % p ;						      x = x % p ;						  annot be converted to boolean	    if ( y & 1 ) {
  while ( y > 0 ) {					      	while ( y > 0 ) {					      while ( y > 0 ) {						  	    ^ 1 error
    if ( y & 1 ) res = ( res * x ) % p ;		      	  if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;		    	if ( y & 1 ) {						  
    y = y >> 1 ;					      	  y = y >> 1 ;						    	  res = ( res * x ) % p ;				  
    x = ( x * x ) % p ;					      	  x = ( x * x ) % p ;					    	}							  
  }							      	}							    	y = y >> 1 ;						  
  return res ;						      	return res ;						    	x = ( x * x ) % p ;					  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
int findMinDiff ( int arr [ ] , int n ) {		      static int findMinDiff ( int [ ] arr , int n ) {		    public static int findMinDiff ( int arr [ ] , int n ) {	  success : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int diff = INT_MAX ;					      	int diff = Integer . MAX_VALUE ;			      int diff = Integer . MAX_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ 	i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [   i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ 
  return diff ;						      	return diff ;						      return diff ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_1				      FRIENDS_PAIRING_PROBLEM_1					    FRIENDS_PAIRING_PROBLEM_1					  FRIENDS_PAIRING_PROBLEM_1
--							      --							    --								  --
int countFriendsPairings ( int n ) {			      static int countFriendsPairings ( int n ) {		    public static int countFriendsPairings ( int n ) {		  script_not_found : None
  if ( dp [ n ] != - 1 ) return dp [ n ] ;		      	if ( dp [ n ] != - 1 ) return dp [ n ] ;		      if ( dp [ n ] != - 1 ) return dp [ n ] ;			  
  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 	if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1   if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 
  else return dp [ n ] = n ;				      	else return dp [ n ] = n ;				      else return dp [ n ] = n ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
int nearestSmallerEqFib ( int n ) {			      public static int nearestSmallerEqFib ( int n ) {		    public static int nearestSmallerEqFib ( int n ) {		  success : None
  if ( n == 0 || n == 1 ) return n ;			      	if ( n == 0 || n == 1 ) return n ;			      if ( n == 0 || n == 1 ) {					  
  int f1 = 0 , f2 = 1 , f3 = 1 ;			      	int f1 = 0 , f2 = 1 , f3 = 1 ;				    	return n ;						  
  while ( f3 <= n ) {					      	while ( f3 <= n ) {					      }								  
    f1 = f2 ;						      	  f1 = f2 ;						      int f1 = 0 , f2 = 1 , f3 = 1 ;				  
    f2 = f3 ;						      	  f2 = f3 ;						      while ( f3 <= n ) {					  
    f3 = f1 + f2 ;					      	  f3 = f1 + f2 ;					    	f1 = f2 ;						  
  }							      	}							    	f2 = f3 ;						  
  return f2 ;						      	return f2 ;						    	f3 = f1 + f2 ;						  
}							      }								      }								  
							      								      return f2 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1
--							      --							    --								  --
void printDistinct ( int arr [ ] , int n ) {		      static void printDistinct ( int arr [ ] , int n ) {	    public static void printDistinct ( int arr [ ] , int n ) {	  script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) i ++ ;  	  while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) i ++ ;  	while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) {	  
    cout << arr [ i ] << " " ;				      	  System . out . print ( arr [ i ] + " " ) ;		    	  i ++ ;						  
  }							      	}							    	}							  
}							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
int findHeight ( int * parent , int n ) {		      static int findHeight ( int [ ] parent , int n ) {	    public static int findHeight ( int [ ] parent , int n ) {	  script_not_found : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int p = i , current = 1 ;				      	  int p = i , current = 1 ;				    	int p = i , current = 1 ;				  
    while ( parent [ p ] != - 1 ) {			      	  while ( parent [ p ] != - 1 ) {			    	while ( parent [ p ] != - 1 ) {				  
      current ++ ;					      	    current ++ ;					    	  current ++ ;						  
      p = parent [ p ] ;				      	    p = parent [ p ] ;					    	  p = parent [ p ] ;					  
    }							      	  }							    	}							  
    res = max ( res , current ) ;			      	  res = Math . max ( res , current ) ;			    	res = Math . max ( res , current ) ;			  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_GAMES_PLAYED_WINNER				      MAXIMUM_GAMES_PLAYED_WINNER				    MAXIMUM_GAMES_PLAYED_WINNER					  MAXIMUM_GAMES_PLAYED_WINNER
--							      --							    --								  --
int maxGameByWinner ( int N ) {				      static int maxGameByWinner ( int N ) {			    public static int maxGameByWinner ( int N ) {		  success : None
  int dp [ N ] ;					      	int [ ] dp = new int [ N ] ;				      int [ ] dp = new int [ N ] ;				  
  dp [ 0 ] = 1 ;					      	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
  dp [ 1 ] = 2 ;					      	dp [ 1 ] = 2 ;						      dp [ 1 ] = 2 ;						  
  int i = 2 ;						      	int i = 2 ;						      int i = 2 ;						  
  do {							      	do {							      do {							  
    dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		      	  dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		  
  }							      	}							      }								  
  while ( dp [ i ++ ] <= N ) ;				      	while ( dp [ i ++ ] <= N ) ;				      while ( dp [ i ++ ] <= N ) ;				  
  return ( i - 2 ) ;					      	return ( i - 2 ) ;					      return ( i - 2 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
int countSubstringWithEqualEnds ( string s ) {		      static int countSubstringWithEqualEnds ( String s ) {	    public static int countSubstringWithEqualEnds ( String s ) {  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i ;				      	i ++ ) for ( int j = i ;				      i ++ ) for ( int j = i ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( s [ i ] == s [ j ] ) result ++ ;		      	j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result +   j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result + 
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
pair < double , double > mirrorImage ( double a , double b ,  static pair mirrorImage ( double a , double b , double c , do public static Pair mirrorImage ( double a , double b , double script_not_found : None
  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * 	double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b *   double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * 
  double x = temp * a + x1 ;				      	double x = temp * a + x1 ;				      double x = temp * a + x1 ;				  
  double y = temp * b + y1 ;				      	double y = temp * b + y1 ;				      double y = temp * b + y1 ;				  
  return make_pair ( x , y ) ;				      	return new pair ( x , y ) ;				      return new Pair ( x , y ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
int nonFibonacci ( int n ) {				      static int nonFibonacci ( int n ) {			    public static int nonFibonacci ( int n ) {			  success : None
  int prevPrev = 1 , prev = 2 , curr = 3 ;		      	int prevPrev = 1 , prev = 2 , curr = 3 ;		      int prevPrev = 1 , prev = 2 , curr = 3 ;			  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    prevPrev = prev ;					      	  prevPrev = prev ;					    	prevPrev = prev ;					  
    prev = curr ;					      	  prev = curr ;						    	prev = curr ;						  
    curr = prevPrev + prev ;				      	  curr = prevPrev + prev ;				    	curr = prevPrev + prev ;				  
    n = n - ( curr - prev - 1 ) ;			      	  n = n - ( curr - prev - 1 ) ;				    	n = n - ( curr - prev - 1 ) ;				  
  }							      	}							      }								  
  n = n + ( curr - prev - 1 ) ;				      	n = n + ( curr - prev - 1 ) ;				      n = n + ( curr - prev - 1 ) ;				  
  return prev + n ;					      	return prev + n ;					      return prev + n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	      MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
int minValue ( int A [ ] , int B [ ] , int n ) {	      static int minValue ( int A [ ] , int B [ ] , int n ) {	    public static int minValue ( int A [ ] , int B [ ] , int n )  success : None
  sort ( A , A + n ) ;					      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
  sort ( B , B + n ) ;					      	Arrays . sort ( B ) ;					      Arrays . sort ( B ) ;					  
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ;	      	i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ;	      i ++ ) {							  
  return result ;					      	return result ;						    	result += ( A [ i ] * B [ n - i - 1 ] ) ;		  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
int minPerimeter ( int n ) {				      public static long minPerimeter ( int n ) {		    public static int minPerimeter ( int n ) {			  error : MINIMUM_PERIMETER_N_BLOCKS.java:27: error:
  int l = sqrt ( n ) ;					      	int l = ( int ) Math . sqrt ( n ) ;			      int l = Math . sqrt ( n ) ;				   incompatible types: possible lossy conversion fro
  int sq = l * l ;					      	int sq = l * l ;					      int sq = l * l ;						  m double to int   int l = Math . sqrt ( n ) ;
  if ( sq == n ) return l * 4 ;				      	if ( sq == n ) return l * 4 ;				      if ( sq == n ) {						  		    ^ MINIMUM_PERIMETER_N_BLOCKS.jav
  else {						      	else {							    	return l * 4 ;						  a:38: error: incompatible types: possible lossy co
    long long int row = n / l ;				      	  long row = n / l ;					      }								  nversion from long to int	return perimeter ;
    long long int perimeter = 2 * ( l + row ) ;		      	  long perimeter = 2 * ( l + row ) ;			      else {							  	    ^ 2 errors
    if ( n % l != 0 ) perimeter += 2 ;			      	  if ( n % l != 0 ) perimeter += 2 ;			    	long row = n / l ;					  
    return perimeter ;					      	  return perimeter ;					    	long perimeter = 2 * ( l + row ) ;			  
  }							      	}							    	if ( n % l != 0 ) {					  
}							      }								    	  perimeter += 2 ;					  
							      								    	}							  
							      								    	return perimeter ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
int binarySearch ( int arr [ ] , int l , int r , int x ) {    int binarySearch ( int arr [ ] , int x ) {		    public static int binarySearch ( int arr [ ] , int l , int r  script_not_found : None
  while ( l <= r ) {					      	int l = 0 , r = arr . length - 1 ;			      while ( l <= r ) {					  
    int m = l + ( r - l ) / 2 ;				      	while ( l <= r ) {					    	int m = l + ( r - l ) / 2 ;				  
    if ( arr [ m ] == x ) return m ;			      	  int m = l + ( r - l ) / 2 ;				    	if ( arr [ m ] == x ) return m ;			  
    if ( arr [ m ] < x ) l = m + 1 ;			      	  if ( arr [ m ] == x ) return m ;			    	if ( arr [ m ] < x ) l = m + 1 ;			  
    else r = m - 1 ;					      	  if ( arr [ m ] < x ) l = m + 1 ;			    	else r = m - 1 ;					  
  }							      	  else r = m - 1 ;					      }								  
  return - 1 ;						      	}							      return - 1 ;						  
}							      	return - 1 ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
int maxProduct ( int arr [ ] , int n ) {		      static int maxProduct ( int arr [ ] , int n ) {		    public static int maxProduct ( int arr [ ] , int n ) {	  success : None
  if ( n < 3 ) return - 1 ;				      	if ( n < 3 ) {						      if ( n < 3 ) return - 1 ;					  
  sort ( arr , arr + n ) ;				      	  return - 1 ;						      Arrays . sort ( arr ) ;					  
  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [  	}							      return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , 
}							      	Arrays . sort ( arr ) ;					    }								  
							      	return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , 								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
int countSeq ( int n ) {				      static int countSeq ( int n ) {				    public static int countSeq ( int n ) {			  success : None
  int nCr = 1 , res = 1 ;				      	int nCr = 1 , res = 1 ;					      int nCr = 1 , res = 1 ;					  
  for ( int r = 1 ;					      	for ( int r = 1 ;					      for ( int r = 1 ;						  
  r <= n ;						      	r <= n ;						      r <= n ;							  
  r ++ ) {						      	r ++ ) {						      r ++ ) {							  
    nCr = ( nCr * ( n + 1 - r ) ) / r ;			      	  nCr = ( nCr * ( n + 1 - r ) ) / r ;			    	nCr = ( nCr * ( n + 1 - r ) ) / r ;			  
    res += nCr * nCr ;					      	  res += nCr * nCr ;					    	res += nCr * nCr ;					  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
void maximizecube ( int l , int b , int h ) {		      static void maximizecube ( int l , int b , int h ) {	    public static void maximizecube ( int l , int b , int h ) {	  script_not_found : None
  int side = __gcd ( l , __gcd ( b , h ) ) ;		      	int side = gcd ( l , gcd ( b , h ) ) ;			      int side = __gcd ( l , __gcd ( b , h ) ) ;		  
  int num = l / side ;					      	int num = l / side ;					      int num = l / side ;					  
  num = ( num * b / side ) ;				      	num = ( num * b / side ) ;				      num = ( num * b / side ) ;				  
  num = ( num * h / side ) ;				      	num = ( num * h / side ) ;				      num = ( num * h / side ) ;				  
  cout << side << " " << num << endl ;			      	System . out . println ( side + " " + num ) ;		      System . out . println ( side + " " + num ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
void subArray ( int arr [ ] , int n ) {			      static void subArray ( int n ) {				    public static void subArray ( int arr [ ] , int n ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i ;					      	  for ( int j = i ;					    	for ( int j = i ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      for ( int k = i ;					      	    for ( int k = i ;					    	  for ( int k = i ;					  
      k <= j ;						      	    k <= j ;						    	  k <= j ;						  
      k ++ ) cout << arr [ k ] << " " ;			      	    k ++ ) System . out . print ( arr [ k ] + " " ) ;	    	  k ++ ) {						  
      cout << endl ;					      	  }							    	    System . out . print ( arr [ k ] + " " ) ;		  
    }							      	}							    	  }							  
  }							      }								    	  System . out . println ( ) ;				  
}							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
bool isPrime ( int p ) {				      static boolean isPrime ( int p ) {			    public static boolean isPrime ( int p ) {			  error : PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SER
  long long checkNumber = pow ( 2 , p ) - 1 ;		      	double checkNumber = Math . pow ( 2 , p ) - 1 ;		      long checkNumber = Math . pow ( 2 , p ) - 1 ;		  IES.java:24: error: incompatible types: possible l
  long long nextval = 4 % checkNumber ;			      	double nextval = 4 % checkNumber ;			      long nextval = 4 % checkNumber ;				  ossy conversion from double to long	long checkNu
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  mber = Math . pow ( 2 , p ) - 1 ;
  i < p - 1 ;						      	i < p - 1 ;						      i < p - 1 ;						  			    ^ 1 error
  i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ;  	i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ;    i ++ ) {							  
  return ( nextval == 0 ) ;				      	return ( nextval == 0 ) ;				    	nextval = ( nextval * nextval - 2 ) % checkNumber ;	  
}							      }								      }								  
							      								      return ( nextval == 0 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY					      FLOOR_IN_A_SORTED_ARRAY					    FLOOR_IN_A_SORTED_ARRAY					  FLOOR_IN_A_SORTED_ARRAY
--							      --							    --								  --
int floorSearch ( int arr [ ] , int n , int x ) {	      static int floorSearch ( int arr [ ] , int n , int x ) {	    public static int floorSearch ( int arr [ ] , int n , int x ) script_not_found : None
  if ( x >= arr [ n - 1 ] ) return n - 1 ;		      	if ( x >= arr [ n - 1 ] ) return n - 1 ;		      if ( x >= arr [ n - 1 ] ) return n - 1 ;			  
  if ( x < arr [ 0 ] ) return - 1 ;			      	if ( x < arr [ 0 ] ) return - 1 ;			      if ( x < arr [ 0 ] ) return - 1 ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;	      	i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;		      i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;		  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
string minLexRotation ( string str ) {			      static String minLexRotation ( String str ) {		    public static String minLexRotation ( String str ) {	  failure : #Results:1, 10
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  string arr [ n ] ;					      	String arr [ ] = new String [ n ] ;			      String [ ] arr = new String [ n ] ;			  
  string concat = str + str ;				      	String concat = str + str ;				      String concat = str + str ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) arr [ i ] = concat . substr ( i , n ) ;	      	i ++ ) {						      i ++ ) {							  
  sort ( arr , arr + n ) ;				      	  arr [ i ] = concat . substring ( i , i + n ) ;	    	arr [ i ] = concat . substring ( i , n ) ;		  
  return arr [ 0 ] ;					      	}							      }								  
}							      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
							      	return arr [ 0 ] ;					      return arr [ 0 ] ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	    COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	  COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
int countZeroes ( int mat [ N ] [ N ] ) {		      static int countZeroes ( int mat [ ] [ ] ) {		    public static int countZeroes ( int [ ] [ ] mat ) {		  script_not_found : None
  int row = N - 1 , col = 0 ;				      	int row = N - 1 , col = 0 ;				      int row = N - 1 , col = 0 ;				  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  while ( col < N ) {					      	while ( col < N ) {					      while ( col < N ) {					  
    while ( mat [ row ] [ col ] ) if ( -- row < 0 ) return co 	  while ( mat [ row ] [ col ] > 0 ) if ( -- row < 0 ) retur 	while ( mat [ row ] [ col ] != null ) if ( -- row < 0 ) r 
    count += ( row + 1 ) ;				      	  count += ( row + 1 ) ;				    	count += ( row + 1 ) ;					  
    col ++ ;						      	  col ++ ;						    	col ++ ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
int minXOR ( int arr [ ] , int n ) {			      static int minXOR ( int arr [ ] , int n ) {		    public static int minXOR ( int arr [ ] , int n ) {		  success : None
  sort ( arr , arr + n ) ;				      	Arrays . parallelSort ( arr ) ;				      Arrays . sort ( arr ) ;					  
  int minXor = INT_MAX ;				      	int minXor = Integer . MAX_VALUE ;			      int minXor = Integer . MAX_VALUE ;			  
  int val = 0 ;						      	int val = 0 ;						      int val = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    val = arr [ i ] ^ arr [ i + 1 ] ;			      	  val = arr [ i ] ^ arr [ i + 1 ] ;			    	val = arr [ i ] ^ arr [ i + 1 ] ;			  
    minXor = min ( minXor , val ) ;			      	  minXor = Math . min ( minXor , val ) ;		    	minXor = Math . min ( minXor , val ) ;			  
  }							      	}							      }								  
  return minXor ;					      	return minXor ;						      return minXor ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
int numberOfWays ( int x ) {				      static int numberOfWays ( int x ) {			    public static int numberOfWays ( int x ) {			  success : None
  int dp [ x + 1 ] ;					      	int dp [ ] = new int [ x + 1 ] ;			      int [ ] dp = new int [ x + 1 ] ;				  
  dp [ 0 ] = dp [ 1 ] = 1 ;				      	dp [ 0 ] = dp [ 1 ] = 1 ;				      dp [ 0 ] = dp [ 1 ] = 1 ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= x ;						      	i <= x ;						      i <= x ;							  
  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;   i ++ ) {							  
  return dp [ x ] ;					      	return dp [ x ] ;					    	dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;	  
}							      }								      }								  
							      								      return dp [ x ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7	      FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		    FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		  FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7
--							      --							    --								  --
int findpos ( string n ) {				      static int findpos ( String n ) {				    public static int findpos ( String n ) {			  error : Exception in thread "main" java.lang.Strin
  int i = 0 , pos = 0 ;					      	int k = 0 , pos = 0 , i = 0 ;				      int i = 0 , pos = 0 ;					  gIndexOutOfBoundsException: String index out of ra
  while ( n [ i ] != '\0' ) {				      	while ( k != n . length ( ) ) {				      while ( n . charAt ( i ) != '\0' ) {			  nge: 1 	at java.base/java.lang.StringLatin1.charAt
    switch ( n [ i ] ) {				      	  switch ( n . charAt ( i ) ) {				    	switch ( n . charAt ( i ) ) {				  (StringLatin1.java:47) 	at java.base/java.lang.Str
      case '4' : pos = pos * 2 + 1 ;			      	    case '4' : pos = pos * 2 + 1 ;			    	  case '4' : pos = pos * 2 + 1 ;			  ing.charAt(String.java:693) 	at FIND_POSITION_GIVE
      break ;						      	    break ;						    	  break ;						  N_NUMBER_AMONG_NUMBERS_MADE_4_7.f_filled(FIND_POSI
      case '7' : pos = pos * 2 + 2 ;			      	    case '7' : pos = pos * 2 + 2 ;			    	  case '7' : pos = pos * 2 + 2 ;			  TION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7.java:31)
      break ;						      	    break ;						    	  break ;						  	at FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_
    }							      	  }							    	}							  4_7.main(FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_
    i ++ ;						      	  i ++ ;						    	i ++ ;							  MADE_4_7.java:59)
  }							      	  k ++ ;						      }								  
  return pos ;						      	}							      return pos ;						  
}							      	return pos ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
void add ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N  static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ public static void add ( int A [ ] [ ] , int B [ ] [ ] , int  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      i ++ ) for ( j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	      j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
int countDivisibles ( int arr [ ] , int n ) {		      static int countDivisibles ( int arr [ ] , int n ) {	    public static int countDivisibles ( int arr [ ] , int n ) {	  script_not_found : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ 	j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [   j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ 
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
void printDistinct ( int arr [ ] , int n ) {		      static void printDistinct ( int arr [ ] , int n ) {	    public static void printDistinct ( int arr [ ] , int n ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < i ;						      	  j < i ;						    	j < i ;							  
    j ++ ) if ( arr [ i ] == arr [ j ] ) break ;	      	  j ++ ) if ( arr [ i ] == arr [ j ] ) break ;		    	j ++ ) if ( arr [ i ] == arr [ j ] ) break ;		  
    if ( i == j ) cout << arr [ i ] << " " ;		      	  if ( i == j ) System . out . print ( arr [ i ] + " " ) ;  	if ( i == j ) System . out . print ( arr [ i ] + " " ) ;  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
void multiply ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C  public static void multiply ( int A [ ] [ ] , int B [ ] [ ] , script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      i ++ ) for ( j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	      j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM					      FRIENDS_PAIRING_PROBLEM					    FRIENDS_PAIRING_PROBLEM					  FRIENDS_PAIRING_PROBLEM
--							      --							    --								  --
int countFriendsPairings ( int n ) {			      static int countFriendsPairings ( int n ) {		    public static int countFriendsPairings ( int n ) {		  success : None
  int dp [ n + 1 ] ;					      	int dp [ ] = new int [ n + 1 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i <= 2 ) dp [ i ] = i ;			      	  if ( i <= 2 ) dp [ i ] = i ;				    	if ( i <= 2 ) {						  
    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	  else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	  dp [ i ] = i ;					  
  }							      	}							    	}							  
  return dp [ n ] ;					      	return dp [ n ] ;					    	else {							  
}							      }								    	  dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;	  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN
--							      --							    --								  --
int findNth ( int n ) {					      public static int findNth ( int n ) {			    public static int findNth ( int n ) {			  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int curr = 1 ;					      	for ( int curr = 1 ;					      for ( int curr = 1 ;					  
  ;							      	;							      ;								  
  curr ++ ) {						      	curr ++ ) {						      curr ++ ) {						  
    int sum = 0 ;					      	  int sum = 0 ;						    	int sum = 0 ;						  
    for ( int x = curr ;				      	  for ( int x = curr ;					    	for ( int x = curr ;					  
    x > 0 ;						      	  x > 0 ;						    	x > 0 ;							  
    x = x / 10 ) sum = sum + x % 10 ;			      	  x = x / 10 ) sum = sum + x % 10 ;			    	x = x / 10 ) {						  
    if ( sum == 10 ) count ++ ;				      	  if ( sum == 10 ) count ++ ;				    	  sum = sum + x % 10 ;					  
    if ( count == n ) return curr ;			      	  if ( count == n ) return curr ;			    	}							  
  }							      	}							    	if ( sum == 10 ) {					  
  return - 1 ;						      }								    	  count ++ ;						  
}							      								    	}							  
							      								    	if ( count == n ) {					  
							      								    	  return curr ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_FIRST_MISSING_NUMBER				      FIND_THE_FIRST_MISSING_NUMBER				    FIND_THE_FIRST_MISSING_NUMBER				  FIND_THE_FIRST_MISSING_NUMBER
--							      --							    --								  --
int findFirstMissing ( int array [ ] , int start , int end )  int findFirstMissing ( int array [ ] , int start , int end )  public static int findFirstMissing ( int [ ] array , int star success : None
  if ( start > end ) return end + 1 ;			      	if ( start > end ) return end + 1 ;			      if ( start > end ) return end + 1 ;			  
  if ( start != array [ start ] ) return start ;	      	if ( start != array [ start ] ) return start ;		      if ( start != array [ start ] ) return start ;		  
  int mid = ( start + end ) / 2 ;			      	int mid = ( start + end ) / 2 ;				      int mid = ( start + end ) / 2 ;				  
  if ( array [ mid ] == mid ) return findFirstMissing ( array 	if ( array [ mid ] == mid ) return findFirstMissing ( array   if ( array [ mid ] == mid ) return findFirstMissing ( array 
  return findFirstMissing ( array , start , mid ) ;	      	return findFirstMissing ( array , start , mid ) ;	      return findFirstMissing ( array , start , mid ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
int maxTasks ( int high [ ] , int low [ ] , int n ) {	      static int maxTasks ( int high [ ] , int low [ ] , int n ) {  public static int maxTasks ( int high [ ] , int low [ ] , int success : None
  if ( n <= 0 ) return 0 ;				      	if ( n <= 0 ) return 0 ;				      if ( n <= 0 ) return 0 ;					  
  return max ( high [ n - 1 ] + maxTasks ( high , low , ( n - 	return Math . max ( high [ n - 1 ] + maxTasks ( high , low    return Math . max ( high [ n - 1 ] + maxTasks ( high , low  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
void findElements ( int arr [ ] , int n ) {		      static void findElements ( int arr [ ] , int n ) {	    public static void findElements ( int arr [ ] , int n ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int count = 0 ;					      	  int count = 0 ;					    	int count = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;	      	  j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;	    	j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;		  
    if ( count >= 2 ) cout << arr [ i ] << " " ;	      	  if ( count >= 2 ) System . out . print ( arr [ i ] + " "  	if ( count >= 2 ) System . out . print ( arr [ i ] + " "  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
void printDistinct ( int arr [ ] , int n ) {		      static void printDistinct ( int arr [ ] ) {		    public static void printDistinct ( int arr [ ] , int n ) {	  script_not_found : None
  unordered_set < int > s ;				      	HashSet < Integer > set = new HashSet < > ( ) ;		      HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < arr . length ;					      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( s . find ( arr [ i ] ) == s . end ( ) ) {	      	  if ( ! set . contains ( arr [ i ] ) ) {		    	if ( s . contains ( arr [ i ] ) == false ) {		  
      s . insert ( arr [ i ] ) ;			      	    set . add ( arr [ i ] ) ;				    	  s . add ( arr [ i ] ) ;				  
      cout << arr [ i ] << " " ;			      	    System . out . print ( arr [ i ] + " " ) ;		    	  System . out . print ( arr [ i ] + " " ) ;		  
    }							      	  }							    	}							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
void findCombinations ( string str , int index , string out ) static void findCombinations ( String str , int index , Strin public static void findCombinations ( String str , int index  script_not_found : None
  if ( index == str . length ( ) ) cout << out << endl ;      	if ( index == str . length ( ) ) System . out . println ( o   if ( index == str . length ( ) ) {			  
  for ( int i = index ;					      	for ( int i = index ;					    	System . out . println ( out ) ;			  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      }								  
  i ++ ) findCombinations ( str , i + 1 , out + "(" + str . s 	i ++ ) findCombinations ( str , i + 1 , out + "(" + str . s   for ( int i = index ;					  
}							      }								      i < str . length ( ) ;					  
							      								      i ++ ) {							  
							      								    	findCombinations ( str , i + 1 , out + "(" + str . substr 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION
--							      --							    --								  --
int findMinX ( int num [ ] , int rem [ ] , int k ) {	      static int findMinX ( int num [ ] , int rem [ ] , int k ) {   public static int findMinX ( int [ ] num , int [ ] rem , int  script_not_found : None
  int x = 1 ;						      	int x = 1 ;						      int x = 1 ;						  
  while ( true ) {					      	while ( true ) {					      while ( true ) {						  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < k ;						      	  j < k ;						    	j < k ;							  
    j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	      	  j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	    	j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	  
    if ( j == k ) return x ;				      	  if ( j == k ) return x ;				    	if ( j == k ) return x ;				  
    x ++ ;						      	  x ++ ;						    	x ++ ;							  
  }							      	}							      }								  
  return x ;						      }								      return x ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
int countIntegralSolutions ( int n ) {			      static int countIntegralSolutions ( int n ) {		    public static int countIntegralSolutions ( int n ) {	  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j <= n - i ;						      	j <= n - i ;						      j <= n - i ;						  
  j ++ ) for ( int k = 0 ;				      	j ++ ) for ( int k = 0 ;				      j ++ ) for ( int k = 0 ;					  
  k <= ( n - i - j ) ;					      	k <= ( n - i - j ) ;					      k <= ( n - i - j ) ;					  
  k ++ ) if ( i + j + k == n ) result ++ ;		      	k ++ ) if ( i + j + k == n ) result ++ ;		      k ++ ) if ( i + j + k == n ) result ++ ;			  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS	      MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		    MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		  MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS
--							      --							    --								  --
long long int findMinSum ( int a [ ] , int b [ ] , int n ) {  static long findMinSum ( long a [ ] , long b [ ] , long n ) { public static long findMinSum ( int a [ ] , int b [ ] , int n script_not_found : None
  sort ( a , a + n ) ;					      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
  sort ( b , b + n ) ;					      	Arrays . sort ( b ) ;					      Arrays . sort ( b ) ;					  
  long long int sum = 0 ;				      	long sum = 0 ;						      long sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum = sum + abs ( a [ i ] - b [ i ] ) ;	      	i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;	      i ++ ) {							  
  return sum ;						      	return sum ;						    	sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;		  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		    PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
bool isPossible ( int a [ ] , int b [ ] , int n , int k ) {   static boolean isPossible ( Integer a [ ] , int b [ ] , int n public static boolean isPossible ( int a [ ] , int b [ ] , in error : PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_
  sort ( a , a + n ) ;					      	Arrays . sort ( a , Collections . reverseOrder ( ) ) ;	      Arrays . sort ( a ) ;					  EQUAL_K.java:81: error: incompatible types: Intege
  sort ( b , b + n , greater < int > ( ) ) ;		      	Arrays . sort ( b ) ;					      Arrays . sort ( b ) ;					  r[] cannot be converted to int[]	   if(f_fill
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  ed(param0.get(i),param1.get(i),param2.get(i),param
  i < n ;						      	i < n ;							      i < n ;							  3.get(i)) == f_gold(param0.get(i),param1.get(i),pa
  i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	      	i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	      i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	  ram2.get(i),param3.get(i)))
  return true ;						      	return true ;						      return true ;						  	  ^ Note: Some messages have been simplified
}							      }								    }								  ; recompile with -Xdiags:verbose to get full outpu
							      								    								  t 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
int countNegative ( int M [ ] [ 4 ] , int n , int m ) {	      static int countNegative ( int M [ ] [ ] , int n , int m ) {  public static int countNegative ( int [ ] [ ] M , int n , int success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < m ;						      	  j < m ;						    	j < m ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( M [ i ] [ j ] < 0 ) count += 1 ;		      	    if ( M [ i ] [ j ] < 0 ) count += 1 ;		    	  if ( M [ i ] [ j ] < 0 ) {				  
      else break ;					      	    else break ;					    	    count += 1 ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return count ;					      	return count ;						    	    break ;						  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING	      CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		    CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING		  CALCULATE_SUM_OF_ALL_NUMBERS_PRESENT_IN_A_STRING
--							      --							    --								  --
int findSum ( string str ) {				      static int findSum ( String str ) {			    public static int findSum ( String str ) {			  script_not_found : None
  string temp = "" ;					      	String temp = "" ;					      String temp = "" ;					  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( char ch : str ) {				      	for ( int i = 0 ;					      for ( char ch : str . toCharArray ( ) ) {			  
    if ( isdigit ( ch ) ) temp += ch ;			      	i < str . length ( ) ;					    	if ( Character . isDigit ( ch ) ) {			  
    else {						      	i ++ ) {						    	  temp += ch ;						  
      sum += atoi ( temp . c_str ( ) ) ;		      	  char ch = str . charAt ( i ) ;			    	}							  
      temp = "" ;					      	  if ( Character . isDigit ( ch ) ) temp += ch ;	    	else {							  
    }							      	  else {						    	  sum += Integer . parseInt ( temp ) ;			  
  }							      	    sum += Integer . parseInt ( temp ) ;		    	  temp = "" ;						  
  return sum + atoi ( temp . c_str ( ) ) ;		      	    temp = "0" ;					    	}							  
}							      	  }							      }								  
							      	}							      return sum + Integer . parseInt ( temp ) ;		  
							      	return sum + Integer . parseInt ( temp ) ;		    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2
--							      --							    --								  --
int numberOfPaths ( int m , int n ) {			      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  success : None
  int dp [ n ] = {					      	int [ ] dp = new int [ n ] ;				      int [ ] dp = new int [ n ] ;				  
    1 }							      	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
    ;							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    dp [ 0 ] = 1 ;					      	i < m ;							      i < m ;							  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) {							  
    i < m ;						      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    i ++ ) {						      	  j < n ;						    	j < n ;							  
      for ( int j = 1 ;					      	  j ++ ) {						    	j ++ ) dp [ j ] += dp [ j - 1 ] ;			  
      j < n ;						      	    dp [ j ] += dp [ j - 1 ] ;				      }								  
      j ++ ) {						      	  }							      return dp [ n - 1 ] ;					  
	dp [ j ] += dp [ j - 1 ] ;			      	}							    }								  
      }							      	return dp [ n - 1 ] ;					    								  
    }							      }								    								  
    return dp [ n - 1 ] ;				      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GNOME_SORT_A_STUPID_ONE					      GNOME_SORT_A_STUPID_ONE					    GNOME_SORT_A_STUPID_ONE					  GNOME_SORT_A_STUPID_ONE
--							      --							    --								  --
void gnomeSort ( int arr [ ] , int n ) {		      static void gnomeSort ( int arr [ ] , int n ) {		    public static void gnomeSort ( int arr [ ] , int n ) {	  script_not_found : None
  int index = 0 ;					      	int index = 0 ;						      int index = 0 ;						  
  while ( index < n ) {					      	while ( index < n ) {					      while ( index < n ) {					  
    if ( index == 0 ) index ++ ;			      	  if ( index == 0 ) index ++ ;				    	if ( index == 0 ) {					  
    if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ;      	  if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ;	    	  index ++ ;						  
    else {						      	  else {						    	}							  
      swap ( arr [ index ] , arr [ index - 1 ] ) ;	      	    int temp = 0 ;					    	if ( arr [ index ] >= arr [ index - 1 ] ) {		  
      index -- ;					      	    temp = arr [ index ] ;				    	  index ++ ;						  
    }							      	    arr [ index ] = arr [ index - 1 ] ;			    	}							  
  }							      	    arr [ index - 1 ] = temp ;				    	else {							  
  return ;						      	    index -- ;						    	  Arrays . swap ( arr , index , index - 1 ) ;		  
}							      	  }							    	  index -- ;						  
							      	}							    	}							  
							      	return ;						      }								  
							      }								      return ;							  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BUBBLE_SORT						      BUBBLE_SORT						    BUBBLE_SORT							  BUBBLE_SORT
--							      --							    --								  --
void bubbleSort ( int arr [ ] , int n ) {		      void bubbleSort ( int arr [ ] ) {				    public static void bubbleSort ( int arr [ ] , int n ) {	  script_not_found : None
  int i , j ;						      	int n = arr . length ;					      int i , j ;						  
  for ( i = 0 ;						      	for ( int i = 0 ;					      for ( i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( j = 0 ;					  
  j < n - i - 1 ;					      	j < n - i - 1 ;						      j < n - i - 1 ;						  
  j ++ ) if ( arr [ j ] > arr [ j + 1 ] ) swap ( & arr [ j ]  	j ++ ) if ( arr [ j ] > arr [ j + 1 ] ) {		      j ++ ) if ( arr [ j ] > arr [ j + 1 ] ) swap ( arr , j , j  
}							      	  int temp = arr [ j ] ;				    }								  
							      	  arr [ j ] = arr [ j + 1 ] ;				    								  
							      	  arr [ j + 1 ] = temp ;				    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
int insertSorted ( int arr [ ] , int n , int key , int capaci static int insertSorted ( int arr [ ] , int n , int key , int public static int insertSorted ( int arr [ ] , int n , int ke success : None
  if ( n >= capacity ) return n ;			      	if ( n >= capacity ) return n ;				      if ( n >= capacity ) return n ;				  
  int i ;						      	int i ;							      int i ;							  
  for ( i = n - 1 ;					      	for ( i = n - 1 ;					      for ( i = n - 1 ;						  
  ( i >= 0 && arr [ i ] > key ) ;			      	( i >= 0 && arr [ i ] > key ) ;				      ( i >= 0 && arr [ i ] > key ) ;				  
  i -- ) arr [ i + 1 ] = arr [ i ] ;			      	i -- ) arr [ i + 1 ] = arr [ i ] ;			      i -- ) {							  
  arr [ i + 1 ] = key ;					      	arr [ i + 1 ] = key ;					    	arr [ i + 1 ] = arr [ i ] ;				  
  return ( n + 1 ) ;					      	return ( n + 1 ) ;					      }								  
}							      }								      arr [ i + 1 ] = key ;					  
							      								      return ( n + 1 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
int solve ( int arr [ ] , int n ) {			      static int solve ( int arr [ ] , int n ) {		    public static int solve ( int arr [ ] , int n ) {		  error : MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRA
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  Y.java:32: error: incompatible types: int cannot b
  int a = 0 , b = 0 ;					      	int a = 0 , b = 0 ;					      int a = 0 , b = 0 ;					  e converted to boolean     if ( i & 1 ) {
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						     ^ 1 error
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i & 1 ) a = a * 10 + arr [ i ] ;		      	  if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;		    	if ( i & 1 ) {						  
    else b = b * 10 + arr [ i ] ;			      	  else b = b * 10 + arr [ i ] ;				    	  a = a * 10 + arr [ i ] ;				  
  }							      	}							    	}							  
  return a + b ;					      	return a + b ;						    	else {							  
}							      }								    	  b = b * 10 + arr [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return a + b ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE			  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE
--							      --							    --								  --
void recursiveReverse ( string & str ) {		      public static String recursiveReverse ( char [ ] str ) {	    public static void recursiveReverse ( String str ) {	  script_not_found : None
  stack < char > st ;					      	Stack < Character > st = new Stack < > ( ) ;		      Stack < Character > st = new Stack < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ;					      i < str . length ( ) ;					  
  i ++ ) st . push ( str [ i ] ) ;			      	i ++ ) st . push ( str [ i ] ) ;			      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	st . push ( str . charAt ( i ) ) ;			  
  i < str . length ( ) ;				      	i < str . length ;					      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    str [ i ] = st . top ( ) ;				      	  str [ i ] = st . peek ( ) ;				      i < str . length ( ) ;					  
    st . pop ( ) ;					      	  st . pop ( ) ;					      i ++ ) {							  
  }							      	}							    	str . charAt ( i ) = st . pop ( ) ;			  
}							      	return String . valueOf ( str ) ;			    	st . push ( str . charAt ( i ) ) ;			  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
int sequence ( int n ) {				      static int sequence ( int n ) {				    public static int sequence ( int n ) {			  success : None
  int f [ n + 1 ] ;					      	int f [ ] = new int [ n + 1 ] ;				      int [ ] f = new int [ n + 1 ] ;				  
  int i ;						      	f [ 0 ] = 0 ;						      int i ;							  
  f [ 0 ] = 0 ;						      	f [ 1 ] = 1 ;						      f [ 0 ] = 0 ;						  
  f [ 1 ] = 1 ;						      	f [ 2 ] = 1 ;						      f [ 1 ] = 1 ;						  
  f [ 2 ] = 1 ;						      	int i ;							      f [ 2 ] = 1 ;						  
  for ( i = 3 ;						      	for ( i = 3 ;						      for ( i = 3 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  	i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]    i ++ ) {							  
  return f [ n ] ;					      	return f [ n ] ;					    	f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	  
}							      }								      }								  
							      								      return f [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES
--							      --							    --								  --
int countSol ( int coeff [ ] , int start , int end , int rhs  static int countSol ( int coeff [ ] , int start , int end , i public static int countSol ( int [ ] coeff , int start , int  script_not_found : None
  if ( rhs == 0 ) return 1 ;				      	if ( rhs == 0 ) return 1 ;				      if ( rhs == 0 ) return 1 ;				  
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = start ;					      	for ( int i = start ;					      for ( int i = start ;					  
  i <= end ;						      	i <= end ;						      i <= end ;						  
  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff 	i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff   i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff 
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS   GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS	  GENERATE_BINARY_PERMUTATIONS_1S_0S_EVERY_POINT_PERMUTATIONS
--							      --							    --								  --
void generate ( int ones , int zeroes , string str , int len  static void generate ( int ones , int zeroes , String str , i public static void generate ( int ones , int zeroes , String  script_not_found : None
  if ( len == str . length ( ) ) {			      	if ( len == str . length ( ) ) {			      if ( len == str . length ( ) ) {				  
    cout << str << "  " ;				      	  System . out . print ( str + " " ) ;			    	System . out . print ( str + "	" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  generate ( ones + 1 , zeroes , str + "1" , len ) ;	      	generate ( ones + 1 , zeroes , str + "1" , len ) ;	      generate ( ones + 1 , zeroes , str + "1" , len ) ;	  
  if ( ones > zeroes ) generate ( ones , zeroes + 1 , str + " 	if ( ones > zeroes ) {					      if ( ones > zeroes ) {					  
}							      	  generate ( ones , zeroes + 1 , str + "0" , len ) ;	    	generate ( ones , zeroes + 1 , str + "0" , len ) ;	  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
void insertionSortRecursive ( int arr [ ] , int n ) {	      static void insertionSortRecursive ( int arr [ ] , int n ) {  public static void insertionSortRecursive ( int arr [ ] , int script_not_found : None
  if ( n <= 1 ) return ;				      	if ( n <= 1 ) return ;					      if ( n <= 1 ) return ;					  
  insertionSortRecursive ( arr , n - 1 ) ;		      	insertionSortRecursive ( arr , n - 1 ) ;		      insertionSortRecursive ( arr , n - 1 ) ;			  
  int last = arr [ n - 1 ] ;				      	int last = arr [ n - 1 ] ;				      int last = arr [ n - 1 ] ;				  
  int j = n - 2 ;					      	int j = n - 2 ;						      int j = n - 2 ;						  
  while ( j >= 0 && arr [ j ] > last ) {		      	while ( j >= 0 && arr [ j ] > last ) {			      while ( j >= 0 && arr [ j ] > last ) {			  
    arr [ j + 1 ] = arr [ j ] ;				      	  arr [ j + 1 ] = arr [ j ] ;				    	arr [ j + 1 ] = arr [ j ] ;				  
    j -- ;						      	  j -- ;						    	j -- ;							  
  }							      	}							      }								  
  arr [ j + 1 ] = last ;				      	arr [ j + 1 ] = last ;					      arr [ j + 1 ] = last ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			      REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			    REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S			  REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S
--							      --							    --								  --
string replace ( string s , char c1 , char c2 ) {	      static String replace ( String s , char c1 , char c2 ) {	    public static String replace ( String s , char c1 , char c2 ) error : REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S.jav
  int l = s . length ( ) ;				      	int l = s . length ( ) ;				      int l = s . length ( ) ;					  a:32: error: cannot find symbol	s . setCharA
  for ( int i = 0 ;					      	char [ ] arr = s . toCharArray ( ) ;			      for ( int i = 0 ;						  t ( i , c2 ) ;	 ^   symbol:   method setCha
  i < l ;						      	for ( int i = 0 ;					      i < l ;							  rAt(int,char)	  location: variable s of type Strin
  i ++ ) {						      	i < l ;							      i ++ ) {							  g REPLACE_CHARACTER_C1_C2_C2_C1_STRING_S.java:35:
    if ( s [ i ] == c1 ) s [ i ] = c2 ;			      	i ++ ) {						    	if ( s . charAt ( i ) == c1 ) {				  error: cannot find symbol	  s . setCharAt ( i
    else if ( s [ i ] == c2 ) s [ i ] = c1 ;		      	  if ( arr [ i ] == c1 ) arr [ i ] = c2 ;		    	  s . setCharAt ( i , c2 ) ;				  , c1 ) ;	   ^   symbol:	 method setCharAt(in
  }							      	  else if ( arr [ i ] == c2 ) arr [ i ] = c1 ;		    	}							  t,char)   location: variable s of type String 2 er
  return s ;						      	}							    	else if ( s . charAt ( i ) == c2 ) {			  rors
}							      	return String . valueOf ( arr ) ;			    	  s . setCharAt ( i , c1 ) ;				  
							      }								    	}							  
							      								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	      WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	    WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO	  WAYS_REMOVE_ONE_ELEMENT_BINARY_STRING_XOR_BECOMES_ZERO
--							      --							    --								  --
int xorZero ( string str ) {				      static int xorZero ( String s ) {				    public static int xorZero ( String str ) {			  success : None
  int one_count = 0 , zero_count = 0 ;			      	int one_count = 0 , zero_count = 0 ;			      int oneCount = 0 , zeroCount = 0 ;			  
  int n = str . length ( ) ;				      	char [ ] str = s . toCharArray ( ) ;			      int n = str . length ( ) ;				  
  for ( int i = 0 ;					      	int n = str . length ;					      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) if ( str [ i ] == '1' ) one_count ++ ;		      	i < n ;							      i ++ ) if ( str . charAt ( i ) == '1' ) oneCount ++ ;	  
  else zero_count ++ ;					      	i ++ ) if ( str [ i ] == '1' ) one_count ++ ;		      else zeroCount ++ ;					  
  if ( one_count % 2 == 0 ) return zero_count ;		      	else zero_count ++ ;					      if ( oneCount % 2 == 0 ) return zeroCount ;		  
  return one_count ;					      	if ( one_count % 2 == 0 ) return zero_count ;		      return oneCount ;						  
}							      	return one_count ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
int countNegative ( int M [ ] [ 4 ] , int n , int m ) {	      static int countNegative ( int M [ ] [ ] , int n , int m ) {  public static int countNegative ( int [ ] [ ] M , int n , int success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  int j = m - 1 ;					      	int j = m - 1 ;						      int j = m - 1 ;						  
  while ( j >= 0 && i < n ) {				      	while ( j >= 0 && i < n ) {				      while ( j >= 0 && i < n ) {				  
    if ( M [ i ] [ j ] < 0 ) {				      	  if ( M [ i ] [ j ] < 0 ) {				    	if ( M [ i ] [ j ] < 0 ) {				  
      count += j + 1 ;					      	    count += j + 1 ;					    	  count += j + 1 ;					  
      i += 1 ;						      	    i += 1 ;						    	  i += 1 ;						  
    }							      	  }							    	}							  
    else j -= 1 ;					      	  else j -= 1 ;						    	else {							  
  }							      	}							    	  j -= 1 ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LAST_NON_ZERO_DIGIT_FACTORIAL				      LAST_NON_ZERO_DIGIT_FACTORIAL				    LAST_NON_ZERO_DIGIT_FACTORIAL				  LAST_NON_ZERO_DIGIT_FACTORIAL
--							      --							    --								  --
int lastNon0Digit ( int n ) {				      static int lastNon0Digit ( int n ) {			    public static int lastNon0Digit ( int n ) {			  script_not_found : None
  if ( n < 10 ) return dig [ n ] ;			      	if ( n < 10 ) return dig [ n ] ;			      if ( n < 10 ) return dig [ n ] ;				  
  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Di 	if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Di   if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Di 
  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ]  	else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ]    else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ]  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION
--							      --							    --								  --
long int exponentiation ( long int base , long int exp ) {    static long exponentiation ( long base , long exp ) {	    public static long exponentiation ( long base , long exp ) {  script_not_found : None
  if ( exp == 0 ) return 1 ;				      	if ( exp == 0 ) return 1 ;				      if ( exp == 0 ) return 1 ;				  
  if ( exp == 1 ) return base % N ;			      	if ( exp == 1 ) return base % N ;			      if ( exp == 1 ) return base % N ;				  
  long int t = exponentiation ( base , exp / 2 ) ;	      	long t = exponentiation ( base , exp / 2 ) ;		      long t = exponentiation ( base , exp / 2 ) ;		  
  t = ( t * t ) % N ;					      	t = ( t * t ) % N ;					      t = ( t * t ) % N ;					  
  if ( exp % 2 == 0 ) return t ;			      	if ( exp % 2 == 0 ) return t ;				      if ( exp % 2 == 0 ) return t ;				  
  else return ( ( base % N ) * t ) % N ;		      	else return ( ( base % N ) * t ) % N ;			      else return ( ( base % N ) * t ) % N ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
bool isIdentity ( int mat [ ] [ MAX ] , int N ) {	      static boolean isIdentity ( int mat [ ] [ ] , int N ) {	    public static boolean isIdentity ( int mat [ ] [ ] , int N )  success : None
  for ( int row = 0 ;					      	for ( int row = 0 ;					      for ( int row = 0 ;					  
  row < N ;						      	row < N ;						      row < N ;							  
  row ++ ) {						      	row ++ ) {						      row ++ ) {						  
    for ( int col = 0 ;					      	  for ( int col = 0 ;					    	for ( int col = 0 ;					  
    col < N ;						      	  col < N ;						    	col < N ;						  
    col ++ ) {						      	  col ++ ) {						    	col ++ ) {						  
      if ( row == col && mat [ row ] [ col ] != 1 ) return fa 	    if ( row == col && mat [ row ] [ col ] != 1 ) return fa 	  if ( row == col && mat [ row ] [ col ] != 1 ) {	  
      else if ( row != col && mat [ row ] [ col ] != 0 ) retu 	    else if ( row != col && mat [ row ] [ col ] != 0 ) retu 	    return false ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else if ( row != col && mat [ row ] [ col ] != 0 ) {	  
  return true ;						      	return true ;						    	    return false ;					  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_EXTRA_CHARACTER_STRING_1			      FIND_ONE_EXTRA_CHARACTER_STRING_1				    FIND_ONE_EXTRA_CHARACTER_STRING_1				  FIND_ONE_EXTRA_CHARACTER_STRING_1
--							      --							    --								  --
char findExtraCharcter ( string strA , string strB ) {	      static char findExtraCharcter ( String strA , String strB ) { public static char findExtraCharcter ( String strA , String s success : None
  int res = 0 , i ;					      	int res = 0 , i ;					      int res = 0 , i ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < strA . length ( ) ;				      	i < strA . length ( ) ;					      i < strA . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) res ^= strA . charAt ( i ) ;			  
    res ^= strA [ i ] ;					      	  res ^= strA . charAt ( i ) ;				      for ( i = 0 ;						  
  }							      	}							      i < strB . length ( ) ;					  
  for ( i = 0 ;						      	for ( i = 0 ;						      i ++ ) res ^= strB . charAt ( i ) ;			  
  i < strB . length ( ) ;				      	i < strB . length ( ) ;					      return ( ( char ) ( res ) ) ;				  
  i ++ ) {						      	i ++ ) {						    }								  
    res ^= strB [ i ] ;					      	  res ^= strB . charAt ( i ) ;				    								  
  }							      	}							    								  
  return ( ( char ) ( res ) ) ;				      	return ( ( char ) ( res ) ) ;				    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	      WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	    WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS	  WAYS_TO_WRITE_N_AS_SUM_OF_TWO_OR_MORE_POSITIVE_INTEGERS
--							      --							    --								  --
int countWays ( int n ) {				      static int countWays ( int n ) {				    public static int countWays ( int n ) {			  success : None
  int table [ n + 1 ] ;					      	int table [ ] = new int [ n + 1 ] ;			      int [ ] table = new int [ n + 1 ] ;			  
  memset ( table , 0 , sizeof ( table ) ) ;		      	Arrays . fill ( table , 0 ) ;				      Arrays . fill ( table , 0 ) ;				  
  table [ 0 ] = 1 ;					      	table [ 0 ] = 1 ;					      table [ 0 ] = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i ;				      	i ++ ) for ( int j = i ;				      i ++ ) for ( int j = i ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) table [ j ] += table [ j - i ] ;		      	j ++ ) table [ j ] += table [ j - i ] ;			      j ++ ) table [ j ] += table [ j - i ] ;			  
  return table [ n ] ;					      	return table [ n ] ;					      return table [ n ] ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS		  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS
--							      --							    --								  --
int countPairs ( string str ) {				      static int countPairs ( String str ) {			    public static int countPairs ( String str ) {		  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j )  	j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt    j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR				      FIND_MINIMUM_DIFFERENCE_PAIR				    FIND_MINIMUM_DIFFERENCE_PAIR				  FIND_MINIMUM_DIFFERENCE_PAIR
--							      --							    --								  --
int findMinDiff ( int arr [ ] , int n ) {		      static int findMinDiff ( int [ ] arr , int n ) {		    public static int findMinDiff ( int arr [ ] , int n ) {	  success : None
  int diff = INT_MAX ;					      	int diff = Integer . MAX_VALUE ;			      int diff = Integer . MAX_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = a 	j ++ ) if ( Math . abs ( ( arr [ i ] - arr [ j ] ) ) < diff   j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) < diff ) d 
  return diff ;						      	return diff ;						      return diff ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
int countPairsWithDiffK ( int arr [ ] , int n , int k ) {     static int countPairsWithDiffK ( int arr [ ] , int n , int k  public static int countPairsWithDiffK ( int arr [ ] , int n , success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 	  j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 	j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
bool checkIsAP ( int arr [ ] , int n ) {		      static boolean checkIsAP ( int arr [ ] , int n ) {	    public static boolean checkIsAP ( int arr [ ] , int n ) {	  success : None
  if ( n == 1 ) return true ;				      	if ( n == 1 ) return true ;				      if ( n == 1 ) return true ;				  
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int d = arr [ 1 ] - arr [ 0 ] ;			      	int d = arr [ 1 ] - arr [ 0 ] ;				      int d = arr [ 1 ] - arr [ 0 ] ;				  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; 	i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;   i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION		      DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			    DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION			  DISTRIBUTING_ALL_BALLS_WITHOUT_REPETITION
--							      --							    --								  --
bool distributingBalls ( int k , int n , string str ) {	      static boolean distributingBalls ( long k , long n , String s public static boolean distributingBalls ( int k , int n , Str script_not_found : None
  int a [ MAX_CHAR ] = {				      	int [ ] a = new int [ MAX_CHAR ] ;			      int [ ] a = new int [ str . length ( ) ] ;		  
    0 }							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ;							      	i < n ;							      i < n ;							  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) a [ str . charAt ( i ) - 'a' ] ++ ;		  
    i < n ;						      	  a [ str . charAt ( i ) - 'a' ] ++ ;			      for ( int i = 0 ;						  
    i ++ ) {						      	}							      i < a . length ;						  
      a [ str [ i ] - 'a' ] ++ ;			      	for ( int i = 0 ;					      i ++ ) if ( a [ i ] > k ) return false ;			  
    }							      	i < MAX_CHAR ;						      return true ;						  
    for ( int i = 0 ;					      	i ++ ) if ( a [ i ] > k ) return false ;		    }								  
    i < MAX_CHAR ;					      	return true ;						    								  
    i ++ ) if ( a [ i ] > k ) return false ;		      }								    								  
    return true ;					      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE SEARCH_AN_ELEMENT_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACE
--							      --							    --								  --
int search ( int arr [ ] , int n , int x ) {		      static int search ( int arr [ ] , int n , int x ) {	    public static int search ( int arr [ ] , int n , int x ) {	  success : None
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( i < n ) {					      	while ( i < n ) {					      while ( i < n ) {						  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
    i = i + abs ( arr [ i ] - x ) ;			      	  i = i + Math . abs ( arr [ i ] - x ) ;		    	i = i + Math . abs ( arr [ i ] - x ) ;			  
  }							      	}							      }								  
  cout << "number is not present!" ;			      	System . out . println ( "number is not" + " present!" ) ;    System . out . println ( "number is not present!" ) ;	  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_ARRAY_ADJACENT_DIFFER_K			      SEARCHING_ARRAY_ADJACENT_DIFFER_K				    SEARCHING_ARRAY_ADJACENT_DIFFER_K				  SEARCHING_ARRAY_ADJACENT_DIFFER_K
--							      --							    --								  --
int search ( int arr [ ] , int n , int x , int k ) {	      static int search ( int arr [ ] , int n , int x , int k ) {   public static int search ( int arr [ ] , int n , int x , int  success : None
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( i < n ) {					      	while ( i < n ) {					      while ( i < n ) {						  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
    i = i + max ( 1 , abs ( arr [ i ] - x ) / k ) ;	      	  i = i + Math . max ( 1 , Math . abs ( arr [ i ] - x ) / k 	i = i + Math . max ( 1 , Math . abs ( arr [ i ] - x ) / k 
  }							      	}							      }								  
  cout << "number is not present!" ;			      	System . out . println ( "number is " + "not present!" ) ;    System . out . println ( "number is not present!" ) ;	  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_23_45_67_89_UPTO_N_TERMS			      SUM_SERIES_23_45_67_89_UPTO_N_TERMS			    SUM_SERIES_23_45_67_89_UPTO_N_TERMS				  SUM_SERIES_23_45_67_89_UPTO_N_TERMS
--							      --							    --								  --
double seriesSum ( int n ) {				      static double seriesSum ( int n ) {			    public static double seriesSum ( int n ) {			  success : None
  int i = 1 ;						      	int i = 1 ;						      int i = 1 ;						  
  double res = 0.0 ;					      	double res = 0.0 ;					      double res = 0.0 ;					  
  bool sign = true ;					      	boolean sign = true ;					      boolean sign = true ;					  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    n -- ;						      	  n -- ;						    	n -- ;							  
    if ( sign ) {					      	  if ( sign ) {						    	if ( sign ) {						  
      sign = ! sign ;					      	    sign = ! sign ;					    	  sign = ! sign ;					  
      res = res + ( double ) ++ i / ++ i ;		      	    res = res + ( double ) ++ i / ++ i ;		    	  res = res + ( double ) ++ i / ++ i ;			  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      sign = ! sign ;					      	    sign = ! sign ;					    	  sign = ! sign ;					  
      res = res - ( double ) ++ i / ++ i ;		      	    res = res - ( double ) ++ i / ++ i ;		    	  res = res - ( double ) ++ i / ++ i ;			  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM
--							      --							    --								  --
int maxLen ( int arr [ ] , int n ) {			      static int maxLen ( int arr [ ] , int n ) {		    public static int maxLen ( int arr [ ] , int n ) {		  success : None
  int max_len = 0 ;					      	int max_len = 0 ;					      int maxLen = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int curr_sum = 0 ;					      	  int curr_sum = 0 ;					    	int currSum = 0 ;					  
    for ( int j = i ;					      	  for ( int j = i ;					    	for ( int j = i ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      curr_sum += arr [ j ] ;				      	    curr_sum += arr [ j ] ;				    	  currSum += arr [ j ] ;				  
      if ( curr_sum == 0 ) max_len = max ( max_len , j - i +  	    if ( curr_sum == 0 ) max_len = Math . max ( max_len , j 	  if ( currSum == 0 ) {					  
    }							      	  }							    	    maxLen = Math . max ( maxLen , j - i + 1 ) ;	  
  }							      	}							    	  }							  
  return max_len ;					      	return max_len ;					    	}							  
}							      }								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2
--							      --							    --								  --
int singleNumber ( int a [ ] , int n ) {		      static int singleNumber ( int a [ ] , int n ) {		    public static int singleNumber ( int a [ ] , int n ) {	  error : FIND_THE_ELEMENT_THAT_APPEARS_ONCE_2.java:
  unordered_set < int > s ( a , a + n ) ;		      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( a ) ;		  31: error: cannot infer type arguments for HashSet
  int arr_sum = accumulate ( a , a + n , 0 ) ;		      	for ( int i : a ) {					      int arr_sum = Arrays . stream ( a ) . mapToInt ( i -> 0 ) . <>   HashSet < Integer > s = new HashSet < > ( a )
  int set_sum = accumulate ( s . begin ( ) , s . end ( ) , 0  	  s . add ( i ) ;					      int set_sum = Arrays . stream ( s ) . mapToInt ( i -> 0 ) .  ;			       ^ FIND_THE_ELEMENT_TH
  return ( 3 * set_sum - arr_sum ) / 2 ;		      	}							      return ( 3 * set_sum - arr_sum ) / 2 ;			  AT_APPEARS_ONCE_2.java:32: error: cannot find symb
}							      	int arr_sum = 0 ;					    }								  ol   int arr_sum = Arrays . stream ( a ) . mapToIn
							      	for ( int i : a ) {					    								  t ( i -> 0 ) . sum ( ) ;
							      	  arr_sum += i ;					    								  	       ^   symbol:   method mapToInt((i)->0)
							      	}							    								     location: interface IntStream FIND_THE_ELEMENT_
							      	int set_sum = 0 ;					    								  THAT_APPEARS_ONCE_2.java:33: error: no suitable me
							      	for ( int i : s ) {					    								  thod found for stream(HashSet<Integer>)   int set_
							      	  set_sum += i ;					    								  sum = Arrays . stream ( s ) . mapToInt ( i -> 0 )
							      	}							    								  . sum ( ) ;			     ^	   method Ar
							      	return ( 3 * set_sum - arr_sum ) / 2 ;			    								  rays.<T#1>stream(T#1[]) is not applicable	  (c
							      }								    								  annot infer type-variable(s) T#1	   (argument
							      								    								   mismatch; HashSet<Integer> cannot be converted to
							      								    								   T#1[]))     method Arrays.<T#2>stream(T#2[],int,i
							      								    								  nt) is not applicable	      (cannot infer type-var
							      								    								  iable(s) T#2	       (actual and formal argument l
							      								    								  ists differ in length))     method Arrays.stream(i
							      								    								  nt[]) is not applicable	(argument mismatch;
							      								    								  HashSet<Integer> cannot be converted to int[])
							      								    								   method Arrays.stream(long[]) is not applicable
							      								    								      (argument mismatch; HashSet<Integer> cannot be
							      								    								   converted to long[])	    method Arrays.stream(dou
							      								    								  ble[]) is not applicable	 (argument mismatch;
							      								    								   HashSet<Integer> cannot be converted to double[])
							      								    								     where T#1,T#2 are type-variables:	   T#1 exten
							      								    								  ds Object declared in method <T#1>stream(T#1[])
							      								    								    T#2 extends Object declared in method <T#2>strea
							      								    								  m(T#2[],int,int) Note: Some messages have been sim
							      								    								  plified; recompile with -Xdiags:verbose to get ful
							      								    								  l output 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH						      BINARY_SEARCH						    BINARY_SEARCH						  BINARY_SEARCH
--							      --							    --								  --
int binarySearch ( int arr [ ] , int l , int r , int x ) {    int binarySearch ( int arr [ ] , int l , int r , int x ) {    public static int binarySearch ( int arr [ ] , int l , int r  success : None
  if ( r >= l ) {					      	if ( r >= l ) {						      if ( r >= l ) {						  
    int mid = l + ( r - l ) / 2 ;			      	  int mid = l + ( r - l ) / 2 ;				    	int mid = l + ( r - l ) / 2 ;				  
    if ( arr [ mid ] == x ) return mid ;		      	  if ( arr [ mid ] == x ) return mid ;			    	if ( arr [ mid ] == x ) return mid ;			  
    if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 	  if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 	if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 
    return binarySearch ( arr , mid + 1 , r , x ) ;	      	  return binarySearch ( arr , mid + 1 , r , x ) ;	    	return binarySearch ( arr , mid + 1 , r , x ) ;		  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		      FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		    FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B		  FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIAL_B
--							      --							    --								  --
int computeLastDigit ( long long int A , long long int B ) {  static int computeLastDigit ( long A , long B ) {		    public static int computeLastDigit ( long A , long B ) {	  error : FIND_LAST_DIGIT_FACTORIAL_DIVIDES_FACTORIA
  int variable = 1 ;					      	int variable = 1 ;					      int variable = 1 ;					  L_B.java:38: error: incompatible types: possible l
  if ( A == B ) return 1 ;				      	if ( A == B ) return 1 ;				      if ( A == B ) {						  ossy conversion from long to int	 variable =
  else if ( ( B - A ) >= 5 ) return 0 ;			      	else if ( ( B - A ) >= 5 ) return 0 ;			    	return 1 ;						  ( variable * ( i % 10 ) ) % 10 ;
  else {						      	else {							      }								  			    ^ 1 error
    for ( long long int i = A + 1 ;			      	  for ( long i = A + 1 ;				      else if ( ( B - A ) >= 5 ) {				  
    i <= B ;						      	  i <= B ;						    	return 0 ;						  
    i ++ ) variable = ( variable * ( i % 10 ) ) % 10 ;	      	  i ++ ) variable = ( int ) ( variable * ( i % 10 ) ) % 10    }								  
    return variable % 10 ;				      	  return variable % 10 ;				      else {							  
  }							      	}							    	for ( long i = A + 1 ;					  
}							      }								    	i <= B ;						  
							      								    	i ++ ) {						  
							      								    	  variable = ( variable * ( i % 10 ) ) % 10 ;		  
							      								    	}							  
							      								    	return variable % 10 ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES
--							      --							    --								  --
int getOddOccurrence ( int arr [ ] , int arr_size ) {	      static int getOddOccurrence ( int arr [ ] , int arr_size ) {  public static int getOddOccurrence ( int arr [ ] , int arr_si success : None
  for ( int i = 0 ;					      	int i ;							      for ( int i = 0 ;						  
  i < arr_size ;					      	for ( i = 0 ;						      i < arr_size ;						  
  i ++ ) {						      	i < arr_size ;						      i ++ ) {							  
    int count = 0 ;					      	i ++ ) {						    	int count = 0 ;						  
    for ( int j = 0 ;					      	  int count = 0 ;					    	for ( int j = 0 ;					  
    j < arr_size ;					      	  for ( int j = 0 ;					    	j < arr_size ;						  
    j ++ ) {						      	  j < arr_size ;					    	j ++ ) {						  
      if ( arr [ i ] == arr [ j ] ) count ++ ;		      	  j ++ ) {						    	  if ( arr [ i ] == arr [ j ] ) {			  
    }							      	    if ( arr [ i ] == arr [ j ] ) count ++ ;		    	    count ++ ;						  
    if ( count % 2 != 0 ) return arr [ i ] ;		      	  }							    	  }							  
  }							      	  if ( count % 2 != 0 ) return arr [ i ] ;		    	}							  
  return - 1 ;						      	}							    	if ( count % 2 != 0 ) {					  
}							      	return - 1 ;						    	  return arr [ i ] ;					  
							      }								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIRROR_CHARACTERS_STRING				      MIRROR_CHARACTERS_STRING					    MIRROR_CHARACTERS_STRING					  MIRROR_CHARACTERS_STRING
--							      --							    --								  --
string compute ( string str , int n ) {			      static String compute ( String str , int n ) {		    public static String compute ( String str , int n ) {	  script_not_found : None
  string reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba" ;     	String reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba" ;	      char [ ] reverseAlphabet = "zyxwvutsrqponmlkjihgfedcba" . t 
  int l = str . length ( ) ;				      	int l = str . length ( ) ;				      int l = str . length ( ) ;				  
  for ( int i = n ;					      	String answer = "" ;					      for ( int i = n ;						  
  i < l ;						      	for ( int i = 0 ;					      i < l ;							  
  i ++ ) str [ i ] = reverseAlphabet [ str [ i ] - 'a' ] ;    	i < n ;							      i ++ ) {							  
  return str ;						      	i ++ ) answer = answer + str . charAt ( i ) ;		    	str . setCharAt ( i , reverseAlphabet [ str . charAt ( i  
}							      	for ( int i = n ;					      }								  
							      	i < l ;							      return str ;						  
							      	i ++ ) answer = answer + reverseAlphabet . charAt ( str . c }								  
							      	return answer ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			      SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			    SUM_MANHATTAN_DISTANCES_PAIRS_POINTS			  SUM_MANHATTAN_DISTANCES_PAIRS_POINTS
--							      --							    --								  --
int distancesum ( int x [ ] , int y [ ] , int n ) {	      static int distancesum ( int x [ ] , int y [ ] , int n ) {    public static int distancesum ( int x [ ] , int y [ ] , int n success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - 	j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . a   j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . a 
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_4_NOT
--							      --							    --								  --
bool check ( string str ) {				      static boolean check ( String str ) {			    public static boolean check ( String str ) {		  success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  if ( n == 0 ) return false ;				      	if ( n == 0 ) return false ;				      if ( n == 0 ) {						  
  if ( n == 1 ) return ( ( str [ 0 ] - '0' ) % 4 == 0 ) ;     	if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 4 ==  	return false ;						  
  int last = str [ n - 1 ] - '0' ;			      	int last = str . charAt ( n - 1 ) - '0' ;		      }								  
  int second_last = str [ n - 2 ] - '0' ;		      	int second_last = str . charAt ( n - 2 ) - '0' ;	      if ( n == 1 ) {						  
  return ( ( second_last * 10 + last ) % 4 == 0 ) ;	      	return ( ( second_last * 10 + last ) % 4 == 0 ) ;	    	return ( ( str . charAt ( 0 ) - '0' ) % 4 == 0 ) ;	  
}							      }								      }								  
							      								      int last = str . charAt ( n - 1 ) - '0' ;			  
							      								      int second_last = str . charAt ( n - 2 ) - '0' ;		  
							      								      return ( ( second_last * 10 + last ) % 4 == 0 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			      CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			    CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT			  CHECK_IF_TWO_ARRAYS_ARE_EQUAL_OR_NOT
--							      --							    --								  --
bool areEqual ( int arr1 [ ] , int arr2 [ ] , int n , int m ) public static boolean areEqual ( int arr1 [ ] , int arr2 [ ]  public static boolean areEqual ( int arr1 [ ] , int arr2 [ ]  script_not_found : None
  if ( n != m ) return false ;				      	int n = arr1 . length ;					      if ( n != m ) return false ;				  
  sort ( arr1 , arr1 + n ) ;				      	int m = arr2 . length ;					      Arrays . sort ( arr1 ) ;					  
  sort ( arr2 , arr2 + m ) ;				      	if ( n != m ) return false ;				      Arrays . sort ( arr2 ) ;					  
  for ( int i = 0 ;					      	Arrays . sort ( arr1 ) ;				      for ( int i = 0 ;						  
  i < n ;						      	Arrays . sort ( arr2 ) ;				      i < n ;							  
  i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ;	      	for ( int i = 0 ;					      i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ;	  
  return true ;						      	i < n ;							      return true ;						  
}							      	i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ;	    }								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		      FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		    FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY		  FIND_THE_MAXIMUM_SUBARRAY_XOR_IN_A_GIVEN_ARRAY
--							      --							    --								  --
int maxSubarrayXOR ( int arr [ ] , int n ) {		      static int maxSubarrayXOR ( int arr [ ] , int n ) {	    public static int maxSubarrayXOR ( int arr [ ] , int n ) {	  success : None
  int ans = INT_MIN ;					      	int ans = Integer . MIN_VALUE ;				      int ans = Integer . MIN_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int curr_xor = 0 ;					      	  int curr_xor = 0 ;					    	int currXor = 0 ;					  
    for ( int j = i ;					      	  for ( int j = i ;					    	for ( int j = i ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      curr_xor = curr_xor ^ arr [ j ] ;			      	    curr_xor = curr_xor ^ arr [ j ] ;			    	  currXor = currXor ^ arr [ j ] ;			  
      ans = max ( ans , curr_xor ) ;			      	    ans = Math . max ( ans , curr_xor ) ;		    	  ans = Math . max ( ans , currXor ) ;			  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	      FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	    FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE	  FIND_MINIMUM_RADIUS_ATLEAST_K_POINT_LIE_INSIDE_CIRCLE
--							      --							    --								  --
int minRadius ( int k , int x [ ] , int y [ ] , int n ) {     static int minRadius ( int k , int [ ] x , int [ ] y , int n  public static int minRadius ( int k , int [ ] x , int [ ] y , script_not_found : None
  int dis [ n ] ;					      	int [ ] dis = new int [ n ] ;				      int [ ] dis = new int [ n ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ;  	i ++ ) dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ;    i ++ ) {							  
  sort ( dis , dis + n ) ;				      	Arrays . sort ( dis ) ;					    	dis [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] ;	  
  return dis [ k - 1 ] ;				      	return dis [ k - 1 ] ;					      }								  
}							      }								      Arrays . sort ( dis ) ;					  
							      								      return dis [ k - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1	      PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1	    PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1	  PRIMALITY_TEST_SET_1_INTRODUCTION_AND_SCHOOL_METHOD_1
--							      --							    --								  --
bool isPrime ( int n ) {				      static boolean isPrime ( int n ) {			    public static boolean isPrime ( int n ) {			  success : None
  if ( n <= 1 ) return false ;				      	if ( n <= 1 ) return false ;				      if ( n <= 1 ) return false ;				  
  if ( n <= 3 ) return true ;				      	if ( n <= 3 ) return true ;				      if ( n <= 3 ) return true ;				  
  if ( n % 2 == 0 || n % 3 == 0 ) return false ;	      	if ( n % 2 == 0 || n % 3 == 0 ) return false ;		      if ( n % 2 == 0 || n % 3 == 0 ) return false ;		  
  for ( int i = 5 ;					      	for ( int i = 5 ;					      for ( int i = 5 ;						  
  i * i <= n ;						      	i * i <= n ;						      i * i <= n ;						  
  i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return  	i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return    i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	      GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	    GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND	  GIVEN_TWO_STRINGS_FIND_FIRST_STRING_SUBSEQUENCE_SECOND
--							      --							    --								  --
bool isSubSequence ( char str1 [ ] , char str2 [ ] , int m ,  static boolean isSubSequence ( String str1 , String str2 , in public static boolean isSubSequence ( char str1 [ ] , char st script_not_found : None
  if ( m == 0 ) return true ;				      	if ( m == 0 ) return true ;				      if ( m == 0 ) return true ;				  
  if ( n == 0 ) return false ;				      	if ( n == 0 ) return false ;				      if ( n == 0 ) return false ;				  
  if ( str1 [ m - 1 ] == str2 [ n - 1 ] ) return isSubSequenc 	if ( str1 . charAt ( m - 1 ) == str2 . charAt ( n - 1 ) ) r   if ( str1 [ m - 1 ] == str2 [ n - 1 ] ) return isSubSequenc 
  return isSubSequence ( str1 , str2 , m , n - 1 ) ;	      	return isSubSequence ( str1 , str2 , m , n - 1 ) ;	      return isSubSequence ( str1 , str2 , m , n - 1 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_NEXT_STRING				      LEXICOGRAPHICALLY_NEXT_STRING				    LEXICOGRAPHICALLY_NEXT_STRING				  LEXICOGRAPHICALLY_NEXT_STRING
--							      --							    --								  --
string nextWord ( string s ) {				      public static String nextWord ( String str ) {		    public static String nextWord ( String s ) {		  error : LEXICOGRAPHICALLY_NEXT_STRING.java:33: err
  if ( s == "" ) return "a" ;				      	if ( str == "" ) return "a" ;				      if ( s . equals ( "" ) ) return "a" ;			  or: unexpected type	  s . charAt ( i ) ++ ;
  int i = s . length ( ) - 1 ;				      	int i = str . length ( ) - 1 ;				      int i = s . length ( ) - 1 ;				  	     ^	 required: variable   found:	valu
  while ( s [ i ] == 'z' && i >= 0 ) i -- ;		      	while ( str . charAt ( i ) == 'z' && i >= 0 ) i -- ;	      while ( s . charAt ( i ) == 'z' && i >= 0 ) {		  e 1 error
  if ( i == - 1 ) s = s + 'a' ;				      	if ( i == - 1 ) str = str + 'a' ;			    	i -- ;							  
  else s [ i ] ++ ;					      	else str = str . substring ( 0 , i ) + ( char ) ( ( int ) (   }								  
  return s ;						      	return str ;						      if ( i == - 1 ) {						  
}							      }								    	s = s + 'a' ;						  
							      								      }								  
							      								      else {							  
							      								    	s . charAt ( i ) ++ ;					  
							      								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_CONSECUTIVE_DUPLICATES_STRING			      REMOVE_CONSECUTIVE_DUPLICATES_STRING			    REMOVE_CONSECUTIVE_DUPLICATES_STRING			  REMOVE_CONSECUTIVE_DUPLICATES_STRING
--							      --							    --								  --
void removeDuplicates ( char S [ ] ) {			      static void removeDuplicates ( char [ ] S ) {		    public static void removeDuplicates ( char [ ] S ) {	  script_not_found : None
  int n = strlen ( S ) ;				      	int n = S . length ;					      int n = S . length ;					  
  if ( n < 2 ) return ;					      	if ( n < 2 ) {						      if ( n < 2 ) return ;					  
  int j = 0 ;						      	  return ;						      int j = 0 ;						  
  for ( int i = 1 ;					      	}							      for ( int i = 1 ;						  
  i < n ;						      	int j = 0 ;						      i < n ;							  
  i ++ ) {						      	for ( int i = 1 ;					      i ++ ) {							  
    if ( S [ j ] != S [ i ] ) {				      	i < n ;							    	if ( S [ j ] != S [ i ] ) {				  
      j ++ ;						      	i ++ ) {						    	  j ++ ;						  
      S [ j ] = S [ i ] ;				      	  if ( S [ j ] != S [ i ] ) {				    	  S [ j ] = S [ i ] ;					  
    }							      	    j ++ ;						    	}							  
  }							      	    S [ j ] = S [ i ] ;					      }								  
  j ++ ;						      	  }							      j ++ ;							  
  S [ j ] = '\0' ;					      	}							      S [ j ] = '\0' ;						  
}							      	System . out . println ( Arrays . copyOfRange ( S , 0 , j + }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		      AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		    AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES		  AREA_OF_A_POLYGON_WITH_GIVEN_N_ORDERED_VERTICES
--							      --							    --								  --
double polygonArea ( double X [ ] , double Y [ ] , int n ) {  public static double polygonArea ( double X [ ] , double Y [  public static double polygonArea ( double [ ] X , double [ ]  script_not_found : None
  double area = 0.0 ;					      	double area = 0.0 ;					      double area = 0.0 ;					  
  int j = n - 1 ;					      	int j = n - 1 ;						      int j = n - 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	  area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;   	area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;	  
    j = i ;						      	  j = i ;						    	j = i ;							  
  }							      	}							      }								  
  return abs ( area / 2.0 ) ;				      	return Math . abs ( area / 2.0 ) ;			      return Math . abs ( area / 2.0 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			      CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			    CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT			  CHECK_STRING_FOLLOWS_ANBN_PATTERN_NOT
--							      --							    --								  --
bool isAnBn ( string str ) {				      public static boolean isAnBn ( String s ) {		    public static boolean isAnBn ( String str ) {		  success : None
  int n = str . length ( ) ;				      	int l = s . length ( ) ;				      int n = str . length ( ) ;				  
  int i ;						      	if ( l % 2 == 1 ) {					      int i ;							  
  for ( i = 0 ;						      	  return false ;					      for ( i = 0 ;						  
  i < n ;						      	}							      i < n ;							  
  i ++ ) if ( str [ i ] != 'a' ) break ;		      	int i = 0 ;						      i ++ ) if ( str . charAt ( i ) != 'a' ) break ;		  
  if ( i * 2 != n ) return false ;			      	int j = l - 1 ;						      if ( i * 2 != n ) return false ;				  
  int j ;						      	while ( i < j ) {					      int j ;							  
  for ( j = i ;						      	  if ( s . charAt ( i ) != 'a' || s . charAt ( j ) != 'b' )   for ( j = i ;						  
  j < n ;						      	    return false ;					      j < n ;							  
  j ++ ) if ( str [ j ] != 'b' ) return false ;		      	  }							      j ++ ) if ( str . charAt ( j ) != 'b' ) return false ;	  
  return true ;						      	  i ++ ;						      return true ;						  
}							      	  j -- ;						    }								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				      EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				    EQUILIBRIUM_INDEX_OF_AN_ARRAY_1				  EQUILIBRIUM_INDEX_OF_AN_ARRAY_1
--							      --							    --								  --
int equilibrium ( int arr [ ] , int n ) {		      int equilibrium ( int arr [ ] , int n ) {			    public static int equilibrium ( int arr [ ] , int n ) {	  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  int leftsum = 0 ;					      	int leftsum = 0 ;					      int leftsum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  ++ i ) sum += arr [ i ] ;				      	++ i ) sum += arr [ i ] ;				      ++ i ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	sum += arr [ i ] ;					  
  i < n ;						      	i < n ;							      }								  
  ++ i ) {						      	++ i ) {						      for ( int i = 0 ;						  
    sum -= arr [ i ] ;					      	  sum -= arr [ i ] ;					      i < n ;							  
    if ( leftsum == sum ) return i ;			      	  if ( leftsum == sum ) return i ;			      ++ i ) {							  
    leftsum += arr [ i ] ;				      	  leftsum += arr [ i ] ;				    	sum -= arr [ i ] ;					  
  }							      	}							    	if ( leftsum == sum ) {					  
  return - 1 ;						      	return - 1 ;						    	  return i ;						  
}							      }								    	}							  
							      								    	leftsum += arr [ i ] ;					  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	      MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL	    MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL		  MINIMUM_INCREMENT_K_OPERATIONS_MAKE_ELEMENTS_EQUAL
--							      --							    --								  --
int minOps ( int arr [ ] , int n , int k ) {		      static int minOps ( int arr [ ] , int n , int k ) {	    public static int minOps ( int arr [ ] , int n , int k ) {	  failure : #Results:5, 10
  int max = * max_element ( arr , arr + n ) ;		      	Arrays . sort ( arr ) ;					      int max = Arrays . binarySearch ( arr , arr . length ) ;	  
  int res = 0 ;						      	int max = arr [ arr . length - 1 ] ;			      int res = 0 ;						  
  for ( int i = 0 ;					      	int res = 0 ;						      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) {						      	i < n ;							      i ++ ) {							  
    if ( ( max - arr [ i ] ) % k != 0 ) return - 1 ;	      	i ++ ) {						    	if ( ( max - arr [ i ] ) % k != 0 ) {			  
    else res += ( max - arr [ i ] ) / k ;		      	  if ( ( max - arr [ i ] ) % k != 0 ) return - 1 ;	    	  return - 1 ;						  
  }							      	  else res += ( max - arr [ i ] ) / k ;			    	}							  
  return res ;						      	}							    	else {							  
}							      	return res ;						    	  res += ( max - arr [ i ] ) / k ;			  
							      }								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1	    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM_1
--							      --							    --								  --
int breakSum ( int n ) {				      static int breakSum ( int n ) {				    public static int breakSum ( int n ) {			  error : RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIM
  int dp [ n + 1 ] ;					      	int dp [ ] = new int [ n + 1 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  UM_SUM_1.java:26: error: ';' expected	  dp [ 0 ] =
  dp [ 0 ] = 0 , dp [ 1 ] = 1 ;				      	dp [ 0 ] = 0 ;						      dp [ 0 ] = 0 , dp [ 1 ] = 1 ;				   0 , dp [ 1 ] = 1 ;		    ^ 1 error
  for ( int i = 2 ;					      	dp [ 1 ] = 1 ;						      for ( int i = 2 ;						  
  i <= n ;						      	for ( int i = 2 ;					      i <= n ;							  
  i ++ ) dp [ i ] = max ( dp [ i / 2 ] + dp [ i / 3 ] + dp [  	i <= n ;						      i ++ ) {							  
  return dp [ n ] ;					      	i ++ ) dp [ i ] = Math . max ( dp [ i / 2 ] + dp [ i / 3 ]  	dp [ i ] = Math . max ( dp [ i / 2 ] + dp [ i / 3 ] + dp  
}							      	return dp [ n ] ;					      }								  
							      }								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS
--							      --							    --								  --
int subset ( int ar [ ] , int n ) {			      public static int subset ( int ar [ ] , int n ) {		    public static int subset ( int ar [ ] , int n ) {		  success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  sort ( ar , ar + n ) ;				      	Arrays . sort ( ar ) ;					      Arrays . sort ( ar ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int count = 1 ;					      	  int count = 1 ;					    	int count = 1 ;						  
    for ( ;						      	  for ( ;						    	for ( ;							  
    i < n - 1 ;						      	  i < n - 1 ;						    	i < n - 1 ;						  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      if ( ar [ i ] == ar [ i + 1 ] ) count ++ ;	      	    if ( ar [ i ] == ar [ i + 1 ] ) count ++ ;		    	  if ( ar [ i ] == ar [ i + 1 ] ) {			  
      else break ;					      	    else break ;					    	    count ++ ;						  
    }							      	  }							    	  }							  
    res = max ( res , count ) ;				      	  res = Math . max ( res , count ) ;			    	  else {						  
  }							      	}							    	    break ;						  
  return res ;						      	return res ;						    	  }							  
}							      }								    	}							  
							      								    	res = Math . max ( res , count ) ;			  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_WAVE_FORM_2_1				      SORT_ARRAY_WAVE_FORM_2_1					    SORT_ARRAY_WAVE_FORM_2_1					  SORT_ARRAY_WAVE_FORM_2_1
--							      --							    --								  --
void sortInWave ( int arr [ ] , int n ) {		      void sortInWave ( int arr [ ] , int n ) {			    public static void sortInWave ( int arr [ ] , int n ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i += 2 ) {						      	i += 2 ) {						      i += 2 ) {						  
    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( & arr [  	  if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( arr , i  	if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) {		  
    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( & ar 	  if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( arr  	  Arrays . swap ( arr , i , i - 1 ) ;			  
  }							      	}							    	}							  
}							      }								    	if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) {		  
							      								    	  Arrays . swap ( arr , i , i + 1 ) ;			  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_BITS_IN_A_GIVEN_NUMBER				      SWAP_BITS_IN_A_GIVEN_NUMBER				    SWAP_BITS_IN_A_GIVEN_NUMBER					  SWAP_BITS_IN_A_GIVEN_NUMBER
--							      --							    --								  --
int swapBits ( unsigned int x , unsigned int p1 , unsigned in static int swapBits ( int x , int p1 , int p2 , int n ) {	    public static int swapBits ( int x , int p1 , int p2 , int n  success : None
  unsigned int set1 = ( x >> p1 ) & ( ( 1U << n ) - 1 ) ;     	int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ;		      int set1 = ( x >> p1 ) & ( ( 1 << n ) - 1 ) ;		  
  unsigned int set2 = ( x >> p2 ) & ( ( 1U << n ) - 1 ) ;     	int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ;		      int set2 = ( x >> p2 ) & ( ( 1 << n ) - 1 ) ;		  
  unsigned int Xor = ( set1 ^ set2 ) ;			      	int xor = ( set1 ^ set2 ) ;				      int Xor = ( set1 ^ set2 ) ;				  
  Xor = ( Xor << p1 ) | ( Xor << p2 ) ;			      	xor = ( xor << p1 ) | ( xor << p2 ) ;			      Xor = ( Xor << p1 ) | ( Xor << p2 ) ;			  
  unsigned int result = x ^ Xor ;			      	int result = x ^ xor ;					      int result = x ^ Xor ;					  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			      MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			    MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK			  MINIMUM_ROTATIONS_UNLOCK_CIRCULAR_LOCK
--							      --							    --								  --
int minRotation ( int input , int unlock_code ) {	      static int minRotation ( int input , int unlock_code ) {	    public static int minRotation ( int input , int unlockCode )  success : None
  int rotation = 0 ;					      	int rotation = 0 ;					      int rotation = 0 ;					  
  int input_digit , code_digit ;			      	int input_digit , code_digit ;				      int inputDigit , codeDigit ;				  
  while ( input || unlock_code ) {			      	while ( input > 0 || unlock_code > 0 ) {		      while ( input != 0 || unlockCode != 0 ) {			  
    input_digit = input % 10 ;				      	  input_digit = input % 10 ;				    	inputDigit = input % 10 ;				  
    code_digit = unlock_code % 10 ;			      	  code_digit = unlock_code % 10 ;			    	codeDigit = unlockCode % 10 ;				  
    rotation += min ( abs ( input_digit - code_digit ) , 10 - 	  rotation += Math . min ( Math . abs ( input_digit - code_ 	rotation += Math . min ( Math . abs ( inputDigit - codeDi 
    input /= 10 ;					      	  input /= 10 ;						    	input /= 10 ;						  
    unlock_code /= 10 ;					      	  unlock_code /= 10 ;					    	unlockCode /= 10 ;					  
  }							      	}							      }								  
  return rotation ;					      	return rotation ;					      return rotation ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES			  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES
--							      --							    --								  --
void fib ( int n ) {					      static void fib ( int n ) {				    public static void fib ( int n ) {				  script_not_found : None
  int a = 0 , b = 1 , c ;				      	int a = 0 , b = 1 , c ;					      int a = 0 , b = 1 , c ;					  
  if ( n >= 0 ) cout << a << " " ;			      	if ( n >= 0 ) System . out . print ( a + " " ) ;	      if ( n >= 0 ) {						  
  if ( n >= 1 ) cout << b << " " ;			      	if ( n >= 1 ) System . out . print ( b + " " ) ;	    	System . out . print ( a + " " ) ;			  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      }								  
  i <= n ;						      	i <= n ;						      if ( n >= 1 ) {						  
  i ++ ) {						      	i ++ ) {						    	System . out . print ( b + " " ) ;			  
    c = a + b ;						      	  c = a + b ;						      }								  
    cout << c << " " ;					      	  System . out . print ( c + " " ) ;			      for ( int i = 2 ;						  
    a = b ;						      	  a = b ;						      i <= n ;							  
    b = c ;						      	  b = c ;						      i ++ ) {							  
  }							      	}							    	c = a + b ;						  
}							      }								    	System . out . print ( c + " " ) ;			  
							      								    	a = b ;							  
							      								    	b = c ;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVEN_FIBONACCI_NUMBERS_SUM				      EVEN_FIBONACCI_NUMBERS_SUM				    EVEN_FIBONACCI_NUMBERS_SUM					  EVEN_FIBONACCI_NUMBERS_SUM
--							      --							    --								  --
int evenFibSum ( int limit ) {				      static int evenFibSum ( int limit ) {			    public static int evenFibSum ( int limit ) {		  error : EVEN_FIBONACCI_NUMBERS_SUM.java:43: error:
  if ( limit < 2 ) return 0 ;				      	if ( limit < 2 ) return 0 ;				      if ( limit < 2 ) {					   incompatible types: possible lossy conversion fro
  long long int ef1 = 0 , ef2 = 2 ;			      	long ef1 = 0 , ef2 = 2 ;				    	return 0 ;						  m long to int	  return sum ;		^ 1 error
  long long int sum = ef1 + ef2 ;			      	long sum = ef1 + ef2 ;					      }								  
  while ( ef2 <= limit ) {				      	while ( ef2 <= limit ) {				      long ef1 = 0 , ef2 = 2 ;					  
    long long int ef3 = 4 * ef2 + ef1 ;			      	  long ef3 = 4 * ef2 + ef1 ;				      long sum = ef1 + ef2 ;					  
    if ( ef3 > limit ) break ;				      	  if ( ef3 > limit ) break ;				      while ( ef2 <= limit ) {					  
    ef1 = ef2 ;						      	  ef1 = ef2 ;						    	long ef3 = 4 * ef2 + ef1 ;				  
    ef2 = ef3 ;						      	  ef2 = ef3 ;						    	if ( ef3 > limit ) {					  
    sum += ef2 ;					      	  sum += ef2 ;						    	  break ;						  
  }							      	}							    	}							  
  return sum ;						      	return ( int ) sum ;					    	ef1 = ef2 ;						  
}							      }								    	ef2 = ef3 ;						  
							      								    	sum += ef2 ;						  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		      PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		    PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1		  PRINT_FIBONACCI_SEQUENCE_USING_2_VARIABLES_1
--							      --							    --								  --
void fib ( int n ) {					      static void fib ( int n ) {				    public static void fib ( int n ) {				  script_not_found : None
  int a = 0 , b = 1 ;					      	int a = 0 , b = 1 ;					      int a = 0 , b = 1 ;					  
  if ( n >= 0 ) cout << a << " " ;			      	if ( n >= 0 ) System . out . print ( a + " " ) ;	      if ( n >= 0 ) {						  
  if ( n >= 1 ) cout << b << " " ;			      	if ( n >= 1 ) System . out . print ( b + " " ) ;	    	System . out . print ( a + " " ) ;			  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      }								  
  i <= n ;						      	i <= n ;						      if ( n >= 1 ) {						  
  i ++ ) {						      	i ++ ) {						    	System . out . print ( b + " " ) ;			  
    cout << a + b << " " ;				      	  System . out . print ( a + b + " " ) ;		      }								  
    b = a + b ;						      	  b = a + b ;						      for ( int i = 2 ;						  
    a = b - a ;						      	  a = b - a ;						      i <= n ;							  
  }							      	}							      i ++ ) {							  
}							      }								    	System . out . print ( a + b + " " ) ;			  
							      								    	b = a + b ;						  
							      								    	a = b - a ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_PRIME_FACTOR_NUMBER			      FIND_LARGEST_PRIME_FACTOR_NUMBER				    FIND_LARGEST_PRIME_FACTOR_NUMBER				  FIND_LARGEST_PRIME_FACTOR_NUMBER
--							      --							    --								  --
long long maxPrimeFactors ( long long n ) {		      static long maxPrimeFactors ( long n ) {			    public static long maxPrimeFactors ( long n ) {		  success : None
  long long maxPrime = - 1 ;				      	long maxPrime = - 1 ;					      long maxPrime = - 1 ;					  
  while ( n % 2 == 0 ) {				      	while ( n % 2 == 0 ) {					      while ( n % 2 == 0 ) {					  
    maxPrime = 2 ;					      	  maxPrime = 2 ;					    	maxPrime = 2 ;						  
    n >>= 1 ;						      	  n >>= 1 ;						    	n >>= 1 ;						  
  }							      	}							      }								  
  for ( int i = 3 ;					      	for ( int i = 3 ;					      for ( int i = 3 ;						  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      i <= Math . sqrt ( n ) ;					  
  i += 2 ) {						      	i += 2 ) {						      i += 2 ) {						  
    while ( n % i == 0 ) {				      	  while ( n % i == 0 ) {				    	while ( n % i == 0 ) {					  
      maxPrime = i ;					      	    maxPrime = i ;					    	  maxPrime = i ;					  
      n = n / i ;					      	    n = n / i ;						    	  n = n / i ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  if ( n > 2 ) maxPrime = n ;				      	if ( n > 2 ) maxPrime = n ;				      if ( n > 2 ) {						  
  return maxPrime ;					      	return maxPrime ;					    	maxPrime = n ;						  
}							      }								      }								  
							      								      return maxPrime ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI PROGRAM_TO_CHECK_IF_A_GIVEN_NUMBER_IS_LUCKY_ALL_DIGITS_ARE_DI
--							      --							    --								  --
bool isLucky ( int n ) {				      static boolean isLucky ( int n ) {			    public static boolean isLucky ( int n ) {			  success : None
  bool arr [ 10 ] ;					      	boolean arr [ ] = new boolean [ 10 ] ;			      boolean [ ] arr = new boolean [ 10 ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < 10 ;						      	i < 10 ;						      i < 10 ;							  
  i ++ ) arr [ i ] = false ;				      	i ++ ) arr [ i ] = false ;				      i ++ ) {							  
  while ( n > 0 ) {					      	while ( n > 0 ) {					    	arr [ i ] = false ;					  
    int digit = n % 10 ;				      	  int digit = n % 10 ;					      }								  
    if ( arr [ digit ] ) return false ;			      	  if ( arr [ digit ] ) return false ;			      while ( n > 0 ) {						  
    arr [ digit ] = true ;				      	  arr [ digit ] = true ;				    	int digit = n % 10 ;					  
    n = n / 10 ;					      	  n = n / 10 ;						    	if ( arr [ digit ] ) {					  
  }							      	}							    	  return false ;					  
  return true ;						      	return true ;						    	}							  
}							      }								    	arr [ digit ] = true ;					  
							      								    	n = n / 10 ;						  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SINK_NODES_GRAPH					      NUMBER_SINK_NODES_GRAPH					    NUMBER_SINK_NODES_GRAPH					  NUMBER_SINK_NODES_GRAPH
--							      --							    --								  --
int countSink ( int n , int m , int edgeFrom [ ] , int edgeTo static int countSink ( int n , int m , int edgeFrom [ ] , int public static int countSink ( int n , int m , int [ ] edgeFro script_not_found : None
  int mark [ n ] ;					      	int [ ] mark = new int [ n + 1 ] ;			      int [ ] mark = new int [ n ] ;				  
  memset ( mark , 0 , sizeof mark ) ;			      	for ( int i = 0 ;					      Arrays . fill ( mark , 0 ) ;				  
  for ( int i = 0 ;					      	i < m ;							      for ( int i = 0 ;						  
  i < m ;						      	i ++ ) mark [ edgeFrom [ i ] ] = 1 ;			      i < m ;							  
  i ++ ) mark [ edgeFrom [ i ] ] = 1 ;			      	int count = 0 ;						      i ++ ) {							  
  int count = 0 ;					      	for ( int i = 1 ;					    	mark [ edgeFrom [ i ] ] = 1 ;				  
  for ( int i = 1 ;					      	i <= n ;						      }								  
  i <= n ;						      	i ++ ) if ( mark [ i ] == 0 ) count ++ ;		      int count = 0 ;						  
  i ++ ) if ( ! mark [ i ] ) count ++ ;			      	return count ;						      for ( int i = 1 ;						  
  return count ;					      }								      i <= n ;							  
}							      								      i ++ ) {							  
							      								    	if ( ! mark [ i ] ) {					  
							      								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	      CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	    CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING	  CALCULATE_MAXIMUM_VALUE_USING_SIGN_TWO_NUMBERS_STRING
--							      --							    --								  --
int calcMaxValue ( string str ) {			      static int calcMaxValue ( String str ) {			    public static int calcMaxValue ( String str ) {		  success : None
  int res = str [ 0 ] - '0' ;				      	int res = str . charAt ( 0 ) - '0' ;			      int res = str . charAt ( 0 ) - '0' ;			  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == '0' || str [ i ] == '1' || res < 2 ) re 	  if ( str . charAt ( i ) == '0' || str . charAt ( i ) == ' 	if ( str . charAt ( i ) == '0' || str . charAt ( i ) == ' 
    else res *= ( str [ i ] - '0' ) ;			      	  else res *= ( str . charAt ( i ) - '0' ) ;		    	  res += ( str . charAt ( i ) - '0' ) ;			  
  }							      	}							    	}							  
  return res ;						      	return res ;						    	else {							  
}							      }								    	  res *= ( str . charAt ( i ) - '0' ) ;			  
							      								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP_1
--							      --							    --								  --
bool isHeap ( int arr [ ] , int n ) {			      static boolean isHeap ( int arr [ ] , int n ) {		    public static boolean isHeap ( int arr [ ] , int n ) {	  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= ( n - 2 ) / 2 ;					      	i <= ( n - 2 ) / 2 ;					      i <= ( n - 2 ) / 2 ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false ;	      	  if ( arr [ 2 * i + 1 ] > arr [ i ] ) {		    	if ( arr [ 2 * i + 1 ] > arr [ i ] ) return false ;	  
    if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) ret 	    return false ;					    	if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) ret 
  }							      	  }							      }								  
  return true ;						      	  if ( 2 * i + 2 < n && arr [ 2 * i + 2 ] > arr [ i ] ) {     return true ;						  
}							      	    return false ;					    }								  
							      	  }							    								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X   COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X	  COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X
--							      --							    --								  --
int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n  static int countPairs ( int [ ] arr1 , int [ ] arr2 , int m , public static int countPairs ( int arr1 [ ] , int arr2 [ ] ,  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( ( arr1 [ i ] + arr2 [ j ] ) == x ) count ++ ;   	j ++ ) if ( ( arr1 [ i ] + arr2 [ j ] ) == x ) count ++ ;     j ++ ) if ( ( arr1 [ i ] + arr2 [ j ] ) == x ) count ++ ;	  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PATTERNS_101_GIVEN_STRING				      FIND_PATTERNS_101_GIVEN_STRING				    FIND_PATTERNS_101_GIVEN_STRING				  FIND_PATTERNS_101_GIVEN_STRING
--							      --							    --								  --
int patternCount ( string str ) {			      static int patternCount ( String str ) {			    public static int patternCount ( String str ) {		  script_not_found : None
  char last = str [ 0 ] ;				      	char last = str . charAt ( 0 ) ;			      char last = str . charAt ( 0 ) ;				  
  int i = 1 , counter = 0 ;				      	int i = 1 , counter = 0 ;				      int i = 1 , counter = 0 ;					  
  while ( i < str . size ( ) ) {			      	while ( i < str . length ( ) ) {			      while ( i < str . length ( ) ) {				  
    if ( str [ i ] == '0' && last == '1' ) {		      	  if ( str . charAt ( i ) == '0' && last == '1' ) {	    	if ( str . charAt ( i ) == '0' && last == '1' ) {	  
      while ( str [ i ] == '0' ) i ++ ;			      	    while ( str . charAt ( i ) == '0' ) i ++ ;		    	  while ( str . charAt ( i ) == '0' ) {			  
      if ( str [ i ] == '1' ) counter ++ ;		      	    if ( str . charAt ( i ) == '1' ) counter ++ ;	    	    i ++ ;						  
    }							      	  }							    	  }							  
    last = str [ i ] ;					      	  last = str . charAt ( i ) ;				    	  if ( str . charAt ( i ) == '1' ) {			  
    i ++ ;						      	  i ++ ;						    	    counter ++ ;					  
  }							      	}							    	  }							  
  return counter ;					      	return counter ;					    	}							  
}							      }								    	last = str . charAt ( i ) ;				  
							      								    	i ++ ;							  
							      								      }								  
							      								      return counter ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	      COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	    COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1	  COUNT_CHARACTERS_STRING_DISTANCE_ENGLISH_ALPHABETS_1
--							      --							    --								  --
int countPairs ( string str ) {				      static int countPairs ( String str ) {			    public static int countPairs ( String str ) {		  script_not_found : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  ( i + j ) < n && j <= MAX_CHAR ;			      	( i + j ) < n && j <= MAX_CHAR ;			      ( i + j ) < n && j <= MAX_CHAR ;				  
  j ++ ) if ( ( abs ( str [ i + j ] - str [ i ] ) == j ) ) re 	j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . c   j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . c 
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY
--							      --							    --								  --
void printRepeating ( int arr [ ] , int size ) {	      void printRepeating ( int arr [ ] , int size ) {		    public static void printRepeating ( int arr [ ] , int size )  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  printf ( " Repeating elements are " ) ;		      	System . out . println ( "Repeated Elements are :" ) ;	      System . out . println ( " Repeating elements are " ) ;	  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < size ;						      	i < size ;						      i < size ;						  
  i ++ ) for ( j = i + 1 ;				      	i ++ ) {						      i ++ ) for ( j = i + 1 ;					  
  j < size ;						      	  for ( j = i + 1 ;					      j < size ;						  
  j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << " 	  j < size ;						      j ++ ) if ( arr [ i ] == arr [ j ] ) System . out . print ( 
}							      	  j ++ ) {						    }								  
							      	    if ( arr [ i ] == arr [ j ] ) System . out . print ( ar 								  
							      	  }							    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1		      MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1		    MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1			  MINIMUM_NUMBER_SUBSETS_DISTINCT_ELEMENTS_1
--							      --							    --								  --
int subset ( int arr [ ] , int n ) {			      static int subset ( int arr [ ] , int n ) {		    public static int subset ( int arr [ ] , int n ) {		  failure : #Results:0, 10
  unordered_map < int , int > mp ;			      	HashMap < Integer , Integer > mp = new HashMap < > ( ) ;      HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) mp [ arr [ i ] ] ++ ;				      	i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == nul   i ++ ) {							  
  int res = 0 ;						      	int res = 0 ;						    	mp . put ( arr [ i ] , ++ i ) ;				  
  for ( auto x : mp ) res = max ( res , x . second ) ;	      	for ( Map . Entry < Integer , Integer > entry : mp . entryS   }								  
  return res ;						      	return res ;						      int res = 0 ;						  
}							      }								      for ( Map . Entry < Integer , Integer > x : mp . entrySet ( 
							      								    	res = Math . max ( res , x . getValue ( ) ) ;		  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_ELEMENT					      NEXT_GREATER_ELEMENT					    NEXT_GREATER_ELEMENT					  NEXT_GREATER_ELEMENT
--							      --							    --								  --
void printNGE ( int arr [ ] , int n ) {			      static void printNGE ( int arr [ ] , int n ) {		    public static void printNGE ( int arr [ ] , int n ) {	  script_not_found : None
  int next , i , j ;					      	int next , i , j ;					      int next , i , j ;					  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    next = - 1 ;					      	  next = - 1 ;						    	next = - 1 ;						  
    for ( j = i + 1 ;					      	  for ( j = i + 1 ;					    	for ( j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ i ] < arr [ j ] ) {			      	    if ( arr [ i ] < arr [ j ] ) {			    	  if ( arr [ i ] < arr [ j ] ) {			  
	next = arr [ j ] ;				      	      next = arr [ j ] ;				    	    next = arr [ j ] ;					  
	break ;						      	      break ;						    	    break ;						  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
    cout << arr [ i ] << " -- " << next << endl ;	      	  System . out . println ( arr [ i ] + " -- " + next ) ;    	System . out . println ( arr [ i ] + " -- " + next ) ;	  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BALANCED_BINARY_TREES_HEIGHT_H			      COUNT_BALANCED_BINARY_TREES_HEIGHT_H			    COUNT_BALANCED_BINARY_TREES_HEIGHT_H			  COUNT_BALANCED_BINARY_TREES_HEIGHT_H
--							      --							    --								  --
long long int countBT ( int h ) {			      public static long countBT ( int h ) {			    public static long countBT ( int h ) {			  script_not_found : None
  long long int dp [ h + 1 ] ;				      	long [ ] dp = new long [ h + 1 ] ;			      long [ ] dp = new long [ h + 1 ] ;			  
  dp [ 0 ] = dp [ 1 ] = 1 ;				      	dp [ 0 ] = 1 ;						      dp [ 0 ] = dp [ 1 ] = 1 ;					  
  for ( int i = 2 ;					      	dp [ 1 ] = 1 ;						      for ( int i = 2 ;						  
  i <= h ;						      	for ( int i = 2 ;					      i <= h ;							  
  i ++ ) {						      	i <= h ;						      i ++ ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % 
    dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % mod  	++ i ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) %   return dp [ h ] ;						  
  }							      	return dp [ h ] ;					    }								  
  return dp [ h ] ;					      }								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_MAJORITY_ELEMENT				      CHECK_ARRAY_MAJORITY_ELEMENT				    CHECK_ARRAY_MAJORITY_ELEMENT				  CHECK_ARRAY_MAJORITY_ELEMENT
--							      --							    --								  --
bool isMajority ( int a [ ] , int n ) {			      static boolean isMajority ( int a [ ] , int n ) {		    public static boolean isMajority ( int a [ ] , int n ) {	  failure : #Results:3, 10
  unordered_map < int , int > mp ;			      	HashMap < Integer , Integer > mp = new HashMap < Integer ,    HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) mp [ a [ i ] ] ++ ;				      	i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i   i ++ ) {							  
  for ( auto x : mp ) if ( x . second >= n / 2 ) return true  	else mp . put ( a [ i ] , 1 ) ;				    	mp . put ( a [ i ] , ++ i ) ;				  
  return false ;					      	for ( Map . Entry < Integer , Integer > x : mp . entrySet (   }								  
}							      	return false ;						      for ( Map . Entry < Integer , Integer > x : mp . entrySet ( 
							      }								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N  MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N
--							      --							    --								  --
int getMinSquares ( unsigned int n ) {			      static int getMinSquares ( int n ) {			    public static int getMinSquares ( int n ) {			  script_not_found : None
  if ( sqrt ( n ) - floor ( sqrt ( n ) ) == 0 ) return 1 ;    	if ( n <= 3 ) return n ;				      if ( Math . sqrt ( n ) - Math . floor ( Math . sqrt ( n ) ) 
  if ( n <= 3 ) return n ;				      	int res = n ;						      if ( n <= 3 ) return n ;					  
  int res = n ;						      	for ( int x = 1 ;					      int res = n ;						  
  for ( int x = 1 ;					      	x <= n ;						      for ( int x = 1 ;						  
  x <= n ;						      	x ++ ) {						      x <= n ;							  
  x ++ ) {						      	  int temp = x * x ;					      x ++ ) {							  
    int temp = x * x ;					      	  if ( temp > n ) break ;				    	int temp = x * x ;					  
    if ( temp > n ) break ;				      	  else res = Math . min ( res , 1 + getMinSquares ( n - tem 	if ( temp > n ) break ;					  
    else res = min ( res , 1 + getMinSquares ( n - temp ) ) ; 	}							    	else res = Math . min ( res , 1 + getMinSquares ( n - tem 
  }							      	return res ;						      }								  
  return res ;						      }								      return res ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS    REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS	  REPRESENT_NUMBER_SUM_MINIMUM_POSSIBLE_PSUEDOBINARY_NUMBERS
--							      --							    --								  --
void psuedoBinary ( int n ) {				      public static void psuedoBinary ( int n ) {		    public static void psuedoBinary ( int n ) {			  script_not_found : None
  while ( n > 0 ) {					      	while ( n != 0 ) {					      while ( n > 0 ) {						  
    int temp = n , m = 0 , p = 1 ;			      	  int temp = n , m = 0 , p = 1 ;			    	int temp = n , m = 0 , p = 1 ;				  
    while ( temp ) {					      	  while ( temp != 0 ) {					    	while ( temp > 0 ) {					  
      int rem = temp % 10 ;				      	    int rem = temp % 10 ;				    	  int rem = temp % 10 ;					  
      temp = temp / 10 ;				      	    temp = temp / 10 ;					    	  temp = temp / 10 ;					  
      if ( rem != 0 ) m += p ;				      	    if ( rem != 0 ) m += p ;				    	  if ( rem != 0 ) {					  
      p *= 10 ;						      	    p *= 10 ;						    	    m += p ;						  
    }							      	  }							    	  }							  
    cout << m << " " ;					      	  System . out . print ( m + " " ) ;			    	  p *= 10 ;						  
    n = n - m ;						      	  n = n - m ;						    	}							  
  }							      	}							    	System . out . print ( m + " " ) ;			  
}							      	System . out . println ( " " ) ;			    	n = n - m ;						  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_SAME_PARITY_BY_INVER
--							      --							    --								  --
bool flipsPossible ( int a [ ] , int n ) {		      static boolean flipsPossible ( int [ ] a , int n ) {	    public static boolean flipsPossible ( int a [ ] , int n ) {	  error : CHECK_IF_ALL_THE_ELEMENTS_CAN_BE_MADE_OF_S
  int count_odd = 0 , count_even = 0 ;			      	int count_odd = 0 , count_even = 0 ;			      int count_odd = 0 , count_even = 0 ;			  AME_PARITY_BY_INVERTING_ADJACENT_ELEMENTS.java:31:
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						   error: incompatible types: int cannot be converte
  i < n ;						      	i < n ;							      i < n ;							  d to boolean	   if ( a [ i ] & 1 ) {
  i ++ ) {						      	i ++ ) {						      i ++ ) {							       ^ 1 error
    if ( a [ i ] & 1 ) count_odd ++ ;			      	  if ( ( a [ i ] & 1 ) == 1 ) count_odd ++ ;		    	if ( a [ i ] & 1 ) {					  
    else count_even ++ ;				      	  else count_even ++ ;					    	  count_odd ++ ;					  
  }							      	}							    	}							  
  if ( count_odd % 2 && count_even % 2 ) return false ;	      	if ( count_odd % 2 == 1 && count_even % 2 == 1 ) return fal 	else {							  
  else return true ;					      	else return true ;					    	  count_even ++ ;					  
}							      }								    	}							  
							      								      }								  
							      								      if ( count_odd % 2 != 0 && count_even % 2 != 0 ) {	  
							      								    	return false ;						  
							      								      }								  
							      								      else {							  
							      								    	return true ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			      COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			    COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N			  COUNT_BINARY_DIGIT_NUMBERS_SMALLER_N
--							      --							    --								  --
int countOfBinaryNumberLessThanN ( int N ) {		      static int countOfBinaryNumberLessThanN ( int N ) {	    public static int countOfBinaryNumberLessThanN ( int N ) {	  timeout : None
  queue < int > q ;					      	Queue < Integer > q = new LinkedList < > ( ) ;		      Queue < Integer > q = new LinkedList < > ( ) ;		  
  q . push ( 1 ) ;					      	q . add ( 1 ) ;						      q . add ( 1 ) ;						  
  int cnt = 0 ;						      	int cnt = 0 ;						      int cnt = 0 ;						  
  int t ;						      	int t ;							      int t ;							  
  while ( ! q . empty ( ) ) {				      	while ( q . size ( ) > 0 ) {				      while ( ! q . isEmpty ( ) ) {				  
    t = q . front ( ) ;					      	  t = q . peek ( ) ;					    	t = q . poll ( ) ;					  
    q . pop ( ) ;					      	  q . remove ( ) ;					    	q . add ( t ) ;						  
    if ( t <= N ) {					      	  if ( t <= N ) {					    	if ( t <= N ) {						  
      cnt ++ ;						      	    cnt ++ ;						    	  cnt ++ ;						  
      q . push ( t * 10 ) ;				      	    q . add ( t * 10 ) ;				    	  q . add ( t * 10 ) ;					  
      q . push ( t * 10 + 1 ) ;				      	    q . add ( t * 10 + 1 ) ;				    	  q . add ( t * 10 + 1 ) ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return cnt ;						      	return cnt ;						      return cnt ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE    CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE	  CONVERT_SENTENCE_EQUIVALENT_MOBILE_NUMERIC_KEYPAD_SEQUENCE
--							      --							    --								  --
string printSequence ( string arr [ ] , string input ) {      static String printSequence ( String arr [ ] , String input ) public static String printSequence ( String arr [ ] , String  script_not_found : None
  string output = "" ;					      	String output = "" ;					      String output = "" ;					  
  int n = input . length ( ) ;				      	int n = input . length ( ) ;				      int n = input . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( input [ i ] == ' ' ) output = output + "0" ;	      	  if ( input . charAt ( i ) == ' ' ) output = output + "0"  	if ( input . charAt ( i ) == ' ' ) {			  
    else {						      	  else {						    	  output = output + "0" ;				  
      int position = input [ i ] - 'A' ;		      	    int position = input . charAt ( i ) - 'A' ;		    	}							  
      output = output + arr [ position ] ;		      	    output = output + arr [ position ] ;		    	else {							  
    }							      	  }							    	  int position = input . charAt ( i ) - 'A' ;		  
  }							      	}							    	  output = output + arr [ position ] ;			  
  return output ;					      	return output ;						    	}							  
}							      }								      }								  
							      								      return output ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY			  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY
--							      --							    --								  --
int binarySearch ( int arr [ ] , int low , int high , int key static int binarySearch ( int arr [ ] , int low , int high ,  public static int binarySearch ( int [ ] arr , int low , int  success : None
  if ( high < low ) return - 1 ;			      	if ( high < low ) return - 1 ;				      if ( high < low ) return - 1 ;				  
  int mid = ( low + high ) / 2 ;			      	int mid = ( low + high ) / 2 ;				      int mid = ( low + high ) / 2 ;				  
  if ( key == arr [ mid ] ) return mid ;		      	if ( key == arr [ mid ] ) return mid ;			      if ( key == arr [ mid ] ) return mid ;			  
  if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid  	if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid    if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid  
  return binarySearch ( arr , low , ( mid - 1 ) , key ) ;     	return binarySearch ( arr , low , ( mid - 1 ) , key ) ;	      return binarySearch ( arr , low , ( mid - 1 ) , key ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS
--							      --							    --								  --
void rearrange ( int a [ ] , int size ) {		      static void rearrange ( int a [ ] , int size ) {		    public static void rearrange ( int a [ ] , int size ) {	  error : POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITI
  int positive = 0 , negative = 1 ;			      	int positive = 0 , negative = 1 , temp ;		      int positive = 0 , negative = 1 ;				  ONS.java:38: error: cannot find symbol       swap
  while ( true ) {					      	while ( true ) {					      while ( true ) {						  ( a , positive , negative ) ;	      ^	  symbol:
    while ( positive < size && a [ positive ] >= 0 ) positive 	  while ( positive < size && a [ positive ] >= 0 ) positive 	while ( positive < size && a [ positive ] >= 0 ) {	  method swap(int[],int,int)   location: class POSIT
    while ( negative < size && a [ negative ] <= 0 ) negative 	  while ( negative < size && a [ negative ] <= 0 ) negative 	  positive += 2 ;					  IVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS 1 error
    if ( positive < size && negative < size ) swap ( a [ posi 	  if ( positive < size && negative < size ) {		    	}							  
    else break ;					      	    temp = a [ positive ] ;				    	while ( negative < size && a [ negative ] <= 0 ) {	  
  }							      	    a [ positive ] = a [ negative ] ;			    	  negative += 2 ;					  
}							      	    a [ negative ] = temp ;				    	}							  
							      	  }							    	if ( positive < size && negative < size ) {		  
							      	  else break ;						    	  swap ( a , positive , negative ) ;			  
							      	}							    	}							  
							      }								    	else {							  
							      								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE				  FIND_THE_ELEMENT_THAT_APPEARS_ONCE
--							      --							    --								  --
int getSingle ( int arr [ ] , int n ) {			      static int getSingle ( int arr [ ] , int n ) {		    public static int getSingle ( int arr [ ] , int n ) {	  success : None
  int ones = 0 , twos = 0 ;				      	int ones = 0 , twos = 0 ;				      int ones = 0 , twos = 0 ;					  
  int common_bit_mask ;					      	int common_bit_mask ;					      int commonBitMask ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    twos = twos | ( ones & arr [ i ] ) ;		      	  twos = twos | ( ones & arr [ i ] ) ;			    	twos = twos | ( ones & arr [ i ] ) ;			  
    ones = ones ^ arr [ i ] ;				      	  ones = ones ^ arr [ i ] ;				    	ones = ones ^ arr [ i ] ;				  
    common_bit_mask = ~ ( ones & twos ) ;		      	  common_bit_mask = ~ ( ones & twos ) ;			    	commonBitMask = ~ ( ones & twos ) ;			  
    ones &= common_bit_mask ;				      	  ones &= common_bit_mask ;				    	ones &= commonBitMask ;					  
    twos &= common_bit_mask ;				      	  twos &= common_bit_mask ;				    	twos &= commonBitMask ;					  
  }							      	}							      }								  
  return ones ;						      	return ones ;						      return ones ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I FIND_SQUARE_ROOT_UNDER_MODULO_P_SET_1_WHEN_P_IS_IN_FORM_OF_4I
--							      --							    --								  --
void squareRoot ( int n , int p ) {			      static void squareRoot ( int n , int p ) {		    public static void squareRoot ( int n , int p ) {		  script_not_found : None
  n = n % p ;						      	n = n % p ;						      n = n % p ;						  
  for ( int x = 2 ;					      	for ( int x = 2 ;					      for ( int x = 2 ;						  
  x < p ;						      	x < p ;							      x < p ;							  
  x ++ ) {						      	x ++ ) {						      x ++ ) {							  
    if ( ( x * x ) % p == n ) {				      	  if ( ( x * x ) % p == n ) {				    	if ( ( x * x ) % p == n ) {				  
      cout << "Square root is " << x ;			      	    System . out . println ( "Square " + "root is " + x ) ; 	  System . out . println ( "Square root is " + x ) ;	  
      return ;						      	    return ;						    	  return ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << "Square root doesn't exist" ;			      	System . out . println ( "Square root " + "doesn't exist" )   System . out . println ( "Square root doesn't exist" ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_X_Y_SATISFYING_AX_N				      FIND_X_Y_SATISFYING_AX_N					    FIND_X_Y_SATISFYING_AX_N					  FIND_X_Y_SATISFYING_AX_N
--							      --							    --								  --
void solution ( int a , int b , int n ) {		      static void solution ( int a , int b , int n ) {		    public static void solution ( int a , int b , int n ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i * a <= n ;						      	i * a <= n ;						      i * a <= n ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( ( n - ( i * a ) ) % b == 0 ) {			      	  if ( ( n - ( i * a ) ) % b == 0 ) {			    	if ( ( n - ( i * a ) ) % b == 0 ) {			  
      cout << "x = " << i << ", y = " << ( n - ( i * a ) ) /  	    System . out . println ( "x = " + i + ", y = " + ( n -  	  System . out . println ( "x = " + i + ", y = " + ( n -  
      return ;						      	    return ;						    	  return ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << "No solution" ;				      	System . out . println ( "No solution" ) ;		      System . out . println ( "No solution" ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES		      ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			    ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES			  ARRAY_ELEMENT_MOVED_K_USING_SINGLE_MOVES
--							      --							    --								  --
int winner ( int a [ ] , int n , int k ) {		      static int winner ( int a [ ] , int n , int k ) {		    public static int winner ( int a [ ] , int n , int k ) {	  success : None
  if ( k >= n - 1 ) return n ;				      	if ( k >= n - 1 ) return n ;				      if ( k >= n - 1 ) return n ;				  
  int best = 0 , times = 0 ;				      	int best = 0 , times = 0 ;				      int best = 0 , times = 0 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( a [ i ] > best ) {				      	  if ( a [ i ] > best ) {				    	if ( a [ i ] > best ) {					  
      best = a [ i ] ;					      	    best = a [ i ] ;					    	  best = a [ i ] ;					  
      if ( i ) times = 1 ;				      	    if ( i == 1 ) times = 1 ;				    	  if ( i > 0 ) {					  
    }							      	  }							    	    times = 1 ;						  
    else times += 1 ;					      	  else times += 1 ;					    	  }							  
    if ( times >= k ) return best ;			      	  if ( times >= k ) return best ;			    	}							  
  }							      	}							    	else {							  
  return best ;						      	return best ;						    	  times += 1 ;						  
}							      }								    	}							  
							      								    	if ( times >= k ) return best ;				  
							      								      }								  
							      								      return best ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING	      MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		    MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING		  MAXIMUM_VALUE_CHOICE_EITHER_DIVIDING_CONSIDERING
--							      --							    --								  --
int maxDP ( int n ) {					      static int maxDP ( int n ) {				    public static int maxDP ( int n ) {				  success : None
  int res [ n + 1 ] ;					      	int res [ ] = new int [ n + 1 ] ;			      int [ ] res = new int [ n + 1 ] ;				  
  res [ 0 ] = 0 ;					      	res [ 0 ] = 0 ;						      res [ 0 ] = 0 ;						  
  res [ 1 ] = 1 ;					      	res [ 1 ] = 1 ;						      res [ 1 ] = 1 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) res [ i ] = max ( i , ( res [ i / 2 ] + res [ i / 3  	i ++ ) res [ i ] = Math . max ( i , ( res [ i / 2 ] + res [   i ++ ) {							  
  return res [ n ] ;					      	return res [ n ] ;					    	res [ i ] = Math . max ( i , ( res [ i / 2 ] + res [ i /  
}							      }								      }								  
							      								      return res [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION    SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION	  SORT_3_INTEGERS_WITHOUT_USING_CONDITION_USING_MAX_FUNCTION
--							      --							    --								  --
void printSorted ( int a , int b , int c ) {		      static void printSorted ( int a , int b , int c ) {	    public static void printSorted ( int a , int b , int c ) {	  script_not_found : None
  int get_max = max ( a , max ( b , c ) ) ;		      	int get_max = Math . max ( a , Math . max ( b , c ) ) ;	      int getMax = Math . max ( a , Math . max ( b , c ) ) ;	  
  int get_min = - max ( - a , max ( - b , - c ) ) ;	      	int get_min = - Math . max ( - a , Math . max ( - b , - c )   int getMin = - Math . max ( - a , Math . max ( - b , - c )  
  int get_mid = ( a + b + c ) - ( get_max + get_min ) ;	      	int get_mid = ( a + b + c ) - ( get_max + get_min ) ;	      int getMid = ( a + b + c ) - ( getMax + getMin ) ;	  
  cout << get_min << " " << get_mid << " " << get_max ;	      	System . out . print ( get_min + " " + get_mid + " " + get_   System . out . println ( getMin + " " + getMax + " " + getM 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
void printSubsequences ( int arr [ ] , int n ) {	      static void printSubsequences ( int n ) {			    public static void printSubsequences ( int arr [ ] , int n )  script_not_found : None
  unsigned int opsize = pow ( 2 , n ) ;			      	int opsize = ( int ) Math . pow ( 2 , n ) ;		      int opsize = Math . pow ( 2 , n ) ;			  
  for ( int counter = 1 ;				      	for ( int counter = 1 ;					      for ( int counter = 1 ;					  
  counter < opsize ;					      	counter < opsize ;					      counter < opsize ;					  
  counter ++ ) {					      	counter ++ ) {						      counter ++ ) {						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( counter & ( 1 << j ) ) cout << arr [ j ] << " " ;  	    if ( BigInteger . valueOf ( counter ) . testBit ( j ) ) 	  if ( counter & ( 1 << j ) ) {				  
    }							      	  }							    	    System . out . print ( arr [ j ] + " " ) ;		  
    cout << endl ;					      	  System . out . println ( ) ;				    	  }							  
  }							      	}							    	}							  
}							      }								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP   GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP	  GIVEN_LEVEL_ORDER_TRAVERSAL_BINARY_TREE_CHECK_TREE_MIN_HEAP
--							      --							    --								  --
bool isMinHeap ( int level [ ] , int n ) {		      static boolean isMinHeap ( int [ ] level ) {		    public static boolean isMinHeap ( int [ ] level , int n ) {	  script_not_found : None
  for ( int i = ( n / 2 - 1 ) ;				      	int n = level . length - 1 ;				      for ( int i = ( n / 2 - 1 ) ;				  
  i >= 0 ;						      	for ( int i = ( n / 2 - 1 ) ;				      i >= 0 ;							  
  i -- ) {						      	i >= 0 ;						      i -- ) {							  
    if ( level [ i ] > level [ 2 * i + 1 ] ) return false ;   	i -- ) {						    	if ( level [ i ] > level [ 2 * i + 1 ] ) {		  
    if ( 2 * i + 2 < n ) {				      	  if ( level [ i ] > level [ 2 * i + 1 ] ) return false ;   	  return false ;					  
      if ( level [ i ] > level [ 2 * i + 2 ] ) return false ; 	  if ( 2 * i + 2 < n ) {				    	}							  
    }							      	    if ( level [ i ] > level [ 2 * i + 2 ] ) return false ; 	if ( 2 * i + 2 < n ) {					  
  }							      	  }							    	  if ( level [ i ] > level [ 2 * i + 2 ] ) {		  
  return true ;						      	}							    	    return false ;					  
}							      	return true ;						    	  }							  
							      }								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT
--							      --							    --								  --
int check ( string str ) {				      static boolean check ( String str ) {			    public static int check ( String str ) {			  error : CHECK_LARGE_NUMBER_DIVISIBLE_11_NOT.java:5
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  8: error: incomparable types: int and boolean
  int oddDigSum = 0 , evenDigSum = 0 ;			      	int oddDigSum = 0 , evenDigSum = 0 ;			      int oddDigSum = 0 , evenDigSum = 0 ;			      if(f_filled(param0.get(i)) == f_gold(param0.ge
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  t(i)))				    ^ 1 erro
  i < n ;						      	i < n ;							      i < n ;							  r
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i % 2 == 0 ) oddDigSum += ( str [ i ] - '0' ) ;      	  if ( i % 2 == 0 ) oddDigSum += ( str . charAt ( i ) - '0' 	if ( i % 2 == 0 ) {					  
    else evenDigSum += ( str [ i ] - '0' ) ;		      	  else evenDigSum += ( str . charAt ( i ) - '0' ) ;	    	  oddDigSum += ( str . charAt ( i ) - '0' ) ;		  
  }							      	}							    	}							  
  return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;	      	return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;	    	else {							  
}							      }								    	  evenDigSum += ( str . charAt ( i ) - '0' ) ;		  
							      								    	}							  
							      								      }								  
							      								      return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ? 11 : 0 ;  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED	      WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED	    WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED		  WAYS_SUM_N_USING_ARRAY_ELEMENTS_REPETITION_ALLOWED
--							      --							    --								  --
int countWays ( int arr [ ] , int m , int N ) {		      static int countWays ( int N ) {				    public static int countWays ( int arr [ ] , int m , int N ) { script_not_found : None
  int count [ N + 1 ] ;					      	int count [ ] = new int [ N + 1 ] ;			      int count [ ] = new int [ N + 1 ] ;			  
  memset ( count , 0 , sizeof ( count ) ) ;		      	count [ 0 ] = 1 ;					      Arrays . fill ( count , 0 ) ;				  
  count [ 0 ] = 1 ;					      	for ( int i = 1 ;					      count [ 0 ] = 1 ;						  
  for ( int i = 1 ;					      	i <= N ;						      for ( int i = 1 ;						  
  i <= N ;						      	i ++ ) for ( int j = 0 ;				      i <= N ;							  
  i ++ ) for ( int j = 0 ;				      	j < arr . length ;					      i ++ ) for ( int j = 0 ;					  
  j < m ;						      	j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr   j < m ;							  
  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr 	return count [ N ] ;					      j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr 
  return count [ N ] ;					      }								      return count [ N ] ;					  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE				      LONGEST_COMMON_SUBSEQUENCE				    LONGEST_COMMON_SUBSEQUENCE					  LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
int lcs ( char * X , char * Y , int m , int n ) {	      int lcs ( char [ ] X , char [ ] Y , int m , int n ) {	    public static int lcs ( char [ ] X , char [ ] Y , int m , int script_not_found : None
  if ( m == 0 || n == 0 ) return 0 ;			      	if ( m == 0 || n == 0 ) return 0 ;			      if ( m == 0 || n == 0 ) return 0 ;			  
  if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,  	if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,    if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,  
  else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y , 	else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y ,   else return Math . max ( lcs ( X , Y , m , n - 1 ) , lcs (  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			      CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			    CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT			  CHECK_TWO_GIVEN_CIRCLES_TOUCH_INTERSECT
--							      --							    --								  --
int circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int static int circle ( int x1 , int y1 , int x2 , int y2 , int r public static int circle ( int x1 , int y1 , int x2 , int y2  success : None
  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 	int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1   int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 
  int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		      	int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		      int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;		  
  if ( distSq == radSumSq ) return 1 ;			      	if ( distSq == radSumSq ) return 1 ;			      if ( distSq == radSumSq ) {				  
  else if ( distSq > radSumSq ) return - 1 ;		      	else if ( distSq > radSumSq ) return - 1 ;		    	return 1 ;						  
  else return 0 ;					      	else return 0 ;						      }								  
}							      }								      else if ( distSq > radSumSq ) {				  
							      								    	return - 1 ;						  
							      								      }								  
							      								      else {							  
							      								    	return 0 ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD_NUMBERS_DESCENDING
--							      --							    --								  --
void twoWaySort ( int arr [ ] , int n ) {		      static void twoWaySort ( int arr [ ] , int n ) {		    public static void twoWaySort ( int arr [ ] , int n ) {	  error : SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  _NUMBERS_DESCENDING_ORDER_1.java:27: error: bad op
  i < n ;						      	i < n ;							      i < n ;							  erand types for binary operator '&'	i ++ ) if (
  i ++ ) if ( arr [ i ] & 1 ) arr [ i ] *= - 1 ;	      	i ++ ) if ( ( arr [ i ] & 1 ) != 0 ) arr [ i ] *= - 1 ;	      i ++ ) if ( arr [ i ] & 1 != 0 ) arr [ i ] *= - 1 ;	  arr [ i ] & 1 != 0 ) arr [ i ] *= - 1 ;
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  		^   first type:	 int   second type:
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  boolean SORT_EVEN_NUMBERS_ASCENDING_ORDER_SORT_ODD
  i < n ;						      	i < n ;							      i < n ;							  _NUMBERS_DESCENDING_ORDER_1.java:31: error: bad op
  i ++ ) if ( arr [ i ] & 1 ) arr [ i ] *= - 1 ;	      	i ++ ) if ( ( arr [ i ] & 1 ) != 0 ) arr [ i ] *= - 1 ;	      i ++ ) if ( arr [ i ] & 1 != 0 ) arr [ i ] *= - 1 ;	  erand types for binary operator '&'	i ++ ) if (
}							      }								    }								  arr [ i ] & 1 != 0 ) arr [ i ] *= - 1 ;
							      								    								  		^   first type:	 int   second type:
							      								    								  boolean 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY
--							      --							    --								  --
int findGreatest ( int arr [ ] , int n ) {		      static int findGreatest ( int [ ] arr , int n ) {		    public static int findGreatest ( int arr [ ] , int n ) {	  success : None
  int result = - 1 ;					      	int result = - 1 ;					      int result = - 1 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < n - 1 ;						      	j < n - 1 ;						      j < n - 1 ;						  
  j ++ ) for ( int k = j + 1 ;				      	j ++ ) for ( int k = j + 1 ;				      j ++ ) for ( int k = j + 1 ;				  
  k < n ;						      	k < n ;							      k < n ;							  
  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = m 	k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = M   k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = M 
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1      SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	    SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1	  SUM_MATRIX_ELEMENT_ELEMENT_INTEGER_DIVISION_ROW_COLUMN_1
--							      --							    --								  --
int findSum ( int n ) {					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
  int ans = 0 , temp = 0 , num ;			      	int ans = 0 , temp = 0 , num ;				      int ans = 0 , temp = 0 , num ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n && temp < n ;					      	i <= n && temp < n ;					      i <= n && temp < n ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    temp = i - 1 ;					      	  temp = i - 1 ;					    	temp = i - 1 ;						  
    num = 1 ;						      	  num = 1 ;						    	num = 1 ;						  
    while ( temp < n ) {				      	  while ( temp < n ) {					    	while ( temp < n ) {					  
      if ( temp + i <= n ) ans += ( i * num ) ;		      	    if ( temp + i <= n ) ans += ( i * num ) ;		    	  if ( temp + i <= n ) {				  
      else ans += ( ( n - temp ) * num ) ;		      	    else ans += ( ( n - temp ) * num ) ;		    	    ans += ( i * num ) ;				  
      temp += i ;					      	    temp += i ;						    	  }							  
      num ++ ;						      	    num ++ ;						    	  else {						  
    }							      	  }							    	    ans += ( ( n - temp ) * num ) ;			  
  }							      	}							    	  }							  
  return ans ;						      	return ans ;						    	  temp += i ;						  
}							      }								    	  num ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES STRING_CONTAINING_FIRST_LETTER_EVERY_WORD_GIVEN_STRING_SPACES
--							      --							    --								  --
string firstLetterWord ( string str ) {			      static String firstLetterWord ( String str ) {		    public static String firstLetterWord ( String str ) {	  success : None
  string result = "" ;					      	String result = "" ;					      StringBuilder sb = new StringBuilder ( ) ;		  
  bool v = true ;					      	boolean v = true ;					      boolean v = true ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == ' ' ) v = true ;			      	  if ( str . charAt ( i ) == ' ' ) {			    	if ( str . charAt ( i ) == ' ' ) {			  
    else if ( str [ i ] != ' ' && v == true ) {		      	    v = true ;						    	  v = true ;						  
      result . push_back ( str [ i ] ) ;		      	  }							    	}							  
      v = false ;					      	  else if ( str . charAt ( i ) != ' ' && v == true ) {	    	else if ( str . charAt ( i ) != ' ' && v == true ) {	  
    }							      	    result += ( str . charAt ( i ) ) ;			    	  sb . append ( str . charAt ( i ) ) ;			  
  }							      	    v = false ;						    	  v = false ;						  
  return result ;					      	  }							    	}							  
}							      	}							      }								  
							      	return result ;						      return sb . toString ( ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	      WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	    WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER	  WAYS_SPLIT_STRING_PARTITION_STARTS_DISTINCT_CHARACTER
--							      --							    --								  --
int countWays ( string s ) {				      static int countWays ( String s ) {			    public static int countWays ( String s ) {			  script_not_found : None
  int count [ 26 ] = {					      	int count [ ] = new int [ 26 ] ;			      int [ ] count = new int [ 26 ] ;				  
    0 }							      	for ( int i = 0 ;					      for ( char x : s . toCharArray ( ) ) {			  
    ;							      	i < s . length ( ) ;					    	count [ x - 'a' ] ++ ;					  
    for ( char x : s ) count [ x - 'a' ] ++ ;		      	i ++ ) count [ s . charAt ( i ) - 'a' ] ++ ;		      }								  
    count [ s [ 0 ] - 'a' ] = 1 ;			      	count [ s . charAt ( 0 ) - 'a' ] = 1 ;			      count [ s . charAt ( 0 ) - 'a' ] = 1 ;			  
    int ans = 1 ;					      	int ans = 1 ;						      int ans = 1 ;						  
    for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    i < 26 ;						      	i < 26 ;						      i < 26 ;							  
    ++ i ) if ( count [ i ] != 0 ) ans *= count [ i ] ;	      	++ i ) if ( count [ i ] != 0 ) ans *= count [ i ] ;	      ++ i ) if ( count [ i ] != 0 ) ans *= count [ i ] ;	  
    return ans ;					      	return ans ;						      return ans ;						  
  }							      }								    }								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			      REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM			  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM
--							      --							    --								  --
void rearrange ( int arr [ ] , int n ) {		      static void rearrange ( int [ ] arr , int n ) {		    public static void rearrange ( int arr [ ] , int n ) {	  script_not_found : None
  int temp [ n ] ;					      	int temp [ ] = new int [ n ] ;				      int temp [ ] = new int [ n ] ;				  
  int small = 0 , large = n - 1 ;			      	int small = 0 , large = n - 1 ;				      int small = 0 , large = n - 1 ;				  
  int flag = true ;					      	boolean flag = true ;					      boolean flag = true ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( flag ) temp [ i ] = arr [ large -- ] ;		      	  if ( flag ) temp [ i ] = arr [ large -- ] ;		    	if ( flag ) {						  
    else temp [ i ] = arr [ small ++ ] ;		      	  else temp [ i ] = arr [ small ++ ] ;			    	  temp [ i ] = arr [ large -- ] ;			  
    flag = ! flag ;					      	  flag = ! flag ;					    	}							  
  }							      	}							    	else {							  
  for ( int i = 0 ;					      	arr = temp . clone ( ) ;				    	  temp [ i ] = arr [ small ++ ] ;			  
  i < n ;						      }								    	}							  
  i ++ ) arr [ i ] = temp [ i ] ;			      								    	flag = ! flag ;						  
}							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	arr [ i ] = temp [ i ] ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OPERATIONS_MAKE_STRINGAB_FREE			      COUNT_OPERATIONS_MAKE_STRINGAB_FREE			    COUNT_OPERATIONS_MAKE_STRINGAB_FREE				  COUNT_OPERATIONS_MAKE_STRINGAB_FREE
--							      --							    --								  --
int abFree ( string s ) {				      static int abFree ( char [ ] s ) {			    public static int abFree ( String s ) {			  error : COUNT_OPERATIONS_MAKE_STRINGAB_FREE.java:6
  int n = s . length ( ) ;				      	int b_count = 0 ;					      int n = s . length ( ) ;					  6: error: incompatible types: char[] cannot be con
  char char_array [ n + 1 ] ;				      	int res = 0 ;						      char [ ] charArray = s . toCharArray ( ) ;		  verted to String	   if(f_filled(param0.get(i)
  strcpy ( char_array , s . c_str ( ) ) ;		      	for ( int i = 0 ;					      int bCount = 0 ;						  ) == f_gold(param0.get(i)))
  int b_count = 0 ;					      	i < s . length ;					      int res = 0 ;						  	  ^ Note: Some messages have been simplified
  int res = 0 ;						      	i ++ ) {						      for ( int i = 0 ;						  ; recompile with -Xdiags:verbose to get full outpu
  for ( int i = 0 ;					      	  if ( s [ s . length - i - 1 ] == 'a' ) {		      i < n ;							  t 1 error
  i < n ;						      	    res = ( res + b_count ) ;				      i ++ ) {							  
  i ++ ) {						      	    b_count = ( b_count * 2 ) ;				    	if ( charArray [ n - i - 1 ] == 'a' ) {			  
    if ( char_array [ n - i - 1 ] == 'a' ) {		      	  }							    	  res = ( res + bCount ) ;				  
      res = ( res + b_count ) ;				      	  else {						    	  bCount = ( bCount * 2 ) ;				  
      b_count = ( b_count * 2 ) ;			      	    b_count += 1 ;					    	}							  
    }							      	  }							    	else {							  
    else {						      	}							    	  bCount += 1 ;						  
      b_count += 1 ;					      	return res ;						    	}							  
    }							      }								      }								  
  }							      								      return res ;						  
  return res ;						      								    }								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			      FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			    FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1			  FIND_THE_ELEMENT_THAT_APPEARS_ONCE_1
--							      --							    --								  --
int getSingle ( int arr [ ] , int n ) {			      static int getSingle ( int arr [ ] , int n ) {		    public static int getSingle ( int arr [ ] , int n ) {	  script_not_found : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  int x , sum ;						      	int x , sum ;						      int x , sum ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < INT_SIZE ;					      	i < INT_SIZE ;						      i < INT_SIZE ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum = 0 ;						      	  sum = 0 ;						    	sum = 0 ;						  
    x = ( 1 << i ) ;					      	  x = ( 1 << i ) ;					    	x = ( 1 << i ) ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ j ] & x ) sum ++ ;			      	    if ( ( arr [ j ] & x ) == 0 ) sum ++ ;		    	  if ( arr [ j ] & x != x ) {				  
    }							      	  }							    	    sum ++ ;						  
    if ( sum % 3 ) result |= x ;			      	  if ( ( sum % 3 ) == 0 ) result |= x ;			    	  }							  
  }							      	}							    	}							  
  return result ;					      	return result ;						    	if ( sum % 3 == 0 ) {					  
}							      }								    	  result |= x ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		      MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		    MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY		  MAXIMUM_DISTANCE_TWO_OCCURRENCES_ELEMENT_ARRAY
--							      --							    --								  --
int maxDistance ( int arr [ ] , int n ) {		      static int maxDistance ( int [ ] arr , int n ) {		    public static int maxDistance ( int arr [ ] , int n ) {	  success : None
  unordered_map < int , int > mp ;			      	HashMap < Integer , Integer > map = new HashMap < > ( ) ;     HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
  int max_dist = 0 ;					      	int max_dist = 0 ;					      int maxDist = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( mp . find ( arr [ i ] ) == mp . end ( ) ) mp [ arr [ 	  if ( ! map . containsKey ( arr [ i ] ) ) map . put ( arr  	if ( mp . get ( arr [ i ] ) == null ) {			  
    else max_dist = max ( max_dist , i - mp [ arr [ i ] ] ) ; 	  else max_dist = Math . max ( max_dist , i - map . get ( a 	  mp . put ( arr [ i ] , i ) ;				  
  }							      	}							    	}							  
  return max_dist ;					      	return max_dist ;					    	else {							  
}							      }								    	  maxDist = Math . max ( maxDist , i - mp . get ( arr [ i 
							      								    	}							  
							      								      }								  
							      								      return maxDist ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE_1
--							      --							    --								  --
int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , static int maxSumPairWithDifferenceLessThanK ( int arr [ ] ,  public static int maxSumPairWithDifferenceLessThanK ( int arr success : None
  int maxSum = 0 ;					      	int maxSum = 0 ;					      int maxSum = 0 ;						  
  sort ( arr , arr + N ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = N - 1 ;					      	for ( int i = N - 1 ;					      for ( int i = N - 1 ;					  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  -- i ) {						      	-- i ) {						      -- i ) {							  
    if ( arr [ i ] - arr [ i - 1 ] < k ) {		      	  if ( arr [ i ] - arr [ i - 1 ] < k ) {		    	if ( arr [ i ] - arr [ i - 1 ] < k ) {			  
      maxSum += arr [ i ] ;				      	    maxSum += arr [ i ] ;				    	  maxSum += arr [ i ] ;					  
      maxSum += arr [ i - 1 ] ;				      	    maxSum += arr [ i - 1 ] ;				    	  maxSum += arr [ i - 1 ] ;				  
      -- i ;						      	    -- i ;						    	  -- i ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return maxSum ;					      	return maxSum ;						      return maxSum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	      NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	    NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT	  NUMBER_OF_PAIRS_IN_AN_ARRAY_HAVING_SUM_EQUAL_TO_PRODUCT
--							      --							    --								  --
int sumEqualProduct ( int a [ ] , int n ) {		      static int sumEqualProduct ( int a [ ] , int n ) {	    public static int sumEqualProduct ( int a [ ] , int n ) {	  success : None
  int zero = 0 , two = 0 ;				      	int zero = 0 , two = 0 ;				      int zero = 0 , two = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( a [ i ] == 0 ) {				      	  if ( a [ i ] == 0 ) {					    	if ( a [ i ] == 0 ) zero ++ ;				  
      zero ++ ;						      	    zero ++ ;						    	if ( a [ i ] == 2 ) two ++ ;				  
    }							      	  }							      }								  
    if ( a [ i ] == 2 ) {				      	  if ( a [ i ] == 2 ) {					      int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) 
      two ++ ;						      	    two ++ ;						      return cnt ;						  
    }							      	  }							    }								  
  }							      	}							    								  
  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) 	int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) 								  
  return cnt ;						      	return cnt ;						    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		      FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		    FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1		  FIND_ELEMENTS_PRESENT_FIRST_ARRAY_NOT_SECOND_1
--							      --							    --								  --
void findMissing ( int a [ ] , int b [ ] , int n , int m ) {  static void findMissing ( int a [ ] , int b [ ] , int n , int public static void findMissing ( int a [ ] , int b [ ] , int  script_not_found : None
  unordered_set < int > s ;				      	HashSet < Integer > s = new HashSet < > ( ) ;		      HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) s . insert ( b [ i ] ) ;			      	i ++ ) s . add ( b [ i ] ) ;				      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	s . add ( b [ i ] ) ;					  
  i < n ;						      	i < n ;							      }								  
  i ++ ) if ( s . find ( a [ i ] ) == s . end ( ) ) cout << a 	i ++ ) if ( ! s . contains ( a [ i ] ) ) System . out . pri   for ( int i = 0 ;						  
}							      }								      i < n ;							  
							      								      i ++ ) {							  
							      								    	if ( s . contains ( a [ i ] ) == false ) {		  
							      								    	  System . out . print ( a [ i ] + " " ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		      CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		    CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE		  CONVERT_ALTERNATE_CHARACTERS_STRING_UPPER_CASE
--							      --							    --								  --
void convertOpposite ( string & str ) {			      static void convertOpposite ( StringBuffer str ) {	    public static void convertOpposite ( String str ) {		  script_not_found : None
  int ln = str . length ( ) ;				      	int ln = str . length ( ) ;				      int ln = str . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < ln ;						      	i < ln ;						      i < ln ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] >= 'a' && str [ i ] <= 'z' ) str [ i ] = s 	  Character c = str . charAt ( i ) ;			    	if ( str . charAt ( i ) >= 'a' && str . charAt ( i ) <= ' 
    else if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) str [ i  	  if ( Character . isLowerCase ( c ) ) str . replace ( i ,  	  str . setCharAt ( i , str . charAt ( i ) - 32 ) ;	  
  }							      	  else str . replace ( i , i + 1 , Character . toLowerCase  	}							  
}							      	}							    	else if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) 
							      }								    	  str . setCharAt ( i , str . charAt ( i ) + 32 ) ;	  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY
--							      --							    --								  --
int maxSum ( int arr [ ] , int n ) {			      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int arr [ ] , int n ) {		  success : None
  int res = INT_MIN ;					      	int res = Integer . MIN_VALUE ;				      int res = Integer . MIN_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int curr_sum = 0 ;					      	  int curr_sum = 0 ;					    	int currSum = 0 ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      int index = ( i + j ) % n ;			      	    int index = ( i + j ) % n ;				    	  int index = ( i + j ) % n ;				  
      curr_sum += j * arr [ index ] ;			      	    curr_sum += j * arr [ index ] ;			    	  currSum += j * arr [ index ] ;			  
    }							      	  }							    	}							  
    res = max ( res , curr_sum ) ;			      	  res = Math . max ( res , curr_sum ) ;			    	res = Math . max ( res , currSum ) ;			  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		      ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		    ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE		  ARRAY_RANGE_QUERIES_ELEMENTS_FREQUENCY_VALUE
--							      --							    --								  --
int solveQuery ( int start , int end , int arr [ ] ) {	      static int solveQuery ( int start , int end , int arr [ ] ) { public static int solveQuery ( int start , int end , int [ ]  failure : #Results:7, 10
  unordered_map < int , int > frequency ;		      	Map < Integer , Integer > mp = new HashMap < > ( ) ;	      HashMap < Integer , Integer > frequency = new HashMap < > ( 
  for ( int i = start ;					      	for ( int i = start ;					      for ( int i = start ;					  
  i <= end ;						      	i <= end ;						      i <= end ;						  
  i ++ ) frequency [ arr [ i ] ] ++ ;			      	i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == nul   i ++ ) {							  
  int count = 0 ;					      	int count = 0 ;						    	frequency . put ( arr [ i ] , ++ i ) ;			  
  for ( auto x : frequency ) if ( x . first == x . second ) c 	for ( Map . Entry < Integer , Integer > entry : mp . entryS   }								  
  return count ;					      	return count ;						      int count = 0 ;						  
}							      }								      for ( Map . Entry < Integer , Integer > x : frequency . ent 
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM
--							      --							    --								  --
bool isSubsetSum ( int set [ ] , int n , int sum ) {	      static boolean isSubsetSum ( int set [ ] , int n , int sum )  public static boolean isSubsetSum ( int set [ ] , int n , int script_not_found : None
  if ( sum == 0 ) return true ;				      	if ( sum == 0 ) return true ;				      if ( sum == 0 ) return true ;				  
  if ( n == 0 && sum != 0 ) return false ;		      	if ( n == 0 && sum != 0 ) return false ;		      if ( n == 0 && sum != 0 ) return false ;			  
  if ( set [ n - 1 ] > sum ) return isSubsetSum ( set , n - 1 	if ( set [ n - 1 ] > sum ) return isSubsetSum ( set , n - 1   if ( set [ n - 1 ] > sum ) return isSubsetSum ( set , n - 1 
  return isSubsetSum ( set , n - 1 , sum ) || isSubsetSum ( s 	return isSubsetSum ( set , n - 1 , sum ) || isSubsetSum ( s   return isSubsetSum ( set , n - 1 , sum ) || isSubsetSum ( s 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIAGONALLY_DOMINANT_MATRIX				      DIAGONALLY_DOMINANT_MATRIX				    DIAGONALLY_DOMINANT_MATRIX					  DIAGONALLY_DOMINANT_MATRIX
--							      --							    --								  --
bool isDDM ( int m [ N ] [ N ] , int n ) {		      static boolean isDDM ( int m [ ] [ ] , int n ) {		    public static boolean isDDM ( int m [ ] [ ] , int n ) {	  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int sum = 0 ;					      	  int sum = 0 ;						    	int sum = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) sum += abs ( m [ i ] [ j ] ) ;		      	  j ++ ) sum += Math . abs ( m [ i ] [ j ] ) ;		    	j ++ ) {						  
    sum -= abs ( m [ i ] [ i ] ) ;			      	  sum -= Math . abs ( m [ i ] [ i ] ) ;			    	  sum += Math . abs ( m [ i ] [ j ] ) ;			  
    if ( abs ( m [ i ] [ i ] ) < sum ) return false ;	      	  if ( Math . abs ( m [ i ] [ i ] ) < sum ) return false ;  	}							  
  }							      	}							    	sum -= Math . abs ( m [ i ] [ i ] ) ;			  
  return true ;						      	return true ;						    	if ( Math . abs ( m [ i ] [ i ] ) < sum ) {		  
}							      }								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
int countNum ( int arr [ ] , int n ) {			      static int countNum ( int [ ] arr , int n ) {		    public static int countNum ( int arr [ ] , int n ) {	  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr  	i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr    i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K_1			      COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				    COUNT_PAIRS_DIFFERENCE_EQUAL_K_1				  COUNT_PAIRS_DIFFERENCE_EQUAL_K_1
--							      --							    --								  --
int countPairsWithDiffK ( int arr [ ] , int n , int k ) {     static int countPairsWithDiffK ( int arr [ ] , int n , int k  public static int countPairsWithDiffK ( int arr [ ] , int n , success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int l = 0 ;						      	int l = 0 ;						      int l = 0 ;						  
  int r = 0 ;						      	int r = 0 ;						      int r = 0 ;						  
  while ( r < n ) {					      	while ( r < n ) {					      while ( r < n ) {						  
    if ( arr [ r ] - arr [ l ] == k ) {			      	  if ( arr [ r ] - arr [ l ] == k ) {			    	if ( arr [ r ] - arr [ l ] == k ) {			  
      count ++ ;					      	    count ++ ;						    	  count ++ ;						  
      l ++ ;						      	    l ++ ;						    	  l ++ ;						  
      r ++ ;						      	    r ++ ;						    	  r ++ ;						  
    }							      	  }							    	}							  
    else if ( arr [ r ] - arr [ l ] > k ) l ++ ;	      	  else if ( arr [ r ] - arr [ l ] > k ) l ++ ;		    	else if ( arr [ r ] - arr [ l ] > k ) {			  
    else r ++ ;						      	  else r ++ ;						    	  l ++ ;						  
  }							      	}							    	}							  
  return count ;					      	return count ;						    	else {							  
}							      }								    	  r ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN CHECK_GIVEN_ARRAY_CONTAINS_DUPLICATE_ELEMENTS_WITHIN_K_DISTAN
--							      --							    --								  --
bool checkDuplicatesWithinK ( int arr [ ] , int n , int k ) { static boolean checkDuplicatesWithinK ( int arr [ ] , int k ) public static boolean checkDuplicatesWithinK ( int arr [ ] ,  script_not_found : None
  unordered_set < int > myset ;				      	HashSet < Integer > set = new HashSet < > ( ) ;		      HashSet < Integer > myset = new HashSet < Integer > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < arr . length ;					      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) retu 	  if ( set . contains ( arr [ i ] ) ) return true ;	    	if ( myset . contains ( arr [ i ] ) ) {			  
    myset . insert ( arr [ i ] ) ;			      	  set . add ( arr [ i ] ) ;				    	  return true ;						  
    if ( i >= k ) myset . erase ( arr [ i - k ] ) ;	      	  if ( i >= k ) set . remove ( arr [ i - k ] ) ;	    	}							  
  }							      	}							    	myset . add ( arr [ i ] ) ;				  
  return false ;					      	return false ;						    	if ( i >= k ) {						  
}							      }								    	  myset . remove ( arr [ i - k ] ) ;			  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_ROOT_NUMBER					      N_TH_ROOT_NUMBER						    N_TH_ROOT_NUMBER						  N_TH_ROOT_NUMBER
--							      --							    --								  --
double nthRoot ( int A , int N ) {			      static double nthRoot ( int A , int N ) {			    public static double nthRoot ( int A , int N ) {		  error : N_TH_ROOT_NUMBER.java:37: error: variable
  double xPre = rand ( ) % 10 ;				      	double xPre = Math . random ( ) % 10 ;			      double xPre = Math . random ( ) * 10 ;			  xK might not have been initialized   return xK ;
  double eps = 1e - 3 ;					      	double eps = 0.001 ;					      double eps = 1e-3 ;					  	  ^ 1 error
  double delX = INT_MAX ;				      	double delX = 2147483647 ;				      double delX = Integer . MAX_VALUE ;			  
  double xK ;						      	double xK = 0.0 ;					      double xK ;						  
  while ( delX > eps ) {				      	while ( delX > eps ) {					      while ( delX > eps ) {					  
    xK = ( ( N - 1.0 ) * xPre + ( double ) A / pow ( xPre , N 	  xK = ( ( N - 1.0 ) * xPre + ( double ) A / Math . pow ( x 	xK = ( ( N - 1.0 ) * xPre + ( double ) A / Math . pow ( x 
    delX = abs ( xK - xPre ) ;				      	  delX = Math . abs ( xK - xPre ) ;			    	delX = Math . abs ( xK - xPre ) ;			  
    xPre = xK ;						      	  xPre = xK ;						    	xPre = xK ;						  
  }							      	}							      }								  
  return xK ;						      	return xK ;						      return xK ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEGREGATE_EVEN_ODD_NUMBERS_SET_3			      SEGREGATE_EVEN_ODD_NUMBERS_SET_3				    SEGREGATE_EVEN_ODD_NUMBERS_SET_3				  SEGREGATE_EVEN_ODD_NUMBERS_SET_3
--							      --							    --								  --
void arrayEvenAndOdd ( int arr [ ] , int n ) {		      static void arrayEvenAndOdd ( int arr [ ] , int n ) {	    public static void arrayEvenAndOdd ( int arr [ ] , int n ) {  script_not_found : None
  int i = - 1 , j = 0 ;					      	int i = - 1 , j = 0 ;					      int i = - 1 , j = 0 ;					  
  int t ;						      	while ( j != n ) {					      int t ;							  
  while ( j != n ) {					      	  if ( arr [ j ] % 2 == 0 ) {				      while ( j != n ) {					  
    if ( arr [ j ] % 2 == 0 ) {				      	    i ++ ;						    	if ( arr [ j ] % 2 == 0 ) {				  
      i ++ ;						      	    int temp = arr [ i ] ;				    	  i ++ ;						  
      swap ( arr [ i ] , arr [ j ] ) ;			      	    arr [ i ] = arr [ j ] ;				    	  Arrays . swap ( arr , i , j ) ;			  
    }							      	    arr [ j ] = temp ;					    	}							  
    j ++ ;						      	  }							    	j ++ ;							  
  }							      	  j ++ ;						      }								  
  for ( int i = 0 ;					      	}							      for ( int i = 0 ;						  
  i < n ;						      	for ( int k = 0 ;					      i < n ;							  
  i ++ ) cout << arr [ i ] << " " ;			      	k < n ;							      i ++ ) {							  
}							      	k ++ ) System . out . print ( arr [ k ] + " " ) ;	    	System . out . print ( arr [ i ] + " " ) ;		  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY
--							      --							    --								  --
int countPairs ( int arr [ ] , int n ) {		      static int countPairs ( int arr [ ] , int n ) {		    public static int countPairs ( int arr [ ] , int n ) {	  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      int product = arr [ i ] * arr [ j ] ;		      	    int product = arr [ i ] * arr [ j ] ;		    	  int product = arr [ i ] * arr [ j ] ;			  
      for ( int k = 0 ;					      	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
      k < n ;						      	    k < n ;						    	  k < n ;						  
      k ++ ) {						      	    k ++ ) {						    	  k ++ ) {						  
	if ( arr [ k ] == product ) {			      	      if ( arr [ k ] == product ) {			    	    if ( arr [ k ] == product ) {			  
	  result ++ ;					      		result ++ ;					    	      result ++ ;					  
	  break ;					      		break ;						    	      break ;						  
	}						      	      }							    	    }							  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_FUNCTIONS					      RECURSIVE_FUNCTIONS					    RECURSIVE_FUNCTIONS						  RECURSIVE_FUNCTIONS
--							      --							    --								  --
void tower ( int n , char sourcePole , char destinationPole , static void tower ( int n , char sourcePole , char destinatio public static void tower ( int n , char sourcePole , char des script_not_found : None
  if ( 0 == n ) return ;				      	if ( 0 == n ) return ;					      if ( 0 == n ) return ;					  
  tower ( n - 1 , sourcePole , auxiliaryPole , destinationPol 	tower ( n - 1 , sourcePole , auxiliaryPole , destinationPol   tower ( n - 1 , sourcePole , auxiliaryPole , destinationPol 
  cout << "Move the disk " << n << " from " << sourcePole <<  	System . out . printf ( "Move the disk %d from %c to %c\n"    System . out . println ( "Move the disk " + n + " from " +  
  tower ( n - 1 , auxiliaryPole , destinationPole , sourcePol 	tower ( n - 1 , auxiliaryPole , destinationPole , sourcePol   tower ( n - 1 , auxiliaryPole , destinationPole , sourcePol 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C CHECK_WHETHER_GIVEN_CIRCLE_RESIDE_BOUNDARY_MAINTAINED_OUTER_C
--							      --							    --								  --
void fitOrNotFit ( int R , int r , int x , int y , int rad )  static void fitOrNotFit ( int R , int r , int x , int y , int public static void fitOrNotFit ( int R , int r , int x , int  script_not_found : None
  double val = sqrt ( pow ( x , 2 ) + pow ( y , 2 ) ) ;	      	double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . po   double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . po 
  if ( val + rad <= R && val - rad >= R - r ) cout << "Fits\n 	if ( val + rad <= R && val - rad >= R - r ) System . out .    if ( val + rad <= R && val - rad >= R - r ) {		  
  else cout << "Doesn't Fit\n" ;			      	else System . out . println ( "Doesn't Fit" ) ;		    	System . out . println ( "Fits" ) ;			  
}							      }								      }								  
							      								      else {							  
							      								    	System . out . println ( "Doesn't Fit" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_3				      FIND_REPETITIVE_ELEMENT_1_N_1_3				    FIND_REPETITIVE_ELEMENT_1_N_1_3				  FIND_REPETITIVE_ELEMENT_1_N_1_3
--							      --							    --								  --
int findRepeating ( int arr [ ] , int n ) {		      static int findRepeating ( int arr [ ] , int n ) {	    public static int findRepeating ( int arr [ ] , int n ) {	  script_not_found : None
  int missingElement = 0 ;				      	int missingElement = 0 ;				      int missingElement = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int element = arr [ abs ( arr [ i ] ) ] ;		      	  int element = arr [ Math . abs ( arr [ i ] ) ] ;	    	int element = arr [ Math . abs ( arr [ i ] ) ] ;	  
    if ( element < 0 ) {				      	  if ( element < 0 ) {					    	if ( element < 0 ) {					  
      missingElement = arr [ i ] ;			      	    missingElement = arr [ i ] ;			    	  missingElement = arr [ i ] ;				  
      break ;						      	    break ;						    	  break ;						  
    }							      	  }							    	}							  
    arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ] ; 	  arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( a 	arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( a 
  }							      	}							      }								  
  return abs ( missingElement ) ;			      	return Math . abs ( missingElement ) ;			      return Math . abs ( missingElement ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			      COUNT_GFG_SUBSEQUENCES_GIVEN_STRING			    COUNT_GFG_SUBSEQUENCES_GIVEN_STRING				  COUNT_GFG_SUBSEQUENCES_GIVEN_STRING
--							      --							    --								  --
void countSubsequence ( char s [ ] , int n ) {		      static void countSubsequence ( String s , int n ) {	    public static void countSubsequence ( char [ ] s , int n ) {  script_not_found : None
  int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;	      	int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;		      int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    switch ( s [ i ] ) {				      	  switch ( s . charAt ( i ) ) {				    	switch ( s [ i ] ) {					  
      case 'G' : cntG ++ ;				      	    case 'G' : cntG ++ ;				    	  case 'G' : cntG ++ ;					  
      result += C ;					      	    result += C ;					    	  result += C ;						  
      break ;						      	    break ;						    	  break ;						  
      case 'F' : cntF ++ ;				      	    case 'F' : cntF ++ ;				    	  case 'F' : cntF ++ ;					  
      C += cntG ;					      	    C += cntG ;						    	  C += cntG ;						  
      break ;						      	    break ;						    	  break ;						  
      default : continue ;				      	    default : continue ;				    	  default : continue ;					  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << result << endl ;				      	System . out . println ( result ) ;			      System . out . println ( result ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		      NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		    NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER		  NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER
--							      --							    --								  --
int minimumBox ( int arr [ ] , int n ) {		      static int minimumBox ( int [ ] arr , int n ) {		    public static int minimumBox ( int [ ] arr , int n ) {	  error : NUMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_AN
  queue < int > q ;					      	Queue < Integer > q = new LinkedList < > ( ) ;		      Queue < Integer > q = new ArrayDeque < > ( ) ;		  OTHER.java:31: error: cannot find symbol   q . pus
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  h ( arr [ 0 ] ) ;	^   symbol:   method push(in
  q . push ( arr [ 0 ] ) ;				      	q . add ( arr [ 0 ] ) ;					      q . push ( arr [ 0 ] ) ;					  t)   location: variable q of type Queue<Integer> N
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  UMBER_VISIBLE_BOXES_PUTTING_ONE_INSIDE_ANOTHER.jav
  i < n ;						      	i < n ;							      i < n ;							  a:37: error: cannot find symbol	q . pop ( )
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  ;	    ^	symbol:	  method pop()	 location: v
    int now = q . front ( ) ;				      	  int now = q . element ( ) ;				    	int now = q . poll ( ) ;				  ariable q of type Queue<Integer> NUMBER_VISIBLE_BO
    if ( arr [ i ] >= 2 * now ) q . pop ( ) ;		      	  if ( arr [ i ] >= 2 * now ) q . remove ( ) ;		    	if ( arr [ i ] >= 2 * now ) {				  XES_PUTTING_ONE_INSIDE_ANOTHER.java:39: error: can
    q . push ( arr [ i ] ) ;				      	  q . add ( arr [ i ] ) ;				    	  q . pop ( ) ;						  not find symbol     q . push ( arr [ i ] ) ;
  }							      	}							    	}							   ^   symbol:	 method push(int)   location: variab
  return q . size ( ) ;					      	return q . size ( ) ;					    	q . push ( arr [ i ] ) ;				  le q of type Queue<Integer> 3 errors
}							      }								      }								  
							      								      return q . size ( ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S	      COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S	    COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S		  COUNT_NUMBER_BINARY_STRINGS_WITHOUT_CONSECUTIVE_1S
--							      --							    --								  --
int countStrings ( int n ) {				      static int countStrings ( int n ) {			    public static int countStrings ( int n ) {			  success : None
  int a [ n ] , b [ n ] ;				      	int a [ ] = new int [ n ] ;				      int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;	  
  a [ 0 ] = b [ 0 ] = 1 ;				      	int b [ ] = new int [ n ] ;				      a [ 0 ] = b [ 0 ] = 1 ;					  
  for ( int i = 1 ;					      	a [ 0 ] = b [ 0 ] = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	for ( int i = 1 ;					      i < n ;							  
  i ++ ) {						      	i < n ;							      i ++ ) {							  
    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;		      	i ++ ) {						    	a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			  
    b [ i ] = a [ i - 1 ] ;				      	  a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			    	b [ i ] = a [ i - 1 ] ;					  
  }							      	  b [ i ] = a [ i - 1 ] ;				      }								  
  return a [ n - 1 ] + b [ n - 1 ] ;			      	}							      return a [ n - 1 ] + b [ n - 1 ] ;			  
}							      	return a [ n - 1 ] + b [ n - 1 ] ;			    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	      POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	    POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS	  POSSIBILITY_OF_A_WORD_FROM_A_GIVEN_SET_OF_CHARACTERS
--							      --							    --								  --
bool isPresent ( string s , string q ) {		      static boolean isPresent ( String s , String q ) {	    public static boolean isPresent ( String s , String q ) {	  script_not_found : None
  int freq [ MAX_CHAR ] = {				      	int [ ] freq = new int [ MAX_CHAR ] ;			      int [ ] freq = new int [ s . length ( ) ] ;		  
    0 }							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ;							      	i < s . length ( ) ;					      i < s . length ( ) ;					  
    for ( int i = 0 ;					      	i ++ ) freq [ s . charAt ( i ) ] ++ ;			      i ++ ) {							  
    i < s . length ( ) ;				      	for ( int i = 0 ;					    	freq [ s . charAt ( i ) ] ++ ;				  
    i ++ ) freq [ s [ i ] ] ++ ;			      	i < q . length ( ) ;					      }								  
    for ( int i = 0 ;					      	i ++ ) {						      for ( int i = 0 ;						  
    i < q . length ( ) ;				      	  freq [ q . charAt ( i ) ] -- ;			      i < q . length ( ) ;					  
    i ++ ) {						      	  if ( freq [ q . charAt ( i ) ] < 0 ) return false ;	      i ++ ) {							  
      freq [ q [ i ] ] -- ;				      	}							    	freq [ q . charAt ( i ) ] -- ;				  
      if ( freq [ q [ i ] ] < 0 ) return false ;	      	return true ;						    	if ( freq [ q . charAt ( i ) ] < 0 ) {			  
    }							      }								    	  return false ;					  
    return true ;					      								    	}							  
  }							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	      MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS	    MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS		  MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS
--							      --							    --								  --
int minProduct ( int arr [ ] , int n , int k ) {	      public static int minProduct ( int [ ] arr , int n , int k )  public static int minProduct ( int [ ] arr , int n , int k )  error : Exception in thread "main" java.util.NoSuc
  priority_queue < int , vector < int > , greater < int >> pq 	PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;    PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;  hElementException 	at java.base/java.util.Abstract
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  Queue.remove(AbstractQueue.java:117) 	at MINIMUM_P
  i < n ;						      	i < n ;							      i < n ;							  RODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGERS.f_filled
  i ++ ) pq . push ( arr [ i ] ) ;			      	i ++ ) pq . add ( arr [ i ] ) ;				      i ++ ) {							  (MINIMUM_PRODUCT_K_INTEGERS_ARRAY_POSITIVE_INTEGER
  int count = 0 , ans = 1 ;				      	int count = 0 , ans = 1 ;				    	pq . add ( arr [ i ] ) ;				  S.java:38) 	at MINIMUM_PRODUCT_K_INTEGERS_ARRAY_PO
  while ( pq . empty ( ) == false && count < k ) {	      	while ( pq . isEmpty ( ) == false && count < k ) {	      }								  SITIVE_INTEGERS.main(MINIMUM_PRODUCT_K_INTEGERS_AR
    ans = ans * pq . top ( ) ;				      	  ans = ans * pq . element ( ) ;			      int count = 0 , ans = 1 ;					  RAY_POSITIVE_INTEGERS.java:82)
    pq . pop ( ) ;					      	  pq . remove ( ) ;					      while ( pq . isEmpty ( ) == false && count < k ) {	  
    count ++ ;						      	  count ++ ;						    	ans = ans * pq . poll ( ) ;				  
  }							      	}							    	pq . remove ( ) ;					  
  return ans ;						      	return ans ;						    	count ++ ;						  
}							      }								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS	      GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		    GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS		  GREEDY_ALGORITHM_TO_FIND_MINIMUM_NUMBER_OF_COINS
--							      --							    --								  --
void findMin ( int V ) {				      static void findMin ( int V ) {				    public static void findMin ( int V ) {			  script_not_found : None
  vector < int > ans ;					      	Vector < Integer > ans = new Vector < > ( ) ;		      ArrayList < Integer > ans = new ArrayList < > ( ) ;	  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    while ( V >= deno [ i ] ) {				      	  while ( V >= deno [ i ] ) {				    	while ( V >= deno [ i ] ) {				  
      V -= deno [ i ] ;					      	    V -= deno [ i ] ;					    	  V -= deno [ i ] ;					  
      ans . push_back ( deno [ i ] ) ;			      	    ans . add ( deno [ i ] ) ;				    	  ans . add ( deno [ i ] ) ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < ans . size ( ) ;					      	i < ans . size ( ) ;					      i < ans . size ( ) ;					  
  i ++ ) cout << ans [ i ] << "	 " ;			      	i ++ ) {						      i ++ ) {							  
}							      	  System . out . print ( " " + ans . elementAt ( i ) ) ;    	System . out . print ( ans . get ( i ) + "  " ) ;	  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE
--							      --							    --								  --
int minCoins ( int coins [ ] , int m , int V ) {	      static int minCoins ( int coins [ ] , int m , int V ) {	    public static int minCoins ( int coins [ ] , int m , int V )  script_not_found : None
  if ( V == 0 ) return 0 ;				      	if ( V == 0 ) return 0 ;				      if ( V == 0 ) return 0 ;					  
  int res = INT_MAX ;					      	int res = Integer . MAX_VALUE ;				      int res = Integer . MAX_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( coins [ i ] <= V ) {				      	  if ( coins [ i ] <= V ) {				    	if ( coins [ i ] <= V ) {				  
      int sub_res = minCoins ( coins , m , V - coins [ i ] )  	    int sub_res = minCoins ( coins , m , V - coins [ i ] )  	  int sub_res = minCoins ( coins , m , V - coins [ i ] )  
      if ( sub_res != INT_MAX && sub_res + 1 < res ) res = su 	    if ( sub_res != Integer . MAX_VALUE && sub_res + 1 < re 	  if ( sub_res != Integer . MAX_VALUE && sub_res + 1 < re 
    }							      	  }							    	    res = sub_res + 1 ;					  
  }							      	}							    	  }							  
  return res ;						      	return res ;						    	}							  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		      FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N		    FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N			  FIND_REPEATING_ELEMENT_SORTED_ARRAY_SIZE_N
--							      --							    --								  --
int findRepeatingElement ( int arr [ ] , int low , int high ) static int findRepeatingElement ( int arr [ ] , int low , int public static int findRepeatingElement ( int arr [ ] , int lo success : None
  if ( low > high ) return - 1 ;			      	if ( low > high ) return - 1 ;				      if ( low > high ) return - 1 ;				  
  int mid = ( low + high ) / 2 ;			      	int mid = ( low + high ) / 2 ;				      int mid = ( low + high ) / 2 ;				  
  if ( arr [ mid ] != mid + 1 ) {			      	if ( arr [ mid ] != mid + 1 ) {				      if ( arr [ mid ] != mid + 1 ) {				  
    if ( mid > 0 && arr [ mid ] == arr [ mid - 1 ] ) return m 	  if ( mid > 0 && arr [ mid ] == arr [ mid - 1 ] ) return m 	if ( mid > 0 && arr [ mid ] == arr [ mid - 1 ] ) return m 
    return findRepeatingElement ( arr , low , mid - 1 ) ;     	  return findRepeatingElement ( arr , low , mid - 1 ) ;	    	return findRepeatingElement ( arr , low , mid - 1 ) ;	  
  }							      	}							      }								  
  return findRepeatingElement ( arr , mid + 1 , high ) ;      	return findRepeatingElement ( arr , mid + 1 , high ) ;	      return findRepeatingElement ( arr , mid + 1 , high ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_1
--							      --							    --								  --
void printRepeating ( int arr [ ] , int size ) {	      void printRepeating ( int arr [ ] , int size ) {		    public static void printRepeating ( int arr [ ] , int size )  script_not_found : None
  int * count = new int [ sizeof ( int ) * ( size - 2 ) ] ;   	int count [ ] = new int [ size ] ;			      int count [ ] = new int [ size * ( size - 2 ) ] ;		  
  int i ;						      	int i ;							      int i ;							  
  cout << " Repeating elements are " ;			      	System . out . println ( "Repeated elements are : " ) ;	      System . out . print ( " Repeating elements are " ) ;	  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < size ;						      	i < size ;						      i < size ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( count [ arr [ i ] ] == 1 ) cout << arr [ i ] << " "  	  if ( count [ arr [ i ] ] == 1 ) System . out . print ( ar 	if ( count [ arr [ i ] ] == 1 ) {			  
    else count [ arr [ i ] ] ++ ;			      	  else count [ arr [ i ] ] ++ ;				    	  System . out . print ( arr [ i ] + " " ) ;		  
  }							      	}							    	}							  
}							      }								    	else {							  
							      								    	  count [ arr [ i ] ] ++ ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		      COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		    COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N		  COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1_TO_N
--							      --							    --								  --
int countSetBits ( int n ) {				      static int countSetBits ( int n ) {			    public static int countSetBits ( int n ) {			  error : COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS_FROM_1
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  _TO_N.java:42: error: incompatible types: int cann
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  ot be converted to boolean	 boolean k = 0 ;
  while ( ( 1 << i ) <= n ) {				      	while ( ( 1 << i ) <= n ) {				      while ( ( 1 << i ) <= n ) {				  	       ^ COUNT_TOTAL_SET_BITS_IN_ALL_NUMBERS
    bool k = 0 ;					      	  boolean k = false ;					    	boolean k = 0 ;						  _FROM_1_TO_N.java:47: error: bad operand types for
    int change = 1 << i ;				      	  int change = 1 << i ;					    	int change = 1 << i ;					   binary operator '+'	     ans += k ;		  ^
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					    first type:	 int   second type: boolean 2 errors
    j <= n ;						      	  j <= n ;						    	j <= n ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      ans += k ;					      	    if ( k == true ) ans += 1 ;				    	  ans += k ;						  
      if ( change == 1 ) {				      	    else ans += 0 ;					    	  if ( change == 1 ) {					  
	k = ! k ;					      	    if ( change == 1 ) {				    	    k = ! k ;						  
	change = 1 << i ;				      	      k = ! k ;						    	    change = 1 << i ;					  
      }							      	      change = 1 << i ;					    	  }							  
      else {						      	    }							    	  else {						  
	change -- ;					      	    else {						    	    change -- ;						  
      }							      	      change -- ;					    	  }							  
    }							      	    }							    	}							  
    i ++ ;						      	  }							    	i ++ ;							  
  }							      	  i ++ ;						      }								  
  return ans ;						      	}							      return ans ;						  
}							      	return ans ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I COUNT_DERANGEMENTS_PERMUTATION_SUCH_THAT_NO_ELEMENT_APPEARS_I
--							      --							    --								  --
int countDer ( int n ) {				      static int countDer ( int n ) {				    public static int countDer ( int n ) {			  success : None
  int der [ n + 1 ] ;					      	int der [ ] = new int [ n + 1 ] ;			      int [ ] der = new int [ n + 1 ] ;				  
  der [ 0 ] = 1 ;					      	der [ 0 ] = 1 ;						      der [ 0 ] = 1 ;						  
  der [ 1 ] = 0 ;					      	der [ 1 ] = 0 ;						      der [ 1 ] = 0 ;						  
  der [ 2 ] = 1 ;					      	der [ 2 ] = 1 ;						      der [ 2 ] = 1 ;						  
  for ( int i = 3 ;					      	for ( int i = 3 ;					      for ( int i = 3 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i -  	++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i -    ++ i ) {							  
  return der [ n ] ;					      	return der [ n ] ;					    	der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) 
}							      }								      }								  
							      								      return der [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY				      MAXIMUM_TRIPLET_SUM_ARRAY					    MAXIMUM_TRIPLET_SUM_ARRAY					  MAXIMUM_TRIPLET_SUM_ARRAY
--							      --							    --								  --
int maxTripletSum ( int arr [ ] , int n ) {		      static int maxTripletSum ( int arr [ ] , int n ) {	    public static int maxTripletSum ( int arr [ ] , int n ) {	  success : None
  int sum = INT_MIN ;					      	int sum = - 1000000 ;					      int sum = Integer . MIN_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) for ( int k = j + 1 ;				      	j ++ ) for ( int k = j + 1 ;				      j ++ ) for ( int k = j + 1 ;				  
  k < n ;						      	k < n ;							      k < n ;							  
  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = 	k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum =   k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = 
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRING_BINARY_SEQUENCE				      CONVERT_STRING_BINARY_SEQUENCE				    CONVERT_STRING_BINARY_SEQUENCE				  CONVERT_STRING_BINARY_SEQUENCE
--							      --							    --								  --
void strToBinary ( string s ) {				      static void strToBinary ( String s ) {			    public static void strToBinary ( String s ) {		  script_not_found : None
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i < n ;							      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int val = int ( s [ i ] ) ;				      	  int val = Integer . valueOf ( s . charAt ( i ) ) ;	    	int val = Integer . parseInt ( s . substring ( i , i + 1  
    string bin = "" ;					      	  String bin = "" ;					    	String bin = "" ;					  
    while ( val > 0 ) {					      	  while ( val > 0 ) {					    	while ( val > 0 ) {					  
      ( val % 2 ) ? bin . push_back ( '1' ) : bin . push_back 	    if ( val % 2 == 1 ) {				    	  ( val % 2 ) ? bin += '1' : bin += '0' ;		  
      val /= 2 ;					      	      bin += '1' ;					    	  val /= 2 ;						  
    }							      	    }							    	}							  
    reverse ( bin . begin ( ) , bin . end ( ) ) ;	      	    else bin += '0' ;					    	Collections . reverse ( bin ) ;				  
    cout << bin << " " ;				      	    val /= 2 ;						    	System . out . print ( bin + " " ) ;			  
  }							      	  }							      }								  
}							      	  bin = reverse ( bin ) ;				    }								  
							      	  System . out . print ( bin + " " ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	      DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	    DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1	  DISTRIBUTING_ITEMS_PERSON_CANNOT_TAKE_TWO_ITEMS_TYPE_1
--							      --							    --								  --
bool checkCount ( int arr [ ] , int n , int k ) {	      static boolean checkCount ( int arr [ ] , int n , int k ) {   public static boolean checkCount ( int arr [ ] , int n , int  failure : #Results:5, 10
  unordered_map < int , int > hash ;			      	HashMap < Integer , Integer > hash = new HashMap < > ( ) ;    HashMap < Integer , Integer > hash = new HashMap < > ( ) ;  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) hash [ arr [ i ] ] ++ ;			      	i ++ ) {						      i ++ ) {							  
  for ( auto x : hash ) if ( x . second > 2 * k ) return fals 	  if ( ! hash . containsKey ( arr [ i ] ) ) hash . put ( ar 	hash . put ( arr [ i ] , ++ i ) ;			  
  return true ;						      	  hash . put ( arr [ i ] , hash . get ( arr [ i ] ) + 1 ) ;   }								  
}							      	}							      for ( Map . Entry < Integer , Integer > x : hash . entrySet 
							      	for ( Map . Entry x : hash . entrySet ( ) ) if ( ( int ) x  	if ( x . getValue ( ) > 2 * k ) {			  
							      	return true ;						    	  return false ;					  
							      }								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT_1					      NON_REPEATING_ELEMENT_1					    NON_REPEATING_ELEMENT_1					  NON_REPEATING_ELEMENT_1
--							      --							    --								  --
int firstNonRepeating ( int arr [ ] , int n ) {		      static int firstNonRepeating ( int arr [ ] , int n ) {	    public static int firstNonRepeating ( int arr [ ] , int n ) { success : None
  unordered_map < int , int > mp ;			      	Map < Integer , Integer > m = new HashMap < > ( ) ;	      HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) mp [ arr [ i ] ] ++ ;				      	i ++ ) {						      i ++ ) {							  
  for ( int i = 0 ;					      	  if ( m . containsKey ( arr [ i ] ) ) {		    	mp . put ( arr [ i ] , ++ i ) ;				  
  i < n ;						      	    m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ;	      }								  
  i ++ ) if ( mp [ arr [ i ] ] == 1 ) return arr [ i ] ;      	  }							      for ( int i = 0 ;						  
  return - 1 ;						      	  else {						      i < n ;							  
}							      	    m . put ( arr [ i ] , 1 ) ;				      i ++ ) if ( mp . get ( arr [ i ] ) == 1 ) return arr [ i ]  
							      	  }							      return - 1 ;						  
							      	}							    }								  
							      	for ( int i = 0 ;					    								  
							      	i < n ;							    								  
							      	i ++ ) if ( m . get ( arr [ i ] ) == 1 ) return arr [ i ] ; 								  
							      	return - 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		      MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		    MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY		  MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY
--							      --							    --								  --
int findArea ( int arr [ ] , int n ) {			      static int findArea ( Integer arr [ ] , int n ) {		    public static int findArea ( int [ ] arr , int n ) {	  error : MAXIMUM_AREA_RECTANGLE_PICKING_FOUR_SIDES_
  sort ( arr , arr + n , greater < int > ( ) ) ;	      	Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;      Arrays . sort ( arr , n , new Comparator < Integer > ( ) {  ARRAY.java:25: error: no suitable method found for
  int dimension [ 2 ] = {				      	int [ ] dimension = {					    	public int compare ( Integer o1 , Integer o2 ) {	   sort(int[],int,<anonymous Comparator<Integer>>)
    0 , 0 }						      	  0 , 0 }						    	  int [ ] dimension = new int [ 2 ] ;			   Arrays . sort ( arr , n , new Comparator < Intege
    ;							      	  ;							    	  dimension [ 0 ] = o1 . intValue ( ) ;			  r > ( ) {	     ^	   method Arrays.sort(int[],
    for ( int i = 0 , j = 0 ;				      	  for ( int i = 0 , j = 0 ;				    	  dimension [ 1 ] = o2 . intValue ( ) ;			  int,int) is not applicable	   (argument mismatc
    i < n - 1 && j < 2 ;				      	  i < n - 1 && j < 2 ;					    	  return dimension [ 0 ] - dimension [ 1 ] ;		  h; <anonymous Comparator<Integer>> cannot be conve
    i ++ ) if ( arr [ i ] == arr [ i + 1 ] ) dimension [ j ++ 	  i ++ ) if ( arr [ i ] == arr [ i + 1 ] ) dimension [ j ++ 	}							  rted to int)	   method Arrays.sort(long[],int,int
    return ( dimension [ 0 ] * dimension [ 1 ] ) ;	      	  return ( dimension [ 0 ] * dimension [ 1 ] ) ;	      }								  ) is not applicable	    (argument mismatch; int[
  }							      	}							      ) ;							  ] cannot be converted to long[])     method Arrays
							      								      int [ ] dimension = new int [ 2 ] ;			  .sort(short[],int,int) is not applicable	 (ar
							      								      dimension [ 0 ] = arr [ 0 ] ;				  gument mismatch; int[] cannot be converted to shor
							      								      dimension [ 1 ] = arr [ 1 ] ;				  t[])	   method Arrays.sort(char[],int,int) is not
							      								      for ( int i = 0 , j = 0 ;					   applicable	    (argument mismatch; int[] cannot
							      								      i < n - 1 && j < 2 ;					   be converted to char[])     method Arrays.sort(by
							      								      i ++ ) if ( arr [ i ] == arr [ i + 1 ] ) dimension [ j ++ ] te[],int,int) is not applicable	(argument mi
							      								      return ( dimension [ 0 ] * dimension [ 1 ] ) ;		  smatch; int[] cannot be converted to byte[])	   m
							      								    }								  ethod Arrays.sort(float[],int,int) is not applicab
							      								    								  le	   (argument mismatch; int[] cannot be conve
							      								    								  rted to float[])     method Arrays.sort(double[],i
							      								    								  nt,int) is not applicable	  (argument mismatch
							      								    								  ; int[] cannot be converted to double[])     metho
							      								    								  d Arrays.sort(Object[],int,int) is not applicable
							      								    								  	(argument mismatch; int[] cannot be converte
							      								    								  d to Object[])     method Arrays.<T#1>sort(T#1[],C
							      								    								  omparator<? super T#1>) is not applicable	  (c
							      								    								  annot infer type-variable(s) T#1	   (actual a
							      								    								  nd formal argument lists differ in length))	  me
							      								    								  thod Arrays.<T#2>sort(T#2[],int,int,Comparator<? s
							      								    								  uper T#2>) is not applicable	     (cannot infer t
							      								    								  ype-variable(s) T#2	      (actual and formal arg
							      								    								  ument lists differ in length))   where T#1,T#2 are
							      								    								   type-variables:     T#1 extends Object declared i
							      								    								  n method <T#1>sort(T#1[],Comparator<? super T#1>)
							      								    								      T#2 extends Object declared in method <T#2>sor
							      								    								  t(T#2[],int,int,Comparator<? super T#2>) MAXIMUM_A
							      								    								  REA_RECTANGLE_PICKING_FOUR_SIDES_ARRAY.java:70: er
							      								    								  ror: incompatible types: Integer[] cannot be conve
							      								    								  rted to int[]		if(f_filled(param0.get(i),pa
							      								    								  ram1.get(i)) == f_gold(param0.get(i),param1.get(i)
							      								    								  ))				   ^ Note: Some mess
							      								    								  ages have been simplified; recompile with -Xdiags:
							      								    								  verbose to get full output 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	      HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	    HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP	  HOW_TO_CHECK_IF_A_GIVEN_ARRAY_REPRESENTS_A_BINARY_HEAP
--							      --							    --								  --
bool isHeap ( int arr [ ] , int i , int n ) {		      static boolean isHeap ( int arr [ ] , int i , int n ) {	    public static boolean isHeap ( int arr [ ] , int i , int n )  success : None
  if ( i > ( n - 2 ) / 2 ) return true ;		      	if ( i > ( n - 2 ) / 2 ) {				      if ( i > ( n - 2 ) / 2 ) return true ;			  
  if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 	  return true ;						      if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 
  return false ;					      	}							      return false ;						  
}							      	if ( arr [ i ] >= arr [ 2 * i + 1 ] && arr [ i ] >= arr [ 2 }								  
							      	  return true ;						    								  
							      	}							    								  
							      	return false ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_COMMON_SUPERSEQUENCE				      SHORTEST_COMMON_SUPERSEQUENCE				    SHORTEST_COMMON_SUPERSEQUENCE				  SHORTEST_COMMON_SUPERSEQUENCE
--							      --							    --								  --
int superSeq ( char * X , char * Y , int m , int n ) {	      static int superSeq ( String X , String Y , int m , int n ) { public static int superSeq ( char [ ] X , char [ ] Y , int m  script_not_found : None
  if ( ! m ) return n ;					      	if ( m == 0 ) return n ;				      if ( m == 0 ) return n ;					  
  if ( ! n ) return m ;					      	if ( n == 0 ) return m ;				      if ( n == 0 ) return m ;					  
  if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X , 	if ( X . charAt ( m - 1 ) == Y . charAt ( n - 1 ) ) return    if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X , 
  return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSeq  	return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , su   return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , su 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
int countSolutions ( int n ) {				      static int countSolutions ( int n ) {			    public static int countSolutions ( int n ) {		  success : None
  int x = 0 , yCount , res = 0 ;			      	int x = 0 , yCount , res = 0 ;				      int x = 0 , yCount , res = 0 ;				  
  for ( yCount = 0 ;					      	for ( yCount = 0 ;					      for ( yCount = 0 ;					  
  yCount * yCount < n ;					      	yCount * yCount < n ;					      yCount * yCount < n ;					  
  yCount ++ ) ;						      	yCount ++ ) ;						      yCount ++ ) ;						  
  while ( yCount != 0 ) {				      	while ( yCount != 0 ) {					      while ( yCount != 0 ) {					  
    res += yCount ;					      	  res += yCount ;					    	res += yCount ;						  
    x ++ ;						      	  x ++ ;						    	x ++ ;							  
    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCoun 	  while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCoun 	while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCoun 
  }							      	}							    	  yCount -- ;						  
  return res ;						      	return res ;						    	}							  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_ FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_ FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_ FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES_
--							      --							    --								  --
int countSol ( int coeff [ ] , int n , int rhs ) {	      static int countSol ( int coeff [ ] , int n , int rhs ) {	    public static int countSol ( int [ ] coeff , int n , int rhs  script_not_found : None
  int dp [ rhs + 1 ] ;					      	int dp [ ] = new int [ rhs + 1 ] ;			      int [ ] dp = new int [ rhs + 1 ] ;			  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	Arrays . fill ( dp , 0 ) ;				      Arrays . fill ( dp , 0 ) ;				  
  dp [ 0 ] = 1 ;					      	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = coeff [ i ] ;			      	i ++ ) for ( int j = coeff [ i ] ;			      i ++ ) for ( int j = coeff [ i ] ;			  
  j <= rhs ;						      	j <= rhs ;						      j <= rhs ;						  
  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;		      	j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;		      j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;		  
  return dp [ rhs ] ;					      	return dp [ rhs ] ;					      return dp [ rhs ] ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	      DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_4_LONGEST_COMMON_SUBSEQUENCE
--							      --							    --								  --
int lcs ( char * X , char * Y , int m , int n ) {	      int lcs ( char [ ] X , char [ ] Y , int m , int n ) {	    public static int lcs ( char [ ] X , char [ ] Y , int m , int script_not_found : None
  if ( m == 0 || n == 0 ) return 0 ;			      	if ( m == 0 || n == 0 ) return 0 ;			      if ( m == 0 || n == 0 ) return 0 ;			  
  if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,  	if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,    if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + lcs ( X , Y ,  
  else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y , 	else return max ( lcs ( X , Y , m , n - 1 ) , lcs ( X , Y ,   else return Math . max ( lcs ( X , Y , m , n - 1 ) , lcs (  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSEQUENCE_GCD_GREATER_1			      LARGEST_SUBSEQUENCE_GCD_GREATER_1				    LARGEST_SUBSEQUENCE_GCD_GREATER_1				  LARGEST_SUBSEQUENCE_GCD_GREATER_1
--							      --							    --								  --
int largestGCDSubsequence ( int arr [ ] , int n ) {	      static int largestGCDSubsequence ( int arr [ ] , int n ) {    public static int largestGCDSubsequence ( int arr [ ] , int n failure : #Results:7, 10
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  int maxele = * max_element ( arr , arr + n ) ;	      	int maxele = Arrays . stream ( arr ) . max ( ) . getAsInt (   int maxele = Math . max ( arr . length , n ) ;		  
  for ( int i = 2 ;					      	;							      for ( int i = 2 ;						  
  i <= maxele ;						      	for ( int i = 2 ;					      i <= maxele ;						  
  ++ i ) {						      	i <= maxele ;						      ++ i ) {							  
    int count = 0 ;					      	++ i ) {						    	int count = 0 ;						  
    for ( int j = 0 ;					      	  int count = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  for ( int j = 0 ;					    	j < n ;							  
    ++ j ) {						      	  j < n ;						    	++ j ) {						  
      if ( arr [ j ] % i == 0 ) ++ count ;		      	  ++ j ) {						    	  if ( arr [ j ] % i == 0 ) {				  
    }							      	    if ( arr [ j ] % i == 0 ) ++ count ;		    	    ++ count ;						  
    ans = max ( ans , count ) ;				      	  }							    	  }							  
  }							      	  ans = Math . max ( ans , count ) ;			    	}							  
  return ans ;						      	}							    	ans = Math . max ( ans , count ) ;			  
}							      	return ans ;						      }								  
							      }								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUPER_PRIME						      SUPER_PRIME						    SUPER_PRIME							  SUPER_PRIME
--							      --							    --								  --
bool SieveOfEratosthenes ( int n , bool isPrime [ ] ) {	      static void SieveOfEratosthenes ( int n , boolean isPrime [ ] public static boolean SieveOfEratosthenes ( int n , boolean [ script_not_found : None
  isPrime [ 0 ] = isPrime [ 1 ] = false ;		      	isPrime [ 0 ] = isPrime [ 1 ] = false ;			      isPrime [ 0 ] = isPrime [ 1 ] = false ;			  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) isPrime [ i ] = true ;				      	i ++ ) isPrime [ i ] = true ;				      i ++ ) {							  
  for ( int p = 2 ;					      	for ( int p = 2 ;					    	isPrime [ i ] = true ;					  
  p * p <= n ;						      	p * p <= n ;						      }								  
  p ++ ) {						      	p ++ ) {						      for ( int p = 2 ;						  
    if ( isPrime [ p ] == true ) {			      	  if ( isPrime [ p ] == true ) {			      p * p <= n ;						  
      for ( int i = p * 2 ;				      	    for ( int i = p * 2 ;				      p ++ ) {							  
      i <= n ;						      	    i <= n ;						    	if ( isPrime [ p ] == true ) {				  
      i += p ) isPrime [ i ] = false ;			      	    i += p ) isPrime [ i ] = false ;			    	  for ( int i = p * 2 ;					  
    }							      	  }							    	  i <= n ;						  
  }							      	}							    	  i += p ) {						  
}							      }								    	    isPrime [ i ] = false ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HARDY_RAMANUJAN_THEOREM					      HARDY_RAMANUJAN_THEOREM					    HARDY_RAMANUJAN_THEOREM					  HARDY_RAMANUJAN_THEOREM
--							      --							    --								  --
int exactPrimeFactorCount ( int n ) {			      static int exactPrimeFactorCount ( int n ) {		    public static int exactPrimeFactorCount ( int n ) {		  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  if ( n % 2 == 0 ) {					      	if ( n % 2 == 0 ) {					      if ( n % 2 == 0 ) {					  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
    while ( n % 2 == 0 ) n = n / 2 ;			      	  while ( n % 2 == 0 ) n = n / 2 ;			    	while ( n % 2 == 0 ) {					  
  }							      	}							    	  n = n / 2 ;						  
  for ( int i = 3 ;					      	for ( int i = 3 ;					    	}							  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      }								  
  i = i + 2 ) {						      	i = i + 2 ) {						      for ( int i = 3 ;						  
    if ( n % i == 0 ) {					      	  if ( n % i == 0 ) {					      i <= Math . sqrt ( n ) ;					  
      count ++ ;					      	    count ++ ;						      i = i + 2 ) {						  
      while ( n % i == 0 ) n = n / i ;			      	    while ( n % i == 0 ) n = n / i ;			    	if ( n % i == 0 ) {					  
    }							      	  }							    	  count ++ ;						  
  }							      	}							    	  while ( n % i == 0 ) {				  
  if ( n > 2 ) count ++ ;				      	if ( n > 2 ) count ++ ;					    	    n = n / i ;						  
  return count ;					      	return count ;						    	  }							  
}							      }								    	}							  
							      								      }								  
							      								      if ( n > 2 ) {						  
							      								    	count ++ ;						  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ARRANGEMENT_QUEUE_GIVEN_TIME			      FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				    FIND_ARRANGEMENT_QUEUE_GIVEN_TIME				  FIND_ARRANGEMENT_QUEUE_GIVEN_TIME
--							      --							    --								  --
void solve ( int n , int t , string s ) {		      static void solve ( int n , int t , char s [ ] ) {	    public static void solve ( int n , int t , String s ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < t ;						      	i < t ;							      i < t ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < n - 1 ;						      	j < n - 1 ;						      j < n - 1 ;						  
  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {	      	j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {	      j ++ ) if ( s . charAt ( j ) == 'B' && s . charAt ( j + 1 ) 
    char temp = s [ j ] ;				      	  char temp = s [ j ] ;					    	char temp = s . charAt ( j ) ;				  
    s [ j ] = s [ j + 1 ] ;				      	  s [ j ] = s [ j + 1 ] ;				    	s . setCharAt ( j , s . charAt ( j + 1 ) ) ;		  
    s [ j + 1 ] = temp ;				      	  s [ j + 1 ] = temp ;					    	s . setCharAt ( j + 1 , temp ) ;			  
    j ++ ;						      	  j ++ ;						    	j ++ ;							  
  }							      	}							      }								  
  cout << s ;						      	System . out . print ( s ) ;				      System . out . println ( s ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		      UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		    UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1		  UNION_AND_INTERSECTION_OF_TWO_SORTED_ARRAYS_2_1
--							      --							    --								  --
int printIntersection ( int arr1 [ ] , int arr2 [ ] , int m , static void printIntersection ( int arr1 [ ] , int arr2 [ ] , public static int printIntersection ( int arr1 [ ] , int arr2 script_not_found : None
  int i = 0 , j = 0 ;					      	int i = 0 , j = 0 ;					      int i = 0 , j = 0 ;					  
  while ( i < m && j < n ) {				      	while ( i < m && j < n ) {				      while ( i < m && j < n ) {				  
    if ( arr1 [ i ] < arr2 [ j ] ) i ++ ;		      	  if ( arr1 [ i ] < arr2 [ j ] ) i ++ ;			    	if ( arr1 [ i ] < arr2 [ j ] ) {			  
    else if ( arr2 [ j ] < arr1 [ i ] ) j ++ ;		      	  else if ( arr2 [ j ] < arr1 [ i ] ) j ++ ;		    	  i ++ ;						  
    else {						      	  else {						    	}							  
      cout << arr2 [ j ] << " " ;			      	    System . out . print ( arr2 [ j ++ ] + " " ) ;	    	else if ( arr2 [ j ] < arr1 [ i ] ) {			  
      i ++ ;						      	    i ++ ;						    	  j ++ ;						  
      j ++ ;						      	  }							    	}							  
    }							      	}							    	else {							  
  }							      }								    	  System . out . print ( arr2 [ j ] + " " ) ;		  
}							      								    	  i ++ ;						  
							      								    	  j ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return i ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_REACHING_POINT_2_3_STEPS_TIME		      PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			    PROBABILITY_REACHING_POINT_2_3_STEPS_TIME			  PROBABILITY_REACHING_POINT_2_3_STEPS_TIME
--							      --							    --								  --
float find_prob ( int N , float P ) {			      static float find_prob ( int N , float P ) {		    public static float findProb ( int N , float P ) {		  script_not_found : None
  double dp [ N + 1 ] ;					      	double dp [ ] = new double [ N + 1 ] ;			      double [ ] dp = new double [ N + 1 ] ;			  
  dp [ 0 ] = 1 ;					      	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
  dp [ 1 ] = 0 ;					      	dp [ 1 ] = 0 ;						      dp [ 1 ] = 0 ;						  
  dp [ 2 ] = P ;					      	dp [ 2 ] = P ;						      dp [ 2 ] = P ;						  
  dp [ 3 ] = 1 - P ;					      	dp [ 3 ] = 1 - P ;					      dp [ 3 ] = 1 - P ;					  
  for ( int i = 4 ;					      	for ( int i = 4 ;					      for ( int i = 4 ;						  
  i <= N ;						      	i <= N ;						      i <= N ;							  
  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i 	++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i   ++ i ) {							  
  return dp [ N ] ;					      	return ( ( float ) ( dp [ N ] ) ) ;			    	dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3  
}							      }								      }								  
							      								      return dp [ N ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_WITH_CONSECUTIVE_1S			      COUNT_STRINGS_WITH_CONSECUTIVE_1S				    COUNT_STRINGS_WITH_CONSECUTIVE_1S				  COUNT_STRINGS_WITH_CONSECUTIVE_1S
--							      --							    --								  --
int countStrings ( int n ) {				      static int countStrings ( int n ) {			    public static int countStrings ( int n ) {			  script_not_found : None
  int a [ n ] , b [ n ] ;				      	int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;	      int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;	  
  a [ 0 ] = b [ 0 ] = 1 ;				      	a [ 0 ] = b [ 0 ] = 1 ;					      a [ 0 ] = b [ 0 ] = 1 ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;		      	  a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			    	a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;			  
    b [ i ] = a [ i - 1 ] ;				      	  b [ i ] = a [ i - 1 ] ;				    	b [ i ] = a [ i - 1 ] ;					  
  }							      	}							      }								  
  return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;	      	from 2 ^ n return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_AREA_TRIANGLE				      C_PROGRAM_FIND_AREA_TRIANGLE				    C_PROGRAM_FIND_AREA_TRIANGLE				  C_PROGRAM_FIND_AREA_TRIANGLE
--							      --							    --								  --
float findArea ( float a , float b , float c ) {	      static float findArea ( float a , float b , float c ) {	    public static float findArea ( float a , float b , float c )  script_not_found : None
  if ( a < 0 || b < 0 || c < 0 || ( a + b <= c ) || a + c <=  	if ( a < 0 || b < 0 || c < 0 || ( a + b <= c ) || a + c <=    if ( a < 0 || b < 0 || c < 0 || ( a + b <= c ) || a + c <=  
    cout << "Not a valid trianglen" ;			      	  System . out . println ( "Not a valid triangle" ) ;	    	System . out . println ( "Not a valid trianglen" ) ;	  
    exit ( 0 ) ;					      	  System . exit ( 0 ) ;					    	System . exit ( 0 ) ;					  
  }							      	}							      }								  
  float s = ( a + b + c ) / 2 ;				      	float s = ( a + b + c ) / 2 ;				      float s = ( a + b + c ) / 2 ;				  
  return sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ;     	return ( float ) Math . sqrt ( s * ( s - a ) * ( s - b ) *    return Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c )  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		      FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		    FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S		  FIND_ROW_NUMBER_BINARY_MATRIX_MAXIMUM_NUMBER_1S
--							      --							    --								  --
void findMax ( int arr [ ] [ N ] ) {			      static void findMax ( int arr [ ] [ ] ) {			    public static void findMax ( int arr [ ] [ ] ) {		  script_not_found : None
  int row = 0 , i , j ;					      	int row = 0 , i , j ;					      int row = 0 , i , j ;					  
  for ( i = 0 , j = N - 1 ;				      	for ( i = 0 , j = N - 1 ;				      for ( i = 0 , j = N - 1 ;					  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( arr [ i ] [ j ] == 1 && j >= 0 ) {		      	  while ( j >= 0 && arr [ i ] [ j ] == 1 ) {		    	while ( arr [ i ] [ j ] == 1 && j >= 0 ) {		  
      row = i ;						      	    row = i ;						    	  row = i ;						  
      j -- ;						      	    j -- ;						    	  j -- ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << "Row number = " << row + 1 ;			      	System . out . print ( "Row number = " + ( row + 1 ) ) ;      System . out . println ( "Row number = " + row + ", MaxCoun 
  cout << ", MaxCount = " << N - 1 - j ;		      	System . out . print ( ", MaxCount = " + ( N - 1 - j ) ) ;  }								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE
--							      --							    --								  --
int eggDrop ( int n , int k ) {				      static int eggDrop ( int n , int k ) {			    public static int eggDrop ( int n , int k ) {		  script_not_found : None
  if ( k == 1 || k == 0 ) return k ;			      	if ( k == 1 || k == 0 ) return k ;			      if ( k == 1 || k == 0 ) return k ;			  
  if ( n == 1 ) return k ;				      	if ( n == 1 ) return k ;				      if ( n == 1 ) return k ;					  
  int min = INT_MAX , x , res ;				      	int min = Integer . MAX_VALUE ;				      int min = Integer . MAX_VALUE , x , res ;			  
  for ( x = 1 ;						      	int x , res ;						      for ( x = 1 ;						  
  x <= k ;						      	for ( x = 1 ;						      x <= k ;							  
  x ++ ) {						      	x <= k ;						      x ++ ) {							  
    res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - 	x ++ ) {						    	res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDrop (  
    if ( res < min ) min = res ;			      	  res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDrop (  	if ( res < min ) {					  
  }							      	  if ( res < min ) min = res ;				    	  min = res ;						  
  return min + 1 ;					      	}							    	}							  
}							      	return min + 1 ;					      }								  
							      }								      return min + 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_1S_SORTED_BINARY_ARRAY				      COUNT_1S_SORTED_BINARY_ARRAY				    COUNT_1S_SORTED_BINARY_ARRAY				  COUNT_1S_SORTED_BINARY_ARRAY
--							      --							    --								  --
int countOnes ( bool arr [ ] , int low , int high ) {	      int countOnes ( bool arr [ ] , int low , int high ) {	    public static int countOnes ( boolean arr [ ] , int low , int error : COUNT_1S_SORTED_BINARY_ARRAY.java:27: erro
  if ( high >= low ) {					      	if ( high >= low ) {					      if ( high >= low ) {					  r: incomparable types: boolean and int     if ( (
    int mid = low + ( high - low ) / 2 ;		      	  int mid = low + ( high - low ) / 2 ;			    	int mid = low + ( high - low ) / 2 ;			  mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ m
    if ( ( mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ m 	  if ( ( mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ m 	if ( ( mid == high || arr [ mid + 1 ] == 0 ) && ( arr [ m id ] == 1 ) ) return mid + 1 ;
    if ( arr [ mid ] == 1 ) return countOnes ( arr , ( mid +  	  if ( arr [ mid ] == 1 ) return countOnes ( arr , ( mid +  	if ( arr [ mid ] == 1 ) return countOnes ( arr , ( mid +  			 ^ COUNT_1S_SORTED_BINARY_AR
    return countOnes ( arr , low , ( mid - 1 ) ) ;	      	  return countOnes ( arr , low , ( mid - 1 ) ) ;	    	return countOnes ( arr , low , ( mid - 1 ) ) ;		  RAY.java:27: error: incomparable types: boolean an
  }							      	}							      }								  d int	    if ( ( mid == high || arr [ mid + 1 ] ==
  return 0 ;						      	return 0 ;						      return 0 ;						   0 ) && ( arr [ mid ] == 1 ) ) return mid + 1 ;
}							      }								    }								  
							      								    								  		^ COUNT_1S_SORTED_BINARY_ARRAY.java:
							      								    								  28: error: incomparable types: boolean and int
							      								    								   if ( arr [ mid ] == 1 ) return f_filled ( arr , (
							      								    								   mid + 1 ) , high ) ;			     ^ COUNT
							      								    								  _1S_SORTED_BINARY_ARRAY.java:72: error: incompatib
							      								    								  le types: int[] cannot be converted to boolean[]
							      								    								  	 if(f_filled(param0.get(i),param1.get(i),par
							      								    								  am2.get(i)) == f_gold(param0.get(i),param1.get(i),
							      								    								  param2.get(i)))				^ No
							      								    								  te: Some messages have been simplified; recompile
							      								    								  with -Xdiags:verbose to get full output 4 errors
							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FIBONACCI_NUMBERS					      SUM_FIBONACCI_NUMBERS					    SUM_FIBONACCI_NUMBERS					  SUM_FIBONACCI_NUMBERS
--							      --							    --								  --
int calculateSum ( int n ) {				      static int calculateSum ( int n ) {			    public static int calculateSum ( int n ) {			  error : SUM_FIBONACCI_NUMBERS.java:32: error: ';'
  if ( n <= 0 ) return 0 ;				      	if ( n <= 0 ) return 0 ;				      if ( n <= 0 ) return 0 ;					  expected   fibo [ 0 ] = 0 , fibo [ 1 ] = 1 ;
  int fibo [ n + 1 ] ;					      	int fibo [ ] = new int [ n + 1 ] ;			      int [ ] fibo = new int [ n + 1 ] ;			  	     ^ 1 error
  fibo [ 0 ] = 0 , fibo [ 1 ] = 1 ;			      	fibo [ 0 ] = 0 ;					      fibo [ 0 ] = 0 , fibo [ 1 ] = 1 ;				  
  int sum = fibo [ 0 ] + fibo [ 1 ] ;			      	fibo [ 1 ] = 1 ;					      int sum = fibo [ 0 ] + fibo [ 1 ] ;			  
  for ( int i = 2 ;					      	int sum = fibo [ 0 ] + fibo [ 1 ] ;			      for ( int i = 2 ;						  
  i <= n ;						      	for ( int i = 2 ;					      i <= n ;							  
  i ++ ) {						      	i <= n ;						      i ++ ) {							  
    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;	      	i ++ ) {						    	fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;		  
    sum += fibo [ i ] ;					      	  fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;	    	sum += fibo [ i ] ;					  
  }							      	  sum += fibo [ i ] ;					      }								  
  return sum ;						      	}							      return sum ;						  
}							      	return sum ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY
--							      --							    --								  --
int minJumps ( int arr [ ] , int n ) {			      static int minJumps ( int arr [ ] , int l , int h ) {	    public static int minJumps ( int arr [ ] , int n ) {	  script_not_found : None
  if ( n == 1 ) return 0 ;				      	if ( h == l ) return 0 ;				      if ( n == 1 ) return 0 ;					  
  int res = INT_MAX ;					      	if ( arr [ l ] == 0 ) return Integer . MAX_VALUE ;	      int res = Integer . MAX_VALUE ;				  
  for ( int i = n - 2 ;					      	int min = Integer . MAX_VALUE ;				      for ( int i = n - 2 ;					  
  i >= 0 ;						      	for ( int i = l + 1 ;					      i >= 0 ;							  
  i -- ) {						      	i <= h && i <= l + arr [ l ] ;				      i -- ) {							  
    if ( i + arr [ i ] >= n - 1 ) {			      	i ++ ) {						    	if ( i + arr [ i ] >= n - 1 ) {				  
      int sub_res = minJumps ( arr , i + 1 ) ;		      	  int jumps = minJumps ( arr , i , h ) ;		    	  int sub_res = minJumps ( arr , i + 1 ) ;		  
      if ( sub_res != INT_MAX ) res = min ( res , sub_res + 1 	  if ( jumps != Integer . MAX_VALUE && jumps + 1 < min ) mi 	  if ( sub_res != Integer . MAX_VALUE ) {		  
    }							      	}							    	    res = Math . min ( res , sub_res + 1 ) ;		  
  }							      	return min ;						    	  }							  
  return res ;						      }								    	}							  
}							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		      FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		    FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES		  FIND_N_TH_ELEMENT_FROM_STERNS_DIATOMIC_SERIES
--							      --							    --								  --
int findSDSFunc ( int n ) {				      static int findSDSFunc ( int n ) {			    public static int findSDSFunc ( int n ) {			  success : None
  int DP [ n + 1 ] ;					      	int DP [ ] = new int [ n + 1 ] ;			      int [ ] DP = new int [ n + 1 ] ;				  
  DP [ 0 ] = 0 ;					      	DP [ 0 ] = 0 ;						      DP [ 0 ] = 0 ;						  
  DP [ 1 ] = 1 ;					      	DP [ 1 ] = 1 ;						      DP [ 1 ] = 1 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ;		      	  if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ;		    	if ( i % 2 == 0 ) {					  
    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 	  else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 	  DP [ i ] = DP [ i / 2 ] ;				  
  }							      	}							    	}							  
  return DP [ n ] ;					      	return DP [ n ] ;					    	else {							  
}							      }								    	  DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ]  
							      								    	}							  
							      								      }								  
							      								      return DP [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS		      PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			    PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS			  PUT_SPACES_WORDS_STARTING_CAPITAL_LETTERS
--							      --							    --								  --
void amendSentence ( string str ) {			      public static void amendSentence ( String sstr ) {	    public static void amendSentence ( String str ) {		  script_not_found : None
  for ( int i = 0 ;					      	char [ ] str = sstr . toCharArray ( ) ;			      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	for ( int i = 0 ;					      i < str . length ( ) ;					  
  i ++ ) {						      	i < str . length ;					      i ++ ) {							  
    if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {	      	i ++ ) {						    	if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 
      str [ i ] = str [ i ] + 32 ;			      	  if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {		    	  str . setCharAt ( i , str . charAt ( i ) + 32 ) ;	  
      if ( i != 0 ) cout << " " ;			      	    str [ i ] = ( char ) ( str [ i ] + 32 ) ;		    	  if ( i != 0 ) {					  
      cout << str [ i ] ;				      	    if ( i != 0 ) System . out . print ( " " ) ;	    	    System . out . print ( " " ) ;			  
    }							      	    System . out . print ( str [ i ] ) ;		    	  }							  
    else cout << str [ i ] ;				      	  }							    	  System . out . print ( str . charAt ( i ) ) ;		  
  }							      	  else System . out . print ( str [ i ] ) ;		    	}							  
}							      	}							    	else {							  
							      }								    	  System . out . print ( str . charAt ( i ) ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING
--							      --							    --								  --
int sumAtKthLevel ( string tree , int k ) {		      static int sumAtKthLevel ( String tree , int k ) {	    public static int sumAtKthLevel ( String tree , int k ) {	  success : None
  int level = - 1 ;					      	int level = - 1 ;					      int level = - 1 ;						  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  int n = tree . length ( ) ;				      	int n = tree . length ( ) ;				      int n = tree . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( tree [ i ] == '(' ) level ++ ;			      	  if ( tree . charAt ( i ) == '(' ) level ++ ;		    	if ( tree . charAt ( i ) == '(' ) {			  
    else if ( tree [ i ] == ')' ) level -- ;		      	  else if ( tree . charAt ( i ) == ')' ) level -- ;	    	  level ++ ;						  
    else {						      	  else {						    	}							  
      if ( level == k ) sum += ( tree [ i ] - '0' ) ;	      	    if ( level == k ) sum += ( tree . charAt ( i ) - '0' )  	else if ( tree . charAt ( i ) == ')' ) {		  
    }							      	  }							    	  level -- ;						  
  }							      	}							    	}							  
  return sum ;						      	return sum ;						    	else {							  
}							      }								    	  if ( level == k ) {					  
							      								    	    sum += ( tree . charAt ( i ) - '0' ) ;		  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		      NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		    NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES		  NUMBER_SUBSEQUENCES_AB_STRING_REPEATED_K_TIMES
--							      --							    --								  --
int countOccurrences ( string s , int K ) {		      static int countOccurrences ( String s , int K ) {	    public static int countOccurrences ( String s , int K ) {	  success : None
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  int C , c1 = 0 , c2 = 0 ;				      	int C = 0 , c1 = 0 , c2 = 0 ;				      int C = 0 , c1 = 0 , c2 = 0 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( s [ i ] == 'a' ) c1 ++ ;			      	  if ( s . charAt ( i ) == 'a' ) c1 ++ ;		    	if ( s . charAt ( i ) == 'a' ) {			  
    if ( s [ i ] == 'b' ) {				      	  if ( s . charAt ( i ) == 'b' ) {			    	  c1 ++ ;						  
      c2 ++ ;						      	    c2 ++ ;						    	}							  
      C += c1 ;						      	    C += c1 ;						    	if ( s . charAt ( i ) == 'b' ) {			  
    }							      	  }							    	  c2 ++ ;						  
  }							      	}							    	  C += c1 ;						  
  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;	      	return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;	    	}							  
}							      }								      }								  
							      								      return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			      CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX			    CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX				  CHECK_SUMS_TH_ROW_TH_COLUMN_MATRIX
--							      --							    --								  --
bool areSumSame ( int a [ ] [ MAX ] , int n , int m ) {	      static boolean areSumSame ( int a [ ] [ ] , int n , int m ) { public static boolean areSumSame ( int a [ ] [ ] , int n , in script_not_found : None
  int sum1 = 0 , sum2 = 0 ;				      	int sum1 = 0 , sum2 = 0 ;				      int sum1 = 0 , sum2 = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum1 = 0 , sum2 = 0 ;				      	  sum1 = 0 ;						    	sum1 = 0 , sum2 = 0 ;					  
    for ( int j = 0 ;					      	  sum2 = 0 ;						    	for ( int j = 0 ;					  
    j < m ;						      	  for ( int j = 0 ;					    	j < m ;							  
    j ++ ) {						      	  j < m ;						    	j ++ ) {						  
      sum1 += a [ i ] [ j ] ;				      	  j ++ ) {						    	  sum1 += a [ i ] [ j ] ;				  
      sum2 += a [ j ] [ i ] ;				      	    sum1 += a [ i ] [ j ] ;				    	  sum2 += a [ j ] [ i ] ;				  
    }							      	    sum2 += a [ j ] [ i ] ;				    	}							  
    if ( sum1 == sum2 ) return true ;			      	  }							    	if ( sum1 == sum2 ) return true ;			  
  }							      	  if ( sum1 == sum2 ) return true ;			      }								  
  return false ;					      	}							      return false ;						  
}							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL NOBLE_INTEGERS_IN_AN_ARRAY_COUNT_OF_GREATER_ELEMENTS_IS_EQUAL
--							      --							    --								  --
int nobleInteger ( int arr [ ] , int n ) {		      public static int nobleInteger ( int arr [ ] ) {		    public static int nobleInteger ( int arr [ ] , int n ) {	  script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = 0 ;					      	int n = arr . length ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	for ( int i = 0 ;					      i < n - 1 ;						  
  i ++ ) {						      	i < n - 1 ;						      i ++ ) {							  
    if ( arr [ i ] == arr [ i + 1 ] ) continue ;	      	i ++ ) {						    	if ( arr [ i ] == arr [ i + 1 ] ) continue ;		  
    if ( arr [ i ] == n - i - 1 ) return arr [ i ] ;	      	  if ( arr [ i ] == arr [ i + 1 ] ) continue ;		    	if ( arr [ i ] == n - i - 1 ) return arr [ i ] ;	  
  }							      	  if ( arr [ i ] == n - i - 1 ) return arr [ i ] ;	      }								  
  if ( arr [ n - 1 ] == 0 ) return arr [ n - 1 ] ;	      	}							      if ( arr [ n - 1 ] == 0 ) return arr [ n - 1 ] ;		  
  return - 1 ;						      	if ( arr [ n - 1 ] == 0 ) return arr [ n - 1 ] ;	      return - 1 ;						  
}							      	return - 1 ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE COUNT_NUMBER_WAYS_TILE_FLOOR_SIZE_N_X_M_USING_1_X_M_SIZE_TILE
--							      --							    --								  --
int countWays ( int n , int m ) {			      static int countWays ( int n , int m ) {			    public static int countWays ( int n , int m ) {		  success : None
  int count [ n + 1 ] ;					      	int count [ ] = new int [ n + 1 ] ;			      int [ ] count = new int [ n + 1 ] ;			  
  count [ 0 ] = 0 ;					      	count [ 0 ] = 0 ;					      count [ 0 ] = 0 ;						  
  for ( int i = 1 ;					      	int i ;							      for ( int i = 1 ;						  
  i <= n ;						      	for ( i = 1 ;						      i <= n ;							  
  i ++ ) {						      	i <= n ;						      i ++ ) {							  
    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i -  	i ++ ) {						    	if ( i > m ) {						  
    else if ( i < m ) count [ i ] = 1 ;			      	  if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i -  	  count [ i ] = count [ i - 1 ] + count [ i - m ] ;	  
    else count [ i ] = 2 ;				      	  else if ( i < m ) count [ i ] = 1 ;			    	}							  
  }							      	  else count [ i ] = 2 ;				    	else if ( i < m ) {					  
  return count [ n ] ;					      	}							    	  count [ i ] = 1 ;					  
}							      	return count [ n ] ;					    	}							  
							      }								    	else {							  
							      								    	  count [ i ] = 2 ;					  
							      								    	}							  
							      								      }								  
							      								      return count [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CAESAR_CIPHER						      CAESAR_CIPHER						    CAESAR_CIPHER						  CAESAR_CIPHER
--							      --							    --								  --
string encrypt ( string text , int s ) {		      public static StringBuffer encrypt ( String text , int s ) {  public static String encrypt ( String text , int s ) {	  script_not_found : None
  string result = "" ;					      	StringBuffer result = new StringBuffer ( ) ;		      StringBuffer sb = new StringBuffer ( ) ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < text . length ( ) ;				      	i < text . length ( ) ;					      i < text . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( isupper ( text [ i ] ) ) result += char ( int ( text 	  if ( Character . isUpperCase ( text . charAt ( i ) ) ) {  	if ( Character . isUpperCase ( text . charAt ( i ) ) ) {  
    else result += char ( int ( text [ i ] + s - 97 ) % 26 +  	    char ch = ( char ) ( ( ( int ) text . charAt ( i ) + s  	  sb . append ( ( char ) ( ( int ) ( text . charAt ( i )  
  }							      	    result . append ( ch ) ;				    	}							  
  return result ;					      	  }							    	else {							  
}							      	  else {						    	  sb . append ( ( char ) ( ( int ) ( text . charAt ( i )  
							      	    char ch = ( char ) ( ( ( int ) text . charAt ( i ) + s  	}							  
							      	    result . append ( ch ) ;				      }								  
							      	  }							      return sb . toString ( ) ;				  
							      	}							    }								  
							      	return result ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS_1
--							      --							    --								  --
int countSubstringWithEqualEnds ( string s ) {		      static int countSubstringWithEqualEnds ( String s ) {	    public static int countSubstringWithEqualEnds ( String s ) {  script_not_found : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  int count [ MAX_CHAR ] = {				      	int [ ] count = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ MAX_CHAR ] ;			  
    0 }							      	for ( int i = 0 ;					      count [ 0 ] = 0 ;						  
    ;							      	i < n ;							      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	i ++ ) count [ s . charAt ( i ) - 'a' ] ++ ;		      i < n ;							  
    i < n ;						      	for ( int i = 0 ;					      i ++ ) {							  
    i ++ ) count [ s [ i ] - 'a' ] ++ ;			      	i < MAX_CHAR ;						    	count [ s . charAt ( i ) - 'a' ] ++ ;			  
    for ( int i = 0 ;					      	i ++ ) result += ( count [ i ] * ( count [ i ] + 1 ) / 2 )    }								  
    i < MAX_CHAR ;					      	return result ;						      for ( int i = 0 ;						  
    i ++ ) result += ( count [ i ] * ( count [ i ] + 1 ) / 2  }								      i < MAX_CHAR ;						  
    return result ;					      								      i ++ ) {							  
  }							      								    	result += ( count [ i ] * ( count [ i ] + 1 ) / 2 ) ;	  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY_1
--							      --							    --								  --
int maxDiff ( int arr [ ] , int n ) {			      static int maxDiff ( int [ ] arr , int n ) {		    public static int maxDiff ( int arr [ ] , int n ) {		  script_not_found : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] != arr [ i + 1 ] ) result += abs ( arr [ i 	  if ( arr [ i ] != arr [ i + 1 ] ) result += Math . abs (  	if ( arr [ i ] != arr [ i + 1 ] ) {			  
    else i ++ ;						      	  else i ++ ;						    	  result += Math . abs ( arr [ i ] ) ;			  
  }							      	}							    	}							  
  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ 	if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += Math . abs  	else {							  
  return result ;					      	return result ;						    	  i ++ ;						  
}							      }								    	}							  
							      								      }								  
							      								      if ( arr [ n - 2 ] != arr [ n - 1 ] ) {			  
							      								    	result += Math . abs ( arr [ n - 1 ] ) ;		  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		      MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		    MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX		  MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX
--							      --							    --								  --
long long int maxDecimalValue ( int mat [ ] [ N ] , int i , i static int maxDecimalValue ( int mat [ ] [ ] , int i , int j  public static long maxDecimalValue ( int mat [ ] [ ] , int i  script_not_found : None
  if ( i >= N || j >= N ) return 0 ;			      	if ( i >= N || j >= N ) {				      if ( i >= N || j >= N ) return 0 ;			  
  int result = max ( maxDecimalValue ( mat , i , j + 1 , p +  	  return 0 ;						      int result = Math . max ( maxDecimalValue ( mat , i , j + 1 
  if ( mat [ i ] [ j ] == 1 ) return pow ( 2 , p ) + result ; 	}							      if ( mat [ i ] [ j ] == 1 ) return Math . pow ( 2 , p ) + r 
  else return result ;					      	int result = Math . max ( maxDecimalValue ( mat , i , j + 1   else return result ;					  
}							      	if ( mat [ i ] [ j ] == 1 ) {				    }								  
							      	  return ( int ) ( Math . pow ( 2 , p ) + result ) ;	    								  
							      	}							    								  
							      	else {							    								  
							      	  return result ;					    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		      FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		    FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING		  FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING
--							      --							    --								  --
int count ( string a , string b , int m , int n ) {	      static int count ( String a , String b , int m , int n ) {    public static int count ( String a , String b , int m , int n script_not_found : None
  if ( ( m == 0 && n == 0 ) || n == 0 ) return 1 ;	      	if ( ( m == 0 && n == 0 ) || n == 0 ) return 1 ;	      if ( ( m == 0 && n == 0 ) || n == 0 ) {			  
  if ( m == 0 ) return 0 ;				      	if ( m == 0 ) return 0 ;				    	return 1 ;						  
  if ( a [ m - 1 ] == b [ n - 1 ] ) return count ( a , b , m  	if ( a . charAt ( m - 1 ) == b . charAt ( n - 1 ) ) return    }								  
  else return count ( a , b , m - 1 , n ) ;		      	else return count ( a , b , m - 1 , n ) ;		      if ( m == 0 ) {						  
}							      }								    	return 0 ;						  
							      								      }								  
							      								      if ( a . charAt ( m - 1 ) == b . charAt ( n - 1 ) ) {	  
							      								    	return count ( a , b , m - 1 , n - 1 ) + count ( a , b ,  
							      								      }								  
							      								      else {							  
							      								    	return count ( a , b , m - 1 , n ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_ELEMENT_ROW_MATRIX				      FIND_MAXIMUM_ELEMENT_ROW_MATRIX				    FIND_MAXIMUM_ELEMENT_ROW_MATRIX				  FIND_MAXIMUM_ELEMENT_ROW_MATRIX
--							      --							    --								  --
void maxelement ( int no_of_rows , int arr [ ] [ N ] ) {      public static void maxelement ( int no_of_rows , int [ ] [ ]  public static int [ ] maxelement ( int no_of_rows , int arr [ script_not_found : None
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  int max = 0 ;						      	int max = 0 ;						      int max = 0 ;						  
  int result [ no_of_rows ] ;				      	int [ ] result = new int [ no_of_rows ] ;		      int result [ ] = new int [ no_of_rows ] ;			  
  while ( i < no_of_rows ) {				      	while ( i < no_of_rows ) {				      while ( i < no_of_rows ) {				  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < N ;						      	  j < arr [ i ] . length ;				    	j < N ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ i ] [ j ] > max ) {			      	    if ( arr [ i ] [ j ] > max ) {			    	  if ( arr [ i ] [ j ] > max ) max = arr [ i ] [ j ] ;	  
	max = arr [ i ] [ j ] ;				      	      max = arr [ i ] [ j ] ;				    	}							  
      }							      	    }							    	result [ i ] = max ;					  
    }							      	  }							    	max = 0 ;						  
    result [ i ] = max ;				      	  result [ i ] = max ;					    	i ++ ;							  
    max = 0 ;						      	  max = 0 ;						      }								  
    i ++ ;						      	  i ++ ;						      return result ;						  
  }							      	}							    }								  
  printArray ( result , no_of_rows ) ;			      	printArray ( result ) ;					    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_PRIME_FACTOR_GIVEN_NUMBER				      K_TH_PRIME_FACTOR_GIVEN_NUMBER				    K_TH_PRIME_FACTOR_GIVEN_NUMBER				  K_TH_PRIME_FACTOR_GIVEN_NUMBER
--							      --							    --								  --
int kPrimeFactor ( int n , int k ) {			      static int kPrimeFactor ( int n , int k ) {		    public static int kPrimeFactor ( int n , int k ) {		  success : None
  while ( n % 2 == 0 ) {				      	while ( n % 2 == 0 ) {					      while ( n % 2 == 0 ) {					  
    k -- ;						      	  k -- ;						    	k -- ;							  
    n = n / 2 ;						      	  n = n / 2 ;						    	n = n / 2 ;						  
    if ( k == 0 ) return 2 ;				      	  if ( k == 0 ) return 2 ;				    	if ( k == 0 ) {						  
  }							      	}							    	  return 2 ;						  
  for ( int i = 3 ;					      	for ( int i = 3 ;					    	}							  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      }								  
  i = i + 2 ) {						      	i = i + 2 ) {						      for ( int i = 3 ;						  
    while ( n % i == 0 ) {				      	  while ( n % i == 0 ) {				      i <= Math . sqrt ( n ) ;					  
      if ( k == 1 ) return i ;				      	    if ( k == 1 ) return i ;				      i = i + 2 ) {						  
      k -- ;						      	    k -- ;						    	while ( n % i == 0 ) {					  
      n = n / i ;					      	    n = n / i ;						    	  if ( k == 1 ) {					  
    }							      	  }							    	    return i ;						  
  }							      	}							    	  }							  
  if ( n > 2 && k == 1 ) return n ;			      	if ( n > 2 && k == 1 ) return n ;			    	  k -- ;						  
  return - 1 ;						      	return - 1 ;						    	  n = n / i ;						  
}							      }								    	}							  
							      								      }								  
							      								      if ( n > 2 && k == 1 ) {					  
							      								    	return n ;						  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EQUILIBRIUM_INDEX_OF_AN_ARRAY				      EQUILIBRIUM_INDEX_OF_AN_ARRAY				    EQUILIBRIUM_INDEX_OF_AN_ARRAY				  EQUILIBRIUM_INDEX_OF_AN_ARRAY
--							      --							    --								  --
int equilibrium ( int arr [ ] , int n ) {		      int equilibrium ( int arr [ ] , int n ) {			    public static int equilibrium ( int arr [ ] , int n ) {	  success : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  int leftsum , rightsum ;				      	int leftsum , rightsum ;				      int leftsum , rightsum ;					  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  ++ i ) {						      	++ i ) {						      ++ i ) {							  
    leftsum = 0 ;					      	  leftsum = 0 ;						    	leftsum = 0 ;						  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < i ;						      	  j < i ;						    	j < i ;							  
    j ++ ) leftsum += arr [ j ] ;			      	  j ++ ) leftsum += arr [ j ] ;				    	++ j ) {						  
    rightsum = 0 ;					      	  rightsum = 0 ;					    	  leftsum += arr [ j ] ;				  
    for ( j = i + 1 ;					      	  for ( j = i + 1 ;					    	}							  
    j < n ;						      	  j < n ;						    	rightsum = 0 ;						  
    j ++ ) rightsum += arr [ j ] ;			      	  j ++ ) rightsum += arr [ j ] ;			    	for ( j = i + 1 ;					  
    if ( leftsum == rightsum ) return i ;		      	  if ( leftsum == rightsum ) return i ;			    	j < n ;							  
  }							      	}							    	++ j ) {						  
  return - 1 ;						      	return - 1 ;						    	  rightsum += arr [ j ] ;				  
}							      }								    	}							  
							      								    	if ( leftsum == rightsum ) {				  
							      								    	  return i ;						  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG GENERATING_DISTINCT_SUBSEQUENCES_OF_A_GIVEN_STRING_IN_LEXICOG
--							      --							    --								  --
void generate ( set < string > & st , string s ) {	      static void generate ( Set < String > st , String s ) {	    public static void generate ( Set < String > st , String s )  script_not_found : None
  if ( s . size ( ) == 0 ) return ;			      	if ( s . length ( ) == 0 ) {				      if ( s . length ( ) == 0 ) {				  
  if ( st . find ( s ) == st . end ( ) ) {		      	  return ;						    	return ;						  
    st . insert ( s ) ;					      	}							      }								  
    for ( int i = 0 ;					      	if ( ! st . contains ( s ) ) {				      if ( st . contains ( s ) == false ) {			  
    i < s . size ( ) ;					      	  st . add ( s ) ;					    	st . add ( s ) ;					  
    i ++ ) {						      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
      string t = s ;					      	  i < s . length ( ) ;					    	i < s . length ( ) ;					  
      t . erase ( i , 1 ) ;				      	  i ++ ) {						    	i ++ ) {						  
      generate ( st , t ) ;				      	    String t = s ;					    	  String t = s ;					  
    }							      	    t = t . substring ( 0 , i ) + t . substring ( i + 1 ) ; 	  t = t . substring ( i , i + 1 ) ;			  
  }							      	    generate ( st , t ) ;				    	  generate ( st , t ) ;					  
  return ;						      	  }							    	}							  
}							      	}							      }								  
							      	return ;						      return ;							  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION	      DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION	    DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION	  DYNAMIC_PROGRAMMING_SET_8_MATRIX_CHAIN_MULTIPLICATION
--							      --							    --								  --
int MatrixChainOrder ( int p [ ] , int i , int j ) {	      static int MatrixChainOrder ( int p [ ] , int i , int j ) {   public static int MatrixChainOrder ( int p [ ] , int i , int  success : None
  if ( i == j ) return 0 ;				      	if ( i == j ) return 0 ;				      if ( i == j ) return 0 ;					  
  int k ;						      	int min = Integer . MAX_VALUE ;				      int k ;							  
  int min = INT_MAX ;					      	for ( int k = i ;					      int min = Integer . MAX_VALUE ;				  
  int count ;						      	k < j ;							      int count ;						  
  for ( k = i ;						      	k ++ ) {						      for ( k = i ;						  
  k < j ;						      	  int count = MatrixChainOrder ( p , i , k ) + MatrixChainO   k < j ;							  
  k ++ ) {						      	  if ( count < min ) min = count ;			      k ++ ) {							  
    count = MatrixChainOrder ( p , i , k ) + MatrixChainOrder 	}							    	count = MatrixChainOrder ( p , i , k ) + MatrixChainOrder 
    if ( count < min ) min = count ;			      	return min ;						    	if ( count < min ) min = count ;			  
  }							      }								      }								  
  return min ;						      								      return min ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY			  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY
--							      --							    --								  --
int maxProduct ( int arr [ ] , int n ) {		      static int maxProduct ( int [ ] arr , int n ) {		    public static int maxProduct ( int arr [ ] , int n ) {	  success : None
  if ( n < 3 ) return - 1 ;				      	if ( n < 3 ) return - 1 ;				      if ( n < 3 ) return - 1 ;					  
  int max_product = INT_MIN ;				      	int max_product = Integer . MIN_VALUE ;			      int maxProduct = Integer . MIN_VALUE ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 2 ;						      	i < n - 2 ;						      i < n - 2 ;						  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n - 1 ;						      	j < n - 1 ;						      j < n - 1 ;						  
  j ++ ) for ( int k = j + 1 ;				      	j ++ ) for ( int k = j + 1 ;				      j ++ ) for ( int k = j + 1 ;				  
  k < n ;						      	k < n ;							      k < n ;							  
  k ++ ) max_product = max ( max_product , arr [ i ] * arr [  	k ++ ) max_product = Math . max ( max_product , arr [ i ] *   k ++ ) maxProduct = Math . max ( maxProduct , arr [ i ] * a 
  return max_product ;					      	return max_product ;					      return maxProduct ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1		  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX_1
--							      --							    --								  --
bool isScalarMatrix ( int mat [ N ] [ N ] ) {		      static boolean isScalarMatrix ( int mat [ ] [ ] ) {	    public static boolean isScalarMatrix ( int mat [ ] [ ] ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 	j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return   j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N - 1 ;						      	i < N - 1 ;						      i < N - 1 ;						  
  i ++ ) if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) re 	i ++ ) if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) re   i ++ ) if ( mat [ i ] [ i ] != mat [ i + 1 ] [ i + 1 ] ) re 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1			  LENGTH_LONGEST_BALANCED_SUBSEQUENCE_1
--							      --							    --								  --
int maxLength ( char s [ ] , int n ) {			      static int maxLength ( String s , int n ) {		    public static int maxLength ( char [ ] s , int n ) {	  script_not_found : None
  int invalidOpenBraces = 0 ;				      	int invalidOpenBraces = 0 ;				      int invalidOpenBraces = 0 ;				  
  int invalidCloseBraces = 0 ;				      	int invalidCloseBraces = 0 ;				      int invalidCloseBraces = 0 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( s [ i ] == '(' ) {				      	  if ( s . charAt ( i ) == '(' ) {			    	if ( s [ i ] == '(' ) invalidOpenBraces ++ ;		  
      invalidOpenBraces ++ ;				      	    invalidOpenBraces ++ ;				    	else {							  
    }							      	  }							    	  if ( invalidOpenBraces == 0 ) invalidCloseBraces ++ ;	  
    else {						      	  else {						    	  else invalidOpenBraces -- ;				  
      if ( invalidOpenBraces == 0 ) {			      	    if ( invalidOpenBraces == 0 ) {			    	}							  
	invalidCloseBraces ++ ;				      	      invalidCloseBraces ++ ;				      }								  
      }							      	    }							      return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) ; 
      else {						      	    else {						    }								  
	invalidOpenBraces -- ;				      	      invalidOpenBraces -- ;				    								  
      }							      	    }							    								  
    }							      	  }							    								  
  }							      	}							    								  
  return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) ; 	return ( n - ( invalidOpenBraces + invalidCloseBraces ) ) ; 								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGOREAN_TRIPLETS				      GENERATE_PYTHAGOREAN_TRIPLETS				    GENERATE_PYTHAGOREAN_TRIPLETS				  GENERATE_PYTHAGOREAN_TRIPLETS
--							      --							    --								  --
void pythagoreanTriplets ( int limit ) {		      static void pythagoreanTriplets ( int limit ) {		    public static void pythagoreanTriplets ( int limit ) {	  script_not_found : None
  int a , b , c = 0 ;					      	int a , b , c = 0 ;					      int a , b , c = 0 ;					  
  int m = 2 ;						      	int m = 2 ;						      int m = 2 ;						  
  while ( c < limit ) {					      	while ( c < limit ) {					      while ( c < limit ) {					  
    for ( int n = 1 ;					      	  for ( int n = 1 ;					    	for ( int n = 1 ;					  
    n < m ;						      	  n < m ;						    	n < m ;							  
    ++ n ) {						      	  ++ n ) {						    	++ n ) {						  
      a = m * m - n * n ;				      	    a = m * m - n * n ;					    	  a = m * m - n * n ;					  
      b = 2 * m * n ;					      	    b = 2 * m * n ;					    	  b = 2 * m * n ;					  
      c = m * m + n * n ;				      	    c = m * m + n * n ;					    	  c = m * m + n * n ;					  
      if ( c > limit ) break ;				      	    if ( c > limit ) break ;				    	  if ( c > limit ) break ;				  
      printf ( "%d %d %d\n" , a , b , c ) ;		      	    System . out . println ( a + " " + b + " " + c ) ;	    	  System . out . println ( a + " " + b + " " + c ) ;	  
    }							      	  }							    	}							  
    m ++ ;						      	  m ++ ;						    	m ++ ;							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	      RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	    RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING	  RETURN_MAXIMUM_OCCURRING_CHARACTER_IN_THE_INPUT_STRING
--							      --							    --								  --
char getMaxOccuringChar ( char * str ) {		      static char getMaxOccuringChar ( String str ) {		    public static char getMaxOccuringChar ( String str ) {	  script_not_found : None
  int count [ ASCII_SIZE ] = {				      	int count [ ] = new int [ ASCII_SIZE ] ;		      int [ ] count = new int [ ASCII_SIZE ] ;			  
    0 }							      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  
    ;							      	for ( int i = 0 ;					      int max = 0 ;						  
    int len = strlen ( str ) ;				      	i < len ;						      char result = 0 ;						  
    int max = 0 ;					      	i ++ ) count [ str . charAt ( i ) ] ++ ;		      for ( int i = 0 ;						  
    char result ;					      	int max = - 1 ;						      i < len ;							  
    for ( int i = 0 ;					      	char result = ' ' ;					      i ++ ) {							  
    i < len ;						      	for ( int i = 0 ;					    	count [ str . charAt ( i ) ] ++ ;			  
    i ++ ) {						      	i < len ;						    	if ( max < count [ str . charAt ( i ) ] ) {		  
      count [ str [ i ] ] ++ ;				      	i ++ ) {						    	  max = count [ str . charAt ( i ) ] ;			  
      if ( max < count [ str [ i ] ] ) {		      	  if ( max < count [ str . charAt ( i ) ] ) {		    	  result = str . charAt ( i ) ;				  
	max = count [ str [ i ] ] ;			      	    max = count [ str . charAt ( i ) ] ;		    	}							  
	result = str [ i ] ;				      	    result = str . charAt ( i ) ;			      }								  
      }							      	  }							      return result ;						  
    }							      	}							    }								  
    return result ;					      	return result ;						    								  
  }							      }								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		      NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		    NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS		  NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS
--							      --							    --								  --
uint_t snoob ( uint_t x ) {				      static int snoob ( int x ) {				    public static int snoob ( int x ) {				  error : NEXT_HIGHER_NUMBER_WITH_SAME_NUMBER_OF_SET
  uint_t rightOne ;					      	int rightOne , nextHigherOneBit , rightOnesPattern , next =   int rightOne ;						  _BITS.java:38: error: ';' expected	 next = next
  uint_t nextHigherOneBit ;				      	if ( x > 0 ) {						      int nextHigherOneBit ;					  HigherOneBit				  ^ NEXT_HIG
  uint_t rightOnesPattern ;				      	  rightOne = x & - x ;					      int rightOnesPattern ;					  HER_NUMBER_WITH_SAME_NUMBER_OF_SET_BITS.java:40: e
  uint_t next = 0 ;					      	  nextHigherOneBit = x + rightOne ;			      int next = 0 ;						  rror: illegal start of expression public static vo
  if ( x ) {						      	  rightOnesPattern = x ^ nextHigherOneBit ;		      if ( x != 0 ) {						  id main(String args[]) { ^ 2 errors
    rightOne = x & - ( signed ) x ;			      	  rightOnesPattern = ( rightOnesPattern ) / rightOne ;	    	rightOne = x & - ( int ) x ;				  
    nextHigherOneBit = x + rightOne ;			      	  rightOnesPattern >>= 2 ;				    	nextHigherOneBit = x + rightOne ;			  
    rightOnesPattern = x ^ nextHigherOneBit ;		      	  next = nextHigherOneBit | rightOnesPattern ;		    	rightOnesPattern = x ^ nextHigherOneBit ;		  
    rightOnesPattern = ( rightOnesPattern ) / rightOne ;      	}							    	rightOnesPattern = ( rightOnesPattern ) / rightOne ;	  
    rightOnesPattern >>= 2 ;				      	return next ;						    	rightOnesPattern >>= 2 ;				  
    next = nextHigherOneBit | rightOnesPattern ;	      }								    	next = nextHigherOneBit					  
  }							      								    								  
  return next ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		      SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM		    SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM			  SEARCHING_FOR_PATTERNS_SET_2_KMP_ALGORITHM
--							      --							    --								  --
void computeLPSArray ( char * pat , int M , int * lps ) {     void computeLPSArray ( String pat , int M , int lps [ ] ) {   public static void computeLPSArray ( char [ ] pat , int M , i script_not_found : None
  int len = 0 ;						      	int len = 0 ;						      int len = 0 ;						  
  lps [ 0 ] = 0 ;					      	int i = 1 ;						      lps [ 0 ] = 0 ;						  
  int i = 1 ;						      	lps [ 0 ] = 0 ;						      int i = 1 ;						  
  while ( i < M ) {					      	while ( i < M ) {					      while ( i < M ) {						  
    if ( pat [ i ] == pat [ len ] ) {			      	  if ( pat . charAt ( i ) == pat . charAt ( len ) ) {	    	if ( pat [ i ] == pat [ len ] ) {			  
      len ++ ;						      	    len ++ ;						    	  len ++ ;						  
      lps [ i ] = len ;					      	    lps [ i ] = len ;					    	  lps [ i ] = len ;					  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      if ( len != 0 ) {					      	    if ( len != 0 ) {					    	  if ( len != 0 ) len = lps [ len - 1 ] ;		  
	len = lps [ len - 1 ] ;				      	      len = lps [ len - 1 ] ;				    	  else {						  
      }							      	    }							    	    lps [ i ] = 0 ;					  
      else {						      	    else {						    	    i ++ ;						  
	lps [ i ] = 0 ;					      	      lps [ i ] = len ;					    	  }							  
	i ++ ;						      	      i ++ ;						    	}							  
      }							      	    }							      }								  
    }							      	  }							    }								  
  }							      	}							    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY		      MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY		    MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY			  MINIMUM_OPERATION_MAKE_ELEMENTS_EQUAL_ARRAY
--							      --							    --								  --
int minOperation ( int arr [ ] , int n ) {		      public static int minOperation ( int arr [ ] , int n ) {	    public static int minOperation ( int arr [ ] , int n ) {	  failure : #Results:1, 10
  unordered_map < int , int > hash ;			      	HashMap < Integer , Integer > hash = new HashMap < Integer    HashMap < Integer , Integer > hash = new HashMap < > ( ) ;  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) hash [ arr [ i ] ] ++ ;			      	i ++ ) if ( hash . containsKey ( arr [ i ] ) ) hash . put (   i ++ ) {							  
  int max_count = 0 ;					      	else hash . put ( arr [ i ] , 1 ) ;			    	hash . put ( arr [ i ] , ++ i ) ;			  
  for ( auto i : hash ) if ( max_count < i . second ) max_cou 	int max_count = 0 ;					      }								  
  return ( n - max_count ) ;				      	Set < Integer > s = hash . keySet ( ) ;			      int maxCount = 0 ;					  
}							      	for ( int i : s ) if ( max_count < hash . get ( i ) ) max_c   for ( HashMap . Entry < Integer , Integer > i : hash . entr 
							      	return ( n - max_count ) ;				      return ( n - maxCount ) ;					  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			      NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			    NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS			  NUMBER_OF_PERMUTATION_WITH_K_INVERSIONS
--							      --							    --								  --
int numberOfPermWithKInversion ( int N , int K ) {	      static int numberOfPermWithKInversion ( int N , int K ) {	    public static int numberOfPermWithKInversion ( int N , int K  script_not_found : None
  if ( N == 0 ) return 0 ;				      	if ( N == 0 ) return 0 ;				      if ( N == 0 ) return 0 ;					  
  if ( K == 0 ) return 1 ;				      	if ( K == 0 ) return 1 ;				      if ( K == 0 ) return 1 ;					  
  if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ] ;      	if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ] ;	      if ( memo [ N ] [ K ] != 0 ) return memo [ N ] [ K ] ;	  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= K ;						      	i <= K ;						      i <= K ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i <= N - 1 ) sum += numberOfPermWithKInversion ( N - 	  if ( i <= N - 1 ) sum += numberOfPermWithKInversion ( N - 	if ( i <= N - 1 ) {					  
  }							      	}							    	  sum += numberOfPermWithKInversion ( N - 1 , K - i ) ;	  
  memo [ N ] [ K ] = sum ;				      	memo [ N ] [ K ] = sum ;				    	}							  
  return sum ;						      	return sum ;						      }								  
}							      }								      memo [ N ] [ K ] = sum ;					  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM					      KNAPSACK_PROBLEM						    KNAPSACK_PROBLEM						  KNAPSACK_PROBLEM
--							      --							    --								  --
int knapSack ( int W , int wt [ ] , int val [ ] , int n ) {   static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int wt [ ] , int val [ ] script_not_found : None
  if ( n == 0 || W == 0 ) return 0 ;			      	if ( n == 0 || W == 0 ) return 0 ;			      if ( n == 0 || W == 0 ) return 0 ;			  
  if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n  	if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n    if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n  
  else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 	else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1   else return Math . max ( val [ n - 1 ] + knapSack ( W - wt  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			      FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE			    FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE				  FIND_NTH_TERM_DRAGON_CURVE_SEQUENCE
--							      --							    --								  --
string Dragon_Curve_Sequence ( int n ) {		      static String Dragon_Curve_Sequence ( int n ) {		    public static String Dragon_Curve_Sequence ( int n ) {	  script_not_found : None
  string s = "1" ;					      	String s = "1" ;					      String s = "1" ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    string temp = "1" ;					      	  String temp = "1" ;					    	String temp = "1" ;					  
    char prev = '1' , zero = '0' , one = '1' ;		      	  char prev = '1' , zero = '0' , one = '1' ;		    	char prev = '1' , zero = '0' , one = '1' ;		  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < s . length ( ) ;				      	  j < s . length ( ) ;					    	j < s . length ( ) ;					  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      temp += s [ j ] ;					      	    temp += s . charAt ( j ) ;				    	  temp += s . charAt ( j ) ;				  
      if ( prev == '0' ) {				      	    if ( prev == '0' ) {				    	  if ( prev == '0' ) {					  
	temp += one ;					      	      temp += one ;					    	    temp += one ;					  
	prev = one ;					      	      prev = one ;					    	    prev = one ;					  
      }							      	    }							    	  }							  
      else {						      	    else {						    	  else {						  
	temp += zero ;					      	      temp += zero ;					    	    temp += zero ;					  
	prev = zero ;					      	      prev = zero ;					    	    prev = zero ;					  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
    s = temp ;						      	  s = temp ;						    	s = temp ;						  
  }							      	}							      }								  
  return s ;						      	return s ;						      return s ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2	      PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		    PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2		  PRINT_POSSIBLE_STRINGS_CAN_MADE_PLACING_SPACES_2
--							      --							    --								  --
void printSubsequences ( string str ) {			      static void printSubsequences ( String s ) {		    public static void printSubsequences ( String str ) {	  script_not_found : None
  int n = str . length ( ) ;				      	char [ ] str = s . toCharArray ( ) ;			      int n = str . length ( ) ;				  
  unsigned int opsize = pow ( 2 , n - 1 ) ;		      	int n = str . length ;					      int opsize = Math . pow ( 2 , n - 1 ) ;			  
  for ( int counter = 0 ;				      	int opsize = ( int ) ( Math . pow ( 2 , n - 1 ) ) ;	      for ( int counter = 0 ;					  
  counter < opsize ;					      	for ( int counter = 0 ;					      counter < opsize ;					  
  counter ++ ) {					      	counter < opsize ;					      counter ++ ) {						  
    for ( int j = 0 ;					      	counter ++ ) {						    	for ( int j = 0 ;					  
    j < n ;						      	  for ( int j = 0 ;					    	j < n ;							  
    j ++ ) {						      	  j < n ;						    	j ++ ) {						  
      cout << str [ j ] ;				      	  j ++ ) {						    	  System . out . print ( str . charAt ( j ) ) ;		  
      if ( counter & ( 1 << j ) ) cout << " " ;		      	    System . out . print ( str [ j ] ) ;		    	  if ( counter & ( 1 << j ) ) {				  
    }							      	    if ( ( counter & ( 1 << j ) ) > 0 ) System . out . prin 	    System . out . print ( " " ) ;			  
    cout << endl ;					      	  }							    	  }							  
  }							      	  System . out . println ( ) ;				    	}							  
}							      	}							    	System . out . println ( ) ;				  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			      FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			    FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY			  FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY
--							      --							    --								  --
int firstElement ( int arr [ ] , int n , int k ) {	      static int firstElement ( int arr [ ] , int n , int k ) {	    public static int firstElement ( int arr [ ] , int n , int k  error : Exception in thread "main" java.lang.NullP
  unordered_map < int , int > count_map ;		      	HashMap < Integer , Integer > count_map = new HashMap < > (   HashMap < Integer , Integer > countMap = new HashMap < > (  ointerException 	at FIRST_ELEMENT_OCCURRING_K_TIME
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  S_ARRAY.f_filled(FIRST_ELEMENT_OCCURRING_K_TIMES_A
  i < n ;						      	i < n ;							      i < n ;							  RRAY.java:45) 	at FIRST_ELEMENT_OCCURRING_K_TIMES_
  i ++ ) count_map [ arr [ i ] ] ++ ;			      	i ++ ) {						      i ++ ) {							  ARRAY.main(FIRST_ELEMENT_OCCURRING_K_TIMES_ARRAY.j
  for ( int i = 0 ;					      	  int a = 0 ;						    	countMap . put ( arr [ i ] , ++ i ) ;			  ava:90)
  i < n ;						      	  if ( count_map . get ( arr [ i ] ) != null ) {	      }								  
  i ++ ) if ( count_map [ arr [ i ] ] == k ) return arr [ i ] 	    a = count_map . get ( arr [ i ] ) ;			      for ( int i = 0 ;						  
  return - 1 ;						      	  }							      i < n ;							  
}							      	  count_map . put ( arr [ i ] , a + 1 ) ;		      i ++ ) {							  
							      	}							    	if ( countMap . get ( arr [ i ] ) == k ) {		  
							      	for ( int i = 0 ;					    	  return arr [ i ] ;					  
							      	i < n ;							    	}							  
							      	i ++ ) {						      }								  
							      	  if ( count_map . get ( arr [ i ] ) == k ) {		      return - 1 ;						  
							      	    return arr [ i ] ;					    }								  
							      	  }							    								  
							      	}							    								  
							      	return - 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			      DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			    DIVIDE_LARGE_NUMBER_REPRESENTED_STRING			  DIVIDE_LARGE_NUMBER_REPRESENTED_STRING
--							      --							    --								  --
string longDivision ( string number , int divisor ) {	      static String longDivision ( String number , int divisor ) {  public static String longDivision ( String number , int divis script_not_found : None
  string ans ;						      	String ans = "" ;					      String ans = "" ;						  
  int idx = 0 ;						      	int idx = 0 ;						      int idx = 0 ;						  
  int temp = number [ idx ] - '0' ;			      	char [ ] num = number . toCharArray ( ) ;		      int temp = number . charAt ( idx ) - '0' ;		  
  while ( temp < divisor ) temp = temp * 10 + ( number [ ++ i 	int temp = num [ idx ] - '0' ;				      while ( temp < divisor ) {				  
  while ( number . size ( ) > idx ) {			      	while ( temp < divisor ) temp = temp * 10 + ( num [ ++ idx  	temp = temp * 10 + ( number . charAt ( ++ idx ) - '0' ) ; 
    ans += ( temp / divisor ) + '0' ;			      	idx += 1 ;						      }								  
    temp = ( temp % divisor ) * 10 + number [ ++ idx ] - '0'  	while ( num . length > idx ) {				      while ( number . length ( ) > idx ) {			  
  }							      	  ans += ( temp / divisor ) ;				    	ans += ( temp / divisor ) + '0' ;			  
  if ( ans . length ( ) == 0 ) return "0" ;		      	  temp = ( temp % divisor ) * 10 + num [ idx ++ ] - '0' ;   	temp = ( temp % divisor ) * 10 + number . charAt ( ++ idx 
  return ans ;						      	}							      }								  
}							      	if ( ans . length ( ) == 0 ) return "0" ;		      if ( ans . length ( ) == 0 ) {				  
							      	return ans ;						    	return "0" ;						  
							      }								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1	      MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		    MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1		  MAXIMUM_CONSECUTIVE_REPEATING_CHARACTER_STRING_1
--							      --							    --								  --
char maxRepeating ( string str ) {			      static char maxRepeating ( String str ) {			    public static char maxRepeating ( String str ) {		  success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  char res = str [ 0 ] ;				      	char res = str . charAt ( 0 ) ;				      char res = str . charAt ( 0 ) ;				  
  int cur_count = 1 ;					      	int cur_count = 1 ;					      int cur_count = 1 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i < n - 1 && str [ i ] == str [ i + 1 ] ) cur_count  	  if ( i < n - 1 && str . charAt ( i ) == str . charAt ( i  	if ( i < n - 1 && str . charAt ( i ) == str . charAt ( i  
    else {						      	  else {						    	  cur_count ++ ;					  
      if ( cur_count > count ) {			      	    if ( cur_count > count ) {				    	}							  
	count = cur_count ;				      	      count = cur_count ;				    	else {							  
	res = str [ i ] ;				      	      res = str . charAt ( i ) ;			    	  if ( cur_count > count ) {				  
      }							      	    }							    	    count = cur_count ;					  
      cur_count = 1 ;					      	    cur_count = 1 ;					    	    res = str . charAt ( i ) ;				  
    }							      	  }							    	  }							  
  }							      	}							    	  cur_count = 1 ;					  
  return res ;						      	return res ;						    	}							  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_BONACCI_NUMBERS_1					      N_BONACCI_NUMBERS_1					    N_BONACCI_NUMBERS_1						  N_BONACCI_NUMBERS_1
--							      --							    --								  --
void bonacciseries ( long n , int m ) {			      static void bonacciseries ( int n , int m ) {		    public static void bonacciseries ( long n , int m ) {	  script_not_found : None
  int a [ m ] = {					      	int a [ ] = new int [ m ] ;				      int [ ] a = new int [ m ] ;				  
    0 }							      	for ( int i = 0 ;					      a [ n - 1 ] = 0 ;						  
    ;							      	i < m ;							      a [ n ] = 1 ;						  
    a [ n - 1 ] = 1 ;					      	i ++ ) a [ i ] = 0 ;					      for ( int i = n + 1 ;					  
    a [ n ] = 1 ;					      	a [ n - 1 ] = 1 ;					      i < m ;							  
    for ( int i = n + 1 ;				      	a [ n ] = 1 ;						      i ++ ) {							  
    i < m ;						      	for ( int i = n + 1 ;					    	a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ;		  
    i ++ ) a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ;      	i < m ;							      }								  
    for ( int i = 0 ;					      	i ++ ) a [ i ] = 2 * a [ i - 1 ] - a [ i - n - 1 ] ;	      for ( int i = 0 ;						  
    i < m ;						      	for ( int i = 0 ;					      i < m ;							  
    i ++ ) cout << a [ i ] << " " ;			      	i < m ;							      i ++ ) {							  
  }							      	i ++ ) System . out . print ( a [ i ] + " " ) ;		    	System . out . print ( a [ i ] + " " ) ;		  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE				    FIND_NUMBER_OF_TRIANGLES_POSSIBLE				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE
--							      --							    --								  --
int findNumberOfTriangles ( int arr [ ] , int n ) {	      static int findNumberOfTriangles ( int arr [ ] ) {	    public static int findNumberOfTriangles ( int arr [ ] , int n script_not_found : None
  qsort ( arr , n , sizeof ( arr [ 0 ] ) , comp ) ;	      	int n = arr . length ;					      Arrays . sort ( arr , n , new Comparator ( ) {		  
  int count = 0 ;					      	Arrays . sort ( arr ) ;					    	public int compare ( int o1 , int o2 ) {		  
  for ( int i = 0 ;					      	int count = 0 ;						    	  return o1 - o2 ;					  
  i < n - 2 ;						      	for ( int i = 0 ;					    	}							  
  ++ i ) {						      	i < n - 2 ;						      }								  
    int k = i + 2 ;					      	++ i ) {						      ) ;							  
    for ( int j = i + 1 ;				      	  int k = i + 2 ;					      int count = 0 ;						  
    j < n ;						      	  for ( int j = i + 1 ;					      for ( int i = 0 ;						  
    ++ j ) {						      	  j < n ;						      i < n - 2 ;						  
      while ( k < n && arr [ i ] + arr [ j ] > arr [ k ] ) ++ 	  ++ j ) {						      ++ i ) {							  
      if ( k > j ) count += k - j - 1 ;			      	    while ( k < n && arr [ i ] + arr [ j ] > arr [ k ] ) ++ 	int k = i + 2 ;						  
    }							      	    if ( k > j ) count += k - j - 1 ;			    	for ( int j = i + 1 ;					  
  }							      	  }							    	j < n ;							  
  return count ;					      	}							    	++ j ) {						  
}							      	return count ;						    	  while ( k < n && arr [ i ] + arr [ j ] > arr [ k ] ) {  
							      }								    	    ++ k ;						  
							      								    	  }							  
							      								    	  if ( k > j ) {					  
							      								    	    count += k - j - 1 ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS     SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS	    SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS
--							      --							    --								  --
int findSum ( int n ) {					      static int findSum ( int n ) {				    public static int findSum ( int n ) {			  success : None
  int arr [ n ] [ n ] ;					      	int [ ] [ ] arr = new int [ n ] [ n ] ;			      int arr [ ] [ ] = new int [ n ] [ n ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) arr [ i ] [ j ] = abs ( i - j ) ;		      	j ++ ) arr [ i ] [ j ] = Math . abs ( i - j ) ;		      j ++ ) arr [ i ] [ j ] = Math . abs ( i - j ) ;		  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) sum += arr [ i ] [ j ] ;			      	j ++ ) sum += arr [ i ] [ j ] ;				      j ++ ) sum += arr [ i ] [ j ] ;				  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU CHECK_WHETHER_SECOND_STRING_CAN_FORMED_FIRST_STRING_USING_COU
--							      --							    --								  --
bool canMakeStr2 ( string str1 , string str2 ) {	      static boolean canMakeStr2 ( String str1 , String str2 ) {    public static boolean canMakeStr2 ( String str1 , String str2 script_not_found : None
  int count [ MAX ] = {					      	int [ ] count = new int [ MAX ] ;			      int [ ] count = new int [ MAX ] ;				  
    0 }							      	char [ ] str3 = str1 . toCharArray ( ) ;		      count [ str1 . length ( ) ] = 0 ;				  
    ;							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	i < str3 . length ;					      i < str1 . length ( ) ;					  
    i < str1 . length ( ) ;				      	i ++ ) count [ str3 [ i ] ] ++ ;			      i ++ ) {							  
    i ++ ) count [ str1 [ i ] ] ++ ;			      	char [ ] str4 = str2 . toCharArray ( ) ;		    	count [ str1 . charAt ( i ) ] ++ ;			  
    for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
    i < str2 . length ( ) ;				      	i < str4 . length ;					      for ( int i = 0 ;						  
    i ++ ) {						      	i ++ ) {						      i < str2 . length ( ) ;					  
      if ( count [ str2 [ i ] ] == 0 ) return false ;	      	  if ( count [ str4 [ i ] ] == 0 ) return false ;	      i ++ ) {							  
      count [ str2 [ i ] ] -- ;				      	  count [ str4 [ i ] ] -- ;				    	if ( count [ str2 . charAt ( i ) ] == 0 ) {		  
    }							      	}							    	  return false ;					  
    return true ;					      	return true ;						    	}							  
  }							      }								    	count [ str2 . charAt ( i ) ] -- ;			  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		      EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		    EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND		  EVALUATE_AN_ARRAY_EXPRESSION_WITH_NUMBERS_AND
--							      --							    --								  --
int calculateSum ( string arr [ ] , int n ) {		      public static int calculateSum ( String arr [ ] , int n ) {   public static int calculateSum ( String [ ] arr , int n ) {	  script_not_found : None
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return 0 ;					  
  string s = arr [ 0 ] ;				      	String s = arr [ 0 ] ;					      String s = arr [ 0 ] ;					  
  int value = stoi ( s ) ;				      	int value = Integer . parseInt ( s ) ;			      int value = Integer . parseInt ( s ) ;			  
  int sum = value ;					      	int sum = value ;					      int sum = value ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i = i + 2 ) {						      	i = i + 2 ) {						      i = i + 2 ) {						  
    s = arr [ i ] ;					      	  s = arr [ i ] ;					    	s = arr [ i ] ;						  
    int value = stoi ( s ) ;				      	  value = Integer . parseInt ( s ) ;			    	int value = Integer . parseInt ( s ) ;			  
    char operation = arr [ i - 1 ] [ 0 ] ;		      	  char operation = arr [ i - 1 ] . charAt ( 0 ) ;	    	char operation = arr [ i - 1 ] . charAt ( 0 ) ;		  
    if ( operation == '+' ) sum += value ;		      	  if ( operation == '+' ) sum += value ;		    	if ( operation == '+' ) {				  
    else sum -= value ;					      	  else sum -= value ;					    	  sum += value ;					  
  }							      	}							    	}							  
  return sum ;						      	return sum ;						    	else {							  
}							      }								    	  sum -= value ;					  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYS_DISTINCT_ELEMENTS				      SUBARRAYS_DISTINCT_ELEMENTS				    SUBARRAYS_DISTINCT_ELEMENTS					  SUBARRAYS_DISTINCT_ELEMENTS
--							      --							    --								  --
int sumoflength ( int arr [ ] , int n ) {		      public static int sumoflength ( int [ ] arr , int n ) {	    public static int sumoflength ( int arr [ ] , int n ) {	  failure : #Results:4, 10
  unordered_set < int > s ;				      	Set < Integer > s = new HashSet < > ( ) ;		      HashSet < Integer > s = new HashSet < > ( ) ;		  
  int j = 0 , ans = 0 ;					      	int j = 0 , ans = 0 ;					      int j = 0 , ans = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( j < n && s . find ( arr [ j ] ) == s . end ( ) )  	  while ( j < n && ! s . contains ( arr [ j ] ) ) {	    	while ( j < n && s . contains ( arr [ j ] ) == false ) {  
      s . insert ( arr [ j ] ) ;			      	    s . add ( arr [ i ] ) ;				    	  s . add ( arr [ j ] ) ;				  
      j ++ ;						      	    j ++ ;						    	  j ++ ;						  
    }							      	  }							    	}							  
    ans += ( ( j - i ) * ( j - i + 1 ) ) / 2 ;		      	  ans += ( ( j - i ) * ( j - i + 1 ) ) / 2 ;		    	ans += ( ( j - i ) * ( j - i + 1 ) ) / 2 ;		  
    s . erase ( arr [ i ] ) ;				      	  s . remove ( arr [ i ] ) ;				    	s . remove ( arr [ i ] ) ;				  
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	      FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	    FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE	  FIND_MINIMUM_NUMBER_DIVIDED_MAKE_NUMBER_PERFECT_SQUARE
--							      --							    --								  --
int findMinNumber ( int n ) {				      static int findMinNumber ( int n ) {			    public static int findMinNumber ( int n ) {			  success : None
  int count = 0 , ans = 1 ;				      	int count = 0 , ans = 1 ;				      int count = 0 , ans = 1 ;					  
  while ( n % 2 == 0 ) {				      	while ( n % 2 == 0 ) {					      while ( n % 2 == 0 ) {					  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
    n /= 2 ;						      	  n /= 2 ;						    	n /= 2 ;						  
  }							      	}							      }								  
  if ( count % 2 ) ans *= 2 ;				      	if ( count % 2 == 1 ) ans *= 2 ;			      if ( count % 2 > 0 ) {					  
  for ( int i = 3 ;					      	for ( int i = 3 ;					    	ans *= 2 ;						  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      }								  
  i += 2 ) {						      	i += 2 ) {						      for ( int i = 3 ;						  
    count = 0 ;						      	  count = 0 ;						      i <= Math . sqrt ( n ) ;					  
    while ( n % i == 0 ) {				      	  while ( n % i == 0 ) {				      i += 2 ) {						  
      count ++ ;					      	    count ++ ;						    	count = 0 ;						  
      n /= i ;						      	    n /= i ;						    	while ( n % i == 0 ) {					  
    }							      	  }							    	  count ++ ;						  
    if ( count % 2 ) ans *= i ;				      	  if ( count % 2 == 1 ) ans *= i ;			    	  n /= i ;						  
  }							      	}							    	}							  
  if ( n > 2 ) ans *= n ;				      	if ( n > 2 ) ans *= n ;					    	if ( count % 2 > 0 ) {					  
  return ans ;						      	return ans ;						    	  ans *= i ;						  
}							      }								    	}							  
							      								      }								  
							      								      if ( n > 2 ) {						  
							      								    	ans *= n ;						  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS     RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	    RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS	  RECURSIVE_SOLUTION_COUNT_SUBSTRINGS_FIRST_LAST_CHARACTERS
--							      --							    --								  --
int countSubstrs ( string str , int i , int j , int n ) {     static int countSubstrs ( String str , int i , int j , int n  public static int countSubstrs ( String str , int i , int j , script_not_found : None
  if ( n == 1 ) return 1 ;				      	if ( n == 1 ) return 1 ;				      if ( n == 1 ) return 1 ;					  
  if ( n <= 0 ) return 0 ;				      	if ( n <= 0 ) return 0 ;				      if ( n <= 0 ) return 0 ;					  
  int res = countSubstrs ( str , i + 1 , j , n - 1 ) + countS 	int res = countSubstrs ( str , i + 1 , j , n - 1 ) + countS   int res = countSubstrs ( str , i + 1 , j , n - 1 ) + countS 
  if ( str [ i ] == str [ j ] ) res ++ ;		      	if ( str . charAt ( i ) == str . charAt ( j ) ) res ++ ;      if ( str . charAt ( i ) == str . charAt ( j ) ) res ++ ;	  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_3
--							      --							    --								  --
void printRepeating ( int arr [ ] , int size ) {	      void printRepeating ( int arr [ ] , int size ) {		    public static void printRepeating ( int arr [ ] , int size )  script_not_found : None
  int i ;						      	int i ;							      int i ;							  
  cout << "The repeating elements are" ;		      	System . out . println ( "The repeating elements are : " )    System . out . println ( "The repeating elements are" ) ;	  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < size ;						      	i < size ;						      i < size ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i  	  if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math .  	if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) {		  
    else cout << " " << abs ( arr [ i ] ) << " " ;	      	  else System . out . print ( Math . abs ( arr [ i ] ) + "  	  arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( 
  }							      	}							    	}							  
}							      }								    	else {							  
							      								    	  System . out . print ( " " + Math . abs ( arr [ i ] ) + 
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			      DELETE_CONSECUTIVE_WORDS_SEQUENCE_1			    DELETE_CONSECUTIVE_WORDS_SEQUENCE_1				  DELETE_CONSECUTIVE_WORDS_SEQUENCE_1
--							      --							    --								  --
int removeConsecutiveSame ( vector < string > v ) {	      static int removeConsecutiveSame ( Vector < String > v ) {    public static int removeConsecutiveSame ( String [ ] array )  script_not_found : None
  stack < string > st ;					      	Stack < String > st = new Stack < > ( ) ;		      Stack < String > st = new Stack < String > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < v . size ( ) ;					      	i < v . size ( ) ;					      i < array . length ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( st . empty ( ) ) st . push ( v [ i ] ) ;	      	  if ( st . empty ( ) ) st . push ( v . get ( i ) ) ;	    	if ( st . isEmpty ( ) ) {				  
    else {						      	  else {						    	  st . push ( array [ i ] ) ;				  
      string str = st . top ( ) ;			      	    String str = st . peek ( ) ;			    	}							  
      if ( str . compare ( v [ i ] ) == 0 ) st . pop ( ) ;    	    if ( str . equals ( v . get ( i ) ) ) st . pop ( ) ;    	else {							  
      else st . push ( v [ i ] ) ;			      	    else st . push ( v . get ( i ) ) ;			    	  String str = st . pop ( ) ;				  
    }							      	  }							    	  if ( str . equalsIgnoreCase ( array [ i ] ) ) {	  
  }							      	}							    	    st . pop ( ) ;					  
  return st . size ( ) ;				      	return st . size ( ) ;					    	  }							  
}							      }								    	  else {						  
							      								    	    st . push ( array [ i ] ) ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return st . size ( ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES	      COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		    COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES		  COUNT_ARRAYS_CONSECUTIVE_ELEMENT_DIFFERENT_VALUES
--							      --							    --								  --
int countarray ( int n , int k , int x ) {		      public static int countarray ( int n , int k , int x ) {	    public static int countarray ( int n , int k , int x ) {	  success : None
  int dp [ MAXN ] = {					      	int [ ] dp = new int [ 109 ] ;				      int [ ] dp = new int [ n ] ;				  
    0 }							      	dp [ 0 ] = 0 ;						      dp [ 0 ] = 0 ;						  
    ;							      	dp [ 1 ] = 1 ;						      dp [ 1 ] = 1 ;						  
    dp [ 0 ] = 0 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
    dp [ 1 ] = 1 ;					      	i < n ;							      i < n ;							  
    for ( int i = 2 ;					      	i ++ ) dp [ i ] = ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp   i ++ ) {							  
    i < n ;						      	return ( x == 1 ? ( k - 1 ) * dp [ n - 2 ] : dp [ n - 1 ] ) 	dp [ i ] = ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) * dp [ i  
    i ++ ) dp [ i ] = ( k - 2 ) * dp [ i - 1 ] + ( k - 1 ) *  }								      }								  
    return ( x == 1 ? ( k - 1 ) * dp [ n - 2 ] : dp [ n - 1 ] 								      return ( x == 1 ? ( k - 1 ) * dp [ n - 2 ] : dp [ n - 1 ] ) 
  }							      								    }								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		      REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		    REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1		  REORDER_A_ARRAY_ACCORDING_TO_GIVEN_INDEXES_1
--							      --							    --								  --
void reorder ( int arr [ ] , int index [ ] , int n ) {	      static void reorder ( ) {					    public static void reorder ( int arr [ ] , int index [ ] , in script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < arr . length ;					      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( index [ i ] != i ) {			      	  while ( index [ i ] != i ) {				    	while ( index [ i ] != i ) {				  
      int oldTargetI = index [ index [ i ] ] ;		      	    int oldTargetI = index [ index [ i ] ] ;		    	  int oldTargetI = index [ index [ i ] ] ;		  
      char oldTargetE = arr [ index [ i ] ] ;		      	    char oldTargetE = ( char ) arr [ index [ i ] ] ;	    	  char oldTargetE = arr [ index [ i ] ] ;		  
      arr [ index [ i ] ] = arr [ i ] ;			      	    arr [ index [ i ] ] = arr [ i ] ;			    	  arr [ index [ i ] ] = arr [ i ] ;			  
      index [ index [ i ] ] = index [ i ] ;		      	    index [ index [ i ] ] = index [ i ] ;		    	  index [ index [ i ] ] = index [ i ] ;			  
      index [ i ] = oldTargetI ;			      	    index [ i ] = oldTargetI ;				    	  index [ i ] = oldTargetI ;				  
      arr [ i ] = oldTargetE ;				      	    arr [ i ] = oldTargetE ;				    	  arr [ i ] = oldTargetE ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			      LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS			    LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS				  LONGEST_SPAN_SUM_TWO_BINARY_ARRAYS
--							      --							    --								  --
int longestCommonSum ( bool arr1 [ ] , bool arr2 [ ] , int n  static int longestCommonSum ( int n ) {			    public static int longestCommonSum ( boolean arr1 [ ] , boole script_not_found : None
  int maxLen = 0 ;					      	int maxLen = 0 ;					      int maxLen = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int sum1 = 0 , sum2 = 0 ;				      	  int sum1 = 0 , sum2 = 0 ;				    	int sum1 = 0 , sum2 = 0 ;				  
    for ( int j = i ;					      	  for ( int j = i ;					    	for ( int j = i ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      sum1 += arr1 [ j ] ;				      	    sum1 += arr1 [ j ] ;				    	  sum1 += arr1 [ j ] ;					  
      sum2 += arr2 [ j ] ;				      	    sum2 += arr2 [ j ] ;				    	  sum2 += arr2 [ j ] ;					  
      if ( sum1 == sum2 ) {				      	    if ( sum1 == sum2 ) {				    	  if ( sum1 == sum2 ) {					  
	int len = j - i + 1 ;				      	      int len = j - i + 1 ;				    	    int len = j - i + 1 ;				  
	if ( len > maxLen ) maxLen = len ;		      	      if ( len > maxLen ) maxLen = len ;		    	    if ( len > maxLen ) {				  
      }							      	    }							    	      maxLen = len ;					  
    }							      	  }							    	    }							  
  }							      	}							    	  }							  
  return maxLen ;					      	return maxLen ;						    	}							  
}							      }								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PAIRS_ARRAY_XOR_0_1				      FIND_NUMBER_PAIRS_ARRAY_XOR_0_1				    FIND_NUMBER_PAIRS_ARRAY_XOR_0_1				  FIND_NUMBER_PAIRS_ARRAY_XOR_0_1
--							      --							    --								  --
int calculate ( int a [ ] , int n ) {			      static int calculate ( int a [ ] , int n ) {		    public static int calculate ( int a [ ] , int n ) {		  script_not_found : None
  int * maximum = max_element ( a , a + 5 ) ;		      	int maximum = Arrays . stream ( a ) . max ( ) . getAsInt (    int maximum [ ] = maxElement ( a , 5 ) ;			  
  int frequency [ * maximum + 1 ] = {			      	int frequency [ ] = new int [ maximum + 1 ] ;		      int frequency [ ] = new int [ maximum . length + 1 ] ;	  
    0 }							      	for ( int i = 0 ;					      frequency [ maximum . length + 1 ] = 0 ;			  
    ;							      	i < n ;							      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	i ++ ) {						      i < n ;							  
    i < n ;						      	  frequency [ a [ i ] ] += 1 ;				      i ++ ) frequency [ a [ i ] ] += 1 ;			  
    i ++ ) {						      	}							      int answer = 0 ;						  
      frequency [ a [ i ] ] += 1 ;			      	int answer = 0 ;					      for ( int i = 0 ;						  
    }							      	for ( int i = 0 ;					      i < ( maximum . length + 1 ) ;				  
    int answer = 0 ;					      	i < ( maximum ) + 1 ;					      i ++ ) answer = answer + frequency [ i ] * ( frequency [ i  
    for ( int i = 0 ;					      	i ++ ) {						      return answer / 2 ;					  
    i < ( * maximum ) + 1 ;				      	  answer = answer + frequency [ i ] * ( frequency [ i ] - 1 }								  
    i ++ ) {						      	}							    								  
      answer = answer + frequency [ i ] * ( frequency [ i ] - 	return answer / 2 ;					    								  
    }							      }								    								  
    return answer / 2 ;					      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_AN_ARRAY_OF_0S_1S_AND_2S				      SORT_AN_ARRAY_OF_0S_1S_AND_2S				    SORT_AN_ARRAY_OF_0S_1S_AND_2S				  SORT_AN_ARRAY_OF_0S_1S_AND_2S
--							      --							    --								  --
void sort012 ( int a [ ] , int arr_size ) {		      static void sort012 ( int a [ ] , int arr_size ) {	    public static void sort012 ( int a [ ] , int arr_size ) {	  script_not_found : None
  int lo = 0 ;						      	int lo = 0 ;						      int lo = 0 ;						  
  int hi = arr_size - 1 ;				      	int hi = arr_size - 1 ;					      int hi = arr_size - 1 ;					  
  int mid = 0 ;						      	int mid = 0 , temp = 0 ;				      int mid = 0 ;						  
  while ( mid <= hi ) {					      	while ( mid <= hi ) {					      while ( mid <= hi ) {					  
    switch ( a [ mid ] ) {				      	  switch ( a [ mid ] ) {				    	switch ( a [ mid ] ) {					  
      case 0 : swap ( a [ lo ++ ] , a [ mid ++ ] ) ;	      	    case 0 : {						    	  case 0 : swap ( a [ lo ++ ] , a [ mid ++ ] ) ;	  
      break ;						      	      temp = a [ lo ] ;					    	  break ;						  
      case 1 : mid ++ ;					      	      a [ lo ] = a [ mid ] ;				    	  case 1 : mid ++ ;					  
      break ;						      	      a [ mid ] = temp ;				    	  break ;						  
      case 2 : swap ( a [ mid ] , a [ hi -- ] ) ;	      	      lo ++ ;						    	  case 2 : swap ( a [ mid ] , a [ hi -- ] ) ;		  
      break ;						      	      mid ++ ;						    	  break ;						  
    }							      	      break ;						    	}							  
  }							      	    }							      }								  
}							      	    case 1 : mid ++ ;					    }								  
							      	    break ;						    								  
							      	    case 2 : {						    								  
							      	      temp = a [ mid ] ;				    								  
							      	      a [ mid ] = a [ hi ] ;				    								  
							      	      a [ hi ] = temp ;					    								  
							      	      hi -- ;						    								  
							      	      break ;						    								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			      K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			    K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS			  K_MAXIMUM_SUM_COMBINATIONS_TWO_ARRAYS
--							      --							    --								  --
void KMaxCombinations ( int A [ ] , int B [ ] , int N , int K static void KMaxCombinations ( int A [ ] , int B [ ] , int N  public static void KMaxCombinations ( int A [ ] , int B [ ] , script_not_found : None
  priority_queue < int > pq ;				      	PriorityQueue < Integer > pq = new PriorityQueue < Integer    PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) pq . push ( A [ i ] + B [ j ] ) ;		      	j ++ ) pq . add ( A [ i ] + B [ j ] ) ;			      j ++ ) pq . add ( A [ i ] + B [ j ] ) ;			  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  while ( count < K ) {					      	while ( count < K ) {					      while ( count < K ) {					  
    cout << pq . top ( ) << endl ;			      	  System . out . println ( pq . peek ( ) ) ;		    	System . out . println ( pq . peek ( ) ) ;		  
    pq . pop ( ) ;					      	  pq . remove ( ) ;					    	pq . poll ( ) ;						  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		      NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		    NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3		  NUMBER_DIGITS_REMOVED_MAKE_NUMBER_DIVISIBLE_3
--							      --							    --								  --
int divisible ( string num ) {				      static int divisible ( String num ) {			    public static int divisible ( String num ) {		  failure : #Results:5, 10
  int n = num . length ( ) ;				      	int n = num . length ( ) ;				      int n = num . length ( ) ;				  
  int sum = accumulate ( begin ( num ) , end ( num ) , 0 ) -  	int sum = 0 ;						      int sum = Arrays . stream ( num . split ( "\\." ) ) . mapTo 
  if ( sum % 3 == 0 ) return 0 ;			      	for ( int i = 0 ;					      if ( sum % 3 == 0 ) return 0 ;				  
  if ( n == 1 ) return - 1 ;				      	i < n ;							      if ( n == 1 ) return - 1 ;				  
  for ( int i = 0 ;					      	i ++ ) sum += ( int ) ( num . charAt ( i ) ) ;		      for ( int i = 0 ;						  
  i < n ;						      	if ( sum % 3 == 0 ) return 0 ;				      i < n ;							  
  i ++ ) if ( sum % 3 == ( num [ i ] - '0' ) % 3 ) return 1 ; 	if ( n == 1 ) return - 1 ;				      i ++ ) if ( sum % 3 == ( num . charAt ( i ) - '0' ) % 3 ) r 
  if ( n == 2 ) return - 1 ;				      	for ( int i = 0 ;					      if ( n == 2 ) return - 1 ;				  
  return 2 ;						      	i < n ;							      return 2 ;						  
}							      	i ++ ) if ( sum % 3 == ( num . charAt ( i ) - '0' ) % 3 ) r }								  
							      	if ( n == 2 ) return - 1 ;				    								  
							      	return 2 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1 COUNT_PAIRS_TWO_SORTED_ARRAYS_WHOSE_SUM_EQUAL_GIVEN_VALUE_X_1
--							      --							    --								  --
int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n  static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , public static int countPairs ( int arr1 [ ] , int arr2 [ ] ,  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  unordered_set < int > us ;				      	HashSet < Integer > us = new HashSet < Integer > ( ) ;	      HashSet < Integer > us = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) us . insert ( arr1 [ i ] ) ;			      	i ++ ) us . add ( arr1 [ i ] ) ;			      i ++ ) {							  
  for ( int j = 0 ;					      	for ( int j = 0 ;					    	us . add ( arr1 [ i ] ) ;				  
  j < n ;						      	j < n ;							      }								  
  j ++ ) if ( us . find ( x - arr2 [ j ] ) != us . end ( ) )  	j ++ ) if ( us . contains ( x - arr2 [ j ] ) ) count ++ ;     for ( int j = 0 ;						  
  return count ;					      	return count ;						      j < n ;							  
}							      }								      j ++ ) {							  
							      								    	if ( us . contains ( x - arr2 [ j ] ) ) {		  
							      								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TILING_WITH_DOMINOES					      TILING_WITH_DOMINOES					    TILING_WITH_DOMINOES					  TILING_WITH_DOMINOES
--							      --							    --								  --
int countWays ( int n ) {				      static int countWays ( int n ) {				    public static int countWays ( int n ) {			  error : TILING_WITH_DOMINOES.java:32: error: ';' e
  int A [ n + 1 ] , B [ n + 1 ] ;			      	int [ ] A = new int [ n + 1 ] ;				      int A [ ] = new int [ n + 1 ] , B [ ] = new int [ n + 1 ] ; xpected   A [ 0 ] = 1 , A [ 1 ] = 0 , B [ 0 ] = 0
  A [ 0 ] = 1 , A [ 1 ] = 0 , B [ 0 ] = 0 , B [ 1 ] = 1 ;     	int [ ] B = new int [ n + 1 ] ;				      A [ 0 ] = 1 , A [ 1 ] = 0 , B [ 0 ] = 0 , B [ 1 ] = 1 ;	  , B [ 1 ] = 1 ;	       ^ TILING_WITH_DOMINOE
  for ( int i = 2 ;					      	A [ 0 ] = 1 ;						      for ( int i = 2 ;						  S.java:32: error: ';' expected   A [ 0 ] = 1 , A [
  i <= n ;						      	A [ 1 ] = 0 ;						      i <= n ;							   1 ] = 0 , B [ 0 ] = 0 , B [ 1 ] = 1 ;
  i ++ ) {						      	B [ 0 ] = 0 ;						      i ++ ) {							  		  ^ TILING_WITH_DOMINOES.java:32: er
    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;		      	B [ 1 ] = 1 ;						    	A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;		  ror: ';' expected   A [ 0 ] = 1 , A [ 1 ] = 0 , B
    B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;		      	for ( int i = 2 ;					    	B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;			  [ 0 ] = 0 , B [ 1 ] = 1 ;
  }							      	i <= n ;						      }								  		   ^ 3 errors
  return A [ n ] ;					      	i ++ ) {						      return A [ n ] ;						  
}							      	  A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;		    }								  
							      	  B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;			    								  
							      	}							    								  
							      	return A [ n ] ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION     MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	    MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION	  MAXIMUM_SUBARRAY_SUM_ARRAY_CREATED_REPEATED_CONCATENATION
--							      --							    --								  --
int maxSubArraySumRepeated ( int a [ ] , int n , int k ) {    static int maxSubArraySumRepeated ( int a [ ] , int n , int k public static int maxSubArraySumRepeated ( int a [ ] , int n  failure : #Results:8, 10
  int max_so_far = INT_MIN , max_ending_here = 0 ;	      	int max_so_far = 0 ;					      int maxSo_far = Integer . MIN_VALUE , max_ending_here = 0 ; 
  for ( int i = 0 ;					      	int INT_MIN , max_ending_here = 0 ;			      for ( int i = 0 ;						  
  i < n * k ;						      	for ( int i = 0 ;					      i < n * k ;						  
  i ++ ) {						      	i < n * k ;						      i ++ ) {							  
    max_ending_here = max_ending_here + a [ i % n ] ;	      	i ++ ) {						    	max_ending_here = max_ending_here + a [ i % n ] ;	  
    if ( max_so_far < max_ending_here ) max_so_far = max_endi 	  max_ending_here = max_ending_here + a [ i % n ] ;	    	if ( maxSo_far < max_ending_here ) {			  
    if ( max_ending_here < 0 ) max_ending_here = 0 ;	      	  if ( max_so_far < max_ending_here ) max_so_far = max_endi 	  maxSo_far = max_ending_here ;				  
  }							      	  if ( max_ending_here < 0 ) max_ending_here = 0 ;	    	}							  
  return max_so_far ;					      	}							    	if ( max_ending_here < 0 ) {				  
}							      	return max_so_far ;					    	  max_ending_here = 0 ;					  
							      }								    	}							  
							      								      }								  
							      								      return maxSo_far ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS				  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS
--							      --							    --								  --
bool sortedAfterSwap ( int A [ ] , bool B [ ] , int n ) {     static boolean sortedAfterSwap ( int A [ ] , boolean B [ ] ,  public static boolean sortedAfterSwap ( int A [ ] , boolean B script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( B [ i ] ) {					      	  if ( B [ i ] ) {					    	if ( B [ i ] ) {					  
      j = i ;						      	    j = i ;						    	  j = i ;						  
      while ( B [ j ] ) j ++ ;				      	    while ( B [ j ] ) {					    	  while ( B [ j ] ) {					  
      sort ( A + i , A + 1 + j ) ;			      	      j ++ ;						    	    j ++ ;						  
      i = j ;						      	    }							    	  }							  
    }							      	    Arrays . sort ( A , i , 1 + j ) ;			    	  Arrays . sort ( A , i , j ) ;				  
  }							      	    i = j ;						    	  i = j ;						  
  for ( i = 0 ;						      	  }							    	}							  
  i < n ;						      	}							      }								  
  i ++ ) {						      	for ( i = 0 ;						      for ( i = 0 ;						  
    if ( A [ i ] != i + 1 ) return false ;		      	i < n ;							      i < n ;							  
  }							      	i ++ ) {						      i ++ ) {							  
  return true ;						      	  if ( A [ i ] != i + 1 ) {				    	if ( A [ i ] != i + 1 ) {				  
}							      	    return false ;					    	  return false ;					  
							      	  }							    	}							  
							      	}							      }								  
							      	return true ;						      return true ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING	      SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING	    SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING		  SORT_STRING_ACCORDING_ORDER_DEFINED_ANOTHER_STRING
--							      --							    --								  --
void sortByPattern ( string & str , string pat ) {	      static void sortByPattern ( char [ ] str , char [ ] pat ) {   public static void sortByPattern ( String str , String pat )  script_not_found : None
  int count [ MAX_CHAR ] = {				      	int count [ ] = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ str . length ( ) ] ;		  
    0 }							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ;							      	i < str . length ;					      i < str . length ( ) ;					  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) {							  
    i < str . length ( ) ;				      	  count [ str [ i ] - 'a' ] ++ ;			    	count [ str . charAt ( i ) - 'a' ] ++ ;			  
    i ++ ) count [ str [ i ] - 'a' ] ++ ;		      	}							      }								  
    int index = 0 ;					      	int index = 0 ;						      int index = 0 ;						  
    for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    i < pat . length ( ) ;				      	i < pat . length ;					      i < pat . length ( ) ;					  
    i ++ ) for ( int j = 0 ;				      	i ++ ) {						      i ++ ) for ( int j = 0 ;					  
    j < count [ pat [ i ] - 'a' ] ;			      	  for ( int j = 0 ;					      j < count [ pat . charAt ( i ) - 'a' ] ;			  
    j ++ ) str [ index ++ ] = pat [ i ] ;		      	  j < count [ pat [ i ] - 'a' ] ;			      j ++ ) {							  
  }							      	  j ++ ) {						    	str . charAt ( index ++ ) = pat . charAt ( i ) ;	  
							      	    str [ index ++ ] = pat [ i ] ;			      }								  
							      	  }							    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU COMPUTE_NCR_P_SET_1_INTRODUCTION_AND_DYNAMIC_PROGRAMMING_SOLU
--							      --							    --								  --
int nCrModp ( int n , int r , int p ) {			      static int nCrModp ( int n , int r , int p ) {		    public static int nCrModp ( int n , int r , int p ) {	  success : None
  int C [ r + 1 ] ;					      	int C [ ] = new int [ r + 1 ] ;				      int [ ] C = new int [ r + 1 ] ;				  
  memset ( C , 0 , sizeof ( C ) ) ;			      	Arrays . fill ( C , 0 ) ;				      Arrays . fill ( C , 0 ) ;					  
  C [ 0 ] = 1 ;						      	C [ 0 ] = 1 ;						      C [ 0 ] = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = min ( i , r ) ;			      	  for ( int j = Math . min ( i , r ) ;			    	for ( int j = Math . min ( i , r ) ;			  
    j > 0 ;						      	  j > 0 ;						    	j > 0 ;							  
    j -- ) C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p ;	      	  j -- ) C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p ;	    	j -- ) {						  
  }							      	}							    	  C [ j ] = ( C [ j ] + C [ j - 1 ] ) % p ;		  
  return C [ r ] ;					      	return C [ r ] ;					    	}							  
}							      }								      }								  
							      								      return C [ r ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL PROGRAM_FIND_SMALLEST_DIFFERENCE_ANGLES_TWO_PARTS_GIVEN_CIRCL
--							      --							    --								  --
int findMinimumAngle ( int arr [ ] , int n ) {		      public static int findMinimumAngle ( int arr [ ] , int n ) {  public static int findMinimumAngle ( int arr [ ] , int n ) {  success : identical to gold
  int l = 0 , sum = 0 , ans = 360 ;			      	int l = 0 , sum = 0 , ans = 360 ;			      int l = 0 , sum = 0 , ans = 360 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum += arr [ i ] ;					      	  sum += arr [ i ] ;					    	sum += arr [ i ] ;					  
    while ( sum >= 180 ) {				      	  while ( sum >= 180 ) {				    	while ( sum >= 180 ) {					  
      ans = min ( ans , 2 * abs ( 180 - sum ) ) ;	      	    ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) 	  ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) 
      sum -= arr [ l ] ;				      	    sum -= arr [ l ] ;					    	  sum -= arr [ l ] ;					  
      l ++ ;						      	    l ++ ;						    	  l ++ ;						  
    }							      	  }							    	}							  
    ans = min ( ans , 2 * abs ( 180 - sum ) ) ;		      	  ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ; 	ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ; 
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_ODD_FACTORS_NUMBER				      FIND_SUM_ODD_FACTORS_NUMBER				    FIND_SUM_ODD_FACTORS_NUMBER					  FIND_SUM_ODD_FACTORS_NUMBER
--							      --							    --								  --
int sumofoddFactors ( int n ) {				      static int sumofoddFactors ( int n ) {			    public static int sumofoddFactors ( int n ) {		  success : None
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  while ( n % 2 == 0 ) n = n / 2 ;			      	while ( n % 2 == 0 ) n = n / 2 ;			      while ( n % 2 == 0 ) {					  
  for ( int i = 3 ;					      	for ( int i = 3 ;					    	n = n / 2 ;						  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 3 ;						  
    int count = 0 , curr_sum = 1 ;			      	  int count = 0 , curr_sum = 1 ;			      i <= Math . sqrt ( n ) ;					  
    int curr_term = 1 ;					      	  int curr_term = 1 ;					      i ++ ) {							  
    while ( n % i == 0 ) {				      	  while ( n % i == 0 ) {				    	int count = 0 , currSum = 1 ;				  
      count ++ ;					      	    count ++ ;						    	int currTerm = 1 ;					  
      n = n / i ;					      	    n = n / i ;						    	while ( n % i == 0 ) {					  
      curr_term *= i ;					      	    curr_term *= i ;					    	  count ++ ;						  
      curr_sum += curr_term ;				      	    curr_sum += curr_term ;				    	  n = n / i ;						  
    }							      	  }							    	  currTerm *= i ;					  
    res *= curr_sum ;					      	  res *= curr_sum ;					    	  currSum += currTerm ;					  
  }							      	}							    	}							  
  if ( n >= 2 ) res *= ( 1 + n ) ;			      	if ( n >= 2 ) res *= ( 1 + n ) ;			    	res *= currSum ;					  
  return res ;						      	return res ;						      }								  
}							      }								      if ( n >= 2 ) {						  
							      								    	res *= ( 1 + n ) ;					  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF
--							      --							    --								  --
int isMultipleOf3 ( int n ) {				      static int isMultipleOf3 ( int n ) {			    public static int isMultipleOf3 ( int n ) {			  error : WRITE_AN_EFFICIENT_METHOD_TO_CHECK_IF_A_NU
  int odd_count = 0 ;					      	int odd_count = 0 ;					      int odd_count = 0 ;					  MBER_IS_MULTIPLE_OF_3.java:41: error: incompatible
  int even_count = 0 ;					      	int even_count = 0 ;					      int even_count = 0 ;					   types: int cannot be converted to boolean	 if
  if ( n < 0 ) n = - n ;				      	if ( n < 0 ) n = - n ;					      if ( n < 0 ) {						  ( n & 1 ) {		 ^ WRITE_AN_EFFICIENT_METHOD
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				    	n = - n ;						  _TO_CHECK_IF_A_NUMBER_IS_MULTIPLE_OF_3.java:44: er
  if ( n == 1 ) return 0 ;				      	if ( n == 1 ) return 0 ;				      }								  ror: incompatible types: int cannot be converted t
  while ( n ) {						      	while ( n != 0 ) {					      if ( n == 0 ) {						  o boolean	if ( n & 2 ) {		  ^ 2 errors
    if ( n & 1 ) odd_count ++ ;				      	  if ( ( n & 1 ) != 0 ) odd_count ++ ;			    	return 1 ;						  
    if ( n & 2 ) even_count ++ ;			      	  if ( ( n & 2 ) != 0 ) even_count ++ ;			      }								  
    n = n >> 2 ;					      	  n = n >> 2 ;						      if ( n == 1 ) {						  
  }							      	}							    	return 0 ;						  
  return isMultipleOf3 ( abs ( odd_count - even_count ) ) ;   	return isMultipleOf3 ( Math . abs ( odd_count - even_count    }								  
}							      }								      while ( n > 0 ) {						  
							      								    	if ( n & 1 ) {						  
							      								    	  odd_count ++ ;					  
							      								    	}							  
							      								    	if ( n & 2 ) {						  
							      								    	  even_count ++ ;					  
							      								    	}							  
							      								    	n = n >> 2 ;						  
							      								      }								  
							      								      return isMultipleOf3 ( Math . abs ( odd_count - even_count  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	      SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1	    SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1		  SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM_1
--							      --							    --								  --
int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) {   static int KnapSack ( int val [ ] , int wt [ ] , int n , int  public static int KnapSack ( int val [ ] , int wt [ ] , int n script_not_found : None
  int dp [ W + 1 ] ;					      	int [ ] dp = new int [ W + 1 ] ;			      int dp [ ] = new int [ W + 1 ] ;				  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	Arrays . fill ( dp , 0 ) ;				      Arrays . fill ( dp , 0 ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = W ;				      	i ++ ) for ( int j = W ;				      i ++ ) for ( int j = W ;					  
  j >= wt [ i ] ;					      	j >= wt [ i ] ;						      j >= wt [ i ] ;						  
  j -- ) dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt  	j -- ) dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [    j -- ) dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [  
  return dp [ W ] ;					      	return dp [ W ] ;					      return dp [ W ] ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2	      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS_2
--							      --							    --								  --
void findElements ( int arr [ ] , int n ) {		      static void findElements ( int arr [ ] , int n ) {	    public static void findElements ( int arr [ ] , int n ) {	  script_not_found : None
  int first = INT_MIN , second = INT_MIN ;		      	int first = Integer . MIN_VALUE ;			      int first = Integer . MIN_VALUE , second = Integer . MIN_VA 
  for ( int i = 0 ;					      	int second = Integer . MAX_VALUE ;			      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) {						      	i < n ;							      i ++ ) {							  
    if ( arr [ i ] > first ) {				      	i ++ ) {						    	if ( arr [ i ] > first ) {				  
      second = first ;					      	  if ( arr [ i ] > first ) {				    	  second = first ;					  
      first = arr [ i ] ;				      	    second = first ;					    	  first = arr [ i ] ;					  
    }							      	    first = arr [ i ] ;					    	}							  
    else if ( arr [ i ] > second ) second = arr [ i ] ;	      	  }							    	else if ( arr [ i ] > second ) {			  
  }							      	  else if ( arr [ i ] > second ) second = arr [ i ] ;	    	  second = arr [ i ] ;					  
  for ( int i = 0 ;					      	}							    	}							  
  i < n ;						      	for ( int i = 0 ;					      }								  
  i ++ ) if ( arr [ i ] < second ) cout << arr [ i ] << " " ; 	i < n ;							      for ( int i = 0 ;						  
}							      	i ++ ) if ( arr [ i ] < second ) System . out . print ( arr   i < n ;							  
							      }								      i ++ ) if ( arr [ i ] < second ) System . out . print ( arr 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			      FREQUENCY_ELEMENT_UNSORTED_ARRAY_1			    FREQUENCY_ELEMENT_UNSORTED_ARRAY_1				  FREQUENCY_ELEMENT_UNSORTED_ARRAY_1
--							      --							    --								  --
void countFreq ( int a [ ] , int n ) {			      static void countFreq ( int a [ ] , int n ) {		    public static void countFreq ( int a [ ] , int n ) {	  script_not_found : None
  unordered_map < int , int > hm ;			      	int hm [ ] = new int [ n ] ;				      HashMap < Integer , Integer > hm = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) hm [ a [ i ] ] ++ ;				      	i ++ ) hm [ a [ i ] ] ++ ;				      i ++ ) {							  
  int cumul = 0 ;					      	int cumul = 0 ;						    	hm . put ( a [ i ] , ++ i ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < n ;						      	i < n ;							      int cumul = 0 ;						  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    cumul += hm [ a [ i ] ] ;				      	  cumul += hm [ a [ i ] ] ;				      i < n ;							  
    if ( hm [ a [ i ] ] ) {				      	  if ( hm [ a [ i ] ] != 0 ) {				      i ++ ) {							  
      cout << a [ i ] << "->" << cumul << endl ;	      	    System . out . println ( a [ i ] + "->" + cumul ) ;	    	cumul += hm . get ( a [ i ] ) ;				  
    }							      	  }							    	if ( hm . get ( a [ i ] ) != null ) System . out . printl 
    hm [ a [ i ] ] = 0 ;				      	  hm [ a [ i ] ] = 0 ;					    	hm . put ( a [ i ] , 0 ) ;				  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			      SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			    SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1			  SORT_1_N_SWAPPING_ADJACENT_ELEMENTS_1
--							      --							    --								  --
bool sortedAfterSwap ( int A [ ] , bool B [ ] , int n ) {     static int sortedAfterSwap ( int [ ] A , int [ ] B , int n )  public static boolean sortedAfterSwap ( int A [ ] , boolean B script_not_found : None
  for ( int i = 0 ;					      	int t = 0 ;						      for ( int i = 0 ;						  
  i < n - 1 ;						      	for ( int i = 0 ;					      i < n - 1 ;						  
  i ++ ) {						      	i < n - 1 ;						      i ++ ) {							  
    if ( B [ i ] ) {					      	i ++ ) {						    	if ( B [ i ] ) {					  
      if ( A [ i ] != i + 1 ) swap ( A [ i ] , A [ i + 1 ] )  	  if ( B [ i ] != 0 ) {					    	  if ( A [ i ] != i + 1 ) {				  
    }							      	    if ( A [ i ] != i + 1 ) t = A [ i ] ;		    	    swap ( A [ i ] , A [ i + 1 ] ) ;			  
  }							      	    A [ i ] = A [ i + 1 ] ;				    	  }							  
  for ( int i = 0 ;					      	    A [ i + 1 ] = t ;					    	}							  
  i < n ;						      	  }							      }								  
  i ++ ) {						      	}							      for ( int i = 0 ;						  
    if ( A [ i ] != i + 1 ) return false ;		      	for ( int i = 0 ;					      i < n ;							  
  }							      	i < n ;							      i ++ ) {							  
  return true ;						      	i ++ ) {						    	if ( A [ i ] != i + 1 ) {				  
}							      	  if ( A [ i ] != i + 1 ) return 0 ;			    	  return false ;					  
							      	}							    	}							  
							      	return 1 ;						      }								  
							      }								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			      PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			    PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE			  PRINT_N_TERMS_NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
void sequence ( int n ) {				      public static void sequence ( int n ) {			    public static void sequence ( int n ) {			  script_not_found : None
  int f [ n + 1 ] ;					      	int f [ ] = new int [ n + 1 ] ;				      int [ ] f = new int [ n + 1 ] ;				  
  f [ 0 ] = 0 ;						      	f [ 0 ] = 0 ;						      f [ 0 ] = 0 ;						  
  f [ 1 ] = 1 ;						      	f [ 1 ] = 1 ;						      f [ 1 ] = 1 ;						  
  f [ 2 ] = 1 ;						      	f [ 2 ] = 1 ;						      f [ 2 ] = 1 ;						  
  cout << f [ 1 ] << " " << f [ 2 ] << " " ;		      	System . out . print ( f [ 1 ] + " " + f [ 2 ] + " " ) ;      System . out . print ( f [ 1 ] + " " + f [ 2 ] + " " ) ;	  
  for ( int i = 3 ;					      	for ( int i = 3 ;					      for ( int i = 3 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;     	  f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	    	f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	  
    cout << f [ i ] << " " ;				      	  System . out . print ( f [ i ] + " " ) ;		    	System . out . print ( f [ i ] + " " ) ;		  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			      PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			    PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION			  PROGRAM_DECIMAL_HEXADECIMAL_CONVERSION
--							      --							    --								  --
void decToHexa ( int n ) {				      static void decToHexa ( int n ) {				    public static void decToHexa ( int n ) {			  script_not_found : None
  char hexaDeciNum [ 100 ] ;				      	char [ ] hexaDeciNum = new char [ 100 ] ;		      char [ ] hexaDeciNum = new char [ 100 ] ;			  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( n != 0 ) {					      	while ( n != 0 ) {					      while ( n != 0 ) {					  
    int temp = 0 ;					      	  int temp = 0 ;					    	int temp = 0 ;						  
    temp = n % 16 ;					      	  temp = n % 16 ;					    	temp = n % 16 ;						  
    if ( temp < 10 ) {					      	  if ( temp < 10 ) {					    	if ( temp < 10 ) {					  
      hexaDeciNum [ i ] = temp + 48 ;			      	    hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ;	    	  hexaDeciNum [ i ] = temp + 48 ;			  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      hexaDeciNum [ i ] = temp + 55 ;			      	    hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ;	    	  hexaDeciNum [ i ] = temp + 55 ;			  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    n = n / 16 ;					      	  n = n / 16 ;						    	n = n / 16 ;						  
  }							      	}							      }								  
  for ( int j = i - 1 ;					      	for ( int j = i - 1 ;					      for ( int j = i - 1 ;					  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  j -- ) cout << hexaDeciNum [ j ] ;			      	j -- ) System . out . print ( hexaDeciNum [ j ] ) ;	      j -- ) {							  
}							      }								    	System . out . print ( hexaDeciNum [ j ] ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT		      FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			    FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT			  FIND_EXPRESSION_DUPLICATE_PARENTHESIS_NOT
--							      --							    --								  --
bool findDuplicateparenthesis ( string str ) {		      static boolean findDuplicateparenthesis ( String s ) {	    public static boolean findDuplicateparenthesis ( String str ) success : None
  stack < char > Stack ;				      	Stack < Character > Stack = new Stack < > ( ) ;		      Stack < Character > Stack = new Stack < > ( ) ;		  
  for ( char ch : str ) {				      	char [ ] str = s . toCharArray ( ) ;			      for ( char ch : str . toCharArray ( ) ) {			  
    if ( ch == ')' ) {					      	for ( char ch : str ) {					    	if ( ch == ')' ) {					  
      char top = Stack . top ( ) ;			      	  if ( ch == ')' ) {					    	  char top = Stack . peek ( ) ;				  
      Stack . pop ( ) ;					      	    char top = Stack . peek ( ) ;			    	  Stack . pop ( ) ;					  
      int elementsInside = 0 ;				      	    Stack . pop ( ) ;					    	  int elementsInside = 0 ;				  
      while ( top != '(' ) {				      	    int elementsInside = 0 ;				    	  while ( top != '(' ) {				  
	elementsInside ++ ;				      	    while ( top != '(' ) {				    	    elementsInside ++ ;					  
	top = Stack . top ( ) ;				      	      elementsInside ++ ;				    	    top = Stack . peek ( ) ;				  
	Stack . pop ( ) ;				      	      top = Stack . peek ( ) ;				    	    Stack . pop ( ) ;					  
      }							      	      Stack . pop ( ) ;					    	  }							  
      if ( elementsInside < 1 ) {			      	    }							    	  if ( elementsInside < 1 ) {				  
	return 1 ;					      	    if ( elementsInside < 1 ) {				    	    return true ;					  
      }							      	      return true ;					    	  }							  
    }							      	    }							    	}							  
    else Stack . push ( ch ) ;				      	  }							    	else {							  
  }							      	  else {						    	  Stack . push ( ch ) ;					  
  return false ;					      	    Stack . push ( ch ) ;				    	}							  
}							      	  }							      }								  
							      	}							      return false ;						  
							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS	      COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		    COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS		  COUNT_WORDS_APPEAR_EXACTLY_TWO_TIMES_ARRAY_WORDS
--							      --							    --								  --
int countWords ( string str [ ] , int n ) {		      static int countWords ( String str [ ] , int n ) {	    public static int countWords ( String str [ ] , int n ) {	  failure : #Results:1, 10
  unordered_map < string , int > m ;			      	HashMap < String , Integer > m = new HashMap < > ( ) ;	      HashMap < String , Integer > m = new HashMap < String , Int 
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) m [ str [ i ] ] += 1 ;				      	i ++ ) {						      i ++ ) {							  
  int res = 0 ;						      	  if ( m . containsKey ( str [ i ] ) ) {		    	m . put ( str [ i ] , 1 ) ;				  
  for ( auto it = m . begin ( ) ;			      	    int get = m . get ( str [ i ] ) ;			      }								  
  it != m . end ( ) ;					      	    m . put ( str [ i ] , get + 1 ) ;			      int res = 0 ;						  
  it ++ ) if ( ( it -> second == 2 ) ) res ++ ;		      	  }							      for ( Map . Entry < String , Integer > entry : m . entrySet 
  return res ;						      	  else {						      return res ;						  
}							      	    m . put ( str [ i ] , 1 ) ;				    }								  
							      	  }							    								  
							      	}							    								  
							      	int res = 0 ;						    								  
							      	for ( Map . Entry < String , Integer > it : m . entrySet (  								  
							      	  if ( it . getValue ( ) == 2 ) res ++ ;		    								  
							      	}							    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE K_TH_MISSING_ELEMENT_INCREASING_SEQUENCE_NOT_PRESENT_GIVEN_SE
--							      --							    --								  --
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 )  static int find ( int a [ ] , int b [ ] , int k , int n1 , in public static int find ( int a [ ] , int b [ ] , int k , int  success : None
  unordered_set < int > s ;				      	LinkedHashSet < Integer > s = new LinkedHashSet < > ( ) ;     HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n2 ;						      	i < n2 ;						      i < n2 ;							  
  i ++ ) s . insert ( b [ i ] ) ;			      	i ++ ) s . add ( b [ i ] ) ;				      i ++ ) {							  
  int missing = 0 ;					      	int missing = 0 ;					    	s . add ( b [ i ] ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < n1 ;						      	i < n1 ;						      int missing = 0 ;						  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    if ( s . find ( a [ i ] ) == s . end ( ) ) missing ++ ;   	  if ( ! s . contains ( a [ i ] ) ) missing ++ ;	      i < n1 ;							  
    if ( missing == k ) return a [ i ] ;		      	  if ( missing == k ) return a [ i ] ;			      i ++ ) {							  
  }							      	}							    	if ( s . contains ( a [ i ] ) == false ) {		  
  return - 1 ;						      	return - 1 ;						    	  missing ++ ;						  
}							      }								    	}							  
							      								    	if ( missing == k ) {					  
							      								    	  return a [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			      CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			    CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND			  CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND
--							      --							    --								  --
int calcAngle ( double h , double m ) {			      static int calcAngle ( double h , double m ) {		    public static int calcAngle ( double h , double m ) {	  error : CALCULATE_ANGLE_HOUR_HAND_MINUTE_HAND.java
  if ( h < 0 || m < 0 || h > 12 || m > 60 ) printf ( "Wrong i 	if ( h < 0 || m < 0 || h > 12 || m > 60 ) System . out . pr   if ( h < 0 || m < 0 || h > 12 || m > 60 ) {		  :35: error: incompatible types: possible lossy con
  if ( h == 12 ) h = 0 ;				      	if ( h == 12 ) h = 0 ;					    	System . out . println ( "Wrong input" ) ;		  version from double to int   int hour_angle = 0.5
  if ( m == 60 ) m = 0 ;				      	if ( m == 60 ) m = 0 ;					      }								  * ( h * 60 + m ) ;			    ^ CALCUL
  int hour_angle = 0.5 * ( h * 60 + m ) ;		      	int hour_angle = ( int ) ( 0.5 * ( h * 60 + m ) ) ;	      if ( h == 12 ) {						  ATE_ANGLE_HOUR_HAND_MINUTE_HAND.java:36: error: in
  int minute_angle = 6 * m ;				      	int minute_angle = ( int ) ( 6 * m ) ;			    	h = 0 ;							  compatible types: possible lossy conversion from d
  int angle = abs ( hour_angle - minute_angle ) ;	      	int angle = Math . abs ( hour_angle - minute_angle ) ;	      }								  ouble to int	 int minute_angle = 6 * m ;
  angle = min ( 360 - angle , angle ) ;			      	angle = Math . min ( 360 - angle , angle ) ;		      if ( m == 60 ) {						  		 ^ 2 errors
  return angle ;					      	return angle ;						    	m = 0 ;							  
}							      }								      }								  
							      								      int hour_angle = 0.5 * ( h * 60 + m ) ;			  
							      								      int minute_angle = 6 * m ;				  
							      								      int angle = Math . abs ( hour_angle - minute_angle ) ;	  
							      								      angle = Math . min ( 360 - angle , angle ) ;		  
							      								      return angle ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1		      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY_1
--							      --							    --								  --
int countPairs ( int arr [ ] , int n ) {		      public static int countPairs ( int arr [ ] , int n ) {	    public static int countPairs ( int arr [ ] , int n ) {	  failure : #Results:2, 10
  unordered_map < int , int > mp ;			      	HashMap < Integer , Integer > hm = new HashMap < > ( ) ;      HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) mp [ arr [ i ] ] ++ ;				      	i ++ ) {						      i ++ ) {							  
  int ans = 0 ;						      	  if ( hm . containsKey ( arr [ i ] ) ) hm . put ( arr [ i  	mp . put ( arr [ i ] , ++ i ) ;				  
  for ( auto it = mp . begin ( ) ;			      	  else hm . put ( arr [ i ] , 1 ) ;			      }								  
  it != mp . end ( ) ;					      	}							      int ans = 0 ;						  
  it ++ ) {						      	int ans = 0 ;						      for ( Map . Entry < Integer , Integer > entry : mp . entryS 
    int count = it -> second ;				      	for ( Map . Entry < Integer , Integer > it : hm . entrySet  	int count = entry . getValue ( ) ;			  
    ans += ( count * ( count - 1 ) ) / 2 ;		      	  int count = it . getValue ( ) ;			    	ans += ( count * ( count - 1 ) ) / 2 ;			  
  }							      	  ans += ( count * ( count - 1 ) ) / 2 ;		      }								  
  return ans ;						      	}							      return ans ;						  
}							      	return ans ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMAINDER_7_LARGE_NUMBERS				      REMAINDER_7_LARGE_NUMBERS					    REMAINDER_7_LARGE_NUMBERS					  REMAINDER_7_LARGE_NUMBERS
--							      --							    --								  --
int remainderWith7 ( string num ) {			      static int remainderWith7 ( String num ) {		    public static int remainderWith7 ( String num ) {		  success : None
  int series [ ] = {					      	int series [ ] = {					      int [ ] series = {					  
    1 , 3 , 2 , - 1 , - 3 , - 2 }			      	  1 , 3 , 2 , - 1 , - 3 , - 2 }				    	1 , 3 , 2 , - 1 , - 3 , - 2 }				  
    ;							      	  ;							    	;							  
    int series_index = 0 ;				      	  int series_index = 0 ;				    	int series_index = 0 ;					  
    int result = 0 ;					      	  int result = 0 ;					    	int result = 0 ;					  
    for ( int i = num . size ( ) - 1 ;			      	  for ( int i = num . length ( ) - 1 ;			    	for ( int i = num . length ( ) - 1 ;			  
    i >= 0 ;						      	  i >= 0 ;						    	i >= 0 ;						  
    i -- ) {						      	  i -- ) {						    	i -- ) {						  
      int digit = num [ i ] - '0' ;			      	    int digit = num . charAt ( i ) - '0' ;		    	  int digit = num . charAt ( i ) - '0' ;		  
      result += digit * series [ series_index ] ;	      	    result += digit * series [ series_index ] ;		    	  result += digit * series [ series_index ] ;		  
      series_index = ( series_index + 1 ) % 6 ;		      	    series_index = ( series_index + 1 ) % 6 ;		    	  series_index = ( series_index + 1 ) % 6 ;		  
      result %= 7 ;					      	    result %= 7 ;					    	  result %= 7 ;						  
    }							      	  }							    	}							  
    if ( result < 0 ) result = ( result + 7 ) % 7 ;	      	  if ( result < 0 ) result = ( result + 7 ) % 7 ;	    	if ( result < 0 ) {					  
    return result ;					      	  return result ;					    	  result = ( result + 7 ) % 7 ;				  
  }							      	}							    	}							  
							      								    	return result ;						  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_ LONGEST_SUBSEQUENCE_WHERE_EVERY_CHARACTER_APPEARS_AT_LEAST_K_
--							      --							    --								  --
void longestSubseqWithK ( string str , int k ) {	      static void longestSubseqWithK ( String str , int k ) {	    public static void longestSubseqWithK ( String str , int k )  script_not_found : None
  int n = str . size ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int freq [ MAX_CHARS ] = {				      	int freq [ ] = new int [ MAX_CHARS ] ;			      int [ ] freq = new int [ n ] ;				  
    0 }							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ;							      	i < n ;							      i < n ;							  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) {							  
    i < n ;						      	  freq [ str . charAt ( i ) - 'a' ] ++ ;		    	freq [ str . charAt ( i ) - 'a' ] ++ ;			  
    i ++ ) freq [ str [ i ] - 'a' ] ++ ;		      	}							      }								  
    for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    i < n ;						      	i < n ;							      i < n ;							  
    i ++ ) if ( freq [ str [ i ] - 'a' ] >= k ) cout << str [ 	i ++ ) {						      i ++ ) {							  
  }							      	  if ( freq [ str . charAt ( i ) - 'a' ] >= k ) {	    	if ( freq [ str . charAt ( i ) - 'a' ] >= k ) {		  
							      	    System . out . print ( str . charAt ( i ) ) ;	    	  System . out . println ( str . charAt ( i ) ) ;	  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	      COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	    COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES	  COUNT_POSSIBLE_PATHS_SOURCE_DESTINATION_EXACTLY_K_EDGES
--							      --							    --								  --
int countwalks ( int graph [ ] [ V ] , int u , int v , int k  int countwalks ( int graph [ ] [ ] , int u , int v , int k )  public static int countwalks ( int graph [ ] [ ] , int u , in script_not_found : None
  if ( k == 0 && u == v ) return 1 ;			      	if ( k == 0 && u == v ) return 1 ;			      if ( k == 0 && u == v ) return 1 ;			  
  if ( k == 1 && graph [ u ] [ v ] ) return 1 ;		      	if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ;	      if ( k == 1 && graph [ u ] [ v ] ) return 1 ;		  
  if ( k <= 0 ) return 0 ;				      	if ( k <= 0 ) return 0 ;				      if ( k <= 0 ) return 0 ;					  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < V ;						      	i < V ;							      i < V ;							  
  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks (  	i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks (    i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks (  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MIDDLE_ROW_COLUMN_MATRIX				      SUM_MIDDLE_ROW_COLUMN_MATRIX				    SUM_MIDDLE_ROW_COLUMN_MATRIX				  SUM_MIDDLE_ROW_COLUMN_MATRIX
--							      --							    --								  --
void middlesum ( int mat [ ] [ MAX ] , int n ) {	      static void middlesum ( int mat [ ] [ ] , int n ) {	    public static void middlesum ( int [ ] [ ] mat , int n ) {	  script_not_found : None
  int row_sum = 0 , col_sum = 0 ;			      	int row_sum = 0 , col_sum = 0 ;				      int rowSum = 0 , colSum = 0 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) row_sum += mat [ n / 2 ] [ i ] ;		      	i ++ ) row_sum += mat [ n / 2 ] [ i ] ;			      i ++ ) {							  
  cout << "Sum of middle row = " << row_sum << endl ;	      	System . out . println ( "Sum of middle row = " + row_sum ) 	rowSum += mat [ n / 2 ] [ i ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < n ;						      	i < n ;							      System . out . println ( "Sum of middle row = " + rowSum )  
  i ++ ) col_sum += mat [ i ] [ n / 2 ] ;		      	i ++ ) col_sum += mat [ i ] [ n / 2 ] ;			      for ( int i = 0 ;						  
  cout << "Sum of middle column = " << col_sum ;	      	System . out . println ( "Sum of middle column = " + col_su   i < n ;							  
}							      }								      i ++ ) {							  
							      								    	colSum += mat [ i ] [ n / 2 ] ;				  
							      								      }								  
							      								      System . out . println ( "Sum of middle column = " + colSum 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES	      COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES		    COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES		  COUNT_SUBSTRINGS_BINARY_STRING_CONTAINING_K_ONES
--							      --							    --								  --
int countOfSubstringWithKOnes ( string s , int K ) {	      static int countOfSubstringWithKOnes ( String s , int K ) {   public static int countOfSubstringWithKOnes ( String s , int  script_not_found : None
  int N = s . length ( ) ;				      	int N = s . length ( ) ;				      int N = s . length ( ) ;					  
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  int countOfOne = 0 ;					      	int countOfOne = 0 ;					      int countOfOne = 0 ;					  
  int freq [ N + 1 ] = {				      	int [ ] freq = new int [ N + 1 ] ;			      int [ ] freq = new int [ N + 1 ] ;			  
    0 }							      	freq [ 0 ] = 1 ;					      freq [ 0 ] = 1 ;						  
    ;							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    freq [ 0 ] = 1 ;					      	i < N ;							      i < N ;							  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) {							  
    i < N ;						      	  countOfOne += ( s . charAt ( i ) - '0' ) ;		    	countOfOne += ( s . charAt ( i ) - '0' ) ;		  
    i ++ ) {						      	  if ( countOfOne >= K ) {				    	if ( countOfOne >= K ) res += freq [ countOfOne - K ] ;	  
      countOfOne += ( s [ i ] - '0' ) ;			      	    res += freq [ countOfOne - K ] ;			    	freq [ countOfOne ] ++ ;				  
      if ( countOfOne >= K ) {				      	  }							      }								  
	res += freq [ countOfOne - K ] ;		      	  freq [ countOfOne ] ++ ;				      return res ;						  
      }							      	}							    }								  
      freq [ countOfOne ] ++ ;				      	return res ;						    								  
    }							      }								    								  
    return res ;					      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTISTAGE_GRAPH_SHORTEST_PATH				      MULTISTAGE_GRAPH_SHORTEST_PATH				    MULTISTAGE_GRAPH_SHORTEST_PATH				  MULTISTAGE_GRAPH_SHORTEST_PATH
--							      --							    --								  --
INT_MAX int shortestDist ( int graph [ N ] [ N ] ) {	      public static int shortestDist ( int [ ] [ ] graph ) {	    public static int shortestDist ( int graph [ ] [ ] ) {	  script_not_found : None
  int dist [ N ] ;					      	int [ ] dist = new int [ N ] ;				      int dist [ ] = new int [ N ] ;				  
  dist [ N - 1 ] = 0 ;					      	dist [ N - 1 ] = 0 ;					      dist [ N - 1 ] = 0 ;					  
  for ( int i = N - 2 ;					      	for ( int i = N - 2 ;					      for ( int i = N - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    dist [ i ] = INF ;					      	  dist [ i ] = INF ;					    	dist [ i ] = INF ;					  
    for ( int j = i ;					      	  for ( int j = i ;					    	for ( int j = i ;					  
    j < N ;						      	  j < N ;						    	j < N ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( graph [ i ] [ j ] == INF ) continue ;	      	    if ( graph [ i ] [ j ] == INF ) {			    	  if ( graph [ i ] [ j ] == INF ) continue ;		  
      dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dis 	      continue ;					    	  dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j  
    }							      	    }							    	}							  
  }							      	    dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j    }								  
  return dist [ 0 ] ;					      	  }							      return dist [ 0 ] ;					  
}							      	}							    }								  
							      	return dist [ 0 ] ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE   MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE   MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE	  MINIMUM_ROOMS_FOR_M_EVENTS_OF_N_BATCHES_WITH_GIVEN_SCHEDULE
--							      --							    --								  --
int findMinRooms ( string slots [ ] , int n , int m ) {	      static int findMinRooms ( String slots [ ] , int n , int m )  public static int findMinRooms ( String [ ] slots , int n , i script_not_found : None
  int counts [ m ] = {					      	int counts [ ] = new int [ m ] ;			      int [ ] counts = new int [ m ] ;				  
    0 }							      	for ( int i = 0 ;					      counts [ 0 ] = 0 ;					  
    ;							      	i < m ;							      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	i ++ ) counts [ i ] = 0 ;				      i < n ;							  
    i < n ;						      	for ( int i = 0 ;					      i ++ ) for ( int j = 0 ;					  
    i ++ ) for ( int j = 0 ;				      	i < n ;							      j < m ;							  
    j < m ;						      	i ++ ) for ( int j = 0 ;				      j ++ ) if ( slots [ i ] . charAt ( j ) == '1' ) counts [ j  
    j ++ ) if ( slots [ i ] [ j ] == '1' ) counts [ j ] ++ ;  	j < m ;							      return Arrays . binarySearch ( counts , m ) ;		  
    return * max_element ( counts , counts + m ) ;	      	j ++ ) if ( slots [ i ] . charAt ( j ) == '1' ) counts [ j  }								  
  }							      	int max = - 1 ;						    								  
							      	for ( int i = 0 ;					    								  
							      	i < m ;							    								  
							      	i ++ ) if ( max < counts [ i ] ) max = counts [ i ] ;	    								  
							      	return max ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STOOGE_SORT						      STOOGE_SORT						    STOOGE_SORT							  STOOGE_SORT
--							      --							    --								  --
void stoogesort ( int arr [ ] , int l , int h ) {	      static void stoogesort ( int arr [ ] , int l , int h ) {	    public static void stoogesort ( int arr [ ] , int l , int h ) error : STOOGE_SORT.java:32: error: incompatible t
  if ( l >= h ) return ;				      	if ( l >= h ) return ;					      if ( l >= h ) return ;					  ypes: int[] cannot be converted to Object[]	  Ar
  if ( arr [ l ] > arr [ h ] ) swap ( arr [ l ] , arr [ h ] ) 	if ( arr [ l ] > arr [ h ] ) {				      if ( arr [ l ] > arr [ h ] ) {				  rays . swap ( arr , l , h ) ;
  if ( h - l + 1 > 2 ) {				      	  int t = arr [ l ] ;					    	Arrays . swap ( arr , l , h ) ;				  ^ Note: Some messages have been simplified; recomp
    int t = ( h - l + 1 ) / 3 ;				      	  arr [ l ] = arr [ h ] ;				      }								  ile with -Xdiags:verbose to get full output 1 erro
    stoogesort ( arr , l , h - t ) ;			      	  arr [ h ] = t ;					      if ( h - l + 1 > 2 ) {					  r
    stoogesort ( arr , l + t , h ) ;			      	}							    	int t = ( h - l + 1 ) / 3 ;				  
    stoogesort ( arr , l , h - t ) ;			      	if ( h - l + 1 > 2 ) {					    	stoogesort ( arr , l , h - t ) ;			  
  }							      	  int t = ( h - l + 1 ) / 3 ;				    	stoogesort ( arr , l + t , h ) ;			  
}							      	  stoogesort ( arr , l , h - t ) ;			    	stoogesort ( arr , l , h - t ) ;			  
							      	  stoogesort ( arr , l + t , h ) ;			      }								  
							      	  stoogesort ( arr , l , h - t ) ;			    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			      FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1			    FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1				  FIND_NUMBER_OF_TRIANGLES_POSSIBLE_1
--							      --							    --								  --
void CountTriangles ( vector < int > A ) {		      static void CountTriangles ( int [ ] A ) {		    public static void countTriangles ( int [ ] A ) {		  script_not_found : None
  int n = A . size ( ) ;				      	int n = A . length ;					      int n = A . length ;					  
  sort ( A . begin ( ) , A . end ( ) ) ;		      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i >= 1 ;						      	i >= 1 ;						      i >= 1 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    int l = 0 , r = i - 1 ;				      	  int l = 0 , r = i - 1 ;				    	int l = 0 , r = i - 1 ;					  
    while ( l < r ) {					      	  while ( l < r ) {					    	while ( l < r ) {					  
      if ( A [ l ] + A [ r ] > A [ i ] ) {		      	    if ( A [ l ] + A [ r ] > A [ i ] ) {		    	  if ( A [ l ] + A [ r ] > A [ i ] ) {			  
	count += r - l ;				      	      count += r - l ;					    	    count += r - l ;					  
	r -- ;						      	      r -- ;						    	    r -- ;						  
      }							      	    }							    	  }							  
      else l ++ ;					      	    else {						    	  else {						  
    }							      	      l ++ ;						    	    l ++ ;						  
  }							      	    }							    	  }							  
  cout << "No of possible solutions: " << count ;	      	  }							    	}							  
}							      	}							      }								  
							      	System . out . print ( "No of possible solutions: " + count   System . out . println ( "No of possible solutions: " + cou 
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1		    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS_1
--							      --							    --								  --
void minheapify ( int a [ ] , int index ) {		      static void minheapify ( int [ ] a , int index ) {	    public static void minheapify ( int a [ ] , int index ) {	  script_not_found : None
  int small = index ;					      	int small = index ;					      int small = index ;					  
  int l = 2 * index + 1 ;				      	int l = 2 * index + 1 ;					      int l = 2 * index + 1 ;					  
  int r = 2 * index + 2 ;				      	int r = 2 * index + 2 ;					      int r = 2 * index + 2 ;					  
  if ( l < n && a [ l ] < a [ small ] ) small = l ;	      	if ( l < n && a [ l ] < a [ small ] ) small = l ;	      if ( l < n && a [ l ] < a [ small ] ) {			  
  if ( r < n && a [ r ] < a [ small ] ) small = r ;	      	if ( r < n && a [ r ] < a [ small ] ) small = r ;	    	small = l ;						  
  if ( small != index ) {				      	if ( small != index ) {					      }								  
    swap ( a [ small ] , a [ index ] ) ;		      	  int t = a [ small ] ;					      if ( r < n && a [ r ] < a [ small ] ) {			  
    minheapify ( a , small ) ;				      	  a [ small ] = a [ index ] ;				    	small = r ;						  
  }							      	  a [ index ] = t ;					      }								  
}							      	  minheapify ( a , small ) ;				      if ( small != index ) {					  
							      	}							    	Arrays . fill ( a , small , index ) ;			  
							      }								    	minheapify ( a , small ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE_1					      RECAMANS_SEQUENCE_1					    RECAMANS_SEQUENCE_1						  RECAMANS_SEQUENCE_1
--							      --							    --								  --
void recaman ( int n ) {				      static void recaman ( int n ) {				    public static void recaman ( int n ) {			  script_not_found : None
  if ( n <= 0 ) return ;				      	if ( n <= 0 ) return ;					      if ( n <= 0 ) return ;					  
  printf ( "%d, " , 0 ) ;				      	System . out . printf ( "%d, " , 0 ) ;			      System . out . print ( 0 + ", " ) ;			  
  unordered_set < int > s ;				      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  
  s . insert ( 0 ) ;					      	s . add ( 0 ) ;						      s . add ( 0 ) ;						  
  int prev = 0 ;					      	int prev = 0 ;						      int prev = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int curr = prev - i ;				      	  int curr = prev - i ;					    	int curr = prev - i ;					  
    if ( curr < 0 || s . find ( curr ) != s . end ( ) ) curr  	  if ( curr < 0 || s . contains ( curr ) ) curr = prev + i  	if ( curr < 0 || s . contains ( curr ) ) {		  
    s . insert ( curr ) ;				      	  s . add ( curr ) ;					    	  curr = prev + i ;					  
    printf ( "%d, " , curr ) ;				      	  System . out . printf ( "%d, " , curr ) ;		    	}							  
    prev = curr ;					      	  prev = curr ;						    	s . add ( curr ) ;					  
  }							      	}							    	System . out . print ( curr + ", " ) ;			  
}							      }								    	prev = curr ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS      COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS	    COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS	  COUNT_WAYS_DIVIDE_CIRCLE_USING_N_NON_INTERSECTING_CHORDS
--							      --							    --								  --
int chordCnt ( int A ) {				      static int chordCnt ( int A ) {				    public static int chordCnt ( int A ) {			  success : None
  int n = 2 * A ;					      	int n = 2 * A ;						      int n = 2 * A ;						  
  int dpArray [ n + 1 ] = {				      	int [ ] dpArray = new int [ n + 1 ] ;			      int [ ] dpArray = new int [ n + 1 ] ;			  
    0 }							      	dpArray [ 0 ] = 1 ;					      dpArray [ 0 ] = 1 ;					  
    ;							      	dpArray [ 2 ] = 1 ;					      dpArray [ 2 ] = 1 ;					  
    dpArray [ 0 ] = 1 ;					      	for ( int i = 4 ;					      for ( int i = 4 ;						  
    dpArray [ 2 ] = 1 ;					      	i <= n ;						      i <= n ;							  
    for ( int i = 4 ;					      	i += 2 ) {						      i += 2 ) {						  
    i <= n ;						      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    i += 2 ) {						      	  j < i - 1 ;						    	j < i - 1 ;						  
      for ( int j = 0 ;					      	  j += 2 ) {						    	j += 2 ) {						  
      j < i - 1 ;					      	    dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 - j  	  dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 - j  
      j += 2 ) {					      	  }							    	}							  
	dpArray [ i ] += ( dpArray [ j ] * dpArray [ i - 2 -  	}							      }								  
      }							      	return dpArray [ n ] ;					      return dpArray [ n ] ;					  
    }							      }								    }								  
    return dpArray [ n ] ;				      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE	      COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		    COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE		  COUNT_NUMBER_ISLANDS_EVERY_ISLAND_SEPARATED_LINE
--							      --							    --								  --
int countIslands ( int mat [ ] [ N ] ) {		      static int countIslands ( int mat [ ] [ ] , int m , int n ) { public static int countIslands ( int mat [ ] [ ] ) {	  script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < M ;						      	i < m ;							      i < M ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < N ;						      	  j < n ;						    	j < N ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( mat [ i ] [ j ] == 'X' ) {			      	    if ( mat [ i ] [ j ] == 'X' ) {			    	  if ( mat [ i ] [ j ] == 'X' ) {			  
	if ( ( i == 0 || mat [ i - 1 ] [ j ] == 'O' ) && ( j  	      if ( ( i == 0 || mat [ i - 1 ] [ j ] == 'O' ) && ( j  	    if ( ( i == 0 || mat [ i - 1 ] [ j ] == 'O' ) && ( j  
      }							      	    }							    	      count ++ ;					  
    }							      	  }							    	    }							  
  }							      	}							    	  }							  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1	      CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		    CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1		  CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER_1
--							      --							    --								  --
bool checkCorrectOrNot ( string s ) {			      static boolean checkCorrectOrNot ( String s ) {		    public static boolean checkCorrectOrNot ( String s ) {	  script_not_found : None
  int count [ MAX_CHAR ] = {				      	int [ ] count = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ s . length ( ) ] ;		  
    0 }							      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    ;							      	if ( n == 1 ) return true ;				      if ( n == 1 ) return true ;				  
    int n = s . length ( ) ;				      	for ( int i = 0 , j = n - 1 ;				      for ( int i = 0 , j = n - 1 ;				  
    if ( n == 1 ) return true ;				      	i < j ;							      i < j ;							  
    for ( int i = 0 , j = n - 1 ;			      	i ++ , j -- ) {						      i ++ , j -- ) {						  
    i < j ;						      	  count [ s . charAt ( i ) - 'a' ] ++ ;			    	count [ s . charAt ( i ) - 'a' ] ++ ;			  
    i ++ , j -- ) {					      	  count [ s . charAt ( j ) - 'a' ] -- ;			    	count [ s . charAt ( j ) - 'a' ] -- ;			  
      count [ s [ i ] - 'a' ] ++ ;			      	}							      }								  
      count [ s [ j ] - 'a' ] -- ;			      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    }							      	i < MAX_CHAR ;						      i < count . length ;					  
    for ( int i = 0 ;					      	i ++ ) if ( count [ i ] != 0 ) return false ;		      i ++ ) if ( count [ i ] != 0 ) return false ;		  
    i < MAX_CHAR ;					      	return true ;						      return true ;						  
    i ++ ) if ( count [ i ] != 0 ) return false ;	      }								    }								  
    return true ;					      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
JUMP_SEARCH						      JUMP_SEARCH						    JUMP_SEARCH							  JUMP_SEARCH
--							      --							    --								  --
int jumpSearch ( int arr [ ] , int x , int n ) {	      public static int jumpSearch ( int [ ] arr , int x ) {	    public static int jumpSearch ( int arr [ ] , int x , int n )  script_not_found : None
  int step = sqrt ( n ) ;				      	int n = arr . length ;					      int step = Math . sqrt ( n ) ;				  
  int prev = 0 ;					      	int step = ( int ) Math . floor ( Math . sqrt ( n ) ) ;	      int prev = 0 ;						  
  while ( arr [ min ( step , n ) - 1 ] < x ) {		      	int prev = 0 ;						      while ( arr [ Math . min ( step , n ) - 1 ] < x ) {	  
    prev = step ;					      	while ( arr [ Math . min ( step , n ) - 1 ] < x ) {	    	prev = step ;						  
    step += sqrt ( n ) ;				      	  prev = step ;						    	step += Math . sqrt ( n ) ;				  
    if ( prev >= n ) return - 1 ;			      	  step += ( int ) Math . floor ( Math . sqrt ( n ) ) ;	    	if ( prev >= n ) return - 1 ;				  
  }							      	  if ( prev >= n ) return - 1 ;				      }								  
  while ( arr [ prev ] < x ) {				      	}							      while ( arr [ prev ] < x ) {				  
    prev ++ ;						      	while ( arr [ prev ] < x ) {				    	prev ++ ;						  
    if ( prev == min ( step , n ) ) return - 1 ;	      	  prev ++ ;						    	if ( prev == Math . min ( step , n ) ) return - 1 ;	  
  }							      	  if ( prev == Math . min ( step , n ) ) return - 1 ;	      }								  
  if ( arr [ prev ] == x ) return prev ;		      	}							      if ( arr [ prev ] == x ) return prev ;			  
  return - 1 ;						      	if ( arr [ prev ] == x ) return prev ;			      return - 1 ;						  
}							      	return - 1 ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FITTING_SHELVES_PROBLEM					      FITTING_SHELVES_PROBLEM					    FITTING_SHELVES_PROBLEM					  FITTING_SHELVES_PROBLEM
--							      --							    --								  --
void minSpacePreferLarge ( int wall , int m , int n ) {	      static void minSpacePreferLarge ( int wall , int m , int n )  public static void minSpacePreferLarge ( int wall , int m , i script_not_found : None
  int num_m = 0 , num_n = 0 , min_empty = wall ;	      	int num_m = 0 , num_n = 0 , min_empty = wall ;		      int num_m = 0 , num_n = 0 , min_empty = wall ;		  
  int p = 0 , q = 0 , rem ;				      	int p = 0 , q = 0 , rem ;				      int p = 0 , q = 0 , rem ;					  
  while ( wall >= n ) {					      	while ( wall >= n ) {					      while ( wall >= n ) {					  
    p = wall / m ;					      	  p = wall / m ;					    	p = wall / m ;						  
    rem = wall % m ;					      	  rem = wall % m ;					    	rem = wall % m ;					  
    if ( rem <= min_empty ) {				      	  if ( rem <= min_empty ) {				    	if ( rem <= min_empty ) {				  
      num_m = p ;					      	    num_m = p ;						    	  num_m = p ;						  
      num_n = q ;					      	    num_n = q ;						    	  num_n = q ;						  
      min_empty = rem ;					      	    min_empty = rem ;					    	  min_empty = rem ;					  
    }							      	  }							    	}							  
    q += 1 ;						      	  q += 1 ;						    	q += 1 ;						  
    wall = wall - n ;					      	  wall = wall - n ;					    	wall = wall - n ;					  
  }							      	}							      }								  
  cout << num_m << " " << num_n << " " << min_empty << endl ; 	System . out . println ( num_m + " " + num_n + " " + min_em   System . out . println ( num_m + " " + num_n + " " + min_em 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		      COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1		    COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1			  COUNT_PAIRS_WHOSE_PRODUCTS_EXIST_IN_ARRAY_1
--							      --							    --								  --
int countPairs ( int arr [ ] , int n ) {		      static int countPairs ( int arr [ ] , int n ) {		    public static int countPairs ( int arr [ ] , int n ) {	  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  set < int > Hash ;					      	HashSet < Integer > Hash = new HashSet < > ( ) ;	      HashSet < Integer > Hash = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) Hash . insert ( arr [ i ] ) ;			      	i ++ ) {						      i ++ ) {							  
  for ( int i = 0 ;					      	  Hash . add ( arr [ i ] ) ;				    	Hash . add ( arr [ i ] ) ;				  
  i < n ;						      	}							      }								  
  i ++ ) {						      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    for ( int j = i + 1 ;				      	i < n ;							      i < n ;							  
    j < n ;						      	i ++ ) {						      i ++ ) {							  
    j ++ ) {						      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
      int product = arr [ i ] * arr [ j ] ;		      	  j < n ;						    	j < n ;							  
      if ( Hash . find ( product ) != Hash . end ( ) ) result 	  j ++ ) {						    	j ++ ) {						  
    }							      	    int product = arr [ i ] * arr [ j ] ;		    	  int product = arr [ i ] * arr [ j ] ;			  
  }							      	    if ( Hash . contains ( product ) ) {		    	  if ( Hash . contains ( product ) ) {			  
  return result ;					      	      result ++ ;					    	    result ++ ;						  
}							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return result ;						      return result ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT					      MAJORITY_ELEMENT						    MAJORITY_ELEMENT						  MAJORITY_ELEMENT
--							      --							    --								  --
void findMajority ( int arr [ ] , int n ) {		      static void findMajority ( int arr [ ] , int n ) {	    public static void findMajority ( int [ ] arr , int n ) {	  script_not_found : None
  int maxCount = 0 ;					      	int maxCount = 0 ;					      int maxCount = 0 ;					  
  int index = - 1 ;					      	int index = - 1 ;					      int index = - 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int count = 0 ;					      	  int count = 0 ;					    	int count = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ i ] == arr [ j ] ) count ++ ;		      	    if ( arr [ i ] == arr [ j ] ) count ++ ;		    	  if ( arr [ i ] == arr [ j ] ) {			  
    }							      	  }							    	    count ++ ;						  
    if ( count > maxCount ) {				      	  if ( count > maxCount ) {				    	  }							  
      maxCount = count ;				      	    maxCount = count ;					    	}							  
      index = i ;					      	    index = i ;						    	if ( count > maxCount ) {				  
    }							      	  }							    	  maxCount = count ;					  
  }							      	}							    	  index = i ;						  
  if ( maxCount > n / 2 ) cout << arr [ index ] << endl ;     	if ( maxCount > n / 2 ) System . out . println ( arr [ inde 	}							  
  else cout << "No Majority Element" << endl ;		      	else System . out . println ( "No Majority Element" ) ;	      }								  
}							      }								      if ( maxCount > n / 2 ) {					  
							      								    	System . out . println ( arr [ index ] ) ;		  
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "No Majority Element" ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL			  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL
--							      --							    --								  --
int substringConversions ( string str , int k , int b ) {     static void substringConversions ( String str , int k , int b public static int substringConversions ( String str , int k , script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i + k <= str . size ( ) ;				      	i + k <= str . length ( ) ;				      i + k <= str . length ( ) ;				  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    string sub = str . substr ( i , k ) ;		      	  String sub = str . substring ( i , i + k ) ;		    	String sub = str . substring ( i , i + k ) ;		  
    int sum = 0 , counter = 0 ;				      	  int sum = 0 , counter = 0 ;				    	int sum = 0 , counter = 0 ;				  
    for ( int i = sub . size ( ) - 1 ;			      	  for ( int j = sub . length ( ) - 1 ;			    	for ( int i = sub . length ( ) - 1 ;			  
    i >= 0 ;						      	  j >= 0 ;						    	i >= 0 ;						  
    i -- ) {						      	  j -- ) {						    	i -- ) {						  
      sum = sum + ( ( sub . at ( i ) - '0' ) * pow ( b , coun 	    sum = ( int ) ( sum + ( ( sub . charAt ( j ) - '0' ) *  	  sum = sum + ( ( sub . charAt ( i ) - '0' ) * Math . pow 
      counter ++ ;					      	    counter ++ ;					    	  counter ++ ;						  
    }							      	  }							    	}							  
    cout << sum << " " ;				      	  System . out . print ( sum + " " ) ;			    	System . out . print ( sum + " " ) ;			  
  }							      	}							      }								  
}							      }								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR LONGEST_ALTERNATING_SUB_ARRAY_STARTING_EVERY_INDEX_BINARY_ARR
--							      --							    --								  --
void alternateSubarray ( bool arr [ ] , int n ) {	      static void alternateSubarray ( boolean arr [ ] , int n ) {   public static void alternateSubarray ( boolean [ ] arr , int  script_not_found : None
  int len [ n ] ;					      	int len [ ] = new int [ n ] ;				      int len [ ] = new int [ n ] ;				  
  len [ n - 1 ] = 1 ;					      	len [ n - 1 ] = 1 ;					      len [ n - 1 ] = 1 ;					  
  for ( int i = n - 2 ;					      	for ( int i = n - 2 ;					      for ( int i = n - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  -- i ) {						      	-- i ) {						      -- i ) {							  
    if ( arr [ i ] ^ arr [ i + 1 ] == 1 ) len [ i ] = len [ i 	  if ( arr [ i ] ^ arr [ i + 1 ] == true ) len [ i ] = len  	if ( arr [ i ] ^ arr [ i + 1 ] == 1 ) {			  
    else len [ i ] = 1 ;				      	  else len [ i ] = 1 ;					    	  len [ i ] = len [ i + 1 ] + 1 ;			  
  }							      	}							    	}							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	else {							  
  i < n ;						      	i < n ;							    	  len [ i ] = 1 ;					  
  ++ i ) cout << len [ i ] << " " ;			      	++ i ) System . out . print ( len [ i ] + " " ) ;	    	}							  
}							      }								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      ++ i ) {							  
							      								    	System . out . print ( len [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI CHECK_IF_A_GIVEN_ARRAY_CAN_REPRESENT_PREORDER_TRAVERSAL_OF_BI
--							      --							    --								  --
bool canRepresentBST ( int pre [ ] , int n ) {		      boolean canRepresentBST ( int pre [ ] , int n ) {		    public static boolean canRepresentBST ( int pre [ ] , int n ) success : None
  stack < int > s ;					      	Stack < Integer > s = new Stack < Integer > ( ) ;	      Stack < Integer > s = new Stack < > ( ) ;			  
  int root = INT_MIN ;					      	int root = Integer . MIN_VALUE ;			      int root = Integer . MIN_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( pre [ i ] < root ) return false ;		      	  if ( pre [ i ] < root ) {				    	if ( pre [ i ] < root ) {				  
    while ( ! s . empty ( ) && s . top ( ) < pre [ i ] ) {    	    return false ;					    	  return false ;					  
      root = s . top ( ) ;				      	  }							    	}							  
      s . pop ( ) ;					      	  while ( ! s . empty ( ) && s . peek ( ) < pre [ i ] ) {   	while ( ! s . isEmpty ( ) && s . peek ( ) < pre [ i ] ) { 
    }							      	    root = s . peek ( ) ;				    	  root = s . peek ( ) ;					  
    s . push ( pre [ i ] ) ;				      	    s . pop ( ) ;					    	  s . pop ( ) ;						  
  }							      	  }							    	}							  
  return true ;						      	  s . push ( pre [ i ] ) ;				    	s . push ( pre [ i ] ) ;				  
}							      	}							      }								  
							      	return true ;						      return true ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		      DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		    DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM		  DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM
--							      --							    --								  --
int knapSack ( int W , int wt [ ] , int val [ ] , int n ) {   static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int wt [ ] , int val [ ] script_not_found : None
  if ( n == 0 || W == 0 ) return 0 ;			      	if ( n == 0 || W == 0 ) return 0 ;			      if ( n == 0 || W == 0 ) return 0 ;			  
  if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n  	if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n    if ( wt [ n - 1 ] > W ) return knapSack ( W , wt , val , n  
  else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1 	else return max ( val [ n - 1 ] + knapSack ( W - wt [ n - 1   else return Math . max ( val [ n - 1 ] + knapSack ( W - wt  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY LONGEST_ALTERNATING_POSITIVE_NEGATIVE_SUBARRAY_STARTING_EVERY
--							      --							    --								  --
void longestAlternating ( int arr [ ] , int n ) {	      public static void longestAlternating ( int arr [ ] , int n ) public static void longestAlternating ( int arr [ ] , int n ) script_not_found : None
  int count [ n ] ;					      	int [ ] count = new int [ n ] ;				      int count [ ] = new int [ n ] ;				  
  count [ n - 1 ] = 1 ;					      	count [ n - 1 ] = 1 ;					      count [ n - 1 ] = 1 ;					  
  for ( int i = n - 2 ;					      	for ( int i = n - 2 ;					      for ( int i = n - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( arr [ i ] * arr [ i + 1 ] < 0 ) count [ i ] = count  	  if ( arr [ i ] * arr [ i + 1 ] < 0 ) count [ i ] = count  	if ( arr [ i ] * arr [ i + 1 ] < 0 ) {			  
    else count [ i ] = 1 ;				      	  else count [ i ] = 1 ;				    	  count [ i ] = count [ i + 1 ] + 1 ;			  
  }							      	}							    	}							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	else {							  
  i < n ;						      	i < n ;							    	  count [ i ] = 1 ;					  
  i ++ ) cout << count [ i ] << " " ;			      	i ++ ) System . out . print ( count [ i ] + " " ) ;	    	}							  
}							      }								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( count [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION			      SORTING_USING_TRIVIAL_HASH_FUNCTION			    SORTING_USING_TRIVIAL_HASH_FUNCTION				  SORTING_USING_TRIVIAL_HASH_FUNCTION
--							      --							    --								  --
void sortUsingHash ( int a [ ] , int n ) {		      static void sortUsingHash ( int a [ ] , int n ) {		    public static void sortUsingHash ( int a [ ] , int n ) {	  script_not_found : None
  int max = * std :: max_element ( a , a + n ) ;	      	int max = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ;    int max = a . length * Math . max ( a . length , n ) ;	  
  int hash [ max + 1 ] = {				      	int hash [ ] = new int [ max + 1 ] ;			      int hash [ ] = new int [ max + 1 ] ;			  
    0 }							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ;							      	i < n ;							      i < n ;							  
    for ( int i = 0 ;					      	i ++ ) hash [ a [ i ] ] += 1 ;				      i ++ ) {							  
    i < n ;						      	for ( int i = 0 ;					    	hash [ a [ i ] ] += 1 ;					  
    i ++ ) hash [ a [ i ] ] += 1 ;			      	i <= max ;						      }								  
    for ( int i = 0 ;					      	i ++ ) {						      for ( int i = 0 ;						  
    i <= max ;						      	  if ( hash [ i ] != 0 ) {				      i <= max ;						  
    i ++ ) {						      	    for ( int j = 0 ;					      i ++ ) {							  
      if ( hash [ i ] ) {				      	    j < hash [ i ] ;					    	if ( hash [ i ] != 0 ) {				  
	for ( int j = 0 ;				      	    j ++ ) {						    	  for ( int j = 0 ;					  
	j < hash [ i ] ;				      	      System . out . print ( i + " " ) ;		    	  j < hash [ i ] ;					  
	j ++ ) {					      	    }							    	  j ++ ) {						  
	  cout << i << " " ;				      	  }							    	    System . out . print ( i + " " ) ;			  
	}						      	}							    	  }							  
      }							      }								    	}							  
    }							      								      }								  
  }							      								    }								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PASCAL_TRIANGLE						      PASCAL_TRIANGLE						    PASCAL_TRIANGLE						  PASCAL_TRIANGLE
--							      --							    --								  --
void printPascal ( int n ) {				      public static void printPascal ( int n ) {		    public static void printPascal ( int n ) {			  script_not_found : None
  int arr [ n ] [ n ] ;					      	int [ ] [ ] arr = new int [ n ] [ n ] ;			      int arr [ ] [ ] = new int [ n ] [ n ] ;			  
  for ( int line = 0 ;					      	for ( int line = 0 ;					      for ( int line = 0 ;					  
  line < n ;						      	line < n ;						      line < n ;						  
  line ++ ) {						      	line ++ ) {						      line ++ ) {						  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i <= line ;						      	  i <= line ;						    	i <= line ;						  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      if ( line == i || i == 0 ) arr [ line ] [ i ] = 1 ;     	    if ( line == i || i == 0 ) arr [ line ] [ i ] = 1 ;	    	  if ( line == i || i == 0 ) {				  
      else arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] +  	    else arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] +  	    arr [ line ] [ i ] = 1 ;				  
      cout << arr [ line ] [ i ] << " " ;		      	    System . out . print ( arr [ line ] [ i ] ) ;	    	  }							  
    }							      	  }							    	  else {						  
    cout << "\n" ;					      	  System . out . println ( "" ) ;			    	    arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] + arr 
  }							      	}							    	  }							  
}							      }								    	  System . out . print ( arr [ line ] [ i ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( "\n" ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_TRIANGLE				      MAXIMUM_PATH_SUM_TRIANGLE					    MAXIMUM_PATH_SUM_TRIANGLE					  MAXIMUM_PATH_SUM_TRIANGLE
--							      --							    --								  --
int maxPathSum ( int tri [ ] [ N ] , int m , int n ) {	      static int maxPathSum ( int tri [ ] [ ] , int m , int n ) {   public static int maxPathSum ( int tri [ ] [ ] , int m , int  script_not_found : None
  for ( int i = m - 1 ;					      	for ( int i = m - 1 ;					      for ( int i = m - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= i ;						      	  j <= i ;						    	j <= i ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tr 	    if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tr 	  if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) {  
      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;	      	    else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;	    	    tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ;		  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return tri [ 0 ] [ 0 ] ;				      	return tri [ 0 ] [ 0 ] ;				    	    tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;	  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return tri [ 0 ] [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		      FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		    FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS		  FIND_THE_MINIMUM_DISTANCE_BETWEEN_TWO_NUMBERS
--							      --							    --								  --
int minDist ( int arr [ ] , int n , int x , int y ) {	      int minDist ( int arr [ ] , int n , int x , int y ) {	    public static int minDist ( int arr [ ] , int n , int x , int success : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  int min_dist = INT_MAX ;				      	int min_dist = Integer . MAX_VALUE ;			      int minDist = Integer . MAX_VALUE ;			  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( j = i + 1 ;					      	  for ( j = i + 1 ;					    	for ( j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i 	    if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i 	  if ( ( x == arr [ i ] && y == arr [ j ] || y == arr [ i 
	min_dist = abs ( i - j ) ;			      	  }							    	}							  
      }							      	}							      }								  
    }							      	return min_dist ;					      return minDist ;						  
  }							      }								    }								  
  return min_dist ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	      HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	    HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS	  HOW_TO_PRINT_MAXIMUM_NUMBER_OF_A_USING_GIVEN_FOUR_KEYS
--							      --							    --								  --
int findoptimal ( int N ) {				      static int findoptimal ( int N ) {			    public static int findoptimal ( int N ) {			  success : None
  if ( N <= 6 ) return N ;				      	if ( N <= 6 ) return N ;				      if ( N <= 6 ) return N ;					  
  int screen [ N ] ;					      	int [ ] screen = new int [ N ] ;			      int [ ] screen = new int [ N ] ;				  
  int b ;						      	int b ;							      int b ;							  
  int n ;						      	int n ;							      int n ;							  
  for ( n = 1 ;						      	for ( n = 1 ;						      for ( n = 1 ;						  
  n <= 6 ;						      	n <= 6 ;						      n <= 6 ;							  
  n ++ ) screen [ n - 1 ] = n ;				      	n ++ ) screen [ n - 1 ] = n ;				      n ++ ) {							  
  for ( n = 7 ;						      	for ( n = 7 ;						    	screen [ n - 1 ] = n ;					  
  n <= N ;						      	n <= N ;						      }								  
  n ++ ) {						      	n ++ ) {						      for ( n = 7 ;						  
    screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * 	  screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Ma   n <= N ;							  
  }							      	}							      n ++ ) {							  
  return screen [ N - 1 ] ;				      	return screen [ N - 1 ] ;				    	screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Ma 
}							      }								      }								  
							      								      return screen [ N - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		      PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		    PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N		  PRINT_POSSIBLE_SUMS_CONSECUTIVE_NUMBERS_SUM_N
--							      --							    --								  --
void findConsecutive ( int N ) {			      static void findConsecutive ( int N ) {			    public static void findConsecutive ( int N ) {		  script_not_found : None
  int start = 1 , end = ( N + 1 ) / 2 ;			      	int start = 1 ;						      int start = 1 , end = ( N + 1 ) / 2 ;			  
  while ( start < end ) {				      	int end = ( N + 1 ) / 2 ;				      while ( start < end ) {					  
    int sum = 0 ;					      	while ( start < end ) {					    	int sum = 0 ;						  
    for ( int i = start ;				      	  int sum = 0 ;						    	for ( int i = start ;					  
    i <= end ;						      	  for ( int i = start ;					    	i <= end ;						  
    i ++ ) {						      	  i <= end ;						    	i ++ ) {						  
      sum = sum + i ;					      	  i ++ ) {						    	  sum = sum + i ;					  
      if ( sum == N ) {					      	    sum = sum + i ;					    	  if ( sum == N ) {					  
	for ( int j = start ;				      	    if ( sum == N ) {					    	    for ( int j = start ;				  
	j <= i ;					      	      for ( int j = start ;				    	    j <= i ;						  
	j ++ ) printf ( "%d " , j ) ;			      	      j <= i ;						    	    j ++ ) {						  
	printf ( "\n" ) ;				      	      j ++ ) System . out . print ( j + " " ) ;		    	      System . out . print ( j + " " ) ;		  
	break ;						      	      System . out . println ( ) ;			    	    }							  
      }							      	      break ;						    	    System . out . println ( ) ;			  
      if ( sum > N ) break ;				      	    }							    	    break ;						  
    }							      	    if ( sum > N ) break ;				    	  }							  
    sum = 0 ;						      	  }							    	  if ( sum > N ) break ;				  
    start ++ ;						      	  sum = 0 ;						    	}							  
  }							      	  start ++ ;						    	sum = 0 ;						  
}							      	}							    	start ++ ;						  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_REVERSE_STRING_REMOVING_VOWELS			      PRINT_REVERSE_STRING_REMOVING_VOWELS			    PRINT_REVERSE_STRING_REMOVING_VOWELS			  PRINT_REVERSE_STRING_REMOVING_VOWELS
--							      --							    --								  --
void replaceOriginal ( string s , int n ) {		      static void replaceOriginal ( String s , int n ) {	    public static void replaceOriginal ( String s , int n ) {	  script_not_found : None
  string r ( n , ' ' ) ;				      	char r [ ] = new char [ n ] ;				      char [ ] r = new char [ n ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    r [ i ] = s [ n - 1 - i ] ;				      	  r [ i ] = s . charAt ( n - 1 - i ) ;			    	r [ i ] = s . charAt ( n - 1 - i ) ;			  
    if ( s [ i ] != 'a' && s [ i ] != 'e' && s [ i ] != 'i' & 	  if ( s . charAt ( i ) != 'a' && s . charAt ( i ) != 'e' & 	if ( s . charAt ( i ) != 'a' && s . charAt ( i ) != 'e' & 
      cout << r [ i ] ;					      	    System . out . print ( r [ i ] ) ;			      }								  
    }							      	  }							      System . out . println ( ) ;				  
  }							      	}							    }								  
  cout << endl ;					      	System . out . println ( "" ) ;				    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENT_ELEMENT_ARRAY_1				      FREQUENT_ELEMENT_ARRAY_1					    FREQUENT_ELEMENT_ARRAY_1					  FREQUENT_ELEMENT_ARRAY_1
--							      --							    --								  --
int mostFrequent ( int arr [ ] , int n ) {		      static int mostFrequent ( int arr [ ] , int n ) {		    public static int mostFrequent ( int arr [ ] , int n ) {	  script_not_found : None
  unordered_map < int , int > hash ;			      	Map < Integer , Integer > hp = new HashMap < Integer , Inte   HashMap < Integer , Integer > hash = new HashMap < > ( ) ;  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) hash [ arr [ i ] ] ++ ;			      	i ++ ) {						      i ++ ) {							  
  int max_count = 0 , res = - 1 ;			      	  int key = arr [ i ] ;					    	hash . put ( arr [ i ] , ++ i ) ;			  
  for ( auto i : hash ) {				      	  if ( hp . containsKey ( key ) ) {			      }								  
    if ( max_count < i . second ) {			      	    int freq = hp . get ( key ) ;			      int maxCount = 0 , res = - 1 ;				  
      res = i . first ;					      	    freq ++ ;						      for ( HashMap . Entry < Integer , Integer > i : hash . entr 
      max_count = i . second ;				      	    hp . put ( key , freq ) ;				    	if ( maxCount < i . getValue ( ) ) {			  
    }							      	  }							    	  res = i . getKey ( ) ;				  
  }							      	  else {						    	  maxCount = i . getValue ( ) ;				  
  return res ;						      	    hp . put ( key , 1 ) ;				    	}							  
}							      	  }							      }								  
							      	}							      return res ;						  
							      	int max_count = 0 , res = - 1 ;				    }								  
							      	for ( Entry < Integer , Integer > val : hp . entrySet ( ) ) 								  
							      	  if ( max_count < val . getValue ( ) ) {		    								  
							      	    res = val . getKey ( ) ;				    								  
							      	    max_count = val . getValue ( ) ;			    								  
							      	  }							    								  
							      	}							    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BRESENHAMS_LINE_GENERATION_ALGORITHM			      BRESENHAMS_LINE_GENERATION_ALGORITHM			    BRESENHAMS_LINE_GENERATION_ALGORITHM			  BRESENHAMS_LINE_GENERATION_ALGORITHM
--							      --							    --								  --
void bresenham ( int x1 , int y1 , int x2 , int y2 ) {	      static void bresenham ( int x1 , int y1 , int x2 , int y2 ) { public static void bresenham ( int x1 , int y1 , int x2 , int script_not_found : None
  int m_new = 2 * ( y2 - y1 ) ;				      	int m_new = 2 * ( y2 - y1 ) ;				      int m_new = 2 * ( y2 - y1 ) ;				  
  int slope_error_new = m_new - ( x2 - x1 ) ;		      	int slope_error_new = m_new - ( x2 - x1 ) ;		      int slope_error_new = m_new - ( x2 - x1 ) ;		  
  for ( int x = x1 , y = y1 ;				      	for ( int x = x1 , y = y1 ;				      for ( int x = x1 , y = y1 ;				  
  x <= x2 ;						      	x <= x2 ;						      x <= x2 ;							  
  x ++ ) {						      	x ++ ) {						      x ++ ) {							  
    cout << "(" << x << "," << y << ")\n" ;		      	  System . out . print ( "(" + x + "," + y + ")\n" ) ;	    	System . out . println ( "(" + x + "," + y + ")" ) ;	  
    slope_error_new += m_new ;				      	  slope_error_new += m_new ;				    	slope_error_new += m_new ;				  
    if ( slope_error_new >= 0 ) {			      	  if ( slope_error_new >= 0 ) {				    	if ( slope_error_new >= 0 ) {				  
      y ++ ;						      	    y ++ ;						    	  y ++ ;						  
      slope_error_new -= 2 * ( x2 - x1 ) ;		      	    slope_error_new -= 2 * ( x2 - x1 ) ;		    	  slope_error_new -= 2 * ( x2 - x1 ) ;			  
    }							      	  }							    	}							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_BRACKET_NUMBER					      PRINT_BRACKET_NUMBER					    PRINT_BRACKET_NUMBER					  PRINT_BRACKET_NUMBER
--							      --							    --								  --
void printBracketNumber ( string exp , int n ) {	      static void printBracketNumber ( String exp , int n ) {	    public static void printBracketNumber ( String exp , int n )  script_not_found : None
  int left_bnum = 1 ;					      	int left_bnum = 1 ;					      int leftBnum = 1 ;					  
  stack < int > right_bnum ;				      	Stack < Integer > right_bnum = new Stack < Integer > ( ) ;    Stack < Integer > rightBnum = new Stack < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( exp [ i ] == '(' ) {				      	  if ( exp . charAt ( i ) == '(' ) {			    	if ( exp . charAt ( i ) == '(' ) {			  
      cout << left_bnum << " " ;			      	    System . out . print ( left_bnum + " " ) ;		    	  System . out . print ( leftBnum + " " ) ;		  
      right_bnum . push ( left_bnum ) ;			      	    right_bnum . push ( left_bnum ) ;			    	  rightBnum . push ( leftBnum ) ;			  
      left_bnum ++ ;					      	    left_bnum ++ ;					    	  leftBnum ++ ;						  
    }							      	  }							    	}							  
    else if ( exp [ i ] == ')' ) {			      	  else if ( exp . charAt ( i ) == ')' ) {		    	else if ( exp . charAt ( i ) == ')' ) {			  
      cout << right_bnum . top ( ) << " " ;		      	    System . out . print ( right_bnum . peek ( ) + " " ) ;  	  System . out . print ( rightBnum . pop ( ) + " " ) ;	  
      right_bnum . pop ( ) ;				      	    right_bnum . pop ( ) ;				    	  rightBnum . pop ( ) ;					  
    }							      	  }							    	}							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			      MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			    MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1			  MINIMUM_COST_SORT_MATRIX_NUMBERS_0_N2_1
--							      --							    --								  --
int calculateEnergy ( int mat [ SIZE ] [ SIZE ] , int n ) {   public static int calculateEnergy ( int mat [ ] [ ] , int n ) public static int calculateEnergy ( int mat [ ] [ ] , int n ) success : identical to gold
  int i_des , j_des , q ;				      	int i_des , j_des , q ;					      int i_des , j_des , q ;					  
  int tot_energy = 0 ;					      	int tot_energy = 0 ;					      int tot_energy = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      q = mat [ i ] [ j ] / n ;				      	    q = mat [ i ] [ j ] / n ;				    	  q = mat [ i ] [ j ] / n ;				  
      i_des = q ;					      	    i_des = q ;						    	  i_des = q ;						  
      j_des = mat [ i ] [ j ] - ( n * q ) ;		      	    j_des = mat [ i ] [ j ] - ( n * q ) ;		    	  j_des = mat [ i ] [ j ] - ( n * q ) ;			  
      tot_energy += abs ( i_des - i ) + abs ( j_des - j ) ;   	    tot_energy += Math . abs ( i_des - i ) + Math . abs ( j 	  tot_energy += Math . abs ( i_des - i ) + Math . abs ( j 
    }							      	  }							    	}							  
  }							      	}							      }								  
  return tot_energy ;					      	return tot_energy ;					      return tot_energy ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME		      COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME			    COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME			  COUNT_NUMBER_WAYS_REACH_GIVEN_SCORE_GAME
--							      --							    --								  --
int count ( int n ) {					      static int count ( int n ) {				    public static int count ( int n ) {				  success : None
  int table [ n + 1 ] , i ;				      	int table [ ] = new int [ n + 1 ] , i ;			      int table [ ] = new int [ n + 1 ] , i ;			  
  for ( int j = 0 ;					      	Arrays . fill ( table , 0 ) ;				      for ( int j = 0 ;						  
  j < n + 1 ;						      	table [ 0 ] = 1 ;					      j < n + 1 ;						  
  j ++ ) table [ j ] = 0 ;				      	for ( i = 3 ;						      j ++ ) {							  
  table [ 0 ] = 1 ;					      	i <= n ;						    	table [ j ] = 0 ;					  
  for ( i = 3 ;						      	i ++ ) table [ i ] += table [ i - 3 ] ;			      }								  
  i <= n ;						      	for ( i = 5 ;						      table [ 0 ] = 1 ;						  
  i ++ ) table [ i ] += table [ i - 3 ] ;		      	i <= n ;						      for ( i = 3 ;						  
  for ( i = 5 ;						      	i ++ ) table [ i ] += table [ i - 5 ] ;			      i <= n ;							  
  i <= n ;						      	for ( i = 10 ;						      i ++ ) {							  
  i ++ ) table [ i ] += table [ i - 5 ] ;		      	i <= n ;						    	table [ i ] += table [ i - 3 ] ;			  
  for ( i = 10 ;					      	i ++ ) table [ i ] += table [ i - 10 ] ;		      }								  
  i <= n ;						      	return table [ n ] ;					      for ( i = 5 ;						  
  i ++ ) table [ i ] += table [ i - 10 ] ;		      }								      i <= n ;							  
  return table [ n ] ;					      								      i ++ ) {							  
}							      								    	table [ i ] += table [ i - 5 ] ;			  
							      								      }								  
							      								      for ( i = 10 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	table [ i ] += table [ i - 10 ] ;			  
							      								      }								  
							      								      return table [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY  DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY  DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY  DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY
--							      --							    --								  --
int findDiff ( int arr [ ] , int n ) {			      static int findDiff ( int arr [ ] , int n ) {		    public static int findDiff ( int [ ] arr , int n ) {	  success : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int count = 0 , max_count = 0 , min_count = n ;	      	int count = 0 , max_count = 0 , min_count = n ;		      int count = 0 , maxCount = 0 , minCount = n ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < ( n - 1 ) ;					      	i < ( n - 1 ) ;						      i < ( n - 1 ) ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == arr [ i + 1 ] ) {			      	  if ( arr [ i ] == arr [ i + 1 ] ) {			    	if ( arr [ i ] == arr [ i + 1 ] ) {			  
      count += 1 ;					      	    count += 1 ;					    	  count += 1 ;						  
      continue ;					      	    continue ;						    	  continue ;						  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      max_count = max ( max_count , count ) ;		      	    max_count = Math . max ( max_count , count ) ;	    	  maxCount = Math . max ( maxCount , count ) ;		  
      min_count = min ( min_count , count ) ;		      	    min_count = Math . min ( min_count , count ) ;	    	  minCount = Math . min ( minCount , count ) ;		  
      count = 0 ;					      	    count = 0 ;						    	  count = 0 ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return ( max_count - min_count ) ;			      	return ( max_count - min_count ) ;			      return ( maxCount - minCount ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE			      CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE			    CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE			  CHECK_IF_ARRAY_ELEMENTS_ARE_CONSECUTIVE
--							      --							    --								  --
bool areConsecutive ( int arr [ ] , int n ) {		      boolean areConsecutive ( int arr [ ] , int n ) {		    public static boolean areConsecutive ( int arr [ ] , int n )  script_not_found : None
  if ( n < 1 ) return false ;				      	if ( n < 1 ) return false ;				      if ( n < 1 ) return false ;				  
  int min = getMin ( arr , n ) ;			      	int min = getMin ( arr , n ) ;				      int min = getMin ( arr , n ) ;				  
  int max = getMax ( arr , n ) ;			      	int max = getMax ( arr , n ) ;				      int max = getMax ( arr , n ) ;				  
  if ( max - min + 1 == n ) {				      	if ( max - min + 1 == n ) {				      if ( max - min + 1 == n ) {				  
    bool * visited = ( bool * ) calloc ( n , sizeof ( bool )  	  boolean visited [ ] = new boolean [ n ] ;		    	boolean [ ] visited = new boolean [ n ] ;		  
    int i ;						      	  int i ;						    	int i ;							  
    for ( i = 0 ;					      	  for ( i = 0 ;						    	for ( i = 0 ;						  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      if ( visited [ arr [ i ] - min ] != false ) return fals 	    if ( visited [ arr [ i ] - min ] != false ) return fals 	  if ( visited [ arr [ i ] - min ] != false ) return fals 
      visited [ arr [ i ] - min ] = true ;		      	    visited [ arr [ i ] - min ] = true ;		    	  visited [ arr [ i ] - min ] = true ;			  
    }							      	  }							    	}							  
    return true ;					      	  return true ;						    	return true ;						  
  }							      	}							      }								  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHIFT_MATRIX_ELEMENTS_K					      SHIFT_MATRIX_ELEMENTS_K					    SHIFT_MATRIX_ELEMENTS_K					  SHIFT_MATRIX_ELEMENTS_K
--							      --							    --								  --
void shiftMatrixByK ( int mat [ N ] [ N ] , int k ) {	      static void shiftMatrixByK ( int [ ] [ ] mat , int k ) {	    public static void shiftMatrixByK ( int [ ] [ ] mat , int k ) script_not_found : None
  if ( k > N ) {					      	if ( k > N ) {						      if ( k > N ) {						  
    cout << "shifting is not possible" << endl ;	      	  System . out . print ( "Shifting is" + " not possible" )  	System . out . println ( "shifting is not possible" ) ;	  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  int j = 0 ;						      	int j = 0 ;						      int j = 0 ;						  
  while ( j < N ) {					      	while ( j < N ) {					      while ( j < N ) {						  
    for ( int i = k ;					      	  for ( int i = k ;					    	for ( int i = k ;					  
    i < N ;						      	  i < N ;						    	i < N ;							  
    i ++ ) cout << mat [ j ] [ i ] << " " ;		      	  i ++ ) System . out . print ( mat [ j ] [ i ] + " " ) ;   	i ++ ) {						  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	  System . out . print ( mat [ j ] [ i ] + " " ) ;	  
    i < k ;						      	  i < k ;						    	}							  
    i ++ ) cout << mat [ j ] [ i ] << " " ;		      	  i ++ ) System . out . print ( mat [ j ] [ i ] + " " ) ;   	for ( int i = 0 ;					  
    cout << endl ;					      	  System . out . println ( ) ;				    	i < k ;							  
    j ++ ;						      	  j ++ ;						    	i ++ ) {						  
  }							      	}							    	  System . out . print ( mat [ j ] [ i ] + " " ) ;	  
}							      }								    	}							  
							      								    	System . out . println ( ) ;				  
							      								    	j ++ ;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1	      COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		    COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1		  COUNT_INVERSIONS_OF_SIZE_THREE_IN_A_GIVE_ARRAY_1
--							      --							    --								  --
int getInvCount ( int arr [ ] , int n ) {		      int getInvCount ( int arr [ ] , int n ) {			    public static int getInvCount ( int arr [ ] , int n ) {	  success : None
  int invcount = 0 ;					      	int invcount = 0 ;					      int invcount = 0 ;					  
  for ( int i = 1 ;					      	for ( int i = 0 ;					      for ( int i = 1 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int small = 0 ;					      	  int small = 0 ;					    	int small = 0 ;						  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;	      	  j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;	    	j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;		  
    int great = 0 ;					      	  int great = 0 ;					    	int great = 0 ;						  
    for ( int j = i - 1 ;				      	  for ( int j = i - 1 ;					    	for ( int j = i - 1 ;					  
    j >= 0 ;						      	  j >= 0 ;						    	j >= 0 ;						  
    j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;	      	  j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;	    	j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;		  
    invcount += great * small ;				      	  invcount += great * small ;				    	invcount += great * small ;				  
  }							      	}							      }								  
  return invcount ;					      	return invcount ;					      return invcount ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_ COUNT_OF_N_DIGIT_NUMBERS_WHOSE_SUM_OF_DIGITS_EQUALS_TO_GIVEN_
--							      --							    --								  --
void findCount ( int n , int sum ) {			      private static void findCount ( int n , int sum ) {	    public static void findCount ( int n , int sum ) {		  script_not_found : None
  int start = pow ( 10 , n - 1 ) ;			      	int start = ( int ) Math . pow ( 10 , n - 1 ) ;		      int start = Math . pow ( 10 , n - 1 ) ;			  
  int end = pow ( 10 , n ) - 1 ;			      	int end = ( int ) Math . pow ( 10 , n ) - 1 ;		      int end = Math . pow ( 10 , n ) - 1 ;			  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int i = start ;					      	int i = start ;						      int i = start ;						  
  while ( i <= end ) {					      	while ( i < end ) {					      while ( i <= end ) {					  
    int cur = 0 ;					      	  int cur = 0 ;						    	int cur = 0 ;						  
    int temp = i ;					      	  int temp = i ;					    	int temp = i ;						  
    while ( temp != 0 ) {				      	  while ( temp != 0 ) {					    	while ( temp != 0 ) {					  
      cur += temp % 10 ;				      	    cur += temp % 10 ;					    	  cur += temp % 10 ;					  
      temp = temp / 10 ;				      	    temp = temp / 10 ;					    	  temp = temp / 10 ;					  
    }							      	  }							    	}							  
    if ( cur == sum ) {					      	  if ( cur == sum ) {					    	if ( cur == sum ) {					  
      count ++ ;					      	    count ++ ;						    	  count ++ ;						  
      i += 9 ;						      	    i += 9 ;						    	  i += 9 ;						  
    }							      	  }							    	}							  
    else i ++ ;						      	  else i ++ ;						    	else {							  
  }							      	}							    	  i ++ ;						  
  cout << count ;					      	System . out . println ( count ) ;			    	}							  
}							      }								      }								  
							      								      System . out . println ( count ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICA
--							      --							    --								  --
string noAdjacentDup ( string s ) {			      public static String noAdjacentDup ( String s1 ) {	    public static String noAdjacentDup ( String s ) {		  error : PRINT_A_CLOSEST_STRING_THAT_DOES_NOT_CONTA
  int n = s . length ( ) ;				      	int n = s1 . length ( ) ;				      int n = s . length ( ) ;					  IN_ADJACENT_DUPLICATES.java:35: error: cannot find
  for ( int i = 1 ;					      	char [ ] s = s1 . toCharArray ( ) ;			      for ( int i = 1 ;						   symbol	s . setCharAt ( i , 'a' ) ;
  i < n ;						      	for ( int i = 1 ;					      i < n ;							  ^   symbol:	method setCharAt(int,char)   locatio
  i ++ ) {						      	i < n ;							      i ++ ) {							  n: variable s of type String PRINT_A_CLOSEST_STRIN
    if ( s [ i ] == s [ i - 1 ] ) {			      	i ++ ) {						    	if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) {	  G_THAT_DOES_NOT_CONTAIN_ADJACENT_DUPLICATES.java:3
      s [ i ] = 'a' ;					      	  if ( s [ i ] == s [ i - 1 ] ) {			    	  s . setCharAt ( i , 'a' ) ;				  7: error: cannot find symbol	       s . setCharAt
      while ( s [ i ] == s [ i - 1 ] || ( i + 1 < n && s [ i  	    s [ i ] = 'a' ;					    	  while ( s . charAt ( i ) == s . charAt ( i - 1 ) || ( i  ( i , 'a' ) ;	   ^   symbol:	 method setC
      i ++ ;						      	    while ( s [ i ] == s [ i - 1 ] || ( i + 1 < n && s [ i  	    s . setCharAt ( i , 'a' ) ;				  harAt(int,char)   location: variable s of type Str
    }							      	    i ++ ;						    	  }							  ing 2 errors
  }							      	  }							    	  i ++ ;						  
  return s ;						      	}							    	}							  
}							      	return ( new String ( s ) ) ;				      }								  
							      }								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_SPECIFIC_PAIR_IN_MATRIX				      FIND_A_SPECIFIC_PAIR_IN_MATRIX				    FIND_A_SPECIFIC_PAIR_IN_MATRIX				  FIND_A_SPECIFIC_PAIR_IN_MATRIX
--							      --							    --								  --
int findMaxValue ( int mat [ ] [ N ] ) {		      static int findMaxValue ( int N , int mat [ ] [ ] ) {	    public static int findMaxValue ( int mat [ ] [ ] ) {	  script_not_found : None
  int maxValue = INT_MIN ;				      	int maxValue = Integer . MIN_VALUE ;			      int maxValue = Integer . MIN_VALUE ;			  
  for ( int a = 0 ;					      	for ( int a = 0 ;					      for ( int a = 0 ;						  
  a < N - 1 ;						      	a < N - 1 ;						      a < N - 1 ;						  
  a ++ ) for ( int b = 0 ;				      	a ++ ) for ( int b = 0 ;				      a ++ ) for ( int b = 0 ;					  
  b < N - 1 ;						      	b < N - 1 ;						      b < N - 1 ;						  
  b ++ ) for ( int d = a + 1 ;				      	b ++ ) for ( int d = a + 1 ;				      b ++ ) for ( int d = a + 1 ;				  
  d < N ;						      	d < N ;							      d < N ;							  
  d ++ ) for ( int e = b + 1 ;				      	d ++ ) for ( int e = b + 1 ;				      d ++ ) for ( int e = b + 1 ;				  
  e < N ;						      	e < N ;							      e < N ;							  
  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ]  	e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ]    e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ]  
  return maxValue ;					      	return maxValue ;					      return maxValue ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED		      MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED		    MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED		  MOVE_VE_ELEMENTS_END_ORDER_EXTRA_SPACE_ALLOWED
--							      --							    --								  --
void segregateElements ( int arr [ ] , int n ) {	      static void segregateElements ( int arr [ ] , int n ) {	    public static void segregateElements ( int arr [ ] , int n )  script_not_found : None
  int temp [ n ] ;					      	int temp [ ] = new int [ n ] ;				      int temp [ ] = new int [ n ] ;				  
  int j = 0 ;						      	int j = 0 ;						      int j = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] >= 0 ) temp [ j ++ ] = arr [ i ] ;    	i ++ ) if ( arr [ i ] >= 0 ) temp [ j ++ ] = arr [ i ] ;      i ++ ) if ( arr [ i ] >= 0 ) temp [ j ++ ] = arr [ i ] ;	  
  if ( j == n || j == 0 ) return ;			      	if ( j == n || j == 0 ) return ;			      if ( j == n || j == 0 ) return ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] < 0 ) temp [ j ++ ] = arr [ i ] ;     	i ++ ) if ( arr [ i ] < 0 ) temp [ j ++ ] = arr [ i ] ;	      i ++ ) if ( arr [ i ] < 0 ) temp [ j ++ ] = arr [ i ] ;	  
  memcpy ( arr , temp , sizeof ( temp ) ) ;		      	for ( int i = 0 ;					      System . arraycopy ( temp , 0 , arr , 0 , n ) ;		  
}							      	i < n ;							    }								  
							      	i ++ ) arr [ i ] = temp [ i ] ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SIZE_SUBARRAY_MAXIMUM_SUM				      SIZE_SUBARRAY_MAXIMUM_SUM					    SIZE_SUBARRAY_MAXIMUM_SUM					  SIZE_SUBARRAY_MAXIMUM_SUM
--							      --							    --								  --
int maxSubArraySum ( int a [ ] , int size ) {		      static int maxSubArraySum ( int a [ ] , int size ) {	    public static int maxSubArraySum ( int a [ ] , int size ) {	  success : None
  int max_so_far = INT_MIN , max_ending_here = 0 , start = 0  	int max_so_far = Integer . MIN_VALUE , max_ending_here = 0    int max_so_far = Integer . MIN_VALUE , max_ending_here = 0  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < size ;						      	i < size ;						      i < size ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    max_ending_here += a [ i ] ;			      	  max_ending_here += a [ i ] ;				    	max_ending_here += a [ i ] ;				  
    if ( max_so_far < max_ending_here ) {		      	  if ( max_so_far < max_ending_here ) {			    	if ( max_so_far < max_ending_here ) {			  
      max_so_far = max_ending_here ;			      	    max_so_far = max_ending_here ;			    	  max_so_far = max_ending_here ;			  
      start = s ;					      	    start = s ;						    	  start = s ;						  
      end = i ;						      	    end = i ;						    	  end = i ;						  
    }							      	  }							    	}							  
    if ( max_ending_here < 0 ) {			      	  if ( max_ending_here < 0 ) {				    	if ( max_ending_here < 0 ) {				  
      max_ending_here = 0 ;				      	    max_ending_here = 0 ;				    	  max_ending_here = 0 ;					  
      s = i + 1 ;					      	    s = i + 1 ;						    	  s = i + 1 ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return ( end - start + 1 ) ;				      	return ( end - start + 1 ) ;				      return ( end - start + 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD REARRANGE_ARRAY_SUCH_THAT_EVEN_POSITIONED_ARE_GREATER_THAN_OD
--							      --							    --								  --
void assign ( int a [ ] , int n ) {			      static void assign ( int a [ ] , int n ) {		    public static void assign ( int a [ ] , int n ) {		  script_not_found : None
  sort ( a , a + n ) ;					      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
  int ans [ n ] ;					      	int ans [ ] = new int [ n ] ;				      int ans [ ] = new int [ n ] ;				  
  int p = 0 , q = n - 1 ;				      	int p = 0 , q = n - 1 ;					      int p = 0 , q = n - 1 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ;	      	  if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ;	    	if ( ( i + 1 ) % 2 == 0 ) {				  
    else ans [ i ] = a [ p ++ ] ;			      	  else ans [ i ] = a [ p ++ ] ;				    	  ans [ i ] = a [ q -- ] ;				  
  }							      	}							    	}							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	else {							  
  i < n ;						      	i < n ;							    	  ans [ i ] = a [ p ++ ] ;				  
  i ++ ) cout << ans [ i ] << " " ;			      	i ++ ) System . out . print ( ans [ i ] + " " ) ;	    	}							  
}							      }								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( ans [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		      FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS		    FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS			  FIND_FIRST_REPEATING_ELEMENT_ARRAY_INTEGERS
--							      --							    --								  --
void printFirstRepeating ( int arr [ ] , int n ) {	      static void printFirstRepeating ( int arr [ ] ) {		    public static void printFirstRepeating ( int arr [ ] , int n  script_not_found : None
  int min = - 1 ;					      	int min = - 1 ;						      int min = - 1 ;						  
  set < int > myset ;					      	HashSet < Integer > set = new HashSet < > ( ) ;		      HashSet < Integer > myset = new HashSet < > ( ) ;		  
  for ( int i = n - 1 ;					      	for ( int i = arr . length - 1 ;			      for ( int i = n - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) min  	  if ( set . contains ( arr [ i ] ) ) min = i ;		    	if ( myset . contains ( arr [ i ] ) ) {			  
    else myset . insert ( arr [ i ] ) ;			      	  else set . add ( arr [ i ] ) ;			    	  min = i ;						  
  }							      	}							    	}							  
  if ( min != - 1 ) cout << "The first repeating element is " 	if ( min != - 1 ) System . out . println ( "The first repea 	else {							  
  else cout << "There are no repeating elements" ;	      	else System . out . println ( "There are no repeating eleme 	  myset . add ( arr [ i ] ) ;				  
}							      }								    	}							  
							      								      }								  
							      								      if ( min != - 1 ) {					  
							      								    	System . out . println ( "The first repeating element is  
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "There are no repeating elements 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES      PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	    PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES	  PRINT_STRING_SPECIFIED_CHARACTER_OCCURRED_GIVEN_NO_TIMES
--							      --							    --								  --
void printString ( string str , char ch , int count ) {	      static void printString ( String str , char ch , int count )  public static void printString ( String str , char ch , int c script_not_found : None
  int occ = 0 , i ;					      	int occ = 0 , i ;					      int occ = 0 , i ;						  
  if ( count == 0 ) {					      	if ( count == 0 ) {					      if ( count == 0 ) {					  
    cout << str ;					      	  System . out . println ( str ) ;			    	System . out . println ( str ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == ch ) occ ++ ;			      	  if ( str . charAt ( i ) == ch ) occ ++ ;		    	if ( str . charAt ( i ) == ch ) {			  
    if ( occ == count ) break ;				      	  if ( occ == count ) break ;				    	  occ ++ ;						  
  }							      	}							    	}							  
  if ( i < str . length ( ) - 1 ) cout << str . substr ( i +  	if ( i < str . length ( ) - 1 ) System . out . println ( st 	if ( occ == count ) {					  
  else cout << "Empty string" ;				      	else System . out . println ( "Empty string" ) ;	    	  break ;						  
}							      }								    	}							  
							      								      }								  
							      								      if ( i < str . length ( ) - 1 ) {				  
							      								    	System . out . println ( str . substring ( i + 1 , str .  
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "Empty string" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_3
--							      --							    --								  --
int findLength ( string str , int n ) {			      static int findLength ( String str , int n ) {		    public static int findLength ( String str , int n ) {	  script_not_found : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n - 2 ;						      	i <= n - 2 ;						      i <= n - 2 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int l = i , r = i + 1 ;				      	  int l = i , r = i + 1 ;				    	int l = i , r = i + 1 ;					  
    int lsum = 0 , rsum = 0 ;				      	  int lsum = 0 , rsum = 0 ;				    	int lsum = 0 , rsum = 0 ;				  
    while ( r < n && l >= 0 ) {				      	  while ( r < n && l >= 0 ) {				    	while ( r < n && l >= 0 ) {				  
      lsum += str [ l ] - '0' ;				      	    lsum += str . charAt ( l ) - '0' ;			    	  lsum += str . charAt ( l ) - '0' ;			  
      rsum += str [ r ] - '0' ;				      	    rsum += str . charAt ( r ) - '0' ;			    	  rsum += str . charAt ( r ) - '0' ;			  
      if ( lsum == rsum ) ans = max ( ans , r - l + 1 ) ;     	    if ( lsum == rsum ) {				    	  if ( lsum == rsum ) {					  
      l -- ;						      	      ans = Math . max ( ans , r - l + 1 ) ;		    	    ans = Math . max ( ans , r - l + 1 ) ;		  
      r ++ ;						      	    }							    	  }							  
    }							      	    l -- ;						    	  l -- ;						  
  }							      	    r ++ ;						    	  r ++ ;						  
  return ans ;						      	  }							    	}							  
}							      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE_1			      LONGEST_INCREASING_SUBSEQUENCE_1				    LONGEST_INCREASING_SUBSEQUENCE_1				  LONGEST_INCREASING_SUBSEQUENCE_1
--							      --							    --								  --
int lis ( int arr [ ] , int n ) {			      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int arr [ ] , int n ) {		  failure : #Results:0, 10
  int lis [ n ] ;					      	int lis [ ] = new int [ n ] ;				      int lis [ ] = new int [ n ] ;				  
  lis [ 0 ] = 1 ;					      	int i , j , max = 0 ;					      lis [ 0 ] = 1 ;						  
  for ( int i = 1 ;					      	for ( i = 0 ;						      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) lis [ i ] = 1 ;					      i ++ ) {							  
    lis [ i ] = 1 ;					      	for ( i = 1 ;						    	lis [ i ] = 1 ;						  
    for ( int j = 0 ;					      	i < n ;							    	for ( int j = 0 ;					  
    j < i ;						      	i ++ ) for ( j = 0 ;					    	j < i ;							  
    j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j  	j < i ;							    	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j  
  }							      	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]    }								  
  return * max_element ( lis , lis + n ) ;		      	for ( i = 0 ;						      return Arrays . binarySearch ( lis , n ) ;		  
}							      	i < n ;							    }								  
							      	i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;		    								  
							      	return max ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_FACTORS_NUMBER				      FIND_SUM_EVEN_FACTORS_NUMBER				    FIND_SUM_EVEN_FACTORS_NUMBER				  FIND_SUM_EVEN_FACTORS_NUMBER
--							      --							    --								  --
int sumofFactors ( int n ) {				      public static int sumofFactors ( int n ) {		    public static int sumofFactors ( int n ) {			  success : None
  if ( n % 2 != 0 ) return 0 ;				      	if ( n % 2 != 0 ) return 0 ;				      if ( n % 2 != 0 ) return 0 ;				  
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      i <= Math . sqrt ( n ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int count = 0 , curr_sum = 1 , curr_term = 1 ;	      	  int count = 0 , curr_sum = 1 ;			    	int count = 0 , currSum = 1 , currTerm = 1 ;		  
    while ( n % i == 0 ) {				      	  int curr_term = 1 ;					    	while ( n % i == 0 ) {					  
      count ++ ;					      	  while ( n % i == 0 ) {				    	  count ++ ;						  
      n = n / i ;					      	    count ++ ;						    	  n = n / i ;						  
      if ( i == 2 && count == 1 ) curr_sum = 0 ;	      	    n = n / i ;						    	  if ( i == 2 && count == 1 ) {				  
      curr_term *= i ;					      	    if ( i == 2 && count == 1 ) curr_sum = 0 ;		    	    currSum = 0 ;					  
      curr_sum += curr_term ;				      	    curr_term *= i ;					    	  }							  
    }							      	    curr_sum += curr_term ;				    	  currTerm *= i ;					  
    res *= curr_sum ;					      	  }							    	  currSum += currTerm ;					  
  }							      	  res *= curr_sum ;					    	}							  
  if ( n >= 2 ) res *= ( 1 + n ) ;			      	}							    	res *= currSum ;					  
  return res ;						      	if ( n >= 2 ) res *= ( 1 + n ) ;			      }								  
}							      	return res ;						      if ( n >= 2 ) {						  
							      }								    	res *= ( 1 + n ) ;					  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS	      MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS		    MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS		  MAXIMUM_SUM_SUBSEQUENCE_LEAST_K_DISTANT_ELEMENTS
--							      --							    --								  --
int maxSum ( int arr [ ] , int N , int k ) {		      static int maxSum ( int arr [ ] , int N , int k ) {	    public static int maxSum ( int arr [ ] , int N , int k ) {	  success : None
  int MS [ N ] ;					      	int MS [ ] = new int [ N ] ;				      int MS [ ] = new int [ N ] ;				  
  MS [ N - 1 ] = arr [ N - 1 ] ;			      	MS [ N - 1 ] = arr [ N - 1 ] ;				      MS [ N - 1 ] = arr [ N - 1 ] ;				  
  for ( int i = N - 2 ;					      	for ( int i = N - 2 ;					      for ( int i = N - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( i + k + 1 >= N ) MS [ i ] = max ( arr [ i ] , MS [ i 	  if ( i + k + 1 >= N ) MS [ i ] = Math . max ( arr [ i ] , 	if ( i + k + 1 >= N ) {					  
    else MS [ i ] = max ( arr [ i ] + MS [ i + k + 1 ] , MS [ 	  else MS [ i ] = Math . max ( arr [ i ] + MS [ i + k + 1 ] 	  MS [ i ] = Math . max ( arr [ i ] , MS [ i + 1 ] ) ;	  
  }							      	}							    	}							  
  return MS [ 0 ] ;					      	return MS [ 0 ] ;					    	else {							  
}							      }								    	  MS [ i ] = Math . max ( arr [ i ] + MS [ i + k + 1 ] ,  
							      								    	}							  
							      								      }								  
							      								      return MS [ 0 ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1		    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_1
--							      --							    --								  --
int findMaxAverage ( int arr [ ] , int n , int k ) {	      static int findMaxAverage ( int arr [ ] , int n , int k ) {   public static int findMaxAverage ( int arr [ ] , int n , int  error : FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH_
  if ( k > n ) return - 1 ;				      	if ( k > n ) return - 1 ;				      if ( k > n ) return - 1 ;					  1.java:45: error: variable sum is already defined
  int sum = arr [ 0 ] ;					      	int sum = arr [ 0 ] ;					      int sum = arr [ 0 ] ;					  in method f_filled(int[],int,int)	int sum = su
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  m + arr [ i ] - arr [ i - k ] ;	  ^ 1 error
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) sum += arr [ i ] ;				      	i ++ ) sum += arr [ i ] ;				      i ++ ) {							  
  int max_sum = sum , max_end = k - 1 ;			      	int max_sum = sum , max_end = k - 1 ;			    	sum += arr [ i ] ;					  
  for ( int i = k ;					      	for ( int i = k ;					      }								  
  i < n ;						      	i < n ;							      int maxSum = sum , maxEnd = k - 1 ;			  
  i ++ ) {						      	i ++ ) {						      for ( int i = k ;						  
    int sum = sum + arr [ i ] - arr [ i - k ] ;		      	  sum = sum + arr [ i ] - arr [ i - k ] ;		      i < n ;							  
    if ( sum > max_sum ) {				      	  if ( sum > max_sum ) {				      i ++ ) {							  
      max_sum = sum ;					      	    max_sum = sum ;					    	int sum = sum + arr [ i ] - arr [ i - k ] ;		  
      max_end = i ;					      	    max_end = i ;					    	if ( sum > maxSum ) {					  
    }							      	  }							    	  maxSum = sum ;					  
  }							      	}							    	  maxEnd = i ;						  
  return max_end - k + 1 ;				      	return max_end - k + 1 ;				    	}							  
}							      }								      }								  
							      								      return maxEnd - k + 1 ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			      FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			    FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE			  FIND_DIMENSIONS_RIGHT_ANGLED_TRIANGLE
--							      --							    --								  --
void findDimen ( int H , int A ) {			      static void findDimen ( int H , int A ) {			    public static void findDimen ( int H , int A ) {		  script_not_found : None
  if ( H * H < 4 * A ) {				      	if ( H * H < 4 * A ) {					      if ( H * H < 4 * A ) {					  
    cout << "Not Possible\n" ;				      	  System . out . println ( "Not Possible" ) ;		    	System . out . println ( "Not Possible" ) ;		  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  double apb = sqrt ( H * H + 4 * A ) ;			      	double apb = Math . sqrt ( H * H + 4 * A ) ;		      double apb = Math . sqrt ( H * H + 4 * A ) ;		  
  double asb = sqrt ( H * H - 4 * A ) ;			      	double asb = Math . sqrt ( H * H - 4 * A ) ;		      double asb = Math . sqrt ( H * H - 4 * A ) ;		  
  cout . precision ( 2 ) ;				      	System . out . println ( "P = " + Math . round ( ( ( apb -    System . out . println ( "P = " + String . valueOf ( ( apb  
  cout << "P = " << fixed << ( apb - asb ) / 2.0 << "\n" ;    	System . out . print ( "B = " + Math . round ( ( ( apb + as   System . out . println ( "B = " + ( apb + asb ) / 2.0 ) ;	  
  cout << "B = " << ( apb + asb ) / 2.0 ;		      }								    }								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH		      REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH		    REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH		  REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH
--							      --							    --								  --
void GFG :: rearrange ( int arr [ ] , int n ) {		      static void rearrange ( int arr [ ] , int n ) {		    public static void GFG ( int arr [ ] , int n ) {		  error : REARRANGE_POSITIVE_AND_NEGATIVE_NUMBERS_PU
  int i = - 1 ;						      	int i = - 1 , temp = 0 ;				      int i = - 1 ;						  BLISH.java:43: error: no suitable method found for
  for ( int j = 0 ;					      	for ( int j = 0 ;					      for ( int j = 0 ;						   fill(int[],int,int)	     Arrays . fill ( arr , i
  j < n ;						      	j < n ;							      j < n ;							   , j ) ;		^     method Arrays.fill(lon
  j ++ ) {						      	j ++ ) {						      j ++ ) {							  g[],long) is not applicable	    (actual and form
    if ( arr [ j ] < 0 ) {				      	  if ( arr [ j ] < 0 ) {				    	if ( arr [ j ] < 0 ) {					  al argument lists differ in length)	  method Arr
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  ays.fill(long[],int,int,long) is not applicable
      swap ( & arr [ i ] , & arr [ j ] ) ;		      	    temp = arr [ i ] ;					    	  Arrays . fill ( arr , i , j ) ;			      (actual and formal argument lists differ in le
    }							      	    arr [ i ] = arr [ j ] ;				    	}							  ngth)	    method Arrays.fill(int[],int) is not app
  }							      	    arr [ j ] = temp ;					      }								  licable	(actual and formal argument lists di
  int pos = i + 1 , neg = 0 ;				      	  }							      int pos = i + 1 , neg = 0 ;				  ffer in length)     method Arrays.fill(int[],int,i
  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {	      	}							      while ( pos < n && neg < pos && arr [ neg ] < 0 ) {	  nt,int) is not applicable	  (actual and formal
    swap ( & arr [ neg ] , & arr [ pos ] ) ;		      	int pos = i + 1 , neg = 0 ;				    	Arrays . fill ( arr , neg , pos ) ;			   argument lists differ in length)	method Array
    pos ++ ;						      	while ( pos < n && neg < pos && arr [ neg ] < 0 ) {	    	pos ++ ;						  s.fill(short[],short) is not applicable	(act
    neg += 2 ;						      	  temp = arr [ neg ] ;					    	neg += 2 ;						  ual and formal argument lists differ in length)
  }							      	  arr [ neg ] = arr [ pos ] ;				      }								    method Arrays.fill(short[],int,int,short) is not
}							      	  arr [ pos ] = temp ;					    }								   applicable	    (actual and formal argument list
							      	  pos ++ ;						    								  s differ in length)	  method Arrays.fill(char[],
							      	  neg += 2 ;						    								  char) is not applicable	(actual and formal a
							      	}							    								  rgument lists differ in length)     method Arrays.
							      }								    								  fill(char[],int,int,char) is not applicable
							      								    								  (actual and formal argument lists differ in length
							      								    								  )	method Arrays.fill(byte[],byte) is not appli
							      								    								  cable	      (actual and formal argument lists diff
							      								    								  er in length)	    method Arrays.fill(byte[],int,in
							      								    								  t,byte) is not applicable	  (actual and formal
							      								    								   argument lists differ in length)	method Array
							      								    								  s.fill(boolean[],boolean) is not applicable
							      								    								  (actual and formal argument lists differ in length
							      								    								  )	method Arrays.fill(boolean[],int,int,boolean
							      								    								  ) is not applicable	    (actual and formal argum
							      								    								  ent lists differ in length)	  method Arrays.fill
							      								    								  (double[],double) is not applicable	    (actual
							      								    								  and formal argument lists differ in length)	  me
							      								    								  thod Arrays.fill(double[],int,int,double) is not a
							      								    								  pplicable	  (actual and formal argument lists
							      								    								  differ in length)	method Arrays.fill(float[],f
							      								    								  loat) is not applicable	(actual and formal a
							      								    								  rgument lists differ in length)     method Arrays.
							      								    								  fill(float[],int,int,float) is not applicable
							      								    								    (actual and formal argument lists differ in leng
							      								    								  th)	  method Arrays.fill(Object[],Object) is not
							      								    								   applicable	    (actual and formal argument list
							      								    								  s differ in length)	  method Arrays.fill(Object[
							      								    								  ],int,int,Object) is not applicable	    (actual
							      								    								  and formal argument lists differ in length) REARRA
							      								    								  NGE_POSITIVE_AND_NEGATIVE_NUMBERS_PUBLISH.java:48:
							      								    								   error: no suitable method found for fill(int[],in
							      								    								  t,int)     Arrays . fill ( arr , neg , pos ) ;
							      								    								  	  ^	method Arrays.fill(long[],long) is n
							      								    								  ot applicable	      (actual and formal argument li
							      								    								  sts differ in length)	    method Arrays.fill(long[
							      								    								  ],int,int,long) is not applicable	  (actual an
							      								    								  d formal argument lists differ in length)	meth
							      								    								  od Arrays.fill(int[],int) is not applicable
							      								    								  (actual and formal argument lists differ in length
							      								    								  )	method Arrays.fill(int[],int,int,int) is not
							      								    								   applicable	    (actual and formal argument list
							      								    								  s differ in length)	  method Arrays.fill(short[]
							      								    								  ,short) is not applicable	  (actual and formal
							      								    								   argument lists differ in length)	method Array
							      								    								  s.fill(short[],int,int,short) is not applicable
							      								    								      (actual and formal argument lists differ in le
							      								    								  ngth)	    method Arrays.fill(char[],char) is not a
							      								    								  pplicable	  (actual and formal argument lists
							      								    								  differ in length)	method Arrays.fill(char[],in
							      								    								  t,int,char) is not applicable	      (actual and fo
							      								    								  rmal argument lists differ in length)	    method A
							      								    								  rrays.fill(byte[],byte) is not applicable	  (a
							      								    								  ctual and formal argument lists differ in length)
							      								    								      method Arrays.fill(byte[],int,int,byte) is not
							      								    								   applicable	    (actual and formal argument list
							      								    								  s differ in length)	  method Arrays.fill(boolean
							      								    								  [],boolean) is not applicable	      (actual and fo
							      								    								  rmal argument lists differ in length)	    method A
							      								    								  rrays.fill(boolean[],int,int,boolean) is not appli
							      								    								  cable	      (actual and formal argument lists diff
							      								    								  er in length)	    method Arrays.fill(double[],doub
							      								    								  le) is not applicable	      (actual and formal arg
							      								    								  ument lists differ in length)	    method Arrays.fi
							      								    								  ll(double[],int,int,double) is not applicable
							      								    								    (actual and formal argument lists differ in leng
							      								    								  th)	  method Arrays.fill(float[],float) is not a
							      								    								  pplicable	  (actual and formal argument lists
							      								    								  differ in length)	method Arrays.fill(float[],i
							      								    								  nt,int,float) is not applicable	(actual and
							      								    								  formal argument lists differ in length)     method
							      								    								   Arrays.fill(Object[],Object) is not applicable
							      								    								      (actual and formal argument lists differ in le
							      								    								  ngth)	    method Arrays.fill(Object[],int,int,Obje
							      								    								  ct) is not applicable	      (actual and formal arg
							      								    								  ument lists differ in length) 2 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	      GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	    GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT	  GIVEN_AN_ARRAY_OF_PAIRS_FIND_ALL_SYMMETRIC_PAIRS_IN_IT
--							      --							    --								  --
void findSymPairs ( int arr [ ] [ 2 ] , int row ) {	      static void findSymPairs ( int arr [ ] [ ] ) {		    public static void findSymPairs ( int arr [ ] [ ] , int row ) script_not_found : None
  unordered_map < int , int > hM ;			      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    HashMap < Integer , Integer > hM = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < row ;						      	i < arr . length ;					      i < row ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int first = arr [ i ] [ 0 ] ;			      	  int first = arr [ i ] [ 0 ] ;				    	int first = arr [ i ] [ 0 ] ;				  
    int sec = arr [ i ] [ 1 ] ;				      	  int sec = arr [ i ] [ 1 ] ;				    	int sec = arr [ i ] [ 1 ] ;				  
    if ( hM . find ( sec ) != hM . end ( ) && hM [ sec ] == f 	  Integer val = hM . get ( sec ) ;			    	if ( hM . containsKey ( sec ) && hM . get ( sec ) == firs 
    else hM [ first ] = sec ;				      	  if ( val != null && val == first ) System . out . println 	  System . out . println ( "(" + sec + ", " + first + ")" 
  }							      	  else hM . put ( first , sec ) ;			    	}							  
}							      	}							    	else {							  
							      }								    	  hM . put ( first , sec ) ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	      SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS	    SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS		  SMALLEST_DIFFERENCE_PAIR_VALUES_TWO_UNSORTED_ARRAYS
--							      --							    --								  --
int findSmallestDifference ( int A [ ] , int B [ ] , int m ,  static int findSmallestDifference ( int A [ ] , int B [ ] , i public static int findSmallestDifference ( int A [ ] , int B  success : None
  sort ( A , A + m ) ;					      	Arrays . sort ( A ) ;					      Arrays . sort ( A ) ;					  
  sort ( B , B + n ) ;					      	Arrays . sort ( B ) ;					      Arrays . sort ( B ) ;					  
  int a = 0 , b = 0 ;					      	int a = 0 , b = 0 ;					      int a = 0 , b = 0 ;					  
  int result = INT_MAX ;				      	int result = Integer . MAX_VALUE ;			      int result = Integer . MAX_VALUE ;			  
  while ( a < m && b < n ) {				      	while ( a < m && b < n ) {				      while ( a < m && b < n ) {				  
    if ( abs ( A [ a ] - B [ b ] ) < result ) result = abs (  	  if ( Math . abs ( A [ a ] - B [ b ] ) < result ) result = 	if ( Math . abs ( A [ a ] - B [ b ] ) < result ) {	  
    if ( A [ a ] < B [ b ] ) a ++ ;			      	  if ( A [ a ] < B [ b ] ) a ++ ;			    	  result = Math . abs ( A [ a ] - B [ b ] ) ;		  
    else b ++ ;						      	  else b ++ ;						    	}							  
  }							      	}							    	if ( A [ a ] < B [ b ] ) {				  
  return result ;					      	return result ;						    	  a ++ ;						  
}							      }								    	}							  
							      								    	else {							  
							      								    	  b ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STERN_BROCOT_SEQUENCE					      STERN_BROCOT_SEQUENCE					    STERN_BROCOT_SEQUENCE					  STERN_BROCOT_SEQUENCE
--							      --							    --								  --
void SternSequenceFunc ( vector < int > & BrocotSequence , in static void SternSequenceFunc ( Vector < Integer > BrocotSequ public static void SternSequenceFunc ( int [ ] BrocotSequence script_not_found : None
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  BrocotSequence . size ( ) < n ;			      	BrocotSequence . size ( ) < n ;				      i < BrocotSequence . length ;				  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int considered_element = BrocotSequence [ i ] ;	      	  int considered_element = BrocotSequence . get ( i ) ;	    	int considered_element = BrocotSequence [ i ] ;		  
    int precedent = BrocotSequence [ i - 1 ] ;		      	  int precedent = BrocotSequence . get ( i - 1 ) ;	    	int precedent = BrocotSequence [ i - 1 ] ;		  
    BrocotSequence . push_back ( considered_element + precede 	  BrocotSequence . add ( considered_element + precedent ) ; 	BrocotSequence [ i ] = considered_element + precedent ;	  
    BrocotSequence . push_back ( considered_element ) ;	      	  BrocotSequence . add ( considered_element ) ;		    	BrocotSequence [ i - 1 ] = considered_element ;		  
  }							      	}							      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < 15 ;						      	i < 15 ;						      i < 15 ;							  
  ++ i ) cout << BrocotSequence [ i ] << " " ;		      	++ i ) System . out . print ( BrocotSequence . get ( i ) +    ++ i ) {							  
}							      }								    	System . out . print ( BrocotSequence [ i ] + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	      NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	    NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS	  NUMBER_OF_TRIANGLES_IN_DIRECTED_AND_UNDIRECTED_GRAPHS
--							      --							    --								  --
int countTriangle ( int graph [ V ] [ V ] , bool isDirected ) int countTriangle ( int graph [ ] [ ] , boolean isDirected )  public static int countTriangle ( int [ ] [ ] graph , boolean script_not_found : None
  int count_Triangle = 0 ;				      	int count_Triangle = 0 ;				      int count_Triangle = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < V ;						      	i < V ;							      i < V ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < V ;						      	  j < V ;						    	j < V ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      for ( int k = 0 ;					      	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
      k < V ;						      	    k < V ;						    	  k < V ;						  
      k ++ ) {						      	    k ++ ) {						    	  k ++ ) {						  
	if ( graph [ i ] [ j ] && graph [ j ] [ k ] && graph  	      if ( graph [ i ] [ j ] == 1 && graph [ j ] [ k ] == 1 	    if ( graph [ i ] [ j ] != null && graph [ j ] [ k ] ! 
      }							      	    }							    	      count_Triangle ++ ;				  
    }							      	  }							    	    }							  
  }							      	}							    	  }							  
  isDirected ? count_Triangle /= 3 : count_Triangle /= 6 ;    	if ( isDirected == true ) {				    	}							  
  return count_Triangle ;				      	  count_Triangle /= 3 ;					      }								  
}							      	}							      isDirected ? count_Triangle /= 3 : count_Triangle /= 6 ;	  
							      	else {							      return count_Triangle ;					  
							      	  count_Triangle /= 6 ;					    }								  
							      	}							    								  
							      	return count_Triangle ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STEINS_ALGORITHM_FOR_FINDING_GCD			      STEINS_ALGORITHM_FOR_FINDING_GCD				    STEINS_ALGORITHM_FOR_FINDING_GCD				  STEINS_ALGORITHM_FOR_FINDING_GCD
--							      --							    --								  --
int gcd ( int a , int b ) {				      static int gcd ( int a , int b ) {			    public static int gcd ( int a , int b ) {			  error : STEINS_ALGORITHM_FOR_FINDING_GCD.java:48:
  if ( a == 0 ) return b ;				      	if ( a == 0 ) return b ;				      if ( a == 0 ) return b ;					  error: incomparable types: boolean and int   while
  if ( b == 0 ) return a ;				      	if ( b == 0 ) return a ;				      if ( b == 0 ) return a ;					   ( ( a > 1 ) == 0 ) {			    ^ STEINS
  int k ;						      	int k ;							      int k ;							  _ALGORITHM_FOR_FINDING_GCD.java:52: error: incompa
  for ( k = 0 ;						      	for ( k = 0 ;						      for ( k = 0 ;						  rable types: boolean and int	   while ( ( b > 1 )
  ( ( a | b ) && 1 ) == 0 ;				      	( ( a | b ) & 1 ) == 0 ;				      ( ( a | b ) & 1 ) == 0 ;					   == 0 ) {			  ^ STEINS_ALGORITHM
  ++ k ) {						      	++ k ) {						      ++ k ) {							  _FOR_FINDING_GCD.java:56: error: cannot find symbo
    a >>= 1 ;						      	  a >>= 1 ;						    	a >>= 1 ;						  l	  swap ( a , b ) ;	 ^   symbol:   metho
    b >>= 1 ;						      	  b >>= 1 ;						    	b >>= 1 ;						  d swap(int,int)   location: class STEINS_ALGORITHM
  }							      	}							      }								  _FOR_FINDING_GCD 3 errors
  while ( ( a > 1 ) == 0 ) a >>= 1 ;			      	while ( ( a & 1 ) == 0 ) a >>= 1 ;			      while ( ( a > 1 ) == 0 ) {				  
  do {							      	do {							    	a >>= 1 ;						  
    while ( ( b > 1 ) == 0 ) b >>= 1 ;			      	  while ( ( b & 1 ) == 0 ) b >>= 1 ;			      }								  
    if ( a > b ) swap ( a , b ) ;			      	  if ( a > b ) {					      do {							  
    b = ( b - a ) ;					      	    int temp = a ;					    	while ( ( b > 1 ) == 0 ) {				  
  }							      	    a = b ;						    	  b >>= 1 ;						  
  while ( b != 0 ) ;					      	    b = temp ;						    	}							  
  return a << k ;					      	  }							    	if ( a > b ) {						  
}							      	  b = ( b - a ) ;					    	  swap ( a , b ) ;					  
							      	}							    	}							  
							      	while ( b != 0 ) ;					    	b = ( b - a ) ;						  
							      	return a << k ;						      }								  
							      }								      while ( b != 0 ) ;					  
							      								      return a << k ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A MINIMUM_NUMBER_POINTS_REMOVED_GET_REMAINING_POINTS_ONE_SIDE_A
--							      --							    --								  --
int findmin ( Point p [ ] , int n ) {			      static int findmin ( Point p [ ] , int n ) {		    public static int findmin ( Point p [ ] , int n ) {		  script_not_found : None
  int a = 0 , b = 0 , c = 0 , d = 0 ;			      	int a = 0 , b = 0 , c = 0 , d = 0 ;			      int a = 0 , b = 0 , c = 0 , d = 0 ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( p [ i ] . x <= 0 ) a ++ ;			      	  if ( p [ i ] . x <= 0 ) a ++ ;			    	if ( p [ i ] . x <= 0 ) {				  
    else if ( p [ i ] . x >= 0 ) b ++ ;			      	  else if ( p [ i ] . x >= 0 ) b ++ ;			    	  a ++ ;						  
    if ( p [ i ] . y >= 0 ) c ++ ;			      	  if ( p [ i ] . y >= 0 ) c ++ ;			    	}							  
    else if ( p [ i ] . y <= 0 ) d ++ ;			      	  else if ( p [ i ] . y <= 0 ) d ++ ;			    	else if ( p [ i ] . x >= 0 ) {				  
  }							      	}							    	  b ++ ;						  
  return min ( {					      	return Math . min ( Math . min ( a , b ) , Math . min ( c , 	}							  
    a , b , c , d }					      }								    	if ( p [ i ] . y >= 0 ) {				  
    ) ;							      								    	  c ++ ;						  
  }							      								    	}							  
							      								    	else if ( p [ i ] . y <= 0 ) {				  
							      								    	  d ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return Math . min ( new Integer ( a ) , new Integer ( b ) , 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	      PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	    PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1	  PAIR_WITH_GIVEN_PRODUCT_SET_1_FIND_IF_ANY_PAIR_EXISTS_1
--							      --							    --								  --
bool isProduct ( int arr [ ] , int n , int x ) {	      static boolean isProduct ( int arr [ ] , int n , int x ) {    public static boolean isProduct ( int arr [ ] , int n , int x success : None
  if ( n < 2 ) return false ;				      	HashSet < Integer > hset = new HashSet < > ( ) ;	      if ( n < 2 ) return false ;				  
  unordered_set < int > s ;				      	if ( n < 2 ) return false ;				      HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == 0 ) {				      	  if ( arr [ i ] == 0 ) {				    	if ( arr [ i ] == 0 ) {					  
      if ( x == 0 ) return true ;			      	    if ( x == 0 ) return true ;				    	  if ( x == 0 ) return true ;				  
      else continue ;					      	    else continue ;					    	  else continue ;					  
    }							      	  }							    	}							  
    if ( x % arr [ i ] == 0 ) {				      	  if ( x % arr [ i ] == 0 ) {				    	if ( x % arr [ i ] == 0 ) {				  
      if ( s . find ( x / arr [ i ] ) != s . end ( ) ) return 	    if ( hset . contains ( x / arr [ i ] ) ) return true ;  	  if ( s . contains ( x / arr [ i ] ) ) return true ;	  
      s . insert ( arr [ i ] ) ;			      	    hset . add ( arr [ i ] ) ;				    	  s . add ( arr [ i ] ) ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	      GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	    GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE	  GROUP_OCCURRENCES_CHARACTERS_ACCORDING_FIRST_APPEARANCE
--							      --							    --								  --
void printGrouped ( string str ) {			      static void printGrouped ( String str ) {			    public static void printGrouped ( String str ) {		  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int count [ MAX_CHAR ] = {				      	int count [ ] = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ MAX_CHAR ] ;			  
    0 }							      	for ( int i = 0 ;					      count [ 0 ] = 0 ;						  
    ;							      	i < n ;							      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	i ++ ) count [ str . charAt ( i ) - 'a' ] ++ ;		      i < n ;							  
    i < n ;						      	for ( int i = 0 ;					      i ++ ) {							  
    i ++ ) count [ str [ i ] - 'a' ] ++ ;		      	i < n ;							    	count [ str . charAt ( i ) - 'a' ] ++ ;			  
    for ( int i = 0 ;					      	i ++ ) {						      }								  
    i < n ;						      	  while ( count [ str . charAt ( i ) - 'a' ] != 0 ) {	      for ( int i = 0 ;						  
    i ++ ) {						      	    System . out . print ( str . charAt ( i ) ) ;	      i < n ;							  
      while ( count [ str [ i ] - 'a' ] -- ) cout << str [ i  	    count [ str . charAt ( i ) - 'a' ] -- ;		      i ++ ) {							  
      count [ str [ i ] - 'a' ] = 0 ;			      	  }							    	while ( count [ str . charAt ( i ) - 'a' ] -- > 0 ) {	  
    }							      	  count [ str . charAt ( i ) - 'a' ] = 0 ;		    	  System . out . print ( str . charAt ( i ) ) ;		  
  }							      	}							    	}							  
							      }								    	count [ str . charAt ( i ) - 'a' ] = 0 ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS		      COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS		    COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS		  COUNT_NUMBERS_CAN_CONSTRUCTED_USING_TWO_NUMBERS
--							      --							    --								  --
int countNums ( int n , int x , int y ) {		      static int countNums ( int n , int x , int y ) {		    public static int countNums ( int n , int x , int y ) {	  success : None
  vector < bool > arr ( n + 1 , false ) ;		      	boolean [ ] arr = new boolean [ n + 1 ] ;		      boolean [ ] arr = new boolean [ n + 1 ] ;			  
  if ( x <= n ) arr [ x ] = true ;			      	if ( x <= n ) arr [ x ] = true ;			      if ( x <= n ) {						  
  if ( y <= n ) arr [ y ] = true ;			      	if ( y <= n ) arr [ y ] = true ;			    	arr [ x ] = true ;					  
  int result = 0 ;					      	int result = 0 ;					      }								  
  for ( int i = min ( x , y ) ;				      	for ( int i = Math . min ( x , y ) ;			      if ( y <= n ) {						  
  i <= n ;						      	i <= n ;						    	arr [ y ] = true ;					  
  i ++ ) {						      	i ++ ) {						      }								  
    if ( arr [ i ] ) {					      	  if ( arr [ i ] ) {					      int result = 0 ;						  
      if ( i + x <= n ) arr [ i + x ] = true ;		      	    if ( i + x <= n ) arr [ i + x ] = true ;		      for ( int i = Math . min ( x , y ) ;			  
      if ( i + y <= n ) arr [ i + y ] = true ;		      	    if ( i + y <= n ) arr [ i + y ] = true ;		      i <= n ;							  
      result ++ ;					      	    result ++ ;						      i ++ ) {							  
    }							      	  }							    	if ( arr [ i ] ) {					  
  }							      	}							    	  if ( i + x <= n ) {					  
  return result ;					      	return result ;						    	    arr [ i + x ] = true ;				  
}							      }								    	  }							  
							      								    	  if ( i + y <= n ) {					  
							      								    	    arr [ i + y ] = true ;				  
							      								    	  }							  
							      								    	  result ++ ;						  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		      RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		    RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX		  RETURN_PREVIOUS_ELEMENT_IN_AN_EXPANDING_MATRIX
--							      --							    --								  --
string findLeft ( string str ) {			      static StringBuilder findLeft ( StringBuilder str ) {	    public static String findLeft ( String str ) {		  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  while ( n -- ) {					      	while ( n > 0 ) {					      while ( n -- > 0 ) {					  
    if ( str [ n ] == 'd' ) {				      	  n -- ;						    	if ( str . charAt ( n ) == 'd' ) {			  
      str [ n ] = 'c' ;					      	  if ( str . charAt ( n ) == 'd' ) {			    	  str . setCharAt ( n , 'c' ) ;				  
      break ;						      	    str . setCharAt ( n , 'c' ) ;			    	  break ;						  
    }							      	    break ;						    	}							  
    if ( str [ n ] == 'b' ) {				      	  }							    	if ( str . charAt ( n ) == 'b' ) {			  
      str [ n ] = 'a' ;					      	  if ( str . charAt ( n ) == 'b' ) {			    	  str . setCharAt ( n , 'a' ) ;				  
      break ;						      	    str . setCharAt ( n , 'a' ) ;			    	  break ;						  
    }							      	    break ;						    	}							  
    if ( str [ n ] == 'a' ) str [ n ] = 'b' ;		      	  }							    	if ( str . charAt ( n ) == 'a' ) {			  
    else if ( str [ n ] == 'c' ) str [ n ] = 'd' ;	      	  if ( str . charAt ( n ) == 'a' ) str . setCharAt ( n , 'b 	  str . setCharAt ( n , 'b' ) ;				  
  }							      	  else if ( str . charAt ( n ) == 'c' ) str . setCharAt ( n 	}							  
  return str ;						      	}							    	else if ( str . charAt ( n ) == 'c' ) {			  
}							      	return str ;						    	  str . setCharAt ( n , 'd' ) ;				  
							      }								    	}							  
							      								      }								  
							      								      return str ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			      PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			    PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE			  PROGRAM_CENSOR_WORD_ASTERISKS_SENTENCE
--							      --							    --								  --
string censor ( string text , string word ) {		      static String censor ( String text , String word ) {	    public static String censor ( String text , String word ) {	  failure : #Results:0, 10
  vector < string > word_list ;				      	String [ ] word_list = text . split ( "\\s+" ) ;	      ArrayList < String > word_list = new ArrayList < String > ( 
  boost :: split ( word_list , text , boost :: is_any_of ( "\ 	String result = "" ;					      StringTokenizer tokenizer = new StringTokenizer ( text , "\ 
  string result = "" ;					      	String stars = "" ;					      StringBuilder sb = new StringBuilder ( ) ;		  
  string stars = "" ;					      	for ( int i = 0 ;					      String stars = "" ;					  
  for ( int i = 0 ;					      	i < word . length ( ) ;					      for ( int i = 0 ;						  
  i < word . size ( ) ;					      	i ++ ) stars += '*' ;					      i < word . length ( ) ;					  
  i ++ ) stars += '*' ;					      	int index = 0 ;						      i ++ ) {							  
  int index = 0 ;					      	for ( String i : word_list ) {				    	stars += '*' ;						  
  for ( string i : word_list ) {			      	  if ( i . compareTo ( word ) == 0 ) word_list [ index ] =    }								  
    if ( i . compare ( word ) == 0 ) {			      	  index ++ ;						      int index = 0 ;						  
      word_list [ index ] = stars ;			      	}							      for ( String i : word_list ) {				  
    }							      	for ( String i : word_list ) result += i + ' ' ;	    	if ( i . toLowerCase ( ) . equals ( word ) ) word_list .  
    index ++ ;						      	return result ;						    	index ++ ;						  
  }							      }								      }								  
  for ( string i : word_list ) {			      								      for ( String i : word_list ) sb . append ( i ) . append ( ' 
    result += i + ' ' ;					      								      return sb . toString ( ) ;				  
  }							      								    }								  
  return result ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY
--							      --							    --								  --
void findPair ( int arr [ ] , int n ) {			      static void findPair ( int [ ] arr , int n ) {		    public static void findPair ( int arr [ ] , int n ) {	  script_not_found : None
  bool found = false ;					      	boolean found = false ;					      boolean found = false ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      for ( int k = 0 ;					      	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
      k < n ;						      	    k < n ;						    	  k < n ;						  
      k ++ ) {						      	    k ++ ) {						    	  k ++ ) {						  
	if ( arr [ i ] + arr [ j ] == arr [ k ] ) {	      	      if ( arr [ i ] + arr [ j ] == arr [ k ] ) {	    	    if ( arr [ i ] + arr [ j ] == arr [ k ] ) {		  
	  cout << arr [ i ] << " " << arr [ j ] << endl ;     		System . out . println ( arr [ i ] + " " + arr [ j  	      System . out . println ( arr [ i ] + " " + arr [ j  
	  found = true ;				      		found = true ;					    	      found = true ;					  
	}						      	      }							    	    }							  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
  }							      	}							      }								  
  if ( found == false ) cout << "Not exist" << endl ;	      	if ( found == false ) System . out . println ( "Not exist"    if ( found == false ) {					  
}							      }								    	System . out . println ( "Not exist" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAJORITY_ELEMENT_1					      MAJORITY_ELEMENT_1					    MAJORITY_ELEMENT_1						  MAJORITY_ELEMENT_1
--							      --							    --								  --
void findMajority ( int arr [ ] , int size ) {		      private static void findMajority ( int [ ] arr ) {	    public static void findMajority ( int arr [ ] , int size ) {  script_not_found : None
  unordered_map < int , int > m ;			      	HashMap < Integer , Integer > map = new HashMap < Integer ,   HashMap < Integer , Integer > m = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < size ;						      	i < arr . length ;					      i < size ;						  
  i ++ ) m [ arr [ i ] ] ++ ;				      	i ++ ) {						      i ++ ) {							  
  int count = 0 ;					      	  if ( map . containsKey ( arr [ i ] ) ) {		    	m . put ( arr [ i ] , ++ i ) ;				  
  for ( auto i : m ) {					      	    int count = map . get ( arr [ i ] ) + 1 ;		      }								  
    if ( i . second > size / 2 ) {			      	    if ( count > arr . length / 2 ) {			      int count = 0 ;						  
      count = 1 ;					      	      System . out . println ( "Majority found :- " + arr [   for ( Map . Entry < Integer , Integer > i : m . entrySet (  
      cout << "Majority found :- " << i . first << endl ;     	      return ;						    	if ( i . getValue ( ) > size / 2 ) {			  
      break ;						      	    }							    	  count = 1 ;						  
    }							      	    else map . put ( arr [ i ] , count ) ;		    	  System . out . println ( "Majority found :- " + i . get 
  }							      	  }							    	  break ;						  
  if ( count == 0 ) cout << "No Majority element" << endl ;   	  else map . put ( arr [ i ] , 1 ) ;			    	}							  
}							      	}							      }								  
							      	System . out . println ( " No Majority element" ) ;	      if ( count == 0 ) {					  
							      }								    	System . out . println ( "No Majority element" ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER		      C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			    C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER			  C_PROGRAM_FIND_SECOND_FREQUENT_CHARACTER
--							      --							    --								  --
char getSecondMostFreq ( string str ) {			      static char getSecondMostFreq ( String str ) {		    public static char getSecondMostFreq ( String str ) {	  script_not_found : None
  int count [ NO_OF_CHARS ] = {				      	int [ ] count = new int [ NO_OF_CHARS ] ;		      int [ ] count = new int [ NO_OF_CHARS ] , i ;		  
    0 }							      	int i ;							      for ( i = 0 ;						  
    , i ;						      	for ( i = 0 ;						      str . length ( ) > i ;					  
    for ( i = 0 ;					      	i < str . length ( ) ;					      i ++ ) {							  
    str [ i ] ;						      	i ++ ) ( count [ str . charAt ( i ) ] ) ++ ;		    	( count [ str . charAt ( i ) ] ) ++ ;			  
    i ++ ) ( count [ str [ i ] ] ) ++ ;			      	int first = 0 , second = 0 ;				      }								  
    int first = 0 , second = 0 ;			      	for ( i = 0 ;						      int first = 0 , second = 0 ;				  
    for ( i = 0 ;					      	i < NO_OF_CHARS ;					      for ( i = 0 ;						  
    i < NO_OF_CHARS ;					      	i ++ ) {						      i < NO_OF_CHARS ;						  
    i ++ ) {						      	  if ( count [ i ] > count [ first ] ) {		      i ++ ) {							  
      if ( count [ i ] > count [ first ] ) {		      	    second = first ;					    	if ( count [ i ] > count [ first ] ) {			  
	second = first ;				      	    first = i ;						    	  second = first ;					  
	first = i ;					      	  }							    	  first = i ;						  
      }							      	  else if ( count [ i ] > count [ second ] && count [ i ] ! 	}							  
      else if ( count [ i ] > count [ second ] && count [ i ] 	}							    	else if ( count [ i ] > count [ second ] && count [ i ] ! 
    }							      	return ( char ) second ;				    	  second = i ;						  
    return second ;					      }								    	}							  
  }							      								      }								  
							      								      return second ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT		      REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT		    REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT		  REMOVE_ARRAY_END_ELEMENT_MAXIMIZE_SUM_PRODUCT
--							      --							    --								  --
int solve ( int dp [ ] [ MAX ] , int a [ ] , int low , int hi static int solve ( int dp [ ] [ ] , int a [ ] , int low , int public static int solve ( int dp [ ] [ ] , int a [ ] , int lo success : None
  if ( low == high ) return a [ low ] * turn ;		      	if ( low == high ) {					      if ( low == high ) return a [ low ] * turn ;		  
  if ( dp [ low ] [ high ] != 0 ) return dp [ low ] [ high ]  	  return a [ low ] * turn ;				      if ( dp [ low ] [ high ] != 0 ) return dp [ low ] [ high ]  
  dp [ low ] [ high ] = max ( a [ low ] * turn + solve ( dp , 	}							      dp [ low ] [ high ] = Math . max ( a [ low ] * turn + solve 
  return dp [ low ] [ high ] ;				      	if ( dp [ low ] [ high ] != 0 ) {			      return dp [ low ] [ high ] ;				  
}							      	  return dp [ low ] [ high ] ;				    }								  
							      	}							    								  
							      	dp [ low ] [ high ] = Math . max ( a [ low ] * turn + solve 								  
							      	return dp [ low ] [ high ] ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		      MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		    MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS		  MAXIMIZE_ARRAY_SUN_AFTER_K_NEGATION_OPERATIONS
--							      --							    --								  --
int maximumSum ( int arr [ ] , int n , int k ) {	      static int maximumSum ( int arr [ ] , int n , int k ) {	    public static int maximumSum ( int arr [ ] , int n , int k )  script_not_found : None
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= k ;						      	i <= k ;						      i <= k ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int min = INT_MAX ;					      	  int min = + 2147483647 ;				    	int min = Integer . MAX_VALUE ;				  
    int index = - 1 ;					      	  int index = - 1 ;					    	int index = - 1 ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ j ] < min ) {				      	    if ( arr [ j ] < min ) {				    	  if ( arr [ j ] < min ) {				  
	min = arr [ j ] ;				      	      min = arr [ j ] ;					    	    min = arr [ j ] ;					  
	index = j ;					      	      index = j ;					    	    index = j ;						  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
    if ( min == 0 ) break ;				      	  if ( min == 0 ) break ;				    	if ( min == 0 ) {					  
    arr [ index ] = - arr [ index ] ;			      	  arr [ index ] = - arr [ index ] ;			    	  break ;						  
  }							      	}							    	}							  
  int sum = 0 ;						      	int sum = 0 ;						    	arr [ index ] = - arr [ index ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < n ;						      	i < n ;							      int sum = 0 ;						  
  i ++ ) sum += arr [ i ] ;				      	i ++ ) sum += arr [ i ] ;				      for ( int i = 0 ;						  
  return sum ;						      	return sum ;						      i < n ;							  
}							      }								      i ++ ) {							  
							      								    	sum += arr [ i ] ;					  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		      SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		    SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1		  SUM_NODES_K_TH_LEVEL_TREE_REPRESENTED_STRING_1
--							      --							    --								  --
int sumAtKthLevel ( string tree , int k , int & i , int level static int sumAtKthLevel ( String tree , int k , int level )  public static int sumAtKthLevel ( String tree , int k , int i script_not_found : None
  if ( tree [ i ++ ] == '(' ) {				      	if ( tree . charAt ( i ++ ) == '(' ) {			      if ( tree . charAt ( i ++ ) == '(' ) {			  
    if ( tree [ i ] == ')' ) return 0 ;			      	  if ( tree . charAt ( i ) == ')' ) return 0 ;		    	if ( tree . charAt ( i ) == ')' ) {			  
    int sum = 0 ;					      	  int sum = 0 ;						    	  return 0 ;						  
    if ( level == k ) sum = tree [ i ] - '0' ;		      	  if ( level == k ) sum = tree . charAt ( i ) - '0' ;	    	}							  
    int leftsum = sumAtKthLevel ( tree , k , ++ i , level + 1 	  ++ i ;						    	int sum = 0 ;						  
    int rightsum = sumAtKthLevel ( tree , k , ++ i , level +  	  int leftsum = sumAtKthLevel ( tree , k , level + 1 ) ;    	if ( level == k ) {					  
    ++ i ;						      	  ++ i ;						    	  sum = tree . charAt ( i ) - '0' ;			  
    return sum + leftsum + rightsum ;			      	  int rightsum = sumAtKthLevel ( tree , k , level + 1 ) ;   	}							  
  }							      	  ++ i ;						    	int leftsum = sumAtKthLevel ( tree , k , ++ i , level + 1 
}							      	  return sum + leftsum + rightsum ;			    	int rightsum = sumAtKthLevel ( tree , k , ++ i , level +  
							      	}							    	++ i ;							  
							      	return Integer . MIN_VALUE ;				    	return sum + leftsum + rightsum ;			  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		      MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		    MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT		  MAXIMUM_SUM_2_X_N_GRID_NO_TWO_ELEMENTS_ADJACENT
--							      --							    --								  --
int maxSum ( int grid [ 2 ] [ MAX ] , int n ) {		      public static int maxSum ( int grid [ ] [ ] , int n ) {	    public static int maxSum ( int grid [ ] [ ] , int n ) {	  success : None
  int incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ;    	int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ]   int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] 
  int excl = 0 , excl_new ;				      	int excl = 0 , excl_new ;				      int excl = 0 , exclNew ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    excl_new = max ( excl , incl ) ;			      	  excl_new = Math . max ( excl , incl ) ;		    	exclNew = Math . max ( excl , incl ) ;			  
    incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) 	  incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ]  	incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ]  
    excl = excl_new ;					      	  excl = excl_new ;					    	excl = exclNew ;					  
  }							      	}							      }								  
  return max ( excl , incl ) ;				      	return Math . max ( excl , incl ) ;			      return Math . max ( excl , incl ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY		      MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			    MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY			  MAXIMUM_CONSECUTIVE_NUMBERS_PRESENT_ARRAY
--							      --							    --								  --
int findLongestConseqSubseq ( int arr [ ] , int n ) {	      static int findLongestConseqSubseq ( int arr [ ] , int n ) {  public static int findLongestConseqSubseq ( int arr [ ] , int success : None
  unordered_set < int > S ;				      	HashSet < Integer > S = new HashSet < Integer > ( ) ;	      HashSet < Integer > S = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) S . insert ( arr [ i ] ) ;			      	i ++ ) S . add ( arr [ i ] ) ;				      i ++ ) {							  
  int ans = 0 ;						      	int ans = 0 ;						    	S . add ( arr [ i ] ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < n ;						      	i < n ;							      int ans = 0 ;						  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    if ( S . find ( arr [ i ] - 1 ) == S . end ( ) ) {	      	  if ( S . contains ( arr [ i ] ) ) {			      i < n ;							  
      int j = arr [ i ] ;				      	    int j = arr [ i ] ;					      i ++ ) {							  
      while ( S . find ( j ) != S . end ( ) ) j ++ ;	      	    while ( S . contains ( j ) ) j ++ ;			    	if ( S . contains ( arr [ i ] - 1 ) == false ) {	  
      ans = max ( ans , j - arr [ i ] ) ;		      	    ans = Math . max ( ans , j - arr [ i ] ) ;		    	  int j = arr [ i ] ;					  
    }							      	  }							    	  while ( S . contains ( j ) ) {			  
  }							      	}							    	    j ++ ;						  
  return ans ;						      	return ans ;						    	  }							  
}							      }								    	  ans = Math . max ( ans , j - arr [ i ] ) ;		  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C		      LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C		    LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C			  LEXICOGRAPHICALLY_PREVIOUS_PERMUTATION_IN_C
--							      --							    --								  --
bool prevPermutation ( string & str ) {			      static boolean prevPermutation ( char [ ] str ) {		    public static boolean prevPermutation ( String str ) {	  script_not_found : None
  int n = str . length ( ) - 1 ;			      	int n = str . length - 1 ;				      int n = str . length ( ) - 1 ;				  
  int i = n ;						      	int i = n ;						      int i = n ;						  
  while ( i > 0 && str [ i - 1 ] <= str [ i ] ) i -- ;	      	while ( i > 0 && str [ i - 1 ] <= str [ i ] ) {		      while ( i > 0 && str . charAt ( i - 1 ) <= str . charAt ( i 
  if ( i <= 0 ) return false ;				      	  i -- ;						    	i -- ;							  
  int j = i - 1 ;					      	}							      }								  
  while ( j + 1 <= n && str [ j + 1 ] <= str [ i - 1 ] ) j ++ 	if ( i <= 0 ) {						      if ( i <= 0 ) {						  
  swap ( str [ i - 1 ] , str [ j ] ) ;			      	  return false ;					    	return false ;						  
  reverse ( str . begin ( ) + i , str . end ( ) ) ;	      	}							      }								  
  return true ;						      	int j = i - 1 ;						      int j = i - 1 ;						  
}							      	while ( j + 1 <= n && str [ j + 1 ] <= str [ i - 1 ] ) {      while ( j + 1 <= n && str . charAt ( j + 1 ) <= str . charA 
							      	  j ++ ;						    	j ++ ;							  
							      	}							      }								  
							      	swap ( str , i - 1 , j ) ;				      Collections . swap ( str , i - 1 , j ) ;			  
							      	StringBuilder sb = new StringBuilder ( String . valueOf ( s   Collections . reverse ( str ) ;				  
							      	sb . reverse ( ) ;					      return true ;						  
							      	str = sb . toString ( ) . toCharArray ( ) ;		    }								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	      COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	    COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER	  COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_NUMBER
--							      --							    --								  --
int countNumber ( int n ) {				      static int countNumber ( int n ) {			    public static int countNumber ( int n ) {			  error : Exception in thread "main" java.util.Empty
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  StackException 	at java.base/java.util.Stack.peek(
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  Stack.java:102) 	at java.base/java.util.Stack.pop(
  i <= 9 ;						      	i <= 9 ;						      i <= 9 ;							  Stack.java:84) 	at COUNT_NATURAL_NUMBERS_WHOSE_PER
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  MUTATION_GREATER_NUMBER.f_filled(COUNT_NATURAL_NUM
    stack < int > s ;					      	  Stack < Integer > s = new Stack < > ( ) ;		    	Stack < Integer > s = new Stack < > ( ) ;		  BERS_WHOSE_PERMUTATION_GREATER_NUMBER.java:53) 	at
    if ( i <= n ) {					      	  if ( i <= n ) {					    	if ( i <= n ) {						   COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION_GREATER_N
      s . push ( i ) ;					      	    s . push ( i ) ;					    	  s . push ( i ) ;					  UMBER.main(COUNT_NATURAL_NUMBERS_WHOSE_PERMUTATION
      result ++ ;					      	    result ++ ;						    	  result ++ ;						  _GREATER_NUMBER.java:84)
    }							      	  }							    	}							  
    while ( ! s . empty ( ) ) {				      	  while ( ! s . empty ( ) ) {				    	while ( ! s . isEmpty ( ) ) {				  
      int tp = s . top ( ) ;				      	    int tp = s . peek ( ) ;				    	  int tp = s . pop ( ) ;				  
      s . pop ( ) ;					      	    s . pop ( ) ;					    	  s . pop ( ) ;						  
      for ( int j = tp % 10 ;				      	    for ( int j = tp % 10 ;				    	  for ( int j = tp % 10 ;				  
      j <= 9 ;						      	    j <= 9 ;						    	  j <= 9 ;						  
      j ++ ) {						      	    j ++ ) {						    	  j ++ ) {						  
	int x = tp * 10 + j ;				      	      int x = tp * 10 + j ;				    	    int x = tp * 10 + j ;				  
	if ( x <= n ) {					      	      if ( x <= n ) {					    	    if ( x <= n ) {					  
	  s . push ( x ) ;				      		s . push ( x ) ;				    	      s . push ( x ) ;					  
	  result ++ ;					      		result ++ ;					    	      result ++ ;					  
	}						      	      }							    	    }							  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1		      FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1		    FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1			  FIND_ROTATION_COUNT_ROTATED_SORTED_ARRAY_1
--							      --							    --								  --
int countRotations ( int arr [ ] , int low , int high ) {     static int countRotations ( int arr [ ] , int low , int high  public static int countRotations ( int arr [ ] , int low , in success : None
  if ( high < low ) return 0 ;				      	if ( high < low ) return 0 ;				      if ( high < low ) return 0 ;				  
  if ( high == low ) return low ;			      	if ( high == low ) return low ;				      if ( high == low ) return low ;				  
  int mid = low + ( high - low ) / 2 ;			      	int mid = low + ( high - low ) / 2 ;			      int mid = low + ( high - low ) / 2 ;			  
  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( 	if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return (   if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( 
  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mi 	if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mi   if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mi 
  if ( arr [ high ] > arr [ mid ] ) return countRotations ( a 	if ( arr [ high ] > arr [ mid ] ) return countRotations ( a   if ( arr [ high ] > arr [ mid ] ) return countRotations ( a 
  return countRotations ( arr , mid + 1 , high ) ;	      	return countRotations ( arr , mid + 1 , high ) ;	      return countRotations ( arr , mid + 1 , high ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN FIND_THE_MAXIMUM_OF_MINIMUMS_FOR_EVERY_WINDOW_SIZE_IN_A_GIVEN
--							      --							    --								  --
void printMaxOfMin ( int arr [ ] , int n ) {		      static void printMaxOfMin ( int n ) {			    public static void printMaxOfMin ( int arr [ ] , int n ) {	  script_not_found : None
  for ( int k = 1 ;					      	for ( int k = 1 ;					      for ( int k = 1 ;						  
  k <= n ;						      	k <= n ;						      k <= n ;							  
  k ++ ) {						      	k ++ ) {						      k ++ ) {							  
    int maxOfMin = INT_MIN ;				      	  int maxOfMin = Integer . MIN_VALUE ;			    	int maxOfMin = Integer . MIN_VALUE ;			  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i <= n - k ;					      	  i <= n - k ;						    	i <= n - k ;						  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      int min = arr [ i ] ;				      	    int min = arr [ i ] ;				    	  int min = arr [ i ] ;					  
      for ( int j = 1 ;					      	    for ( int j = 1 ;					    	  for ( int j = 1 ;					  
      j < k ;						      	    j < k ;						    	  j < k ;						  
      j ++ ) {						      	    j ++ ) {						    	  j ++ ) {						  
	if ( arr [ i + j ] < min ) min = arr [ i + j ] ;      	      if ( arr [ i + j ] < min ) min = arr [ i + j ] ;	    	    if ( arr [ i + j ] < min ) {			  
      }							      	    }							    	      min = arr [ i + j ] ;				  
      if ( min > maxOfMin ) maxOfMin = min ;		      	    if ( min > maxOfMin ) maxOfMin = min ;		    	    }							  
    }							      	  }							    	  }							  
    cout << maxOfMin << " " ;				      	  System . out . print ( maxOfMin + " " ) ;		    	  if ( min > maxOfMin ) {				  
  }							      	}							    	    maxOfMin = min ;					  
}							      }								    	  }							  
							      								    	}							  
							      								    	System . out . print ( maxOfMin + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		      MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		    MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION		  MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION
--							      --							    --								  --
int getMinSteps ( int n ) {				      static int getMinSteps ( int n ) {			    public static int getMinSteps ( int n ) {			  error : MINIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITI
  int table [ n + 1 ] ;					      	int table [ ] = new int [ n + 1 ] ;			      int [ ] table = new int [ n + 1 ] ;			  ON.java:38: error: bad operand type int for unary
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  operator '!'	   if ( ! ( i % 2 ) ) {		 ^ M
  i <= n ;						      	i <= n ;						      i <= n ;							  INIMUM_STEPS_MINIMIZE_N_PER_GIVEN_CONDITION.java:4
  i ++ ) table [ i ] = n - i ;				      	i ++ ) table [ i ] = n - i ;				      i ++ ) {							  1: error: bad operand type int for unary operator
  for ( int i = n ;					      	for ( int i = n ;					    	table [ i ] = n - i ;					  '!'	  if ( ! ( i % 3 ) ) {		^ 2 errors
  i >= 1 ;						      	i >= 1 ;						      }								  
  i -- ) {						      	i -- ) {						      for ( int i = n ;						  
    if ( ! ( i % 2 ) ) table [ i / 2 ] = min ( table [ i ] +  	  if ( ! ( i % 2 > 0 ) ) table [ i / 2 ] = Math . min ( tab   i >= 1 ;							  
    if ( ! ( i % 3 ) ) table [ i / 3 ] = min ( table [ i ] +  	  if ( ! ( i % 3 > 0 ) ) table [ i / 3 ] = Math . min ( tab   i -- ) {							  
  }							      	}							    	if ( ! ( i % 2 ) ) {					  
  return table [ 1 ] ;					      	return table [ 1 ] ;					    	  table [ i / 2 ] = Math . min ( table [ i ] + 1 , table  
							      								    	}							  
							      								    	if ( ! ( i % 3 ) ) {					  
							      								    	  table [ i / 3 ] = Math . min ( table [ i ] + 1 , table  
							      								    	}							  
							      								      }								  
							      								      return table [ 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE		      NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE		    NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE		  NUMBER_DECIMAL_NUMBERS_LENGTH_K_STRICT_MONOTONE
--							      --							    --								  --
int getNumStrictMonotone ( int len ) {			      static int getNumStrictMonotone ( int len ) {		    public static int getNumStrictMonotone ( int len ) {	  script_not_found : None
  int DP [ len ] [ DP_s ] ;				      	int [ ] [ ] DP = new int [ len ] [ DP_s ] ;		      int [ ] [ ] DP = new int [ len ] [ DP_s ] ;		  
  memset ( DP , 0 , sizeof ( DP ) ) ;			      	for ( int i = 0 ;					      Arrays . fill ( DP , 0 ) ;				  
  for ( int i = 0 ;					      	i < DP_s ;						      for ( int i = 0 ;						  
  i < DP_s ;						      	++ i ) DP [ 0 ] [ i ] = i + 1 ;				      i < DP_s ;						  
  ++ i ) DP [ 0 ] [ i ] = i + 1 ;			      	for ( int i = 1 ;					      ++ i ) {							  
  for ( int i = 1 ;					      	i < len ;						    	DP [ 0 ] [ i ] = i + 1 ;				  
  i < len ;						      	++ i ) for ( int j = 1 ;				      }								  
  ++ i ) for ( int j = 1 ;				      	j < DP_s ;						      for ( int i = 1 ;						  
  j < DP_s ;						      	++ j ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] [   i < len ;							  
  ++ j ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] [ 	return DP [ len - 1 ] [ DP_s - 1 ] ;			      ++ i ) for ( int j = 1 ;					  
  return DP [ len - 1 ] [ DP_s - 1 ] ;			      }								      j < DP_s ;						  
}							      								      ++ j ) DP [ i ] [ j ] = DP [ i - 1 ] [ j - 1 ] + DP [ i ] [ 
							      								      return DP [ len - 1 ] [ DP_s - 1 ] ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_DIVISIBLE_PAIRS_SUBSET				      LARGEST_DIVISIBLE_PAIRS_SUBSET				    LARGEST_DIVISIBLE_PAIRS_SUBSET				  LARGEST_DIVISIBLE_PAIRS_SUBSET
--							      --							    --								  --
int largestSubset ( int a [ ] , int n ) {		      static int largestSubset ( int [ ] a , int n ) {		    public static int largestSubset ( int a [ ] , int n ) {	  script_not_found : None
  sort ( a , a + n ) ;					      	Arrays . sort ( a ) ;					      Arrays . sort ( a ) ;					  
  int dp [ n ] ;					      	int [ ] dp = new int [ n ] ;				      int dp [ ] = new int [ n ] ;				  
  dp [ n - 1 ] = 1 ;					      	dp [ n - 1 ] = 1 ;					      dp [ n - 1 ] = 1 ;					  
  for ( int i = n - 2 ;					      	for ( int i = n - 2 ;					      for ( int i = n - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    int mxm = 0 ;					      	  int mxm = 0 ;						    	int mxm = 0 ;						  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( a [ j ] % a [ i ] == 0 ) mxm = max ( mxm , dp 	  j ++ ) {						    	j ++ ) if ( a [ j ] % a [ i ] == 0 ) mxm = Math . max ( m 
    dp [ i ] = 1 + mxm ;				      	    if ( a [ j ] % a [ i ] == 0 ) {			    	dp [ i ] = 1 + mxm ;					  
  }							      	      mxm = Math . max ( mxm , dp [ j ] ) ;		      }								  
  return * max_element ( dp , dp + n ) ;		      	    }							      return Math . max ( dp [ n ] , dp [ n - 1 ] ) ;		  
}							      	  }							    }								  
							      	  dp [ i ] = 1 + mxm ;					    								  
							      	}							    								  
							      	return Arrays . stream ( dp ) . max ( ) . getAsInt ( ) ;    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1
--							      --							    --								  --
int lis ( int arr [ ] , int n ) {			      static int lis ( int arr [ ] , int n ) {			    public static int lis ( int arr [ ] , int n ) {		  error : Exception in thread "main" java.lang.Array
  int lis [ n ] ;					      	int lis [ ] = new int [ n ] ;				      int lis [ ] = new int [ n ] ;				  IndexOutOfBoundsException: Index 0 out of bounds f
  lis [ 0 ] = 1 ;					      	int i , j , max = 0 ;					      lis [ 0 ] = 1 ;						  or length 0 	at DYNAMIC_PROGRAMMING_SET_3_LONGEST_
  for ( int i = 1 ;					      	for ( i = 0 ;						      for ( int i = 1 ;						  INCREASING_SUBSEQUENCE_1.f_filled(DYNAMIC_PROGRAMM
  i < n ;						      	i < n ;							      i < n ;							  ING_SET_3_LONGEST_INCREASING_SUBSEQUENCE_1.java:33
  i ++ ) {						      	i ++ ) lis [ i ] = 1 ;					      i ++ ) {							  ) 	at DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING
    lis [ i ] = 1 ;					      	for ( i = 1 ;						    	lis [ i ] = 1 ;						  _SUBSEQUENCE_1.main(DYNAMIC_PROGRAMMING_SET_3_LONG
    for ( int j = 0 ;					      	i < n ;							    	for ( int j = 0 ;					  EST_INCREASING_SUBSEQUENCE_1.java:72)
    j < i ;						      	i ++ ) for ( j = 0 ;					    	j < i ;							  
    j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j  	j < i ;							    	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j  
  }							      	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]    }								  
  return * max_element ( lis , lis + n ) ;		      	for ( i = 0 ;						      return Arrays . binarySearch ( lis , n ) ;		  
}							      	i < n ;							    }								  
							      	i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;		    								  
							      	return max ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY		      FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			    FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY			  FIND_SUM_UNIQUE_SUB_ARRAY_SUM_GIVEN_ARRAY
--							      --							    --								  --
long long int findSubarraySum ( int arr [ ] , int n ) {	      static int findSubarraySum ( int [ ] arr , int n ) {	    public static long findSubarraySum ( int arr [ ] , int n ) {  failure : #Results:3, 10
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  unordered_map < int , int > m ;			      	HashMap < Integer , Integer > m = new HashMap < Integer , I   HashMap < Integer , Integer > m = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int sum = 0 ;					      	  int sum = 0 ;						    	int sum = 0 ;						  
    for ( int j = i ;					      	  for ( int j = i ;					    	for ( int j = i ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      sum += arr [ j ] ;				      	    sum += arr [ j ] ;					    	  sum += arr [ j ] ;					  
      m [ sum ] ++ ;					      	    if ( m . containsKey ( sum ) ) {			    	  m . put ( sum , ++ i ) ;				  
    }							      	      m . put ( sum , m . get ( sum ) + 1 ) ;		    	}							  
  }							      	    }							      }								  
  for ( auto x : m ) if ( x . second == 1 ) res += x . first  	    else {						      for ( Map . Entry < Integer , Integer > x : m . entrySet (  
  return res ;						      	      m . put ( sum , 1 ) ;				      return res ;						  
}							      	    }							    }								  
							      	  }							    								  
							      	}							    								  
							      	for ( Map . Entry < Integer , Integer > x : m . entrySet (  								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN DYNAMIC_PROGRAMMING_SET_28_MINIMUM_INSERTIONS_TO_FORM_A_PALIN
--							      --							    --								  --
int findMinInsertions ( char str [ ] , int l , int h ) {      static int findMinInsertions ( char str [ ] , int l , int h ) public static int findMinInsertions ( char str [ ] , int l ,  success : None
  if ( l > h ) return INT_MAX ;				      	if ( l > h ) return Integer . MAX_VALUE ;		      if ( l > h ) return Integer . MAX_VALUE ;			  
  if ( l == h ) return 0 ;				      	if ( l == h ) return 0 ;				      if ( l == h ) return 0 ;					  
  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1 	if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1   if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1 
  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str 	return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str   return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_ MINIMUM_NUMBER_OF_MANIPULATIONS_REQUIRED_TO_MAKE_TWO_STRINGS_
--							      --							    --								  --
int countManipulations ( string s1 , string s2 ) {	      static int countManipulations ( String s1 , String s2 ) {	    public static int countManipulations ( String s1 , String s2  script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int char_count [ 26 ] ;				      	int char_count [ ] = new int [ 26 ] ;			      int char_count [ ] = new int [ 26 ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < 26 ;						      	i < s1 . length ( ) ;					      i < 26 ;							  
  i ++ ) {						      	i ++ ) char_count [ s1 . charAt ( i ) - 'a' ] ++ ;	      i ++ ) char_count [ i ] = 0 ;				  
    char_count [ i ] = 0 ;				      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  }							      	i < s2 . length ( ) ;					      i < s1 . length ( ) ;					  
  for ( int i = 0 ;					      	i ++ ) if ( char_count [ s2 . charAt ( i ) - 'a' ] -- <= 0    i ++ ) {							  
  i < s1 . length ( ) ;					      	return count ;						    	char_count [ s1 . charAt ( i ) - 'a' ] ++ ;		  
  i ++ ) char_count [ s1 [ i ] - 'a' ] ++ ;		      }								      }								  
  for ( int i = 0 ;					      								      for ( int i = 0 ;						  
  i < s2 . length ( ) ;					      								      i < s2 . length ( ) ;					  
  i ++ ) {						      								      i ++ ) {							  
    char_count [ s2 [ i ] - 'a' ] -- ;			      								    	char_count [ s2 . charAt ( i ) - 'a' ] -- ;		  
    if ( char_count [ s2 [ i ] - 'a' ] < 0 ) count ++ ;	      								    	if ( char_count [ s2 . charAt ( i ) - 'a' ] < 0 ) {	  
  }							      								    	  count ++ ;						  
  return count ;					      								    	}							  
}							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	      SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	    SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER	  SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER
--							      --							    --								  --
int sumOfSubstrings ( string num ) {			      public static int sumOfSubstrings ( String num ) {	    public static int sumOfSubstrings ( String num ) {		  error : SUM_OF_ALL_SUBSTRINGS_OF_A_STRING_REPRESEN
  int n = num . length ( ) ;				      	int n = num . length ( ) ;				      int n = num . length ( ) ;				  TING_A_NUMBER.java:32: error: cannot find symbol
  int sumofdigit [ n ] ;				      	int sumofdigit [ ] = new int [ n ] ;			      int [ ] sumofdigit = new int [ n ] ;			   sumofdigit [ 0 ] = toDigit ( num . charAt ( 0 ) )
  sumofdigit [ 0 ] = toDigit ( num [ 0 ] ) ;		      	sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ;		      sumofdigit [ 0 ] = toDigit ( num . charAt ( 0 ) ) ;	   ;			  ^   symbol:	method toDig
  int res = sumofdigit [ 0 ] ;				      	int res = sumofdigit [ 0 ] ;				      int res = sumofdigit [ 0 ] ;				  it(char)   location: class SUM_OF_ALL_SUBSTRINGS_O
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  F_A_STRING_REPRESENTING_A_NUMBER SUM_OF_ALL_SUBSTR
  i < n ;						      	i < n ;							      i < n ;							  INGS_OF_A_STRING_REPRESENTING_A_NUMBER.java:37: er
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  ror: cannot find symbol     int numi = toDigit ( n
    int numi = toDigit ( num [ i ] ) ;			      	  int numi = num . charAt ( i ) - '0' ;			    	int numi = toDigit ( num . charAt ( i ) ) ;		  um . charAt ( i ) ) ;		       ^   symbol:
    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i 	  sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i 	sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i  method toDigit(char)	  location: class SUM_OF_ALL
    res += sumofdigit [ i ] ;				      	  res += sumofdigit [ i ] ;				    	res += sumofdigit [ i ] ;				  _SUBSTRINGS_OF_A_STRING_REPRESENTING_A_NUMBER 2 er
  }							      	}							      }								  rors
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		      FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2		    FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2			  FIND_ALL_DIVISORS_OF_A_NATURAL_NUMBER_SET_2
--							      --							    --								  --
void printDivisors ( int n ) {				      static void printDivisors ( int n ) {			    public static void printDivisors ( int n ) {		  script_not_found : None
  vector < int > v ;					      	Vector < Integer > v = new Vector < > ( ) ;		      ArrayList < Integer > list = new ArrayList < > ( ) ;	  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= sqrt ( n ) ;					      	i <= Math . sqrt ( n ) ;				      i <= Math . sqrt ( n ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( n % i == 0 ) {					      	  if ( n % i == 0 ) {					    	if ( n % i == 0 ) {					  
      if ( n / i == i ) printf ( "%d " , i ) ;		      	    if ( n / i == i ) System . out . printf ( "%d " , i ) ; 	  if ( n / i == i ) {					  
      else {						      	    else {						    	    System . out . print ( i + " " ) ;			  
	printf ( "%d " , i ) ;				      	      System . out . printf ( "%d " , i ) ;		    	  }							  
	v . push_back ( n / i ) ;			      	      v . add ( n / i ) ;				    	  else {						  
      }							      	    }							    	    System . out . print ( i + " " ) ;			  
    }							      	  }							    	    list . add ( n / i ) ;				  
  }							      	}							    	  }							  
  for ( int i = v . size ( ) - 1 ;			      	for ( int i = v . size ( ) - 1 ;			    	}							  
  i >= 0 ;						      	i >= 0 ;						      }								  
  i -- ) printf ( "%d " , v [ i ] ) ;			      	i -- ) System . out . printf ( "%d " , v . get ( i ) ) ;      for ( int i = list . size ( ) - 1 ;			  
}							      }								      i >= 0 ;							  
							      								      i -- ) {							  
							      								    	System . out . print ( list . get ( i ) + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS		      COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS			    COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS			  COUNT_WAYS_BUILD_STREET_GIVEN_CONSTRAINTS
--							      --							    --								  --
long countWays ( int n ) {				      static long countWays ( int n ) {				    public static long countWays ( int n ) {			  success : None
  long dp [ 2 ] [ n + 1 ] ;				      	long dp [ ] [ ] = new long [ 2 ] [ n + 1 ] ;		      long [ ] [ ] dp = new long [ 2 ] [ n + 1 ] ;		  
  dp [ 0 ] [ 1 ] = 1 ;					      	dp [ 0 ] [ 1 ] = 1 ;					      dp [ 0 ] [ 1 ] = 1 ;					  
  dp [ 1 ] [ 1 ] = 2 ;					      	dp [ 1 ] [ 1 ] = 2 ;					      dp [ 1 ] [ 1 ] = 2 ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]  	  dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]  	dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]  
    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i -  	  dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i -  	dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i -  
  }							      	}							      }								  
  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;		      	return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;		      return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECAMANS_SEQUENCE					      RECAMANS_SEQUENCE						    RECAMANS_SEQUENCE						  RECAMANS_SEQUENCE
--							      --							    --								  --
int recaman ( int n ) {					      static void recaman ( int n ) {				    public static int recaman ( int n ) {			  script_not_found : None
  int arr [ n ] ;					      	int arr [ ] = new int [ n ] ;				      int arr [ ] = new int [ n ] ;				  
  arr [ 0 ] = 0 ;					      	arr [ 0 ] = 0 ;						      arr [ 0 ] = 0 ;						  
  printf ( "%d, " , arr [ 0 ] ) ;			      	System . out . print ( arr [ 0 ] + " ," ) ;		      System . out . print ( arr [ 0 ] + ", " ) ;		  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int curr = arr [ i - 1 ] - i ;			      	  int curr = arr [ i - 1 ] - i ;			    	int curr = arr [ i - 1 ] - i ;				  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < i ;						      	  j < i ;						    	j < i ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( ( arr [ j ] == curr ) || curr < 0 ) {	      	    if ( ( arr [ j ] == curr ) || curr < 0 ) {		    	  if ( ( arr [ j ] == curr ) || curr < 0 ) {		  
	curr = arr [ i - 1 ] + i ;			      	      curr = arr [ i - 1 ] + i ;			    	    curr = arr [ i - 1 ] + i ;				  
	break ;						      	      break ;						    	    break ;						  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
    arr [ i ] = curr ;					      	  arr [ i ] = curr ;					    	arr [ i ] = curr ;					  
    printf ( "%d, " , arr [ i ] ) ;			      	  System . out . print ( arr [ i ] + ", " ) ;		    	System . out . print ( arr [ i ] + ", " ) ;		  
  }							      	}							      }								  
}							      }								      return n ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			      PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP			    PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP				  PRINT_TRIPLETS_SORTED_ARRAY_FORM_AP
--							      --							    --								  --
void printAllAPTriplets ( int arr [ ] , int n ) {	      static void printAllAPTriplets ( int [ ] arr , int n ) {	    public static void printAllAPTriplets ( int arr [ ] , int n ) script_not_found : None
  unordered_set < int > s ;				      	ArrayList < Integer > s = new ArrayList < Integer > ( ) ;     HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      int diff = arr [ j ] - arr [ i ] ;		      	    int diff = arr [ j ] - arr [ i ] ;			    	  int diff = arr [ j ] - arr [ i ] ;			  
      if ( s . find ( arr [ i ] - diff ) != s . end ( ) ) cou 	    boolean exists = s . contains ( arr [ i ] - diff ) ;    	  if ( s . contains ( arr [ i ] - diff ) ) {		  
    }							      	    if ( exists ) System . out . println ( arr [ i ] - diff 	    System . out . println ( arr [ i ] - diff + " " + arr 
    s . insert ( arr [ i ] ) ;				      	  }							    	  }							  
  }							      	  s . add ( arr [ i ] ) ;				    	}							  
}							      	}							    	s . add ( arr [ i ] ) ;					  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_FACTORS_BIG_NUMBER				      PRIME_FACTORS_BIG_NUMBER					    PRIME_FACTORS_BIG_NUMBER					  PRIME_FACTORS_BIG_NUMBER
--							      --							    --								  --
void factorize ( long long n ) {			      static void factorize ( long n ) {			    public static void factorize ( long n ) {			  script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  while ( ! ( n % 2 ) ) {				      	while ( ! ( n % 2 > 0 ) ) {				      while ( ! ( n % 2 ) ) {					  
    n >>= 1 ;						      	  n >>= 1 ;						    	n >>= 1 ;						  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
  }							      	}							      }								  
  if ( count ) cout << 2 << "  " << count << endl ;	      	if ( count > 0 ) {					      if ( count > 0 ) {					  
  for ( long long i = 3 ;				      	  System . out . println ( "2" + " " + count ) ;	    	System . out . println ( 2 + "	" + count ) ;		  
  i <= sqrt ( n ) ;					      	}							      }								  
  i += 2 ) {						      	for ( long i = 3 ;					      for ( long i = 3 ;					  
    count = 0 ;						      	i <= ( long ) Math . sqrt ( n ) ;			      i <= Math . sqrt ( n ) ;					  
    while ( n % i == 0 ) {				      	i += 2 ) {						      i += 2 ) {						  
      count ++ ;					      	  count = 0 ;						    	count = 0 ;						  
      n = n / i ;					      	  while ( n % i == 0 ) {				    	while ( n % i == 0 ) {					  
    }							      	    count ++ ;						    	  count ++ ;						  
    if ( count ) cout << i << "	 " << count << endl ;	      	    n = n / i ;						    	  n = n / i ;						  
  }							      	  }							    	}							  
  if ( n > 2 ) cout << n << "  " << 1 << endl ;		      	  if ( count > 0 ) {					    	if ( count > 0 ) {					  
}							      	    System . out . println ( i + " " + count ) ;	    	  System . out . println ( i + "  " + count ) ;		  
							      	  }							    	}							  
							      	}							      }								  
							      	if ( n > 2 ) {						      if ( n > 2 ) {						  
							      	  System . out . println ( n + " " + "1" ) ;		    	System . out . println ( n + "	" + 1 ) ;		  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI SMALLEST_LENGTH_STRING_WITH_REPEATED_REPLACEMENT_OF_TWO_DISTI
--							      --							    --								  --
int stringReduction ( string str ) {			      static int stringReduction ( String str ) {		    public static int stringReduction ( String str ) {		  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int count [ 3 ] = {					      	int count [ ] = new int [ 3 ] ;				      int [ ] count = new int [ 3 ] ;				  
    0 }							      	for ( int i = 0 ;					      count [ 0 ] = 0 ;						  
    ;							      	i < n ;							      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	++ i ) {						      i < n ;							  
    i < n ;						      	  count [ str . charAt ( i ) - 'a' ] ++ ;		      ++ i ) {							  
    ++ i ) count [ str [ i ] - 'a' ] ++ ;		      	}							    	count [ str . charAt ( i ) - 'a' ] ++ ;			  
    if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ]  	if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ] ==   }								  
    if ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) && ( coun 	  return n ;						      if ( count [ 0 ] == n || count [ 1 ] == n || count [ 2 ] == 
    return 1 ;						      	}							    	return n ;						  
  }							      	if ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) && ( count    }								  
							      	  return 2 ;						      if ( ( count [ 0 ] % 2 ) == ( count [ 1 ] % 2 ) && ( count  
							      	}							    	return 2 ;						  
							      	return 1 ;						      }								  
							      }								      return 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1   REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1   REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1	  REPLACE_OCCURRENCES_STRING_AB_C_WITHOUT_USING_EXTRA_SPACE_1
--							      --							    --								  --
void translate ( char * str ) {				      static void translate ( char str [ ] ) {			    public static void translate ( String str ) {		  script_not_found : None
  int len = strlen ( str ) ;				      	int len = str . length ;				      int len = str . length ( ) ;				  
  if ( len < 2 ) return ;				      	if ( len < 2 ) return ;					      if ( len < 2 ) return ;					  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  int j = 0 ;						      	int j = 0 ;						      int j = 0 ;						  
  while ( j < len - 1 ) {				      	while ( j < len - 1 ) {					      while ( j < len - 1 ) {					  
    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {	      	  if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {	    	if ( str . charAt ( j ) == 'A' && str . charAt ( j + 1 )  
      j = j + 2 ;					      	    j = j + 2 ;						    	  j = j + 2 ;						  
      str [ i ++ ] = 'C' ;				      	    str [ i ++ ] = 'C' ;				    	  str . setCharAt ( i ++ , 'C' ) ;			  
      continue ;					      	    continue ;						    	  continue ;						  
    }							      	  }							    	}							  
    str [ i ++ ] = str [ j ++ ] ;			      	  str [ i ++ ] = str [ j ++ ] ;				    	str . setCharAt ( i ++ , str . charAt ( j ++ ) ) ;	  
  }							      	}							      }								  
  if ( j == len - 1 ) str [ i ++ ] = str [ j ] ;	      	if ( j == len - 1 ) str [ i ++ ] = str [ j ] ;		      if ( j == len - 1 ) {					  
  str [ i ] = ' ' ;					      	str [ i ] = ' ' ;					    	str . setCharAt ( i ++ , str . charAt ( j ) ) ;		  
}							      	str [ len - 1 ] = ' ' ;					      }								  
							      }								      str . setCharAt ( i ++ , '\n' ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU MAXIMUM_POSSIBLE_SUM_WINDOW_ARRAY_ELEMENTS_WINDOW_ARRAY_UNIQU
--							      --							    --								  --
int returnMaxSum ( int A [ ] , int B [ ] , int n ) {	      static int returnMaxSum ( int A [ ] , int B [ ] , int n ) {   public static int returnMaxSum ( int A [ ] , int B [ ] , int  success : None
  unordered_set < int > mp ;				      	Set < Integer > mp = new HashSet < Integer > ( ) ;	      HashSet < Integer > mp = new HashSet < > ( ) ;		  
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  int curr_sum = 0 , curr_begin = 0 ;			      	int curr_sum = 0 , curr_begin = 0 ;			      int currSum = 0 , currBegin = 0 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  ++ i ) {						      	++ i ) {						      ++ i ) {							  
    while ( mp . find ( A [ i ] ) != mp . end ( ) ) {	      	  while ( mp . contains ( A [ i ] ) ) {			    	while ( mp . contains ( A [ i ] ) ) {			  
      mp . erase ( A [ curr_begin ] ) ;			      	    mp . remove ( A [ curr_begin ] ) ;			    	  mp . remove ( A [ currBegin ] ) ;			  
      curr_sum -= B [ curr_begin ] ;			      	    curr_sum -= B [ curr_begin ] ;			    	  currSum -= B [ currBegin ] ;				  
      curr_begin ++ ;					      	    curr_begin ++ ;					    	  currBegin ++ ;					  
    }							      	  }							    	}							  
    mp . insert ( A [ i ] ) ;				      	  mp . add ( A [ i ] ) ;				    	mp . add ( A [ i ] ) ;					  
    curr_sum += B [ i ] ;				      	  curr_sum += B [ i ] ;					    	currSum += B [ i ] ;					  
    result = max ( result , curr_sum ) ;		      	  result = Integer . max ( result , curr_sum ) ;	    	result = Math . max ( result , currSum ) ;		  
  }							      	}							      }								  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_ALMOST_SORTED_ARRAY				      SEARCH_ALMOST_SORTED_ARRAY				    SEARCH_ALMOST_SORTED_ARRAY					  SEARCH_ALMOST_SORTED_ARRAY
--							      --							    --								  --
int binarySearch ( int arr [ ] , int l , int r , int x ) {    int binarySearch ( int arr [ ] , int l , int r , int x ) {    public static int binarySearch ( int arr [ ] , int l , int r  success : None
  if ( r >= l ) {					      	if ( r >= l ) {						      if ( r >= l ) {						  
    int mid = l + ( r - l ) / 2 ;			      	  int mid = l + ( r - l ) / 2 ;				    	int mid = l + ( r - l ) / 2 ;				  
    if ( arr [ mid ] == x ) return mid ;		      	  if ( arr [ mid ] == x ) return mid ;			    	if ( arr [ mid ] == x ) return mid ;			  
    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) 	  if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) 	if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) 
    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) 	  if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) 	if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) 
    if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 	  if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 	if ( arr [ mid ] > x ) return binarySearch ( arr , l , mi 
    return binarySearch ( arr , mid + 2 , r , x ) ;	      	  return binarySearch ( arr , mid + 2 , r , x ) ;	    	return binarySearch ( arr , mid + 2 , r , x ) ;		  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
void solve ( int i , int par , int a [ ] , int n , int k , in static void solve ( int i , int par , int a [ ] , int n , int public static void solve ( int i , int par , int [ ] a , int  script_not_found : None
  if ( par > k ) return ;				      	if ( par > k ) return ;					      if ( par > k ) return ;					  
  if ( par == k && i == n - 1 ) {			      	if ( par == k && i == n - 1 ) {				      if ( par == k && i == n - 1 ) {				  
    ans = min ( ans , current_ans ) ;			      	  ans = Math . min ( ans , current_ans ) ;		    	ans = Math . min ( ans , currentAns ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  for ( int j = i + 1 ;					      	for ( int j = i + 1 ;					      for ( int j = i + 1 ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) solve ( j , par + 1 , a , n , k , current_ans + ( a  	j ++ ) solve ( j , par + 1 , a , n , k , current_ans + ( a    j ++ ) {							  
}							      }								    	solve ( j , par + 1 , a , n , k , currentAns + ( a [ j ]  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			      FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			    FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1			  FIND_THE_LARGEST_SUBARRAY_WITH_0_SUM_1
--							      --							    --								  --
int maxLen ( int arr [ ] , int n ) {			      static int maxLen ( int arr [ ] ) {			    public static int maxLen ( int arr [ ] , int n ) {		  script_not_found : None
  unordered_map < int , int > presum ;			      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    HashMap < Integer , Integer > presum = new HashMap < > ( )  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  int max_len = 0 ;					      	int max_len = 0 ;					      int maxLen = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < arr . length ;					      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum += arr [ i ] ;					      	  sum += arr [ i ] ;					    	sum += arr [ i ] ;					  
    if ( arr [ i ] == 0 && max_len == 0 ) max_len = 1 ;	      	  if ( arr [ i ] == 0 && max_len == 0 ) max_len = 1 ;	    	if ( arr [ i ] == 0 && maxLen == 0 ) {			  
    if ( sum == 0 ) max_len = i + 1 ;			      	  if ( sum == 0 ) max_len = i + 1 ;			    	  maxLen = 1 ;						  
    if ( presum . find ( sum ) != presum . end ( ) ) {	      	  Integer prev_i = hM . get ( sum ) ;			    	}							  
      max_len = max ( max_len , i - presum [ sum ] ) ;	      	  if ( prev_i != null ) max_len = Math . max ( max_len , i  	if ( sum == 0 ) {					  
    }							      	  else hM . put ( sum , i ) ;				    	  maxLen = i + 1 ;					  
    else {						      	}							    	}							  
      presum [ sum ] = i ;				      	return max_len ;					    	if ( presum . containsKey ( sum ) ) {			  
    }							      }								    	  maxLen = Math . max ( maxLen , i - presum . get ( sum ) 
  }							      								    	}							  
  return max_len ;					      								    	else {							  
}							      								    	  presum . put ( sum , i ) ;				  
							      								    	}							  
							      								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES    CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES	  CHECK_STRING_CAN_OBTAINED_ROTATING_ANOTHER_STRING_2_PLACES
--							      --							    --								  --
bool isRotated ( string str1 , string str2 ) {		      static boolean isRotated ( String str1 , String str2 ) {	    public static boolean isRotated ( String str1 , String str2 ) success : None
  if ( str1 . length ( ) != str2 . length ( ) ) return false  	if ( str1 . length ( ) != str2 . length ( ) ) return false    if ( str1 . length ( ) != str2 . length ( ) ) return false  
  string clock_rot = "" ;				      	String clock_rot = "" ;					      String clock_rot = "" ;					  
  string anticlock_rot = "" ;				      	String anticlock_rot = "" ;				      String anticlock_rot = "" ;				  
  int len = str2 . length ( ) ;				      	int len = str2 . length ( ) ;				      int len = str2 . length ( ) ;				  
  anticlock_rot = anticlock_rot + str2 . substr ( len - 2 , 2 	anticlock_rot = anticlock_rot + str2 . substring ( len - 2    anticlock_rot = anticlock_rot + str2 . substring ( len - 2  
  clock_rot = clock_rot + str2 . substr ( 2 ) + str2 . substr 	clock_rot = clock_rot + str2 . substring ( 2 ) + str2 . sub   clock_rot = clock_rot + str2 . substring ( 2 ) + str2 . sub 
  return ( str1 . compare ( clock_rot ) == 0 || str1 . compar 	return ( str1 . equals ( clock_rot ) || str1 . equals ( ant   return ( str1 . equalsIgnoreCase ( clock_rot ) || str1 . eq 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1	      MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		    MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1		  MINIMUM_LENGTH_SUBARRAY_SUM_GREATER_GIVEN_VALUE_1
--							      --							    --								  --
int smallestSubWithSum ( int arr [ ] , int n , int x ) {      static int smallestSubWithSum ( int arr [ ] , int n , int x ) public static int smallestSubWithSum ( int arr [ ] , int n ,  success : None
  int curr_sum = 0 , min_len = n + 1 ;			      	int curr_sum = 0 , min_len = n + 1 ;			      int currSum = 0 , minLen = n + 1 ;			  
  int start = 0 , end = 0 ;				      	int start = 0 , end = 0 ;				      int start = 0 , end = 0 ;					  
  while ( end < n ) {					      	while ( end < n ) {					      while ( end < n ) {					  
    while ( curr_sum <= x && end < n ) {		      	  while ( curr_sum <= x && end < n ) {			    	while ( currSum <= x && end < n ) {			  
      if ( curr_sum <= 0 && x > 0 ) {			      	    if ( curr_sum <= 0 && x > 0 ) {			    	  if ( currSum <= 0 && x > 0 ) {			  
	start = end ;					      	      start = end ;					    	    start = end ;					  
	curr_sum = 0 ;					      	      curr_sum = 0 ;					    	    currSum = 0 ;					  
      }							      	    }							    	  }							  
      curr_sum += arr [ end ++ ] ;			      	    curr_sum += arr [ end ++ ] ;			    	  currSum += arr [ end ++ ] ;				  
    }							      	  }							    	}							  
    while ( curr_sum > x && start < n ) {		      	  while ( curr_sum > x && start < n ) {			    	while ( currSum > x && start < n ) {			  
      if ( end - start < min_len ) min_len = end - start ;    	    if ( end - start < min_len ) min_len = end - start ;    	  if ( end - start < minLen ) {				  
      curr_sum -= arr [ start ++ ] ;			      	    curr_sum -= arr [ start ++ ] ;			    	    minLen = end - start ;				  
    }							      	  }							    	  }							  
  }							      	}							    	  currSum -= arr [ start ++ ] ;				  
  return min_len ;					      	return min_len ;					    	}							  
}							      }								      }								  
							      								      return minLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STEINS_ALGORITHM_FOR_FINDING_GCD_1			      STEINS_ALGORITHM_FOR_FINDING_GCD_1			    STEINS_ALGORITHM_FOR_FINDING_GCD_1				  STEINS_ALGORITHM_FOR_FINDING_GCD_1
--							      --							    --								  --
int gcd ( int a , int b ) {				      static int gcd ( int a , int b ) {			    public static int gcd ( int a , int b ) {			  error : STEINS_ALGORITHM_FOR_FINDING_GCD_1.java:31
  if ( a == b ) return a ;				      	if ( a == b ) return a ;				      if ( a == b ) return a ;					  : error: incompatible types: int cannot be convert
  if ( a == 0 ) return b ;				      	if ( a == 0 ) return b ;				      if ( a == 0 ) return b ;					  ed to boolean	  if ( ~ a & 1 ) {	      ^ STEI
  if ( b == 0 ) return a ;				      	if ( b == 0 ) return a ;				      if ( b == 0 ) return a ;					  NS_ALGORITHM_FOR_FINDING_GCD_1.java:32: error: inc
  if ( ~ a & 1 ) {					      	if ( ( ~ a & 1 ) == 1 ) {				      if ( ~ a & 1 ) {						  ompatible types: int cannot be converted to boolea
    if ( b & 1 ) return gcd ( a >> 1 , b ) ;		      	  if ( ( b & 1 ) == 1 ) return gcd ( a >> 1 , b ) ;	    	if ( b & 1 ) return gcd ( a >> 1 , b ) ;		  n	if ( b & 1 ) return f_filled ( a >> 1 , b )
    else return gcd ( a >> 1 , b >> 1 ) << 1 ;		      	  else return gcd ( a >> 1 , b >> 1 ) << 1 ;		    	else return gcd ( a >> 1 , b >> 1 ) << 1 ;		  ;	       ^ STEINS_ALGORITHM_FOR_FINDING_GCD_1.
  }							      	}							      }								  java:35: error: incompatible types: int cannot be
  if ( ~ b & 1 ) return gcd ( a , b >> 1 ) ;		      	if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ;	      if ( ~ b & 1 ) return gcd ( a , b >> 1 ) ;		  converted to boolean	 if ( ~ b & 1 ) return f_fil
  if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;	      	if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;	      if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;		  led ( a , b >> 1 ) ;		  ^ 3 errors
  return gcd ( ( b - a ) >> 1 , a ) ;			      	return gcd ( ( b - a ) >> 1 , a ) ;			      return gcd ( ( b - a ) >> 1 , a ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		      CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		    CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER		  CHECK_HALF_STRING_CHARACTER_FREQUENCY_CHARACTER
--							      --							    --								  --
bool checkCorrectOrNot ( string s ) {			      static boolean checkCorrectOrNot ( String s ) {		    public static boolean checkCorrectOrNot ( String s ) {	  script_not_found : None
  int count1 [ MAX_CHAR ] = {				      	int [ ] count1 = new int [ MAX_CHAR ] ;			      int [ ] count1 = new int [ s . length ( ) ] ;		  
    0 }							      	int [ ] count2 = new int [ MAX_CHAR ] ;			      int [ ] count2 = new int [ s . length ( ) ] ;		  
    ;							      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
    int count2 [ MAX_CHAR ] = {				      	if ( n == 1 ) return true ;				      if ( n == 1 ) return true ;				  
      0 }						      	for ( int i = 0 , j = n - 1 ;				      for ( int i = 0 , j = n - 1 ;				  
      ;							      	i < j ;							      i < j ;							  
      int n = s . length ( ) ;				      	i ++ , j -- ) {						      i ++ , j -- ) {						  
      if ( n == 1 ) return true ;			      	  count1 [ s . charAt ( i ) - 'a' ] ++ ;		    	count1 [ s . charAt ( i ) - 'a' ] ++ ;			  
      for ( int i = 0 , j = n - 1 ;			      	  count2 [ s . charAt ( j ) - 'a' ] ++ ;		    	count2 [ s . charAt ( j ) - 'a' ] ++ ;			  
      i < j ;						      	}							      }								  
      i ++ , j -- ) {					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
	count1 [ s [ i ] - 'a' ] ++ ;			      	i < MAX_CHAR ;						      i < MAX_CHAR ;						  
	count2 [ s [ j ] - 'a' ] ++ ;			      	i ++ ) if ( count1 [ i ] != count2 [ i ] ) return false ;     i ++ ) if ( count1 [ i ] != count2 [ i ] ) return false ;	  
      }							      	return true ;						      return true ;						  
      for ( int i = 0 ;					      }								    }								  
      i < MAX_CHAR ;					      								    								  
      i ++ ) if ( count1 [ i ] != count2 [ i ] ) return false 								    								  
      return true ;					      								    								  
    }							      								    								  
    -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		      LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		    LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING		  LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_STRING
--							      --							    --								  --
string lexicographicSubConcat ( string s ) {		      static String lexicographicSubConcat ( String s ) {	    public static String lexicographicSubConcat ( String s ) {	  error : LEXICOGRAPHICAL_CONCATENATION_SUBSTRINGS_S
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  TRING.java:43: error: incompatible types: String c
  int sub_count = n * ( n + 1 ) / 2 ;			      	int sub_count = n * ( n + 1 ) / 2 ;			      int sub_count = n * ( n + 1 ) / 2 ;			  annot be converted to char   len ++ ) arr [ index
  string arr [ sub_count ] ;				      	String [ ] arr = new String [ sub_count ] ;		      char [ ] arr = new char [ sub_count ] ;			  ++ ] = s . substring ( i , len ) ;
  int index = 0 ;					      	int index = 0 ;						      int index = 0 ;						  			       ^ 1 error
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int len = 1 ;				      	i ++ ) for ( int len = 1 ;				      i ++ ) for ( int len = 1 ;				  
  len <= n - i ;					      	len <= n - i ;						      len <= n - i ;						  
  len ++ ) arr [ index ++ ] = s . substr ( i , len ) ;	      	len ++ ) {						      len ++ ) arr [ index ++ ] = s . substring ( i , len ) ;	  
  sort ( arr , arr + sub_count ) ;			      	  arr [ index ++ ] = s . substring ( i , i + len ) ;	      Arrays . sort ( arr ) ;					  
  string res = "" ;					      	}							      String res = "" ;						  
  for ( int i = 0 ;					      	Arrays . sort ( arr ) ;					      for ( int i = 0 ;						  
  i < sub_count ;					      	String res = "" ;					      i < sub_count ;						  
  i ++ ) res += arr [ i ] ;				      	for ( int i = 0 ;					      i ++ ) res += arr [ i ] ;					  
  return res ;						      	i < sub_count ;						      return res ;						  
}							      	i ++ ) res += arr [ i ] ;				    }								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_N_DIGITS_NON_DECREASING_INTEGERS			      NUMBER_N_DIGITS_NON_DECREASING_INTEGERS			    NUMBER_N_DIGITS_NON_DECREASING_INTEGERS			  NUMBER_N_DIGITS_NON_DECREASING_INTEGERS
--							      --							    --								  --
int nonDecNums ( int n ) {				      static int nonDecNums ( int n ) {				    public static int nonDecNums ( int n ) {			  success : None
  int a [ n + 1 ] [ 10 ] ;				      	int [ ] [ ] a = new int [ n + 1 ] [ 10 ] ;		      int a [ ] [ ] = new int [ n + 1 ] [ 10 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= 9 ;						      	i <= 9 ;						      i <= 9 ;							  
  i ++ ) a [ 0 ] [ i ] = 1 ;				      	i ++ ) a [ 0 ] [ i ] = 1 ;				      i ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	a [ 0 ] [ i ] = 1 ;					  
  i <= n ;						      	i <= n ;						      }								  
  i ++ ) a [ i ] [ 9 ] = 1 ;				      	i ++ ) a [ i ] [ 9 ] = 1 ;				      for ( int i = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      i <= n ;							  
  i <= n ;						      	i <= n ;						      i ++ ) {							  
  i ++ ) for ( int j = 8 ;				      	i ++ ) for ( int j = 8 ;				    	a [ i ] [ 9 ] = 1 ;					  
  j >= 0 ;						      	j >= 0 ;						      }								  
  j -- ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1  	j -- ) a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1    for ( int i = 1 ;						  
  return a [ n ] [ 0 ] ;				      	return a [ n ] [ 0 ] ;					      i <= n ;							  
}							      }								      i ++ ) {							  
							      								    	for ( int j = 8 ;					  
							      								    	j >= 0 ;						  
							      								    	j -- ) {						  
							      								    	  a [ i ] [ j ] = a [ i - 1 ] [ j ] + a [ i ] [ j + 1 ] ; 
							      								    	}							  
							      								      }								  
							      								      return a [ n ] [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT FIND_THE_MINIMUM_COST_TO_REACH_A_DESTINATION_WHERE_EVERY_STAT
--							      --							    --								  --
INT_MAX int minCost ( int cost [ ] [ N ] ) {		      static int minCost ( int cost [ ] [ ] ) {			    public static int minCost ( int cost [ ] [ ] ) {		  script_not_found : None
  int dist [ N ] ;					      	int dist [ ] = new int [ N ] ;				      int dist [ ] [ ] = new int [ N ] [ N ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) dist [ i ] = INF ;				      	i ++ ) dist [ i ] = INF ;				      i ++ ) {							  
  dist [ 0 ] = 0 ;					      	dist [ 0 ] = 0 ;					    	dist [ i ] = INF ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < N ;						      	i < N ;							      dist [ 0 ] = 0 ;						  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      for ( int i = 0 ;						  
  j < N ;						      	j < N ;							      i < N ;							  
  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) di 	j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) di   i ++ ) for ( int j = i + 1 ;				  
  return dist [ N - 1 ] ;				      	return dist [ N - 1 ] ;					      j < N ;							  
}							      }								      j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) di 
							      								      return dist [ N - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K     GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	    GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K	  GIVEN_N_X_N_SQUARE_MATRIX_FIND_SUM_SUB_SQUARES_SIZE_K_X_K
--							      --							    --								  --
void printSumSimple ( int mat [ ] [ n ] , int k ) {	      static void printSumSimple ( int mat [ ] [ ] , int k ) {	    public static void printSumSimple ( int [ ] [ ] mat , int n ) script_not_found : None
  if ( k > n ) return ;					      	if ( k > n ) return ;					      if ( k > n ) {						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	return ;						  
  i < n - k + 1 ;					      	i < n - k + 1 ;						      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < n - k + 1 ;						  
    j < n - k + 1 ;					      	  j < n - k + 1 ;					      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      int sum = 0 ;					      	    int sum = 0 ;					    	j < n - k + 1 ;						  
      for ( int p = i ;					      	    for ( int p = i ;					    	j ++ ) {						  
      p < k + i ;					      	    p < k + i ;						    	  int sum = 0 ;						  
      p ++ ) for ( int q = j ;				      	    p ++ ) for ( int q = j ;				    	  for ( int p = i ;					  
      q < k + j ;					      	    q < k + j ;						    	  p < k + i ;						  
      q ++ ) sum += mat [ p ] [ q ] ;			      	    q ++ ) sum += mat [ p ] [ q ] ;			    	  p ++ ) for ( int q = j ;				  
      cout << sum << "	" ;				      	    System . out . print ( sum + " " ) ;		    	  q < k + j ;						  
    }							      	  }							    	  q ++ ) sum += mat [ p ] [ q ] ;			  
    cout << endl ;					      	  System . out . println ( ) ;				    	  System . out . print ( sum + "  " ) ;			  
  }							      	}							    	}							  
}							      }								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			      KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			    KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT			  KTH_ADJACENT_NODE_GRAPH_VERTEX_WEIGHT
--							      --							    --								  --
void printkthnode ( vector < pair < int , int >> adj [ ] , in static void printkthnode ( Vector < pair > adj [ ] , int wt [ public static void printkthnode ( int [ ] adj , int [ ] wt ,  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sort ( adj [ i ] . begin ( ) , adj [ i ] . end ( ) ) 	i ++ ) Collections . sort ( adj [ i ] , new Comparator < pa   i ++ ) {							  
  for ( int i = 0 ;					      	  public int compare ( pair p1 , pair p2 ) {		    	Arrays . sort ( adj [ i ] ) ;				  
  i < n ;						      	    return p1 . first - p2 . first ;			      }								  
  i ++ ) {						      	  }							      for ( int i = 0 ;						  
    if ( adj [ i ] . size ( ) >= k ) cout << adj [ i ] [ adj  	}							      i < n ;							  
    else cout << "-1" ;					      	) ;							      i ++ ) {							  
  }							      	for ( int i = 0 ;					    	if ( adj [ i ] >= k ) {					  
}							      	i < n ;							    	  System . out . println ( adj [ i ] [ adj [ i ] - k ] )  
							      	i ++ ) {						    	}							  
							      	  if ( adj [ i ] . size ( ) >= k ) System . out . print ( a 	else {							  
							      	  else System . out . print ( "-1" ) ;			    	  System . out . println ( "-1" ) ;			  
							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1		      FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1			    FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1			  FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1
--							      --							    --								  --
string getMinNumberForPattern ( string seq ) {		      static String getMinNumberForPattern ( String seq ) {	    public static String getMinNumberForPattern ( String seq ) {  error : FORM_MINIMUM_NUMBER_FROM_GIVEN_SEQUENCE_1.
  int n = seq . length ( ) ;				      	int n = seq . length ( ) ;				      int n = seq . length ( ) ;				  java:49: error: incompatible types: possible lossy
  if ( n >= 9 ) return "-1" ;				      	if ( n >= 9 ) return "-1" ;				      if ( n >= 9 ) {						   conversion from int to char	       sb . setCharA
  string result ( n + 1 , ' ' ) ;			      	char result [ ] = new char [ n + 1 ] ;			    	return "-1" ;						  t ( j + 1 , '0' + count ++ ) ;
  int count = 1 ;					      	int count = 1 ;						      }								  		    ^ Note: Some messages have been
  for ( int i = 0 ;					      	for ( int i = 0 ;					      StringBuilder sb = new StringBuilder ( n + 1 ) ;		  simplified; recompile with -Xdiags:verbose to get
  i <= n ;						      	i <= n ;						      sb . append ( ' ' ) ;					  full output 1 error
  i ++ ) {						      	i ++ ) {						      int count = 1 ;						  
    if ( i == n || seq [ i ] == 'I' ) {			      	  if ( i == n || seq . charAt ( i ) == 'I' ) {		      for ( int i = 0 ;						  
      for ( int j = i - 1 ;				      	    for ( int j = i - 1 ;				      i <= n ;							  
      j >= - 1 ;					      	    j >= - 1 ;						      i ++ ) {							  
      j -- ) {						      	    j -- ) {						    	if ( i == n || seq . charAt ( i ) == 'I' ) {		  
	result [ j + 1 ] = '0' + count ++ ;		      	      result [ j + 1 ] = ( char ) ( ( int ) '0' + count ++  	  for ( int j = i - 1 ;					  
	if ( j >= 0 && seq [ j ] == 'I' ) break ;	      	      if ( j >= 0 && seq . charAt ( j ) == 'I' ) break ;    	  j >= - 1 ;						  
      }							      	    }							    	  j -- ) {						  
    }							      	  }							    	    sb . setCharAt ( j + 1 , '0' + count ++ ) ;		  
  }							      	}							    	    if ( j >= 0 && seq . charAt ( j ) == 'I' ) {	  
  return result ;					      	return new String ( result ) ;				    	      break ;						  
}							      }								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return sb . toString ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DICE_THROW_PROBLEM					      DICE_THROW_PROBLEM					    DICE_THROW_PROBLEM						  DICE_THROW_PROBLEM
--							      --							    --								  --
int findWays ( int m , int n , int x ) {		      public static long findWays ( int m , int n , int x ) {	    public static int findWays ( int m , int n , int x ) {	  error : Exception in thread "main" java.lang.Array
  int table [ n + 1 ] [ x + 1 ] ;			      	long [ ] [ ] table = new long [ n + 1 ] [ x + 1 ] ;	      int [ ] [ ] table = new int [ n + 1 ] [ x + 1 ] ;		  StoreException: java.lang.Integer 	at java.base/ja
  memset ( table , 0 , sizeof ( table ) ) ;		      	for ( int j = 1 ;					      Arrays . fill ( table , 0 ) ;				  va.util.Arrays.fill(Arrays.java:3638) 	at DICE_THR
  for ( int j = 1 ;					      	j <= m && j <= x ;					      for ( int j = 1 ;						  OW_PROBLEM.f_filled(DICE_THROW_PROBLEM.java:35) 	a
  j <= m && j <= x ;					      	j ++ ) table [ 1 ] [ j ] = 1 ;				      j <= m && j <= x ;					  t DICE_THROW_PROBLEM.main(DICE_THROW_PROBLEM.java:
  j ++ ) table [ 1 ] [ j ] = 1 ;			      	for ( int i = 2 ;					      j ++ ) {							  89)
  for ( int i = 2 ;					      	i <= n ;						    	table [ 1 ] [ j ] = 1 ;					  
  i <= n ;						      	i ++ ) {						      }								  
  i ++ ) for ( int j = 1 ;				      	  for ( int j = 1 ;					      for ( int i = 2 ;						  
  j <= x ;						      	  j <= x ;						      i <= n ;							  
  j ++ ) for ( int k = 1 ;				      	  j ++ ) {						      i ++ ) for ( int j = 1 ;					  
  k <= m && k < j ;					      	    for ( int k = 1 ;					      j <= x ;							  
  k ++ ) table [ i ] [ j ] += table [ i - 1 ] [ j - k ] ;     	    k < j && k <= m ;					      j ++ ) for ( int k = 1 ;					  
  return table [ n ] [ x ] ;				      	    k ++ ) table [ i ] [ j ] += table [ i - 1 ] [ j - k ] ;   k <= m && k < j ;						  
}							      	  }							      k ++ ) table [ i ] [ j ] += table [ i - 1 ] [ j - k ] ;	  
							      	}							      return table [ n ] [ x ] ;				  
							      	return table [ n ] [ x ] ;				    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			      CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			    CONVERT_DECIMAL_FRACTION_BINARY_NUMBER			  CONVERT_DECIMAL_FRACTION_BINARY_NUMBER
--							      --							    --								  --
string decimalToBinary ( double num , int k_prec ) {	      static String decimalToBinary ( double num , int k_prec ) {   public static String decimalToBinary ( double num , int k_pre script_not_found : None
  string binary = "" ;					      	String binary = "" ;					      String binary = "" ;					  
  int Integral = num ;					      	int Integral = ( int ) num ;				      int Integral = num ;					  
  double fractional = num - Integral ;			      	double fractional = num - Integral ;			      double fractional = num - Integral ;			  
  while ( Integral ) {					      	while ( Integral > 0 ) {				      while ( Integral > 0 ) {					  
    int rem = Integral % 2 ;				      	  int rem = Integral % 2 ;				    	int rem = Integral % 2 ;				  
    binary . push_back ( rem + '0' ) ;			      	  binary += ( ( char ) ( rem + '0' ) ) ;		    	binary += ( char ) ( rem + '0' ) ;			  
    Integral /= 2 ;					      	  Integral /= 2 ;					    	Integral /= 2 ;						  
  }							      	}							      }								  
  reverse ( binary . begin ( ) , binary . end ( ) ) ;	      	binary = reverse ( binary ) ;				      Collections . reverse ( binary ) ;			  
  binary . push_back ( '.' ) ;				      	binary += ( '.' ) ;					      binary += '.' ;						  
  while ( k_prec -- ) {					      	while ( k_prec -- > 0 ) {				      while ( k_prec -- > 0 ) {					  
    fractional *= 2 ;					      	  fractional *= 2 ;					    	fractional *= 2 ;					  
    int fract_bit = fractional ;			      	  int fract_bit = ( int ) fractional ;			    	int fractBit = fractional ;				  
    if ( fract_bit == 1 ) {				      	  if ( fract_bit == 1 ) {				    	if ( fractBit == 1 ) {					  
      fractional -= fract_bit ;				      	    fractional -= fract_bit ;				    	  fractional -= fractBit ;				  
      binary . push_back ( 1 + '0' ) ;			      	    binary += ( char ) ( 1 + '0' ) ;			    	  binary += ( char ) ( 1 + '0' ) ;			  
    }							      	  }							    	}							  
    else binary . push_back ( 0 + '0' ) ;		      	  else {						    	else {							  
  }							      	    binary += ( char ) ( 0 + '0' ) ;			    	  binary += ( char ) ( 0 + '0' ) ;			  
  return binary ;					      	  }							    	}							  
}							      	}							      }								  
							      	return binary ;						      return binary ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_PATH_TRIANGLE				      MINIMUM_SUM_PATH_TRIANGLE					    MINIMUM_SUM_PATH_TRIANGLE					  MINIMUM_SUM_PATH_TRIANGLE
--							      --							    --								  --
int minSumPath ( vector < vector < int >> & A ) {	      static int minSumPath ( ) {				    public static int minSumPath ( int [ ] A ) {		  script_not_found : None
  int memo [ A . size ( ) ] ;				      	int [ ] memo = new int [ A . length ] ;			      int [ ] memo = new int [ A . length ] ;			  
  int n = A . size ( ) - 1 ;				      	int n = A . length - 1 ;				      int n = A . length - 1 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < A [ n ] . size ( ) ;				      	i < A [ n ] . length ;					      i < A [ n ] . length ;					  
  i ++ ) memo [ i ] = A [ n ] [ i ] ;			      	i ++ ) memo [ i ] = A [ n ] [ i ] ;			      i ++ ) {							  
  for ( int i = A . size ( ) - 2 ;			      	for ( int i = A . length - 2 ;				    	memo [ i ] = A [ n ] [ i ] ;				  
  i >= 0 ;						      	i >= 0 ;						      }								  
  i -- ) for ( int j = 0 ;				      	i -- ) for ( int j = 0 ;				      for ( int i = A . length - 2 ;				  
  j < A [ i ] . size ( ) ;				      	j < A [ i ] . length ;					      i >= 0 ;							  
  j ++ ) memo [ j ] = A [ i ] [ j ] + min ( memo [ j ] , memo 	j ++ ) memo [ j ] = A [ i ] [ j ] + ( int ) Math . min ( me   i -- ) for ( int j = 0 ;					  
  return memo [ 0 ] ;					      	return memo [ 0 ] ;					      j < A [ i ] . length ;					  
}							      }								      j ++ ) memo [ j ] = A [ i ] [ j ] + Math . min ( memo [ j ] 
							      								      return memo [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TEMPLE_OFFERINGS					      TEMPLE_OFFERINGS						    TEMPLE_OFFERINGS						  TEMPLE_OFFERINGS
--							      --							    --								  --
int offeringNumber ( int n , int templeHeight [ ] ) {	      static int offeringNumber ( int n , int templeHeight [ ] ) {  public static int offeringNumber ( int n , int [ ] templeHeig success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  ++ i ) {						      	++ i ) {						      ++ i ) {							  
    int left = 0 , right = 0 ;				      	  int left = 0 , right = 0 ;				    	int left = 0 , right = 0 ;				  
    for ( int j = i - 1 ;				      	  for ( int j = i - 1 ;					    	for ( int j = i - 1 ;					  
    j >= 0 ;						      	  j >= 0 ;						    	j >= 0 ;						  
    -- j ) {						      	  -- j ) {						    	-- j ) {						  
      if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) ++ l 	    if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) ++ l 	  if ( templeHeight [ j ] < templeHeight [ j + 1 ] ) {	  
      else break ;					      	    else break ;					    	    ++ left ;						  
    }							      	  }							    	  }							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	  else {						  
    j < n ;						      	  j < n ;						    	    break ;						  
    ++ j ) {						      	  ++ j ) {						    	  }							  
      if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) ++ r 	    if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) ++ r 	}							  
      else break ;					      	    else break ;					    	for ( int j = i + 1 ;					  
    }							      	  }							    	j < n ;							  
    sum += max ( right , left ) + 1 ;			      	  sum += Math . max ( right , left ) + 1 ;		    	++ j ) {						  
  }							      	}							    	  if ( templeHeight [ j ] < templeHeight [ j - 1 ] ) {	  
  return sum ;						      	return sum ;						    	    ++ right ;						  
}							      }								    	  }							  
							      								    	  else {						  
							      								    	    break ;						  
							      								    	  }							  
							      								    	}							  
							      								    	sum += Math . max ( right , left ) + 1 ;		  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_ DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_ DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_ DIFFERENCE_BETWEEN_HIGHEST_AND_LEAST_FREQUENCIES_IN_AN_ARRAY_
--							      --							    --								  --
int findDiff ( int arr [ ] , int n ) {			      static int findDiff ( int arr [ ] , int n ) {		    public static int findDiff ( int arr [ ] , int n ) {	  failure : #Results:0, 10
  unordered_map < int , int > hm ;			      	Map < Integer , Integer > mp = new HashMap < > ( ) ;	      HashMap < Integer , Integer > hm = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) hm [ arr [ i ] ] ++ ;				      	i ++ ) {						      i ++ ) {							  
  int max_count = 0 , min_count = n ;			      	  if ( mp . containsKey ( arr [ i ] ) ) {		    	hm . put ( arr [ i ] , ++ i ) ;				  
  for ( auto x : hm ) {					      	    mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;     }								  
    max_count = max ( max_count , x . second ) ;	      	  }							      int maxCount = 0 , minCount = n ;				  
    min_count = min ( min_count , x . second ) ;	      	  else {						      for ( Map . Entry < Integer , Integer > x : hm . entrySet ( 
  }							      	    mp . put ( arr [ i ] , 1 ) ;			    	maxCount = Math . max ( maxCount , x . getValue ( ) ) ;	  
  return ( max_count - min_count ) ;			      	  }							    	minCount = Math . min ( minCount , x . getValue ( ) ) ;	  
}							      	}							      }								  
							      	int max_count = 0 , min_count = n ;			      return ( maxCount - minCount ) ;				  
							      	for ( Map . Entry < Integer , Integer > x : mp . entrySet ( }								  
							      	  max_count = Math . max ( max_count , x . getValue ( ) ) ; 								  
							      	  min_count = Math . min ( min_count , x . getValue ( ) ) ; 								  
							      	}							    								  
							      	return ( max_count - min_count ) ;			    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_WITH_GIVEN_SUM_1				      COUNT_PAIRS_WITH_GIVEN_SUM_1				    COUNT_PAIRS_WITH_GIVEN_SUM_1				  COUNT_PAIRS_WITH_GIVEN_SUM_1
--							      --							    --								  --
int getPairsCount ( int arr [ ] , int n , int sum ) {	      static int getPairsCount ( int n , int sum ) {		    public static int getPairsCount ( int arr [ ] , int n , int s script_not_found : None
  unordered_map < int , int > m ;			      	HashMap < Integer , Integer > hm = new HashMap < > ( ) ;      HashMap < Integer , Integer > m = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) m [ arr [ i ] ] ++ ;				      	i ++ ) {						      i ++ ) {							  
  int twice_count = 0 ;					      	  if ( ! hm . containsKey ( arr [ i ] ) ) hm . put ( arr [  	m . put ( arr [ i ] , ++ i ) ;				  
  for ( int i = 0 ;					      	  hm . put ( arr [ i ] , hm . get ( arr [ i ] ) + 1 ) ;	      }								  
  i < n ;						      	}							      int twice_count = 0 ;					  
  i ++ ) {						      	int twice_count = 0 ;					      for ( int i = 0 ;						  
    twice_count += m [ sum - arr [ i ] ] ;		      	for ( int i = 0 ;					      i < n ;							  
    if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ;      	i < n ;							      i ++ ) {							  
  }							      	i ++ ) {						    	twice_count += m . get ( sum - arr [ i ] ) ;		  
  return twice_count / 2 ;				      	  if ( hm . get ( sum - arr [ i ] ) != null ) twice_count + 	if ( sum - arr [ i ] == arr [ i ] ) {			  
}							      	  if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ;	    	  twice_count -- ;					  
							      	}							    	}							  
							      	return twice_count / 2 ;				      }								  
							      }								      return twice_count / 2 ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR
--							      --							    --								  --
void bitonicGenerator ( int arr [ ] , int n ) {		      static void bitonicGenerator ( int arr [ ] , int n ) {	    public static void bitonicGenerator ( int arr [ ] , int n ) { script_not_found : None
  int i = 1 ;						      	int i = 1 ;						      int i = 1 ;						  
  int j = n - 1 ;					      	int j = n - 1 ;						      int j = n - 1 ;						  
  if ( j % 2 != 0 ) j -- ;				      	if ( j % 2 != 0 ) j -- ;				      if ( j % 2 != 0 ) {					  
  while ( i < j ) {					      	while ( i < j ) {					    	j -- ;							  
    swap ( arr [ i ] , arr [ j ] ) ;			      	  arr = swap ( arr , i , j ) ;				      }								  
    i += 2 ;						      	  i += 2 ;						      while ( i < j ) {						  
    j -= 2 ;						      	  j -= 2 ;						    	Arrays . swap ( arr , i , j ) ;				  
  }							      	}							    	i += 2 ;						  
  sort ( arr , arr + ( n + 1 ) / 2 ) ;			      	Arrays . sort ( arr , 0 , ( n + 1 ) / 2 ) ;		    	j -= 2 ;						  
  sort ( arr + ( n + 1 ) / 2 , arr + n , greater < int > ( )  	Arrays . sort ( arr , ( n + 1 ) / 2 , n ) ;		      }								  
}							      	int low = ( n + 1 ) / 2 , high = n - 1 ;		      Arrays . sort ( arr , arr . length - ( n + 1 ) / 2 ) ;	  
							      	while ( low < high ) {					      Arrays . sort ( arr , ( n + 1 ) / 2 , arr . length , new Co 
							      	  Integer temp = arr [ low ] ;				    	public int compare ( Integer o1 , Integer o2 ) {	  
							      	  arr [ low ] = arr [ high ] ;				    	  return o2 . compareTo ( o1 ) ;			  
							      	  arr [ high ] = temp ;					    	}							  
							      	  low ++ ;						      }								  
							      	  high -- ;						      ) ;							  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ISBN					      PROGRAM_CHECK_ISBN					    PROGRAM_CHECK_ISBN						  PROGRAM_CHECK_ISBN
--							      --							    --								  --
bool isValidISBN ( string & isbn ) {			      static boolean isValidISBN ( String isbn ) {		    public static boolean isValidISBN ( String isbn ) {		  success : None
  int n = isbn . length ( ) ;				      	int n = isbn . length ( ) ;				      int n = isbn . length ( ) ;				  
  if ( n != 10 ) return false ;				      	if ( n != 10 ) return false ;				      if ( n != 10 ) return false ;				  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < 9 ;						      	i < 9 ;							      i < 9 ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int digit = isbn [ i ] - '0' ;			      	  int digit = isbn . charAt ( i ) - '0' ;		    	int digit = isbn . charAt ( i ) - '0' ;			  
    if ( 0 > digit || 9 < digit ) return false ;	      	  if ( 0 > digit || 9 < digit ) return false ;		    	if ( 0 > digit || 9 < digit ) return false ;		  
    sum += ( digit * ( 10 - i ) ) ;			      	  sum += ( digit * ( 10 - i ) ) ;			    	sum += ( digit * ( 10 - i ) ) ;				  
  }							      	}							      }								  
  char last = isbn [ 9 ] ;				      	char last = isbn . charAt ( 9 ) ;			      char last = isbn . charAt ( 9 ) ;				  
  if ( last != 'X' && ( last < '0' || last > '9' ) ) return f 	if ( last != 'X' && ( last < '0' || last > '9' ) ) return f   if ( last != 'X' && ( last < '0' || last > '9' ) ) return f 
  sum += ( ( last == 'X' ) ? 10 : ( last - '0' ) ) ;	      	sum += ( ( last == 'X' ) ? 10 : ( last - '0' ) ) ;	      sum += ( ( last == 'X' ) ? 10 : ( last - '0' ) ) ;	  
  return ( sum % 11 == 0 ) ;				      	return ( sum % 11 == 0 ) ;				      return ( sum % 11 == 0 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			      FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT			    FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT				  FIND_POSSIBLE_ROTATE_PAGE_ANGLE_NOT
--							      --							    --								  --
void possibleOrNot ( long long a1 , long long a2 , long long  static void possibleOrNot ( long a1 , long a2 , long b1 , lon public static void possibleOrNot ( long a1 , long a2 , long b script_not_found : None
  long long dis1 = pow ( b1 - a1 , 2 ) + pow ( b2 - a2 , 2 )  	long dis1 = ( long ) Math . pow ( b1 - a1 , 2 ) + ( long )    long dis1 = Math . pow ( b1 - a1 , 2 ) + Math . pow ( b2 -  
  long long dis2 = pow ( c1 - b1 , 2 ) + pow ( c2 - b2 , 2 )  	long dis2 = ( long ) Math . pow ( c1 - b1 , 2 ) + ( long )    long dis2 = Math . pow ( c1 - b1 , 2 ) + Math . pow ( c2 -  
  if ( dis1 != dis2 ) cout << "No" ;			      	if ( dis1 != dis2 ) System . out . print ( "No" ) ;	      if ( dis1 != dis2 ) {					  
  else if ( b1 == ( ( a1 + c1 ) / 2.0 ) && b2 == ( ( a2 + c2  	else if ( b1 == ( ( a1 + c1 ) / 2.0 ) && b2 == ( ( a2 + c2  	System . out . println ( "No" ) ;			  
  else cout << "Yes" ;					      	else System . out . print ( "Yes" ) ;			      }								  
}							      }								      else if ( b1 == ( ( a1 + c1 ) / 2.0 ) && b2 == ( ( a2 + c2  
							      								    	System . out . println ( "No" ) ;			  
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "Yes" ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	      MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	    MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX	  MINIMUM_OPERATIONS_REQUIRED_SET_ELEMENTS_BINARY_MATRIX
--							      --							    --								  --
int minOperation ( bool arr [ N ] [ M ] ) {		      static int minOperation ( boolean arr [ ] [ ] ) {		    public static int minOperation ( boolean [ ] arr ) {	  script_not_found : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = N - 1 ;					      	for ( int i = N - 1 ;					      for ( int i = N - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    for ( int j = M - 1 ;				      	  for ( int j = M - 1 ;					    	for ( int j = M - 1 ;					  
    j >= 0 ;						      	  j >= 0 ;						    	j >= 0 ;						  
    j -- ) {						      	  j -- ) {						    	j -- ) {						  
      if ( arr [ i ] [ j ] == 0 ) {			      	    if ( arr [ i ] [ j ] == false ) {			    	  if ( arr [ i ] [ j ] == 0 ) {				  
	ans ++ ;					      	      ans ++ ;						    	    ans ++ ;						  
	for ( int k = 0 ;				      	      for ( int k = 0 ;					    	    for ( int k = 0 ;					  
	k <= i ;					      	      k <= i ;						    	    k <= i ;						  
	k ++ ) {					      	      k ++ ) {						    	    k ++ ) {						  
	  for ( int h = 0 ;				      		for ( int h = 0 ;				    	      for ( int h = 0 ;					  
	  h <= j ;					      		h <= j ;					    	      h <= j ;						  
	  h ++ ) {					      		h ++ ) {					    	      h ++ ) {						  
	    if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0 ; 		  if ( arr [ k ] [ h ] == true ) {		    		if ( arr [ k ] [ h ] == 1 ) {			  
	    else arr [ k ] [ h ] = 1 ;			      		    arr [ k ] [ h ] = false ;			    		  arr [ k ] [ h ] = 0 ;				  
	  }						      		  }						    		}						  
	}						      		  else {					    		else {						  
      }							      		    arr [ k ] [ h ] = true ;			    		  arr [ k ] [ h ] = 1 ;				  
    }							      		  }						    		}						  
  }							      		}						    	      }							  
  return ans ;						      	      }							    	    }							  
}							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			      MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			    MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM			  MAXIMUM_SUBARRAY_SUM_USING_PREFIX_SUM
--							      --							    --								  --
int maximumSumSubarray ( int arr [ ] , int n ) {	      static int maximumSumSubarray ( int arr [ ] , int n ) {	    public static int maximumSumSubarray ( int arr [ ] , int n )  success : None
  int min_prefix_sum = 0 ;				      	int min_prefix_sum = 0 ;				      int minPrefixSum = 0 ;					  
  int res = numeric_limits < int > :: min ( ) ;		      	int res = Integer . MIN_VALUE ;				      int res = Integer . MIN_VALUE ;				  
  int prefix_sum [ n ] ;				      	int prefix_sum [ ] = new int [ n ] ;			      int prefixSum [ ] = new int [ n ] ;			  
  prefix_sum [ 0 ] = arr [ 0 ] ;			      	prefix_sum [ 0 ] = arr [ 0 ] ;				      prefixSum [ 0 ] = arr [ 0 ] ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ]  	i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ]    i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	prefixSum [ i ] = prefixSum [ i - 1 ] + arr [ i ] ;	  
  i < n ;						      	i < n ;							      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    res = max ( res , prefix_sum [ i ] - min_prefix_sum ) ;   	  res = Math . max ( res , prefix_sum [ i ] - min_prefix_su   i < n ;							  
    min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ]  	  min_prefix_sum = Math . min ( min_prefix_sum , prefix_sum   i ++ ) {							  
  }							      	}							    	res = Math . max ( res , prefixSum [ i ] - minPrefixSum ) 
  return res ;						      	return res ;						    	minPrefixSum = Math . min ( minPrefixSum , prefixSum [ i  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			      DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			    DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER			  DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER
--							      --							    --								  --
bool isDvisibleBy12 ( string num ) {			      static boolean isDvisibleBy12 ( String num ) {		    public static boolean isDvisibleBy12 ( String num ) {	  error : DIVISIBILITY_BY_12_FOR_A_LARGE_NUMBER.java
  if ( num . length ( ) >= 3 ) {			      	if ( num . length ( ) >= 3 ) {				      if ( num . length ( ) >= 3 ) {				  :34: error: incompatible types: int cannot be conv
    int d1 = ( int ) num [ num . length ( ) - 1 ] ;	      	  int d1 = ( int ) num . charAt ( num . length ( ) - 1 ) ;  	int d1 = ( int ) num . charAt ( num . length ( ) - 1 ) ;  erted to boolean     if ( d1 % 2 != 0 ) return ( 0
    if ( d1 % 2 != 0 ) return ( 0 ) ;			      	  if ( d1 % 2 != 0 ) return false ;			    	if ( d1 % 2 != 0 ) return ( 0 ) ;			   ) ;				       ^ 1 error
    int d2 = ( int ) num [ num . length ( ) - 2 ] ;	      	  int d2 = ( int ) num . charAt ( num . length ( ) - 2 ) ;  	int d2 = ( int ) num . charAt ( num . length ( ) - 2 ) ;  
    int sum = 0 ;					      	  int sum = 0 ;						    	int sum = 0 ;						  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i < num . length ( ) ;				      	  i < num . length ( ) ;				    	i < num . length ( ) ;					  
    i ++ ) sum += num [ i ] ;				      	  i ++ ) sum += num . charAt ( i ) ;			    	i ++ ) {						  
    return ( sum % 3 == 0 && ( d2 * 10 + d1 ) % 4 == 0 ) ;    	  return ( sum % 3 == 0 && ( d2 * 10 + d1 ) % 4 == 0 ) ;    	  sum += num . charAt ( i ) ;				  
  }							      	}							    	}							  
  else {						      	else {							    	return ( sum % 3 == 0 && ( d2 * 10 + d1 ) % 4 == 0 ) ;	  
    int number = stoi ( num ) ;				      	  int number = Integer . parseInt ( num ) ;		      }								  
    return ( number % 12 == 0 ) ;			      	  return ( number % 12 == 0 ) ;				      else {							  
  }							      	}							    	int number = Integer . parseInt ( num ) ;		  
}							      }								    	return ( number % 12 == 0 ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM   REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM	  REMOVE_MINIMUM_NUMBER_CHARACTERS_TWO_STRINGS_BECOME_ANAGRAM
--							      --							    --								  --
int remAnagram ( string str1 , string str2 ) {		      static int remAnagram ( String str1 , String str2 ) {	    public static int remAnagram ( String str1 , String str2 ) {  script_not_found : None
  int count1 [ CHARS ] = {				      	int count1 [ ] = new int [ 26 ] ;			      int count1 [ ] = new int [ CHARS ] , count2 [ ] = new int [ 
    0 }							      	int count2 [ ] = new int [ 26 ] ;			      for ( int i = 0 ;						  
    , count2 [ CHARS ] = {				      	for ( int i = 0 ;					      str1 . charAt ( i ) != '\0' ;				  
      0 }						      	i < str1 . length ( ) ;					      i ++ ) {							  
      ;							      	i ++ ) count1 [ str1 . charAt ( i ) - 'a' ] ++ ;	    	count1 [ str1 . charAt ( i ) - 'a' ] ++ ;		  
      for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
      str1 [ i ] != '\0' ;				      	i < str2 . length ( ) ;					      for ( int i = 0 ;						  
      i ++ ) count1 [ str1 [ i ] - 'a' ] ++ ;		      	i ++ ) count2 [ str2 . charAt ( i ) - 'a' ] ++ ;	      str2 . charAt ( i ) != '\0' ;				  
      for ( int i = 0 ;					      	int result = 0 ;					      i ++ ) {							  
      str2 [ i ] != '\0' ;				      	for ( int i = 0 ;					    	count2 [ str2 . charAt ( i ) - 'a' ] ++ ;		  
      i ++ ) count2 [ str2 [ i ] - 'a' ] ++ ;		      	i < 26 ;						      }								  
      int result = 0 ;					      	i ++ ) result += Math . abs ( count1 [ i ] - count2 [ i ] )   int result = 0 ;						  
      for ( int i = 0 ;					      	return result ;						      for ( int i = 0 ;						  
      i < 26 ;						      }								      i < 26 ;							  
      i ++ ) result += abs ( count1 [ i ] - count2 [ i ] ) ;  								      i ++ ) {							  
      return result ;					      								    	result += Math . abs ( count1 [ i ] - count2 [ i ] ) ;	  
    }							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	      LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	    LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS	  LEXICOGRAPHICALLY_SMALLEST_ARRAY_K_CONSECUTIVE_SWAPS
--							      --							    --								  --
void minimizeWithKSwaps ( int arr [ ] , int n , int k ) {     static void minimizeWithKSwaps ( int arr [ ] , int n , int k  public static void minimizeWithKSwaps ( int arr [ ] , int n , script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 && k > 0 ;					      	i < n - 1 && k > 0 ;					      i < n - 1 && k > 0 ;					  
  ++ i ) {						      	++ i ) {						      ++ i ) {							  
    int pos = i ;					      	  int pos = i ;						    	int pos = i ;						  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    ++ j ) {						      	  ++ j ) {						    	++ j ) {						  
      if ( j - i > k ) break ;				      	    if ( j - i > k ) break ;				    	  if ( j - i > k ) break ;				  
      if ( arr [ j ] < arr [ pos ] ) pos = j ;		      	    if ( arr [ j ] < arr [ pos ] ) pos = j ;		    	  if ( arr [ j ] < arr [ pos ] ) {			  
    }							      	  }							    	    pos = j ;						  
    for ( int j = pos ;					      	  int temp ;						    	  }							  
    j > i ;						      	  for ( int j = pos ;					    	}							  
    -- j ) swap ( arr [ j ] , arr [ j - 1 ] ) ;		      	  j > i ;						    	for ( int j = pos ;					  
    k -= pos - i ;					      	  -- j ) {						    	j > i ;							  
  }							      	    temp = arr [ j ] ;					    	-- j ) {						  
}							      	    arr [ j ] = arr [ j - 1 ] ;				    	  swap ( arr [ j ] , arr [ j - 1 ] ) ;			  
							      	    arr [ j - 1 ] = temp ;				    	}							  
							      	  }							    	k -= pos - i ;						  
							      	  k -= pos - i ;					      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		      FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS		    FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS			  FIND_RELATIVE_COMPLEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
void relativeComplement ( int arr1 [ ] , int arr2 [ ] , int n static void relativeComplement ( int arr1 [ ] , int arr2 [ ]  public static void relativeComplement ( int arr1 [ ] , int ar script_not_found : None
  int i = 0 , j = 0 ;					      	int i = 0 , j = 0 ;					      int i = 0 , j = 0 ;					  
  while ( i < n && j < m ) {				      	while ( i < n && j < m ) {				      while ( i < n && j < m ) {				  
    if ( arr1 [ i ] < arr2 [ j ] ) {			      	  if ( arr1 [ i ] < arr2 [ j ] ) {			    	if ( arr1 [ i ] < arr2 [ j ] ) {			  
      cout << arr1 [ i ] << " " ;			      	    System . out . print ( arr1 [ i ] + " " ) ;		    	  System . out . print ( arr1 [ i ] + " " ) ;		  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    else if ( arr1 [ i ] > arr2 [ j ] ) {		      	  else if ( arr1 [ i ] > arr2 [ j ] ) {			    	else if ( arr1 [ i ] > arr2 [ j ] ) {			  
      j ++ ;						      	    j ++ ;						    	  j ++ ;						  
    }							      	  }							    	}							  
    else if ( arr1 [ i ] == arr2 [ j ] ) {		      	  else if ( arr1 [ i ] == arr2 [ j ] ) {		    	else if ( arr1 [ i ] == arr2 [ j ] ) {			  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
      j ++ ;						      	    j ++ ;						    	  j ++ ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  while ( i < n ) cout << arr1 [ i ] << " " ;		      	while ( i < n ) System . out . print ( arr1 [ i ] + " " ) ;   while ( i < n ) {						  
}							      }								    	System . out . print ( arr1 [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY	      FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY	    FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY		  FIND_MINIMUM_ELEMENT_IN_A_SORTED_AND_ROTATED_ARRAY
--							      --							    --								  --
int findMin ( int arr [ ] , int low , int high ) {	      static int findMin ( int arr [ ] , int low , int high ) {	    public static int findMin ( int arr [ ] , int low , int high  success : None
  if ( high < low ) return arr [ 0 ] ;			      	if ( high < low ) return arr [ 0 ] ;			      if ( high < low ) return arr [ 0 ] ;			  
  if ( high == low ) return arr [ low ] ;		      	if ( high == low ) return arr [ low ] ;			      if ( high == low ) return arr [ low ] ;			  
  int mid = low + ( high - low ) / 2 ;			      	int mid = low + ( high - low ) / 2 ;			      int mid = low + ( high - low ) / 2 ;			  
  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return a 	if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return a   if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return a 
  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return ar 	if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return ar   if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return ar 
  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , lo 	if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , lo   if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , lo 
  return findMin ( arr , mid + 1 , high ) ;		      	return findMin ( arr , mid + 1 , high ) ;		      return findMin ( arr , mid + 1 , high ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTERPOLATION_SEARCH					      INTERPOLATION_SEARCH					    INTERPOLATION_SEARCH					  INTERPOLATION_SEARCH
--							      --							    --								  --
int interpolationSearch ( int arr [ ] , int n , int x ) {     static int interpolationSearch ( int x ) {		    public static int interpolationSearch ( int arr [ ] , int n , script_not_found : None
  int lo = 0 , hi = ( n - 1 ) ;				      	int lo = 0 , hi = ( arr . length - 1 ) ;		      int lo = 0 , hi = ( n - 1 ) ;				  
  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {  	while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {    while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {  
    if ( lo == hi ) {					      	  if ( lo == hi ) {					    	if ( lo == hi ) {					  
      if ( arr [ lo ] == x ) return lo ;		      	    if ( arr [ lo ] == x ) return lo ;			    	  if ( arr [ lo ] == x ) return lo ;			  
      return - 1 ;					      	    return - 1 ;					    	  return - 1 ;						  
    }							      	  }							    	}							  
    int pos = lo + ( ( ( double ) ( hi - lo ) / ( arr [ hi ]  	  int pos = lo + ( ( ( hi - lo ) / ( arr [ hi ] - arr [ lo  	int pos = lo + ( ( ( double ) ( hi - lo ) / ( arr [ hi ]  
    if ( arr [ pos ] == x ) return pos ;		      	  if ( arr [ pos ] == x ) return pos ;			    	if ( arr [ pos ] == x ) return pos ;			  
    if ( arr [ pos ] < x ) lo = pos + 1 ;		      	  if ( arr [ pos ] < x ) lo = pos + 1 ;			    	if ( arr [ pos ] < x ) lo = pos + 1 ;			  
    else hi = pos - 1 ;					      	  else hi = pos - 1 ;					    	else hi = pos - 1 ;					  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1			  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS_1
--							      --							    --								  --
void diagonalsquare ( int mat [ ] [ MAX ] , int row , int col static void diagonalsquare ( int mat [ ] [ ] , int row , int  public static void diagonalsquare ( int [ ] [ ] mat , int row script_not_found : None
  cout << " \nDiagonal one : " ;			      	System . out . print ( " Diagonal one : " ) ;		      System . out . print ( "\nDiagonal one : " ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < row ;						      	i < row ;						      i < row ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) System . out . print ( mat [ i ] [ i ] * mat [ i ] [ 
    cout << mat [ i ] [ i ] * mat [ i ] [ i ] << " " ;	      	  System . out . print ( mat [ i ] [ i ] * mat [ i ] [ i ]    System . out . print ( "\n\nDiagonal two : " ) ;		  
  }							      	}							      for ( int i = 0 ;						  
  cout << " \n\nDiagonal two : " ;			      	System . out . println ( ) ;				      i < row ;							  
  for ( int i = 0 ;					      	System . out . print ( " Diagonal two : " ) ;		      i ++ ) System . out . print ( mat [ i ] [ row - i - 1 ] * m 
  i < row ;						      	for ( int i = 0 ;					    }								  
  i ++ ) {						      	i < row ;						    								  
    cout << mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 	i ++ ) {						    								  
  }							      	  System . out . print ( mat [ i ] [ row - i - 1 ] * mat [  								  
}							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_ PROGRAM_SWAP_UPPER_DIAGONAL_ELEMENTS_LOWER_DIAGONAL_ELEMENTS_
--							      --							    --								  --
void swapUpperToLower ( int arr [ n ] [ n ] ) {		      static void swapUpperToLower ( int arr [ ] [ ] ) {	    public static void swapUpperToLower ( int arr [ ] [ ] ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < arr . length ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < arr . length ;					  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      int temp = arr [ i ] [ j ] ;			      	    int temp = arr [ i ] [ j ] ;			    	  int temp = arr [ i ] [ j ] ;				  
      arr [ i ] [ j ] = arr [ j ] [ i ] ;		      	    arr [ i ] [ j ] = arr [ j ] [ i ] ;			    	  arr [ i ] [ j ] = arr [ j ] [ i ] ;			  
      arr [ j ] [ i ] = temp ;				      	    arr [ j ] [ i ] = temp ;				    	  arr [ j ] [ i ] = temp ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < arr . length ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < arr . length ;					  
    j ++ ) cout << arr [ i ] [ j ] << " " ;		      	  j ++ ) System . out . print ( arr [ i ] [ j ] + " " ) ;   	j ++ ) {						  
    cout << endl ;					      	  System . out . println ( ) ;				    	  System . out . print ( arr [ i ] [ j ] + " " ) ;	  
  }							      	}							    	}							  
}							      }								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
OVERLAPPING_SUM_TWO_ARRAY				      OVERLAPPING_SUM_TWO_ARRAY					    OVERLAPPING_SUM_TWO_ARRAY					  OVERLAPPING_SUM_TWO_ARRAY
--							      --							    --								  --
int findSum ( int A [ ] , int B [ ] , int n ) {		      static int findSum ( int [ ] A , int [ ] B , int n ) {	    public static int findSum ( int A [ ] , int B [ ] , int n ) { failure : #Results:4, 10
  unordered_map < int , int > hash ;			      	HashMap < Integer , Integer > hash = new HashMap < > ( ) ;    HashMap < Integer , Integer > hash = new HashMap < > ( ) ;  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    hash [ A [ i ] ] ++ ;				      	  if ( hash . containsKey ( A [ i ] ) ) hash . put ( A [ i  	hash . put ( A [ i ] , ++ A [ i ] ) ;			  
    hash [ B [ i ] ] ++ ;				      	  else hash . put ( A [ i ] , 1 ) ;			    	hash . put ( B [ i ] , ++ B [ i ] ) ;			  
  }							      	  if ( hash . containsKey ( B [ i ] ) ) hash . put ( B [ i    }								  
  int sum = 0 ;						      	  else hash . put ( B [ i ] , 1 ) ;			      int sum = 0 ;						  
  for ( auto x : hash ) if ( x . second == 1 ) sum += x . fir 	}							      for ( Map . Entry < Integer , Integer > x : hash . entrySet 
  return sum ;						      	int sum = 0 ;						      return sum ;						  
}							      	for ( Map . Entry entry : hash . entrySet ( ) ) {	    }								  
							      	  if ( Integer . parseInt ( ( entry . getValue ( ) ) . toSt 								  
							      	}							    								  
							      	return sum ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S	      FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S		    FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S		  FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S
--							      --							    --								  --
long long int MaxDotProduct ( int A [ ] , int B [ ] , int m , static int MaxDotProduct ( int A [ ] , int B [ ] , int m , in public static long MaxDotProduct ( int A [ ] , int B [ ] , in error : Exception in thread "main" java.lang.Array
  long long int dp [ n + 1 ] [ m + 1 ] ;		      	int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		      long dp [ ] [ ] = new long [ n + 1 ] [ m + 1 ] ;		  StoreException: java.lang.Integer 	at java.base/ja
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	for ( int [ ] row : dp ) Arrays . fill ( row , 0 ) ;	      Arrays . fill ( dp , 0 ) ;				  va.util.Arrays.fill(Arrays.java:3638) 	at FIND_MAX
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  IMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S.f_filled(
  i <= n ;						      	i <= n ;						      i <= n ;							  FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_INSERTION_0S.j
  i ++ ) for ( int j = i ;				      	i ++ ) for ( int j = i ;				      i ++ ) for ( int j = i ;					  ava:27) 	at FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAYS_IN
  j <= m ;						      	j <= m ;						      j <= m ;							  SERTION_0S.main(FIND_MAXIMUM_DOT_PRODUCT_TWO_ARRAY
  j ++ ) dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + (  	j ++ ) dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1   j ++ ) {							  S_INSERTION_0S.java:87)
  return dp [ n ] [ m ] ;				      	return dp [ n ] [ m ] ;					    	dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] +  
}							      }								      }								  
							      								      return dp [ n ] [ m ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	      DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M	    DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M		  DIFFERENT_WAYS_SUM_N_USING_NUMBERS_GREATER_EQUAL_M
--							      --							    --								  --
int numberofways ( int n , int m ) {			      static int numberofways ( int n , int m ) {		    public static int numberofways ( int n , int m ) {		  script_not_found : None
  int dp [ n + 2 ] [ n + 2 ] ;				      	int dp [ ] [ ] = new int [ n + 2 ] [ n + 2 ] ;		      int [ ] [ ] dp = new int [ n + 2 ] [ n + 2 ] ;		  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	dp [ 0 ] [ n + 1 ] = 1 ;				      Arrays . fill ( dp , 0 ) ;				  
  dp [ 0 ] [ n + 1 ] = 1 ;				      	for ( int k = n ;					      dp [ 0 ] [ n + 1 ] = 1 ;					  
  for ( int k = n ;					      	k >= m ;						      for ( int k = n ;						  
  k >= m ;						      	k -- ) {						      k >= m ;							  
  k -- ) {						      	  for ( int i = 0 ;					      k -- ) {							  
    for ( int i = 0 ;					      	  i <= n ;						    	for ( int i = 0 ;					  
    i <= n ;						      	  i ++ ) {						    	i <= n ;						  
    i ++ ) {						      	    dp [ i ] [ k ] = dp [ i ] [ k + 1 ] ;		    	i ++ ) {						  
      dp [ i ] [ k ] = dp [ i ] [ k + 1 ] ;		      	    if ( i - k >= 0 ) dp [ i ] [ k ] = ( dp [ i ] [ k ] + d 	  dp [ i ] [ k ] = dp [ i ] [ k + 1 ] ;			  
      if ( i - k >= 0 ) dp [ i ] [ k ] = ( dp [ i ] [ k ] + d 	  }							    	  if ( i - k >= 0 ) {					  
    }							      	}							    	    dp [ i ] [ k ] = ( dp [ i ] [ k ] + dp [ i - k ] [ k  
  }							      	return dp [ n ] [ m ] ;					    	  }							  
  return dp [ n ] [ m ] ;				      }								    	}							  
}							      								      }								  
							      								      return dp [ n ] [ m ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			      PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2			    PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2				  PROGRAM_FOR_NTH_FIBONACCI_NUMBER_2
--							      --							    --								  --
int fib ( int n ) {					      public static int fib ( int n ) {				    public static int fib ( int n ) {				  script_not_found : None
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return 0 ;					  
  if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ;	      	if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ;	      if ( n == 1 || n == 2 ) return ( f [ n ] = 1 ) ;		  
  if ( f [ n ] ) return f [ n ] ;			      	if ( f [ n ] != 0 ) return f [ n ] ;			      if ( f [ n ] != 0 ) return f [ n ] ;			  
  int k = ( n & 1 ) ? ( n + 1 ) / 2 : n / 2 ;		      	int k = ( n & 1 ) == 1 ? ( n + 1 ) / 2 : n / 2 ;	      int k = ( n & 1 ) != 0 ? ( n + 1 ) / 2 : n / 2 ;		  
  f [ n ] = ( n & 1 ) ? ( fib ( k ) * fib ( k ) + fib ( k - 1 	f [ n ] = ( n & 1 ) == 1 ? ( fib ( k ) * fib ( k ) + fib (    f [ n ] = ( n & 1 ) != 0 ? ( fib ( k ) * fib ( k ) + fib (  
  return f [ n ] ;					      	return f [ n ] ;					      return f [ n ] ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PREFIX_ALSO_SUFFIX_1				      LONGEST_PREFIX_ALSO_SUFFIX_1				    LONGEST_PREFIX_ALSO_SUFFIX_1				  LONGEST_PREFIX_ALSO_SUFFIX_1
--							      --							    --								  --
int longestPrefixSuffix ( string s ) {			      static int longestPrefixSuffix ( String s ) {		    public static int longestPrefixSuffix ( String s ) {	  success : None
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  int lps [ n ] ;					      	int lps [ ] = new int [ n ] ;				      int [ ] lps = new int [ n ] ;				  
  lps [ 0 ] = 0 ;					      	lps [ 0 ] = 0 ;						      lps [ 0 ] = 0 ;						  
  int len = 0 ;						      	int len = 0 ;						      int len = 0 ;						  
  int i = 1 ;						      	int i = 1 ;						      int i = 1 ;						  
  while ( i < n ) {					      	while ( i < n ) {					      while ( i < n ) {						  
    if ( s [ i ] == s [ len ] ) {			      	  if ( s . charAt ( i ) == s . charAt ( len ) ) {	    	if ( s . charAt ( i ) == s . charAt ( len ) ) {		  
      len ++ ;						      	    len ++ ;						    	  len ++ ;						  
      lps [ i ] = len ;					      	    lps [ i ] = len ;					    	  lps [ i ] = len ;					  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      if ( len != 0 ) {					      	    if ( len != 0 ) {					    	  if ( len != 0 ) len = lps [ len - 1 ] ;		  
	len = lps [ len - 1 ] ;				      	      len = lps [ len - 1 ] ;				    	  else {						  
      }							      	    }							    	    lps [ i ] = 0 ;					  
      else {						      	    else {						    	    i ++ ;						  
	lps [ i ] = 0 ;					      	      lps [ i ] = 0 ;					    	  }							  
	i ++ ;						      	      i ++ ;						    	}							  
      }							      	    }							      }								  
    }							      	  }							      int res = lps [ n - 1 ] ;					  
  }							      	}							      return ( res > n / 2 ) ? n / 2 : res ;			  
  int res = lps [ n - 1 ] ;				      	int res = lps [ n - 1 ] ;				    }								  
  return ( res > n / 2 ) ? n / 2 : res ;		      	return ( res > n / 2 ) ? n / 2 : res ;			    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_1
--							      --							    --								  --
int numberOfPaths ( int m , int n ) {			      static int numberOfPaths ( int m , int n ) {		    public static int numberOfPaths ( int m , int n ) {		  success : None
  int count [ m ] [ n ] ;				      	int count [ ] [ ] = new int [ m ] [ n ] ;		      int [ ] [ ] count = new int [ m ] [ n ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) count [ i ] [ 0 ] = 1 ;			      	i ++ ) count [ i ] [ 0 ] = 1 ;				      i ++ ) {							  
  for ( int j = 0 ;					      	for ( int j = 0 ;					    	count [ i ] [ 0 ] = 1 ;					  
  j < n ;						      	j < n ;							      }								  
  j ++ ) count [ 0 ] [ j ] = 1 ;			      	j ++ ) count [ 0 ] [ j ] = 1 ;				      for ( int j = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      j < n ;							  
  i < m ;						      	i < m ;							      j ++ ) {							  
  i ++ ) {						      	i ++ ) {						    	count [ 0 ] [ j ] = 1 ;					  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					      }								  
    j < n ;						      	  j < n ;						      for ( int i = 1 ;						  
    j ++ ) count [ i ] [ j ] = count [ i - 1 ] [ j ] + count  	  j ++ ) count [ i ] [ j ] = count [ i - 1 ] [ j ] + count    i < m ;							  
  }							      	}							      i ++ ) {							  
  return count [ m - 1 ] [ n - 1 ] ;			      	return count [ m - 1 ] [ n - 1 ] ;			    	for ( int j = 1 ;					  
}							      }								    	j < n ;							  
							      								    	j ++ ) {						  
							      								    	  count [ i ] [ j ] = count [ i - 1 ] [ j ] + count [ i ] 
							      								    	}							  
							      								      }								  
							      								      return count [ m - 1 ] [ n - 1 ] ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE     REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	    REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE	  REARRANGE_ARRAY_MAXIMUM_MINIMUM_FORM_SET_2_O1_EXTRA_SPACE
--							      --							    --								  --
void rearrange ( int arr [ ] , int n ) {		      public static void rearrange ( int arr [ ] , int n ) {	    public static void rearrange ( int arr [ ] , int n ) {	  success : None
  int max_idx = n - 1 , min_idx = 0 ;			      	int max_idx = n - 1 , min_idx = 0 ;			      int maxIdx = n - 1 , minIdx = 0 ;				  
  int max_elem = arr [ n - 1 ] + 1 ;			      	int max_elem = arr [ n - 1 ] + 1 ;			      int maxElem = arr [ n - 1 ] + 1 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i % 2 == 0 ) {					      	  if ( i % 2 == 0 ) {					    	if ( i % 2 == 0 ) {					  
      arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem  	    arr [ i ] += ( arr [ max_idx ] % max_elem ) * max_elem  	  arr [ i ] += ( arr [ maxIdx ] % maxElem ) * maxElem ;	  
      max_idx -- ;					      	    max_idx -- ;					    	  maxIdx -- ;						  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem  	    arr [ i ] += ( arr [ min_idx ] % max_elem ) * max_elem  	  arr [ i ] += ( arr [ minIdx ] % maxElem ) * maxElem ;	  
      min_idx ++ ;					      	    min_idx ++ ;					    	  minIdx ++ ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) arr [ i ] = arr [ i ] / max_elem ;		      	i ++ ) arr [ i ] = arr [ i ] / max_elem ;		      i ++ ) {							  
}							      }								    	arr [ i ] = arr [ i ] / maxElem ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1	      FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1		    FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1		  FIND_MINIMUM_NUMBER_OF_COINS_THAT_MAKE_A_CHANGE_1
--							      --							    --								  --
int minCoins ( int coins [ ] , int m , int V ) {	      static int minCoins ( int coins [ ] , int m , int V ) {	    public static int minCoins ( int coins [ ] , int m , int V )  script_not_found : None
  int table [ V + 1 ] ;					      	int table [ ] = new int [ V + 1 ] ;			      int table [ ] = new int [ V + 1 ] ;			  
  table [ 0 ] = 0 ;					      	table [ 0 ] = 0 ;					      table [ 0 ] = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= V ;						      	i <= V ;						      i <= V ;							  
  i ++ ) table [ i ] = INT_MAX ;			      	i ++ ) table [ i ] = Integer . MAX_VALUE ;		      i ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	table [ i ] = Integer . MAX_VALUE ;			  
  i <= V ;						      	i <= V ;						      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i <= V ;							  
    j < m ;						      	  j < m ;						      i ++ ) {							  
    j ++ ) if ( coins [ j ] <= i ) {			      	  j ++ ) if ( coins [ j ] <= i ) {			    	for ( int j = 0 ;					  
      int sub_res = table [ i - coins [ j ] ] ;		      	    int sub_res = table [ i - coins [ j ] ] ;		    	j < m ;							  
      if ( sub_res != INT_MAX && sub_res + 1 < table [ i ] )  	    if ( sub_res != Integer . MAX_VALUE && sub_res + 1 < ta 	j ++ ) if ( coins [ j ] <= i ) {			  
    }							      	  }							    	  int sub_res = table [ i - coins [ j ] ] ;		  
  }							      	}							    	  if ( sub_res != Integer . MAX_VALUE && sub_res + 1 < ta 
  return table [ V ] ;					      	return table [ V ] ;					    	    table [ i ] = sub_res + 1 ;				  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return table [ V ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM				      FIND_SUBARRAY_WITH_GIVEN_SUM				    FIND_SUBARRAY_WITH_GIVEN_SUM				  FIND_SUBARRAY_WITH_GIVEN_SUM
--							      --							    --								  --
int subArraySum ( int arr [ ] , int n , int sum ) {	      int subArraySum ( int arr [ ] , int n , int sum ) {	    public static int subArraySum ( int arr [ ] , int n , int sum error : FIND_SUBARRAY_WITH_GIVEN_SUM.java:46: erro
  int curr_sum , i , j ;				      	int curr_sum , i , j ;					      int currSum , i , j ;					  r: bad operand types for binary operator '-'
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						     System . out . println ( "Sum found between ind
  i < n ;						      	i < n ;							      i < n ;							  exes " + i + " and " + j - 1 ) ;
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    curr_sum = arr [ i ] ;				      	  curr_sum = arr [ i ] ;				    	currSum = arr [ i ] ;					  	       ^   first type:	String	 second type
    for ( j = i + 1 ;					      	  for ( j = i + 1 ;					    	for ( j = i + 1 ;					  : int 1 error
    j <= n ;						      	  j <= n ;						    	j <= n ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( curr_sum == sum ) {				      	    if ( curr_sum == sum ) {				    	  if ( currSum == sum ) {				  
	cout << "Sum found between indexes " << i << " and "  	      int p = j - 1 ;					    	    System . out . println ( "Sum found between indexes " 
	return 1 ;					      	      System . out . println ( "Sum found between indexes " 	    return 1 ;						  
      }							      	      return 1 ;					    	  }							  
      if ( curr_sum > sum || j == n ) break ;		      	    }							    	  if ( currSum > sum || j == n ) {			  
      curr_sum = curr_sum + arr [ j ] ;			      	    if ( curr_sum > sum || j == n ) break ;		    	    break ;						  
    }							      	    curr_sum = curr_sum + arr [ j ] ;			    	  }							  
  }							      	  }							    	  currSum = currSum + arr [ j ] ;			  
  cout << "No subarray found" ;				      	}							    	}							  
  return 0 ;						      	System . out . println ( "No subarray found" ) ;	      }								  
}							      	return 0 ;						      System . out . println ( "No subarray found" ) ;		  
							      }								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_SUBSEQUENCES				      COUNT_DISTINCT_SUBSEQUENCES				    COUNT_DISTINCT_SUBSEQUENCES					  COUNT_DISTINCT_SUBSEQUENCES
--							      --							    --								  --
int countSub ( string str ) {				      static int countSub ( String str ) {			    public static int countSub ( String str ) {			  script_not_found : None
  vector < int > last ( MAX_CHAR , - 1 ) ;		      	int [ ] last = new int [ MAX_CHAR ] ;			      int [ ] last = new int [ MAX_CHAR ] ;			  
  int n = str . length ( ) ;				      	Arrays . fill ( last , - 1 ) ;				      int n = str . length ( ) ;				  
  int dp [ n + 1 ] ;					      	int n = str . length ( ) ;				      int [ ] dp = new int [ n + 1 ] ;				  
  dp [ 0 ] = 1 ;					      	int [ ] dp = new int [ n + 1 ] ;			      dp [ 0 ] = 1 ;						  
  for ( int i = 1 ;					      	dp [ 0 ] = 1 ;						      for ( int i = 1 ;						  
  i <= n ;						      	for ( int i = 1 ;					      i <= n ;							  
  i ++ ) {						      	i <= n ;						      i ++ ) {							  
    dp [ i ] = 2 * dp [ i - 1 ] ;			      	i ++ ) {						    	dp [ i ] = 2 * dp [ i - 1 ] ;				  
    if ( last [ str [ i - 1 ] ] != - 1 ) dp [ i ] = dp [ i ]  	  dp [ i ] = 2 * dp [ i - 1 ] ;				    	if ( last [ str . charAt ( i - 1 ) ] != - 1 ) {		  
    last [ str [ i - 1 ] ] = ( i - 1 ) ;		      	  if ( last [ ( int ) str . charAt ( i - 1 ) ] != - 1 ) dp  	  dp [ i ] = dp [ i ] - dp [ last [ str . charAt ( i - 1  
  }							      	  last [ ( int ) str . charAt ( i - 1 ) ] = ( i - 1 ) ;	    	}							  
  return dp [ n ] ;					      	}							    	last [ str . charAt ( i - 1 ) ] = ( i - 1 ) ;		  
}							      	return dp [ n ] ;					      }								  
							      }								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT MINIMUM_TIME_WRITE_CHARACTERS_USING_INSERT_DELETE_COPY_OPERAT
--							      --							    --								  --
int minTimeForWritingChars ( int N , int insert , int remove  static int minTimeForWritingChars ( int N , int insert , int  public static int minTimeForWritingChars ( int N , int insert success : None
  if ( N == 0 ) return 0 ;				      	if ( N == 0 ) return 0 ;				      if ( N == 0 ) return 0 ;					  
  if ( N == 1 ) return insert ;				      	if ( N == 1 ) return insert ;				      if ( N == 1 ) return insert ;				  
  int dp [ N + 1 ] ;					      	int dp [ ] = new int [ N + 1 ] ;			      int dp [ ] = new int [ N + 1 ] ;				  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	for ( int i = 1 ;					      Arrays . fill ( dp , 0 ) ;				  
  for ( int i = 1 ;					      	i <= N ;						      for ( int i = 1 ;						  
  i <= N ;						      	i ++ ) {						      i <= N ;							  
  i ++ ) {						      	  if ( i % 2 == 0 ) dp [ i ] = Math . min ( dp [ i - 1 ] +    i ++ ) {							  
    if ( i % 2 == 0 ) dp [ i ] = min ( dp [ i - 1 ] + insert  	  else dp [ i ] = Math . min ( dp [ i - 1 ] + insert , dp [ 	if ( i % 2 == 0 ) {					  
    else dp [ i ] = min ( dp [ i - 1 ] + insert , dp [ ( i +  	}							    	  dp [ i ] = Math . min ( dp [ i - 1 ] + insert , dp [ i  
  }							      	return dp [ N ] ;					    	}							  
  return dp [ N ] ;					      }								    	else {							  
}							      								    	  dp [ i ] = Math . min ( dp [ i - 1 ] + insert , dp [ (  
							      								    	}							  
							      								      }								  
							      								      return dp [ N ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING    SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING    SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING	  SPLIT_NUMERIC_ALPHABETIC_AND_SPECIAL_SYMBOLS_FROM_A_STRING
--							      --							    --								  --
void splitString ( string str ) {			      static void splitString ( String str ) {			    public static void splitString ( String str ) {		  script_not_found : None
  string alpha , num , special ;			      	StringBuffer alpha = new StringBuffer ( ) , num = new Strin   StringBuilder alpha = new StringBuilder ( ) , num = new Str 
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( isdigit ( str [ i ] ) ) num . push_back ( str [ i ]  	  if ( Character . isDigit ( str . charAt ( i ) ) ) num . a 	if ( Character . isDigit ( str . charAt ( i ) ) ) {	  
    else if ( ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) || ( s 	  else if ( Character . isAlphabetic ( str . charAt ( i ) ) 	  num . append ( str . charAt ( i ) ) ;			  
    else special . push_back ( str [ i ] ) ;		      	  else special . append ( str . charAt ( i ) ) ;	    	}							  
  }							      	}							    	else if ( ( str . charAt ( i ) >= 'A' && str . charAt ( i 
  cout << alpha << endl ;				      	System . out . println ( alpha ) ;			    	  alpha . append ( str . charAt ( i ) ) ;		  
  cout << num << endl ;					      	System . out . println ( num ) ;			    	}							  
  cout << special << endl ;				      	System . out . println ( special ) ;			    	else {							  
}							      }								    	  special . append ( str . charAt ( i ) ) ;		  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( alpha ) ;			  
							      								      System . out . println ( num ) ;				  
							      								      System . out . println ( special ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_1
--							      --							    --								  --
int minJumps ( int arr [ ] , int n ) {			      private static int minJumps ( int [ ] arr , int n ) {	    public static int minJumps ( int arr [ ] , int n ) {	  success : None
  int * jumps = new int [ n ] ;				      	int jumps [ ] = new int [ n ] ;				      int jumps [ ] = new int [ n ] ;				  
  int i , j ;						      	int i , j ;						      int i , j ;						  
  if ( n == 0 || arr [ 0 ] == 0 ) return INT_MAX ;	      	if ( n == 0 || arr [ 0 ] == 0 ) return Integer . MAX_VALUE    if ( n == 0 || arr [ 0 ] == 0 ) return Integer . MAX_VALUE  
  jumps [ 0 ] = 0 ;					      	jumps [ 0 ] = 0 ;					      jumps [ 0 ] = 0 ;						  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    jumps [ i ] = INT_MAX ;				      	  jumps [ i ] = Integer . MAX_VALUE ;			    	jumps [ i ] = Integer . MAX_VALUE ;			  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < i ;						      	  j < i ;						    	j < i ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( i <= j + arr [ j ] && jumps [ j ] != INT_MAX ) {   	    if ( i <= j + arr [ j ] && jumps [ j ] != Integer . MAX 	  if ( i <= j + arr [ j ] && jumps [ j ] != Integer . MAX 
	jumps [ i ] = min ( jumps [ i ] , jumps [ j ] + 1 ) ; 	      jumps [ i ] = Math . min ( jumps [ i ] , jumps [ j ]  	    jumps [ i ] = Math . min ( jumps [ i ] , jumps [ j ]  
	break ;						      	      break ;						    	    break ;						  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return jumps [ n - 1 ] ;				      	return jumps [ n - 1 ] ;				      return jumps [ n - 1 ] ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FREQUENCY_ELEMENT_UNSORTED_ARRAY			      FREQUENCY_ELEMENT_UNSORTED_ARRAY				    FREQUENCY_ELEMENT_UNSORTED_ARRAY				  FREQUENCY_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
void countFreq ( int a [ ] , int n ) {			      static void countFreq ( int [ ] a , int n ) {		    public static void countFreq ( int a [ ] , int n ) {	  script_not_found : None
  unordered_map < int , int > hm ;			      	HashMap < Integer , Integer > hm = new HashMap < > ( ) ;      HashMap < Integer , Integer > hm = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) hm [ a [ i ] ] ++ ;				      	i ++ ) hm . put ( a [ i ] , hm . get ( a [ i ] ) == null ?    i ++ ) {							  
  set < pair < int , int >> st ;			      	SortedMap < Integer , Integer > st = new TreeMap < > ( ) ;  	hm . put ( a [ i ] , ++ i ) ;				  
  for ( auto x : hm ) {					      	for ( HashMap . Entry < Integer , Integer > x : hm . entryS   }								  
    st . insert ( {					      	  st . put ( x . getKey ( ) , x . getValue ( ) ) ;	      HashSet < Pair < Integer , Integer >> st = new HashSet < >  
      x . first , x . second }				      	}							      for ( Map . Entry < Integer , Integer > x : hm . entrySet ( 
      ) ;						      	int cumul = 0 ;						    	st . add ( new Pair < > ( x . getKey ( ) , x . getValue ( 
    }							      	for ( SortedMap . Entry < Integer , Integer > x : st . entr   }								  
    int cumul = 0 ;					      	  cumul += x . getValue ( ) ;				      int cumul = 0 ;						  
    for ( auto x : st ) {				      	  System . out . println ( x . getKey ( ) + " " + cumul ) ;   for ( Pair < Integer , Integer > x : st ) {		  
      cumul += x . second ;				      	}							    	cumul += x . getValue ( ) ;				  
      cout << x . first << " " << cumul << endl ;	      }								    	System . out . println ( x . getKey ( ) + " " + cumul ) ; 
    }							      								      }								  
  }							      								    }								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	      CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	    CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE	  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE
--							      --							    --								  --
int isChangeable ( int notes [ ] , int n ) {		      static int isChangeable ( int notes [ ] , int n ) {	    public static int isChangeable ( int [ ] notes , int n ) {	  error : CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON
  int fiveCount = 0 ;					      	int fiveCount = 0 ;					      int fiveCount = 0 ;					  _IN_THE_QUEUE.java:89: error: ')' expected	 par
  int tenCount = 0 ;					      	int tenCount = 0 ;					      int tenCount = 0 ;					  am0.add(new int[]{46,46,93,57,82,34,83,80,77,36,80
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  ,85,69,28,9,56,49,27,83,25,1,80,99,14,69,82,79,71,
  i < n ;						      	i < n ;							      i < n ;							  74,34}});
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( notes [ i ] == 5 ) fiveCount ++ ;		      	  if ( notes [ i ] == 5 ) fiveCount ++ ;		    	if ( notes [ i ] == 5 ) {				  			 ^ CHECK_IF_X_CAN_GIVE_CHANG
    else if ( notes [ i ] == 10 ) {			      	  else if ( notes [ i ] == 10 ) {			    	  fiveCount ++ ;					  E_TO_EVERY_PERSON_IN_THE_QUEUE.java:89: error: ill
      if ( fiveCount > 0 ) {				      	    if ( fiveCount > 0 ) {				    	}							  egal start of type	 param0.add(new int[]{46,46,
	fiveCount -- ;					      	      fiveCount -- ;					    	else if ( notes [ i ] == 10 ) {				  93,57,82,34,83,80,77,36,80,85,69,28,9,56,49,27,83,
	tenCount ++ ;					      	      tenCount ++ ;					    	  if ( fiveCount > 0 ) {				  25,1,80,99,14,69,82,79,71,74,34}});
      }							      	    }							    	    fiveCount -- ;					  
      else return 0 ;					      	    else return 0 ;					    	    tenCount ++ ;					  
    }							      	  }							    	  }							  ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_TH
    else {						      	  else {						    	  else {						  E_QUEUE.java:91: error: <identifier> expected
      if ( fiveCount > 0 && tenCount > 0 ) {		      	    if ( fiveCount > 0 && tenCount > 0 ) {		    	    return 0 ;						  param1.add(4);	       ^ CHECK_IF_X_CAN_GIVE
	fiveCount -- ;					      	      fiveCount -- ;					    	  }							  _CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:91: erro
	tenCount -- ;					      	      tenCount -- ;					    	}							  r: illegal start of type     param1.add(4);
      }							      	    }							    	else {							  	   ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PER
      else if ( fiveCount >= 3 ) {			      	    else if ( fiveCount >= 3 ) {			    	  if ( fiveCount > 0 && tenCount > 0 ) {		  SON_IN_THE_QUEUE.java:92: error: <identifier> expe
	fiveCount -= 3 ;				      	      fiveCount -= 3 ;					    	    fiveCount -- ;					  cted	   param1.add(5);		^ CHECK_IF_X
      }							      	    }							    	    tenCount -- ;					  _CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java
      else return 0 ;					      	    else return 0 ;					    	  }							  :92: error: illegal start of type	param1.add(5
    }							      	  }							    	  else if ( fiveCount >= 3 ) {				  );		    ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_
  }							      	}							    	    fiveCount -= 3 ;					  EVERY_PERSON_IN_THE_QUEUE.java:93: error: <identif
  return 1 ;						      	return 1 ;						    	  }							  ier> expected	    param1.add(27);		  ^
}							      }								    	  else {						  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_
							      								    	    return 0 ;						  QUEUE.java:93: error: illegal start of type	  pa
							      								    	  }							  ram1.add(27);		       ^ CHECK_IF_X_CAN_GIVE
							      								    	}							  _CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:94: erro
							      								      }								  r: <identifier> expected     param1.add(12);
							      								      return 1 ;						  	   ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PER
							      								    }								  SON_IN_THE_QUEUE.java:94: error: illegal start of
							      								    								  type	   param1.add(12);		  ^ CHECK_IF
							      								    								  _X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.ja
							      								    								  va:95: error: <identifier> expected	  param1.add
							      								    								  (2);		     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO
							      								    								  _EVERY_PERSON_IN_THE_QUEUE.java:95: error: illegal
							      								    								   start of type     param1.add(2);		   ^
							      								    								   CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE
							      								    								  _QUEUE.java:96: error: <identifier> expected	   p
							      								    								  aram1.add(17);	       ^ CHECK_IF_X_CAN_GIVE
							      								    								  _CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:96: erro
							      								    								  r: illegal start of type     param1.add(17);
							      								    								  	    ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PE
							      								    								  RSON_IN_THE_QUEUE.java:97: error: <identifier> exp
							      								    								  ected	    param1.add(7);		 ^ CHECK_IF_
							      								    								  X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.jav
							      								    								  a:97: error: illegal start of type	 param1.add(
							      								    								  7);		     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO
							      								    								  _EVERY_PERSON_IN_THE_QUEUE.java:98: error: <identi
							      								    								  fier> expected     param1.add(31);		   ^
							      								    								   CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE
							      								    								  _QUEUE.java:98: error: illegal start of type	   p
							      								    								  aram1.add(31);		^ CHECK_IF_X_CAN_GIV
							      								    								  E_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.java:99: err
							      								    								  or: <identifier> expected	param1.add(25);
							      								    								  	    ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PE
							      								    								  RSON_IN_THE_QUEUE.java:99: error: illegal start of
							      								    								   type	    param1.add(25);		   ^ CHECK_I
							      								    								  F_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.j
							      								    								  ava:100: error: <identifier> expected	    param1.a
							      								    								  dd(20);		^ CHECK_IF_X_CAN_GIVE_CHANGE
							      								    								  _TO_EVERY_PERSON_IN_THE_QUEUE.java:100: error: ill
							      								    								  egal start of type	 param1.add(20);
							      								    								      ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_I
							      								    								  N_THE_QUEUE.java:101: error: illegal start of type
							      								    								       for(int i = 0; i < param0.size(); ++i)	  ^
							      								    								  CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_
							      								    								  QUEUE.java:101: error: > expected	for(int i =
							      								    								  0; i < param0.size(); ++i)
							      								    								  	     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_P
							      								    								  ERSON_IN_THE_QUEUE.java:101: error: illegal start
							      								    								  of type     for(int i = 0; i < param0.size(); ++i)
							      								    								  					 ^ CHECK_IF_
							      								    								  X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN_THE_QUEUE.jav
							      								    								  a:101: error: <identifier> expected	  for(int i
							      								    								  = 0; i < param0.size(); ++i)
							      								    								  		      ^ CHECK_IF_X_CAN_GIVE_CHANGE_T
							      								    								  O_EVERY_PERSON_IN_THE_QUEUE.java:108: error: <iden
							      								    								  tifier> expected     System.out.println("#Results:
							      								    								  " + n_success + ", " + param0.size());
							      								    								  	     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_P
							      								    								  ERSON_IN_THE_QUEUE.java:108: error: illegal start
							      								    								  of type     System.out.println("#Results:" + n_suc
							      								    								  cess + ", " + param0.size());
							      								    								     ^ CHECK_IF_X_CAN_GIVE_CHANGE_TO_EVERY_PERSON_IN
							      								    								  _THE_QUEUE.java:110: error: class, interface, or e
							      								    								  num expected } ^ 29 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INSERTIONS_SORT_ARRAY				      MINIMUM_INSERTIONS_SORT_ARRAY				    MINIMUM_INSERTIONS_SORT_ARRAY				  MINIMUM_INSERTIONS_SORT_ARRAY
--							      --							    --								  --
int minInsertionStepToSortArray ( int arr [ ] , int N ) {     static int minInsertionStepToSortArray ( int arr [ ] , int N  public static int minInsertionStepToSortArray ( int arr [ ] , success : None
  int lis [ N ] ;					      	int [ ] lis = new int [ N ] ;				      int lis [ ] = new int [ N ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) lis [ i ] = 1 ;				      	i ++ ) lis [ i ] = 1 ;					      i ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	lis [ i ] = 1 ;						  
  i < N ;						      	i < N ;							      }								  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      for ( int i = 1 ;						  
  j < i ;						      	j < i ;							      i < N ;							  
  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] 	j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ]   i ++ ) for ( int j = 0 ;					  
  int max = 0 ;						      	int max = 0 ;						      j < i ;							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] 
  i < N ;						      	i < N ;							      int max = 0 ;						  
  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;	      	i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;		      for ( int i = 0 ;						  
  return ( N - max ) ;					      	return ( N - max ) ;					      i < N ;							  
}							      }								      i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;		  
							      								      return ( N - max ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1		      COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1		    COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1		  COUNT_POSSIBLE_DECODINGS_GIVEN_DIGIT_SEQUENCE_1
--							      --							    --								  --
int countDecodingDP ( char * digits , int n ) {		      static int countDecodingDP ( char digits [ ] , int n ) {	    public static int countDecodingDP ( char [ ] digits , int n ) success : None
  int count [ n + 1 ] ;					      	int count [ ] = new int [ n + 1 ] ;			      int [ ] count = new int [ n + 1 ] ;			  
  count [ 0 ] = 1 ;					      	count [ 0 ] = 1 ;					      count [ 0 ] = 1 ;						  
  count [ 1 ] = 1 ;					      	count [ 1 ] = 1 ;					      count [ 1 ] = 1 ;						  
  if ( digits [ 0 ] == '0' ) return 0 ;			      	if ( digits [ 0 ] == '0' ) return 0 ;			      if ( digits [ 0 ] == '0' ) {				  
  for ( int i = 2 ;					      	for ( int i = 2 ;					    	return 0 ;						  
  i <= n ;						      	i <= n ;						      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 2 ;						  
    count [ i ] = 0 ;					      	  count [ i ] = 0 ;					      i <= n ;							  
    if ( digits [ i - 1 ] > '0' ) count [ i ] = count [ i - 1 	  if ( digits [ i - 1 ] > '0' ) count [ i ] = count [ i - 1   i ++ ) {							  
    if ( digits [ i - 2 ] == '1' || ( digits [ i - 2 ] == '2' 	  if ( digits [ i - 2 ] == '1' || ( digits [ i - 2 ] == '2' 	count [ i ] = 0 ;					  
  }							      	}							    	if ( digits [ i - 1 ] > '0' ) {				  
  return count [ n ] ;					      	return count [ n ] ;					    	  count [ i ] = count [ i - 1 ] ;			  
}							      }								    	}							  
							      								    	if ( digits [ i - 2 ] == '1' || ( digits [ i - 2 ] == '2' 
							      								    	  count [ i ] += count [ i - 2 ] ;			  
							      								    	}							  
							      								      }								  
							      								      return count [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS				      SUM_BINOMIAL_COEFFICIENTS					    SUM_BINOMIAL_COEFFICIENTS					  SUM_BINOMIAL_COEFFICIENTS
--							      --							    --								  --
int binomialCoeffSum ( int n ) {			      static int binomialCoeffSum ( int n ) {			    public static int binomialCoeffSum ( int n ) {		  success : None
  int C [ n + 1 ] [ n + 1 ] ;				      	int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= min ( i , n ) ;				      	  j <= Math . min ( i , n ) ;				    	j <= Math . min ( i , n ) ;				  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;	      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  if ( j == 0 || j == i ) {				  
      else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    C [ i ] [ j ] = 1 ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  int sum = 0 ;						      	int sum = 0 ;						    	    C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ 
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	  }							  
  i <= n ;						      	i <= n ;						    	}							  
  i ++ ) sum += C [ n ] [ i ] ;				      	i ++ ) sum += C [ n ] [ i ] ;				      }								  
  return sum ;						      	return sum ;						      int sum = 0 ;						  
}							      }								      for ( int i = 0 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	sum += C [ n ] [ i ] ;					  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY		      PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY		    PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY		  PAIRS_OF_POSITIVE_NEGATIVE_VALUES_IN_AN_ARRAY
--							      --							    --								  --
void printPairs ( int arr [ ] , int n ) {		      public static void printPairs ( int arr [ ] , int n ) {	    public static void printPairs ( int arr [ ] , int n ) {	  script_not_found : None
  vector < int > v ;					      	Vector < Integer > v = new Vector < Integer > ( ) ;	      ArrayList < Integer > list = new ArrayList < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( abs ( arr [ i ] ) == abs ( arr [ j ] ) ) v . pu 	j ++ ) if ( Math . abs ( arr [ i ] ) == Math . abs ( arr [    j ++ ) if ( Math . abs ( arr [ i ] ) == Math . abs ( arr [  
  if ( v . size ( ) == 0 ) return ;			      	if ( v . size ( ) == 0 ) return ;			      if ( list . size ( ) == 0 ) return ;			  
  sort ( v . begin ( ) , v . end ( ) ) ;		      	Collections . sort ( v ) ;				      Collections . shuffle ( list ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < v . size ( ) ;					      	i < v . size ( ) ;					      i < list . size ( ) ;					  
  i ++ ) cout << - v [ i ] << " " << v [ i ] ;		      	i ++ ) System . out . print ( - v . get ( i ) + " " + v . g   i ++ ) System . out . println ( - list . get ( i ) + " " +  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PANGRAM_CHECKING					      PANGRAM_CHECKING						    PANGRAM_CHECKING						  PANGRAM_CHECKING
--							      --							    --								  --
bool checkPangram ( string & str ) {			      public static boolean checkPangram ( String str ) {	    public static boolean checkPangram ( String str ) {		  error : PANGRAM_CHECKING.java:42: error: variable
  vector < bool > mark ( 26 , false ) ;			      	boolean [ ] mark = new boolean [ 26 ] ;			      boolean [ ] mark = new boolean [ 26 ] ;			  index might not have been initialized	    mark [ i
  int index ;						      	int index = 0 ;						      int index ;						  ndex ] = true ;	     ^ 1 error
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( 'A' <= str [ i ] && str [ i ] <= 'Z' ) index = str [ 	  if ( 'A' <= str . charAt ( i ) && str . charAt ( i ) <= ' 	if ( 'A' <= str . charAt ( i ) && str . charAt ( i ) <= ' 
    else if ( 'a' <= str [ i ] && str [ i ] <= 'z' ) index =  	  else if ( 'a' <= str . charAt ( i ) && str . charAt ( i ) 	  index = str . charAt ( i ) - 'A' ;			  
    mark [ index ] = true ;				      	  mark [ index ] = true ;				    	}							  
  }							      	}							    	else if ( 'a' <= str . charAt ( i ) && str . charAt ( i ) 
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	  index = str . charAt ( i ) - 'a' ;			  
  i <= 25 ;						      	i <= 25 ;						    	}							  
  i ++ ) if ( mark [ i ] == false ) return ( false ) ;	      	i ++ ) if ( mark [ i ] == false ) return ( false ) ;	    	mark [ index ] = true ;					  
  return ( true ) ;					      	return ( true ) ;					      }								  
}							      }								      for ( int i = 0 ;						  
							      								      i <= 25 ;							  
							      								      i ++ ) if ( mark [ i ] == false ) return ( false ) ;	  
							      								      return ( true ) ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_PRES
--							      --							    --								  --
int countNum ( int arr [ ] , int n ) {			      static int countNum ( int arr [ ] , int n ) {		    public static int countNum ( int arr [ ] , int n ) {	  error : Exception in thread "main" java.lang.Array
  unordered_set < int > s ;				      	HashSet < Integer > s = new HashSet < > ( ) ;		      HashSet < Integer > s = new HashSet < > ( ) ;		  IndexOutOfBoundsException: Index 47 out of bounds
  int count = 0 , maxm = INT_MIN , minm = INT_MAX ;	      	int count = 0 , maxm = Integer . MIN_VALUE , minm = Integer   int count = 0 , maxm = Integer . MIN_VALUE , minm = Integer for length 47 	at ELEMENTS_TO_BE_ADDED_SO_THAT_ALL
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  _ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1.f_fill
  i < n ;						      	i < n ;							      i < n ;							  ed(ELEMENTS_TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  RANGE_ARE_PRESENT_IN_ARRAY_1.java:46) 	at ELEMENTS
    s . insert ( arr [ i ] ) ;				      	  s . add ( arr [ i ] ) ;				    	s . add ( arr [ i ] ) ;					  _TO_BE_ADDED_SO_THAT_ALL_ELEMENTS_OF_A_RANGE_ARE_P
    if ( arr [ i ] < minm ) minm = arr [ i ] ;		      	  if ( arr [ i ] < minm ) minm = arr [ i ] ;		    	if ( arr [ i ] < minm ) {				  RESENT_IN_ARRAY_1.main(ELEMENTS_TO_BE_ADDED_SO_THA
    if ( arr [ i ] > maxm ) maxm = arr [ i ] ;		      	  if ( arr [ i ] > maxm ) maxm = arr [ i ] ;		    	  minm = arr [ i ] ;					  T_ALL_ELEMENTS_OF_A_RANGE_ARE_PRESENT_IN_ARRAY_1.j
  }							      	}							    	}							  ava:77)
  for ( int i = minm ;					      	for ( int i = minm ;					    	if ( arr [ i ] > maxm ) {				  
  i <= maxm ;						      	i <= maxm ;						    	  maxm = arr [ i ] ;					  
  i ++ ) if ( s . find ( arr [ i ] ) == s . end ( ) ) count + 	i ++ ) if ( ! s . contains ( i ) ) count ++ ;		    	}							  
  return count ;					      	return count ;						      }								  
}							      }								      for ( int i = minm ;					  
							      								      i <= maxm ;						  
							      								      i ++ ) if ( s . contains ( arr [ i ] ) == false ) count ++  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS COUNT_GROUPINGS_NUMBER_SUM_DIGITS_EVERY_SUB_GROUP_LESS_EQUALS
--							      --							    --								  --
int countGroups ( int position , int previous_sum , int lengt static int countGroups ( int position , int previous_sum , in public static int countGroups ( int position , int previousSu script_not_found : None
  if ( position == length ) return 1 ;			      	if ( position == length ) return 1 ;			      if ( position == length ) return 1 ;			  
  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [  	if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [    if ( dp [ position ] [ previousSum ] != - 1 ) return dp [ p 
  dp [ position ] [ previous_sum ] = 0 ;		      	dp [ position ] [ previous_sum ] = 0 ;			      dp [ position ] [ previousSum ] = 0 ;			  
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = position ;				      	for ( int i = position ;				      for ( int i = position ;					  
  i < length ;						      	i < length ;						      i < length ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum += ( num [ i ] - '0' ) ;			      	  sum += ( num [ i ] - '0' ) ;				    	sum += ( num [ i ] - '0' ) ;				  
    if ( sum >= previous_sum ) res += countGroups ( i + 1 , s 	  if ( sum >= previous_sum ) res += countGroups ( i + 1 , s 	if ( sum >= previousSum ) {				  
  }							      	}							    	  res += countGroups ( i + 1 , sum , length , num ) ;	  
  dp [ position ] [ previous_sum ] = res ;		      	dp [ position ] [ previous_sum ] = res ;		    	}							  
  return res ;						      	return res ;						      }								  
}							      }								      dp [ position ] [ previousSum ] = res ;			  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S			      LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S			    LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S			  LONGEST_SUBARRAY_COUNT_1S_ONE_COUNT_0S
--							      --							    --								  --
int lenOfLongSubarr ( int arr [ ] , int n ) {		      static int lenOfLongSubarr ( int arr [ ] , int n ) {	    public static int lenOfLongSubarr ( int arr [ ] , int n ) {	  success : None
  unordered_map < int , int > um ;			      	HashMap < Integer , Integer > um = new HashMap < Integer ,    HashMap < Integer , Integer > um = new HashMap < > ( ) ;	  
  int sum = 0 , maxLen = 0 ;				      	int sum = 0 , maxLen = 0 ;				      int sum = 0 , maxLen = 0 ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum += arr [ i ] == 0 ? - 1 : 1 ;			      	  sum += arr [ i ] == 0 ? - 1 : 1 ;			    	sum += arr [ i ] == 0 ? - 1 : 1 ;			  
    if ( sum == 1 ) maxLen = i + 1 ;			      	  if ( sum == 1 ) maxLen = i + 1 ;			    	if ( sum == 1 ) {					  
    else if ( um . find ( sum ) == um . end ( ) ) um [ sum ]  	  else if ( ! um . containsKey ( sum ) ) um . put ( sum , i 	  maxLen = i + 1 ;					  
    if ( um . find ( sum - 1 ) != um . end ( ) ) {	      	  if ( um . containsKey ( sum - 1 ) ) {			    	}							  
      if ( maxLen < ( i - um [ sum - 1 ] ) ) maxLen = i - um  	    if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i 	else if ( um . get ( sum ) == null ) {			  
    }							      	  }							    	  um . put ( sum , i ) ;				  
  }							      	}							    	}							  
  return maxLen ;					      	return maxLen ;						    	if ( um . containsKey ( sum - 1 ) ) {			  
}							      }								    	  if ( maxLen < ( i - um . get ( sum - 1 ) ) ) {	  
							      								    	    maxLen = i - um . get ( sum - 1 ) ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	      LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	    LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS	  LARGEST_SUBSET_WHOSE_ALL_ELEMENTS_ARE_FIBONACCI_NUMBERS
--							      --							    --								  --
void findFibSubset ( int arr [ ] , int n ) {		      public static void findFibSubset ( Integer [ ] x ) {	    public static void findFibSubset ( int arr [ ] , int n ) {	  script_not_found : None
  int max = * std :: max_element ( arr , arr + n ) ;	      	Integer max = Collections . max ( Arrays . asList ( x ) ) ;   int max = arr . length * Math . max ( arr . length , n ) ;  
  int a = 0 , b = 1 ;					      	List < Integer > fib = new ArrayList < Integer > ( ) ;	      int a = 0 , b = 1 ;					  
  unordered_set < int > hash ;				      	List < Integer > result = new ArrayList < Integer > ( ) ;     HashSet < Integer > hash = new HashSet < > ( ) ;		  
  hash . insert ( a ) ;					      	Integer a = 0 ;						      hash . add ( a ) ;					  
  hash . insert ( b ) ;					      	Integer b = 1 ;						      hash . add ( b ) ;					  
  while ( b < max ) {					      	while ( b < max ) {					      while ( b < max ) {					  
    int c = a + b ;					      	  Integer c = a + b ;					    	int c = a + b ;						  
    a = b ;						      	  a = b ;						    	a = b ;							  
    b = c ;						      	  b = c ;						    	b = c ;							  
    hash . insert ( b ) ;				      	  fib . add ( c ) ;					    	hash . add ( b ) ;					  
  }							      	}							      }								  
  for ( int i = 0 ;					      	for ( Integer i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < x . length ;					      i < n ;							  
  i ++ ) if ( hash . find ( arr [ i ] ) != hash . end ( ) ) p 	i ++ ) {						      i ++ ) if ( hash . contains ( arr [ i ] ) ) System . out .  
}							      	  if ( fib . contains ( x [ i ] ) ) {			    }								  
							      	    result . add ( x [ i ] ) ;				    								  
							      	  }							    								  
							      	}							    								  
							      	System . out . println ( result ) ;			    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_WITH_GIVEN_SUM_1				      FIND_SUBARRAY_WITH_GIVEN_SUM_1				    FIND_SUBARRAY_WITH_GIVEN_SUM_1				  FIND_SUBARRAY_WITH_GIVEN_SUM_1
--							      --							    --								  --
int subArraySum ( int arr [ ] , int n , int sum ) {	      int subArraySum ( int arr [ ] , int n , int sum ) {	    public static int subArraySum ( int arr [ ] , int n , int sum error : FIND_SUBARRAY_WITH_GIVEN_SUM_1.java:44: er
  int curr_sum = arr [ 0 ] , start = 0 , i ;		      	int curr_sum = arr [ 0 ] , start = 0 , i ;		      int currSum = arr [ 0 ] , start = 0 , i ;			  ror: bad operand types for binary operator '-'
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						     System . out . println ( "Sum found between ind
  i <= n ;						      	i <= n ;						      i <= n ;							  exes " + start + " and " + i - 1 ) ;
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( curr_sum > sum && start < i - 1 ) {		      	  while ( curr_sum > sum && start < i - 1 ) {		    	while ( currSum > sum && start < i - 1 ) {		  		     ^	 first type:  String   secon
      curr_sum = curr_sum - arr [ start ] ;		      	    curr_sum = curr_sum - arr [ start ] ;		    	  currSum = currSum - arr [ start ] ;			  d type: int 1 error
      start ++ ;					      	    start ++ ;						    	  start ++ ;						  
    }							      	  }							    	}							  
    if ( curr_sum == sum ) {				      	  if ( curr_sum == sum ) {				    	if ( currSum == sum ) {					  
      cout << "Sum found between indexes " << start << " and  	    int p = i - 1 ;					    	  System . out . println ( "Sum found between indexes " + 
      return 1 ;					      	    System . out . println ( "Sum found between indexes " + 	  return 1 ;						  
    }							      	    return 1 ;						    	}							  
    if ( i < n ) curr_sum = curr_sum + arr [ i ] ;	      	  }							    	if ( i < n ) {						  
  }							      	  if ( i < n ) curr_sum = curr_sum + arr [ i ] ;	    	  currSum = currSum + arr [ i ] ;			  
  cout << "No subarray found" ;				      	}							    	}							  
  return 0 ;						      	System . out . println ( "No subarray found" ) ;	      }								  
}							      	return 0 ;						      System . out . println ( "No subarray found" ) ;		  
							      }								      return 0 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE			      MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE			    MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE			  MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE
--							      --							    --								  --
ll lis ( ll arr [ ] , ll n ) {				      static int lis ( int [ ] arr , int n ) {			    public static long lis ( long arr [ ] , long n ) {		  error : MAXIMUM_PRODUCT_INCREASING_SUBSEQUENCE.jav
  ll mpis [ n ] ;					      	int [ ] mpis = new int [ n ] ;				      long mpis [ ] = new long [ n ] ;				  a:36: error: incompatible types: possible lossy co
  for ( int i = 0 ;					      	int max = Integer . MIN_VALUE ;				      for ( int i = 0 ;						  nversion from long to int   long mpis [ ] = new lo
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  ng [ n ] ;				  ^ MAXIMUM_
  i ++ ) mpis [ i ] = arr [ i ] ;			      	i < n ;							      i ++ ) {							  PRODUCT_INCREASING_SUBSEQUENCE.java:49: error: no
  for ( int i = 1 ;					      	i ++ ) mpis [ i ] = arr [ i ] ;				    	mpis [ i ] = arr [ i ] ;				  suitable method found for max(long[],long)   retur
  i < n ;						      	for ( int i = 1 ;					      }								  n Math . max ( mpis , n ) ;		    ^	  me
  i ++ ) for ( int j = 0 ;				      	i < n ;							      for ( int i = 1 ;						  thod Math.max(int,int) is not applicable	 (ar
  j < i ;						      	i ++ ) for ( int j = 0 ;				      i < n ;							  gument mismatch; long[] cannot be converted to int
  j ++ ) if ( arr [ i ] > arr [ j ] && mpis [ i ] < ( mpis [  	j < i ;							      i ++ ) for ( int j = 0 ;					  )	method Math.max(long,long) is not applicable
  return * max_element ( mpis , mpis + n ) ;		      	j ++ ) if ( arr [ i ] > arr [ j ] && mpis [ i ] < ( mpis [    j < i ;							  	 (argument mismatch; long[] cannot be conver
}							      	for ( int k = 0 ;					      j ++ ) if ( arr [ i ] > arr [ j ] && mpis [ i ] < ( mpis [  ted to long)	   method Math.max(float,float) is n
							      	k < mpis . length ;					    	mpis [ i ] = mpis [ j ] * arr [ i ] ;			  ot applicable	      (argument mismatch; long[] can
							      	k ++ ) {						      }								  not be converted to float)	 method Math.max(dou
							      	  if ( mpis [ k ] > max ) {				      return Math . max ( mpis , n ) ;				  ble,double) is not applicable	      (argument mism
							      	    max = mpis [ k ] ;					    }								  atch; long[] cannot be converted to double) MAXIMU
							      	  }							    								  M_PRODUCT_INCREASING_SUBSEQUENCE.java:79: error: i
							      	}							    								  ncompatible types: int[] cannot be converted to lo
							      	return max ;						    								  ng[]	       if(f_filled(param0.get(i),param1.get(
							      }								    								  i)) == f_gold(param0.get(i),param1.get(i)))
							      								    								  			  ^ Note: Some messages have
							      								    								   been simplified; recompile with -Xdiags:verbose t
							      								    								  o get full output 3 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ENTRINGER_NUMBER_1					      ENTRINGER_NUMBER_1					    ENTRINGER_NUMBER_1						  ENTRINGER_NUMBER_1
--							      --							    --								  --
int zigzag ( int n , int k ) {				      static int zigzag ( int n , int k ) {			    public static int zigzag ( int n , int k ) {		  script_not_found : None
  int dp [ n + 1 ] [ k + 1 ] ;				      	int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ k + 1 ] ;		  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	dp [ 0 ] [ 0 ] = 1 ;					      Arrays . fill ( dp , 0 ) ;				  
  dp [ 0 ] [ 0 ] = 1 ;					      	for ( int i = 1 ;					      dp [ 0 ] [ 0 ] = 1 ;					  
  for ( int i = 1 ;					      	i <= n ;						      for ( int i = 1 ;						  
  i <= n ;						      	i ++ ) dp [ i ] [ 0 ] = 0 ;				      i <= n ;							  
  i ++ ) dp [ i ] [ 0 ] = 0 ;				      	for ( int i = 1 ;					      i ++ ) {							  
  for ( int i = 1 ;					      	i <= n ;						    	dp [ i ] [ 0 ] = 0 ;					  
  i <= n ;						      	i ++ ) {						      }								  
  i ++ ) {						      	  for ( int j = 1 ;					      for ( int i = 1 ;						  
    for ( int j = 1 ;					      	  j <= Math . min ( i , k ) ;				      i <= n ;							  
    j <= i ;						      	  j ++ ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ]   i ++ ) {							  
    j ++ ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] 	}							    	for ( int j = 1 ;					  
    return dp [ n ] [ k ] ;				      	return dp [ n ] [ k ] ;					    	j <= i ;						  
  }							      }								    	j ++ ) {						  
  int main ( ) {					      								    	  dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ i  
    int n = 4 , k = 3 ;					      								    	}							  
    cout << zigzag ( n , k ) << endl ;			      								      }								  
    return 0 ;						      								      return dp [ n ] [ k ] ;					  
  }							      								    }								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE		      FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			    FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE			  FIND_A_TRIPLET_THAT_SUM_TO_A_GIVEN_VALUE
--							      --							    --								  --
bool find3Numbers ( int A [ ] , int arr_size , int sum ) {    boolean find3Numbers ( int A [ ] , int arr_size , int sum ) { public static boolean find3Numbers ( int A [ ] , int arr_size success : None
  int l , r ;						      	int l , r ;						      int l , r ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < arr_size - 2 ;					      	i < arr_size - 2 ;					      i < arr_size - 2 ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < arr_size - 1 ;					      	  j < arr_size - 1 ;					    	j < arr_size - 1 ;					  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      for ( int k = j + 1 ;				      	    for ( int k = j + 1 ;				    	  for ( int k = j + 1 ;					  
      k < arr_size ;					      	    k < arr_size ;					    	  k < arr_size ;					  
      k ++ ) {						      	    k ++ ) {						    	  k ++ ) {						  
	if ( A [ i ] + A [ j ] + A [ k ] == sum ) {	      	      if ( A [ i ] + A [ j ] + A [ k ] == sum ) {	    	    if ( A [ i ] + A [ j ] + A [ k ] == sum ) {		  
	  cout << "Triplet is " << A [ i ] << ", " << A [ j ] 		System . out . print ( "Triplet is " + A [ i ] + ", 	      System . out . println ( "Triplet is " + A [ i ] +  
	  return true ;					      		return true ;					    	      return true ;					  
	}						      	      }							    	    }							  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	      FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	    FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE	  FIND_DUPLICATES_GIVEN_ARRAY_ELEMENTS_NOT_LIMITED_RANGE
--							      --							    --								  --
void printDuplicates ( int arr [ ] , int n ) {		      private static void printDuplicates ( int [ ] arr , int n ) { public static void printDuplicates ( int arr [ ] , int n ) {  script_not_found : None
  unordered_map < int , int > freq ;			      	Map < Integer , Integer > map = new HashMap < > ( ) ;	      HashMap < Integer , Integer > freq = new HashMap < > ( ) ;  
  for ( int i = 0 ;					      	int count = 0 ;						      for ( int i = 0 ;						  
  i < n ;						      	boolean dup = false ;					      i < n ;							  
  i ++ ) freq [ arr [ i ] ] ++ ;			      	for ( int i = 0 ;					      i ++ ) {							  
  bool dup = false ;					      	i < n ;							    	freq . put ( arr [ i ] , ++ i ) ;			  
  unordered_map < int , int > :: iterator itr ;		      	i ++ ) {						      }								  
  for ( itr = freq . begin ( ) ;			      	  if ( map . containsKey ( arr [ i ] ) ) {		      boolean dup = false ;					  
  itr != freq . end ( ) ;				      	    count = map . get ( arr [ i ] ) ;			      Iterator < Integer > itr = freq . values ( ) . iterator ( ) 
  itr ++ ) {						      	    map . put ( arr [ i ] , count + 1 ) ;		      while ( itr . hasNext ( ) ) {				  
    if ( itr -> second > 1 ) {				      	  }							    	if ( itr . next ( ) > 1 ) {				  
      cout << itr -> first << " " ;			      	  else {						    	  System . out . print ( itr . next ( ) + " " ) ;	  
      dup = true ;					      	    map . put ( arr [ i ] , 1 ) ;			    	  dup = true ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  if ( dup == false ) cout << "-1" ;			      	for ( Entry < Integer , Integer > entry : map . entrySet (    if ( dup == false ) {					  
}							      	  if ( entry . getValue ( ) > 1 ) {			    	System . out . println ( "-1" ) ;			  
							      	    System . out . print ( entry . getKey ( ) + " " ) ;	      }								  
							      	    dup = true ;					    }								  
							      	  }							    								  
							      	}							    								  
							      	if ( ! dup ) {						    								  
							      	  System . out . println ( "-1" ) ;			    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELANNOY_NUMBER_1					      DELANNOY_NUMBER_1						    DELANNOY_NUMBER_1						  DELANNOY_NUMBER_1
--							      --							    --								  --
int dealnnoy ( int n , int m ) {			      static int dealnnoy ( int n , int m ) {			    public static int dealnnoy ( int n , int m ) {		  script_not_found : None
  int dp [ m + 1 ] [ n + 1 ] ;				      	int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) dp [ i ] [ 0 ] = 1 ;				      	i ++ ) dp [ i ] [ 0 ] = 1 ;				      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	dp [ i ] [ 0 ] = 1 ;					  
  i <= m ;						      	i < m ;							      }								  
  i ++ ) dp [ 0 ] [ i ] = 1 ;				      	i ++ ) dp [ 0 ] [ i ] = 1 ;				      for ( int i = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      i <= m ;							  
  i <= m ;						      	i <= m ;						      i ++ ) {							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				    	dp [ 0 ] [ i ] = 1 ;					  
  j <= n ;						      	j <= n ;						      }								  
  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ 	j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [   for ( int i = 1 ;						  
  return dp [ m ] [ n ] ;				      	return dp [ m ] [ n ] ;					      i <= m ;							  
}							      }								      i ++ ) {							  
							      								    	for ( int j = 1 ;					  
							      								    	j <= n ;						  
							      								    	j ++ ) {						  
							      								    	  dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 1 ] [ j  
							      								    	}							  
							      								      }								  
							      								      return dp [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			      FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			    FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1			  FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1
--							      --							    --								  --
bool isRectangle ( const vector < vector < int >> & m ) {     static boolean isRectangle ( int m [ ] [ ] ) {		    public static boolean isRectangle ( int [ ] [ ] m ) {	  script_not_found : None
  int rows = m . size ( ) ;				      	int rows = m . length ;					      int rows = m . length ;					  
  if ( rows == 0 ) return false ;			      	if ( rows == 0 ) return false ;				      if ( rows == 0 ) return false ;				  
  int columns = m [ 0 ] . size ( ) ;			      	int columns = m [ 0 ] . length ;			      int columns = m [ 0 ] . length ;				  
  for ( int y1 = 0 ;					      	for ( int y1 = 0 ;					      for ( int y1 = 0 ;					  
  y1 < rows ;						      	y1 < rows ;						      y1 < rows ;						  
  y1 ++ ) for ( int x1 = 0 ;				      	y1 ++ ) for ( int x1 = 0 ;				      y1 ++ ) for ( int x1 = 0 ;				  
  x1 < columns ;					      	x1 < columns ;						      x1 < columns ;						  
  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ; 	x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ;   x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ; 
  y2 < rows ;						      	y2 < rows ;						      y2 < rows ;						  
  y2 ++ ) for ( int x2 = x1 + 1 ;			      	y2 ++ ) for ( int x2 = x1 + 1 ;				      y2 ++ ) for ( int x2 = x1 + 1 ;				  
  x2 < columns ;					      	x2 < columns ;						      x2 < columns ;						  
  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 & 	x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 &   x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 & 
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF		  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF
--							      --							    --								  --
int findLength ( char * str ) {				      static int findLength ( String str ) {			    public static int findLength ( String str ) {		  success : None
  int n = strlen ( str ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int maxlen = 0 ;					      	int maxlen = 0 ;					      int maxlen = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j += 2 ) {						      	  j += 2 ) {						    	j += 2 ) {						  
      int length = j - i + 1 ;				      	    int length = j - i + 1 ;				    	  int length = j - i + 1 ;				  
      int leftsum = 0 , rightsum = 0 ;			      	    int leftsum = 0 , rightsum = 0 ;			    	  int leftsum = 0 , rightsum = 0 ;			  
      for ( int k = 0 ;					      	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
      k < length / 2 ;					      	    k < length / 2 ;					    	  k < length / 2 ;					  
      k ++ ) {						      	    k ++ ) {						    	  k ++ ) {						  
	leftsum += ( str [ i + k ] - '0' ) ;		      	      leftsum += ( str . charAt ( i + k ) - '0' ) ;	    	    leftsum += ( str . charAt ( i + k ) - '0' ) ;	  
	rightsum += ( str [ i + k + length / 2 ] - '0' ) ;    	      rightsum += ( str . charAt ( i + k + length / 2 ) - ' 	    rightsum += ( str . charAt ( i + k + length / 2 ) - ' 
      }							      	    }							    	  }							  
      if ( leftsum == rightsum && maxlen < length ) maxlen =  	    if ( leftsum == rightsum && maxlen < length ) maxlen =  	  if ( leftsum == rightsum && maxlen < length ) {	  
    }							      	  }							    	    maxlen = length ;					  
  }							      	}							    	  }							  
  return maxlen ;					      	return maxlen ;						    	}							  
}							      }								      }								  
							      								      return maxlen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		      COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		    COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS		  COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS
--							      --							    --								  --
int countSubarrays ( int arr [ ] , int n ) {		      static int countSubarrays ( int [ ] arr , int n ) {	    public static int countSubarrays ( int arr [ ] , int n ) {	  error : COUNT_SUBARRAYS_WITH_SAME_EVEN_AND_ODD_ELE
  int difference = 0 ;					      	int difference = 0 ;					      int difference = 0 ;					  MENTS.java:44: error: ']' expected   int hash_posi
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  tive [ ] = new int [ n + 1 ] , hash_negative [ n +
  int hash_positive [ n + 1 ] , hash_negative [ n + 1 ] ;     	int [ ] hash_positive = new int [ n + 1 ] ;		      int hash_positive [ ] = new int [ n + 1 ] , hash_negative [  1 ] = new int [ n + 1 ] ;
  fill_n ( hash_positive , n + 1 , 0 ) ;		      	int [ ] hash_negative = new int [ n + 1 ] ;		      fillArray ( hash_positive , n + 1 , 0 ) ;			  					^ COUNT_SUBA
  fill_n ( hash_negative , n + 1 , 0 ) ;		      	hash_positive [ 0 ] = 1 ;				      fillArray ( hash_negative , n + 1 , 0 ) ;			  RRAYS_WITH_SAME_EVEN_AND_ODD_ELEMENTS.java:44: err
  hash_positive [ 0 ] = 1 ;				      	for ( int i = 0 ;					      hash_positive [ 0 ] = 1 ;					  or: not a statement	int hash_positive [ ] = new
  for ( int i = 0 ;					      	i < n ;							      for ( int i = 0 ;						  int [ n + 1 ] , hash_negative [ n + 1 ] = new int
  i < n ;						      	i ++ ) {						      i < n ;							  [ n + 1 ] ;
  i ++ ) {						      	  if ( ( arr [ i ] & 1 ) == 1 ) {			      i ++ ) {							  			    ^ COUNT_SUBARRAYS_WITH_S
    if ( arr [ i ] & 1 == 1 ) difference ++ ;		      	    difference ++ ;					    	if ( arr [ i ] & 1 == 1 ) {				  AME_EVEN_AND_ODD_ELEMENTS.java:44: error: ';' expe
    else difference -- ;				      	  }							    	  difference ++ ;					  cted	 int hash_positive [ ] = new int [ n + 1 ] ,
    if ( difference < 0 ) {				      	  else {						    	}							   hash_negative [ n + 1 ] = new int [ n + 1 ] ;
      ans += hash_negative [ - difference ] ;		      	    difference -- ;					    	else {							  
      hash_negative [ - difference ] ++ ;		      	  }							    	  difference -- ;					  		^ COUNT_SUBARRAYS_WITH_SAME_EVEN_AND
    }							      	  if ( difference < 0 ) {				    	}							  _ODD_ELEMENTS.java:44: error: not a statement	  in
    else {						      	    ans += hash_negative [ - difference ] ;		    	if ( difference < 0 ) {					  t hash_positive [ ] = new int [ n + 1 ] , hash_neg
      ans += hash_positive [ difference ] ;		      	    hash_negative [ - difference ] ++ ;			    	  ans += hash_negative [ - difference ] ;		  ative [ n + 1 ] = new int [ n + 1 ] ;
      hash_positive [ difference ] ++ ;			      	  }							    	  hash_negative [ - difference ] ++ ;			  
    }							      	  else {						    	}							  	    ^ 4 errors
  }							      	    ans += hash_positive [ difference ] ;		    	else {							  
  return ans ;						      	    hash_positive [ difference ] ++ ;			    	  ans += hash_positive [ difference ] ;			  
}							      	  }							    	  hash_positive [ difference ] ++ ;			  
							      	}							    	}							  
							      	return ans ;						      }								  
							      }								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	      INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	    INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY	  INTEGER_POSITIVE_VALUE_POSITIVE_NEGATIVE_VALUE_ARRAY
--							      --							    --								  --
int findInteger ( int arr [ ] , int n ) {		      static int findInteger ( int arr [ ] , int n ) {		    public static int findInteger ( int arr [ ] , int n ) {	  script_not_found : None
  unordered_map < int , int > hash ;			      	HashMap < Integer , Integer > hash = new HashMap < > ( ) ;    HashMap < Integer , Integer > hash = new HashMap < > ( ) ;  
  int maximum = 0 ;					      	int maximum = 0 ;					      int maximum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] < 0 ) hash [ abs ( arr [ i ] ) ] -= 1 ;    	  if ( arr [ i ] < 0 ) hash . put ( Math . abs ( arr [ i ]  	if ( arr [ i ] < 0 ) {					  
    else hash [ arr [ i ] ] += 1 ;			      	  else hash . put ( Math . abs ( arr [ i ] ) , ( hash . get 	  hash . put ( Math . abs ( arr [ i ] ) , 1 ) ;		  
  }							      	}							    	}							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	else {							  
  i < n ;						      	i < n ;							    	  hash . put ( arr [ i ] , 1 ) ;			  
  i ++ ) if ( hash [ arr [ i ] ] != 0 ) return arr [ i ] ;    	i ++ ) if ( hash . get ( arr [ i ] ) > 0 ) return arr [ i ] 	}							  
  return - 1 ;						      	return - 1 ;						      }								  
}							      }								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) if ( hash . get ( arr [ i ] ) != 0 ) return arr [ i  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS			    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS
--							      --							    --								  --
int evenSum ( int n ) {					      static int evenSum ( int n ) {				    public static int evenSum ( int n ) {			  error : FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS.
  int C [ n + 1 ] [ n + 1 ] ;				      	int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  java:52: error: variable i is already defined in m
  int i , j ;						      	int i , j ;						      int i , j ;						  ethod f_filled(int)	for ( int i = 0 ;
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						    ^ 1 error
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j <= min ( i , n ) ;				      	  j <= Math . min ( i , n ) ;				    	j <= Math . min ( i , n ) ;				  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;	      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  if ( j == 0 || j == i ) {				  
      else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    C [ i ] [ j ] = 1 ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  int sum = 0 ;						      	int sum = 0 ;						    	    C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ 
  for ( int i = 0 ;					      	for ( i = 0 ;						    	  }							  
  i <= n ;						      	i <= n ;						    	}							  
  i += 2 ) sum += C [ n ] [ i ] ;			      	i += 2 ) sum += C [ n ] [ i ] ;				      }								  
  return sum ;						      	return sum ;						      int sum = 0 ;						  
}							      }								      for ( int i = 0 ;						  
							      								      i <= n ;							  
							      								      i += 2 ) {						  
							      								    	sum += C [ n ] [ i ] ;					  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT		      CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT		    CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT		  CHECK_WHETHER_POINT_EXISTS_CIRCLE_SECTOR_NOT
--							      --							    --								  --
void checkPoint ( int radius , int x , int y , float percent  static void checkPoint ( int radius , int x , int y , float p public static void checkPoint ( int radius , int x , int y ,  script_not_found : None
  float endAngle = 360 / percent + startAngle ;		      	float endAngle = 360 / percent + startAngle ;		      float endAngle = 360 / percent + startAngle ;		  
  float polarradius = sqrt ( x * x + y * y ) ;		      	double polarradius = Math . sqrt ( x * x + y * y ) ;	      float polarradius = Math . sqrt ( x * x + y * y ) ;	  
  float Angle = atan ( y / x ) ;			      	double Angle = Math . atan ( y / x ) ;			      float Angle = Math . atan ( y / x ) ;			  
  if ( Angle >= startAngle && Angle <= endAngle && polarradiu 	if ( Angle >= startAngle && Angle <= endAngle && polarradiu   if ( Angle >= startAngle && Angle <= endAngle && polarradiu 
  else printf ( "Point (%d, %d) does not exist in the circle  	else System . out . print ( "Point" + "(" + x + "," + y + " 	System . out . println ( "Point (" + x + ", " + y + ") ex 
}							      }								      }								  
							      								      else {							  
							      								    	System . out . println ( "Point (" + x + ", " + y + ") do 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_MAXIMUM_GCD_ARRAY_1				      FIND_PAIR_MAXIMUM_GCD_ARRAY_1				    FIND_PAIR_MAXIMUM_GCD_ARRAY_1				  FIND_PAIR_MAXIMUM_GCD_ARRAY_1
--							      --							    --								  --
int findMaxGCD ( int arr [ ] , int n ) {		      public static int findMaxGCD ( int arr [ ] , int n ) {	    public static int findMaxGCD ( int arr [ ] , int n ) {	  script_not_found : None
  int high = 0 ;					      	int high = 0 ;						      int high = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) high = max ( high , arr [ i ] ) ;		      	i ++ ) high = Math . max ( high , arr [ i ] ) ;		      i ++ ) {							  
  int count [ high + 1 ] = {				      	int count [ ] = new int [ high + 1 ] ;			    	high = Math . max ( high , arr [ i ] ) ;		  
    0 }							      	for ( int i = 0 ;					      }								  
    ;							      	i < n ;							      int count [ ] = new int [ high + 1 ] ;			  
    for ( int i = 0 ;					      	i ++ ) count [ arr [ i ] ] ++ ;				      count [ high + 1 ] = 0 ;					  
    i < n ;						      	int counter = 0 ;					      for ( int i = 0 ;						  
    i ++ ) count [ arr [ i ] ] ++ ;			      	for ( int i = high ;					      i < n ;							  
    int counter = 0 ;					      	i >= 1 ;						      i ++ ) {							  
    for ( int i = high ;				      	i -- ) {						    	count [ arr [ i ] ] ++ ;				  
    i >= 1 ;						      	  int j = i ;						      }								  
    i -- ) {						      	  while ( j <= high ) {					      int counter = 0 ;						  
      int j = i ;					      	    if ( count [ j ] > 0 ) counter += count [ j ] ;	      for ( int i = high ;					  
      counter = 0 ;					      	    j += i ;						      i >= 1 ;							  
      while ( j <= high ) {				      	    if ( counter == 2 ) return i ;			      i -- ) {							  
	if ( count [ j ] >= 2 ) return j ;		      	  }							    	int j = i ;						  
	else if ( count [ j ] == 1 ) counter ++ ;	      	  counter = 0 ;						    	counter = 0 ;						  
	j += i ;					      	}							    	while ( j <= high ) {					  
	if ( counter == 2 ) return i ;			      	return 1 ;						    	  if ( count [ j ] >= 2 ) {				  
      }							      }								    	    return j ;						  
    }							      								    	  }							  
  }							      								    	  else if ( count [ j ] == 1 ) {			  
							      								    	    counter ++ ;					  
							      								    	  }							  
							      								    	  j += i ;						  
							      								    	  if ( counter == 2 ) {					  
							      								    	    return i ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1	      FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1	    FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1	  FIND_PAIRS_IN_ARRAY_WHOSE_SUMS_ALREADY_EXIST_IN_ARRAY_1
--							      --							    --								  --
void findPair ( int arr [ ] , int n ) {			      public static void findPair ( int [ ] arr , int n ) {	    public static void findPair ( int arr [ ] , int n ) {	  script_not_found : None
  unordered_set < int > s ;				      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( Integer i : arr ) {				      for ( int i = 0 ;						  
  i < n ;						      	  s . add ( i ) ;					      i < n ;							  
  i ++ ) s . insert ( arr [ i ] ) ;			      	}							      i ++ ) {							  
  bool found = false ;					      	boolean found = false ;					    	s . add ( arr [ i ] ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < n ;						      	i < n - 1 ;						      boolean found = false ;					  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					      i < n ;							  
    j < n ;						      	  j < n ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = i + 1 ;					  
      if ( s . find ( arr [ i ] + arr [ j ] ) != s . end ( )  	    int sum = arr [ i ] + arr [ j ] ;			    	j < n ;							  
	cout << arr [ i ] << " " << arr [ j ] << endl ;	      	    if ( s . contains ( sum ) ) {			    	j ++ ) {						  
	found = true ;					      	      found = true ;					    	  if ( s . contains ( arr [ i ] + arr [ j ] ) ) {	  
      }							      	      System . out . println ( arr [ i ] + " " + arr [ j ]  	    System . out . println ( arr [ i ] + " " + arr [ j ]  
    }							      	    }							    	    found = true ;					  
  }							      	  }							    	  }							  
  if ( found == false ) cout << "Not exist" << endl ;	      	}							    	}							  
}							      	if ( found == false ) System . out . println ( "Not Exist "   }								  
							      }								      if ( found == false ) {					  
							      								    	System . out . println ( "Not exist" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_ELEMENT_TWO_SORTED_ARRAYS				      K_TH_ELEMENT_TWO_SORTED_ARRAYS				    K_TH_ELEMENT_TWO_SORTED_ARRAYS				  K_TH_ELEMENT_TWO_SORTED_ARRAYS
--							      --							    --								  --
int kth ( int arr1 [ ] , int arr2 [ ] , int m , int n , int k static int kth ( int arr1 [ ] , int arr2 [ ] , int m , int n  public static int kth ( int arr1 [ ] , int arr2 [ ] , int m , success : None
  int sorted1 [ m + n ] ;				      	int [ ] sorted1 = new int [ m + n ] ;			      int sorted1 [ ] = new int [ m + n ] ;			  
  int i = 0 , j = 0 , d = 0 ;				      	int i = 0 , j = 0 , d = 0 ;				      int i = 0 , j = 0 , d = 0 ;				  
  while ( i < m && j < n ) {				      	while ( i < m && j < n ) {				      while ( i < m && j < n ) {				  
    if ( arr1 [ i ] < arr2 [ j ] ) sorted1 [ d ++ ] = arr1 [  	  if ( arr1 [ i ] < arr2 [ j ] ) sorted1 [ d ++ ] = arr1 [  	if ( arr1 [ i ] < arr2 [ j ] ) {			  
    else sorted1 [ d ++ ] = arr2 [ j ++ ] ;		      	  else sorted1 [ d ++ ] = arr2 [ j ++ ] ;		    	  sorted1 [ d ++ ] = arr1 [ i ++ ] ;			  
  }							      	}							    	}							  
  while ( i < m ) sorted1 [ d ++ ] = arr1 [ i ++ ] ;	      	while ( i < m ) sorted1 [ d ++ ] = arr1 [ i ++ ] ;	    	else {							  
  while ( j < n ) sorted1 [ d ++ ] = arr2 [ j ++ ] ;	      	while ( j < n ) sorted1 [ d ++ ] = arr2 [ j ++ ] ;	    	  sorted1 [ d ++ ] = arr2 [ j ++ ] ;			  
  return sorted1 [ k - 1 ] ;				      	return sorted1 [ k - 1 ] ;				    	}							  
}							      }								      }								  
							      								      while ( i < m ) {						  
							      								    	sorted1 [ d ++ ] = arr1 [ i ++ ] ;			  
							      								      }								  
							      								      while ( j < n ) {						  
							      								    	sorted1 [ d ++ ] = arr2 [ j ++ ] ;			  
							      								      }								  
							      								      return sorted1 [ k - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
A_PRODUCT_ARRAY_PUZZLE_1				      A_PRODUCT_ARRAY_PUZZLE_1					    A_PRODUCT_ARRAY_PUZZLE_1					  A_PRODUCT_ARRAY_PUZZLE_1
--							      --							    --								  --
void productArray ( int arr [ ] , int n ) {		      void productArray ( int arr [ ] , int n ) {		    public static int [ ] productArray ( int arr [ ] , int n ) {  script_not_found : None
  if ( n == 1 ) {					      	if ( n == 1 ) {						      if ( n == 1 ) {						  
    cout << 0 ;						      	  System . out . print ( "0" ) ;			    	System . out . println ( 0 ) ;				  
    return ;						      	  return ;						    	return new int [ 0 ] ;					  
  }							      	}							      }								  
  int i , temp = 1 ;					      	int i , temp = 1 ;					      int i , temp = 1 ;					  
  int * prod = new int [ ( sizeof ( int ) * n ) ] ;	      	int prod [ ] = new int [ n ] ;				      int prod [ ] = new int [ ( arr . length * n ) ] ;		  
  memset ( prod , 1 , n ) ;				      	for ( int j = 0 ;					      System . arraycopy ( arr , 0 , prod , 1 , n ) ;		  
  for ( i = 0 ;						      	j < n ;							      for ( i = 0 ;						  
  i < n ;						      	j ++ ) prod [ j ] = 1 ;					      i < n ;							  
  i ++ ) {						      	for ( i = 0 ;						      i ++ ) {							  
    prod [ i ] = temp ;					      	i < n ;							    	prod [ i ] = temp ;					  
    temp *= arr [ i ] ;					      	i ++ ) {						    	temp *= arr [ i ] ;					  
  }							      	  prod [ i ] = temp ;					      }								  
  temp = 1 ;						      	  temp *= arr [ i ] ;					      temp = 1 ;						  
  for ( i = n - 1 ;					      	}							      for ( i = n - 1 ;						  
  i >= 0 ;						      	temp = 1 ;						      i >= 0 ;							  
  i -- ) {						      	for ( i = n - 1 ;					      i -- ) {							  
    prod [ i ] *= temp ;				      	i >= 0 ;						    	prod [ i ] *= temp ;					  
    temp *= arr [ i ] ;					      	i -- ) {						    	temp *= arr [ i ] ;					  
  }							      	  prod [ i ] *= temp ;					      }								  
  for ( i = 0 ;						      	  temp *= arr [ i ] ;					      for ( i = 0 ;						  
  i < n ;						      	}							      i < n ;							  
  i ++ ) cout << prod [ i ] << " " ;			      	for ( i = 0 ;						      i ++ ) {							  
  return ;						      	i < n ;							    	System . out . print ( prod [ i ] + " " ) ;		  
}							      	i ++ ) System . out . print ( prod [ i ] + " " ) ;	      }								  
							      	return ;						      return prod ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		      COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		    COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX		  COMMON_ELEMENTS_IN_ALL_ROWS_OF_A_GIVEN_MATRIX
--							      --							    --								  --
void printCommonElements ( int mat [ M ] [ N ] ) {	      static void printCommonElements ( int mat [ ] [ ] ) {	    public static void printCommonElements ( int [ ] mat ) {	  script_not_found : None
  unordered_map < int , int > mp ;			      	Map < Integer , Integer > mp = new HashMap < > ( ) ;	      HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
  for ( int j = 0 ;					      	for ( int j = 0 ;					      for ( int j = 0 ;						  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) mp [ mat [ 0 ] [ j ] ] = 1 ;			      	j ++ ) mp . put ( mat [ 0 ] [ j ] , 1 ) ;		      j ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	mp . put ( mat [ 0 ] [ j ] , 1 ) ;			  
  i < M ;						      	i < M ;							      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < M ;							  
    j < N ;						      	  j < N ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      if ( mp [ mat [ i ] [ j ] ] == i ) {		      	    if ( mp . get ( mat [ i ] [ j ] ) != null && mp . get ( 	j < N ;							  
	mp [ mat [ i ] [ j ] ] = i + 1 ;		      	      mp . put ( mat [ i ] [ j ] , i + 1 ) ;		    	j ++ ) {						  
	if ( i == M - 1 ) cout << mat [ i ] [ j ] << " " ;    	      if ( i == M - 1 ) System . out . print ( mat [ i ] [  	  if ( mp . get ( mat [ i ] [ j ] ) == i ) {		  
      }							      	    }							    	    mp . put ( mat [ i ] [ j ] , i + 1 ) ;		  
    }							      	  }							    	    if ( i == M - 1 ) {					  
  }							      	}							    	      System . out . print ( mat [ i ] [ j ] + " " ) ;	  
}							      }								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH FIND_THE_ELEMENT_BEFORE_WHICH_ALL_THE_ELEMENTS_ARE_SMALLER_TH
--							      --							    --								  --
int findElement ( int arr [ ] , int n ) {		      static int findElement ( int [ ] arr , int n ) {		    public static int findElement ( int arr [ ] , int n ) {	  success : None
  int leftMax [ n ] ;					      	int [ ] leftMax = new int [ n ] ;			      int leftMax [ ] = new int [ n ] ;				  
  leftMax [ 0 ] = INT_MIN ;				      	leftMax [ 0 ] = Integer . MIN_VALUE ;			      leftMax [ 0 ] = Integer . MIN_VALUE ;			  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) leftMax [ i ] = max ( leftMax [ i - 1 ] , arr [ i -  	i ++ ) leftMax [ i ] = Math . max ( leftMax [ i - 1 ] , arr   i ++ ) {							  
  int rightMin = INT_MAX ;				      	int rightMin = Integer . MAX_VALUE ;			    	leftMax [ i ] = Math . max ( leftMax [ i - 1 ] , arr [ i  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      }								  
  i >= 0 ;						      	i >= 0 ;						      int rightMin = Integer . MAX_VALUE ;			  
  i -- ) {						      	i -- ) {						      for ( int i = n - 1 ;					  
    if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] )  	  if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] )    i >= 0 ;							  
    rightMin = min ( rightMin , arr [ i ] ) ;		      	  rightMin = Math . min ( rightMin , arr [ i ] ) ;	      i -- ) {							  
  }							      	}							    	if ( leftMax [ i ] < arr [ i ] && rightMin > arr [ i ] )  
  return - 1 ;						      	return - 1 ;						    	  return i ;						  
}							      }								    	}							  
							      								    	rightMin = Math . min ( rightMin , arr [ i ] ) ;	  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PETERSON_GRAPH						      PETERSON_GRAPH						    PETERSON_GRAPH						  PETERSON_GRAPH
--							      --							    --								  --
bool findthepath ( char * S , int v ) {			      static boolean findthepath ( char [ ] S , int v ) {	    public static boolean findthepath ( String S , int v ) {	  script_not_found : None
  result [ 0 ] = v + '0' ;				      	result [ 0 ] = ( char ) ( v + '0' ) ;			      result [ 0 ] = v + '0' ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  S [ i ] ;						      	i < ( int ) S . length ;				      S . length ( ) > i ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( adj [ v ] [ S [ i ] - 'A' ] || adj [ S [ i ] - 'A' ] 	  if ( adj [ v ] [ S [ i ] - 'A' ] || adj [ S [ i ] - 'A' ] 	if ( adj [ v ] [ S . charAt ( i ) - 'A' ] != 0 || adj [ S 
      v = S [ i ] - 'A' ;				      	    v = S [ i ] - 'A' ;					    	else if ( adj [ v ] [ S . charAt ( i ) - 'A' + 5 ] != 0 | 
    }							      	  }							    	else return false ;					  
    else if ( adj [ v ] [ S [ i ] - 'A' + 5 ] || adj [ S [ i  	  else if ( adj [ v ] [ S [ i ] - 'A' + 5 ] || adj [ S [ i  	result [ i ] = v + '0' ;				  
      v = S [ i ] - 'A' + 5 ;				      	    v = S [ i ] - 'A' + 5 ;				      }								  
    }							      	  }							      return true ;						  
    else return false ;					      	  else return false ;					    }								  
    result [ i ] = v + '0' ;				      	  result [ i ] = ( char ) ( v + '0' ) ;			    								  
  }							      	}							    								  
  return true ;						      	return true ;						    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		      MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		    MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1		  MAXIMUM_SUM_IARRI_AMONG_ROTATIONS_GIVEN_ARRAY_1
--							      --							    --								  --
int maxSum ( int arr [ ] , int n ) {			      static int maxSum ( int arr [ ] , int n ) {		    public static int maxSum ( int arr [ ] , int n ) {		  success : None
  int cum_sum = 0 ;					      	int cum_sum = 0 ;					      int cum_sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) cum_sum += arr [ i ] ;				      	i ++ ) cum_sum += arr [ i ] ;				      i ++ ) {							  
  int curr_val = 0 ;					      	int curr_val = 0 ;					    	cum_sum += arr [ i ] ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < n ;						      	i < n ;							      int curr_val = 0 ;					  
  i ++ ) curr_val += i * arr [ i ] ;			      	i ++ ) curr_val += i * arr [ i ] ;			      for ( int i = 0 ;						  
  int res = curr_val ;					      	int res = curr_val ;					      i < n ;							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      i ++ ) {							  
  i < n ;						      	i < n ;							    	curr_val += i * arr [ i ] ;				  
  i ++ ) {						      	i ++ ) {						      }								  
    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + a 	  int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + a   int res = curr_val ;					  
    curr_val = next_val ;				      	  curr_val = next_val ;					      for ( int i = 1 ;						  
    res = max ( res , next_val ) ;			      	  res = Math . max ( res , next_val ) ;			      i < n ;							  
  }							      	}							      i ++ ) {							  
  return res ;						      	return res ;						    	int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + a 
}							      }								    	curr_val = next_val ;					  
							      								    	res = Math . max ( res , next_val ) ;			  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE			      FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE			    FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE				  FIND_TWO_SIDES_RIGHT_ANGLE_TRIANGLE
--							      --							    --								  --
void printOtherSides ( int n ) {			      static void printOtherSides ( int n ) {			    public static void printOtherSides ( int n ) {		  script_not_found : None
  if ( n & 1 ) {					      	if ( n % 2 != 0 ) {					      if ( n & 1 ) {						  
    if ( n == 1 ) cout << - 1 << endl ;			      	  if ( n == 1 ) System . out . println ( "-1" ) ;	    	if ( n == 1 ) {						  
    else {						      	  else {						    	  System . out . println ( - 1 ) ;			  
      int b = ( n * n - 1 ) / 2 ;			      	    int b = ( n * n - 1 ) / 2 ;				    	}							  
      int c = ( n * n + 1 ) / 2 ;			      	    int c = ( n * n + 1 ) / 2 ;				    	else {							  
      cout << "b = " << b << ", c = " << c << endl ;	      	    System . out . println ( "b = " + b + ", c = " + c ) ;  	  int b = ( n * n - 1 ) / 2 ;				  
    }							      	  }							    	  int c = ( n * n + 1 ) / 2 ;				  
  }							      	}							    	  System . out . println ( "b = " + b + ", c = " + c ) ;  
  else {						      	else {							    	}							  
    if ( n == 2 ) cout << - 1 << endl ;			      	  if ( n == 2 ) System . out . println ( "-1" ) ;	      }								  
    else {						      	  else {						      else {							  
      int b = n * n / 4 - 1 ;				      	    int b = n * n / 4 - 1 ;				    	if ( n == 2 ) {						  
      int c = n * n / 4 + 1 ;				      	    int c = n * n / 4 + 1 ;				    	  System . out . println ( - 1 ) ;			  
      cout << "b = " << b << ", c = " << c << endl ;	      	    System . out . println ( "b = " + b + ", c = " + c ) ;  	}							  
    }							      	  }							    	else {							  
  }							      	}							    	  int b = n * n / 4 - 1 ;				  
}							      }								    	  int c = n * n / 4 + 1 ;				  
							      								    	  System . out . println ( "b = " + b + ", c = " + c ) ;  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES	      CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES		    CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES		  CONVERT_STRICTLY_INCREASING_ARRAY_MINIMUM_CHANGES
--							      --							    --								  --
int minRemove ( int arr [ ] , int n ) {			      static int minRemove ( int arr [ ] , int n ) {		    public static int minRemove ( int arr [ ] , int n ) {	  success : None
  int LIS [ n ] , len = 0 ;				      	int LIS [ ] = new int [ n ] ;				      int LIS [ ] = new int [ n ] , len = 0 ;			  
  for ( int i = 0 ;					      	int len = 0 ;						      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) LIS [ i ] = 1 ;				      	i < n ;							      i ++ ) {							  
  for ( int i = 1 ;					      	i ++ ) LIS [ i ] = 1 ;					    	LIS [ i ] = 1 ;						  
  i < n ;						      	for ( int i = 1 ;					      }								  
  i ++ ) {						      	i < n ;							      for ( int i = 1 ;						  
    for ( int j = 0 ;					      	i ++ ) {						      i < n ;							  
    j < i ;						      	  for ( int j = 0 ;					      i ++ ) {							  
    j ++ ) {						      	  j < i ;						    	for ( int j = 0 ;					  
      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ]  	  j ++ ) {						    	j < i ;							  
	LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 ) ;	      	    if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ]  	j ++ ) {						  
      }							      	  }							    	  if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ]  
    }							      	  len = Math . max ( len , LIS [ i ] ) ;		    	}							  
    len = max ( len , LIS [ i ] ) ;			      	}							    	len = Math . max ( len , LIS [ i ] ) ;			  
  }							      	return n - len ;					      }								  
  return n - len ;					      }								      return n - len ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_NUMBERS_B_FIND_X_X_B				      GIVEN_TWO_NUMBERS_B_FIND_X_X_B				    GIVEN_TWO_NUMBERS_B_FIND_X_X_B				  GIVEN_TWO_NUMBERS_B_FIND_X_X_B
--							      --							    --								  --
void modularEquation ( int a , int b ) {		      static void modularEquation ( int a , int b ) {		    public static void modularEquation ( int a , int b ) {	  script_not_found : None
  if ( a < b ) {					      	if ( a < b ) {						      if ( a < b ) {						  
    cout << "No solution possible " << endl ;		      	  System . out . println ( "No solution possible " ) ;	    	System . out . println ( "No solution possible" ) ;	  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( a == b ) {					      	if ( a == b ) {						      if ( a == b ) {						  
    cout << "Infinite Solution possible " << endl ;	      	  System . out . println ( "Infinite Solution possible " )  	System . out . println ( "Infinite Solution possible" ) ; 
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int n = a - b ;					      	int n = a - b ;						      int n = a - b ;						  
  int y = sqrt ( a - b ) ;				      	int y = ( int ) Math . sqrt ( a - b ) ;			      int y = Math . sqrt ( a - b ) ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= y ;						      	i <= y ;						      i <= y ;							  
  ++ i ) {						      	++ i ) {						      ++ i ) {							  
    if ( n % i == 0 ) {					      	  if ( n % i == 0 ) {					    	if ( n % i == 0 ) {					  
      if ( n / i > b ) count ++ ;			      	    if ( n / i > b ) count ++ ;				    	  if ( n / i > b ) {					  
      if ( i > b ) count ++ ;				      	    if ( i > b ) count ++ ;				    	    count ++ ;						  
    }							      	  }							    	  }							  
  }							      	}							    	  if ( i > b ) {					  
  if ( y * y == n && y > b ) count -- ;			      	if ( y * y == n && y > b ) count -- ;			    	    count ++ ;						  
  cout << count << endl ;				      	System . out . println ( count ) ;			    	  }							  
}							      }								    	}							  
							      								      }								  
							      								      if ( y * y == n && y > b ) {				  
							      								    	count -- ;						  
							      								      }								  
							      								      System . out . println ( count ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		      SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		    SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY		  SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_ARRAY
--							      --							    --								  --
int search ( int arr [ ] , int l , int h , int key ) {	      static int search ( int arr [ ] , int l , int h , int key ) { public static int search ( int arr [ ] , int l , int h , int  error : SEARCH_AN_ELEMENT_IN_A_SORTED_AND_PIVOTED_
  if ( l > h ) return - 1 ;				      	if ( l > h ) return - 1 ;				      if ( l > h ) return - 1 ;					  ARRAY.java:43: error: '}' expected	 param0.add(
  int mid = ( l + h ) / 2 ;				      	int mid = ( l + h ) / 2 ;				      int mid = ( l + h ) / 2 ;					  new int[]{{30, 40, 50, 10, 20});
  if ( arr [ mid ] == key ) return mid ;		      	if ( arr [ mid ] == key ) return mid ;			      if ( arr [ mid ] == key ) return mid ;			  			      ^ 1 error
  if ( arr [ l ] <= arr [ mid ] ) {			      	if ( arr [ l ] <= arr [ mid ] ) {			      if ( arr [ l ] <= arr [ mid ] ) {				  
    if ( key >= arr [ l ] && key <= arr [ mid ] ) return sear 	  if ( key >= arr [ l ] && key <= arr [ mid ] ) return sear 	if ( key >= arr [ l ] && key <= arr [ mid ] ) return sear 
    return search ( arr , mid + 1 , h , key ) ;		      	  return search ( arr , mid + 1 , h , key ) ;		    	return search ( arr , mid + 1 , h , key ) ;		  
  }							      	}							      }								  
  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search 	if ( key >= arr [ mid ] && key <= arr [ h ] ) return search   if ( key >= arr [ mid ] && key <= arr [ h ] ) return search 
  return search ( arr , l , mid - 1 , key ) ;		      	return search ( arr , l , mid - 1 , key ) ;		      return search ( arr , l , mid - 1 , key ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CEILING_IN_A_SORTED_ARRAY_1				      CEILING_IN_A_SORTED_ARRAY_1				    CEILING_IN_A_SORTED_ARRAY_1					  CEILING_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
int ceilSearch ( int arr [ ] , int low , int high , int x ) { static int ceilSearch ( int arr [ ] , int low , int high , in public static int ceilSearch ( int arr [ ] , int low , int hi success : None
  int mid ;						      	int mid ;						      int mid ;							  
  if ( x <= arr [ low ] ) return low ;			      	if ( x <= arr [ low ] ) return low ;			      if ( x <= arr [ low ] ) return low ;			  
  if ( x > arr [ high ] ) return - 1 ;			      	if ( x > arr [ high ] ) return - 1 ;			      if ( x > arr [ high ] ) return - 1 ;			  
  mid = ( low + high ) / 2 ;				      	mid = ( low + high ) / 2 ;				      mid = ( low + high ) / 2 ;				  
  if ( arr [ mid ] == x ) return mid ;			      	if ( arr [ mid ] == x ) return mid ;			      if ( arr [ mid ] == x ) return mid ;			  
  else if ( arr [ mid ] < x ) {				      	else if ( arr [ mid ] < x ) {				      else if ( arr [ mid ] < x ) {				  
    if ( mid + 1 <= high && x <= arr [ mid + 1 ] ) return mid 	  if ( mid + 1 <= high && x <= arr [ mid + 1 ] ) return mid 	if ( mid + 1 <= high && x <= arr [ mid + 1 ] ) return mid 
    else return ceilSearch ( arr , mid + 1 , high , x ) ;     	  else return ceilSearch ( arr , mid + 1 , high , x ) ;	    	else return ceilSearch ( arr , mid + 1 , high , x ) ;	  
  }							      	}							      }								  
  else {						      	else {							      else {							  
    if ( mid - 1 >= low && x > arr [ mid - 1 ] ) return mid ; 	  if ( mid - 1 >= low && x > arr [ mid - 1 ] ) return mid ; 	if ( mid - 1 >= low && x > arr [ mid - 1 ] ) return mid ; 
    else return ceilSearch ( arr , low , mid - 1 , x ) ;      	  else return ceilSearch ( arr , low , mid - 1 , x ) ;	    	else return ceilSearch ( arr , low , mid - 1 , x ) ;	  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS		      MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS		    MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS		  MAXIMUM_SUM_INCREASING_ORDER_ELEMENTS_N_ARRAYS
--							      --							    --								  --
int maximumSum ( int a [ ] [ M ] , int n ) {		      static int maximumSum ( int a [ ] [ ] , int n ) {		    public static int maximumSum ( int a [ ] [ ] , int n ) {	  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sort ( a [ i ] , a [ i ] + M ) ;		      	i ++ ) sort ( a , i , n ) ;				      i ++ ) {							  
  int sum = a [ n - 1 ] [ M - 1 ] ;			      	int sum = a [ n - 1 ] [ M - 1 ] ;			    	Arrays . sort ( a [ i ] ) ;				  
  int prev = a [ n - 1 ] [ M - 1 ] ;			      	int prev = a [ n - 1 ] [ M - 1 ] ;			      }								  
  int i , j ;						      	int i , j ;						      int sum = a [ n - 1 ] [ M - 1 ] ;				  
  for ( i = n - 2 ;					      	for ( i = n - 2 ;					      int prev = a [ n - 1 ] [ M - 1 ] ;			  
  i >= 0 ;						      	i >= 0 ;						      int i , j ;						  
  i -- ) {						      	i -- ) {						      for ( i = n - 2 ;						  
    for ( j = M - 1 ;					      	  for ( j = M - 1 ;					      i >= 0 ;							  
    j >= 0 ;						      	  j >= 0 ;						      i -- ) {							  
    j -- ) {						      	  j -- ) {						    	for ( j = M - 1 ;					  
      if ( a [ i ] [ j ] < prev ) {			      	    if ( a [ i ] [ j ] < prev ) {			    	j >= 0 ;						  
	prev = a [ i ] [ j ] ;				      	      prev = a [ i ] [ j ] ;				    	j -- ) {						  
	sum += prev ;					      	      sum += prev ;					    	  if ( a [ i ] [ j ] < prev ) {				  
	break ;						      	      break ;						    	    prev = a [ i ] [ j ] ;				  
      }							      	    }							    	    sum += prev ;					  
    }							      	  }							    	    break ;						  
    if ( j == - 1 ) return 0 ;				      	  if ( j == - 1 ) return 0 ;				    	  }							  
  }							      	}							    	}							  
  return sum ;						      	return sum ;						    	if ( j == - 1 ) {					  
}							      }								    	  return 0 ;						  
							      								    	}							  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_LINE_PASSING_2_POINTS			      PROGRAM_FIND_LINE_PASSING_2_POINTS			    PROGRAM_FIND_LINE_PASSING_2_POINTS				  PROGRAM_FIND_LINE_PASSING_2_POINTS
--							      --							    --								  --
pair < double , double > void lineFromPoints ( pdd P , pdd Q  static void lineFromPoints ( Pair P , Pair Q ) {		    public static String lineFromPoints ( pdd P , pdd Q ) {	  script_not_found : None
  double a = Q . second - P . second ;			      	int a = Q . second - P . second ;			      double a = Q . getSecond ( ) - P . getSecond ( ) ;	  
  double b = P . first - Q . first ;			      	int b = P . first - Q . first ;				      double b = P . getFirst ( ) - Q . getFirst ( ) ;		  
  double c = a * ( P . first ) + b * ( P . second ) ;	      	int c = a * ( P . first ) + b * ( P . second ) ;	      double c = a * ( P . getFirst ( ) ) + b * ( P . getSecond ( 
  if ( b < 0 ) {					      	if ( b < 0 ) {						      if ( b < 0 ) {						  
    cout << "The line passing through points P and Q is: " << 	  System . out . println ( "The line passing through points 	return "The line passing through points P and Q is: " + a 
  }							      	}							      }								  
  else {						      	else {							      else {							  
    cout << "The line passing through points P and Q is: " << 	  System . out . println ( "The line passing through points 	return "The line passing through points P and Q is: " + a 
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SORTED_ROWS_MATRIX				      COUNT_SORTED_ROWS_MATRIX					    COUNT_SORTED_ROWS_MATRIX					  COUNT_SORTED_ROWS_MATRIX
--							      --							    --								  --
int sortedCount ( int mat [ ] [ MAX ] , int r , int c ) {     static int sortedCount ( int mat [ ] [ ] , int r , int c ) {  public static int sortedCount ( int mat [ ] [ ] , int r , int success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < r ;						      	i < r ;							      i < r ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < c - 1 ;						      	  j < c - 1 ;						    	j < c - 1 ;						  
    j ++ ) if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) brea 	  j ++ ) if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) brea 	j ++ ) if ( mat [ i ] [ j + 1 ] <= mat [ i ] [ j ] ) brea 
    if ( j == c - 1 ) result ++ ;			      	  if ( j == c - 1 ) result ++ ;				    	if ( j == c - 1 ) result ++ ;				  
  }							      	}							      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < r ;						      	i < r ;							      i < r ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = c - 1 ;					      	  for ( j = c - 1 ;					    	for ( j = c - 1 ;					  
    j > 0 ;						      	  j > 0 ;						    	j > 0 ;							  
    j -- ) if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) brea 	  j -- ) if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) brea 	j -- ) if ( mat [ i ] [ j - 1 ] <= mat [ i ] [ j ] ) brea 
    if ( c > 1 && j == 0 ) result ++ ;			      	  if ( c > 1 && j == 0 ) result ++ ;			    	if ( c > 1 && j == 0 ) result ++ ;			  
  }							      	}							      }								  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		      MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		    MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY		  MAXIMUM_POSSIBLE_DIFFERENCE_TWO_SUBSETS_ARRAY
--							      --							    --								  --
int maxDiff ( int arr [ ] , int n ) {			      static int maxDiff ( int [ ] arr , int n ) {		    public static int maxDiff ( int arr [ ] , int n ) {		  success : None
  int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;		      	int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;			      int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n - 1 ;						      	i <= n - 1 ;						      i <= n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    bool isSingleOccurance = true ;			      	  boolean isSingleOccurance = true ;			    	boolean isSingleOccurance = true ;			  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j <= n - 1 ;					      	  j <= n - 1 ;						    	j <= n - 1 ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ i ] == arr [ j ] ) {			      	    if ( arr [ i ] == arr [ j ] ) {			    	  if ( arr [ i ] == arr [ j ] ) {			  
	isSingleOccurance = false ;			      	      isSingleOccurance = false ;			    	    isSingleOccurance = false ;				  
	arr [ i ] = arr [ j ] = 0 ;			      	      arr [ i ] = arr [ j ] = 0 ;			    	    arr [ i ] = arr [ j ] = 0 ;				  
	break ;						      	      break ;						    	    break ;						  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
    if ( isSingleOccurance ) {				      	  if ( isSingleOccurance ) {				    	if ( isSingleOccurance ) {				  
      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ;	      	    if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ;	    	  if ( arr [ i ] > 0 ) {				  
      else SubsetSum_2 += arr [ i ] ;			      	    else SubsetSum_2 += arr [ i ] ;			    	    SubsetSum_1 += arr [ i ] ;				  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return abs ( SubsetSum_1 - SubsetSum_2 ) ;		      	return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;	    	    SubsetSum_2 += arr [ i ] ;				  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY		      COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY		    COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY			  COUNT_MINIMUM_STEPS_GET_GIVEN_DESIRED_ARRAY
--							      --							    --								  --
int countMinOperations ( unsigned int target [ ] , int n ) {  static int countMinOperations ( int n ) {			    public static int countMinOperations ( int target [ ] , int n script_not_found : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  while ( 1 ) {						      	while ( true ) {					      while ( 1 ) {						  
    int zero_count = 0 ;				      	  int zero_count = 0 ;					    	int zero_count = 0 ;					  
    int i ;						      	  int i ;						    	int i ;							  
    for ( i = 0 ;					      	  for ( i = 0 ;						    	for ( i = 0 ;						  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      if ( target [ i ] & 1 ) break ;			      	    if ( arr [ i ] % 2 == 1 ) break ;			    	  if ( target [ i ] & 1 ) {				  
      else if ( target [ i ] == 0 ) zero_count ++ ;	      	    else if ( arr [ i ] == 0 ) zero_count ++ ;		    	    break ;						  
    }							      	  }							    	  }							  
    if ( zero_count == n ) return result ;		      	  if ( zero_count == n ) return result ;		    	  else if ( target [ i ] == 0 ) {			  
    if ( i == n ) {					      	  if ( i == n ) {					    	    zero_count ++ ;					  
      for ( int j = 0 ;					      	    for ( int j = 0 ;					    	  }							  
      j < n ;						      	    j < n ;						    	}							  
      j ++ ) target [ j ] = target [ j ] / 2 ;		      	    j ++ ) arr [ j ] = arr [ j ] / 2 ;			    	if ( zero_count == n ) {				  
      result ++ ;					      	    result ++ ;						    	  return result ;					  
    }							      	  }							    	}							  
    for ( int j = i ;					      	  for ( int j = i ;					    	if ( i == n ) {						  
    j < n ;						      	  j < n ;						    	  for ( int j = 0 ;					  
    j ++ ) {						      	  j ++ ) {						    	  j < n ;						  
      if ( target [ j ] & 1 ) {				      	    if ( arr [ j ] % 2 == 1 ) {				    	  j ++ ) {						  
	target [ j ] -- ;				      	      arr [ j ] -- ;					    	    target [ j ] = target [ j ] / 2 ;			  
	result ++ ;					      	      result ++ ;					    	  }							  
      }							      	    }							    	  result ++ ;						  
    }							      	  }							    	}							  
  }							      	}							    	for ( int j = i ;					  
}							      }								    	j < n ;							  
							      								    	j ++ ) {						  
							      								    	  if ( target [ j ] & 1 ) {				  
							      								    	    target [ j ] -- ;					  
							      								    	    result ++ ;						  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			      SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			    SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS			  SMALLEST_SUBARRAY_K_DISTINCT_NUMBERS
--							      --							    --								  --
void minRange ( int arr [ ] , int n , int k ) {		      static void minRange ( int arr [ ] , int n , int k ) {	    public static void minRange ( int arr [ ] , int n , int k ) { script_not_found : None
  int l = 0 , r = n ;					      	int l = 0 , r = n ;					      int l = 0 , r = n ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    unordered_set < int > s ;				      	  Set < Integer > s = new HashSet < Integer > ( ) ;	    	HashSet < Integer > s = new HashSet < > ( ) ;		  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = i ;					      	  for ( j = i ;						    	for ( j = i ;						  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      s . insert ( arr [ j ] ) ;			      	    s . add ( arr [ j ] ) ;				    	  s . add ( arr [ j ] ) ;				  
      if ( s . size ( ) == k ) {			      	    if ( s . size ( ) == k ) {				    	  if ( s . size ( ) == k ) {				  
	if ( ( j - i ) < ( r - l ) ) {			      	      if ( ( j - i ) < ( r - l ) ) {			    	    if ( ( j - i ) < ( r - l ) ) {			  
	  r = j ;					      		r = j ;						    	      r = j ;						  
	  l = i ;					      		l = i ;						    	      l = i ;						  
	}						      	      }							    	    }							  
	break ;						      	      break ;						    	    break ;						  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
    if ( j == n ) break ;				      	  if ( j == n ) break ;					    	if ( j == n ) break ;					  
  }							      	}							      }								  
  if ( l == 0 && r == n ) cout << "Invalid k" ;		      	if ( l == 0 && r == n ) System . out . println ( "Invalid k   if ( l == 0 && r == n ) {					  
  else cout << l << " " << r ;				      	else System . out . println ( l + " " + r ) ;		    	System . out . println ( "Invalid k" ) ;		  
}							      }								      }								  
							      								      else {							  
							      								    	System . out . println ( l + " " + r ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE			      MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE			    MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE			  MAXIMUM_BINOMIAL_COEFFICIENT_TERM_VALUE
--							      --							    --								  --
int maxcoefficientvalue ( int n ) {			      static int maxcoefficientvalue ( int n ) {		    public static int maxcoefficientvalue ( int n ) {		  success : None
  int C [ n + 1 ] [ n + 1 ] ;				      	int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= min ( i , n ) ;				      	  j <= Math . min ( i , n ) ;				    	j <= Math . min ( i , n ) ;				  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;	      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  if ( j == 0 || j == i ) {				  
      else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    C [ i ] [ j ] = 1 ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  int maxvalue = 0 ;					      	int maxvalue = 0 ;					    	    C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ 
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	  }							  
  i <= n ;						      	i <= n ;						    	}							  
  i ++ ) maxvalue = max ( maxvalue , C [ n ] [ i ] ) ;	      	i ++ ) maxvalue = Math . max ( maxvalue , C [ n ] [ i ] ) ;   }								  
  return maxvalue ;					      	return maxvalue ;					      int maxvalue = 0 ;					  
}							      }								      for ( int i = 0 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	maxvalue = Math . max ( maxvalue , C [ n ] [ i ] ) ;	  
							      								      }								  
							      								      return maxvalue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_DERANGEMENT_SEQUENCE				      SMALLEST_DERANGEMENT_SEQUENCE				    SMALLEST_DERANGEMENT_SEQUENCE				  SMALLEST_DERANGEMENT_SEQUENCE
--							      --							    --								  --
void generate_derangement ( int N ) {			      static void generate_derangement ( int N ) {		    public static void generateDerangement ( int N ) {		  script_not_found : None
  int S [ N + 1 ] ;					      	int S [ ] = new int [ N + 1 ] ;				      int [ ] S = new int [ N + 1 ] ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= N ;						      	i <= N ;						      i <= N ;							  
  i ++ ) S [ i ] = i ;					      	i ++ ) S [ i ] = i ;					      i ++ ) {							  
  int D [ N + 1 ] ;					      	int D [ ] = new int [ N + 1 ] ;				    	S [ i ] = i ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      }								  
  i <= N ;						      	i <= N ;						      int [ ] D = new int [ N + 1 ] ;				  
  i += 2 ) {						      	i += 2 ) {						      for ( int i = 1 ;						  
    if ( i == N && i % N != 0 ) {			      	  if ( i == N ) {					      i <= N ;							  
      int temp = D [ N ] D [ N ] = D [ N - 1 ] ;	      	    D [ N ] = S [ N - 1 ] ;				      i += 2 ) {						  
      D [ N - 1 ] = temp ;				      	    D [ N - 1 ] = S [ N ] ;				    	if ( i == N && i % N != 0 ) {				  
    }							      	  }							    	  int temp = D [ N ] ;					  
    else {						      	  else {						    	  D [ N ] = D [ N - 1 ] ;				  
      D [ i ] = i + 1 ;					      	    D [ i ] = i + 1 ;					    	  D [ N - 1 ] = temp ;					  
      D [ i + 1 ] = i ;					      	    D [ i + 1 ] = i ;					    	}							  
    }							      	  }							    	else {							  
  }							      	}							    	  D [ i ] = i + 1 ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	  D [ i + 1 ] = i ;					  
  i <= N ;						      	i <= N ;						    	}							  
  i ++ ) printf ( "%d " , D [ i ] ) ;			      	i ++ ) System . out . print ( D [ i ] + " " ) ;		      }								  
  printf ( "\n" ) ;					      	System . out . println ( ) ;				      for ( int i = 1 ;						  
}							      }								      i <= N ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( D [ i ] + " " ) ;		  
							      								      }								  
							      								      System . out . println ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUBARRAY_LEAST_AVERAGE				      FIND_SUBARRAY_LEAST_AVERAGE				    FIND_SUBARRAY_LEAST_AVERAGE					  FIND_SUBARRAY_LEAST_AVERAGE
--							      --							    --								  --
void findMinAvgSubarray ( int arr [ ] , int n , int k ) {     static void findMinAvgSubarray ( int n , int k ) {	    public static void findMinAvgSubarray ( int arr [ ] , int n , script_not_found : None
  if ( n < k ) return ;					      	if ( n < k ) return ;					      if ( n < k ) return ;					  
  int res_index = 0 ;					      	int res_index = 0 ;					      int resIndex = 0 ;					  
  int curr_sum = 0 ;					      	int curr_sum = 0 ;					      int currSum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) curr_sum += arr [ i ] ;			      	i ++ ) curr_sum += arr [ i ] ;				      i ++ ) {							  
  int min_sum = curr_sum ;				      	int min_sum = curr_sum ;				    	currSum += arr [ i ] ;					  
  for ( int i = k ;					      	for ( int i = k ;					      }								  
  i < n ;						      	i < n ;							      int minSum = currSum ;					  
  i ++ ) {						      	i ++ ) {						      for ( int i = k ;						  
    curr_sum += arr [ i ] - arr [ i - k ] ;		      	  curr_sum += arr [ i ] - arr [ i - k ] ;		      i < n ;							  
    if ( curr_sum < min_sum ) {				      	  if ( curr_sum < min_sum ) {				      i ++ ) {							  
      min_sum = curr_sum ;				      	    min_sum = curr_sum ;				    	currSum += arr [ i ] - arr [ i - k ] ;			  
      res_index = ( i - k + 1 ) ;			      	    res_index = ( i - k + 1 ) ;				    	if ( currSum < minSum ) {				  
    }							      	  }							    	  minSum = currSum ;					  
  }							      	}							    	  resIndex = ( i - k + 1 ) ;				  
  cout << "Subarray between [" << res_index << ", " << res_in 	System . out . println ( "Subarray between [" + res_index + 	}							  
}							      }								      }								  
							      								      System . out . println ( "Subarray between [" + resIndex +  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_ MINIMUM_NUMBER_OF_SQUARES_WHOSE_SUM_EQUALS_TO_GIVEN_NUMBER_N_
--							      --							    --								  --
int getMinSquares ( int n ) {				      static int getMinSquares ( int n ) {			    public static int getMinSquares ( int n ) {			  success : None
  int * dp = new int [ n + 1 ] ;			      	if ( n <= 3 ) return n ;				      int [ ] dp = new int [ n + 1 ] ;				  
  dp [ 0 ] = 0 ;					      	int dp [ ] = new int [ n + 1 ] ;			      dp [ 0 ] = 0 ;						  
  dp [ 1 ] = 1 ;					      	dp [ 0 ] = 0 ;						      dp [ 1 ] = 1 ;						  
  dp [ 2 ] = 2 ;					      	dp [ 1 ] = 1 ;						      dp [ 2 ] = 2 ;						  
  dp [ 3 ] = 3 ;					      	dp [ 2 ] = 2 ;						      dp [ 3 ] = 3 ;						  
  for ( int i = 4 ;					      	dp [ 3 ] = 3 ;						      for ( int i = 4 ;						  
  i <= n ;						      	for ( int i = 4 ;					      i <= n ;							  
  i ++ ) {						      	i <= n ;						      i ++ ) {							  
    dp [ i ] = i ;					      	i ++ ) {						    	dp [ i ] = i ;						  
    for ( int x = 1 ;					      	  dp [ i ] = i ;					    	for ( int x = 1 ;					  
    x <= ceil ( sqrt ( i ) ) ;				      	  for ( int x = 1 ;					    	x <= Math . ceil ( Math . sqrt ( i ) ) ;		  
    x ++ ) {						      	  x <= Math . ceil ( Math . sqrt ( i ) ) ;		    	x ++ ) {						  
      int temp = x * x ;				      	  x ++ ) {						    	  int temp = x * x ;					  
      if ( temp > i ) break ;				      	    int temp = x * x ;					    	  if ( temp > i ) {					  
      else dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )  	    if ( temp > i ) break ;				    	    break ;						  
    }							      	    else dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i - te 	  }							  
  }							      	  }							    	  else {						  
  int res = dp [ n ] ;					      	}							    	    dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i - temp  
  delete [ ] dp ;					      	int res = dp [ n ] ;					    	  }							  
  return res ;						      	return res ;						    	}							  
}							      }								      }								  
							      								      int res = dp [ n ] ;					  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE_1
--							      --							    --								  --
int maxSumWO3Consec ( int n ) {				      static int maxSumWO3Consec ( int n ) {			    public static int maxSumWO3Consec ( int n ) {		  script_not_found : None
  if ( sum [ n ] != - 1 ) return sum [ n ] ;		      	if ( sum [ n ] != - 1 ) return sum [ n ] ;		      if ( sum [ n ] != - 1 ) return sum [ n ] ;		  
  if ( n == 0 ) return sum [ n ] = 0 ;			      	if ( n == 0 ) return sum [ n ] = 0 ;			      if ( n == 0 ) return sum [ n ] = 0 ;			  
  if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;		      	if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;		      if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;		  
  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;    	if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;      if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;	  
  return sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ) ,  	return sum [ n ] = Math . max ( Math . max ( maxSumWO3Conse   return sum [ n ] = Math . max ( Math . max ( maxSumWO3Conse 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SQUARES_BINOMIAL_COEFFICIENTS			      SUM_SQUARES_BINOMIAL_COEFFICIENTS				    SUM_SQUARES_BINOMIAL_COEFFICIENTS				  SUM_SQUARES_BINOMIAL_COEFFICIENTS
--							      --							    --								  --
int sumofsquare ( int n ) {				      static int sumofsquare ( int n ) {			    public static int sumofsquare ( int n ) {			  script_not_found : None
  int C [ n + 1 ] [ n + 1 ] ;				      	int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j <= min ( i , n ) ;				      	  j <= min ( i , n ) ;					    	j <= Math . min ( i , n ) ;				  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;	      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  if ( j == 0 || j == i ) {				  
      else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    C [ i ] [ j ] = 1 ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  int sum = 0 ;						      	int sum = 0 ;						    	    C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ 
  for ( int i = 0 ;					      	for ( i = 0 ;						    	  }							  
  i <= n ;						      	i <= n ;						    	}							  
  i ++ ) sum += ( C [ n ] [ i ] * C [ n ] [ i ] ) ;	      	i ++ ) sum += ( C [ n ] [ i ] * C [ n ] [ i ] ) ;	      }								  
  return sum ;						      	return sum ;						      int sum = 0 ;						  
}							      }								      for ( int i = 0 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	sum += ( C [ n ] [ i ] * C [ n ] [ i ] ) ;		  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DISTANCE_TWO_POINTS_EARTH			      PROGRAM_DISTANCE_TWO_POINTS_EARTH				    PROGRAM_DISTANCE_TWO_POINTS_EARTH				  PROGRAM_DISTANCE_TWO_POINTS_EARTH
--							      --							    --								  --
long double distance ( long double lat1 , long double long1 , public static double distance ( double lat1 , double lat2 , d public static long distance ( long lat1 , long long1 , long l error : PROGRAM_DISTANCE_TWO_POINTS_EARTH.java:28:
  lat1 = toRadians ( lat1 ) ;				      	lon1 = Math . toRadians ( lon1 ) ;			      lat1 = Math . toRadians ( lat1 ) ;			   error: incompatible types: possible lossy convers
  long1 = toRadians ( long1 ) ;				      	lon2 = Math . toRadians ( lon2 ) ;			      long1 = Math . toRadians ( long1 ) ;			  ion from double to long   lat1 = Math . toRadians
  lat2 = toRadians ( lat2 ) ;				      	lat1 = Math . toRadians ( lat1 ) ;			      lat2 = Math . toRadians ( lat2 ) ;			  ( lat1 ) ;			       ^ PROGRAM_DIS
  long2 = toRadians ( long2 ) ;				      	lat2 = Math . toRadians ( lat2 ) ;			      long2 = Math . toRadians ( long2 ) ;			  TANCE_TWO_POINTS_EARTH.java:29: error: incompatibl
  long double dlong = long2 - long1 ;			      	double dlon = lon2 - lon1 ;				      long dlong = long2 - long1 ;				  e types: possible lossy conversion from double to
  long double dlat = lat2 - lat1 ;			      	double dlat = lat2 - lat1 ;				      long dlat = lat2 - lat1 ;					  long	 long1 = Math . toRadians ( long1 ) ;
  long double ans = pow ( sin ( dlat / 2 ) , 2 ) + cos ( lat1 	double a = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Mat   long ans = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Mat 		       ^ PROGRAM_DISTANCE_TWO_POINTS
  ans = 2 * asin ( sqrt ( ans ) ) ;			      	double c = 2 * Math . asin ( Math . sqrt ( a ) ) ;	      ans = 2 * Math . asin ( Math . sqrt ( ans ) ) ;		  _EARTH.java:30: error: incompatible types: possibl
  long double R = 6371 ;				      	double r = 6371 ;					      long R = 6371 ;						  e lossy conversion from double to long   lat2 = Ma
  ans = ans * R ;					      	return ( c * r ) ;					      ans = ans * R ;						  th . toRadians ( lat2 ) ;
  return ans ;						      }								      return ans ;						    ^ PROGRAM_DISTANCE_TWO_POINTS_EARTH.java:31: err
}							      								    }								  or: incompatible types: possible lossy conversion
							      								    								  from double to long	long2 = Math . toRadians ( l
							      								    								  ong2 ) ;			      ^ PROGRAM_DIST
							      								    								  ANCE_TWO_POINTS_EARTH.java:34: error: incompatible
							      								    								   types: possible lossy conversion from double to l
							      								    								  ong	long ans = Math . pow ( Math . sin ( dlat /
							      								    								  2 ) , 2 ) + Math . cos ( lat1 ) * Math . cos ( lat
							      								    								  2 ) * Math . pow ( Math . sin ( dlong / 2 ) , 2 )
							      								    								  ;
							      								    								  	  ^ PROGRAM_DISTANCE_TWO_POINTS_EARTH.java:3
							      								    								  5: error: incompatible types: possible lossy conve
							      								    								  rsion from double to long   ans = 2 * Math . asin
							      								    								  ( Math . sqrt ( ans ) ) ;	      ^ PROGRAM_DIST
							      								    								  ANCE_TWO_POINTS_EARTH.java:90: error: incompatible
							      								    								   types: Double cannot be converted to long
							      								    								   if(Math.abs(1 - (0.0000001 + Math.abs(f_gold(para
							      								    								  m0.get(i),param1.get(i),param2.get(i),param3.get(i
							      								    								  ))) )/ (Math.abs(f_filled(param0.get(i),param1.get
							      								    								  (i),param2.get(i),param3.get(i))) + 0.0000001)) <
							      								    								  0.001)
							      								    								  
							      								    								  
							      								    								  ^ Note: Some messages have been simplified; recomp
							      								    								  ile with -Xdiags:verbose to get full output 7 erro
							      								    								  rs
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			      CHECK_VALID_SEQUENCE_DIVISIBLE_M_1			    CHECK_VALID_SEQUENCE_DIVISIBLE_M_1				  CHECK_VALID_SEQUENCE_DIVISIBLE_M_1
--							      --							    --								  --
int isPossible ( int n , int index , int modulo , int M , int static int isPossible ( int n , int index , int modulo , int  public static int isPossible ( int n , int index , int modulo error : CHECK_VALID_SEQUENCE_DIVISIBLE_M_1.java:32
  modulo = ( ( modulo % M ) + M ) % M ;			      	modulo = ( ( modulo % M ) + M ) % M ;			      modulo = ( ( modulo % M ) + M ) % M ;			  : error: ']' expected public static int f_filled (
  if ( index == n ) {					      	if ( index == n ) {					      if ( index == n ) {					   int n , int index , int modulo , int M , int arr
    if ( modulo == 0 ) return 1 ;			      	  if ( modulo == 0 ) {					    	if ( modulo == 0 ) return 1 ;				  [ ] , int dp [ ] [ MAX ] ) {
    return 0 ;						      	    return 1 ;						    	return 0 ;						  
  }							      	  }							      }								  			   ^ 1 error
  if ( dp [ index ] [ modulo ] != - 1 ) return dp [ index ] [ 	  return 0 ;						      if ( dp [ index ] [ modulo ] != - 1 ) return dp [ index ] [ 
  int placeAdd = isPossible ( n , index + 1 , modulo + arr [  	}							      int placeAdd = isPossible ( n , index + 1 , modulo + arr [  
  int placeMinus = isPossible ( n , index + 1 , modulo - arr  	if ( dp [ index ] [ modulo ] != - 1 ) {			      int placeMinus = isPossible ( n , index + 1 , modulo - arr  
  bool res = ( placeAdd || placeMinus ) ;		      	  return dp [ index ] [ modulo ] ;			      boolean res = ( placeAdd || placeMinus ) ;		  
  dp [ index ] [ modulo ] = res ;			      	}							      dp [ index ] [ modulo ] = res ;				  
  return res ;						      	int placeAdd = isPossible ( n , index + 1 , modulo + arr [    return res ? 1 : 0 ;					  
}							      	int placeMinus = isPossible ( n , index + 1 , modulo - arr  }								  
							      	int res = placeAdd ;					    								  
							      	dp [ index ] [ modulo ] = res ;				    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MEDIAN_OF_TWO_SORTED_ARRAYS				      MEDIAN_OF_TWO_SORTED_ARRAYS				    MEDIAN_OF_TWO_SORTED_ARRAYS					  MEDIAN_OF_TWO_SORTED_ARRAYS
--							      --							    --								  --
int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) {	      static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) {  public static int getMedian ( int ar1 [ ] , int ar2 [ ] , int success : None
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  int j = 0 ;						      	int j = 0 ;						      int j = 0 ;						  
  int count ;						      	int count ;						      int count ;						  
  int m1 = - 1 , m2 = - 1 ;				      	int m1 = - 1 , m2 = - 1 ;				      int m1 = - 1 , m2 = - 1 ;					  
  for ( count = 0 ;					      	for ( count = 0 ;					      for ( count = 0 ;						  
  count <= n ;						      	count <= n ;						      count <= n ;						  
  count ++ ) {						      	count ++ ) {						      count ++ ) {						  
    if ( i == n ) {					      	  if ( i == n ) {					    	if ( i == n ) {						  
      m1 = m2 ;						      	    m1 = m2 ;						    	  m1 = m2 ;						  
      m2 = ar2 [ 0 ] ;					      	    m2 = ar2 [ 0 ] ;					    	  m2 = ar2 [ 0 ] ;					  
      break ;						      	    break ;						    	  break ;						  
    }							      	  }							    	}							  
    else if ( j == n ) {				      	  else if ( j == n ) {					    	else if ( j == n ) {					  
      m1 = m2 ;						      	    m1 = m2 ;						    	  m1 = m2 ;						  
      m2 = ar1 [ 0 ] ;					      	    m2 = ar1 [ 0 ] ;					    	  m2 = ar1 [ 0 ] ;					  
      break ;						      	    break ;						    	  break ;						  
    }							      	  }							    	}							  
    if ( ar1 [ i ] < ar2 [ j ] ) {			      	  if ( ar1 [ i ] < ar2 [ j ] ) {			    	if ( ar1 [ i ] < ar2 [ j ] ) {				  
      m1 = m2 ;						      	    m1 = m2 ;						    	  m1 = m2 ;						  
      m2 = ar1 [ i ] ;					      	    m2 = ar1 [ i ] ;					    	  m2 = ar1 [ i ] ;					  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      m1 = m2 ;						      	    m1 = m2 ;						    	  m1 = m2 ;						  
      m2 = ar2 [ j ] ;					      	    m2 = ar2 [ j ] ;					    	  m2 = ar2 [ j ] ;					  
      j ++ ;						      	    j ++ ;						    	  j ++ ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return ( m1 + m2 ) / 2 ;				      	return ( m1 + m2 ) / 2 ;				      return ( m1 + m2 ) / 2 ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	      GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	    GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8	  GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8
--							      --							    --								  --
bool isSubSeqDivisible ( string str ) {			      static boolean isSubSeqDivisible ( String str ) {		    public static boolean isSubSeqDivisible ( String str ) {	  error : GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGIT
  for ( int i = 0 ;					      	int i , j , k , l = str . length ( ) ;			      for ( int i = 0 ;						  S_DIVISIBLE_8.java:37: error: cannot find symbol
  i < l ;						      	int arr [ ] = new int [ l ] ;				      i < l ;							   i < l ;	 ^   symbol:   variable l   location
  i ++ ) {						      	for ( i = 0 ;						      i ++ ) {							  : class GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGIT
    for ( int j = i ;					      	i < l ;							    	for ( int j = i ;					  S_DIVISIBLE_8 GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE
    j < l ;						      	i ++ ) {						    	j < l ;							  _DIGITS_DIVISIBLE_8.java:40: error: cannot find sy
    j ++ ) {						      	  for ( j = i ;						    	j ++ ) {						  mbol	   j < l ;	   ^   symbol:	 variable l
      for ( int k = j ;					      	  j < l ;						    	  for ( int k = j ;					    location: class GIVEN_LARGE_NUMBER_CHECK_SUBSEQU
      k < l ;						      	  j ++ ) {						    	  k < l ;						  ENCE_DIGITS_DIVISIBLE_8 GIVEN_LARGE_NUMBER_CHECK_S
      k ++ ) {						      	    for ( k = j ;					    	  k ++ ) {						  UBSEQUENCE_DIGITS_DIVISIBLE_8.java:43: error: cann
	if ( arr [ i ] % 8 == 0 ) return true ;		      	    k < l ;						    	    if ( arr [ i ] % 8 == 0 ) {				  ot find symbol       k < l ;		 ^   symbol:
	else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 &&  	    k ++ ) {						    	      return true ;					     variable l	  location: class GIVEN_LARGE_NUMBER
	else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [  	      if ( arr [ i ] % 8 == 0 ) return true ;		    	    }							  _CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8 GIVEN_LARGE_
      }							      	      else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 &&  	    else if ( ( arr [ i ] * 10 + arr [ j ] ) % 8 == 0 &&  NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8.java:4
    }							      	      else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [  	      return true ;					  5: error: cannot find symbol	       if ( arr [ i
  }							      	    }							    	    }							  ] % 8 == 0 ) {	      ^	  symbol:   variable
  return false ;					      	  }							    	    else if ( ( arr [ i ] * 100 + arr [ j ] * 10 + arr [   arr	 location: class GIVEN_LARGE_NUMBER_CHECK_SU
}							      	}							    	      return true ;					  BSEQUENCE_DIGITS_DIVISIBLE_8 GIVEN_LARGE_NUMBER_CH
							      	return false ;						    	    }							  ECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8.java:48: error:
							      }								    	  }							   cannot find symbol	      else if ( ( arr [ i ]
							      								    	}							  * 10 + arr [ j ] ) % 8 == 0 && i != j ) {
							      								      }								  	      ^	  symbol:   variable arr   location:
							      								      return false ;						   class GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS
							      								    }								  _DIVISIBLE_8 GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_
							      								    								  DIGITS_DIVISIBLE_8.java:48: error: cannot find sym
							      								    								  bol	      else if ( ( arr [ i ] * 10 + arr [ j ]
							      								    								   ) % 8 == 0 && i != j ) {
							      								    								  	       ^   symbol:   variable arr   location
							      								    								  : class GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGIT
							      								    								  S_DIVISIBLE_8 GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE
							      								    								  _DIGITS_DIVISIBLE_8.java:51: error: cannot find sy
							      								    								  mbol	       else if ( ( arr [ i ] * 100 + arr [ j
							      								    								   ] * 10 + arr [ k ] ) % 8 == 0 && i != j && j != k
							      								    								   && i != k ) {		     ^	 symbol:   v
							      								    								  ariable arr	location: class GIVEN_LARGE_NUMBER_C
							      								    								  HECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8 GIVEN_LARGE_NU
							      								    								  MBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8.java:51:
							      								    								   error: cannot find symbol	     else if ( ( arr
							      								    								   [ i ] * 100 + arr [ j ] * 10 + arr [ k ] ) % 8 ==
							      								    								   0 && i != j && j != k && i != k ) {
							      								    								  			   ^   symbol:	 variable ar
							      								    								  r   location: class GIVEN_LARGE_NUMBER_CHECK_SUBSE
							      								    								  QUENCE_DIGITS_DIVISIBLE_8 GIVEN_LARGE_NUMBER_CHECK
							      								    								  _SUBSEQUENCE_DIGITS_DIVISIBLE_8.java:51: error: ca
							      								    								  nnot find symbol	   else if ( ( arr [ i ] * 1
							      								    								  00 + arr [ j ] * 10 + arr [ k ] ) % 8 == 0 && i !=
							      								    								   j && j != k && i != k ) {
							      								    								  				  ^   symbol:	vari
							      								    								  able arr   location: class GIVEN_LARGE_NUMBER_CHEC
							      								    								  K_SUBSEQUENCE_DIGITS_DIVISIBLE_8 9 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_ LEXICOGRAPHICALLY_LARGEST_SUBSEQUENCE_EVERY_CHARACTER_OCCURS_
--							      --							    --								  --
void subsequence ( char s [ ] , char t [ ] , int n , int k )  static void subsequence ( char s [ ] , char t [ ] , int n , i public static void subsequence ( char [ ] s , char [ ] t , in script_not_found : None
  int last = 0 , cnt = 0 , new_last = 0 , size = 0 ;	      	int last = 0 , cnt = 0 , new_last = 0 , size = 0 ;	      int last = 0 , cnt = 0 , new_last = 0 , size = 0 ;	  
  for ( char ch = 'z' ;					      	for ( char ch = 'z' ;					      for ( char ch = 'z' ;					  
  ch >= 'a' ;						      	ch >= 'a' ;						      ch >= 'a' ;						  
  ch -- ) {						      	ch -- ) {						      ch -- ) {							  
    cnt = 0 ;						      	  cnt = 0 ;						    	cnt = 0 ;						  
    for ( int i = last ;				      	  for ( int i = last ;					    	for ( int i = last ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      if ( s [ i ] == ch ) cnt ++ ;			      	    if ( s [ i ] == ch ) cnt ++ ;			    	  if ( s [ i ] == ch ) {				  
    }							      	  }							    	    cnt ++ ;						  
    if ( cnt >= k ) {					      	  if ( cnt >= k ) {					    	  }							  
      for ( int i = last ;				      	    for ( int i = last ;				    	}							  
      i < n ;						      	    i < n ;						    	if ( cnt >= k ) {					  
      i ++ ) {						      	    i ++ ) {						    	  for ( int i = last ;					  
	if ( s [ i ] == ch ) {				      	      if ( s [ i ] == ch ) {				    	  i < n ;						  
	  t [ size ++ ] = ch ;				      		t [ size ++ ] = ch ;				    	  i ++ ) {						  
	  new_last = i ;				      		new_last = i ;					    	    if ( s [ i ] == ch ) {				  
	}						      	      }							    	      t [ size ++ ] = ch ;				  
      }							      	    }							    	      new_last = i ;					  
      last = new_last ;					      	    last = new_last ;					    	    }							  
    }							      	  }							    	  }							  
  }							      	}							    	  last = new_last ;					  
  t [ size ] = '\0' ;					      	t [ size ] = '\0' ;					    	}							  
}							      }								      }								  
							      								      t [ size ] = '\0' ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ROTATIONS_DIVISIBLE_4				      COUNT_ROTATIONS_DIVISIBLE_4				    COUNT_ROTATIONS_DIVISIBLE_4					  COUNT_ROTATIONS_DIVISIBLE_4
--							      --							    --								  --
int countRotations ( string n ) {			      static int countRotations ( String n ) {			    public static int countRotations ( String n ) {		  success : None
  int len = n . length ( ) ;				      	int len = n . length ( ) ;				      int len = n . length ( ) ;				  
  if ( len == 1 ) {					      	if ( len == 1 ) {					      if ( len == 1 ) {						  
    int oneDigit = n . at ( 0 ) - '0' ;			      	  int oneDigit = n . charAt ( 0 ) - '0' ;		    	int oneDigit = n . charAt ( 0 ) - '0' ;			  
    if ( oneDigit % 4 == 0 ) return 1 ;			      	  if ( oneDigit % 4 == 0 ) return 1 ;			    	if ( oneDigit % 4 == 0 ) {				  
    return 0 ;						      	  return 0 ;						    	  return 1 ;						  
  }							      	}							    	}							  
  int twoDigit , count = 0 ;				      	int twoDigit , count = 0 ;				    	return 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  
  i < ( len - 1 ) ;					      	i < ( len - 1 ) ;					      int twoDigit , count = 0 ;				  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    twoDigit = ( n . at ( i ) - '0' ) * 10 + ( n . at ( i + 1 	  twoDigit = ( n . charAt ( i ) - '0' ) * 10 + ( n . charAt   i < ( len - 1 ) ;						  
    if ( twoDigit % 4 == 0 ) count ++ ;			      	  if ( twoDigit % 4 == 0 ) count ++ ;			      i ++ ) {							  
  }							      	}							    	twoDigit = ( n . charAt ( i ) - '0' ) * 10 + ( n . charAt 
  twoDigit = ( n . at ( len - 1 ) - '0' ) * 10 + ( n . at ( 0 	twoDigit = ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . ch 	if ( twoDigit % 4 == 0 ) {				  
  if ( twoDigit % 4 == 0 ) count ++ ;			      	if ( twoDigit % 4 == 0 ) count ++ ;			    	  count ++ ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      twoDigit = ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . ch 
							      								      if ( twoDigit % 4 == 0 ) {				  
							      								    	count ++ ;						  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT FIND_THREE_ELEMENT_FROM_DIFFERENT_THREE_ARRAYS_SUCH_THAT_THAT
--							      --							    --								  --
bool findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 public static boolean findTriplet ( int a1 [ ] , int a2 [ ] , success : None
  unordered_set < int > s ;				      	HashSet < Integer > s = new HashSet < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n1 ;						      	i < n1 ;						      i < n1 ;							  
  i ++ ) s . insert ( a1 [ i ] ) ;			      	i ++ ) {						      i ++ ) {							  
  for ( int i = 0 ;					      	  s . add ( a1 [ i ] ) ;				    	s . add ( a1 [ i ] ) ;					  
  i < n2 ;						      	}							      }								  
  i ++ ) {						      	ArrayList < Integer > al = new ArrayList < > ( s ) ;	      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	for ( int i = 0 ;					      i < n2 ;							  
    j < n3 ;						      	i < n2 ;						      i ++ ) {							  
    j ++ ) {						      	i ++ ) {						    	for ( int j = 0 ;					  
      if ( s . find ( sum - a2 [ i ] - a3 [ j ] ) != s . end  	  for ( int j = 0 ;					    	j < n3 ;						  
    }							      	  j < n3 ;						    	j ++ ) {						  
  }							      	  j ++ ) {						    	  if ( s . contains ( sum - a2 [ i ] - a3 [ j ] ) ) {	  
  return false ;					      	    if ( al . contains ( sum - a2 [ i ] - a3 [ j ] ) & al . 	    return true ;					  
}							      	      return true ;					    	  }							  
							      	    }							    	}							  
							      	  }							      }								  
							      	}							      return false ;						  
							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1   SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1   SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1	  SEQUENCES_GIVEN_LENGTH_EVERY_ELEMENT_EQUAL_TWICE_PREVIOUS_1
--							      --							    --								  --
int getTotalNumberOfSequences ( int m , int n ) {	      static int getTotalNumberOfSequences ( int m , int n ) {	    public static int getTotalNumberOfSequences ( int m , int n ) success : None
  int T [ m + 1 ] [ n + 1 ] ;				      	int T [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      int T [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m + 1 ;						      	i < m + 1 ;						      i < m + 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n + 1 ;						      	  j < n + 1 ;						    	j < n + 1 ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( i == 0 || j == 0 ) T [ i ] [ j ] = 0 ;	      	    if ( i == 0 || j == 0 ) T [ i ] [ j ] = 0 ;		    	  if ( i == 0 || j == 0 ) {				  
      else if ( i < j ) T [ i ] [ j ] = 0 ;		      	    else if ( i < j ) T [ i ] [ j ] = 0 ;		    	    T [ i ] [ j ] = 0 ;					  
      else if ( j == 1 ) T [ i ] [ j ] = i ;		      	    else if ( j == 1 ) T [ i ] [ j ] = i ;		    	  }							  
      else T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i / 2 ] [  	    else T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i / 2 ] [  	  else if ( i < j ) {					  
    }							      	  }							    	    T [ i ] [ j ] = 0 ;					  
  }							      	}							    	  }							  
  return T [ m ] [ n ] ;				      	return T [ m ] [ n ] ;					    	  else if ( j == 1 ) {					  
}							      }								    	    T [ i ] [ j ] = i ;					  
							      								    	  }							  
							      								    	  else {						  
							      								    	    T [ i ] [ j ] = T [ i - 1 ] [ j ] + T [ i / 2 ] [ j - 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return T [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		      MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		    MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K		  MINIMUM_POSSIBLE_VALUE_AI_AJ_K_GIVEN_ARRAY_K
--							      --							    --								  --
void pairs ( int arr [ ] , int n , int k ) {		      static void pairs ( int arr [ ] , int n , int k ) {	    public static void pairs ( int arr [ ] , int n , int k ) {	  script_not_found : None
  int smallest = INT_MAX ;				      	int smallest = Integer . MAX_VALUE ;			      int smallest = Integer . MAX_VALUE ;			  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) {						      	j ++ ) {						      j ++ ) {							  
    if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {     	  if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smallest  	if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smallest  
      smallest = abs ( arr [ i ] + arr [ j ] - k ) ;	      	    smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ;   	  smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ;	  
      count = 1 ;					      	    count = 1 ;						    	  count = 1 ;						  
    }							      	  }							    	}							  
    else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) 	  else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == sma 	else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == sma 
  }							      	}							    	  count ++ ;						  
  cout << "Minimal Value = " << smallest << "\n" ;	      	System . out . println ( "Minimal Value = " + smallest ) ;  	}							  
  cout << "Total Pairs = " << count << "\n" ;		      	System . out . println ( "Total Pairs = " + count ) ;	      }								  
}							      }								      System . out . println ( "Minimal Value = " + smallest + "\ 
							      								      System . out . println ( "Total Pairs = " + count + "\n" )  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST GIVEN_SORTED_ARRAY_NUMBER_X_FIND_PAIR_ARRAY_WHOSE_SUM_CLOSEST
--							      --							    --								  --
void printClosest ( int arr [ ] , int n , int x ) {	      static void printClosest ( int arr [ ] , int n , int x ) {    public static void printClosest ( int arr [ ] , int n , int x script_not_found : None
  int res_l , res_r ;					      	int res_l = 0 , res_r = 0 ;				      int res_l , res_r ;					  
  int l = 0 , r = n - 1 , diff = INT_MAX ;		      	int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ;	      int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ;	  
  while ( r > l ) {					      	while ( r > l ) {					      while ( r > l ) {						  
    if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) {	      	  if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {  	if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {  
      res_l = l ;					      	    res_l = l ;						    	  res_l = l ;						  
      res_r = r ;					      	    res_r = r ;						    	  res_r = r ;						  
      diff = abs ( arr [ l ] + arr [ r ] - x ) ;	      	    diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;	    	  diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;	  
    }							      	  }							    	}							  
    if ( arr [ l ] + arr [ r ] > x ) r -- ;		      	  if ( arr [ l ] + arr [ r ] > x ) r -- ;		    	if ( arr [ l ] + arr [ r ] > x ) {			  
    else l ++ ;						      	  else l ++ ;						    	  r -- ;						  
  }							      	}							    	}							  
  cout << " The closest pair is " << arr [ res_l ] << " and " 	System . out . println ( " The closest pair is " + arr [ re 	else {							  
}							      }								    	  l ++ ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( " The closest pair is " + arr [ re 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			      FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			    FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA			  FINDING_VERTEX_FOCUS_DIRECTRIX_PARABOLA
--							      --							    --								  --
void parabola ( float a , float b , float c ) {		      static void parabola ( float a , float b , float c ) {	    public static void parabola ( float a , float b , float c ) { script_not_found : None
  cout << "Vertex: (" << ( - b / ( 2 * a ) ) << ", " << ( ( ( 	System . out . println ( "Vertex: (" + ( - b / ( 2 * a ) )    System . out . println ( "Vertex: (" + ( - b / ( 2 * a ) )  
  cout << "Focus: (" << ( - b / ( 2 * a ) ) << ", " << ( ( (  	System . out . println ( "Focus: (" + ( - b / ( 2 * a ) ) +   System . out . println ( "Focus: (" + ( - b / ( 2 * a ) ) + 
  cout << "Directrix: y=" << c - ( ( b * b ) + 1 ) * 4 * a << 	System . out . println ( "Directrix:" + " y=" + ( int ) ( c   System . out . println ( "Directrix: y=" + c - ( ( b * b )  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			      MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			    MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE			  MAXIMUM_SUM_PAIRS_SPECIFIC_DIFFERENCE
--							      --							    --								  --
int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , static int maxSumPairWithDifferenceLessThanK ( int arr [ ] ,  public static int maxSumPairWithDifferenceLessThanK ( int arr success : None
  sort ( arr , arr + N ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int dp [ N ] ;					      	int dp [ ] = new int [ N ] ;				      int dp [ ] = new int [ N ] ;				  
  dp [ 0 ] = 0 ;					      	dp [ 0 ] = 0 ;						      dp [ 0 ] = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    dp [ i ] = dp [ i - 1 ] ;				      	  dp [ i ] = dp [ i - 1 ] ;				    	dp [ i ] = dp [ i - 1 ] ;				  
    if ( arr [ i ] - arr [ i - 1 ] < K ) {		      	  if ( arr [ i ] - arr [ i - 1 ] < K ) {		    	if ( arr [ i ] - arr [ i - 1 ] < K ) {			  
      if ( i >= 2 ) dp [ i ] = max ( dp [ i ] , dp [ i - 2 ]  	    if ( i >= 2 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i 	  if ( i >= 2 ) {					  
      else dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i -  	    else dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr 	    dp [ i ] = Math . max ( dp [ i ] , dp [ i - 2 ] + arr 
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return dp [ N - 1 ] ;					      	return dp [ N - 1 ] ;					    	    dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr [  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ N - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_AND_N_K_SUCH_THAT_T
--							      --							    --								  --
int maxDifference ( int arr [ ] , int N , int k ) {	      static int maxDifference ( int arr [ ] , int N , int k ) {    public static int maxDifference ( int arr [ ] , int N , int k error : PARTITION_INTO_TWO_SUBARRAYS_OF_LENGTHS_K_
  int M , S = 0 , S1 = 0 , max_difference = 0 ;		      	int M , S = 0 , S1 = 0 , max_difference = 0 ;		      int M , S = 0 , S1 = 0 , maxDifference = 0 ;		  AND_N_K_SUCH_THAT_THE_DIFFERENCE_OF_SUMS_IS_MAXIMU
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  M.java:48: error: no suitable method found for sor
  i < N ;						      	i < N ;							      i < N ;							  t(int[],int,<anonymous Comparator<Integer>>)	 Arr
  i ++ ) S += arr [ i ] ;				      	i ++ ) S += arr [ i ] ;					      i ++ ) {							  ays . sort ( arr , N , new Comparator < Integer >
  sort ( arr , arr + N , greater < int > ( ) ) ;	      	int temp ;						    	S += arr [ i ] ;					  ( ) {		 ^     method Arrays.sort(int[],int,
  M = max ( k , N - k ) ;				      	for ( int i = 0 ;					      }								  int) is not applicable       (argument mismatch; <
  for ( int i = 0 ;					      	i < N ;							      Arrays . sort ( arr , N , new Comparator < Integer > ( ) {  anonymous Comparator<Integer>> cannot be converted
  i < M ;						      	i ++ ) {						    	public int compare ( Integer o1 , Integer o2 ) {	   to int)     method Arrays.sort(long[],int,int) is
  i ++ ) S1 += arr [ i ] ;				      	  for ( int j = i + 1 ;					    	  return o1 . compareTo ( o2 ) ;			   not applicable	(argument mismatch; int[] ca
  max_difference = S1 - ( S - S1 ) ;			      	  j < N ;						    	}							  nnot be converted to long[])	   method Arrays.sor
  return max_difference ;				      	  j ++ ) {						      }								  t(short[],int,int) is not applicable	     (argume
}							      	    if ( arr [ i ] < arr [ j ] ) {			      ) ;							  nt mismatch; int[] cannot be converted to short[])
							      	      temp = arr [ i ] ;				      M = Math . max ( k , N - k ) ;				       method Arrays.sort(char[],int,int) is not app
							      	      arr [ i ] = arr [ j ] ;				      for ( int i = 0 ;						  licable	(argument mismatch; int[] cannot be
							      	      arr [ j ] = temp ;				      i < M ;							  converted to char[])	   method Arrays.sort(byte[]
							      	    }							      i ++ ) {							  ,int,int) is not applicable	    (argument mismat
							      	  }							    	S1 += arr [ i ] ;					  ch; int[] cannot be converted to byte[])     metho
							      	}							      }								  d Arrays.sort(float[],int,int) is not applicable
							      	M = Math . max ( k , N - k ) ;				      maxDifference = S1 - ( S - S1 ) ;				       (argument mismatch; int[] cannot be converted
							      	for ( int i = 0 ;					      return maxDifference ;					   to float[])	   method Arrays.sort(double[],int,i
							      	i < M ;							    }								  nt) is not applicable	      (argument mismatch; in
							      	i ++ ) S1 += arr [ i ] ;				    								  t[] cannot be converted to double[])	   method Ar
							      	max_difference = S1 - ( S - S1 ) ;			    								  rays.sort(Object[],int,int) is not applicable
							      	return max_difference ;					    								    (argument mismatch; int[] cannot be converted to
							      }								    								   Object[])	 method Arrays.<T#1>sort(T#1[],Compa
							      								    								  rator<? super T#1>) is not applicable	      (canno
							      								    								  t infer type-variable(s) T#1	       (actual and f
							      								    								  ormal argument lists differ in length))     method
							      								    								   Arrays.<T#2>sort(T#2[],int,int,Comparator<? super
							      								    								   T#2>) is not applicable	 (cannot infer type-
							      								    								  variable(s) T#2	  (actual and formal argumen
							      								    								  t lists differ in length))   where T#1,T#2 are typ
							      								    								  e-variables:	   T#1 extends Object declared in me
							      								    								  thod <T#1>sort(T#1[],Comparator<? super T#1>)
							      								    								  T#2 extends Object declared in method <T#2>sort(T#
							      								    								  2[],int,int,Comparator<? super T#2>) Note: Some me
							      								    								  ssages have been simplified; recompile with -Xdiag
							      								    								  s:verbose to get full output 1 error
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_2
--							      --							    --								  --
int findLength ( string str , int n ) {			      static int findLength ( String str , int n ) {		    public static int findLength ( String str , int n ) {	  script_not_found : None
  int sum [ n + 1 ] ;					      	int sum [ ] = new int [ n + 1 ] ;			      int sum [ ] = new int [ n + 1 ] ;				  
  sum [ 0 ] = 0 ;					      	sum [ 0 ] = 0 ;						      sum [ 0 ] = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str [ i - 1 ] - '0' )  	i ++ ) sum [ i ] = ( sum [ i - 1 ] + str . charAt ( i - 1 )   i ++ ) {							  
  int ans = 0 ;						      	int ans = 0 ;						    	sum [ i ] = ( sum [ i - 1 ] + str . charAt ( i - 1 ) - '0 
  for ( int len = 2 ;					      	for ( int len = 2 ;					      }								  
  len <= n ;						      	len <= n ;						      int ans = 0 ;						  
  len += 2 ) {						      	len += 2 ) {						      for ( int len = 2 ;					  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					      len <= n ;						  
    i <= n - len ;					      	  i <= n - len ;					      len += 2 ) {						  
    i ++ ) {						      	  i ++ ) {						    	for ( int i = 0 ;					  
      int j = i + len - 1 ;				      	    int j = i + len - 1 ;				    	i <= n - len ;						  
      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] 	    if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] 	i ++ ) {						  
    }							      	  }							    	  int j = i + len - 1 ;					  
  }							      	}							    	  if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] 
  return ans ;						      	return ans ;						    	    ans = Math . max ( ans , len ) ;			  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH		      FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH			    FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH			  FIND_MAXIMUM_AVERAGE_SUBARRAY_OF_K_LENGTH
--							      --							    --								  --
int findMaxAverage ( int arr [ ] , int n , int k ) {	      static int findMaxAverage ( int [ ] arr , int n , int k ) {   public static int findMaxAverage ( int arr [ ] , int n , int  success : None
  if ( k > n ) return - 1 ;				      	if ( k > n ) return - 1 ;				      if ( k > n ) return - 1 ;					  
  int * csum = new int [ n ] ;				      	int [ ] csum = new int [ n ] ;				      int csum [ ] = new int [ n ] ;				  
  csum [ 0 ] = arr [ 0 ] ;				      	csum [ 0 ] = arr [ 0 ] ;				      csum [ 0 ] = arr [ 0 ] ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;	      	i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;	      i ++ ) {							  
  int max_sum = csum [ k - 1 ] , max_end = k - 1 ;	      	int max_sum = csum [ k - 1 ] , max_end = k - 1 ;	    	csum [ i ] = csum [ i - 1 ] + arr [ i ] ;		  
  for ( int i = k ;					      	for ( int i = k ;					      }								  
  i < n ;						      	i < n ;							      int maxSum = csum [ k - 1 ] , maxEnd = k - 1 ;		  
  i ++ ) {						      	i ++ ) {						      for ( int i = k ;						  
    int curr_sum = csum [ i ] - csum [ i - k ] ;	      	  int curr_sum = csum [ i ] - csum [ i - k ] ;		      i < n ;							  
    if ( curr_sum > max_sum ) {				      	  if ( curr_sum > max_sum ) {				      i ++ ) {							  
      max_sum = curr_sum ;				      	    max_sum = curr_sum ;				    	int currSum = csum [ i ] - csum [ i - k ] ;		  
      max_end = i ;					      	    max_end = i ;					    	if ( currSum > maxSum ) {				  
    }							      	  }							    	  maxSum = currSum ;					  
  }							      	}							    	  maxEnd = i ;						  
  delete [ ] csum ;					      	return max_end - k + 1 ;				    	}							  
  return max_end - k + 1 ;				      }								      }								  
}							      								      return maxEnd - k + 1 ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_1
--							      --							    --								  --
void findTriplets ( int arr [ ] , int n ) {		      static void findTriplets ( int arr [ ] , int n ) {	    public static void findTriplets ( int arr [ ] , int n ) {	  script_not_found : None
  bool found = false ;					      	boolean found = false ;					      boolean found = false ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    unordered_set < int > s ;				      	  HashSet < Integer > s = new HashSet < Integer > ( ) ;	    	HashSet < Integer > s = new HashSet < > ( ) ;		  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      int x = - ( arr [ i ] + arr [ j ] ) ;		      	    int x = - ( arr [ i ] + arr [ j ] ) ;		    	  int x = - ( arr [ i ] + arr [ j ] ) ;			  
      if ( s . find ( x ) != s . end ( ) ) {		      	    if ( s . contains ( x ) ) {				    	  if ( s . contains ( x ) ) {				  
	printf ( "%d %d %d\n" , x , arr [ i ] , arr [ j ] ) ; 	      System . out . printf ( "%d %d %d\n" , x , arr [ i ]  	    System . out . println ( x + " " + arr [ i ] + " " +  
	found = true ;					      	      found = true ;					    	    found = true ;					  
      }							      	    }							    	  }							  
      else s . insert ( arr [ j ] ) ;			      	    else {						    	  else {						  
    }							      	      s . add ( arr [ j ] ) ;				    	    s . add ( arr [ j ] ) ;				  
  }							      	    }							    	  }							  
  if ( found == false ) cout << " No Triplet Found" << endl ; 	  }							    	}							  
}							      	}							      }								  
							      	if ( found == false ) {					      if ( found == false ) {					  
							      	  System . out . printf ( " No Triplet Found\n" ) ;	    	System . out . println ( " No Triplet Found" ) ;	  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE MAXIMUM_LENGTH_SUBSEQUENCE_DIFFERENCE_ADJACENT_ELEMENTS_EITHE
--							      --							    --								  --
int maxLenSub ( int arr [ ] , int n ) {			      public static int maxLenSub ( int arr [ ] , int n ) {	    public static int maxLenSub ( int arr [ ] , int n ) {	  success : None
  int mls [ n ] , max = 0 ;				      	int mls [ ] = new int [ n ] , max = 0 ;			      int mls [ ] = new int [ n ] , max = 0 ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) mls [ i ] = 1 ;				      	i ++ ) mls [ i ] = 1 ;					      i ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	mls [ i ] = 1 ;						  
  i < n ;						      	i < n ;							      }								  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      for ( int i = 1 ;						  
  j < i ;						      	j < i ;							      i < n ;							  
  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] 	j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && ml   i ++ ) for ( int j = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      j < i ;							  
  i < n ;						      	i < n ;							      j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && ml 
  i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;	      	i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;		      for ( int i = 0 ;						  
  return max ;						      	return max ;						      i < n ;							  
}							      }								      i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;		  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS		      LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS			    LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS			  LONGEST_SUBARRAY_NOT_K_DISTINCT_ELEMENTS
--							      --							    --								  --
void longest ( int a [ ] , int n , int k ) {		      static void longest ( int a [ ] , int n , int k ) {	    public static void longest ( int a [ ] , int n , int k ) {	  script_not_found : None
  unordered_map < int , int > freq ;			      	int [ ] freq = new int [ 7 ] ;				      HashMap < Integer , Integer > freq = new HashMap < > ( ) ;  
  int start = 0 , end = 0 , now = 0 , l = 0 ;		      	int start = 0 , end = 0 , now = 0 , l = 0 ;		      int start = 0 , end = 0 , now = 0 , l = 0 ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    freq [ a [ i ] ] ++ ;				      	  freq [ a [ i ] ] ++ ;					    	freq . get ( a [ i ] ) ++ ;				  
    if ( freq [ a [ i ] ] == 1 ) now ++ ;		      	  if ( freq [ a [ i ] ] == 1 ) now ++ ;			    	if ( freq . get ( a [ i ] ) == 1 ) {			  
    while ( now > k ) {					      	  while ( now > k ) {					    	  now ++ ;						  
      freq [ a [ l ] ] -- ;				      	    freq [ a [ l ] ] -- ;				    	}							  
      if ( freq [ a [ l ] ] == 0 ) now -- ;		      	    if ( freq [ a [ l ] ] == 0 ) now -- ;		    	while ( now > k ) {					  
      l ++ ;						      	    l ++ ;						    	  freq . get ( a [ l ] ) -- ;				  
    }							      	  }							    	  if ( freq . get ( a [ l ] ) == 0 ) {			  
    if ( i - l + 1 >= end - start + 1 ) end = i , start = l ; 	  if ( i - l + 1 >= end - start + 1 ) {			    	    now -- ;						  
  }							      	    end = i ;						    	  }							  
  for ( int i = start ;					      	    start = l ;						    	  l ++ ;						  
  i <= end ;						      	  }							    	}							  
  i ++ ) cout << a [ i ] << " " ;			      	}							    	if ( i - l + 1 >= end - start + 1 ) {			  
}							      	for ( int i = start ;					    	  end = i , start = l ;					  
							      	i <= end ;						    	}							  
							      	i ++ ) System . out . print ( a [ i ] + " " ) ;		      }								  
							      }								      for ( int i = start ;					  
							      								      i <= end ;						  
							      								      i ++ ) {							  
							      								    	System . out . print ( a [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA COUNT_NUMBER_OF_STRINGS_MADE_OF_R_G_AND_B_USING_GIVEN_COMBINA
--							      --							    --								  --
int possibleStrings ( int n , int r , int b , int g ) {	      static int possibleStrings ( int n , int r , int b , int g )  public static int possibleStrings ( int n , int r , int b , i script_not_found : None
  int fact [ n + 1 ] ;					      	int fact [ ] = new int [ n + 1 ] ;			      int [ ] fact = new int [ n + 1 ] ;			  
  fact [ 0 ] = 1 ;					      	fact [ 0 ] = 1 ;					      fact [ 0 ] = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) fact [ i ] = fact [ i - 1 ] * i ;		      	i ++ ) fact [ i ] = fact [ i - 1 ] * i ;		      i ++ ) {							  
  int left = n - ( r + g + b ) ;			      	int left = n - ( r + g + b ) ;				    	fact [ i ] = fact [ i - 1 ] * i ;			  
  int sum = 0 ;						      	int sum = 0 ;						      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      int left = n - ( r + g + b ) ;				  
  i <= left ;						      	i <= left ;						      int sum = 0 ;						  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i <= left ;						  
    j <= left - i ;					      	  j <= left - i ;					      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      int k = left - ( i + j ) ;			      	    int k = left - ( i + j ) ;				    	j <= left - i ;						  
      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j +  	    sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j +  	j ++ ) {						  
    }							      	  }							    	  int k = left - ( i + j ) ;				  
  }							      	}							    	  sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j +  
  return sum ;						      	return sum ;						    	}							  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		      MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS		    MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS			  MINIMUM_INDEX_SUM_COMMON_ELEMENTS_TWO_LISTS
--							      --							    --								  --
void find ( vector < string > list1 , vector < string > list2 static void find ( Vector < String > list1 , Vector < String  public static void find ( String [ ] list1 , String [ ] list2 script_not_found : None
  vector < string > res ;				      	Vector < String > res = new Vector < > ( ) ;		      ArrayList < String > res = new ArrayList < String > ( ) ;	  
  int max_possible_sum = list1 . size ( ) + list2 . size ( )  	int max_possible_sum = list1 . size ( ) + list2 . size ( )    int maxPossibleSum = list1 . length + list2 . length - 2 ;  
  for ( int sum = 0 ;					      	for ( int sum = 0 ;					      for ( int sum = 0 ;					  
  sum <= max_possible_sum ;				      	sum <= max_possible_sum ;				      sum <= maxPossibleSum ;					  
  sum ++ ) {						      	sum ++ ) {						      sum ++ ) {						  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i <= sum ;						      	  i <= sum ;						    	i <= sum ;						  
    i ++ ) if ( i < list1 . size ( ) && ( sum - i ) < list2 . 	  i ++ ) if ( i < list1 . size ( ) && ( sum - i ) < list2 . 	i ++ ) if ( i < list1 . length && ( sum - i ) < list2 . l 
    if ( res . size ( ) > 0 ) break ;			      	  if ( res . size ( ) > 0 ) break ;			    	if ( res . size ( ) > 0 ) break ;			  
  }							      	}							      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < res . size ( ) ;					      	i < res . size ( ) ;					      i < res . size ( ) ;					  
  i ++ ) cout << res [ i ] << " " ;			      	i ++ ) System . out . print ( res . get ( i ) + " " ) ;	      i ++ ) System . out . print ( res . get ( i ) + " " ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		      THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		    THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1		  THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS_1
--							      --							    --								  --
void thirdLargest ( int arr [ ] , int arr_size ) {	      static void thirdLargest ( int arr [ ] , int arr_size ) {	    public static void thirdLargest ( int arr [ ] , int arr_size  script_not_found : None
  if ( arr_size < 3 ) {					      	if ( arr_size < 3 ) {					      if ( arr_size < 3 ) {					  
    printf ( " Invalid Input " ) ;			      	  System . out . printf ( " Invalid Input " ) ;		    	System . out . println ( " Invalid Input " ) ;		  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  int first = arr [ 0 ] , second = INT_MIN , third = INT_MIN  	int first = arr [ 0 ] , second = Integer . MIN_VALUE , thir   int first = arr [ 0 ] , second = Integer . MIN_VALUE , thir 
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < arr_size ;					      	i < arr_size ;						      i < arr_size ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] > first ) {				      	  if ( arr [ i ] > first ) {				    	if ( arr [ i ] > first ) {				  
      third = second ;					      	    third = second ;					    	  third = second ;					  
      second = first ;					      	    second = first ;					    	  second = first ;					  
      first = arr [ i ] ;				      	    first = arr [ i ] ;					    	  first = arr [ i ] ;					  
    }							      	  }							    	}							  
    else if ( arr [ i ] > second ) {			      	  else if ( arr [ i ] > second ) {			    	else if ( arr [ i ] > second ) {			  
      third = second ;					      	    third = second ;					    	  third = second ;					  
      second = arr [ i ] ;				      	    second = arr [ i ] ;				    	  second = arr [ i ] ;					  
    }							      	  }							    	}							  
    else if ( arr [ i ] > third ) third = arr [ i ] ;	      	  else if ( arr [ i ] > third ) {			    	else if ( arr [ i ] > third ) {				  
  }							      	    third = arr [ i ] ;					    	  third = arr [ i ] ;					  
  printf ( "The third Largest element is %d\n" , third ) ;    	  }							    	}							  
}							      	}							      }								  
							      	System . out . printf ( "The third Largest element is %d\n"   System . out . println ( "The third Largest element is " +  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_MAXIMUM_GCD_ARRAY				      FIND_PAIR_MAXIMUM_GCD_ARRAY				    FIND_PAIR_MAXIMUM_GCD_ARRAY					  FIND_PAIR_MAXIMUM_GCD_ARRAY
--							      --							    --								  --
int findMaxGCD ( int arr [ ] , int n ) {		      public static int findMaxGCD ( int arr [ ] , int n ) {	    public static int findMaxGCD ( int arr [ ] , int n ) {	  error : FIND_PAIR_MAXIMUM_GCD_ARRAY.java:45: error
  int high = 0 ;					      	int high = 0 ;						      int high = 0 ;						  : ']' expected   int divisors [ high + 1 ] = {
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  	       ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.java:45
  i < n ;						      	i < n ;							      i < n ;							  : error: not a statement   int divisors [ high + 1
  i ++ ) high = max ( high , arr [ i ] ) ;		      	i ++ ) high = Math . max ( high , arr [ i ] ) ;		      i ++ ) {							   ] = {		       ^ FIND_PAIR_MAXIMUM_G
  int divisors [ high + 1 ] = {				      	int divisors [ ] = new int [ high + 1 ] ;		    	high = Math . max ( high , arr [ i ] ) ;		  CD_ARRAY.java:45: error: ';' expected	  int diviso
    0 }							      	for ( int i = 0 ;					      }								  rs [ high + 1 ] = {			       ^ FIN
    ;							      	i < n ;							      int divisors [ high + 1 ] = {				  D_PAIR_MAXIMUM_GCD_ARRAY.java:46: error: not a sta
    for ( int i = 0 ;					      	i ++ ) {						    	0 }							  tement     0 }     ^ FIND_PAIR_MAXIMUM_GCD_ARRAY.j
    i < n ;						      	  for ( int j = 1 ;					    	;							  ava:46: error: ';' expected	  0 }	   ^ 5 error
    i ++ ) {						      	  j <= Math . sqrt ( arr [ i ] ) ;			    	for ( int i = 0 ;					  s
      for ( int j = 1 ;					      	  j ++ ) {						    	i < n ;							  
      j <= sqrt ( arr [ i ] ) ;				      	    if ( arr [ i ] % j == 0 ) {				    	i ++ ) {						  
      j ++ ) {						      	      divisors [ j ] ++ ;				    	  for ( int j = 1 ;					  
	if ( arr [ i ] % j == 0 ) {			      	      if ( j != arr [ i ] / j ) divisors [ arr [ i ] / j ]  	  j <= Math . sqrt ( arr [ i ] ) ;			  
	  divisors [ j ] ++ ;				      	    }							    	  j ++ ) {						  
	  if ( j != arr [ i ] / j ) divisors [ arr [ i ] / j  	  }							    	    if ( arr [ i ] % j == 0 ) {				  
	}						      	}							    	      divisors [ j ] ++ ;				  
      }							      	for ( int i = high ;					    	      if ( j != arr [ i ] / j ) {			  
    }							      	i >= 1 ;						    		divisors [ arr [ i ] / j ] ++ ;			  
    for ( int i = high ;				      	i -- ) if ( divisors [ i ] > 1 ) return i ;		    	      }							  
    i >= 1 ;						      	return 1 ;						    	    }							  
    i -- ) if ( divisors [ i ] > 1 ) return i ;		      }								    	  }							  
  }							      								    	}							  
							      								    	for ( int i = high ;					  
							      								    	i >= 1 ;						  
							      								    	i -- ) if ( divisors [ i ] > 1 ) return i ;		  
							      								    	return 0 ;						  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			      SUM_AREA_RECTANGLES_POSSIBLE_ARRAY			    SUM_AREA_RECTANGLES_POSSIBLE_ARRAY				  SUM_AREA_RECTANGLES_POSSIBLE_ARRAY
--							      --							    --								  --
int MaxTotalRectangleArea ( int a [ ] , int n ) {	      static int MaxTotalRectangleArea ( int [ ] a , int n ) {	    public static int MaxTotalRectangleArea ( int a [ ] , int n ) error : SUM_AREA_RECTANGLES_POSSIBLE_ARRAY.java:50
  sort ( a , a + n , greater < int > ( ) ) ;		      	Arrays . sort ( a ) ;					      Arrays . sort ( a , 0 , n ) ;				  : error: variable len might not have been initiali
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  zed	    sum = sum + a [ i + 1 ] * len ;
  bool flag = false ;					      	boolean flag = false ;					      boolean flag = false ;					  			  ^ 1 error
  int len ;						      	int len = 0 ;						      int len ;							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 	  if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 	if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 ] == 
      flag = true ;					      	    flag = true ;					    	  flag = true ;						  
      len = a [ i + 1 ] ;				      	    len = a [ i + 1 ] ;					    	  len = a [ i + 1 ] ;					  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 	  else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 	else if ( ( a [ i ] == a [ i + 1 ] || a [ i ] - a [ i + 1 
      sum = sum + a [ i + 1 ] * len ;			      	    sum = sum + a [ i + 1 ] * len ;			    	  sum = sum + a [ i + 1 ] * len ;			  
      flag = false ;					      	    flag = false ;					    	  flag = false ;					  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	      SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	    SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH	  SHORTEST_PATH_EXACTLY_K_EDGES_DIRECTED_WEIGHTED_GRAPH
--							      --							    --								  --
INT_MAX int shortestPath ( int graph [ ] [ V ] , int u , int  int shortestPath ( int graph [ ] [ ] , int u , int v , int k  public static int shortestPath ( int graph [ ] [ ] , int u ,  script_not_found : None
  if ( k == 0 && u == v ) return 0 ;			      	if ( k == 0 && u == v ) return 0 ;			      if ( k == 0 && u == v ) return 0 ;			  
  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u  	if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u    if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u  
  if ( k <= 0 ) return INF ;				      	if ( k <= 0 ) return INF ;				      if ( k <= 0 ) return INF ;				  
  int res = INF ;					      	int res = INF ;						      int res = INF ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < V ;						      	i < V ;							      i < V ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {     	  if ( graph [ u ] [ i ] != INF && u != i && v != i ) {	    	if ( graph [ u ] [ i ] != INF && u != i && v != i ) {	  
      int rec_res = shortestPath ( graph , i , v , k - 1 ) ;  	    int rec_res = shortestPath ( graph , i , v , k - 1 ) ;  	  int rec_res = shortestPath ( graph , i , v , k - 1 ) ;  
      if ( rec_res != INF ) res = min ( res , graph [ u ] [ i 	    if ( rec_res != INF ) res = Math . min ( res , graph [  	  if ( rec_res != INF ) {				  
    }							      	  }							    	    res = Math . min ( res , graph [ u ] [ i ] + rec_res  
  }							      	}							    	  }							  
  return res ;						      	return res ;						    	}							  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES	      REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES		    REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES		  REARRANGE_BINARY_STRING_ALTERNATE_X_Y_OCCURRENCES
--							      --							    --								  --
void arrangeString ( string str , int x , int y ) {	      static void arrangeString ( String str , int x , int y ) {    public static void arrangeString ( String str , int x , int y script_not_found : None
  int count_0 = 0 ;					      	int count_0 = 0 ;					      int count_0 = 0 ;						  
  int count_1 = 0 ;					      	int count_1 = 0 ;					      int count_1 = 0 ;						  
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < len ;						      	i < len ;						      i < len ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == '0' ) count_0 ++ ;		      	  if ( str . charAt ( i ) == '0' ) count_0 ++ ;		    	if ( str . charAt ( i ) == '0' ) {			  
    else count_1 ++ ;					      	  else count_1 ++ ;					    	  count_0 ++ ;						  
  }							      	}							    	}							  
  while ( count_0 > 0 || count_1 > 0 ) {		      	while ( count_0 > 0 || count_1 > 0 ) {			    	else {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	  count_1 ++ ;						  
    j < x && count_0 > 0 ;				      	  j < x && count_0 > 0 ;				    	}							  
    j ++ ) {						      	  j ++ ) {						      }								  
      if ( count_0 > 0 ) {				      	    if ( count_0 > 0 ) {				      while ( count_0 > 0 || count_1 > 0 ) {			  
	cout << "0" ;					      	      System . out . print ( "0" ) ;			    	for ( int j = 0 ;					  
	count_0 -- ;					      	      count_0 -- ;					    	j < x && count_0 > 0 ;					  
      }							      	    }							    	j ++ ) {						  
    }							      	  }							    	  if ( count_0 > 0 ) {					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	    System . out . print ( "0" ) ;			  
    j < y && count_1 > 0 ;				      	  j < y && count_1 > 0 ;				    	    count_0 -- ;					  
    j ++ ) {						      	  j ++ ) {						    	  }							  
      if ( count_1 > 0 ) {				      	    if ( count_1 > 0 ) {				    	}							  
	cout << "1" ;					      	      System . out . print ( "1" ) ;			    	for ( int j = 0 ;					  
	count_1 -- ;					      	      count_1 -- ;					    	j < y && count_1 > 0 ;					  
      }							      	    }							    	j ++ ) {						  
    }							      	  }							    	  if ( count_1 > 0 ) {					  
  }							      	}							    	    System . out . print ( "1" ) ;			  
}							      }								    	    count_1 -- ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1      COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1	    COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1	  COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1
--							      --							    --								  --
int countP ( int n , int k ) {				      static int countP ( int n , int k ) {			    public static int countP ( int n , int k ) {		  error : Exception in thread "main" java.lang.Array
  int dp [ n + 1 ] [ k + 1 ] ;				      	int [ ] [ ] dp = new int [ n + 1 ] [ k + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ k + 1 ] ;		  IndexOutOfBoundsException: Index 65 out of bounds
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  for length 65 	at COUNT_NUMBER_OF_WAYS_TO_PARTITIO
  i <= n ;						      	i <= n ;						      i <= n ;							  N_A_SET_INTO_K_SUBSETS_1.f_filled(COUNT_NUMBER_OF_
  i ++ ) dp [ i ] [ 0 ] = 0 ;				      	i ++ ) dp [ i ] [ 0 ] = 0 ;				      i ++ ) {							  WAYS_TO_PARTITION_A_SET_INTO_K_SUBSETS_1.java:50)
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	dp [ i ] [ 0 ] = 0 ;					  	at COUNT_NUMBER_OF_WAYS_TO_PARTITION_A_SET_INTO_K
  i <= k ;						      	i <= k ;						      }								  _SUBSETS_1.main(COUNT_NUMBER_OF_WAYS_TO_PARTITION_
  i ++ ) dp [ 0 ] [ k ] = 0 ;				      	i ++ ) dp [ 0 ] [ k ] = 0 ;				      for ( int i = 0 ;						  A_SET_INTO_K_SUBSETS_1.java:87)
  for ( int i = 1 ;					      	for ( int i = 1 ;					      i <= k ;							  
  i <= n ;						      	i <= n ;						      i ++ ) {							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				    	dp [ 0 ] [ k ] = 0 ;					  
  j <= i ;						      	j <= k ;						      }								  
  j ++ ) if ( j == 1 || i == j ) dp [ i ] [ j ] = 1 ;	      	j ++ ) if ( j == 1 || i == j ) dp [ i ] [ j ] = 1 ;	      for ( int i = 1 ;						  
  else dp [ i ] [ j ] = j * dp [ i - 1 ] [ j ] + dp [ i - 1 ] 	else dp [ i ] [ j ] = j * dp [ i - 1 ] [ j ] + dp [ i - 1 ]   i <= n ;							  
  return dp [ n ] [ k ] ;				      	return dp [ n ] [ k ] ;					      i ++ ) {							  
}							      }								    	for ( int j = 1 ;					  
							      								    	j <= i ;						  
							      								    	j ++ ) {						  
							      								    	  if ( j == 1 || i == j ) {				  
							      								    	    dp [ i ] [ j ] = 1 ;				  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = j * dp [ i - 1 ] [ j ] + dp [ i - 1  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] [ k ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE DYNAMIC_PROGRAMMING_SET_14_MAXIMUM_SUM_INCREASING_SUBSEQUENCE
--							      --							    --								  --
int maxSumIS ( int arr [ ] , int n ) {			      static int maxSumIS ( int arr [ ] , int n ) {		    public static int maxSumIS ( int arr [ ] , int n ) {	  success : None
  int i , j , max = 0 ;					      	int i , j , max = 0 ;					      int i , j , max = 0 ;					  
  int msis [ n ] ;					      	int msis [ ] = new int [ n ] ;				      int msis [ ] = new int [ n ] ;				  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) msis [ i ] = arr [ i ] ;			      	i ++ ) msis [ i ] = arr [ i ] ;				      i ++ ) {							  
  for ( i = 1 ;						      	for ( i = 1 ;						    	msis [ i ] = arr [ i ] ;				  
  i < n ;						      	i < n ;							      }								  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      for ( i = 1 ;						  
  j < i ;						      	j < i ;							      i < n ;							  
  j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j  	j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j    i ++ ) for ( j = 0 ;					  
  for ( i = 0 ;						      	for ( i = 0 ;						      j < i ;							  
  i < n ;						      	i < n ;							      j ++ ) if ( arr [ i ] > arr [ j ] && msis [ i ] < msis [ j  
  i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ;	      	i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ;	      for ( i = 0 ;						  
  return max ;						      	return max ;						      i < n ;							  
}							      }								      i ++ ) if ( max < msis [ i ] ) max = msis [ i ] ;		  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F COUNT_OF_SUB_STRINGS_THAT_DO_NOT_CONTAIN_ALL_THE_CHARACTERS_F
--							      --							    --								  --
int CountSubstring ( char str [ ] , int n ) {		      static int CountSubstring ( char str [ ] , int n ) {	    public static int CountSubstring ( char str [ ] , int n ) {	  success : None
  int ans = ( n * ( n + 1 ) ) / 2 ;			      	int ans = ( n * ( n + 1 ) ) / 2 ;			      int ans = ( n * ( n + 1 ) ) / 2 ;				  
  int a_index = 0 ;					      	int a_index = 0 ;					      int a_index = 0 ;						  
  int b_index = 0 ;					      	int b_index = 0 ;					      int b_index = 0 ;						  
  int c_index = 0 ;					      	int c_index = 0 ;					      int c_index = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == 'a' ) {				      	  if ( str [ i ] == 'a' ) {				    	if ( str [ i ] == 'a' ) {				  
      a_index = i + 1 ;					      	    a_index = i + 1 ;					    	  a_index = i + 1 ;					  
      ans -= min ( b_index , c_index ) ;		      	    ans -= Math . min ( b_index , c_index ) ;		    	  ans -= Math . min ( b_index , c_index ) ;		  
    }							      	  }							    	}							  
    else if ( str [ i ] == 'b' ) {			      	  else if ( str [ i ] == 'b' ) {			    	else if ( str [ i ] == 'b' ) {				  
      b_index = i + 1 ;					      	    b_index = i + 1 ;					    	  b_index = i + 1 ;					  
      ans -= min ( a_index , c_index ) ;		      	    ans -= Math . min ( a_index , c_index ) ;		    	  ans -= Math . min ( a_index , c_index ) ;		  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      c_index = i + 1 ;					      	    c_index = i + 1 ;					    	  c_index = i + 1 ;					  
      ans -= min ( a_index , b_index ) ;		      	    ans -= Math . min ( a_index , b_index ) ;		    	  ans -= Math . min ( a_index , b_index ) ;		  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_WAYS_JUMP_REACH_END			      COUNT_NUMBER_WAYS_JUMP_REACH_END				    COUNT_NUMBER_WAYS_JUMP_REACH_END				  COUNT_NUMBER_WAYS_JUMP_REACH_END
--							      --							    --								  --
void countWaysToJump ( int arr [ ] , int n ) {		      static void countWaysToJump ( int arr [ ] , int n ) {	    public static void countWaysToJump ( int arr [ ] , int n ) {  script_not_found : None
  int count_jump [ n ] ;				      	int count_jump [ ] = new int [ n ] ;			      int count_jump [ ] = new int [ n ] ;			  
  memset ( count_jump , 0 , sizeof ( count_jump ) ) ;	      	Arrays . fill ( count_jump , 0 ) ;			      Arrays . fill ( count_jump , 0 ) ;			  
  for ( int i = n - 2 ;					      	for ( int i = n - 2 ;					      for ( int i = n - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ;	      	  if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ;	    	if ( arr [ i ] >= n - i - 1 ) {				  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	  count_jump [ i ] ++ ;					  
    j < n - 1 && j <= arr [ i ] + i ;			      	  j < n - 1 && j <= arr [ i ] + i ;			    	}							  
    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += 	  j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += 	for ( int j = i + 1 ;					  
    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ;     	  if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ;	    	j < n - 1 && j <= arr [ i ] + i ;			  
  }							      	}							    	j ++ ) {						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	  if ( count_jump [ j ] != - 1 ) {			  
  i < n ;						      	i < n ;							    	    count_jump [ i ] += count_jump [ j ] ;		  
  i ++ ) cout << count_jump [ i ] << " " ;		      	i ++ ) System . out . print ( count_jump [ i ] + " " ) ;    	  }							  
}							      }								    	  if ( count_jump [ i ] == 0 ) {			  
							      								    	    count_jump [ i ] = - 1 ;				  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( count_jump [ i ] + " " ) ;	  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
UNIQUE_CELLS_BINARY_MATRIX				      UNIQUE_CELLS_BINARY_MATRIX				    UNIQUE_CELLS_BINARY_MATRIX					  UNIQUE_CELLS_BINARY_MATRIX
--							      --							    --								  --
int countUnique ( int mat [ ] [ MAX ] , int n , int m ) {     static int countUnique ( int mat [ ] [ ] , int n , int m ) {  public static int countUnique ( int mat [ ] [ ] , int n , int error : UNIQUE_CELLS_BINARY_MATRIX.java:36: error:
  int rowsum [ n ] , colsum [ m ] ;			      	int [ ] rowsum = new int [ n ] ;			      int rowsum [ ] , colsum [ ] ;				   variable colsum might not have been initialized
  memset ( colsum , 0 , sizeof ( colsum ) ) ;		      	int [ ] colsum = new int [ m ] ;			      Arrays . fill ( colsum , 0 ) ;				   Arrays . fill ( colsum , 0 ) ;
  memset ( rowsum , 0 , sizeof ( rowsum ) ) ;		      	for ( int i = 0 ;					      Arrays . fill ( rowsum , 0 ) ;				  ^ UNIQUE_CELLS_BINARY_MATRIX.java:37: error: varia
  for ( int i = 0 ;					      	i < n ;							      for ( int i = 0 ;						  ble rowsum might not have been initialized   Array
  i < n ;						      	i ++ ) for ( int j = 0 ;				      i < n ;							  s . fill ( rowsum , 0 ) ;		      ^ 2 er
  i ++ ) for ( int j = 0 ;				      	j < m ;							      i ++ ) for ( int j = 0 ;					  rors
  j < m ;						      	j ++ ) if ( mat [ i ] [ j ] != 0 ) {			      j < m ;							  
  j ++ ) if ( mat [ i ] [ j ] ) {			      	  rowsum [ i ] ++ ;					      j ++ ) if ( mat [ i ] [ j ] != 0 ) {			  
    rowsum [ i ] ++ ;					      	  colsum [ j ] ++ ;					    	rowsum [ i ] ++ ;					  
    colsum [ j ] ++ ;					      	}							    	colsum [ j ] ++ ;					  
  }							      	int uniquecount = 0 ;					      }								  
  int uniquecount = 0 ;					      	for ( int i = 0 ;					      int uniquecount = 0 ;					  
  for ( int i = 0 ;					      	i < n ;							      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) for ( int j = 0 ;				      i < n ;							  
  i ++ ) for ( int j = 0 ;				      	j < m ;							      i ++ ) for ( int j = 0 ;					  
  j < m ;						      	j ++ ) if ( mat [ i ] [ j ] != 0 && rowsum [ i ] == 1 && co   j < m ;							  
  j ++ ) if ( mat [ i ] [ j ] && rowsum [ i ] == 1 && colsum  	return uniquecount ;					      j ++ ) if ( mat [ i ] [ j ] != 0 && rowsum [ i ] == 1 && co 
  return uniquecount ;					      }								      return uniquecount ;					  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU REARRANGE_A_STRING_IN_SORTED_ORDER_FOLLOWED_BY_THE_INTEGER_SU
--							      --							    --								  --
string arrangeString ( string str ) {			      static String arrangeString ( String str ) {		    public static String arrangeString ( String str ) {		  script_not_found : None
  int char_count [ MAX_CHAR ] = {			      	int char_count [ ] = new int [ MAX_CHAR ] ;		      int [ ] charCount = new int [ str . length ( ) ] ;	  
    0 }							      	int sum = 0 ;						      int sum = 0 ;						  
    ;							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    int sum = 0 ;					      	i < str . length ( ) ;					      i < str . length ( ) ;					  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) {							  
    i < str . length ( ) ;				      	  if ( Character . isUpperCase ( str . charAt ( i ) ) ) cha 	if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 
    i ++ ) {						      	  else sum = sum + ( str . charAt ( i ) - '0' ) ;	    	  charCount [ str . charAt ( i ) - 'A' ] ++ ;		  
      if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) char_count  	}							    	}							  
      else sum = sum + ( str [ i ] - '0' ) ;		      	String res = "" ;					    	else {							  
    }							      	for ( int i = 0 ;					    	  sum = sum + ( str . charAt ( i ) - '0' ) ;		  
    string res = "" ;					      	i < MAX_CHAR ;						    	}							  
    for ( int i = 0 ;					      	i ++ ) {						      }								  
    i < MAX_CHAR ;					      	  char ch = ( char ) ( 'A' + i ) ;			      String res = "" ;						  
    i ++ ) {						      	  while ( char_count [ i ] -- != 0 ) res = res + ch ;	      for ( int i = 0 ;						  
      char ch = ( char ) ( 'A' + i ) ;			      	}							      i < charCount . length ;					  
      while ( char_count [ i ] -- ) res = res + ch ;	      	if ( sum > 0 ) res = res + sum ;			      i ++ ) {							  
    }							      	return res ;						    	char ch = ( char ) ( 'A' + i ) ;			  
    if ( sum > 0 ) res = res + to_string ( sum ) ;	      }								    	while ( charCount [ i ] -- > 0 ) {			  
    return res ;					      								    	  res = res + ch ;					  
  }							      								    	}							  
							      								      }								  
							      								      if ( sum > 0 ) {						  
							      								    	res = res + sum ;					  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSTRING				      LONGEST_COMMON_SUBSTRING					    LONGEST_COMMON_SUBSTRING					  LONGEST_COMMON_SUBSTRING
--							      --							    --								  --
int LCSubStr ( char * X , char * Y , int m , int n ) {	      static int LCSubStr ( char X [ ] , char Y [ ] , int m , int n public static int LCSubStr ( char [ ] X , char [ ] Y , int m  error : LONGEST_COMMON_SUBSTRING.java:35: error: i
  int LCSuff [ m + 1 ] [ n + 1 ] ;			      	int LCStuff [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;	      int [ ] LCSuff = new int [ m + 1 ] [ n + 1 ] ;		  ncompatible types: int[][] cannot be converted to
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  int[]	  int [ ] LCSuff = new int [ m + 1 ] [ n + 1
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						   ] ;			  ^ LONGEST_COMMON_SUBSTRING
  i <= m ;						      	i <= m ;						      i <= m ;							  .java:44: error: array required, but int found
  i ++ ) {						      	i ++ ) {						      i ++ ) {							       LCSuff [ i ] [ j ] = 0 ;
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					   ^ LONGEST_COMMON_SUBSTRING.java:47: error: array
    j <= n ;						      	  j <= n ;						    	j <= n ;						  required, but int found	  LCSuff [ i ] [ j ]
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						   = LCSuff [ i - 1 ] [ j - 1 ] + 1 ;
      if ( i == 0 || j == 0 ) LCSuff [ i ] [ j ] = 0 ;	      	    if ( i == 0 || j == 0 ) LCStuff [ i ] [ j ] = 0 ;	    	  if ( i == 0 || j == 0 ) {				  	 ^ LONGEST_COMMON_SUBSTRING.java:47: error:
      else if ( X [ i - 1 ] == Y [ j - 1 ] ) {		      	    else if ( X [ i - 1 ] == Y [ j - 1 ] ) {		    	    LCSuff [ i ] [ j ] = 0 ;				  array required, but int found		LCSuff [ i ]
	LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ; 	      LCStuff [ i ] [ j ] = LCStuff [ i - 1 ] [ j - 1 ] + 1 	  }							   [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ;
	result = max ( result , LCSuff [ i ] [ j ] ) ;	      	      result = Integer . max ( result , LCStuff [ i ] [ j ] 	  else if ( X [ i - 1 ] == Y [ j - 1 ] ) {		  					^ LONGEST_CO
      }							      	    }							    	    LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 ; MMON_SUBSTRING.java:48: error: array required, but
      else LCSuff [ i ] [ j ] = 0 ;			      	    else LCStuff [ i ] [ j ] = 0 ;			    	    result = Math . max ( result , LCSuff [ i ] [ j ] ) ;  int found	     result = Math . max ( result ,
    }							      	  }							    	  }							  LCSuff [ i ] [ j ] ) ;
  }							      	}							    	  else {						  			   ^ LONGEST_COMMON_SUBSTRIN
  return result ;					      	return result ;						    	    LCSuff [ i ] [ j ] = 0 ;				  G.java:51: error: array required, but int found
}							      }								    	  }							  	LCSuff [ i ] [ j ] = 0 ;
							      								    	}							    ^ 6 errors
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SERIES_LARGEST_GCD_SUM_EQUALS_N				      SERIES_LARGEST_GCD_SUM_EQUALS_N				    SERIES_LARGEST_GCD_SUM_EQUALS_N				  SERIES_LARGEST_GCD_SUM_EQUALS_N
--							      --							    --								  --
void print_sequence ( int n , int k ) {			      static void print_sequence ( int n , int k ) {		    public static void printSequence ( int n , int k ) {	  script_not_found : None
  int b = n / ( k * ( k + 1 ) / 2 ) ;			      	int b = n / ( k * ( k + 1 ) / 2 ) ;			      int b = n / ( k * ( k + 1 ) / 2 ) ;			  
  if ( b == 0 ) {					      	if ( b == 0 ) {						      if ( b == 0 ) {						  
    cout << - 1 << endl ;				      	  System . out . println ( "-1" ) ;			    	System . out . println ( - 1 ) ;			  
  }							      	}							      }								  
  else {						      	else {							      else {							  
    int r = 1 ;						      	  int r = 1 ;						    	int r = 1 ;						  
    for ( int x = 1 ;					      	  for ( int x = 1 ;					    	for ( int x = 1 ;					  
    x * x <= n ;					      	  x * x <= n ;						    	x * x <= n ;						  
    x ++ ) {						      	  x ++ ) {						    	x ++ ) {						  
      if ( n % x != 0 ) continue ;			      	    if ( n % x != 0 ) continue ;			    	  if ( n % x != 0 ) continue ;				  
      if ( x <= b && x > r ) r = x ;			      	    if ( x <= b && x > r ) r = x ;			    	  if ( x <= b && x > r ) {				  
      if ( n / x <= b && n / x > r ) r = n / x ;	      	    if ( n / x <= b && n / x > r ) r = n / x ;		    	    r = x ;						  
    }							      	  }							    	  }							  
    for ( int i = 1 ;					      	  for ( int i = 1 ;					    	  if ( n / x <= b && n / x > r ) {			  
    i < k ;						      	  i < k ;						    	    r = n / x ;						  
    i ++ ) cout << r * i << " " ;			      	  i ++ ) System . out . print ( r * i + " " ) ;		    	  }							  
    int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;	      	  int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;		    	}							  
    cout << res << endl ;				      	  System . out . println ( res ) ;			    	for ( int i = 1 ;					  
  }							      	}							    	i < k ;							  
}							      }								    	i ++ ) {						  
							      								    	  System . out . print ( r * i + " " ) ;		  
							      								    	}							  
							      								    	int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;		  
							      								    	System . out . println ( res ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D		      FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D			    FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D			  FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D
--							      --							    --								  --
int findLargestd ( int S [ ] , int n ) {		      static int findLargestd ( int [ ] S , int n ) {		    public static int findLargestd ( int [ ] S , int n ) {	  error : FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D.
  bool found = false ;					      	boolean found = false ;					      boolean found = false ;					  java:71: error: missing return statement } ^ 1 err
  sort ( S , S + n ) ;					      	Arrays . sort ( S ) ;					      Arrays . sort ( S ) ;					  or
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( i == j ) continue ;				      	    if ( i == j ) continue ;				    	  if ( i == j ) continue ;				  
      for ( int k = j + 1 ;				      	    for ( int k = j + 1 ;				    	  for ( int k = j + 1 ;					  
      k < n ;						      	    k < n ;						    	  k < n ;						  
      k ++ ) {						      	    k ++ ) {						    	  k ++ ) {						  
	if ( i == k ) continue ;			      	      if ( i == k ) continue ;				    	    if ( i == k ) continue ;				  
	for ( int l = k + 1 ;				      	      for ( int l = k + 1 ;				    	    for ( int l = k + 1 ;				  
	l < n ;						      	      l < n ;						    	    l < n ;						  
	l ++ ) {					      	      l ++ ) {						    	    l ++ ) {						  
	  if ( i == l ) continue ;			      		if ( i == l ) continue ;			    	      if ( i == l ) continue ;				  
	  if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {     		if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {	    	      if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {	  
	    found = true ;				      		  found = true ;				    		found = true ;					  
	    return S [ i ] ;				      		  return S [ i ] ;				    		return S [ i ] ;				  
	  }						      		}						    	      }							  
	}						      	      }							    	    }							  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
  }							      	}							      }								  
  if ( found == false ) return INT_MIN ;		      	if ( found == false ) return Integer . MAX_VALUE ;	      if ( found == false ) return Integer . MIN_VALUE ;	  
}							      	return - 1 ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PRODUCT_SUBSET_ARRAY				      MAXIMUM_PRODUCT_SUBSET_ARRAY				    MAXIMUM_PRODUCT_SUBSET_ARRAY				  MAXIMUM_PRODUCT_SUBSET_ARRAY
--							      --							    --								  --
int maxProductSubset ( int a [ ] , int n ) {		      static int maxProductSubset ( int a [ ] , int n ) {	    public static int maxProductSubset ( int a [ ] , int n ) {	  error : MAXIMUM_PRODUCT_SUBSET_ARRAY.java:65: erro
  if ( n == 1 ) return a [ 0 ] ;			      	if ( n == 1 ) {						      if ( n == 1 ) return a [ 0 ] ;				  r: incompatible types: int cannot be converted to
  int max_neg = INT_MIN ;				      	  return a [ 0 ] ;					      int maxNeg = Integer . MIN_VALUE ;			  boolean   if ( countNeg & 1 ) {		  ^
  int count_neg = 0 , count_zero = 0 ;			      	}							      int countNeg = 0 , countZero = 0 ;			  1 error
  int prod = 1 ;					      	int max_neg = Integer . MIN_VALUE ;			      int prod = 1 ;						  
  for ( int i = 0 ;					      	int count_neg = 0 , count_zero = 0 ;			      for ( int i = 0 ;						  
  i < n ;						      	int prod = 1 ;						      i < n ;							  
  i ++ ) {						      	for ( int i = 0 ;					      i ++ ) {							  
    if ( a [ i ] == 0 ) {				      	i < n ;							    	if ( a [ i ] == 0 ) {					  
      count_zero ++ ;					      	i ++ ) {						    	  countZero ++ ;					  
      continue ;					      	  if ( a [ i ] == 0 ) {					    	  continue ;						  
    }							      	    count_zero ++ ;					    	}							  
    if ( a [ i ] < 0 ) {				      	    continue ;						    	if ( a [ i ] < 0 ) {					  
      count_neg ++ ;					      	  }							    	  countNeg ++ ;						  
      max_neg = max ( max_neg , a [ i ] ) ;		      	  if ( a [ i ] < 0 ) {					    	  maxNeg = Math . max ( maxNeg , a [ i ] ) ;		  
    }							      	    count_neg ++ ;					    	}							  
    prod = prod * a [ i ] ;				      	    max_neg = Math . max ( max_neg , a [ i ] ) ;	    	prod = prod * a [ i ] ;					  
  }							      	  }							      }								  
  if ( count_zero == n ) return 0 ;			      	  prod = prod * a [ i ] ;				      if ( countZero == n ) return 0 ;				  
  if ( count_neg & 1 ) {				      	}							      if ( countNeg & 1 ) {					  
    if ( count_neg == 1 && count_zero > 0 && count_zero + cou 	if ( count_zero == n ) {				    	if ( countNeg == 1 && countZero > 0 && countZero + countN 
    prod = prod / max_neg ;				      	  return 0 ;						    	prod = prod / maxNeg ;					  
  }							      	}							      }								  
  return prod ;						      	if ( count_neg % 2 == 1 ) {				      return prod ;						  
}							      	  if ( count_neg == 1 && count_zero > 0 && count_zero + cou }								  
							      	    return 0 ;						    								  
							      	  }							    								  
							      	  prod = prod / max_neg ;				    								  
							      	}							    								  
							      	return prod ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS	      MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS	    MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS		  MINIMIZE_THE_MAXIMUM_DIFFERENCE_BETWEEN_THE_HEIGHTS
--							      --							    --								  --
int getMinDiff ( int arr [ ] , int n , int k ) {	      static int getMinDiff ( int arr [ ] , int n , int k ) {	    public static int getMinDiff ( int arr [ ] , int n , int k )  script_not_found : None
  if ( n == 1 ) return 0 ;				      	if ( n == 1 ) return 0 ;				      if ( n == 1 ) return 0 ;					  
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int ans = arr [ n - 1 ] - arr [ 0 ] ;			      	int ans = arr [ n - 1 ] - arr [ 0 ] ;			      int ans = arr [ n - 1 ] - arr [ 0 ] ;			  
  int small = arr [ 0 ] + k ;				      	int small = arr [ 0 ] + k ;				      int small = arr [ 0 ] + k ;				  
  int big = arr [ n - 1 ] - k ;				      	int big = arr [ n - 1 ] - k ;				      int big = arr [ n - 1 ] - k ;				  
  if ( small > big ) swap ( small , big ) ;		      	int temp = 0 ;						      if ( small > big ) {					  
  for ( int i = 1 ;					      	if ( small > big ) {					    	Arrays . swap ( small , big ) ;				  
  i < n - 1 ;						      	  temp = small ;					      }								  
  i ++ ) {						      	  small = big ;						      for ( int i = 1 ;						  
    int subtract = arr [ i ] - k ;			      	  big = temp ;						      i < n - 1 ;						  
    int add = arr [ i ] + k ;				      	}							      i ++ ) {							  
    if ( subtract >= small || add <= big ) continue ;	      	for ( int i = 1 ;					    	int subtract = arr [ i ] - k ;				  
    if ( big - subtract <= add - small ) small = subtract ;   	i < n - 1 ;						    	int add = arr [ i ] + k ;				  
    else big = add ;					      	i ++ ) {						    	if ( subtract >= small || add <= big ) continue ;	  
  }							      	  int subtract = arr [ i ] - k ;			    	if ( big - subtract <= add - small ) {			  
  return min ( ans , big - small ) ;			      	  int add = arr [ i ] + k ;				    	  small = subtract ;					  
}							      	  if ( subtract >= small || add <= big ) continue ;	    	}							  
							      	  if ( big - subtract <= add - small ) small = subtract ;   	else {							  
							      	  else big = add ;					    	  big = add ;						  
							      	}							    	}							  
							      	return Math . min ( ans , big - small ) ;		      }								  
							      }								      return Math . min ( ans , big - small ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK	      CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK		    CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK		  CHECK_QUEUE_CAN_SORTED_ANOTHER_QUEUE_USING_STACK
--							      --							    --								  --
bool checkSorted ( int n , queue < int > & q ) {	      static boolean checkSorted ( int n ) {			    public static boolean checkSorted ( int n , Queue < Integer > script_not_found : None
  stack < int > st ;					      	Stack < Integer > st = new Stack < Integer > ( ) ;	      Stack < Integer > st = new Stack < > ( ) ;		  
  int expected = 1 ;					      	int expected = 1 ;					      int expected = 1 ;					  
  int fnt ;						      	int fnt ;						      int fnt ;							  
  while ( ! q . empty ( ) ) {				      	while ( q . size ( ) != 0 ) {				      while ( ! q . isEmpty ( ) ) {				  
    fnt = q . front ( ) ;				      	  fnt = q . peek ( ) ;					    	fnt = q . pop ( ) ;					  
    q . pop ( ) ;					      	  q . poll ( ) ;					    	q . push ( fnt ) ;					  
    if ( fnt == expected ) expected ++ ;		      	  if ( fnt == expected ) expected ++ ;			    	if ( fnt == expected ) {				  
    else {						      	  else {						    	  expected ++ ;						  
      if ( st . empty ( ) ) {				      	    if ( st . size ( ) == 0 ) {				    	}							  
	st . push ( fnt ) ;				      	      st . push ( fnt ) ;				    	else {							  
      }							      	    }							    	  if ( st . isEmpty ( ) ) {				  
      else if ( ! st . empty ( ) && st . top ( ) < fnt ) {    	    else if ( st . size ( ) != 0 && st . peek ( ) < fnt ) { 	    st . push ( fnt ) ;					  
	return false ;					      	      return false ;					    	  }							  
      }							      	    }							    	  else if ( ! st . isEmpty ( ) && st . peek ( ) < fnt ) { 
      else st . push ( fnt ) ;				      	    else st . push ( fnt ) ;				    	    return false ;					  
    }							      	  }							    	  }							  
    while ( ! st . empty ( ) && st . top ( ) == expected ) {  	  while ( st . size ( ) != 0 && st . peek ( ) == expected ) 	  else {						  
      st . pop ( ) ;					      	    st . pop ( ) ;					    	    st . push ( fnt ) ;					  
      expected ++ ;					      	    expected ++ ;					    	  }							  
    }							      	  }							    	  while ( ! st . isEmpty ( ) && st . peek ( ) == expected 
  }							      	}							    	    st . pop ( ) ;					  
  if ( expected - 1 == n && st . empty ( ) ) return true ;    	if ( expected - 1 == n && st . size ( ) == 0 ) return true  	    expected ++ ;					  
  return false ;					      	return false ;						    	  }							  
}							      }								    	}							  
							      								    	if ( expected - 1 == n && st . isEmpty ( ) ) {		  
							      								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_REPEATING_SUBSEQUENCE				      LONGEST_REPEATING_SUBSEQUENCE				    LONGEST_REPEATING_SUBSEQUENCE				  LONGEST_REPEATING_SUBSEQUENCE
--							      --							    --								  --
int findLongestRepeatingSubSeq ( string str ) {		      static int findLongestRepeatingSubSeq ( String str ) {	    public static int findLongestRepeatingSubSeq ( String str ) { success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int dp [ n + 1 ] [ n + 1 ] ;				      	int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 1 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) {						      i ++ ) for ( int j = 0 ;					  
  j <= n ;						      	  for ( int j = 1 ;					      j <= n ;							  
  j ++ ) dp [ i ] [ j ] = 0 ;				      	  j <= n ;						      j ++ ) dp [ i ] [ j ] = 0 ;				  
  for ( int i = 1 ;					      	  j ++ ) {						      for ( int i = 1 ;						  
  i <= n ;						      	    if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) &   i <= n ;							  
  i ++ ) {						      	    else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] ,   i ++ ) {							  
    for ( int j = 1 ;					      	  }							    	for ( int j = 1 ;					  
    j <= n ;						      	}							    	j <= n ;						  
    j ++ ) {						      	return dp [ n ] [ n ] ;					    	j ++ ) {						  
      if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i  }								    	  if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) & 
      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i 								    	    dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;	  
    }							      								    	  }							  
  }							      								    	  else {						  
  return dp [ n ] [ n ] ;				      								    	    dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 
}							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			      FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			    FIND_KTH_CHARACTER_OF_DECRYPTED_STRING			  FIND_KTH_CHARACTER_OF_DECRYPTED_STRING
--							      --							    --								  --
char encodedChar ( string str , int k ) {		      static char encodedChar ( String str , int k ) {		    public static char encodedChar ( String str , int k ) {	  script_not_found : None
  string expand = "" ;					      	String expand = "" ;					      StringBuilder expand = new StringBuilder ( ) ;		  
  string temp ;						      	String temp = "" ;					      StringBuilder temp ;					  
  int freq = 0 ;					      	int freq = 0 ;						      int freq = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  str [ i ] != '\0' ;					      	i < str . length ( ) ;					      str . charAt ( i ) != '\0' ;				  
  ) {							      	) {							      ) {							  
    temp = "" ;						      	  temp = "" ;						    	temp = new StringBuilder ( ) ;				  
    freq = 0 ;						      	  freq = 0 ;						    	freq = 0 ;						  
    while ( str [ i ] >= 'a' && str [ i ] <= 'z' ) {	      	  while ( i < str . length ( ) && str . charAt ( i ) >= 'a' 	while ( str . charAt ( i ) >= 'a' && str . charAt ( i ) < 
      temp . push_back ( str [ i ] ) ;			      	    temp += str . charAt ( i ) ;			    	  temp . append ( str . charAt ( i ) ) ;		  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    while ( str [ i ] >= '1' && str [ i ] <= '9' ) {	      	  while ( i < str . length ( ) && str . charAt ( i ) >= '1' 	while ( str . charAt ( i ) >= '1' && str . charAt ( i ) < 
      freq = freq * 10 + str [ i ] - '0' ;		      	    freq = freq * 10 + str . charAt ( i ) - '0' ;	    	  freq = freq * 10 + str . charAt ( i ) - '0' ;		  
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
    }							      	  }							    	}							  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    j <= freq ;						      	  j <= freq ;						    	j <= freq ;						  
    j ++ ) expand . append ( temp ) ;			      	  j ++ ) expand += temp ;				    	j ++ ) {						  
  }							      	}							    	  expand . append ( temp ) ;				  
  if ( freq == 0 ) expand . append ( temp ) ;		      	if ( freq == 0 ) expand += temp ;			    	}							  
  return expand [ k - 1 ] ;				      	return expand . charAt ( k - 1 ) ;			      }								  
}							      }								      if ( freq == 0 ) {					  
							      								    	expand . append ( temp ) ;				  
							      								      }								  
							      								      return expand . charAt ( k - 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N			      NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N			    NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N			  NUMBER_SUBSEQUENCES_STRING_DIVISIBLE_N
--							      --							    --								  --
int countDivisibleSubseq ( string str , int n ) {	      static int countDivisibleSubseq ( String str , int n ) {	    public static int countDivisibleSubseq ( String str , int n ) error : Exception in thread "main" java.lang.Array
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  StoreException: java.lang.Integer 	at java.base/ja
  int dp [ len ] [ n ] ;				      	int dp [ ] [ ] = new int [ len ] [ n ] ;		      int [ ] [ ] dp = new int [ len ] [ n ] ;			  va.util.Arrays.fill(Arrays.java:3638) 	at NUMBER_S
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	dp [ 0 ] [ ( str . charAt ( 0 ) - '0' ) % n ] ++ ;	      Arrays . fill ( dp , 0 ) ;				  UBSEQUENCES_STRING_DIVISIBLE_N.f_filled(NUMBER_SUB
  dp [ 0 ] [ ( str [ 0 ] - '0' ) % n ] ++ ;		      	for ( int i = 1 ;					      dp [ 0 ] [ ( str . charAt ( 0 ) - '0' ) % n ] ++ ;	  SEQUENCES_STRING_DIVISIBLE_N.java:35) 	at NUMBER_S
  for ( int i = 1 ;					      	i < len ;						      for ( int i = 1 ;						  UBSEQUENCES_STRING_DIVISIBLE_N.main(NUMBER_SUBSEQU
  i < len ;						      	i ++ ) {						      i < len ;							  ENCES_STRING_DIVISIBLE_N.java:78)
  i ++ ) {						      	  dp [ i ] [ ( str . charAt ( i ) - '0' ) % n ] ++ ;	      i ++ ) {							  
    dp [ i ] [ ( str [ i ] - '0' ) % n ] ++ ;		      	  for ( int j = 0 ;					    	dp [ i ] [ ( str . charAt ( i ) - '0' ) % n ] ++ ;	  
    for ( int j = 0 ;					      	  j < n ;						    	for ( int j = 0 ;					  
    j < n ;						      	  j ++ ) {						    	j < n ;							  
    j ++ ) {						      	    dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;		    	j ++ ) {						  
      dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;		      	    dp [ i ] [ ( j * 10 + ( str . charAt ( i ) - '0' ) ) %  	  dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;		  
      dp [ i ] [ ( j * 10 + ( str [ i ] - '0' ) ) % n ] += dp 	  }							    	  dp [ i ] [ ( j * 10 + ( str . charAt ( i ) - '0' ) ) %  
    }							      	}							    	}							  
  }							      	return dp [ len - 1 ] [ 0 ] ;				      }								  
  return dp [ len - 1 ] [ 0 ] ;				      }								      return dp [ len - 1 ] [ 0 ] ;				  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_13_NOT
--							      --							    --								  --
bool checkDivisibility ( string num ) {			      static boolean checkDivisibility ( String num ) {		    public static boolean checkDivisibility ( String num ) {	  success : None
  int length = num . size ( ) ;				      	int length = num . length ( ) ;				      int length = num . length ( ) ;				  
  if ( length == 1 && num [ 0 ] == '0' ) return true ;	      	if ( length == 1 && num . charAt ( 0 ) == '0' ) return true   if ( length == 1 && num . charAt ( 0 ) == '0' ) {		  
  if ( length % 3 == 1 ) {				      	if ( length % 3 == 1 ) {				    	return true ;						  
    num += "00" ;					      	  num += "00" ;						      }								  
    length += 2 ;					      	  length += 2 ;						      if ( length % 3 == 1 ) {					  
  }							      	}							    	num += "00" ;						  
  else if ( length % 3 == 2 ) {				      	else if ( length % 3 == 2 ) {				    	length += 2 ;						  
    num += "0" ;					      	  num += "0" ;						      }								  
    length += 1 ;					      	  length += 1 ;						      else if ( length % 3 == 2 ) {				  
  }							      	}							    	num += "0" ;						  
  int sum = 0 , p = 1 ;					      	int sum = 0 , p = 1 ;					    	length += 1 ;						  
  for ( int i = length - 1 ;				      	for ( int i = length - 1 ;				      }								  
  i >= 0 ;						      	i >= 0 ;						      int sum = 0 , p = 1 ;					  
  i -- ) {						      	i -- ) {						      for ( int i = length - 1 ;				  
    int group = 0 ;					      	  int group = 0 ;					      i >= 0 ;							  
    group += num [ i -- ] - '0' ;			      	  group += num . charAt ( i -- ) - '0' ;		      i -- ) {							  
    group += ( num [ i -- ] - '0' ) * 10 ;		      	  group += ( num . charAt ( i -- ) - '0' ) * 10 ;	    	int group = 0 ;						  
    group += ( num [ i ] - '0' ) * 100 ;		      	  group += ( num . charAt ( i ) - '0' ) * 100 ;		    	group += num . charAt ( i -- ) - '0' ;			  
    sum = sum + group * p ;				      	  sum = sum + group * p ;				    	group += ( num . charAt ( i -- ) - '0' ) * 10 ;		  
    p *= ( - 1 ) ;					      	  p *= ( - 1 ) ;					    	group += ( num . charAt ( i ) - '0' ) * 100 ;		  
  }							      	}							    	sum = sum + group * p ;					  
  sum = abs ( sum ) ;					      	sum = Math . abs ( sum ) ;				    	p *= ( - 1 ) ;						  
  return ( sum % 13 == 0 ) ;				      	return ( sum % 13 == 0 ) ;				      }								  
}							      }								      sum = Math . abs ( sum ) ;				  
							      								      return ( sum % 13 == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		      MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		    MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX		  MAXIMUM_DIFFERENCE_SUM_ELEMENTS_TWO_ROWS_MATRIX
--							      --							    --								  --
int maxRowDiff ( int mat [ ] [ MAX ] , int m , int n ) {      static int maxRowDiff ( int mat [ ] [ ] , int m , int n ) {   public static int maxRowDiff ( int mat [ ] [ ] , int m , int  success : None
  int rowSum [ m ] ;					      	int rowSum [ ] = new int [ m ] ;			      int rowSum [ ] = new int [ m ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int sum = 0 ;					      	  int sum = 0 ;						    	int sum = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) sum += mat [ i ] [ j ] ;			      	  j ++ ) sum += mat [ i ] [ j ] ;			    	j ++ ) {						  
    rowSum [ i ] = sum ;				      	  rowSum [ i ] = sum ;					    	  sum += mat [ i ] [ j ] ;				  
  }							      	}							    	}							  
  int max_diff = rowSum [ 1 ] - rowSum [ 0 ] ;		      	int max_diff = rowSum [ 1 ] - rowSum [ 0 ] ;		    	rowSum [ i ] = sum ;					  
  int min_element = rowSum [ 0 ] ;			      	int min_element = rowSum [ 0 ] ;			      }								  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      int maxDiff = rowSum [ 1 ] - rowSum [ 0 ] ;		  
  i < m ;						      	i < m ;							      int minElement = rowSum [ 0 ] ;				  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    if ( rowSum [ i ] - min_element > max_diff ) max_diff = r 	  if ( rowSum [ i ] - min_element > max_diff ) max_diff = r   i < m ;							  
    if ( rowSum [ i ] < min_element ) min_element = rowSum [  	  if ( rowSum [ i ] < min_element ) min_element = rowSum [    i ++ ) {							  
  }							      	}							    	if ( rowSum [ i ] - minElement > maxDiff ) {		  
  return max_diff ;					      	return max_diff ;					    	  maxDiff = rowSum [ i ] - minElement ;			  
}							      }								    	}							  
							      								    	if ( rowSum [ i ] < minElement ) {			  
							      								    	  minElement = rowSum [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return maxDiff ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS			      SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS			    SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS				  SQUARES_OF_MATRIX_DIAGONAL_ELEMENTS
--							      --							    --								  --
void diagonalsquare ( int mat [ ] [ MAX ] , int row , int col static void diagonalsquare ( int mat [ ] [ ] , int row , int  public static void diagonalsquare ( int mat [ ] [ ] , int row script_not_found : None
  cout << "Diagonal one : " ;				      	System . out . print ( "Diagonal one : " ) ;		      System . out . print ( "Diagonal one: " ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < row ;						      	i < row ;						      i < row ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < column ;					      	  j < column ;						    	j < column ;						  
    j ++ ) if ( i == j ) cout << mat [ i ] [ j ] * mat [ i ]  	  j ++ ) if ( i == j ) System . out . print ( mat [ i ] [ j 	j ++ ) if ( i == j ) System . out . print ( mat [ i ] [ j 
  }							      	}							      }								  
  cout << " \n\nDiagonal two : " ;			      	System . out . println ( ) ;				      System . out . print ( " \n\nDiagonal two : " ) ;		  
  for ( int i = 0 ;					      	System . out . print ( "Diagonal two : " ) ;		      for ( int i = 0 ;						  
  i < row ;						      	for ( int i = 0 ;					      i < row ;							  
  i ++ ) {						      	i < row ;						      i ++ ) {							  
    for ( int j = 0 ;					      	i ++ ) {						    	for ( int j = 0 ;					  
    j < column ;					      	  for ( int j = 0 ;					    	j < column ;						  
    j ++ ) if ( i + j == column - 1 ) cout << mat [ i ] [ j ] 	  j < column ;						    	j ++ ) if ( i + j == column - 1 ) System . out . print (  
  }							      	  j ++ ) if ( i + j == column - 1 ) System . out . print (    }								  
}							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2	      MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2	    MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2	  MINIMUM_NUMBER_OF_JUMPS_TO_REACH_END_OF_A_GIVEN_ARRAY_2
--							      --							    --								  --
int minJumps ( int arr [ ] , int n ) {			      static int minJumps ( int arr [ ] , int n ) {		    public static int minJumps ( int arr [ ] , int n ) {	  success : None
  int * jumps = new int [ n ] ;				      	int [ ] jumps = new int [ n ] ;				      int jumps [ ] = new int [ n ] ;				  
  int min ;						      	int min ;						      int min ;							  
  jumps [ n - 1 ] = 0 ;					      	jumps [ n - 1 ] = 0 ;					      jumps [ n - 1 ] = 0 ;					  
  for ( int i = n - 2 ;					      	for ( int i = n - 2 ;					      for ( int i = n - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( arr [ i ] == 0 ) jumps [ i ] = INT_MAX ;	      	  if ( arr [ i ] == 0 ) jumps [ i ] = Integer . MAX_VALUE ; 	if ( arr [ i ] == 0 ) {					  
    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ;      	  else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ;	    	  jumps [ i ] = Integer . MAX_VALUE ;			  
    else {						      	  else {						    	}							  
      min = INT_MAX ;					      	    min = Integer . MAX_VALUE ;				    	else if ( arr [ i ] >= n - i - 1 ) {			  
      for ( int j = i + 1 ;				      	    for ( int j = i + 1 ;				    	  jumps [ i ] = 1 ;					  
      j < n && j <= arr [ i ] + i ;			      	    j < n && j <= arr [ i ] + i ;			    	}							  
      j ++ ) {						      	    j ++ ) {						    	else {							  
	if ( min > jumps [ j ] ) min = jumps [ j ] ;	      	      if ( min > jumps [ j ] ) min = jumps [ j ] ;	    	  min = Integer . MAX_VALUE ;				  
      }							      	    }							    	  for ( int j = i + 1 ;					  
      if ( min != INT_MAX ) jumps [ i ] = min + 1 ;	      	    if ( min != Integer . MAX_VALUE ) jumps [ i ] = min + 1 	  j < n && j <= arr [ i ] + i ;				  
      else jumps [ i ] = min ;				      	    else jumps [ i ] = min ;				    	  j ++ ) {						  
    }							      	  }							    	    if ( min > jumps [ j ] ) {				  
  }							      	}							    	      min = jumps [ j ] ;				  
  return jumps [ 0 ] ;					      	return jumps [ 0 ] ;					    	    }							  
}							      }								    	  }							  
							      								    	  if ( min != Integer . MAX_VALUE ) {			  
							      								    	    jumps [ i ] = min + 1 ;				  
							      								    	  }							  
							      								    	  else {						  
							      								    	    jumps [ i ] = min ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return jumps [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COCKTAIL_SORT						      COCKTAIL_SORT						    COCKTAIL_SORT						  COCKTAIL_SORT
--							      --							    --								  --
void CocktailSort ( int a [ ] , int n ) {		      void cocktailSort ( int a [ ] ) {				    public static void cocktailSort ( int a [ ] , int n ) {	  script_not_found : None
  bool swapped = true ;					      	boolean swapped = true ;				      boolean swapped = true ;					  
  int start = 0 ;					      	int start = 0 ;						      int start = 0 ;						  
  int end = n - 1 ;					      	int end = a . length ;					      int end = n - 1 ;						  
  while ( swapped ) {					      	while ( swapped == true ) {				      while ( swapped ) {					  
    swapped = false ;					      	  swapped = false ;					    	swapped = false ;					  
    for ( int i = start ;				      	  for ( int i = start ;					    	for ( int i = start ;					  
    i < end ;						      	  i < end - 1 ;						    	i < end ;						  
    ++ i ) {						      	  ++ i ) {						    	++ i ) {						  
      if ( a [ i ] > a [ i + 1 ] ) {			      	    if ( a [ i ] > a [ i + 1 ] ) {			    	  if ( a [ i ] > a [ i + 1 ] ) {			  
	swap ( a [ i ] , a [ i + 1 ] ) ;		      	      int temp = a [ i ] ;				    	    swap ( a [ i ] , a [ i + 1 ] ) ;			  
	swapped = true ;				      	      a [ i ] = a [ i + 1 ] ;				    	    swapped = true ;					  
      }							      	      a [ i + 1 ] = temp ;				    	  }							  
    }							      	      swapped = true ;					    	}							  
    if ( ! swapped ) break ;				      	    }							    	if ( ! swapped ) break ;				  
    swapped = false ;					      	  }							    	swapped = false ;					  
    -- end ;						      	  if ( swapped == false ) break ;			    	-- end ;						  
    for ( int i = end - 1 ;				      	  swapped = false ;					    	for ( int i = end - 1 ;					  
    i >= start ;					      	  end = end - 1 ;					    	i >= start ;						  
    -- i ) {						      	  for ( int i = end - 1 ;				    	-- i ) {						  
      if ( a [ i ] > a [ i + 1 ] ) {			      	  i >= start ;						    	  if ( a [ i ] > a [ i + 1 ] ) {			  
	swap ( a [ i ] , a [ i + 1 ] ) ;		      	  i -- ) {						    	    swap ( a [ i ] , a [ i + 1 ] ) ;			  
	swapped = true ;				      	    if ( a [ i ] > a [ i + 1 ] ) {			    	    swapped = true ;					  
      }							      	      int temp = a [ i ] ;				    	  }							  
    }							      	      a [ i ] = a [ i + 1 ] ;				    	}							  
    ++ start ;						      	      a [ i + 1 ] = temp ;				    	++ start ;						  
  }							      	      swapped = true ;					      }								  
}							      	    }							    }								  
							      	  }							    								  
							      	  start = start + 1 ;					    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KNAPSACK_PROBLEM_1					      KNAPSACK_PROBLEM_1					    KNAPSACK_PROBLEM_1						  KNAPSACK_PROBLEM_1
--							      --							    --								  --
int knapSack ( int W , int wt [ ] , int val [ ] , int n ) {   static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int wt [ ] , int val [ ] script_not_found : None
  int i , w ;						      	int i , w ;						      int i , w ;						  
  int K [ n + 1 ] [ W + 1 ] ;				      	int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		      int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( w = 0 ;					      	  for ( w = 0 ;						    	for ( w = 0 ;						  
    w <= W ;						      	  w <= W ;						    	w <= W ;						  
    w ++ ) {						      	  w ++ ) {						    	w ++ ) {						  
      if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;	      	    if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;		    	  if ( i == 0 || w == 0 ) {				  
      else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val 	    else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val 	    K [ i ] [ w ] = 0 ;					  
      else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		      	    else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		    	  }							  
    }							      	  }							    	  else if ( wt [ i - 1 ] <= w ) {			  
  }							      	}							    	    K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i -  
  return K [ n ] [ W ] ;				      	return K [ n ] [ W ] ;					    	  }							  
}							      }								    	  else {						  
							      								    	    K [ i ] [ w ] = K [ i - 1 ] [ w ] ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return K [ n ] [ W ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C			      MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C			    MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C				  MAXIMUM_NUMBER_SEGMENTS_LENGTHS_B_C
--							      --							    --								  --
int maximumSegments ( int n , int a , int b , int c ) {	      static int maximumSegments ( int n , int a , int b , int c )  public static int maximumSegments ( int n , int a , int b , i success : None
  int dp [ n + 1 ] ;					      	int dp [ ] = new int [ n + 10 ] ;			      int [ ] dp = new int [ n + 1 ] ;				  
  memset ( dp , - 1 , sizeof ( dp ) ) ;			      	Arrays . fill ( dp , - 1 ) ;				      Arrays . fill ( dp , - 1 ) ;				  
  dp [ 0 ] = 0 ;					      	dp [ 0 ] = 0 ;						      dp [ 0 ] = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( dp [ i ] != - 1 ) {				      	  if ( dp [ i ] != - 1 ) {				    	if ( dp [ i ] != - 1 ) {				  
      if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1 , d 	    if ( i + a <= n ) dp [ i + a ] = Math . max ( dp [ i ]  	  if ( i + a <= n ) {					  
      if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1 , d 	    if ( i + b <= n ) dp [ i + b ] = Math . max ( dp [ i ]  	    dp [ i + a ] = Math . max ( dp [ i ] + 1 , dp [ i + a 
      if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1 , d 	    if ( i + c <= n ) dp [ i + c ] = Math . max ( dp [ i ]  	  }							  
    }							      	  }							    	  if ( i + b <= n ) {					  
  }							      	}							    	    dp [ i + b ] = Math . max ( dp [ i ] + 1 , dp [ i + b 
  return dp [ n ] ;					      	return dp [ n ] ;					    	  }							  
}							      }								    	  if ( i + c <= n ) {					  
							      								    	    dp [ i + c ] = Math . max ( dp [ i ] + 1 , dp [ i + c 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		      CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		    CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1		  CHECK_REVERSING_SUB_ARRAY_MAKE_ARRAY_SORTED_1
--							      --							    --								  --
bool checkReverse ( int arr [ ] , int n ) {		      static boolean checkReverse ( int arr [ ] , int n ) {	    public static boolean checkReverse ( int arr [ ] , int n ) {  error : Exception in thread "main" java.lang.Array
  if ( n == 1 ) return true ;				      	if ( n == 1 ) {						      if ( n == 1 ) return true ;				  IndexOutOfBoundsException: Index 5 out of bounds f
  int i ;						      	  return true ;						      int i ;							  or length 5 	at CHECK_REVERSING_SUB_ARRAY_MAKE_ARR
  for ( i = 1 ;						      	}							      for ( i = 1 ;						  AY_SORTED_1.f_filled(CHECK_REVERSING_SUB_ARRAY_MAK
  i < n && arr [ i - 1 ] < arr [ i ] ;			      	int i ;							      i < n && arr [ i - 1 ] < arr [ i ] ;			  E_ARRAY_SORTED_1.java:56) 	at CHECK_REVERSING_SUB_
  i ++ ) ;						      	for ( i = 1 ;						      i ++ ) ;							  ARRAY_MAKE_ARRAY_SORTED_1.main(CHECK_REVERSING_SUB
  if ( i == n ) return true ;				      	arr [ i - 1 ] < arr [ i ] && i < n ;			      if ( i == n ) return true ;				  _ARRAY_MAKE_ARRAY_SORTED_1.java:97)
  int j = i ;						      	i ++ ) ;						      int j = i ;						  
  while ( arr [ j ] < arr [ j - 1 ] ) {			      	if ( i == n ) {						      while ( arr [ j ] < arr [ j - 1 ] ) {			  
    if ( i > 1 && arr [ j ] < arr [ i - 2 ] ) return false ;  	  return true ;						    	if ( i > 1 && arr [ j ] < arr [ i - 2 ] ) return false ;  
    j ++ ;						      	}							    	j ++ ;							  
  }							      	int j = i ++ ;						      }								  
  if ( j == n ) return true ;				      	while ( arr [ j ] < arr [ j - 1 ] ) {			      if ( j == n ) return true ;				  
  int k = j ;						      	  if ( i > 1 && arr [ j ] < arr [ i - 2 ] ) {		      int k = j ;						  
  if ( arr [ k ] < arr [ i - 1 ] ) return false ;	      	    return false ;					      if ( arr [ k ] < arr [ i - 1 ] ) return false ;		  
  while ( k > 1 && k < n ) {				      	  }							      while ( k > 1 && k < n ) {				  
    if ( arr [ k ] < arr [ k - 1 ] ) return false ;	      	  j ++ ;						    	if ( arr [ k ] < arr [ k - 1 ] ) return false ;		  
    k ++ ;						      	}							    	k ++ ;							  
  }							      	if ( j == n ) {						      }								  
  return true ;						      	  return true ;						      return true ;						  
}							      	}							    }								  
							      	int k = j ;						    								  
							      	if ( arr [ k ] < arr [ i - 1 ] ) {			    								  
							      	  return false ;					    								  
							      	}							    								  
							      	while ( k > 1 && k < n ) {				    								  
							      	  if ( arr [ k ] < arr [ k - 1 ] ) {			    								  
							      	    return false ;					    								  
							      	  }							    								  
							      	  k ++ ;						    								  
							      	}							    								  
							      	return true ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			      CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			    CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7			  CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7
--							      --							    --								  --
int isdivisible7 ( char num [ ] ) {			      static boolean isDivisible7 ( String num ) {		    public static int isdivisible7 ( String num ) {		  error : CHECK_WHETHER_LARGE_NUMBER_DIVISIBLE_7.jav
  int n = strlen ( num ) , gSum ;			      	int n = num . length ( ) ;				      int n = num . length ( ) , gSum = 0 ;			  a:75: error: incomparable types: int and boolean
  if ( n == 0 && num [ 0 ] == '\n' ) return 1 ;		      	if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;      if ( n == 0 && num . charAt ( 0 ) == '\n' ) return 1 ;	  	 if(f_filled(param0.get(i)) == f_gold(param0
  if ( n % 3 == 1 ) {					      	if ( n % 3 == 1 ) num = "00" + num ;			      if ( n % 3 == 1 ) {					  .get(i)))				       ^ 1 e
    strcat ( num , "00" ) ;				      	if ( n % 3 == 2 ) num = "0" + num ;			    	num = "00" ;						  rror
    n += 2 ;						      	n = num . length ( ) ;					    	n += 2 ;						  
  }							      	int gSum = 0 , p = 1 ;					      }								  
  else if ( n % 3 == 2 ) {				      	for ( int i = n - 1 ;					      else if ( n % 3 == 2 ) {					  
    strcat ( num , "0" ) ;				      	i >= 0 ;						    	num = "0" ;						  
    n ++ ;						      	i -- ) {						    	n ++ ;							  
  }							      	  int group = 0 ;					      }								  
  int i , GSum = 0 , p = 1 ;				      	  group += num . charAt ( i -- ) - '0' ;		      int i , GSum = 0 , p = 1 ;				  
  for ( i = n - 1 ;					      	  group += ( num . charAt ( i -- ) - '0' ) * 10 ;	      for ( i = n - 1 ;						  
  i >= 0 ;						      	  group += ( num . charAt ( i ) - '0' ) * 100 ;		      i >= 0 ;							  
  i -- ) {						      	  gSum = gSum + group * p ;				      i -- ) {							  
    int group = 0 ;					      	  p = p * - 1 ;						    	int group = 0 ;						  
    group += num [ i -- ] - '0' ;			      	}							    	group += num . charAt ( i -- ) - '0' ;			  
    group += ( num [ i -- ] - '0' ) * 10 ;		      	return ( gSum % 7 == 0 ) ;				    	group += ( num . charAt ( i -- ) - '0' ) * 10 ;		  
    group += ( num [ i ] - '0' ) * 100 ;		      }								    	group += ( num . charAt ( i ) - '0' ) * 100 ;		  
    gSum = gSum + group * p ;				      								    	gSum = gSum + group * p ;				  
    p *= ( - 1 ) ;					      								    	p *= ( - 1 ) ;						  
  }							      								      }								  
  return ( gSum % 7 == 0 ) ;				      								      return ( gSum % 7 == 0 ) ? 1 : GSum ;			  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS LONGEST_SUBSEQUENCE_SUCH_THAT_DIFFERENCE_BETWEEN_ADJACENTS_IS
--							      --							    --								  --
int longestSubseqWithDiffOne ( int arr [ ] , int n ) {	      static int longestSubseqWithDiffOne ( int arr [ ] , int n ) { public static int longestSubseqWithDiffOne ( int arr [ ] , in success : None
  int dp [ n ] ;					      	int dp [ ] = new int [ n ] ;				      int dp [ ] = new int [ n ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) dp [ i ] = 1 ;					      	i ++ ) dp [ i ] = 1 ;					      i ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	dp [ i ] = 1 ;						  
  i < n ;						      	i < n ;							      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < n ;							  
    j < i ;						      	  j < i ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      if ( ( arr [ i ] == arr [ j ] + 1 ) || ( arr [ i ] == a 	    if ( ( arr [ i ] == arr [ j ] + 1 ) || ( arr [ i ] == a 	j < i ;							  
    }							      	  }							    	j ++ ) {						  
  }							      	}							    	  if ( ( arr [ i ] == arr [ j ] + 1 ) || ( arr [ i ] == a 
  int result = 1 ;					      	int result = 1 ;					    	    dp [ i ] = Math . max ( dp [ i ] , dp [ j ] + 1 ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	  }							  
  i < n ;						      	i < n ;							    	}							  
  i ++ ) if ( result < dp [ i ] ) result = dp [ i ] ;	      	i ++ ) if ( result < dp [ i ] ) result = dp [ i ] ;	      }								  
  return result ;					      	return result ;						      int result = 1 ;						  
}							      }								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) if ( result < dp [ i ] ) result = dp [ i ] ;	  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		      REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		    REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX		  REMOVE_MINIMUM_ELEMENTS_EITHER_SIDE_2MIN_MAX
--							      --							    --								  --
int minRemovalsDP ( int arr [ ] , int n ) {		      static int minRemovalsDP ( int arr [ ] , int n ) {	    public static int minRemovalsDP ( int arr [ ] , int n ) {	  success : None
  int longest_start = - 1 , longest_end = 0 ;		      	int longest_start = - 1 , longest_end = 0 ;		      int longest_start = - 1 , longest_end = 0 ;		  
  for ( int start = 0 ;					      	for ( int start = 0 ;					      for ( int start = 0 ;					  
  start < n ;						      	start < n ;						      start < n ;						  
  start ++ ) {						      	start ++ ) {						      start ++ ) {						  
    int min = INT_MAX , max = INT_MIN ;			      	  int min = Integer . MAX_VALUE , max = Integer . MIN_VALUE 	int min = Integer . MAX_VALUE , max = Integer . MIN_VALUE 
    for ( int end = start ;				      	  for ( int end = start ;				    	for ( int end = start ;					  
    end < n ;						      	  end < n ;						    	end < n ;						  
    end ++ ) {						      	  end ++ ) {						    	end ++ ) {						  
      int val = arr [ end ] ;				      	    int val = arr [ end ] ;				    	  int val = arr [ end ] ;				  
      if ( val < min ) min = val ;			      	    if ( val < min ) {					    	  if ( val < min ) {					  
      if ( val > max ) max = val ;			      	      min = val ;					    	    min = val ;						  
      if ( 2 * min <= max ) break ;			      	    }							    	  }							  
      if ( end - start > longest_end - longest_start || longe 	    if ( val > max ) {					    	  if ( val > max ) {					  
	longest_start = start ;				      	      max = val ;					    	    max = val ;						  
	longest_end = end ;				      	    }							    	  }							  
      }							      	    if ( 2 * min <= max ) {				    	  if ( 2 * min <= max ) {				  
    }							      	      break ;						    	    break ;						  
  }							      	    }							    	  }							  
  if ( longest_start == - 1 ) return n ;		      	    if ( end - start > longest_end - longest_start || longe 	  if ( end - start > longest_end - longest_start || longe 
  return ( n - ( longest_end - longest_start + 1 ) ) ;	      	      longest_start = start ;				    	    longest_start = start ;				  
}							      	      longest_end = end ;				    	    longest_end = end ;					  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	}							      }								  
							      	if ( longest_start == - 1 ) {				      if ( longest_start == - 1 ) {				  
							      	  return n ;						    	return n ;						  
							      	}							      }								  
							      	return ( n - ( longest_end - longest_start + 1 ) ) ;	      return ( n - ( longest_end - longest_start + 1 ) ) ;	  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING  MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING  MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING  MINIMAL_MOVES_FORM_STRING_ADDING_CHARACTERS_APPENDING_STRING
--							      --							    --								  --
int minimalSteps ( string s , int n ) {			      static int minimalSteps ( String s , int n ) {		    public static int minimalSteps ( String s , int n ) {	  script_not_found : None
  int dp [ n ] ;					      	int [ ] dp = new int [ n ] ;				      int [ ] dp = new int [ n ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) dp [ i ] = INT_MAX ;				      	i ++ ) dp [ i ] = Integer . MAX_VALUE ;			      i ++ ) {							  
  string s1 = "" , s2 = "" ;				      	String s1 = "" , s2 = "" ;				    	dp [ i ] = Integer . MAX_VALUE ;			  
  dp [ 0 ] = 1 ;					      	dp [ 0 ] = 1 ;						      }								  
  s1 += s [ 0 ] ;					      	s1 += s . charAt ( 0 ) ;				      String s1 = "" , s2 = "" ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      dp [ 0 ] = 1 ;						  
  i < n ;						      	i < n ;							      s1 += s . charAt ( 0 ) ;					  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    s1 += s [ i ] ;					      	  s1 += s . charAt ( i ) ;				      i < n ;							  
    s2 = s . substr ( i + 1 , i + 1 ) ;			      	  s2 = s . substring ( i + 1 , i + 1 ) ;		      i ++ ) {							  
    dp [ i ] = min ( dp [ i ] , dp [ i - 1 ] + 1 ) ;	      	  dp [ i ] = Math . min ( dp [ i ] , dp [ i - 1 ] + 1 ) ;   	s1 += s . charAt ( i ) ;				  
    if ( s1 == s2 ) dp [ i * 2 + 1 ] = min ( dp [ i ] + 1 , d 	  if ( s1 == s2 ) dp [ i * 2 + 1 ] = Math . min ( dp [ i ]  	s2 = s . substring ( i + 1 , i + 1 ) ;			  
  }							      	}							    	dp [ i ] = Math . min ( dp [ i ] , dp [ i - 1 ] + 1 ) ;	  
  return dp [ n - 1 ] ;					      	return dp [ n - 1 ] ;					    	if ( s1 . equals ( s2 ) ) {				  
}							      }								    	  dp [ i * 2 + 1 ] = Math . min ( dp [ i ] + 1 , dp [ i * 
							      								    	}							  
							      								      }								  
							      								      return dp [ n - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMMON_CHARACTERS_N_STRINGS				      COMMON_CHARACTERS_N_STRINGS				    COMMON_CHARACTERS_N_STRINGS					  COMMON_CHARACTERS_N_STRINGS
--							      --							    --								  --
void commonCharacters ( string str [ ] , int n ) {	      public static void commonCharacters ( String str [ ] , int n  public static void commonCharacters ( String str [ ] , int n  script_not_found : None
  bool prim [ MAX_CHAR ] ;				      	Boolean [ ] prim = new Boolean [ MAX_CHAR ] ;		      boolean prim [ ] = new boolean [ str . length ] ;		  
  memset ( prim , true , sizeof ( prim ) ) ;		      	Arrays . fill ( prim , new Boolean ( true ) ) ;		      Arrays . fill ( prim , true ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    bool sec [ MAX_CHAR ] = {				      	  Boolean [ ] sec = new Boolean [ MAX_CHAR ] ;		    	boolean sec [ ] = new boolean [ str . length ] ;	  
      false }						      	  Arrays . fill ( sec , new Boolean ( false ) ) ;	    	for ( int j = 0 ;					  
      ;							      	  for ( int j = 0 ;					    	j < str . length ;					  
      for ( int j = 0 ;					      	  j < str [ i ] . length ( ) ;				    	j ++ ) {						  
      str [ i ] [ j ] ;					      	  j ++ ) {						    	  if ( prim [ str . charAt ( i ) - 'a' ] ) {		  
      j ++ ) {						      	    if ( prim [ str [ i ] . charAt ( j ) - 'a' ] ) sec [ st 	    sec [ str . charAt ( i ) - 'a' ] = true ;		  
	if ( prim [ str [ i ] [ j ] - 'a' ] ) sec [ str [ i ] 	  }							    	  }							  
      }							      	  System . arraycopy ( sec , 0 , prim , 0 , MAX_CHAR ) ;    	}							  
      memcpy ( prim , sec , MAX_CHAR ) ;		      	}							    	System . arraycopy ( sec , 0 , prim , 0 , sec . length )  
    }							      	for ( int i = 0 ;					      }								  
    for ( int i = 0 ;					      	i < 26 ;						      for ( int i = 0 ;						  
    i < 26 ;						      	i ++ ) if ( prim [ i ] ) {				      i < 26 ;							  
    i ++ ) if ( prim [ i ] ) printf ( "%c " , i + 'a' ) ;     	  System . out . print ( Character . toChars ( i + 97 ) ) ;   i ++ ) if ( prim [ i ] ) System . out . print ( i + 'a' ) ; 
  }							      	  System . out . print ( " " ) ;			    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEIBNIZ_HARMONIC_TRIANGLE				      LEIBNIZ_HARMONIC_TRIANGLE					    LEIBNIZ_HARMONIC_TRIANGLE					  LEIBNIZ_HARMONIC_TRIANGLE
--							      --							    --								  --
void LeibnizHarmonicTriangle ( int n ) {		      static void LeibnizHarmonicTriangle ( int n ) {		    public static void LeibnizHarmonicTriangle ( int n ) {	  script_not_found : None
  int C [ n + 1 ] [ n + 1 ] ;				      	int C [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] C = new int [ n + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= min ( i , n ) ;				      	  j <= Math . min ( i , n ) ;				    	j <= Math . min ( i , n ) ;				  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;	      	    if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;		    	  if ( j == 0 || j == i ) {				  
      else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    else C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1  	    C [ i ] [ j ] = 1 ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	    C [ i ] [ j ] = C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] [ 
  i <= n ;						      	i <= n ;						    	  }							  
  i ++ ) {						      	i ++ ) {						    	}							  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					      }								  
    j <= i ;						      	  j <= i ;						      for ( int i = 1 ;						  
    j ++ ) cout << "1/" << i * C [ i - 1 ] [ j - 1 ] << " " ; 	  j ++ ) System . out . print ( "1/" + i * C [ i - 1 ] [ j    i <= n ;							  
    cout << endl ;					      	  System . out . println ( ) ;				      i ++ ) {							  
  }							      	}							    	for ( int j = 1 ;					  
}							      }								    	j <= i ;						  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( "1/" + i * C [ i - 1 ] [ j - 1 ] 
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_LARGE_NUMBER_999			      CHECK_DIVISIBILITY_LARGE_NUMBER_999			    CHECK_DIVISIBILITY_LARGE_NUMBER_999				  CHECK_DIVISIBILITY_LARGE_NUMBER_999
--							      --							    --								  --
bool isDivisible999 ( string num ) {			      static boolean isDivisible999 ( String num ) {		    public static boolean isDivisible999 ( String num ) {	  error : CHECK_DIVISIBILITY_LARGE_NUMBER_999.java:6
  int n = num . length ( ) ;				      	int n = num . length ( ) ;				      int n = num . length ( ) ;				  1: error: incompatible types: boolean cannot be co
  if ( n == 0 && num [ 0 ] == '0' ) return true ;	      	if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;      if ( n == 0 && num . charAt ( 0 ) == '0' ) {		  nverted to int     gSum = f_filled ( num ) ;
  if ( n % 3 == 1 ) num = "00" + num ;			      	if ( n % 3 == 1 ) num = "00" + num ;			    	return true ;						  		 ^ 1 error
  if ( n % 3 == 2 ) num = "0" + num ;			      	if ( n % 3 == 2 ) num = "0" + num ;			      }								  
  int gSum = 0 ;					      	int gSum = 0 ;						      if ( n % 3 == 1 ) {					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	num = "00" + num ;					  
  i < n ;						      	i < n ;							      }								  
  i ++ ) {						      	i ++ ) {						      if ( n % 3 == 2 ) {					  
    int group = 0 ;					      	  int group = 0 ;					    	num = "0" + num ;					  
    group += ( num [ i ++ ] - '0' ) * 100 ;		      	  group += ( num . charAt ( i ++ ) - '0' ) * 100 ;	      }								  
    group += ( num [ i ++ ] - '0' ) * 10 ;		      	  group += ( num . charAt ( i ++ ) - '0' ) * 10 ;	      int gSum = 0 ;						  
    group += num [ i ] - '0' ;				      	  group += num . charAt ( i ) - '0' ;			      for ( int i = 0 ;						  
    gSum += group ;					      	  gSum += group ;					      i < n ;							  
  }							      	}							      i ++ ) {							  
  if ( gSum > 1000 ) {					      	if ( gSum > 1000 ) {					    	int group = 0 ;						  
    num = to_string ( gSum ) ;				      	  num = Integer . toString ( gSum ) ;			    	group += ( num . charAt ( i ++ ) - '0' ) * 100 ;	  
    n = num . length ( ) ;				      	  n = num . length ( ) ;				    	group += ( num . charAt ( i ++ ) - '0' ) * 10 ;		  
    gSum = isDivisible999 ( num ) ;			      	  gSum = isDivisible999 ( num ) ? 1 : 0 ;		    	group += num . charAt ( i ) - '0' ;			  
  }							      	}							    	gSum += group ;						  
  return ( gSum == 999 ) ;				      	return ( gSum == 999 ) ;				      }								  
}							      }								      if ( gSum > 1000 ) {					  
							      								    	num = Integer . toString ( gSum ) ;			  
							      								    	n = num . length ( ) ;					  
							      								    	gSum = isDivisible999 ( num ) ;				  
							      								      }								  
							      								      return ( gSum == 999 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_COMMON_SUPERSEQUENCE_1				      SHORTEST_COMMON_SUPERSEQUENCE_1				    SHORTEST_COMMON_SUPERSEQUENCE_1				  SHORTEST_COMMON_SUPERSEQUENCE_1
--							      --							    --								  --
int superSeq ( char * X , char * Y , int m , int n ) {	      static int superSeq ( String X , String Y , int m , int n ) { public static int superSeq ( char [ ] X , char [ ] Y , int m  script_not_found : None
  int dp [ m + 1 ] [ n + 1 ] ;				      	int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= n ;						      	  j <= n ;						    	j <= n ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( ! i ) dp [ i ] [ j ] = j ;			      	    if ( i == 0 ) dp [ i ] [ j ] = j ;			    	  if ( ! i . equals ( X [ i ] ) ) {			  
      else if ( ! j ) dp [ i ] [ j ] = i ;		      	    else if ( j == 0 ) dp [ i ] [ j ] = i ;		    	    dp [ i ] [ j ] = j ;				  
      else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 	    else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 )  	  }							  
      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp 	    else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 	  else if ( ! j . equals ( Y [ j ] ) ) {		  
    }							      	  }							    	    dp [ i ] [ j ] = i ;				  
  }							      	}							    	  }							  
  return dp [ m ] [ n ] ;				      	return dp [ m ] [ n ] ;					    	  else if ( X [ i - 1 ] == Y [ j - 1 ] ) {		  
}							      }								    	    dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;	  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ]  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		      COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		    COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE		  COORDINATES_RECTANGLE_GIVEN_POINTS_LIE_INSIDE
--							      --							    --								  --
void printRect ( int X [ ] , int Y [ ] , int n ) {	      static void printRect ( Integer X [ ] , Integer Y [ ] , int n public static void printRect ( int [ ] X , int [ ] Y , int n  script_not_found : None
  int Xmax = * max_element ( X , X + n ) ;		      	int Xmax = Collections . max ( Arrays . asList ( X ) ) ;      int Xmax = X . length ;					  
  int Xmin = * min_element ( X , X + n ) ;		      	int Xmin = Collections . min ( Arrays . asList ( X ) ) ;      int Xmin = X [ X . length - n - 1 ] ;			  
  int Ymax = * max_element ( Y , Y + n ) ;		      	int Ymax = Collections . max ( Arrays . asList ( Y ) ) ;      int Ymax = Y . length ;					  
  int Ymin = * min_element ( Y , Y + n ) ;		      	int Ymin = Collections . min ( Arrays . asList ( Y ) ) ;      int Ymin = Y [ Y . length - n - 1 ] ;			  
  cout << "{" << Xmin << ", " << Ymin << "}" << endl ;	      	System . out . println ( "{" + Xmin + ", " + Ymin + "}" ) ;   System . out . println ( "{" + Xmin + ", " + Ymin + "}" ) ; 
  cout << "{" << Xmin << ", " << Ymax << "}" << endl ;	      	System . out . println ( "{" + Xmin + ", " + Ymax + "}" ) ;   System . out . println ( "{" + Xmin + ", " + Ymax + "}" ) ; 
  cout << "{" << Xmax << ", " << Ymax << "}" << endl ;	      	System . out . println ( "{" + Xmax + ", " + Ymax + "}" ) ;   System . out . println ( "{" + Xmax + ", " + Ymax + "}" ) ; 
  cout << "{" << Xmax << ", " << Ymin << "}" << endl ;	      	System . out . println ( "{" + Xmax + ", " + Ymin + "}" ) ;   System . out . println ( "{" + Xmax + ", " + Ymin + "}" ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE			      LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE			    LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE			  LONGEST_INCREASING_ODD_EVEN_SUBSEQUENCE
--							      --							    --								  --
int longOddEvenIncSeq ( int arr [ ] , int n ) {		      public static int longOddEvenIncSeq ( int arr [ ] , int n ) { public static int longOddEvenIncSeq ( int arr [ ] , int n ) { success : None
  int lioes [ n ] ;					      	int [ ] lioes = new int [ n ] ;				      int lioes [ ] = new int [ n ] ;				  
  int maxLen = 0 ;					      	int maxLen = 0 ;					      int maxLen = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) lioes [ i ] = 1 ;				      	i ++ ) lioes [ i ] = 1 ;				      i ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	lioes [ i ] = 1 ;					  
  i < n ;						      	i < n ;							      }								  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      for ( int i = 1 ;						  
  j < i ;						      	j < i ;							      i < n ;							  
  j ++ ) if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j  	j ++ ) if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j    i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	for ( int j = 0 ;					  
  i < n ;						      	i < n ;							    	j < i ;							  
  i ++ ) if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ] ;   	i ++ ) if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ] ;   	j ++ ) {						  
  return maxLen ;					      	return maxLen ;						    	  if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j ] ) 
}							      }								    	    lioes [ i ] = lioes [ j ] + 1 ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ] ;	  
							      								      return maxLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		      FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		    FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE		  FIND_A_ROTATION_WITH_MAXIMUM_HAMMING_DISTANCE
--							      --							    --								  --
int maxHamming ( int arr [ ] , int n ) {		      static int maxHamming ( int arr [ ] , int n ) {		    public static int maxHamming ( int arr [ ] , int n ) {	  success : None
  int brr [ 2 * n + 1 ] ;				      	int brr [ ] = new int [ 2 * n + 1 ] ;			      int brr [ ] = new int [ 2 * n + 1 ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) brr [ i ] = arr [ i ] ;			      	i ++ ) brr [ i ] = arr [ i ] ;				      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	brr [ i ] = arr [ i ] ;					  
  i < n ;						      	i < n ;							      }								  
  i ++ ) brr [ n + i ] = arr [ i ] ;			      	i ++ ) brr [ n + i ] = arr [ i ] ;			      for ( int i = 0 ;						  
  int maxHam = 0 ;					      	int maxHam = 0 ;					      i < n ;							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      i ++ ) {							  
  i < n ;						      	i < n ;							    	brr [ n + i ] = arr [ i ] ;				  
  i ++ ) {						      	i ++ ) {						      }								  
    int currHam = 0 ;					      	  int currHam = 0 ;					      int maxHam = 0 ;						  
    for ( int j = i , k = 0 ;				      	  for ( int j = i , k = 0 ;				      for ( int i = 1 ;						  
    j < ( i + n ) ;					      	  j < ( i + n ) ;					      i < n ;							  
    j ++ , k ++ ) if ( brr [ j ] != arr [ k ] ) currHam ++ ;  	  j ++ , k ++ ) if ( brr [ j ] != arr [ k ] ) currHam ++ ;    i ++ ) {							  
    if ( currHam == n ) return n ;			      	  if ( currHam == n ) return n ;			    	int currHam = 0 ;					  
    maxHam = max ( maxHam , currHam ) ;			      	  maxHam = Math . max ( maxHam , currHam ) ;		    	for ( int j = i , k = 0 ;				  
  }							      	}							    	j < ( i + n ) ;						  
  return maxHam ;					      	return maxHam ;						    	j ++ , k ++ ) if ( brr [ j ] != arr [ k ] ) currHam ++ ;  
}							      }								    	if ( currHam == n ) return n ;				  
							      								    	maxHam = Math . max ( maxHam , currHam ) ;		  
							      								      }								  
							      								      return maxHam ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_K_MODULUS_ARRAY_ELEMENT				      FINDING_K_MODULUS_ARRAY_ELEMENT				    FINDING_K_MODULUS_ARRAY_ELEMENT				  FINDING_K_MODULUS_ARRAY_ELEMENT
--							      --							    --								  --
void printEqualModNumbers ( int arr [ ] , int n ) {	      static void printEqualModNumbers ( int arr [ ] , int n ) {    public static void printEqualModNumbers ( int arr [ ] , int n script_not_found : None
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  int d = arr [ n - 1 ] - arr [ 0 ] ;			      	int d = arr [ n - 1 ] - arr [ 0 ] ;			      int d = arr [ n - 1 ] - arr [ 0 ] ;			  
  vector < int > v ;					      	Vector < Integer > v = new Vector < > ( ) ;		      ArrayList < Integer > list = new ArrayList < > ( ) ;	  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i * i <= d ;						      	i * i <= d ;						      i * i <= d ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( d % i == 0 ) {					      	  if ( d % i == 0 ) {					    	if ( d % i == 0 ) {					  
      v . push_back ( i ) ;				      	    v . add ( i ) ;					    	  list . add ( i ) ;					  
      if ( i != d / i ) v . push_back ( d / i ) ;	      	    if ( i != d / i ) v . add ( d / i ) ;		    	  if ( i != d / i ) {					  
    }							      	  }							    	    list . add ( d / i ) ;				  
  }							      	}							    	  }							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	}							  
  i < v . size ( ) ;					      	i < v . size ( ) ;					      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    int temp = arr [ 0 ] % v [ i ] ;			      	  int temp = arr [ 0 ] % v . get ( i ) ;		      i < list . size ( ) ;					  
    int j ;						      	  int j ;						      i ++ ) {							  
    for ( j = 1 ;					      	  for ( j = 1 ;						    	int temp = arr [ 0 ] % list . get ( i ) ;		  
    j < n ;						      	  j < n ;						    	int j ;							  
    j ++ ) if ( arr [ j ] % v [ i ] != temp ) break ;	      	  j ++ ) if ( arr [ j ] % v . get ( i ) != temp ) break ;   	for ( j = 1 ;						  
    if ( j == n ) cout << v [ i ] << " " ;		      	  if ( j == n ) System . out . print ( v . get ( i ) + " "  	j < n ;							  
  }							      	}							    	j ++ ) if ( arr [ j ] % list . get ( i ) != temp ) break  
}							      }								    	if ( j == n ) System . out . print ( list . get ( i ) + " 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		      LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		    LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S		  LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S
--							      --							    --								  --
int findSubArray ( int arr [ ] , int n ) {		      int findSubArray ( int arr [ ] , int n ) {		    public static int findSubArray ( int arr [ ] , int n ) {	  error : LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_A
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  ND_1S.java:49: error: not a statement	      ( arr
  int maxsize = - 1 , startindex ;			      	int maxsize = - 1 , startindex = 0 ;			      int maxsize = - 1 , startindex = 0 ;			  [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 ) ;
  for ( int i = 0 ;					      	int endindex = 0 ;					      for ( int i = 0 ;						  			^ 1 error
  i < n - 1 ;						      	for ( int i = 0 ;					      i < n - 1 ;						  
  i ++ ) {						      	i < n - 1 ;						      i ++ ) {							  
    sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;		      	i ++ ) {						    	sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;			  
    for ( int j = i + 1 ;				      	  sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;			    	for ( int j = i + 1 ;					  
    j < n ;						      	  for ( int j = i + 1 ;					    	j < n ;							  
    j ++ ) {						      	  j < n ;						    	j ++ ) {						  
      ( arr [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 ) ;    	  j ++ ) {						    	  ( arr [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 ) ;	  
      if ( sum == 0 && maxsize < j - i + 1 ) {		      	    if ( arr [ j ] == 0 ) sum += - 1 ;			    	  if ( sum == 0 && maxsize < j - i + 1 ) {		  
	maxsize = j - i + 1 ;				      	    else sum += 1 ;					    	    maxsize = j - i + 1 ;				  
	startindex = i ;				      	    if ( sum == 0 && maxsize < j - i + 1 ) {		    	    startindex = i ;					  
      }							      	      maxsize = j - i + 1 ;				    	  }							  
    }							      	      startindex = i ;					    	}							  
  }							      	    }							      }								  
  if ( maxsize == - 1 ) cout << "No such subarray" ;	      	  }							      if ( maxsize == - 1 ) {					  
  else cout << startindex << " to " << startindex + maxsize - 	}							    	System . out . println ( "No such subarray" ) ;		  
  return maxsize ;					      	endindex = startindex + maxsize - 1 ;			      }								  
}							      	if ( maxsize == - 1 ) System . out . println ( "No such sub   else {							  
							      	else System . out . println ( startindex + " to " + endinde 	System . out . println ( startindex + " to " + startindex 
							      	return maxsize ;					      }								  
							      }								      return maxsize ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		      CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		    CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME		  CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME
--							      --							    --								  --
string constructPalin ( string str , int len ) {	      static String constructPalin ( char [ ] str , int len ) {	    public static String constructPalin ( String str , int len )  error : CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALIN
  int i = 0 , j = len - 1 ;				      	int i = 0 , j = len - 1 ;				      int i = 0 , j = len - 1 ;					  DROME.java:46: error: cannot find symbol	 str
  for ( ;						      	for ( ;							      for ( ;							   . setCharAt ( i , 'a' ) ;	       ^   symbol:
  i < j ;						      	i < j ;							      i < j ;							   method setCharAt(int,char)	location: variable s
  i ++ , j -- ) {					      	i ++ , j -- ) {						      i ++ , j -- ) {						  tr of type String CONSTRUCT_LEXICOGRAPHICALLY_SMAL
    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continu 	  if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continu 	if ( str . charAt ( i ) == str . charAt ( j ) && str . ch LEST_PALINDROME.java:47: error: cannot find symbol
    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {  	  else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {  	else if ( str . charAt ( i ) == str . charAt ( j ) && str 	 str . setCharAt ( j , 'a' ) ;		 ^
      str [ i ] = 'a' ;					      	    str [ i ] = 'a' ;					    	  str . setCharAt ( i , 'a' ) ;				   symbol:   method setCharAt(int,char)	  location:
      str [ j ] = 'a' ;					      	    str [ j ] = 'a' ;					    	  str . setCharAt ( j , 'a' ) ;				  variable str of type String CONSTRUCT_LEXICOGRAPHI
      continue ;					      	    continue ;						    	  continue ;						  CALLY_SMALLEST_PALINDROME.java:51: error: cannot f
    }							      	  }							    	}							  ind symbol	   str . setCharAt ( i , str . charA
    else if ( str [ i ] == '*' ) {			      	  else if ( str [ i ] == '*' ) {			    	else if ( str . charAt ( i ) == '*' ) {			  t ( j ) ) ;		^   symbol:   method setChar
      str [ i ] = str [ j ] ;				      	    str [ i ] = str [ j ] ;				    	  str . setCharAt ( i , str . charAt ( j ) ) ;		  At(int,char)	 location: variable str of type Stri
      continue ;					      	    continue ;						    	  continue ;						  ng CONSTRUCT_LEXICOGRAPHICALLY_SMALLEST_PALINDROME
    }							      	  }							    	}							  .java:55: error: cannot find symbol	    str . se
    else if ( str [ j ] == '*' ) {			      	  else if ( str [ j ] == '*' ) {			    	else if ( str . charAt ( j ) == '*' ) {			  tCharAt ( j , str . charAt ( i ) ) ;		 ^
      str [ j ] = str [ i ] ;				      	    str [ j ] = str [ i ] ;				    	  str . setCharAt ( j , str . charAt ( i ) ) ;		   symbol:   method setCharAt(int,char)	  location:
      continue ;					      	    continue ;						    	  continue ;						  variable str of type String CONSTRUCT_LEXICOGRAPHI
    }							      	  }							    	}							  CALLY_SMALLEST_PALINDROME.java:91: error: incompat
    cout << "Not Possible" ;				      	  System . out . println ( "Not Possible" ) ;		    	System . out . println ( "Not Possible" ) ;		  ible types: char[] cannot be converted to String
    return "" ;						      	  return "" ;						    	return "" ;						  	 if(f_filled(param0.get(i),param1.get(i)).eq
  }							      	}							      }								  uals(f_gold(param0.get(i),param1.get(i))))
  return str ;						      	return String . valueOf ( str ) ;			      return str ;						  			 ^ Note: Some messages have
}							      }								    }								  been simplified; recompile with -Xdiags:verbose to
							      								    								   get full output 5 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		      CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		    CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1		  CONVERT_SUBSTRINGS_LENGTH_K_BASE_B_DECIMAL_1
--							      --							    --								  --
int substringConversions ( string str , int k , int b ) {     static void substringConversions ( String str , int k , int b public static int substringConversions ( String str , int k , script_not_found : None
  int i = 0 , sum = 0 , counter = k - 1 ;		      	int i = 0 , sum = 0 , counter = k - 1 ;			      int i = 0 , sum = 0 , counter = k - 1 ;			  
  for ( i ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum = sum + ( ( str . at ( i ) - '0' ) * pow ( b , counte 	  sum = ( int ) ( sum + ( ( str . charAt ( i ) - '0' ) * Ma 	sum = sum + ( ( str . charAt ( i ) - '0' ) * Math . pow ( 
    counter -- ;					      	  counter -- ;						    	counter -- ;						  
  }							      	}							      }								  
  cout << sum << " " ;					      	System . out . print ( sum + " " ) ;			      System . out . print ( sum + " " ) ;			  
  int prev = sum ;					      	int prev = sum ;					      int prev = sum ;						  
  sum = 0 , counter = 0 ;				      	sum = 0 ;						      sum = 0 , counter = 0 ;					  
  for ( i ;						      	counter = 0 ;						      for ( i = 0 ;						  
  i < str . size ( ) ;					      	for ( ;							      i < str . length ( ) ;					  
  i ++ ) {						      	i < str . length ( ) ;					      i ++ ) {							  
    sum = prev - ( ( str . at ( i - k ) - '0' ) * pow ( b , k 	i ++ ) {						    	sum = prev - ( ( str . charAt ( i - k ) - '0' ) * Math .  
    sum = sum * b ;					      	  sum = ( int ) ( prev - ( ( str . charAt ( i - k ) - '0' ) 	sum = sum * b ;						  
    sum = sum + ( str . at ( i ) - '0' ) ;		      	  sum = sum * b ;					    	sum = sum + ( str . charAt ( i ) - '0' ) ;		  
    cout << sum << " " ;				      	  sum = sum + ( str . charAt ( i ) - '0' ) ;		    	System . out . print ( sum + " " ) ;			  
    prev = sum ;					      	  System . out . print ( sum + " " ) ;			    	prev = sum ;						  
    counter ++ ;					      	  prev = sum ;						    	counter ++ ;						  
  }							      	  counter ++ ;						      }								  
}							      	}							      return sum ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S DELETE_ARRAY_ELEMENTS_WHICH_ARE_SMALLER_THAN_NEXT_OR_BECOME_S
--							      --							    --								  --
void deleteElements ( int arr [ ] , int n , int k ) {	      static void deleteElements ( int arr [ ] , int n , int k ) {  public static void deleteElements ( int arr [ ] , int n , int script_not_found : None
  stack < int > s ;					      	Stack < Integer > s = new Stack < > ( ) ;		      Stack < Integer > s = new Stack < > ( ) ;			  
  s . push ( arr [ 0 ] ) ;				      	s . push ( arr [ 0 ] ) ;				      s . push ( arr [ 0 ] ) ;					  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( ! s . empty ( ) && s . top ( ) < arr [ i ] && cou 	  while ( ! s . empty ( ) && s . peek ( ) < arr [ i ] && co 	while ( ! s . isEmpty ( ) && s . peek ( ) < arr [ i ] &&  
      s . pop ( ) ;					      	    s . pop ( ) ;					    	  s . pop ( ) ;						  
      count ++ ;					      	    count ++ ;						    	  count ++ ;						  
    }							      	  }							    	}							  
    s . push ( arr [ i ] ) ;				      	  s . push ( arr [ i ] ) ;				    	s . push ( arr [ i ] ) ;				  
  }							      	}							      }								  
  int m = s . size ( ) ;				      	int m = s . size ( ) ;					      int m = s . size ( ) ;					  
  vector < int > v ( m ) ;				      	Integer [ ] v = new Integer [ m ] ;			      int [ ] array = new int [ m ] ;				  
  while ( ! s . empty ( ) ) {				      	while ( ! s . empty ( ) ) {				      while ( ! s . isEmpty ( ) ) {				  
    v [ -- m ] = s . top ( ) ;				      	  v [ -- m ] = s . peek ( ) ;				    	array [ -- m ] = s . pop ( ) ;				  
    s . pop ( ) ;					      	  s . pop ( ) ;						    	s . pop ( ) ;						  
  }							      	}							      }								  
  for ( auto x : v ) cout << x << " " ;			      	for ( Integer x : v ) {					      for ( int x : array ) {					  
  cout << endl ;					      	  System . out . print ( x + " " ) ;			    	System . out . print ( x + " " ) ;			  
}							      	}							      }								  
							      	;							      System . out . println ( ) ;				  
							      	System . out . println ( "" ) ;				    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	      CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	    CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS	  CENTER_ELEMENT_OF_MATRIX_EQUALS_SUMS_OF_HALF_DIAGONALS
--							      --							    --								  --
bool HalfDiagonalSums ( int mat [ ] [ MAX ] , int n ) {	      static boolean HalfDiagonalSums ( int mat [ ] [ ] , int n ) { public static boolean HalfDiagonalSums ( int mat [ ] [ ] , in success : None
  int diag1_left = 0 , diag1_right = 0 ;		      	int diag1_left = 0 , diag1_right = 0 ;			      int diag1_left = 0 , diag1_right = 0 ;			  
  int diag2_left = 0 , diag2_right = 0 ;		      	int diag2_left = 0 , diag2_right = 0 ;			      int diag2_left = 0 , diag2_right = 0 ;			  
  for ( int i = 0 , j = n - 1 ;				      	for ( int i = 0 , j = n - 1 ;				      for ( int i = 0 , j = n - 1 ;				  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ , j -- ) {					      	i ++ , j -- ) {						      i ++ , j -- ) {						  
    if ( i < n / 2 ) {					      	  if ( i < n / 2 ) {					    	if ( i < n / 2 ) {					  
      diag1_left += mat [ i ] [ i ] ;			      	    diag1_left += mat [ i ] [ i ] ;			    	  diag1_left += mat [ i ] [ i ] ;			  
      diag2_left += mat [ j ] [ i ] ;			      	    diag2_left += mat [ j ] [ i ] ;			    	  diag2_left += mat [ j ] [ i ] ;			  
    }							      	  }							    	}							  
    else if ( i > n / 2 ) {				      	  else if ( i > n / 2 ) {				    	else if ( i > n / 2 ) {					  
      diag1_right += mat [ i ] [ i ] ;			      	    diag1_right += mat [ i ] [ i ] ;			    	  diag1_right += mat [ i ] [ i ] ;			  
      diag2_right += mat [ j ] [ i ] ;			      	    diag2_right += mat [ j ] [ i ] ;			    	  diag2_right += mat [ j ] [ i ] ;			  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return ( diag1_left == diag2_right && diag2_right == diag2_ 	return ( diag1_left == diag2_right && diag2_right == diag2_   return ( diag1_left == diag2_right && diag2_right == diag2_ 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MAXIMUM_SHORTEST_DISTANCE				      PRINT_MAXIMUM_SHORTEST_DISTANCE				    PRINT_MAXIMUM_SHORTEST_DISTANCE				  PRINT_MAXIMUM_SHORTEST_DISTANCE
--							      --							    --								  --
int find_maximum ( int a [ ] , int n , int k ) {	      static int find_maximum ( int a [ ] , int n , int k ) {	    public static int findMaximum ( int a [ ] , int n , int k ) { success : None
  unordered_map < int , int > b ;			      	HashMap < Integer , Integer > b = new HashMap < Integer , I   HashMap < Integer , Integer > b = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int x = a [ i ] ;					      	  int x = a [ i ] ;					    	int x = a [ i ] ;					  
    int d = min ( 1 + i , n - i ) ;			      	  int d = Math . min ( 1 + i , n - i ) ;		    	int d = Math . min ( 1 + i , n - i ) ;			  
    if ( b . find ( x ) == b . end ( ) ) b [ x ] = d ;	      	  if ( ! b . containsKey ( x ) ) b . put ( x , d ) ;	    	if ( b . get ( x ) == null ) {				  
    else b [ x ] = min ( d , b [ x ] ) ;		      	  else {						    	  b . put ( x , d ) ;					  
  }							      	    b . put ( x , Math . min ( d , b . get ( x ) ) ) ;	    	}							  
  int ans = INT_MAX ;					      	  }							    	else {							  
  for ( int i = 0 ;					      	}							    	  b . put ( x , Math . min ( d , b . get ( x ) ) ) ;	  
  i < n ;						      	int ans = Integer . MAX_VALUE ;				    	}							  
  i ++ ) {						      	for ( int i = 0 ;					      }								  
    int x = a [ i ] ;					      	i < n ;							      int ans = Integer . MAX_VALUE ;				  
    if ( x != k - x && b . find ( k - x ) != b . end ( ) ) an 	i ++ ) {						      for ( int i = 0 ;						  
  }							      	  int x = a [ i ] ;					      i < n ;							  
  return ans ;						      	  if ( x != k - x && b . containsKey ( k - x ) ) ans = Math   i ++ ) {							  
}							      	}							    	int x = a [ i ] ;					  
							      	return ans ;						    	if ( x != k - x && b . containsKey ( k - x ) ) {	  
							      }								    	  ans = Math . min ( Math . max ( b . get ( x ) , b . get 
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A PRINT_ARRAY_STRINGS_SORTED_ORDER_WITHOUT_COPYING_ONE_STRING_A
--							      --							    --								  --
void printInSortedOrder ( string arr [ ] , int n ) {	      static void printInSortedOrder ( String arr [ ] , int n ) {   public static void printInSortedOrder ( String [ ] arr , int  script_not_found : None
  int index [ n ] ;					      	int index [ ] = new int [ n ] ;				      int [ ] index = new int [ n ] ;				  
  int i , j , min ;					      	int i , j , min ;					      int i , j , min ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) index [ i ] = i ;				      	i ++ ) {						      i ++ ) {							  
  for ( i = 0 ;						      	  index [ i ] = i ;					    	index [ i ] = i ;					  
  i < n - 1 ;						      	}							      }								  
  i ++ ) {						      	for ( i = 0 ;						      for ( i = 0 ;						  
    min = i ;						      	i < n - 1 ;						      i < n - 1 ;						  
    for ( j = i + 1 ;					      	i ++ ) {						      i ++ ) {							  
    j < n ;						      	  min = i ;						    	min = i ;						  
    j ++ ) {						      	  for ( j = i + 1 ;					    	for ( j = i + 1 ;					  
      if ( arr [ index [ min ] ] . compare ( arr [ index [ j  	  j < n ;						    	j < n ;							  
    }							      	  j ++ ) {						    	j ++ ) {						  
    if ( min != i ) {					      	    if ( arr [ index [ min ] ] . compareTo ( arr [ index [  	  if ( arr [ index [ min ] ] . compareTo ( arr [ index [  
      int temp = index [ min ] ;			      	      min = j ;						    	    min = j ;						  
      index [ min ] = index [ i ] ;			      	    }							    	  }							  
      index [ i ] = temp ;				      	  }							    	}							  
    }							      	  if ( min != i ) {					    	if ( min != i ) {					  
  }							      	    int temp = index [ min ] ;				    	  int temp = index [ min ] ;				  
  for ( i = 0 ;						      	    index [ min ] = index [ i ] ;			    	  index [ min ] = index [ i ] ;				  
  i < n ;						      	    index [ i ] = temp ;				    	  index [ i ] = temp ;					  
  i ++ ) cout << arr [ index [ i ] ] << " " ;		      	  }							    	}							  
}							      	}							      }								  
							      	for ( i = 0 ;						      for ( i = 0 ;						  
							      	i < n ;							      i < n ;							  
							      	i ++ ) {						      i ++ ) {							  
							      	  System . out . print ( arr [ index [ i ] ] + " " ) ;	    	System . out . print ( arr [ index [ i ] ] + " " ) ;	  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1	      DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1		    DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1		  DYNAMIC_PROGRAMMING_SET_10_0_1_KNAPSACK_PROBLEM_1
--							      --							    --								  --
int knapSack ( int W , int wt [ ] , int val [ ] , int n ) {   static int knapSack ( int W , int wt [ ] , int val [ ] , int  public static int knapSack ( int W , int wt [ ] , int val [ ] script_not_found : None
  int i , w ;						      	int i , w ;						      int i , w ;						  
  int K [ n + 1 ] [ W + 1 ] ;				      	int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		      int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( w = 0 ;					      	  for ( w = 0 ;						    	for ( w = 0 ;						  
    w <= W ;						      	  w <= W ;						    	w <= W ;						  
    w ++ ) {						      	  w ++ ) {						    	w ++ ) {						  
      if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;	      	    if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;		    	  if ( i == 0 || w == 0 ) {				  
      else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val 	    else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val 	    K [ i ] [ w ] = 0 ;					  
      else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		      	    else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		    	  }							  
    }							      	  }							    	  else if ( wt [ i - 1 ] <= w ) {			  
  }							      	}							    	    K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i -  
  return K [ n ] [ W ] ;				      	return K [ n ] [ W ] ;					    	  }							  
}							      }								    	  else {						  
							      								    	    K [ i ] [ w ] = K [ i - 1 ] [ w ] ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return K [ n ] [ W ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN
--							      --							    --								  --
int findMaximum ( int arr [ ] , int low , int high ) {	      static int findMaximum ( int arr [ ] , int low , int high ) { public static int findMaximum ( int arr [ ] , int low , int h script_not_found : None
  if ( low == high ) return arr [ low ] ;		      	if ( low == high ) return arr [ low ] ;			      if ( low == high ) return arr [ low ] ;			  
  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) r 	if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) r   if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) r 
  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) re 	if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) re   if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) re 
  int mid = ( low + high ) / 2 ;			      	int mid = ( low + high ) / 2 ;				      int mid = ( low + high ) / 2 ;				  
  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ m 	if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ m   if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ m 
  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ m 	if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ m   if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ m 
  else return findMaximum ( arr , mid + 1 , high ) ;	      	else return findMaximum ( arr , mid + 1 , high ) ;	      else return findMaximum ( arr , mid + 1 , high ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		      FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2		    FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2			  FIND_TRIPLETS_ARRAY_WHOSE_SUM_EQUAL_ZERO_2
--							      --							    --								  --
void findTriplets ( int arr [ ] , int n ) {		      static void findTriplets ( int arr [ ] , int n ) {	    public static void findTriplets ( int arr [ ] , int n ) {	  script_not_found : None
  bool found = false ;					      	boolean found = false ;					      boolean found = false ;					  
  sort ( arr , arr + n ) ;				      	Arrays . sort ( arr ) ;					      Arrays . sort ( arr ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int l = i + 1 ;					      	  int l = i + 1 ;					    	int l = i + 1 ;						  
    int r = n - 1 ;					      	  int r = n - 1 ;					    	int r = n - 1 ;						  
    int x = arr [ i ] ;					      	  int x = arr [ i ] ;					    	int x = arr [ i ] ;					  
    while ( l < r ) {					      	  while ( l < r ) {					    	while ( l < r ) {					  
      if ( x + arr [ l ] + arr [ r ] == 0 ) {		      	    if ( x + arr [ l ] + arr [ r ] == 0 ) {		    	  if ( x + arr [ l ] + arr [ r ] == 0 ) {		  
	printf ( "%d %d %d\n" , x , arr [ l ] , arr [ r ] ) ; 	      System . out . print ( x + " " ) ;		    	    System . out . println ( x + " " + arr [ l ] + " " +  
	l ++ ;						      	      System . out . print ( arr [ l ] + " " ) ;	    	    l ++ ;						  
	r -- ;						      	      System . out . println ( arr [ r ] + " " ) ;	    	    r -- ;						  
	found = true ;					      	      l ++ ;						    	    found = true ;					  
      }							      	      r -- ;						    	  }							  
      else if ( x + arr [ l ] + arr [ r ] < 0 ) l ++ ;	      	      found = true ;					    	  else if ( x + arr [ l ] + arr [ r ] < 0 ) {		  
      else r -- ;					      	    }							    	    l ++ ;						  
    }							      	    else if ( x + arr [ l ] + arr [ r ] < 0 ) l ++ ;	    	  }							  
  }							      	    else r -- ;						    	  else {						  
  if ( found == false ) cout << " No Triplet Found" << endl ; 	  }							    	    r -- ;						  
}							      	}							    	  }							  
							      	if ( found == false ) System . out . println ( " No Triplet 	}							  
							      }								      }								  
							      								      if ( found == false ) {					  
							      								    	System . out . println ( "No Triplet Found" ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE    MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE    MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE	  MAXIMUM_SUBSEQUENCE_SUM_SUCH_THAT_NO_THREE_ARE_CONSECUTIVE
--							      --							    --								  --
int maxSumWO3Consec ( int arr [ ] , int n ) {		      static int maxSumWO3Consec ( int arr [ ] , int n ) {	    public static int maxSumWO3Consec ( int arr [ ] , int n ) {	  success : None
  int sum [ n ] ;					      	int sum [ ] = new int [ n ] ;				      int sum [ ] = new int [ n ] ;				  
  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ;			      	if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ;			      if ( n >= 1 ) {						  
  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;	      	if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;	    	sum [ 0 ] = arr [ 0 ] ;					  
  if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ]  	if ( n > 2 ) sum [ 2 ] = Math . max ( sum [ 1 ] , Math . ma   }								  
  for ( int i = 3 ;					      	for ( int i = 3 ;					      if ( n >= 2 ) {						  
  i < n ;						      	i < n ;							    	sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;			  
  i ++ ) sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2  	i ++ ) sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ]    }								  
  return sum [ n - 1 ] ;				      	return sum [ n - 1 ] ;					      if ( n > 2 ) {						  
}							      }								    	sum [ 2 ] = Math . max ( sum [ 1 ] , Math . max ( arr [ 1 
							      								      }								  
							      								      for ( int i = 3 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ] , sum 
							      								      }								  
							      								      return sum [ n - 1 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2	      LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2	    LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2		  LONGEST_SUBSEQUENCE_DIFFERENCE_ADJACENTS_ONE_SET_2
--							      --							    --								  --
int longLenSub ( int arr [ ] , int n ) {		      static int longLenSub ( int [ ] arr , int n ) {		    public static int longLenSub ( int arr [ ] , int n ) {	  success : None
  unordered_map < int , int > um ;			      	HashMap < Integer , Integer > um = new HashMap < Integer ,    HashMap < Integer , Integer > um = new HashMap < > ( ) ;	  
  int longLen = 0 ;					      	int longLen = 0 ;					      int longLen = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int len = 0 ;					      	  int len = 0 ;						    	int len = 0 ;						  
    if ( um . find ( arr [ i ] - 1 ) != um . end ( ) && len < 	  if ( um . containsKey ( arr [ i ] - 1 ) && len < um . get 	if ( um . containsKey ( arr [ i ] - 1 ) && len < um . get 
    if ( um . find ( arr [ i ] + 1 ) != um . end ( ) && len < 	  if ( um . containsKey ( arr [ i ] + 1 ) && len < um . get 	  len = um . get ( arr [ i ] - 1 ) ;			  
    um [ arr [ i ] ] = len + 1 ;			      	  um . put ( arr [ i ] , len + 1 ) ;			    	}							  
    if ( longLen < um [ arr [ i ] ] ) longLen = um [ arr [ i  	  if ( longLen < um . get ( arr [ i ] ) ) longLen = um . ge 	if ( um . containsKey ( arr [ i ] + 1 ) && len < um . get 
  }							      	}							    	  len = um . get ( arr [ i ] + 1 ) ;			  
  return longLen ;					      	return longLen ;					    	}							  
}							      }								    	um . put ( arr [ i ] , len + 1 ) ;			  
							      								    	if ( longLen < um . get ( arr [ i ] ) ) {		  
							      								    	  longLen = um . get ( arr [ i ] ) ;			  
							      								    	}							  
							      								      }								  
							      								      return longLen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			      PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			    PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN			  PRINT_SHORTEST_PATH_PRINT_STRING_SCREEN
--							      --							    --								  --
void printPath ( string str ) {				      static void printPath ( String str ) {			    public static void printPath ( String str ) {		  script_not_found : None
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  int curX = 0 , curY = 0 ;				      	int curX = 0 , curY = 0 ;				      int curX = 0 , curY = 0 ;					  
  while ( i < str . length ( ) ) {			      	while ( i < str . length ( ) ) {			      while ( i < str . length ( ) ) {				  
    int nextX = ( str [ i ] - 'A' ) / 5 ;		      	  int nextX = ( str . charAt ( i ) - 'A' ) / 5 ;	    	int nextX = ( str . charAt ( i ) - 'A' ) / 5 ;		  
    int nextY = ( str [ i ] - 'B' + 1 ) % 5 ;		      	  int nextY = ( str . charAt ( i ) - 'B' + 1 ) % 5 ;	    	int nextY = ( str . charAt ( i ) - 'B' + 1 ) % 5 ;	  
    while ( curX > nextX ) {				      	  while ( curX > nextX ) {				    	while ( curX > nextX ) {				  
      cout << "Move Up" << endl ;			      	    System . out . println ( "Move Up" ) ;		    	  System . out . println ( "Move Up" ) ;		  
      curX -- ;						      	    curX -- ;						    	  curX -- ;						  
    }							      	  }							    	}							  
    while ( curY > nextY ) {				      	  while ( curY > nextY ) {				    	while ( curY > nextY ) {				  
      cout << "Move Left" << endl ;			      	    System . out . println ( "Move Left" ) ;		    	  System . out . println ( "Move Left" ) ;		  
      curY -- ;						      	    curY -- ;						    	  curY -- ;						  
    }							      	  }							    	}							  
    while ( curX < nextX ) {				      	  while ( curX < nextX ) {				    	while ( curX < nextX ) {				  
      cout << "Move Down" << endl ;			      	    System . out . println ( "Move Down" ) ;		    	  System . out . println ( "Move Down" ) ;		  
      curX ++ ;						      	    curX ++ ;						    	  curX ++ ;						  
    }							      	  }							    	}							  
    while ( curY < nextY ) {				      	  while ( curY < nextY ) {				    	while ( curY < nextY ) {				  
      cout << "Move Right" << endl ;			      	    System . out . println ( "Move Right" ) ;		    	  System . out . println ( "Move Right" ) ;		  
      curY ++ ;						      	    curY ++ ;						    	  curY ++ ;						  
    }							      	  }							    	}							  
    cout << "Press OK" << endl ;			      	  System . out . println ( "Press OK" ) ;		    	System . out . println ( "Press OK" ) ;			  
    i ++ ;						      	  i ++ ;						    	i ++ ;							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	      DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	    DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B	  DISCRETE_LOGARITHM_FIND_INTEGER_K_AK_CONGRUENT_MODULO_B
--							      --							    --								  --
int discreteLogarithm ( int a , int b , int m ) {	      static int discreteLogarithm ( int a , int b , int m ) {	    public static int discreteLogarithm ( int a , int b , int m ) script_not_found : None
  int n = ( int ) sqrt ( m ) + 1 ;			      	int n = ( int ) ( Math . sqrt ( m ) + 1 ) ;		      int n = ( int ) Math . sqrt ( m ) + 1 ;			  
  int an = 1 ;						      	int an = 1 ;						      int an = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  ++ i ) an = ( an * a ) % m ;				      	++ i ) an = ( an * a ) % m ;				      ++ i ) {							  
  unordered_map < int , int > value ;			      	int [ ] value = new int [ m ] ;				    	an = ( an * a ) % m ;					  
  for ( int i = 1 , cur = an ;				      	for ( int i = 1 , cur = an ;				      }								  
  i <= n ;						      	i <= n ;						      HashMap < Integer , Integer > value = new HashMap < > ( ) ; 
  ++ i ) {						      	++ i ) {						      for ( int i = 1 , cur = an ;				  
    if ( ! value [ cur ] ) value [ cur ] = i ;		      	  if ( value [ cur ] == 0 ) value [ cur ] = i ;		      i <= n ;							  
    cur = ( cur * an ) % m ;				      	  cur = ( cur * an ) % m ;				      ++ i ) {							  
  }							      	}							    	if ( value . get ( cur ) == null ) {			  
  for ( int i = 0 , cur = b ;				      	for ( int i = 0 , cur = b ;				    	  value . put ( cur , i ) ;				  
  i <= n ;						      	i <= n ;						    	}							  
  ++ i ) {						      	++ i ) {						    	cur = ( cur * an ) % m ;				  
    if ( value [ cur ] ) {				      	  if ( value [ cur ] > 0 ) {				      }								  
      int ans = value [ cur ] * n - i ;			      	    int ans = value [ cur ] * n - i ;			      for ( int i = 0 , cur = b ;				  
      if ( ans < m ) return ans ;			      	    if ( ans < m ) return ans ;				      i <= n ;							  
    }							      	  }							      ++ i ) {							  
    cur = ( cur * a ) % m ;				      	  cur = ( cur * a ) % m ;				    	if ( value . get ( cur ) != null ) {			  
  }							      	}							    	  int ans = value . get ( cur ) * n - i ;		  
  return - 1 ;						      	return - 1 ;						    	  if ( ans < m ) {					  
}							      }								    	    return ans ;					  
							      								    	  }							  
							      								    	}							  
							      								    	cur = ( cur * a ) % m ;					  
							      								      }								  
							      								      return - 1 ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD    FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD    FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD	  FIND_FOUR_ELEMENTS_A_B_C_AND_D_IN_AN_ARRAY_SUCH_THAT_AB_CD
--							      --							    --								  --
bool findPairs ( int arr [ ] , int n ) {		      boolean findPairs ( int arr [ ] ) {			    public static boolean findPairs ( int arr [ ] , int n ) {	  script_not_found : None
  map < int , pair < int , int >> Hash ;		      	HashMap < Integer , pair > map = new HashMap < Integer , pa   Map < Integer , Pair < Integer , Integer >> Hash = new Hash 
  for ( int i = 0 ;					      	int n = arr . length ;					      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  ++ i ) {						      	i < n ;							      ++ i ) {							  
    for ( int j = i + 1 ;				      	++ i ) {						    	for ( int j = i + 1 ;					  
    j < n ;						      	  for ( int j = i + 1 ;					    	j < n ;							  
    ++ j ) {						      	  j < n ;						    	++ j ) {						  
      int sum = arr [ i ] + arr [ j ] ;			      	  ++ j ) {						    	  int sum = arr [ i ] + arr [ j ] ;			  
      if ( Hash . find ( sum ) == Hash . end ( ) ) Hash [ sum 	    int sum = arr [ i ] + arr [ j ] ;			    	  if ( Hash . get ( sum ) == null ) {			  
      else {						      	    if ( ! map . containsKey ( sum ) ) map . put ( sum , ne 	    Hash . put ( sum , new Pair < > ( i , j ) ) ;	  
	pair < int , int > pp = Hash [ sum ] ;		      	    else {						    	  }							  
	cout << "(" << arr [ pp . first ] << ", " << arr [ pp 	      pair p = map . get ( sum ) ;			    	  else {						  
	return true ;					      	      System . out . println ( "(" + arr [ p . first ] + ", 	    Pair < Integer , Integer > pp = Hash . get ( sum ) ;  
      }							      	      return true ;					    	    System . out . println ( "(" + arr [ pp . first ] + " 
    }							      	    }							    	    return true ;					  
  }							      	  }							    	  }							  
  cout << "No pairs found" ;				      	}							    	}							  
  return false ;					      	return false ;						      }								  
}							      }								      System . out . println ( "No pairs found" ) ;		  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		      THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		    THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS		  THIRD_LARGEST_ELEMENT_ARRAY_DISTINCT_ELEMENTS
--							      --							    --								  --
void thirdLargest ( int arr [ ] , int arr_size ) {	      static void thirdLargest ( int arr [ ] , int arr_size ) {	    public static void thirdLargest ( int arr [ ] , int arr_size  script_not_found : None
  if ( arr_size < 3 ) {					      	if ( arr_size < 3 ) {					      if ( arr_size < 3 ) {					  
    printf ( " Invalid Input " ) ;			      	  System . out . printf ( " Invalid Input " ) ;		    	System . out . println ( " Invalid Input " ) ;		  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  int first = arr [ 0 ] ;				      	int first = arr [ 0 ] ;					      int first = arr [ 0 ] ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < arr_size ;					      	i < arr_size ;						      i < arr_size ;						  
  i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;	      	i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;	      i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;	  
  int second = INT_MIN ;				      	int second = Integer . MIN_VALUE ;			      int second = Integer . MIN_VALUE ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < arr_size ;					      	i < arr_size ;						      i < arr_size ;						  
  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) secon 	i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) secon   i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) secon 
  int third = INT_MIN ;					      	int third = Integer . MIN_VALUE ;			      int third = Integer . MIN_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < arr_size ;					      	i < arr_size ;						      i < arr_size ;						  
  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third 	i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third   i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third 
  printf ( "The third Largest element is %d\n" , third ) ;    	System . out . printf ( "The third Largest " + "element is    System . out . println ( "The third Largest element is " +  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBSET_SUM_PROBLEM_OSUM_SPACE				      SUBSET_SUM_PROBLEM_OSUM_SPACE				    SUBSET_SUM_PROBLEM_OSUM_SPACE				  SUBSET_SUM_PROBLEM_OSUM_SPACE
--							      --							    --								  --
bool isSubsetSum ( int arr [ ] , int n , int sum ) {	      static boolean isSubsetSum ( int arr [ ] , int n , int sum )  public static boolean isSubsetSum ( int arr [ ] , int n , int script_not_found : None
  bool subset [ 2 ] [ sum + 1 ] ;			      	boolean subset [ ] [ ] = new boolean [ 2 ] [ sum + 1 ] ;      boolean subset [ ] [ ] = new boolean [ 2 ] [ sum + 1 ] ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= sum ;						      	  j <= sum ;						    	j <= sum ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( j == 0 ) subset [ i % 2 ] [ j ] = true ;	      	    if ( j == 0 ) subset [ i % 2 ] [ j ] = true ;	    	  if ( j == 0 ) {					  
      else if ( i == 0 ) subset [ i % 2 ] [ j ] = false ;     	    else if ( i == 0 ) subset [ i % 2 ] [ j ] = false ;	    	    subset [ i % 2 ] [ j ] = true ;			  
      else if ( arr [ i - 1 ] <= j ) subset [ i % 2 ] [ j ] = 	    else if ( arr [ i - 1 ] <= j ) subset [ i % 2 ] [ j ] = 	  }							  
      else subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ]  	    else subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ]  	  else if ( i == 0 ) {					  
    }							      	  }							    	    subset [ i % 2 ] [ j ] = false ;			  
  }							      	}							    	  }							  
  return subset [ n % 2 ] [ sum ] ;			      	return subset [ n % 2 ] [ sum ] ;			    	  else if ( arr [ i - 1 ] <= j ) {			  
}							      }								    	    subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j 
							      								    	  }							  
							      								    	  else {						  
							      								    	    subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return subset [ n % 2 ] [ sum ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K		      COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K		    COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K			  COUNT_NUMBER_INCREASING_SUBSEQUENCES_SIZE_K
--							      --							    --								  --
int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int k ) {   static int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int  public static int numOfIncSubseqOfSizeK ( int arr [ ] , int n script_not_found : None
  int dp [ k ] [ n ] , sum = 0 ;			      	int dp [ ] [ ] = new int [ k ] [ n ] , sum = 0 ;	      int dp [ ] [ ] = new int [ k ] [ n ] , sum = 0 ;		  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	for ( int i = 0 ;					      Arrays . fill ( dp , 0 ) ;				  
  for ( int i = 0 ;					      	i < n ;							      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) {						      i < n ;							  
  i ++ ) dp [ 0 ] [ i ] = 1 ;				      	  dp [ 0 ] [ i ] = 1 ;					      i ++ ) {							  
  for ( int l = 1 ;					      	}							    	dp [ 0 ] [ i ] = 1 ;					  
  l < k ;						      	for ( int l = 1 ;					      }								  
  l ++ ) {						      	l < k ;							      for ( int l = 1 ;						  
    for ( int i = l ;					      	l ++ ) {						      l < k ;							  
    i < n ;						      	  for ( int i = l ;					      l ++ ) {							  
    i ++ ) {						      	  i < n ;						    	for ( int i = l ;					  
      dp [ l ] [ i ] = 0 ;				      	  i ++ ) {						    	i < n ;							  
      for ( int j = l - 1 ;				      	    dp [ l ] [ i ] = 0 ;				    	i ++ ) {						  
      j < i ;						      	    for ( int j = l - 1 ;				    	  dp [ l ] [ i ] = 0 ;					  
      j ++ ) {						      	    j < i ;						    	  for ( int j = l - 1 ;					  
	if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l 	    j ++ ) {						    	  j < i ;						  
      }							      	      if ( arr [ j ] < arr [ i ] ) {			    	  j ++ ) {						  
    }							      		dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;		    	    if ( arr [ j ] < arr [ i ] ) {			  
  }							      	      }							    	      dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;		  
  for ( int i = k - 1 ;					      	    }							    	    }							  
  i < n ;						      	  }							    	  }							  
  i ++ ) sum += dp [ k - 1 ] [ i ] ;			      	}							    	}							  
  return sum ;						      	for ( int i = k - 1 ;					      }								  
}							      	i < n ;							      for ( int i = k - 1 ;					  
							      	i ++ ) {						      i < n ;							  
							      	  sum += dp [ k - 1 ] [ i ] ;				      i ++ ) {							  
							      	}							    	sum += dp [ k - 1 ] [ i ] ;				  
							      	return sum ;						      }								  
							      }								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	      MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	    MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K	  MINIMUM_COST_MAKE_LONGEST_COMMON_SUBSEQUENCE_LENGTH_K
--							      --							    --								  --
int solve ( char X [ ] , char Y [ ] , int l , int r , int k , static int solve ( char X [ ] , char Y [ ] , int l , int r ,  public static int solve ( char X [ ] , char Y [ ] , int l , i script_not_found : None
  if ( ! k ) return 0 ;					      	if ( k == 0 ) {						      if ( k == 0 ) return 0 ;					  
  if ( l < 0 | r < 0 ) return 1e9 ;			      	  return 0 ;						      if ( l < 0 | r < 0 ) return 1e9 ;				  
  if ( dp [ l ] [ r ] [ k ] != - 1 ) return dp [ l ] [ r ] [  	}							      if ( dp [ l ] [ r ] [ k ] != - 1 ) return dp [ l ] [ r ] [  
  int cost = ( X [ l ] - 'a' ) ^ ( Y [ r ] - 'a' ) ;	      	if ( l < 0 | r < 0 ) {					      int cost = ( X [ l ] - 'a' ) ^ ( Y [ r ] - 'a' ) ;	  
  return dp [ l ] [ r ] [ k ] = min ( {			      	  return ( int ) 1e9 ;					      return dp [ l ] [ r ] [ k ] = Math . min ( new int [ ] {	  
    cost + solve ( X , Y , l - 1 , r - 1 , k - 1 , dp ) , sol 	}							    	cost + solve ( X , Y , l - 1 , r - 1 , k - 1 , dp ) , sol 
    ) ;							      	if ( dp [ l ] [ r ] [ k ] != - 1 ) {			    	) ;							  
  }							      	  return dp [ l ] [ r ] [ k ] ;				      }								  
							      	}							    								  
							      	int cost = ( X [ l ] - 'a' ) ^ ( Y [ r ] - 'a' ) ;	    								  
							      	return dp [ l ] [ r ] [ k ] = Math . min ( Math . min ( cos 								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU FIND_SMALLEST_NUMBER_WITH_GIVEN_NUMBER_OF_DIGITS_AND_DIGIT_SU
--							      --							    --								  --
void findSmallest ( int m , int s ) {			      static void findSmallest ( int m , int s ) {		    public static void findSmallest ( int m , int s ) {		  script_not_found : None
  if ( s == 0 ) {					      	if ( s == 0 ) {						      if ( s == 0 ) {						  
    ( m == 1 ) ? cout << "Smallest number is " << 0 : cout << 	  System . out . print ( m == 1 ? "Smallest number is 0" :  	( m == 1 ) ? System . out . println ( "Smallest number is 
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( s > 9 * m ) {					      	if ( s > 9 * m ) {					      if ( s > 9 * m ) {					  
    cout << "Not possible" ;				      	  System . out . println ( "Not possible" ) ;		    	System . out . println ( "Not possible" ) ;		  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  int res [ m ] ;					      	int [ ] res = new int [ m ] ;				      int [ ] res = new int [ m ] ;				  
  s -= 1 ;						      	s -= 1 ;						      s -= 1 ;							  
  for ( int i = m - 1 ;					      	for ( int i = m - 1 ;					      for ( int i = m - 1 ;					  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( s > 9 ) {					      	  if ( s > 9 ) {					    	if ( s > 9 ) {						  
      res [ i ] = 9 ;					      	    res [ i ] = 9 ;					    	  res [ i ] = 9 ;					  
      s -= 9 ;						      	    s -= 9 ;						    	  s -= 9 ;						  
    }							      	  }							    	}							  
    else {						      	  else {						    	else {							  
      res [ i ] = s ;					      	    res [ i ] = s ;					    	  res [ i ] = s ;					  
      s = 0 ;						      	    s = 0 ;						    	  s = 0 ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  res [ 0 ] = s + 1 ;					      	res [ 0 ] = s + 1 ;					      res [ 0 ] = s + 1 ;					  
  cout << "Smallest number is " ;			      	System . out . print ( "Smallest number is " ) ;	      System . out . print ( "Smallest number is " ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) cout << res [ i ] ;				      	i ++ ) System . out . print ( res [ i ] ) ;		      i ++ ) {							  
}							      }								    	System . out . println ( res [ i ] ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1		      LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1		    LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1		  LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS_1
--							      --							    --								  --
int lcsOf3 ( int i , int j , int k ) {			      static int lcsOf3 ( int i , int j , int k ) {		    public static int lcsOf3 ( int i , int j , int k ) {	  script_not_found : None
  if ( i == - 1 || j == - 1 || k == - 1 ) return 0 ;	      	if ( i == - 1 || j == - 1 || k == - 1 ) {		      if ( i == - 1 || j == - 1 || k == - 1 ) return 0 ;	  
  if ( dp [ i ] [ j ] [ k ] != - 1 ) return dp [ i ] [ j ] [  	  return 0 ;						      if ( dp [ i ] [ j ] [ k ] != - 1 ) return dp [ i ] [ j ] [  
  if ( X [ i ] == Y [ j ] && Y [ j ] == Z [ k ] ) return dp [ 	}							      if ( X [ i ] == Y [ j ] && Y [ j ] == Z [ k ] ) return dp [ 
  else return dp [ i ] [ j ] [ k ] = max ( max ( lcsOf3 ( i - 	if ( dp [ i ] [ j ] [ k ] != - 1 ) {			      else return dp [ i ] [ j ] [ k ] = Math . max ( Math . max  
}							      	  return dp [ i ] [ j ] [ k ] ;				    }								  
							      	}							    								  
							      	if ( X . charAt ( i ) == Y . charAt ( j ) && Y . charAt ( j 								  
							      	  return dp [ i ] [ j ] [ k ] = 1 + lcsOf3 ( i - 1 , j - 1  								  
							      	}							    								  
							      	else {							    								  
							      	  return dp [ i ] [ j ] [ k ] = Math . max ( Math . max ( l 								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED		      LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED		    LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED			  LENGTH_LONGEST_SUB_STRING_CAN_MAKE_REMOVED
--							      --							    --								  --
int longestNull ( string str ) {			      static int longestNull ( String str ) {			    public static int longestNull ( String str ) {		  script_not_found : None
  vector < pair < char , int >> arr ;			      	ArrayList < Pair > arr = new ArrayList < > ( ) ;	      ArrayList < Pair < Character , Integer >> arr = new ArrayLi 
  arr . push_back ( {					      	arr . add ( new Pair ( '@' , - 1 ) ) ;			      arr . add ( new Pair < Character , Integer > ( '@' , - 1 )  
    '@' , - 1 }						      	int maxlen = 0 ;					      int maxlen = 0 ;						  
    ) ;							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    int maxlen = 0 ;					      	i < str . length ( ) ;					      i < str . length ( ) ;					  
    for ( int i = 0 ;					      	++ i ) {						      ++ i ) {							  
    i < str . length ( ) ;				      	  arr . add ( new Pair ( str . charAt ( i ) , i ) ) ;	    	arr . add ( new Pair < Character , Integer > ( str . char 
    ++ i ) {						      	  while ( arr . size ( ) >= 3 && arr . get ( arr . size ( ) 	while ( arr . size ( ) >= 3 && arr . get ( arr . size ( ) 
      arr . push_back ( {				      	    arr . remove ( arr . size ( ) - 3 ) ;		    	  arr . remove ( arr . size ( ) - 2 ) ;			  
	str [ i ] , i }					      	    arr . remove ( arr . size ( ) - 2 ) ;		    	  arr . remove ( arr . size ( ) - 1 ) ;			  
	) ;						      	    arr . remove ( arr . size ( ) - 1 ) ;		    	  arr . remove ( arr . size ( ) - 1 ) ;			  
	while ( arr . size ( ) >= 3 && arr [ arr . size ( ) - 	  }							    	}							  
	  arr . pop_back ( ) ;				      	  int tmp = arr . get ( arr . size ( ) - 1 ) . second ;	    	int tmp = arr . get ( arr . size ( ) - 1 ) . second ;	  
	  arr . pop_back ( ) ;				      	  maxlen = Math . max ( maxlen , i - tmp ) ;		    	maxlen = Math . max ( maxlen , i - tmp ) ;		  
	  arr . pop_back ( ) ;				      	}							      }								  
	}						      	return maxlen ;						      return maxlen ;						  
	int tmp = arr . back ( ) . second ;		      }								    }								  
	maxlen = max ( maxlen , i - tmp ) ;		      								    								  
      }							      								    								  
      return maxlen ;					      								    								  
    }							      								    								  
    -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1		      DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1			    DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1			  DYNAMIC_PROGRAMMING_SUBSET_SUM_PROBLEM_1
--							      --							    --								  --
bool isSubsetSum ( int set [ ] , int n , int sum ) {	      static boolean isSubsetSum ( int set [ ] , int n , int sum )  public static boolean isSubsetSum ( int set [ ] , int n , int script_not_found : None
  bool subset [ n + 1 ] [ sum + 1 ] ;			      	boolean subset [ ] [ ] = new boolean [ sum + 1 ] [ n + 1 ]    boolean subset [ ] [ ] = new boolean [ n + 1 ] [ sum + 1 ]  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) subset [ i ] [ 0 ] = true ;			      	i ++ ) subset [ 0 ] [ i ] = true ;			      i ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	subset [ i ] [ 0 ] = true ;				  
  i <= sum ;						      	i <= sum ;						      }								  
  i ++ ) subset [ 0 ] [ i ] = false ;			      	i ++ ) subset [ i ] [ 0 ] = false ;			      for ( int i = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      i <= sum ;						  
  i <= n ;						      	i <= sum ;						      i ++ ) {							  
  i ++ ) {						      	i ++ ) {						    	subset [ 0 ] [ i ] = false ;				  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					      }								  
    j <= sum ;						      	  j <= n ;						      for ( int i = 1 ;						  
    j ++ ) {						      	  j ++ ) {						      i <= n ;							  
      if ( j < set [ i - 1 ] ) subset [ i ] [ j ] = subset [  	    subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ;	      i ++ ) {							  
      if ( j >= set [ i - 1 ] ) subset [ i ] [ j ] = subset [ 	    if ( i >= set [ j - 1 ] ) subset [ i ] [ j ] = subset [ 	for ( int j = 1 ;					  
    }							      	  }							    	j <= sum ;						  
  }							      	}							    	j ++ ) {						  
  return subset [ n ] [ sum ] ;				      	return subset [ sum ] [ n ] ;				    	  if ( j < set [ i - 1 ] ) {				  
}							      }								    	    subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ;	  
							      								    	  }							  
							      								    	  if ( j >= set [ i - 1 ] ) {				  
							      								    	    subset [ i ] [ j ] = subset [ i - 1 ] [ j ] || subset 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return subset [ n ] [ sum ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1		      DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1			    DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1			  DYNAMIC_PROGRAMMING_SET_5_EDIT_DISTANCE_1
--							      --							    --								  --
int editDistDP ( string str1 , string str2 , int m , int n )  static int editDistDP ( String str1 , String str2 , int m , i public static int editDistDP ( String str1 , String str2 , in script_not_found : None
  int dp [ m + 1 ] [ n + 1 ] ;				      	int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= n ;						      	  j <= n ;						    	j <= n ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( i == 0 ) dp [ i ] [ j ] = j ;		      	    if ( i == 0 ) dp [ i ] [ j ] = j ;			    	  if ( i == 0 ) {					  
      else if ( j == 0 ) dp [ i ] [ j ] = i ;		      	    else if ( j == 0 ) dp [ i ] [ j ] = i ;		    	    dp [ i ] [ j ] = j ;				  
      else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ 	    else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j  	  }							  
      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp 	    else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp 	  else if ( j == 0 ) {					  
    }							      	  }							    	    dp [ i ] [ j ] = i ;				  
  }							      	}							    	  }							  
  return dp [ m ] [ n ] ;				      	return dp [ m ] [ n ] ;					    	  else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j  
}							      }								    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = 1 + Math . min ( dp [ i ] [ j - 1 ]  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP CIRCULAR_MATRIX_CONSTRUCT_A_MATRIX_WITH_NUMBERS_1_TO_MN_IN_SP
--							      --							    --								  --
void spiralFill ( int m , int n , int a [ ] [ MAX ] ) {	      static void spiralFill ( int m , int n , int a [ ] [ ] ) {    public static void spiralFill ( int m , int n , int a [ ] [ ] script_not_found : None
  int val = 1 ;						      	int val = 1 ;						      int val = 1 ;						  
  int k = 0 , l = 0 ;					      	int k = 0 , l = 0 ;					      int k = 0 , l = 0 ;					  
  while ( k < m && l < n ) {				      	while ( k < m && l < n ) {				      while ( k < m && l < n ) {				  
    for ( int i = l ;					      	  for ( int i = l ;					    	for ( int i = l ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    ++ i ) a [ k ] [ i ] = val ++ ;			      	  ++ i ) {						    	++ i ) {						  
    k ++ ;						      	    a [ k ] [ i ] = val ++ ;				    	  a [ k ] [ i ] = val ++ ;				  
    for ( int i = k ;					      	  }							    	}							  
    i < m ;						      	  k ++ ;						    	k ++ ;							  
    ++ i ) a [ i ] [ n - 1 ] = val ++ ;			      	  for ( int i = k ;					    	for ( int i = k ;					  
    n -- ;						      	  i < m ;						    	i < m ;							  
    if ( k < m ) {					      	  ++ i ) {						    	++ i ) {						  
      for ( int i = n - 1 ;				      	    a [ i ] [ n - 1 ] = val ++ ;			    	  a [ i ] [ n - 1 ] = val ++ ;				  
      i >= l ;						      	  }							    	}							  
      -- i ) a [ m - 1 ] [ i ] = val ++ ;		      	  n -- ;						    	n -- ;							  
      m -- ;						      	  if ( k < m ) {					    	if ( k < m ) {						  
    }							      	    for ( int i = n - 1 ;				    	  for ( int i = n - 1 ;					  
    if ( l < n ) {					      	    i >= l ;						    	  i >= l ;						  
      for ( int i = m - 1 ;				      	    -- i ) {						    	  -- i ) {						  
      i >= k ;						      	      a [ m - 1 ] [ i ] = val ++ ;			    	    a [ m - 1 ] [ i ] = val ++ ;			  
      -- i ) a [ i ] [ l ] = val ++ ;			      	    }							    	  }							  
      l ++ ;						      	    m -- ;						    	  m -- ;						  
    }							      	  }							    	}							  
  }							      	  if ( l < n ) {					    	if ( l < n ) {						  
}							      	    for ( int i = m - 1 ;				    	  for ( int i = m - 1 ;					  
							      	    i >= k ;						    	  i >= k ;						  
							      	    -- i ) {						    	  -- i ) {						  
							      	      a [ i ] [ l ] = val ++ ;				    	    a [ i ] [ l ] = val ++ ;				  
							      	    }							    	  }							  
							      	    l ++ ;						    	  l ++ ;						  
							      	  }							    	}							  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_ GIVEN_TWO_SORTED_ARRAYS_NUMBER_X_FIND_PAIR_WHOSE_SUM_CLOSEST_
--							      --							    --								  --
void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n public static void printClosest ( int ar1 [ ] , int ar2 [ ] , script_not_found : None
  int diff = INT_MAX ;					      	int diff = Integer . MAX_VALUE ;			      int diff = Integer . MAX_VALUE ;				  
  int res_l , res_r ;					      	int res_l = 0 , res_r = 0 ;				      int res_l , res_r ;					  
  int l = 0 , r = n - 1 ;				      	int l = 0 , r = n - 1 ;					      int l = 0 , r = n - 1 ;					  
  while ( l < m && r >= 0 ) {				      	while ( l < m && r >= 0 ) {				      while ( l < m && r >= 0 ) {				  
    if ( abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {	      	  if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {  	if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {  
      res_l = l ;					      	    res_l = l ;						    	  res_l = l ;						  
      res_r = r ;					      	    res_r = r ;						    	  res_r = r ;						  
      diff = abs ( ar1 [ l ] + ar2 [ r ] - x ) ;	      	    diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;	    	  diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;	  
    }							      	  }							    	}							  
    if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ;		      	  if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ;		    	if ( ar1 [ l ] + ar2 [ r ] > x ) {			  
    else l ++ ;						      	  else l ++ ;						    	  r -- ;						  
  }							      	}							    	}							  
  cout << "The closest pair is [" << ar1 [ res_l ] << ", " << 	System . out . print ( "The closest pair is [" + ar1 [ res_ 	else {							  
}							      }								    	  l ++ ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "The closest pair is [" + ar1 [ re 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1	      LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1	    LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1	  LONGEST_EVEN_LENGTH_SUBSTRING_SUM_FIRST_SECOND_HALF_1
--							      --							    --								  --
int findLength ( char * str ) {				      static int findLength ( String str ) {			    public static int findLength ( String str ) {		  success : None
  int n = strlen ( str ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int maxlen = 0 ;					      	int maxlen = 0 ;					      int maxlen = 0 ;						  
  int sum [ n ] [ n ] ;					      	int sum [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] sum = new int [ n ] [ n ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum [ i ] [ i ] = str [ i ] - '0' ;		      	i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ;	      i ++ ) {							  
  for ( int len = 2 ;					      	for ( int len = 2 ;					    	sum [ i ] [ i ] = str . charAt ( i ) - '0' ;		  
  len <= n ;						      	len <= n ;						      }								  
  len ++ ) {						      	len ++ ) {						      for ( int len = 2 ;					  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					      len <= n ;						  
    i < n - len + 1 ;					      	  i < n - len + 1 ;					      len ++ ) {						  
    i ++ ) {						      	  i ++ ) {						    	for ( int i = 0 ;					  
      int j = i + len - 1 ;				      	    int j = i + len - 1 ;				    	i < n - len + 1 ;					  
      int k = len / 2 ;					      	    int k = len / 2 ;					    	i ++ ) {						  
      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 	    sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 	  int j = i + len - 1 ;					  
      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - 	    if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - 	  int k = len / 2 ;					  
    }							      	  }							    	  sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 
  }							      	}							    	  if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - 
  return maxlen ;					      	return maxlen ;						    	    maxlen = len ;					  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return maxlen ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			      K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			    K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY			  K_TH_LARGEST_SUM_CONTIGUOUS_SUBARRAY
--							      --							    --								  --
int kthLargestSum ( int arr [ ] , int n , int k ) {	      static int kthLargestSum ( int arr [ ] , int n , int k ) {    public static int kthLargestSum ( int arr [ ] , int n , int k success : None
  int sum [ n + 1 ] ;					      	int sum [ ] = new int [ n + 1 ] ;			      int sum [ ] = new int [ n + 1 ] ;				  
  sum [ 0 ] = 0 ;					      	sum [ 0 ] = 0 ;						      sum [ 0 ] = 0 ;						  
  sum [ 1 ] = arr [ 0 ] ;				      	sum [ 1 ] = arr [ 0 ] ;					      sum [ 1 ] = arr [ 0 ] ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i - 1 ] ;	      	i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i - 1 ] ;	      i ++ ) {							  
  priority_queue < int , vector < int > , greater < int >> Q  	PriorityQueue < Integer > Q = new PriorityQueue < Integer > 	sum [ i ] = sum [ i - 1 ] + arr [ i - 1 ] ;		  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      }								  
  i <= n ;						      	i <= n ;						      PriorityQueue < Integer > q = new PriorityQueue < > ( ) ;	  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    for ( int j = i ;					      	  for ( int j = i ;					      i <= n ;							  
    j <= n ;						      	  j <= n ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = i ;					  
      int x = sum [ j ] - sum [ i - 1 ] ;		      	    int x = sum [ j ] - sum [ i - 1 ] ;			    	j <= n ;						  
      if ( Q . size ( ) < k ) Q . push ( x ) ;		      	    if ( Q . size ( ) < k ) Q . add ( x ) ;		    	j ++ ) {						  
      else {						      	    else {						    	  int x = sum [ j ] - sum [ i - 1 ] ;			  
	if ( Q . top ( ) < x ) {			      	      if ( Q . peek ( ) < x ) {				    	  if ( q . size ( ) < k ) {				  
	  Q . pop ( ) ;					      		Q . poll ( ) ;					    	    q . add ( x ) ;					  
	  Q . push ( x ) ;				      		Q . add ( x ) ;					    	  }							  
	}						      	      }							    	  else {						  
      }							      	    }							    	    if ( q . peek ( ) < x ) {				  
    }							      	  }							    	      q . poll ( ) ;					  
  }							      	}							    	      q . add ( x ) ;					  
  return Q . top ( ) ;					      	return Q . poll ( ) ;					    	    }							  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return q . peek ( ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_SUBARRAY_SUM_DIVISIBLE_K			      LONGEST_SUBARRAY_SUM_DIVISIBLE_K				    LONGEST_SUBARRAY_SUM_DIVISIBLE_K				  LONGEST_SUBARRAY_SUM_DIVISIBLE_K
--							      --							    --								  --
int longSubarrWthSumDivByK ( int arr [ ] , int n , int k ) {  static int longSubarrWthSumDivByK ( int arr [ ] , int n , int public static int longSubarrWthSumDivByK ( int [ ] arr , int  success : None
  unordered_map < int , int > um ;			      	HashMap < Integer , Integer > um = new HashMap < Integer ,    HashMap < Integer , Integer > um = new HashMap < > ( ) ;	  
  int mod_arr [ n ] , max = 0 ;				      	int mod_arr [ ] = new int [ n ] ;			      int mod_arr [ ] = new int [ n ] , max = 0 ;		  
  int curr_sum = 0 ;					      	int max = 0 ;						      int curr_sum = 0 ;					  
  for ( int i = 0 ;					      	int curr_sum = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) {						      	i < n ;							      i ++ ) {							  
    curr_sum += arr [ i ] ;				      	i ++ ) {						    	curr_sum += arr [ i ] ;					  
    mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k ;	      	  curr_sum += arr [ i ] ;				    	mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k ;		  
  }							      	  mod_arr [ i ] = ( ( curr_sum % k ) + k ) % k ;	      }								  
  for ( int i = 0 ;					      	}							      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) {						      	i < n ;							      i ++ ) {							  
    if ( mod_arr [ i ] == 0 ) max = i + 1 ;		      	i ++ ) {						    	if ( mod_arr [ i ] == 0 ) {				  
    else if ( um . find ( mod_arr [ i ] ) == um . end ( ) ) u 	  if ( mod_arr [ i ] == 0 ) max = i + 1 ;		    	  max = i + 1 ;						  
    else if ( max < ( i - um [ mod_arr [ i ] ] ) ) max = i -  	  else if ( um . containsKey ( mod_arr [ i ] ) == false ) u 	}							  
  }							      	  else if ( max < ( i - um . get ( mod_arr [ i ] ) ) ) max  	else if ( um . get ( mod_arr [ i ] ) == null ) {	  
  return max ;						      	}							    	  um . put ( mod_arr [ i ] , i ) ;			  
}							      	return max ;						    	}							  
							      }								    	else if ( max < ( i - um . get ( mod_arr [ i ] ) ) ) {	  
							      								    	  max = i - um . get ( mod_arr [ i ] ) ;		  
							      								    	}							  
							      								      }								  
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_PATH_2D_MATRIX				      CHECK_POSSIBLE_PATH_2D_MATRIX				    CHECK_POSSIBLE_PATH_2D_MATRIX				  CHECK_POSSIBLE_PATH_2D_MATRIX
--							      --							    --								  --
bool isPath ( int arr [ row ] [ col ] ) {		      static boolean isPath ( int arr [ ] [ ] ) {		    public static boolean isPath ( int [ ] arr , int row , int co script_not_found : None
  arr [ 0 ] [ 0 ] = 1 ;					      	arr [ 0 ] [ 0 ] = 1 ;					      arr [ 0 ] [ 0 ] = 1 ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < row ;						      	i < 5 ;							      i < row ;							  
  i ++ ) if ( arr [ i ] [ 0 ] != - 1 ) arr [ i ] [ 0 ] = arr  	i ++ ) if ( arr [ 0 ] [ i ] != - 1 ) arr [ 0 ] [ i ] = arr    i ++ ) if ( arr [ i ] [ 0 ] != - 1 ) arr [ i ] [ 0 ] = arr  
  for ( int j = 1 ;					      	for ( int j = 1 ;					      for ( int j = 1 ;						  
  j < col ;						      	j < 5 ;							      j < col ;							  
  j ++ ) if ( arr [ 0 ] [ j ] != - 1 ) arr [ 0 ] [ j ] = arr  	j ++ ) if ( arr [ j ] [ 0 ] != - 1 ) arr [ j ] [ 0 ] = arr    j ++ ) if ( arr [ 0 ] [ j ] != - 1 ) arr [ 0 ] [ j ] = arr  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < row ;						      	i < 5 ;							      i < row ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  j < col ;						      	j < 5 ;							      j < col ;							  
  j ++ ) if ( arr [ i ] [ j ] != - 1 ) arr [ i ] [ j ] = max  	j ++ ) if ( arr [ i ] [ j ] != - 1 ) arr [ i ] [ j ] = Math   j ++ ) if ( arr [ i ] [ j ] != - 1 ) arr [ i ] [ j ] = Math 
  return ( arr [ row - 1 ] [ col - 1 ] == 1 ) ;		      	return ( arr [ 5 - 1 ] [ 5 - 1 ] == 1 ) ;		      return ( arr [ row - 1 ] [ col - 1 ] == 1 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN COUNT_WORDS_WHOSE_TH_LETTER_EITHER_1_TH_TH_I1_TH_LETTER_GIVEN
--							      --							    --								  --
int countWords ( char str [ ] , int len ) {		      static int countWords ( String str , int len ) {		    public static int countWords ( char [ ] str , int len ) {	  script_not_found : None
  int count = 1 ;					      	int count = 1 ;						      int count = 1 ;						  
  if ( len == 1 ) return count ;			      	if ( len == 1 ) return count ;				      if ( len == 1 ) {						  
  if ( str [ 0 ] == str [ 1 ] ) count *= 1 ;		      	if ( str . charAt ( 0 ) == str . charAt ( 1 ) ) count *= 1  	return count ;						  
  else count *= 2 ;					      	else count *= 2 ;					      }								  
  for ( int j = 1 ;					      	for ( int j = 1 ;					      if ( str [ 0 ] == str [ 1 ] ) {				  
  j < len - 1 ;						      	j < len - 1 ;						    	count *= 1 ;						  
  j ++ ) {						      	j ++ ) {						      }								  
    if ( str [ j ] == str [ j - 1 ] && str [ j ] == str [ j + 	  if ( str . charAt ( j ) == str . charAt ( j - 1 ) && str    else {							  
    else if ( str [ j ] == str [ j - 1 ] || str [ j ] == str  	  else if ( str . charAt ( j ) == str . charAt ( j - 1 ) || 	count *= 2 ;						  
    else count *= 3 ;					      	  else count *= 3 ;					      }								  
  }							      	}							      for ( int j = 1 ;						  
  if ( str [ len - 1 ] == str [ len - 2 ] ) count *= 1 ;      	if ( str . charAt ( len - 1 ) == str . charAt ( len - 2 ) )   j < len - 1 ;						  
  else count *= 2 ;					      	else count *= 2 ;					      j ++ ) {							  
  return count ;					      	return count ;						    	if ( str [ j ] == str [ j - 1 ] && str [ j ] == str [ j + 
}							      }								    	  count *= 1 ;						  
							      								    	}							  
							      								    	else if ( str [ j ] == str [ j - 1 ] || str [ j ] == str  
							      								    	  count *= 2 ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  count *= 3 ;						  
							      								    	}							  
							      								      }								  
							      								      if ( str [ len - 1 ] == str [ len - 2 ] ) {		  
							      								    	count *= 1 ;						  
							      								      }								  
							      								      else {							  
							      								    	count *= 2 ;						  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH GIVEN_A_SORTED_AND_ROTATED_ARRAY_FIND_IF_THERE_IS_A_PAIR_WITH
--							      --							    --								  --
int pairsInSortedRotated ( int arr [ ] , int n , int x ) {    static int pairsInSortedRotated ( int arr [ ] , int n , int x public static int pairsInSortedRotated ( int arr [ ] , int n  success : None
  int i ;						      	int i ;							      int i ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;	      	i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;		      i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;		  
  int l = ( i + 1 ) % n ;				      	int l = ( i + 1 ) % n ;					      int l = ( i + 1 ) % n ;					  
  int r = i ;						      	int r = i ;						      int r = i ;						  
  int cnt = 0 ;						      	int cnt = 0 ;						      int cnt = 0 ;						  
  while ( l != r ) {					      	while ( l != r ) {					      while ( l != r ) {					  
    if ( arr [ l ] + arr [ r ] == x ) {			      	  if ( arr [ l ] + arr [ r ] == x ) {			    	if ( arr [ l ] + arr [ r ] == x ) {			  
      cnt ++ ;						      	    cnt ++ ;						    	  cnt ++ ;						  
      if ( l == ( r - 1 + n ) % n ) {			      	    if ( l == ( r - 1 + n ) % n ) {			    	  if ( l == ( r - 1 + n ) % n ) return cnt ;		  
	return cnt ;					      	      return cnt ;					    	  l = ( l + 1 ) % n ;					  
      }							      	    }							    	  r = ( r - 1 + n ) % n ;				  
      l = ( l + 1 ) % n ;				      	    l = ( l + 1 ) % n ;					    	}							  
      r = ( r - 1 + n ) % n ;				      	    r = ( r - 1 + n ) % n ;				    	else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ; 
    }							      	  }							    	else r = ( n + r - 1 ) % n ;				  
    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ; 	  else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;   }								  
    else r = ( n + r - 1 ) % n ;			      	  else r = ( n + r - 1 ) % n ;				      return cnt ;						  
  }							      	}							    }								  
  return cnt ;						      	return cnt ;						    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR
--							      --							    --								  --
void bitonicGenerator ( int arr [ ] , int n ) {		      static void bitonicGenerator ( int arr [ ] , int n ) {	    public static void bitonicGenerator ( int arr [ ] , int n ) { error : SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_P
  vector < int > evenArr ;				      	Vector < Integer > evenArr = new Vector < Integer > ( ) ;     int evenArr [ ] = new int [ n ] ;				  LACED_DECREASING_ORDER.java:12: error: class SPLIT
  vector < int > oddArr ;				      	Vector < Integer > oddArr = new Vector < Integer > ( ) ;      int oddArr [ ] = new int [ n ] ;				  _ARRAY_ADD_FIRST_PART_END is public, should be dec
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  lared in a file named SPLIT_ARRAY_ADD_FIRST_PART_E
  i < n ;						      	i < n ;							      i < n ;							  ND.java public class SPLIT_ARRAY_ADD_FIRST_PART_EN
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  D{	    ^ SORT_EVEN_PLACED_ELEMENTS_INCREASING_O
    if ( ! ( i % 2 ) ) evenArr . push_back ( arr [ i ] ) ;    	  if ( i % 2 != 1 ) {					    	if ( ! ( i % 2 ) ) {					  DD_PLACED_DECREASING_ORDER.java:32: error: bad ope
    else oddArr . push_back ( arr [ i ] ) ;		      	    evenArr . add ( arr [ i ] ) ;			    	  evenArr [ i ] = arr [ i ] ;				  rand type int for unary operator '!'	   if ( ! (
  }							      	  }							    	}							  i % 2 ) ) {	       ^ SORT_EVEN_PLACED_ELEMENTS_I
  sort ( evenArr . begin ( ) , evenArr . end ( ) ) ;	      	  else {						    	else {							  NCREASING_ODD_PLACED_DECREASING_ORDER.java:40: err
  sort ( oddArr . begin ( ) , oddArr . end ( ) , greater < in 	    oddArr . add ( arr [ i ] ) ;			    	  oddArr [ i ] = arr [ i ] ;				  or: unexpected type	Arrays . sort ( oddArr , new
  int i = 0 ;						      	  }							    	}							   Comparator < int > ( ) {
  for ( int j = 0 ;					      	}							      }								  		      ^	  required: reference	foun
  j < evenArr . size ( ) ;				      	Collections . sort ( evenArr ) ;			      Arrays . sort ( evenArr ) ;				  d:	int SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD
  j ++ ) arr [ i ++ ] = evenArr [ j ] ;			      	Collections . sort ( oddArr , Collections . reverseOrder (    Arrays . sort ( oddArr , new Comparator < int > ( ) {	  _PLACED_DECREASING_ORDER.java:42: error: cannot fi
  for ( int j = 0 ;					      	int i = 0 ;						    	public int compare ( int o1 , int o2 ) {		  nd symbol	  return Integer . compare ( evenArr
  j < oddArr . size ( ) ;				      	for ( int j = 0 ;					    	  return Integer . compare ( evenArr [ i ] , oddArr [ i ]  [ i ] , oddArr [ i ] ) ;
  j ++ ) arr [ i ++ ] = oddArr [ j ] ;			      	j < evenArr . size ( ) ;				    	}							  		     ^	 symbol: variable i SORT_EVE
}							      	j ++ ) {						      }								  N_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING
							      	  arr [ i ++ ] = evenArr . get ( j ) ;			      ) ;							  _ORDER.java:42: error: cannot find symbol	  re
							      	}							      int i = 0 ;						  turn Integer . compare ( evenArr [ i ] , oddArr [
							      	for ( int j = 0 ;					      for ( int j = 0 ;						  i ] ) ;
							      	j < oddArr . size ( ) ;					      j < evenArr . length ;					  		  ^   symbol: variable i SORT_EVEN_P
							      	j ++ ) {						      j ++ ) {							  LACED_ELEMENTS_INCREASING_ODD_PLACED_DECREASING_OR
							      	  arr [ i ++ ] = oddArr . get ( j ) ;			    	arr [ i ++ ] = evenArr [ j ] ;				  DER.java:40: error: no suitable method found for s
							      	}							      }								  ort(int[],<anonymous Comparator<<any>>>)   Arrays
							      }								      for ( int j = 0 ;						  . sort ( oddArr , new Comparator < int > ( ) {
							      								      j < oddArr . length ;					  	^     method Arrays.<T#1>sort(T#1[],Comparat
							      								      j ++ ) {							  or<? super T#1>) is not applicable	   (inferenc
							      								    	arr [ i ++ ] = oddArr [ j ] ;				  e variable T#1 has incompatible bounds	 equ
							      								      }								  ality constraints: int	 lower bounds: Objec
							      								    }								  t)	 method Arrays.<T#2>sort(T#2[],int,int,Compa
							      								    								  rator<? super T#2>) is not applicable	      (canno
							      								    								  t infer type-variable(s) T#2	       (actual and f
							      								    								  ormal argument lists differ in length))   where T#
							      								    								  1,T#2 are type-variables:	T#1 extends Object d
							      								    								  eclared in method <T#1>sort(T#1[],Comparator<? sup
							      								    								  er T#1>)     T#2 extends Object declared in method
							      								    								   <T#2>sort(T#2[],int,int,Comparator<? super T#2>)
							      								    								  SORT_EVEN_PLACED_ELEMENTS_INCREASING_ODD_PLACED_DE
							      								    								  CREASING_ORDER.java:130: error: method f_filled in
							      								    								   class SPLIT_ARRAY_ADD_FIRST_PART_END cannot be ap
							      								    								  plied to given types;		f_filled(filled_func
							      								    								  tion_param0.get(i),filled_function_param1.get(i),f
							      								    								  illed_function_param2.get(i));	 ^   require
							      								    								  d: int[],int	 found: int[],Integer,Integer	reas
							      								    								  on: actual and formal argument lists differ in len
							      								    								  gth Note: Some messages have been simplified; reco
							      								    								  mpile with -Xdiags:verbose to get full output 7 er
							      								    								  rors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CORRELATION_COEFFICIENT			      PROGRAM_FIND_CORRELATION_COEFFICIENT			    PROGRAM_FIND_CORRELATION_COEFFICIENT			  PROGRAM_FIND_CORRELATION_COEFFICIENT
--							      --							    --								  --
float correlationCoefficient ( int X [ ] , int Y [ ] , int n  static float correlationCoefficient ( int X [ ] , int Y [ ] , public static float correlationCoefficient ( int X [ ] , int  script_not_found : None
  int sum_X = 0 , sum_Y = 0 , sum_XY = 0 ;		      	int sum_X = 0 , sum_Y = 0 , sum_XY = 0 ;		      int sum_X = 0 , sum_Y = 0 , sum_XY = 0 ;			  
  int squareSum_X = 0 , squareSum_Y = 0 ;		      	int squareSum_X = 0 , squareSum_Y = 0 ;			      int squareSum_X = 0 , squareSum_Y = 0 ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum_X = sum_X + X [ i ] ;				      	  sum_X = sum_X + X [ i ] ;				    	sum_X = sum_X + X [ i ] ;				  
    sum_Y = sum_Y + Y [ i ] ;				      	  sum_Y = sum_Y + Y [ i ] ;				    	sum_Y = sum_Y + Y [ i ] ;				  
    sum_XY = sum_XY + X [ i ] * Y [ i ] ;		      	  sum_XY = sum_XY + X [ i ] * Y [ i ] ;			    	sum_XY = sum_XY + X [ i ] * Y [ i ] ;			  
    squareSum_X = squareSum_X + X [ i ] * X [ i ] ;	      	  squareSum_X = squareSum_X + X [ i ] * X [ i ] ;	    	squareSum_X = squareSum_X + X [ i ] * X [ i ] ;		  
    squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ] ;	      	  squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ] ;	    	squareSum_Y = squareSum_Y + Y [ i ] * Y [ i ] ;		  
  }							      	}							      }								  
  float corr = ( float ) ( n * sum_XY - sum_X * sum_Y ) / sqr 	float corr = ( float ) ( n * sum_XY - sum_X * sum_Y ) / ( f   float corr = ( float ) ( n * sum_XY - sum_X * sum_Y ) / Mat 
  return corr ;						      	return corr ;						      return corr ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS	      CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS	    CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS		  CHECK_GIVEN_STRING_CAN_SPLIT_FOUR_DISTINCT_STRINGS
--							      --							    --								  --
bool check ( string s ) {				      public static boolean check ( String s ) {		    public static boolean check ( String s ) {			  script_not_found : None
  if ( s . size ( ) >= 10 ) return true ;		      	if ( s . length ( ) >= 10 ) return true ;		      if ( s . length ( ) >= 10 ) {				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	return true ;						  
  i < s . size ( ) ;					      	i < s . length ( ) ;					      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					      i < s . length ( ) ;					  
    j < s . size ( ) ;					      	  j < s . length ( ) ;					      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = i + 1 ;					  
      for ( int k = j + 1 ;				      	    for ( int k = j + 1 ;				    	j < s . length ( ) ;					  
      k < s . size ( ) ;				      	    k < s . length ( ) ;				    	j ++ ) {						  
      k ++ ) {						      	    k ++ ) {						    	  for ( int k = j + 1 ;					  
	string s1 = s . substr ( 0 , i ) ;		      	      String s1 = "" , s2 = "" , s3 = "" , s4 = "" ;	    	  k < s . length ( ) ;					  
	string s2 = s . substr ( i , j - i ) ;		      	      try {						    	  k ++ ) {						  
	string s3 = s . substr ( j , k - j ) ;		      		s1 = s . substring ( 0 , i ) ;			    	    String s1 = s . substring ( 0 , i ) ;		  
	string s4 = s . substr ( k , s . size ( ) - k ) ;     		s2 = s . substring ( i , j - i ) ;		    	    String s2 = s . substring ( i , j ) ;		  
	if ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 &&  		s3 = s . substring ( j , k - j ) ;		    	    String s3 = s . substring ( j , k ) ;		  
      }							      		s4 = s . substring ( k , s . length ( ) - k ) ;	    	    String s4 = s . substring ( k , s . length ( ) ) ;	  
    }							      	      }							    	    if ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 &&  
  }							      	      catch ( StringIndexOutOfBoundsException e ) {	    	      return true ;					  
  return false ;					      	      }							    	    }							  
}							      	      if ( strcheck ( s1 , s2 ) && strcheck ( s1 , s3 ) &&  	  }							  
							      	    }							    	}							  
							      	  }							      }								  
							      	}							      return false ;						  
							      	return false ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GRAPHS_CYCLE_ODD_LENGTH				      CHECK_GRAPHS_CYCLE_ODD_LENGTH				    CHECK_GRAPHS_CYCLE_ODD_LENGTH				  CHECK_GRAPHS_CYCLE_ODD_LENGTH
--							      --							    --								  --
bool containsOdd ( int G [ ] [ V ] , int src ) {	      public static boolean containsOdd ( int G [ ] [ ] , int src ) public static boolean containsOdd ( int G [ ] [ ] , int src ) script_not_found : None
  int colorArr [ V ] ;					      	int colorArr [ ] = new int [ V ] ;			      int [ ] colorArr = new int [ V ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < V ;						      	i < V ;							      i < V ;							  
  ++ i ) colorArr [ i ] = - 1 ;				      	++ i ) colorArr [ i ] = - 1 ;				      ++ i ) {							  
  colorArr [ src ] = 1 ;				      	colorArr [ src ] = 1 ;					    	colorArr [ i ] = - 1 ;					  
  queue < int > q ;					      	LinkedList < Integer > q = new LinkedList < Integer > ( ) ;   }								  
  q . push ( src ) ;					      	q . add ( src ) ;					      colorArr [ src ] = 1 ;					  
  while ( ! q . empty ( ) ) {				      	while ( ! q . isEmpty ( ) ) {				      Queue < Integer > q = new LinkedList < > ( ) ;		  
    int u = q . front ( ) ;				      	  int u = q . peek ( ) ;				      q . add ( src ) ;						  
    q . pop ( ) ;					      	  q . pop ( ) ;						      while ( ! q . isEmpty ( ) ) {				  
    if ( G [ u ] [ u ] == 1 ) return true ;		      	  if ( G [ u ] [ u ] == 1 ) return true ;		    	int u = q . poll ( ) ;					  
    for ( int v = 0 ;					      	  for ( int v = 0 ;					    	q . remove ( ) ;					  
    v < V ;						      	  v < V ;						    	if ( G [ u ] [ u ] == 1 ) {				  
    ++ v ) {						      	  ++ v ) {						    	  return true ;						  
      if ( G [ u ] [ v ] && colorArr [ v ] == - 1 ) {	      	    if ( G [ u ] [ v ] == 1 && colorArr [ v ] == - 1 ) {    	}							  
	colorArr [ v ] = 1 - colorArr [ u ] ;		      	      colorArr [ v ] = 1 - colorArr [ u ] ;		    	for ( int v = 0 ;					  
	q . push ( v ) ;				      	      q . push ( v ) ;					    	v < V ;							  
      }							      	    }							    	++ v ) {						  
      else if ( G [ u ] [ v ] && colorArr [ v ] == colorArr [ 	    else if ( G [ u ] [ v ] == 1 && colorArr [ v ] == color 	  if ( G [ u ] [ v ] != null && colorArr [ v ] == - 1 ) { 
    }							      	  }							    	    colorArr [ v ] = 1 - colorArr [ u ] ;		  
  }							      	}							    	    q . add ( v ) ;					  
  return false ;					      	return false ;						    	  }							  
}							      }								    	  else if ( G [ u ] [ v ] != null && colorArr [ v ] == co 
							      								    	    return true ;					  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3		      COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3		    COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3		  COUNT_POSSIBLE_GROUPS_SIZE_2_3_SUM_MULTIPLE_3
--							      --							    --								  --
int findgroups ( int arr [ ] , int n ) {		      int findgroups ( int arr [ ] , int n ) {			    public static int findgroups ( int arr [ ] , int n ) {	  script_not_found : None
  int c [ 3 ] = {					      	int c [ ] = new int [ ] {				      int c [ ] = new int [ 3 ] , i ;				  
    0 }							      	  0 , 0 , 0 }						      int res = 0 ;						  
    , i ;						      	  ;							      for ( i = 0 ;						  
    int res = 0 ;					      	  int i ;						      i < n ;							  
    for ( i = 0 ;					      	  int res = 0 ;						      i ++ ) {							  
    i < n ;						      	  for ( i = 0 ;						    	c [ arr [ i ] % 3 ] ++ ;				  
    i ++ ) c [ arr [ i ] % 3 ] ++ ;			      	  i < n ;						      }								  
    res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ) ;	      	  i ++ ) c [ arr [ i ] % 3 ] ++ ;			      res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ) ;		  
    res += c [ 1 ] * c [ 2 ] ;				      	  res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ) ;	      res += c [ 1 ] * c [ 2 ] ;				  
    res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) /  	  res += c [ 1 ] * c [ 2 ] ;				      res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) / 6  
    res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) /  	  res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) /    res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) / 6  
    res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) )  	  res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) /    res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) ) /  
    res += c [ 0 ] * c [ 1 ] * c [ 2 ] ;		      	  res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) )    res += c [ 0 ] * c [ 1 ] * c [ 2 ] ;			  
    return res ;					      	  res += c [ 0 ] * c [ 1 ] * c [ 2 ] ;			      return res ;						  
  }							      	  return res ;						    }								  
							      	}							    								  
-							      	-							    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS NUMBER_WHICH_HAS_THE_MAXIMUM_NUMBER_OF_DISTINCT_PRIME_FACTORS
--							      --							    --								  --
int maximumNumberDistinctPrimeRange ( int m , int n ) {	      static int maximumNumberDistinctPrimeRange ( int m , int n )  public static int maximumNumberDistinctPrimeRange ( int m , i script_not_found : None
  long long factorCount [ n + 1 ] ;			      	long factorCount [ ] = new long [ n + 1 ] ;		      long [ ] factorCount = new long [ n + 1 ] ;		  
  bool prime [ n + 1 ] ;				      	boolean prime [ ] = new boolean [ n + 1 ] ;		      boolean [ ] prime = new boolean [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    factorCount [ i ] = 0 ;				      	  factorCount [ i ] = 0 ;				    	factorCount [ i ] = 0 ;					  
    prime [ i ] = true ;				      	  prime [ i ] = true ;					    	prime [ i ] = true ;					  
  }							      	}							      }								  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( prime [ i ] == true ) {			      	  if ( prime [ i ] == true ) {				    	if ( prime [ i ] == true ) {				  
      factorCount [ i ] = 1 ;				      	    factorCount [ i ] = 1 ;				    	  factorCount [ i ] = 1 ;				  
      for ( int j = i * 2 ;				      	    for ( int j = i * 2 ;				    	  for ( int j = i * 2 ;					  
      j <= n ;						      	    j <= n ;						    	  j <= n ;						  
      j += i ) {					      	    j += i ) {						    	  j += i ) {						  
	factorCount [ j ] ++ ;				      	      factorCount [ j ] ++ ;				    	    factorCount [ j ] ++ ;				  
	prime [ j ] = false ;				      	      prime [ j ] = false ;				    	    prime [ j ] = false ;				  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
  }							      	}							      }								  
  int max = factorCount [ m ] ;				      	int max = ( int ) factorCount [ m ] ;			      int max = factorCount [ m ] ;				  
  int num = m ;						      	int num = m ;						      int num = m ;						  
  for ( int i = m ;					      	for ( int i = m ;					      for ( int i = m ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( factorCount [ i ] > max ) {			      	  if ( factorCount [ i ] > max ) {			    	if ( factorCount [ i ] > max ) {			  
      max = factorCount [ i ] ;				      	    max = ( int ) factorCount [ i ] ;			    	  max = factorCount [ i ] ;				  
      num = i ;						      	    num = i ;						    	  num = i ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  return num ;						      	return num ;						      return num ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOSOYAS_TRIANGLE					      HOSOYAS_TRIANGLE						    HOSOYAS_TRIANGLE						  HOSOYAS_TRIANGLE
--							      --							    --								  --
void printHosoya ( int n ) {				      static void printHosoya ( int n ) {			    public static void printHosoya ( int n ) {			  script_not_found : None
  int dp [ N ] [ N ] ;					      	int dp [ ] [ ] = new int [ N ] [ N ] ;			      int [ ] [ ] dp = new int [ N ] [ N ] ;			  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ;			      Arrays . fill ( dp , 0 ) ;				  
  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1 ;      	dp [ 1 ] [ 1 ] = 1 ;					      dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1 ;	  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ 	    if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ 	  if ( i > j ) {					  
      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 	    else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 	    dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2  
  i < n ;						      	i < n ;							    	  }							  
  i ++ ) {						      	i ++ ) {						    	}							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      }								  
    j <= i ;						      	  j <= i ;						      for ( int i = 0 ;						  
    j ++ ) cout << dp [ i ] [ j ] << " " ;		      	  j ++ ) System . out . print ( dp [ i ] [ j ] + " " ) ;      i < n ;							  
    cout << endl ;					      	  System . out . println ( "" ) ;			      i ++ ) {							  
  }							      	}							    	for ( int j = 0 ;					  
}							      }								    	j <= i ;						  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( dp [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MERGING_INTERVALS					      MERGING_INTERVALS						    MERGING_INTERVALS						  MERGING_INTERVALS
--							      --							    --								  --
void mergeIntervals ( Interval arr [ ] , int n ) {	      public static void mergeIntervals ( Interval arr [ ] ) {	    public static void mergeIntervals ( Interval arr [ ] , int n  script_not_found : None
  sort ( arr , arr + n , mycomp ) ;			      	Arrays . sort ( arr , new Comparator < Interval > ( ) {	      Arrays . sort ( arr , 0 , n , myComparator ) ;		  
  int index = 0 ;					      	  public int compare ( Interval i1 , Interval i2 ) {	      int index = 0 ;						  
  for ( int i = 1 ;					      	    return i2 . start - i1 . start ;			      for ( int i = 1 ;						  
  i < n ;						      	  }							      i < n ;							  
  i ++ ) {						      	}							      i ++ ) {							  
    if ( arr [ index ] . e >= arr [ i ] . s ) {		      	) ;							    	if ( arr [ index ] . e >= arr [ i ] . s ) {		  
      arr [ index ] . e = max ( arr [ index ] . e , arr [ i ] 	int index = 0 ;						    	  arr [ index ] . e = Math . max ( arr [ index ] . e , ar 
      arr [ index ] . s = min ( arr [ index ] . s , arr [ i ] 	for ( int i = 1 ;					    	  arr [ index ] . s = Math . min ( arr [ index ] . s , ar 
    }							      	i < arr . length ;					    	}							  
    else {						      	i ++ ) {						    	else {							  
      arr [ index ] = arr [ i ] ;			      	  if ( arr [ index ] . end >= arr [ i ] . start ) {	    	  arr [ index ] = arr [ i ] ;				  
      index ++ ;					      	    arr [ index ] . end = Math . max ( arr [ index ] . end  	  index ++ ;						  
    }							      	    arr [ index ] . start = Math . min ( arr [ index ] . st 	}							  
  }							      	  }							      }								  
  cout << "\n The Merged Intervals are: " ;		      	  else {						      System . out . println ( "\n The Merged Intervals are: " )  
  for ( int i = 0 ;					      	    arr [ index ] = arr [ i ] ;				      for ( int i = 0 ;						  
  i <= index ;						      	    index ++ ;						      i <= index ;						  
  i ++ ) cout << "[" << arr [ i ] . s << ", " << arr [ i ] .  	  }							      i ++ ) {							  
}							      	}							    	System . out . println ( "[" + arr [ i ] . s + ", " + arr 
							      	System . out . print ( "The Merged Intervals are: " ) ;	      }								  
							      	for ( int i = 0 ;					    }								  
							      	i <= index ;						    								  
							      	i ++ ) {						    								  
							      	  System . out . print ( "[" + arr [ i ] . start + "," + ar 								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_N_DIGIT_STEPPING_NUMBERS				      NUMBER_N_DIGIT_STEPPING_NUMBERS				    NUMBER_N_DIGIT_STEPPING_NUMBERS				  NUMBER_N_DIGIT_STEPPING_NUMBERS
--							      --							    --								  --
long long answer ( int n ) {				      static long answer ( int n ) {				    public static long answer ( int n ) {			  success : None
  int dp [ n + 1 ] [ 10 ] ;				      	int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ 10 ] ;		  
  if ( n == 1 ) return 10 ;				      	if ( n == 1 ) return 10 ;				      if ( n == 1 ) {						  
  for ( int j = 0 ;					      	for ( int j = 0 ;					    	return 10 ;						  
  j <= 9 ;						      	j <= 9 ;						      }								  
  j ++ ) dp [ 1 ] [ j ] = 1 ;				      	j ++ ) dp [ 1 ] [ j ] = 1 ;				      for ( int j = 0 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      j <= 9 ;							  
  i <= n ;						      	i <= n ;						      j ++ ) {							  
  i ++ ) {						      	i ++ ) {						    	dp [ 1 ] [ j ] = 1 ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      }								  
    j <= 9 ;						      	  j <= 9 ;						      for ( int i = 2 ;						  
    j ++ ) {						      	  j ++ ) {						      i <= n ;							  
      if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ; 	    if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;   i ++ ) {							  
      else if ( j == 9 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j -  	    else if ( j == 9 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j -  	for ( int j = 0 ;					  
      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 	    else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 	j <= 9 ;						  
    }							      	  }							    	j ++ ) {						  
  }							      	}							    	  if ( j == 0 ) {					  
  long long sum = 0 ;					      	long sum = 0 ;						    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;		  
  for ( int j = 1 ;					      	for ( int j = 1 ;					    	  }							  
  j <= 9 ;						      	j <= 9 ;						    	  else if ( j == 9 ) {					  
  j ++ ) sum += dp [ n ] [ j ] ;			      	j ++ ) sum += dp [ n ] [ j ] ;				    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
  return sum ;						      	return sum ;						    	  }							  
}							      }								    	  else {						  
							      								    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      long sum = 0 ;						  
							      								      for ( int j = 1 ;						  
							      								      j <= 9 ;							  
							      								      j ++ ) {							  
							      								    	sum += dp [ n ] [ j ] ;					  
							      								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION	      MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION	    MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION	  MAXIMUM_PATH_SUM_POSITION_JUMPS_DIVISIBILITY_CONDITION
--							      --							    --								  --
void printMaxSum ( int arr [ ] , int n ) {		      static void printMaxSum ( int arr [ ] , int n ) {		    public static void printMaxSum ( int arr [ ] , int n ) {	  script_not_found : None
  int dp [ n ] ;					      	int dp [ ] = new int [ n ] ;				      int dp [ ] = new int [ n ] ;				  
  memset ( dp , 0 , sizeof dp ) ;			      	Arrays . fill ( dp , 0 ) ;				      Arrays . fill ( dp , 0 ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    dp [ i ] = arr [ i ] ;				      	  dp [ i ] = arr [ i ] ;				    	dp [ i ] = arr [ i ] ;					  
    int maxi = 0 ;					      	  int maxi = 0 ;					    	int maxi = 0 ;						  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    j <= sqrt ( i + 1 ) ;				      	  j <= Math . sqrt ( i + 1 ) ;				    	j <= Math . sqrt ( i + 1 ) ;				  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( ( ( i + 1 ) % j == 0 ) && ( i + 1 ) != j ) {	      	    if ( ( ( i + 1 ) % j == 0 ) && ( i + 1 ) != j ) {	    	  if ( ( ( i + 1 ) % j == 0 ) && ( i + 1 ) != j ) {	  
	if ( dp [ j - 1 ] > maxi ) maxi = dp [ j - 1 ] ;      	      if ( dp [ j - 1 ] > maxi ) maxi = dp [ j - 1 ] ;	    	    if ( dp [ j - 1 ] > maxi ) {			  
	if ( dp [ ( i + 1 ) / j - 1 ] > maxi && j != 1 ) maxi 	      if ( dp [ ( i + 1 ) / j - 1 ] > maxi && j != 1 ) maxi 	      maxi = dp [ j - 1 ] ;				  
      }							      	    }							    	    }							  
    }							      	  }							    	    if ( dp [ ( i + 1 ) / j - 1 ] > maxi && j != 1 ) {	  
    dp [ i ] += maxi ;					      	  dp [ i ] += maxi ;					    	      maxi = dp [ ( i + 1 ) / j - 1 ] ;			  
  }							      	}							    	    }							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	  }							  
  i < n ;						      	i < n ;							    	}							  
  i ++ ) cout << dp [ i ] << " " ;			      	i ++ ) System . out . print ( dp [ i ] + " " ) ;	    	dp [ i ] += maxi ;					  
}							      }								      }								  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	System . out . print ( dp [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM			      PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM			    PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM				  PRINT_A_GIVEN_MATRIX_IN_SPIRAL_FORM
--							      --							    --								  --
void spiralPrint ( int m , int n , int a [ R ] [ C ] ) {      static void spiralPrint ( int m , int n , int a [ ] [ ] ) {   public static void spiralPrint ( int m , int n , int [ ] [ ]  script_not_found : None
  int i , k = 0 , l = 0 ;				      	int i , k = 0 , l = 0 ;					      int i = 0 , k = 0 , l = 0 ;				  
  while ( k < m && l < n ) {				      	while ( k < m && l < n ) {				      while ( k < m && l < n ) {				  
    for ( i = l ;					      	  for ( i = l ;						    	for ( i = l ;						  
    i < n ;						      	  i < n ;						    	i < n ;							  
    ++ i ) {						      	  ++ i ) {						    	++ i ) System . out . print ( a [ k ] [ i ] + " " ) ;	  
      cout << a [ k ] [ i ] << " " ;			      	    System . out . print ( a [ k ] [ i ] + " " ) ;	    	k ++ ;							  
    }							      	  }							    	for ( i = k ;						  
    k ++ ;						      	  k ++ ;						    	i < m ;							  
    for ( i = k ;					      	  for ( i = k ;						    	++ i ) System . out . print ( a [ i ] [ n - 1 ] + " " ) ; 
    i < m ;						      	  i < m ;						    	n -- ;							  
    ++ i ) {						      	  ++ i ) {						    	if ( k < m ) {						  
      cout << a [ i ] [ n - 1 ] << " " ;		      	    System . out . print ( a [ i ] [ n - 1 ] + " " ) ;	    	  for ( i = n - 1 ;					  
    }							      	  }							    	  i >= l ;						  
    n -- ;						      	  n -- ;						    	  -- i ) System . out . print ( a [ m - 1 ] [ i ] + " " ) 
    if ( k < m ) {					      	  if ( k < m ) {					    	  m -- ;						  
      for ( i = n - 1 ;					      	    for ( i = n - 1 ;					    	}							  
      i >= l ;						      	    i >= l ;						    	if ( l < n ) {						  
      -- i ) {						      	    -- i ) {						    	  for ( i = m - 1 ;					  
	cout << a [ m - 1 ] [ i ] << " " ;		      	      System . out . print ( a [ m - 1 ] [ i ] + " " ) ;    	  i >= k ;						  
      }							      	    }							    	  -- i ) System . out . print ( a [ i ] [ l ] + " " ) ;	  
      m -- ;						      	    m -- ;						    	  l ++ ;						  
    }							      	  }							    	}							  
    if ( l < n ) {					      	  if ( l < n ) {					      }								  
      for ( i = m - 1 ;					      	    for ( i = m - 1 ;					    }								  
      i >= k ;						      	    i >= k ;						    								  
      -- i ) {						      	    -- i ) {						    								  
	cout << a [ i ] [ l ] << " " ;			      	      System . out . print ( a [ i ] [ l ] + " " ) ;	    								  
      }							      	    }							    								  
      l ++ ;						      	    l ++ ;						    								  
    }							      	  }							    								  
  }							      	}							    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PRODUCT_SUBSET_ARRAY				      MINIMUM_PRODUCT_SUBSET_ARRAY				    MINIMUM_PRODUCT_SUBSET_ARRAY				  MINIMUM_PRODUCT_SUBSET_ARRAY
--							      --							    --								  --
int minProductSubset ( int a [ ] , int n ) {		      static int minProductSubset ( int a [ ] , int n ) {	    public static int minProductSubset ( int a [ ] , int n ) {	  error : MINIMUM_PRODUCT_SUBSET_ARRAY.java:70: erro
  if ( n == 1 ) return a [ 0 ] ;			      	if ( n == 1 ) return a [ 0 ] ;				      if ( n == 1 ) return a [ 0 ] ;				  r: bad operand type int for unary operator '!'   i
  int max_neg = INT_MIN ;				      	int negmax = Integer . MIN_VALUE ;			      int maxNeg = Integer . MIN_VALUE ;			  f ( ! ( countNeg & 1 ) && countNeg != 0 ) prod = p
  int min_pos = INT_MAX ;				      	int posmin = Integer . MAX_VALUE ;			      int minPos = Integer . MAX_VALUE ;			  rod / maxNeg ;	^ 1 error
  int count_neg = 0 , count_zero = 0 ;			      	int count_neg = 0 , count_zero = 0 ;			      int countNeg = 0 , countZero = 0 ;			  
  int prod = 1 ;					      	int product = 1 ;					      int prod = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( a [ i ] == 0 ) {				      	  if ( a [ i ] == 0 ) {					    	if ( a [ i ] == 0 ) {					  
      count_zero ++ ;					      	    count_zero ++ ;					    	  countZero ++ ;					  
      continue ;					      	    continue ;						    	  continue ;						  
    }							      	  }							    	}							  
    if ( a [ i ] < 0 ) {				      	  if ( a [ i ] < 0 ) {					    	if ( a [ i ] < 0 ) {					  
      count_neg ++ ;					      	    count_neg ++ ;					    	  countNeg ++ ;						  
      max_neg = max ( max_neg , a [ i ] ) ;		      	    negmax = Math . max ( negmax , a [ i ] ) ;		    	  maxNeg = Math . max ( maxNeg , a [ i ] ) ;		  
    }							      	  }							    	}							  
    if ( a [ i ] > 0 ) min_pos = min ( min_pos , a [ i ] ) ;  	  if ( a [ i ] > 0 && a [ i ] < posmin ) posmin = a [ i ] ; 	if ( a [ i ] > 0 ) {					  
    prod = prod * a [ i ] ;				      	  product *= a [ i ] ;					    	  minPos = Math . min ( minPos , a [ i ] ) ;		  
  }							      	}							    	}							  
  if ( count_zero == n || ( count_neg == 0 && count_zero > 0  	if ( count_zero == n || ( count_neg == 0 && count_zero > 0  	prod = prod * a [ i ] ;					  
  if ( count_neg == 0 ) return min_pos ;		      	if ( count_neg == 0 ) return posmin ;			      }								  
  if ( ! ( count_neg & 1 ) && count_neg != 0 ) {	      	if ( count_neg % 2 == 0 && count_neg != 0 ) {		      if ( countZero == n || ( countNeg == 0 && countZero > 0 ) ) 
    prod = prod / max_neg ;				      	  product = product / negmax ;				    	return 0 ;						  
  }							      	}							      }								  
  return prod ;						      	return product ;					      if ( countNeg == 0 ) {					  
}							      }								    	return minPos ;						  
							      								      }								  
							      								      if ( ! ( countNeg & 1 ) && countNeg != 0 ) prod = prod / ma 
							      								      return prod ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS	      FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS		    FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS		  FIND_PAIRS_GIVEN_SUM_ELEMENTS_PAIR_DIFFERENT_ROWS
--							      --							    --								  --
void pairSum ( int mat [ ] [ MAX ] , int n , int sum ) {      static void pairSum ( int mat [ ] [ ] , int n , int sum ) {   public static void pairSum ( int [ ] [ ] mat , int n , int su script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sort ( mat [ i ] , mat [ i ] + n ) ;		      	i ++ ) Arrays . sort ( mat [ i ] ) ;			      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	Arrays . sort ( mat [ i ] ) ;				  
  i < n - 1 ;						      	i < n - 1 ;						      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					      i < n - 1 ;						  
    j < n ;						      	  j < n ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = i + 1 ;					  
      int left = 0 , right = n - 1 ;			      	    int left = 0 , right = n - 1 ;			    	j < n ;							  
      while ( left < n && right >= 0 ) {		      	    while ( left < n && right >= 0 ) {			    	j ++ ) {						  
	if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) ==  	      if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) ==  	  int left = 0 , right = n - 1 ;			  
	  cout << "(" << mat [ i ] [ left ] << ", " << mat [  		System . out . print ( "(" + mat [ i ] [ left ] + " 	  while ( left < n && right >= 0 ) {			  
	  left ++ ;					      		left ++ ;					    	    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) ==  
	  right -- ;					      		right -- ;					    	      System . out . print ( "(" + mat [ i ] [ left ] + " 
	}						      	      }							    	      left ++ ;						  
	else {						      	      else {						    	      right -- ;					  
	  if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < 		if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < 	    }							  
	  else right -- ;				      		else right -- ;					    	    else {						  
	}						      	      }							    	      if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < 
      }							      	    }							    		left ++ ;					  
    }							      	  }							    	      }							  
  }							      	}							    	      else {						  
}							      }								    		right -- ;					  
							      								    	      }							  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1		      FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1		    FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1		  FIND_NUMBER_TIMES_STRING_OCCURS_GIVEN_STRING_1
--							      --							    --								  --
int count ( string a , string b ) {			      static int count ( String a , String b ) {		    public static int count ( String a , String b ) {		  success : None
  int m = a . length ( ) ;				      	int m = a . length ( ) ;				      int m = a . length ( ) ;					  
  int n = b . length ( ) ;				      	int n = b . length ( ) ;				      int n = b . length ( ) ;					  
  int lookup [ m + 1 ] [ n + 1 ] = {			      	int lookup [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;	      int [ ] [ ] lookup = new int [ m + 1 ] [ n + 1 ] ;	  
    {							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
      0 }						      	i <= n ;						      i <= n ;							  
    }							      	++ i ) lookup [ 0 ] [ i ] = 0 ;				      ++ i ) {							  
    ;							      	for ( int i = 0 ;					    	lookup [ 0 ] [ i ] = 0 ;				  
    for ( int i = 0 ;					      	i <= m ;						      }								  
    i <= n ;						      	++ i ) lookup [ i ] [ 0 ] = 1 ;				      for ( int i = 0 ;						  
    ++ i ) lookup [ 0 ] [ i ] = 0 ;			      	for ( int i = 1 ;					      i <= m ;							  
    for ( int i = 0 ;					      	i <= m ;						      ++ i ) {							  
    i <= m ;						      	i ++ ) {						    	lookup [ i ] [ 0 ] = 1 ;				  
    ++ i ) lookup [ i ] [ 0 ] = 1 ;			      	  for ( int j = 1 ;					      }								  
    for ( int i = 1 ;					      	  j <= n ;						      for ( int i = 1 ;						  
    i <= m ;						      	  j ++ ) {						      i <= m ;							  
    i ++ ) {						      	    if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) loo   ++ i ) {							  
      for ( int j = 1 ;					      	    else lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] ;	    	for ( int j = 1 ;					  
      j <= n ;						      	  }							    	j <= n ;						  
      j ++ ) {						      	}							    	++ j ) {						  
	if ( a [ i - 1 ] == b [ j - 1 ] ) lookup [ i ] [ j ]  	return lookup [ m ] [ n ] ;				    	  if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {	  
	else lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] ;    }								    	    lookup [ i ] [ j ] = lookup [ i - 1 ] [ j - 1 ] + loo 
      }							      								    	  }							  
    }							      								    	  else {						  
    return lookup [ m ] [ n ] ;				      								    	    lookup [ i ] [ j ] = lookup [ i - 1 ] [ j ] ;	  
  }							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return lookup [ m ] [ n ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_ FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_ FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_ FIND_LENGTH_LONGEST_SUBSEQUENCE_ONE_STRING_SUBSTRING_ANOTHER_
--							      --							    --								  --
int maxSubsequenceSubstring ( char x [ ] , char y [ ] , int n static int maxSubsequenceSubstring ( char x [ ] , char y [ ]  public static int maxSubsequenceSubstring ( char x [ ] , char script_not_found : None
  int dp [ MAX ] [ MAX ] ;				      	int dp [ ] [ ] = new int [ MAX ] [ MAX ] ;		      int dp [ ] [ ] = new int [ MAX ] [ MAX ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) dp [ i ] [ j ] = 0 ;				      	j ++ ) dp [ i ] [ j ] = 0 ;				      j ++ ) dp [ i ] [ j ] = 0 ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    j <= n ;						      	  j <= n ;						    	j <= n ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 +  	    if ( x [ j - 1 ] == y [ i - 1 ] ) dp [ i ] [ j ] = 1 +  	  if ( x [ j - 1 ] == y [ i - 1 ] ) {			  
      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;	      	    else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		    	    dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;	  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  int ans = 0 ;						      	int ans = 0 ;						    	    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	  }							  
  i <= m ;						      	i <= m ;						    	}							  
  i ++ ) ans = max ( ans , dp [ i ] [ n ] ) ;		      	i ++ ) ans = Math . max ( ans , dp [ i ] [ n ] ) ;	      }								  
  return ans ;						      	return ans ;						      int ans = 0 ;						  
}							      }								      for ( int i = 1 ;						  
							      								      i <= m ;							  
							      								      i ++ ) {							  
							      								    	ans = Math . max ( ans , dp [ i ] [ n ] ) ;		  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		      GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER		    GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER			  GENERATE_PYTHAGORAS_TRIPLET_SINGLE_INTEGER
--							      --							    --								  --
void evaluate ( long long int n ) {			      static void evaluate ( int n ) {				    public static void evaluate ( long n ) {			  script_not_found : None
  if ( n == 1 || n == 2 ) printf ( "No Pythagoras Triplet exi 	if ( n == 1 || n == 2 ) System . out . println ( "No Pythag   if ( n == 1 || n == 2 ) {					  
  else if ( n % 2 == 0 ) {				      	else if ( n % 2 == 0 ) {				    	System . out . println ( "No Pythagoras Triplet exists" ) 
    long long int var = 1LL * n * n / 4 ;		      	  int var = 1 * n * n / 4 ;				      }								  
    printf ( "Pythagoras Triplets exist i.e. " ) ;	      	  System . out . print ( "Pythagoras Triplets " + "exist i.   else if ( n % 2 == 0 ) {					  
    printf ( "%lld %lld %lld" , n , var - 1 , var + 1 ) ;     	  System . out . print ( n + " " ) ;			    	long var = 1L L * n * n / 4 ;				  
  }							      	  System . out . print ( var - 1 + " " ) ;		    	System . out . println ( "Pythagoras Triplets exist i.e.  
  else if ( n % 2 != 0 ) {				      	  System . out . println ( var + 1 + " " ) ;		    	System . out . println ( n + " " + var - 1 + " " + var +  
    long long int var = 1LL * n * n + 1 ;		      	}							      }								  
    printf ( "Pythagoras Triplets exist i.e. " ) ;	      	else if ( n % 2 != 0 ) {				      else if ( n % 2 != 0 ) {					  
    printf ( "%lld %lld %lld" , n , var / 2 - 1 , var / 2 ) ; 	  int var = 1 * n * n + 1 ;				    	long var = 1L L * n * n + 1 ;				  
  }							      	  System . out . print ( "Pythagoras Triplets " + "exist i. 	System . out . println ( "Pythagoras Triplets exist i.e.  
}							      	  System . out . print ( n + " " ) ;			    	System . out . println ( n + " " + var / 2 - 1 + " " + va 
							      	  System . out . print ( var / 2 - 1 + " " ) ;		      }								  
							      	  System . out . println ( var / 2 + " " ) ;		    }								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HIGHWAY_BILLBOARD_PROBLEM				      HIGHWAY_BILLBOARD_PROBLEM					    HIGHWAY_BILLBOARD_PROBLEM					  HIGHWAY_BILLBOARD_PROBLEM
--							      --							    --								  --
int maxRevenue ( int m , int x [ ] , int revenue [ ] , int n  static int maxRevenue ( int m , int [ ] x , int [ ] revenue , public static int maxRevenue ( int m , int [ ] x , int [ ] re success : None
  int maxRev [ m + 1 ] ;				      	int [ ] maxRev = new int [ m + 1 ] ;			      int [ ] maxRev = new int [ m + 1 ] ;			  
  memset ( maxRev , 0 , sizeof ( maxRev ) ) ;		      	for ( int i = 0 ;					      Arrays . fill ( maxRev , 0 ) ;				  
  int nxtbb = 0 ;					      	i < m + 1 ;						      int nxtbb = 0 ;						  
  for ( int i = 1 ;					      	i ++ ) maxRev [ i ] = 0 ;				      for ( int i = 1 ;						  
  i <= m ;						      	int nxtbb = 0 ;						      i <= m ;							  
  i ++ ) {						      	for ( int i = 1 ;					      i ++ ) {							  
    if ( nxtbb < n ) {					      	i <= m ;						    	if ( nxtbb < n ) {					  
      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] 	i ++ ) {						    	  if ( x [ nxtbb ] != i ) {				  
      else {						      	  if ( nxtbb < n ) {					    	    maxRev [ i ] = maxRev [ i - 1 ] ;			  
	if ( i <= t ) maxRev [ i ] = max ( maxRev [ i - 1 ] , 	    if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] 	  }							  
	else maxRev [ i ] = max ( maxRev [ i - t - 1 ] + reve 	    else {						    	  else {						  
	nxtbb ++ ;					      	      if ( i <= t ) maxRev [ i ] = Math . max ( maxRev [ i  	    if ( i <= t ) {					  
      }							      	      else maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] 	      maxRev [ i ] = Math . max ( maxRev [ i - 1 ] , reve 
    }							      	      nxtbb ++ ;					    	    }							  
    else maxRev [ i ] = maxRev [ i - 1 ] ;		      	    }							    	    else {						  
  }							      	  }							    	      maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] +  
  return maxRev [ m ] ;					      	  else maxRev [ i ] = maxRev [ i - 1 ] ;		    	    }							  
}							      	}							    	    nxtbb ++ ;						  
							      	return maxRev [ m ] ;					    	  }							  
							      }								    	}							  
							      								    	else {							  
							      								    	  maxRev [ i ] = maxRev [ i - 1 ] ;			  
							      								    	}							  
							      								      }								  
							      								      return maxRev [ m ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE CLUSTERINGPARTITIONING_AN_ARRAY_SUCH_THAT_SUM_OF_SQUARE_DIFFE
--							      --							    --								  --
int minCost ( int a [ ] , int n , int k ) {		      static int minCost ( int a [ ] , int n , int k ) {	    public static int minCost ( int a [ ] , int n , int k ) {	  script_not_found : None
  int dp [ n + 1 ] [ k + 1 ] ;				      	int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;		      int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j <= k ;						      	j <= k ;						      j <= k ;							  
  j ++ ) dp [ i ] [ j ] = inf ;				      	j ++ ) dp [ i ] [ j ] = inf ;				      j ++ ) dp [ i ] [ j ] = inf ;				  
  dp [ 0 ] [ 0 ] = 0 ;					      	dp [ 0 ] [ 0 ] = 0 ;					      dp [ 0 ] [ 0 ] = 0 ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  j <= k ;						      	j <= k ;						      j <= k ;							  
  j ++ ) for ( int m = i - 1 ;				      	j ++ ) for ( int m = i - 1 ;				      j ++ ) for ( int m = i - 1 ;				  
  m >= 0 ;						      	m >= 0 ;						      m >= 0 ;							  
  m -- ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ m ] [ j 	m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [    m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [  
  return dp [ n ] [ k ] ;				      	return dp [ n ] [ k ] ;					      return dp [ n ] [ k ] ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		      COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		    COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1		  COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING_1
--							      --							    --								  --
int countPS ( int i , int j ) {				      static int countPS ( int i , int j ) {			    public static int countPS ( int i , int j ) {		  script_not_found : None
  if ( i >= n || j < 0 ) return 0 ;			      	if ( i >= n || j < 0 ) return 0 ;			      if ( i >= n || j < 0 ) return 0 ;				  
  if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ;	      	if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ;	      if ( dp [ i ] [ j ] != - 1 ) return dp [ i ] [ j ] ;	  
  if ( abs ( i - j ) == 1 ) {				      	if ( ( i - j == 1 ) || ( i - j == - 1 ) ) {		      if ( Math . abs ( i - j ) == 1 ) {			  
    if ( str [ i ] == str [ j ] ) return dp [ i ] [ j ] = 3 ; 	  if ( str . charAt ( i ) == str . charAt ( j ) ) return dp 	if ( str [ i ] == str [ j ] ) return dp [ i ] [ j ] = 3 ; 
    else return dp [ i ] [ j ] = 2 ;			      	  else return dp [ i ] [ j ] = 2 ;			    	else return dp [ i ] [ j ] = 2 ;			  
  }							      	}							      }								  
  if ( i == j ) return dp [ 1 ] [ j ] = 1 ;		      	if ( i == j ) return dp [ 1 ] [ j ] = 1 ;		      if ( i == j ) return dp [ 1 ] [ j ] = 1 ;			  
  else if ( str [ i ] == str [ j ] ) return dp [ i ] [ j ] =  	else if ( str . charAt ( i ) == str . charAt ( j ) ) return   else if ( str [ i ] == str [ j ] ) return dp [ i ] [ j ] =  
  else return dp [ i ] [ j ] = countPS ( i + 1 , j ) + countP 	else return dp [ i ] [ j ] = countPS ( i + 1 , j ) + countP   else return dp [ i ] [ j ] = countPS ( i + 1 , j ) + countP 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS			      FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS			    FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS			  FIND_K_PAIRS_SMALLEST_SUMS_TWO_ARRAYS
--							      --							    --								  --
void kSmallestPair ( int arr1 [ ] , int n1 , int arr2 [ ] , i static void kSmallestPair ( int arr1 [ ] , int n1 , int arr2  public static void kSmallestPair ( int arr1 [ ] , int n1 , in script_not_found : None
  if ( k > n1 * n2 ) {					      	if ( k > n1 * n2 ) {					      if ( k > n1 * n2 ) {					  
    cout << "k pairs don't exist" ;			      	  System . out . print ( "k pairs don't exist" ) ;	    	System . out . println ( "k pairs don't exist" ) ;	  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  int index2 [ n1 ] ;					      	int index2 [ ] = new int [ n1 ] ;			      int index2 [ ] = new int [ n1 ] ;				  
  memset ( index2 , 0 , sizeof ( index2 ) ) ;		      	while ( k > 0 ) {					      Arrays . fill ( index2 , 0 ) ;				  
  while ( k > 0 ) {					      	  int min_sum = Integer . MAX_VALUE ;			      while ( k > 0 ) {						  
    int min_sum = INT_MAX ;				      	  int min_index = 0 ;					    	int minSum = Integer . MAX_VALUE ;			  
    int min_index = 0 ;					      	  for ( int i1 = 0 ;					    	int minIndex = 0 ;					  
    for ( int i1 = 0 ;					      	  i1 < n1 ;						    	for ( int i1 = 0 ;					  
    i1 < n1 ;						      	  i1 ++ ) {						    	i1 < n1 ;						  
    i1 ++ ) {						      	    if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2  	i1 ++ ) {						  
      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2  	      min_index = i1 ;					    	  if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2  
	min_index = i1 ;				      	      min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;	    	    minIndex = i1 ;					  
	min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;      	    }							    	    minSum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;	  
      }							      	  }							    	  }							  
    }							      	  System . out . print ( "(" + arr1 [ min_index ] + ", " +  	}							  
    cout << "(" << arr1 [ min_index ] << ", " << arr2 [ index 	  index2 [ min_index ] ++ ;				    	System . out . println ( "(" + arr1 [ minIndex ] + ", " + 
    index2 [ min_index ] ++ ;				      	  k -- ;						    	index2 [ minIndex ] ++ ;				  
    k -- ;						      	}							    	k -- ;							  
  }							      }								      }								  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL	      FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL		    FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL		  FIND_NUMBER_TRANSFORMATION_MAKE_TWO_MATRIX_EQUAL
--							      --							    --								  --
int countOps ( int A [ ] [ MAX ] , int B [ ] [ MAX ] , int m  static int countOps ( int A [ ] [ ] , int B [ ] [ ] , int m , public static int countOps ( int A [ ] [ ] , int B [ ] [ ] ,  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < m ;						      	j < m ;							      j < m ;							  
  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;		      	j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;			      j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;			  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  j < m ;						      	j < m ;							      j < m ;							  
  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + 	j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] +   j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + 
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) result += abs ( A [ i ] [ 0 ] ) ;		      	i ++ ) result += Math . abs ( A [ i ] [ 0 ] ) ;		      i ++ ) result += Math . abs ( A [ i ] [ 0 ] ) ;		  
  for ( int j = 0 ;					      	for ( int j = 0 ;					      for ( int j = 0 ;						  
  j < m ;						      	j < m ;							      j < m ;							  
  j ++ ) result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;    	j ++ ) result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ]   j ++ ) result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] 
  return ( result ) ;					      	return ( result ) ;					      return ( result ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT		      CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT			    CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT			  CHECK_GIVEN_MATRIX_IS_MAGIC_SQUARE_OR_NOT
--							      --							    --								  --
bool isMagicSquare ( int mat [ ] [ N ] ) {		      static boolean isMagicSquare ( int mat [ ] [ ] ) {	    public static boolean isMagicSquare ( int [ ] [ ] mat ) {	  script_not_found : None
  int sum = 0 , sum2 = 0 ;				      	int sum = 0 , sum2 = 0 ;				      int sum = 0 , sum2 = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) sum = sum + mat [ i ] [ i ] ;			      	i ++ ) sum = sum + mat [ i ] [ i ] ;			      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	sum = sum + mat [ i ] [ i ] ;				  
  i < N ;						      	i < N ;							      }								  
  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;	      	i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;		      for ( int i = 0 ;						  
  if ( sum != sum2 ) return false ;			      	if ( sum != sum2 ) return false ;			      i < N ;							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      i ++ ) {							  
  i < N ;						      	i < N ;							    	sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;			  
  i ++ ) {						      	i ++ ) {						      }								  
    int rowSum = 0 ;					      	  int rowSum = 0 ;					      if ( sum != sum2 ) {					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	return false ;						  
    j < N ;						      	  j < N ;						      }								  
    j ++ ) rowSum += mat [ i ] [ j ] ;			      	  j ++ ) rowSum += mat [ i ] [ j ] ;			      for ( int i = 0 ;						  
    if ( rowSum != sum ) return false ;			      	  if ( rowSum != sum ) return false ;			      i < N ;							  
  }							      	}							      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	int rowSum = 0 ;					  
  i < N ;						      	i < N ;							    	for ( int j = 0 ;					  
  i ++ ) {						      	i ++ ) {						    	j < N ;							  
    int colSum = 0 ;					      	  int colSum = 0 ;					    	j ++ ) {						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	  rowSum += mat [ i ] [ j ] ;				  
    j < N ;						      	  j < N ;						    	}							  
    j ++ ) colSum += mat [ j ] [ i ] ;			      	  j ++ ) colSum += mat [ j ] [ i ] ;			    	if ( rowSum != sum ) {					  
    if ( sum != colSum ) return false ;			      	  if ( sum != colSum ) return false ;			    	  return false ;					  
  }							      	}							    	}							  
  return true ;						      	return true ;						      }								  
}							      }								      for ( int i = 0 ;						  
							      								      i < N ;							  
							      								      i ++ ) {							  
							      								    	int colSum = 0 ;					  
							      								    	for ( int j = 0 ;					  
							      								    	j < N ;							  
							      								    	j ++ ) {						  
							      								    	  colSum += mat [ j ] [ i ] ;				  
							      								    	}							  
							      								    	if ( sum != colSum ) {					  
							      								    	  return false ;					  
							      								    	}							  
							      								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES	      MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES	    MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES	  MODIFY_ARRAY_TO_MAXIMIZE_SUM_OF_ADJACENT_DIFFERENCES
--							      --							    --								  --
int maximumDifferenceSum ( int arr [ ] , int N ) {	      static int maximumDifferenceSum ( int arr [ ] , int N ) {	    public static int maximumDifferenceSum ( int arr [ ] , int N  script_not_found : None
  int dp [ N ] [ 2 ] ;					      	int dp [ ] [ ] = new int [ N ] [ 2 ] ;			      int dp [ ] [ ] = new int [ N ] [ 2 ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;		      	i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;		      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;			  
  i < ( N - 1 ) ;					      	i < ( N - 1 ) ;						      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1  	  dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i   i < ( N - 1 ) ;						  
    dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i 	  dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math .   i ++ ) {							  
  }							      	}							    	dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i 
  return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ;    	return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] 	dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math . 
}							      }								      }								  
							      								      return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	      LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	    LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS	  LARGEST_INCREASING_SUBSEQUENCE_OF_CONSECUTIVE_INTEGERS
--							      --							    --								  --
int findLIS ( int A [ ] , int n ) {			      static void findLIS ( int A [ ] , int n ) {		    public static int findLIS ( int A [ ] , int n ) {		  script_not_found : None
  unordered_map < int , int > hash ;			      	Map < Integer , Integer > hash = new HashMap < Integer , In   HashMap < Integer , Integer > hash = new HashMap < > ( ) ;  
  int LIS_size = 1 ;					      	int LIS_size = 1 ;					      int LIS_size = 1 ;					  
  int LIS_index = 0 ;					      	int LIS_index = 0 ;					      int LIS_index = 0 ;					  
  hash [ A [ 0 ] ] = 1 ;				      	hash . put ( A [ 0 ] , 1 ) ;				      hash . put ( A [ 0 ] , 1 ) ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    hash [ A [ i ] ] = hash [ A [ i ] - 1 ] + 1 ;	      	  hash . put ( A [ i ] , hash . get ( A [ i ] - 1 ) == null 	hash . put ( A [ i ] , hash . get ( A [ i ] - 1 ) + 1 ) ; 
    if ( LIS_size < hash [ A [ i ] ] ) {		      	  if ( LIS_size < hash . get ( A [ i ] ) ) {		    	if ( LIS_size < hash . get ( A [ i ] ) ) {		  
      LIS_size = hash [ A [ i ] ] ;			      	    LIS_size = hash . get ( A [ i ] ) ;			    	  LIS_size = hash . get ( A [ i ] ) ;			  
      LIS_index = A [ i ] ;				      	    LIS_index = A [ i ] ;				    	  LIS_index = A [ i ] ;					  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << "LIS_size = " << LIS_size << "\n" ;		      	System . out . println ( "LIS_size = " + LIS_size ) ;	      System . out . println ( "LIS_size = " + LIS_size + "\n" )  
  cout << "LIS : " ;					      	System . out . print ( "LIS : " ) ;			      System . out . print ( "LIS : " ) ;			  
  int start = LIS_index - LIS_size + 1 ;		      	int start = LIS_index - LIS_size + 1 ;			      int start = LIS_index - LIS_size + 1 ;			  
  while ( start <= LIS_index ) {			      	while ( start <= LIS_index ) {				      while ( start <= LIS_index ) {				  
    cout << start << " " ;				      	  System . out . print ( start + " " ) ;		    	System . out . print ( start + " " ) ;			  
    start ++ ;						      	  start ++ ;						    	start ++ ;						  
  }							      	}							      }								  
}							      }								      return LIS_size ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE		      COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE		    COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE			  COUNT_DISTINCT_OCCURRENCES_AS_A_SUBSEQUENCE
--							      --							    --								  --
int findSubsequenceCount ( string S , string T ) {	      static int findSubsequenceCount ( String S , String T ) {	    public static int findSubsequenceCount ( String S , String T  success : None
  int m = T . length ( ) , n = S . length ( ) ;		      	int m = T . length ( ) ;				      int m = T . length ( ) , n = S . length ( ) ;		  
  if ( m > n ) return 0 ;				      	int n = S . length ( ) ;				      if ( m > n ) return 0 ;					  
  int mat [ m + 1 ] [ n + 1 ] ;				      	if ( m > n ) return 0 ;					      int [ ] [ ] mat = new int [ m + 1 ] [ n + 1 ] ;		  
  for ( int i = 1 ;					      	int mat [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      for ( int i = 1 ;						  
  i <= m ;						      	for ( int i = 1 ;					      i <= m ;							  
  i ++ ) mat [ i ] [ 0 ] = 0 ;				      	i <= m ;						      i ++ ) {							  
  for ( int j = 0 ;					      	i ++ ) mat [ i ] [ 0 ] = 0 ;				    	mat [ i ] [ 0 ] = 0 ;					  
  j <= n ;						      	for ( int j = 0 ;					      }								  
  j ++ ) mat [ 0 ] [ j ] = 1 ;				      	j <= n ;						      for ( int j = 0 ;						  
  for ( int i = 1 ;					      	j ++ ) mat [ 0 ] [ j ] = 1 ;				      j <= n ;							  
  i <= m ;						      	for ( int i = 1 ;					      j ++ ) {							  
  i ++ ) {						      	i <= m ;						    	mat [ 0 ] [ j ] = 1 ;					  
    for ( int j = 1 ;					      	i ++ ) {						      }								  
    j <= n ;						      	  for ( int j = 1 ;					      for ( int i = 1 ;						  
    j ++ ) {						      	  j <= n ;						      i <= m ;							  
      if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat 	  j ++ ) {						      i ++ ) {							  
      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i -  	    if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) mat 	for ( int j = 1 ;					  
    }							      	    else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i -  	j <= n ;						  
  }							      	  }							    	j ++ ) {						  
  return mat [ m ] [ n ] ;				      	}							    	  if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) {	  
}							      	return mat [ m ] [ n ] ;				    	    mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ;		  
							      }								    	  }							  
							      								    	  else {						  
							      								    	    mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return mat [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX	      MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX	    MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX		  MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX
--							      --							    --								  --
int maxCost ( int mat [ ] [ MAX ] , int N ) {		      public static int maxCost ( int mat [ ] [ ] , int N ) {	    public static int maxCost ( int [ ] [ ] mat , int N ) {	  error : Exception in thread "main" java.lang.Array
  int dp [ N ] [ N ] ;					      	int dp [ ] [ ] = new int [ N ] [ N ] ;			      int [ ] [ ] dp = new int [ N ] [ N ] ;			  StoreException: java.lang.Integer 	at java.base/ja
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ;			      Arrays . fill ( dp , 0 ) ;				  va.util.Arrays.fill(Arrays.java:3638) 	at MAXIMUM_
  dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ;			      	for ( int i = 1 ;					      dp [ 0 ] [ 0 ] = mat [ 0 ] [ 0 ] ;			  WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATRIX.f_fille
  for ( int i = 1 ;					      	i < N ;							      for ( int i = 1 ;						  d(MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT_LAST_ROW_MATR
  i < N ;						      	i ++ ) dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0    i < N ;							  IX.java:34) 	at MAXIMUM_WEIGHT_PATH_ENDING_ELEMENT
  i ++ ) dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0  	for ( int i = 1 ;					      i ++ ) {							  _LAST_ROW_MATRIX.main(MAXIMUM_WEIGHT_PATH_ENDING_E
  for ( int i = 1 ;					      	i < N ;							    	dp [ i ] [ 0 ] = mat [ i ] [ 0 ] + dp [ i - 1 ] [ 0 ] ;	  LEMENT_LAST_ROW_MATRIX.java:84)
  i < N ;						      	i ++ ) for ( int j = 1 ;				      }								  
  i ++ ) for ( int j = 1 ;				      	j < i + 1 && j < N ;					      for ( int i = 1 ;						  
  j < i + 1 && j < N ;					      	j ++ ) dp [ i ] [ j ] = mat [ i ] [ j ] + Math . max ( dp [   i < N ;							  
  j ++ ) dp [ i ] [ j ] = mat [ i ] [ j ] + max ( dp [ i - 1  	int result = 0 ;					      i ++ ) {							  
  int result = 0 ;					      	for ( int i = 0 ;					    	for ( int j = 1 ;					  
  for ( int i = 0 ;					      	i < N ;							    	j < i + 1 && j < N ;					  
  i < N ;						      	i ++ ) if ( result < dp [ N - 1 ] [ i ] ) result = dp [ N - 	j ++ ) {						  
  i ++ ) if ( result < dp [ N - 1 ] [ i ] ) result = dp [ N - 	return result ;						    	  dp [ i ] [ j ] = mat [ i ] [ j ] + Math . max ( dp [ i  
  return result ;					      }								    	}							  
}							      								      }								  
							      								      int result = 0 ;						  
							      								      for ( int i = 0 ;						  
							      								      i < N ;							  
							      								      i ++ ) if ( result < dp [ N - 1 ] [ i ] ) result = dp [ N - 
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS     NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	    NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS	  NUMBER_OF_WAYS_TO_ARRANGE_N_ITEMS_UNDER_GIVEN_CONSTRAINTS
--							      --							    --								  --
int waysToArrange ( int N , int K , int k [ ] ) {	      static int waysToArrange ( int N , int K , int [ ] k ) {	    public static int waysToArrange ( int N , int K , int [ ] k ) script_not_found : None
  int C [ N + 1 ] [ N + 1 ] ;				      	int [ ] [ ] C = new int [ N + 1 ] [ N + 1 ] ;		      int [ ] [ ] C = new int [ N + 1 ] [ N + 1 ] ;		  
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i <= N ;						      	i <= N ;						      i <= N ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j <= i ;						      	  j <= i ;						    	j <= i ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( j == 0 || j == i ) C [ i ] [ j ] = 1 ;	      	    if ( j == 0 || j == i ) {				    	  if ( j == 0 || j == i ) {				  
      else C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i -  	      C [ i ] [ j ] = 1 ;				    	    C [ i ] [ j ] = 1 ;					  
    }							      	    }							    	  }							  
  }							      	    else {						    	  else {						  
  int dp [ K ] ;					      	      C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] 	    C [ i ] [ j ] = ( C [ i - 1 ] [ j - 1 ] + C [ i - 1 ] 
  int count = 0 ;					      	    }							    	  }							  
  dp [ 0 ] = 1 ;					      	  }							    	}							  
  for ( int i = 0 ;					      	}							      }								  
  i < K ;						      	int [ ] dp = new int [ K + 1 ] ;			      int [ ] dp = new int [ K ] ;				  
  i ++ ) {						      	int count = 0 ;						      int count = 0 ;						  
    dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] [ k 	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
    count += k [ i ] ;					      	for ( i = 0 ;						      for ( int i = 0 ;						  
  }							      	i < K ;							      i < K ;							  
  return dp [ K ] ;					      	i ++ ) {						      i ++ ) {							  
}							      	  dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] [ k 	dp [ i + 1 ] = ( dp [ i ] * C [ count + k [ i ] - 1 ] [ k 
							      	  count += k [ i ] ;					    	count += k [ i ] ;					  
							      	}							      }								  
							      	return dp [ K ] ;					      return dp [ K ] ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MATRIX_ANTISPIRAL_FORM				      PRINT_MATRIX_ANTISPIRAL_FORM				    PRINT_MATRIX_ANTISPIRAL_FORM				  PRINT_MATRIX_ANTISPIRAL_FORM
--							      --							    --								  --
void antiSpiralTraversal ( int m , int n , int a [ R ] [ C ]  public static void antiSpiralTraversal ( int m , int n , int  public static void antiSpiralTraversal ( int m , int n , int  script_not_found : None
  int i , k = 0 , l = 0 ;				      	int i , k = 0 , l = 0 ;					      int i = 0 , k = 0 , l = 0 ;				  
  stack < int > stk ;					      	Stack < Integer > stk = new Stack < Integer > ( ) ;	      Stack < Integer > stk = new Stack < > ( ) ;		  
  while ( k <= m && l <= n ) {				      	while ( k <= m && l <= n ) {				      while ( k <= m && l <= n ) {				  
    for ( i = l ;					      	  for ( i = l ;						    	for ( i = l ;						  
    i <= n ;						      	  i <= n ;						    	i <= n ;						  
    ++ i ) stk . push ( a [ k ] [ i ] ) ;		      	  ++ i ) stk . push ( a [ k ] [ i ] ) ;			    	++ i ) {						  
    k ++ ;						      	  k ++ ;						    	  stk . push ( a [ k ] [ i ] ) ;			  
    for ( i = k ;					      	  for ( i = k ;						    	}							  
    i <= m ;						      	  i <= m ;						    	k ++ ;							  
    ++ i ) stk . push ( a [ i ] [ n ] ) ;		      	  ++ i ) stk . push ( a [ i ] [ n ] ) ;			    	for ( i = k ;						  
    n -- ;						      	  n -- ;						    	i <= m ;						  
    if ( k <= m ) {					      	  if ( k <= m ) {					    	++ i ) {						  
      for ( i = n ;					      	    for ( i = n ;					    	  stk . push ( a [ i ] [ n ] ) ;			  
      i >= l ;						      	    i >= l ;						    	}							  
      -- i ) stk . push ( a [ m ] [ i ] ) ;		      	    -- i ) stk . push ( a [ m ] [ i ] ) ;		    	n -- ;							  
      m -- ;						      	    m -- ;						    	if ( k <= m ) {						  
    }							      	  }							    	  for ( i = n ;						  
    if ( l <= n ) {					      	  if ( l <= n ) {					    	  i >= l ;						  
      for ( i = m ;					      	    for ( i = m ;					    	  -- i ) {						  
      i >= k ;						      	    i >= k ;						    	    stk . push ( a [ m ] [ i ] ) ;			  
      -- i ) stk . push ( a [ i ] [ l ] ) ;		      	    -- i ) stk . push ( a [ i ] [ l ] ) ;		    	  }							  
      l ++ ;						      	    l ++ ;						    	  m -- ;						  
    }							      	  }							    	}							  
  }							      	}							    	if ( l <= n ) {						  
  while ( ! stk . empty ( ) ) {				      	while ( ! stk . empty ( ) ) {				    	  for ( i = m ;						  
    cout << stk . top ( ) << " " ;			      	  System . out . print ( stk . peek ( ) + " " ) ;	    	  i >= k ;						  
    stk . pop ( ) ;					      	  stk . pop ( ) ;					    	  -- i ) {						  
  }							      	}							    	    stk . push ( a [ i ] [ l ] ) ;			  
}							      }								    	  }							  
							      								    	  l ++ ;						  
							      								    	}							  
							      								      }								  
							      								      while ( ! stk . isEmpty ( ) ) {				  
							      								    	System . out . print ( stk . peek ( ) + " " ) ;		  
							      								    	stk . pop ( ) ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MEDIAN_ROW_WISE_SORTED_MATRIX			      FIND_MEDIAN_ROW_WISE_SORTED_MATRIX			    FIND_MEDIAN_ROW_WISE_SORTED_MATRIX				  FIND_MEDIAN_ROW_WISE_SORTED_MATRIX
--							      --							    --								  --
int binaryMedian ( int m [ ] [ MAX ] , int r , int c ) {      static int binaryMedian ( int m [ ] [ ] , int r , int c ) {   public static int binaryMedian ( int m [ ] [ ] , int r , int  error : FIND_MEDIAN_ROW_WISE_SORTED_MATRIX.java:63
  int min = INT_MAX , max = INT_MIN ;			      	int max = Integer . MIN_VALUE ;				      int min = Integer . MAX_VALUE , max = Integer . MIN_VALUE ; : error: bad operand types for binary operator '+'
  for ( int i = 0 ;					      	int min = Integer . MAX_VALUE ;				      for ( int i = 0 ;						  	 place += Arrays . binarySearch ( m [ i ] ,
  i < r ;						      	for ( int i = 0 ;					      i < r ;							  m [ i ] + c , mid ) - m [ i ] ;
  i ++ ) {						      	i < r ;							      ++ i ) {							  					 ^   first t
    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ;	      	i ++ ) {						    	if ( m [ i ] [ 0 ] < min ) {				  ype:	int[]	second type: int 1 error
    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ;  	  if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ;	    	  min = m [ i ] [ 0 ] ;					  
  }							      	  if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ;  	}							  
  int desired = ( r * c + 1 ) / 2 ;			      	}							    	if ( m [ i ] [ c - 1 ] > max ) {			  
  while ( min < max ) {					      	int desired = ( r * c + 1 ) / 2 ;			    	  max = m [ i ] [ c - 1 ] ;				  
    int mid = min + ( max - min ) / 2 ;			      	while ( min < max ) {					    	}							  
    int place = 0 ;					      	  int mid = min + ( max - min ) / 2 ;			      }								  
    for ( int i = 0 ;					      	  int place = 0 ;					      int desired = ( r * c + 1 ) / 2 ;				  
    i < r ;						      	  int get = 0 ;						      while ( min < max ) {					  
    ++ i ) place += upper_bound ( m [ i ] , m [ i ] + c , mid 	  for ( int i = 0 ;					    	int mid = min + ( max - min ) / 2 ;			  
    if ( place < desired ) min = mid + 1 ;		      	  i < r ;						    	int place = 0 ;						  
    else max = mid ;					      	  ++ i ) {						    	for ( int i = 0 ;					  
  }							      	    get = Arrays . binarySearch ( m [ i ] , mid ) ;	    	i < r ;							  
  return min ;						      	    if ( get < 0 ) get = Math . abs ( get ) - 1 ;	    	++ i ) {						  
}							      	    else {						    	  place += Arrays . binarySearch ( m [ i ] , m [ i ] + c  
							      	      while ( get < m [ i ] . length && m [ i ] [ get ] ==  	}							  
							      	    }							    	if ( place < desired ) {				  
							      	    place = place + get ;				    	  min = mid + 1 ;					  
							      	  }							    	}							  
							      	  if ( place < desired ) min = mid + 1 ;		    	else {							  
							      	  else max = mid ;					    	  max = mid ;						  
							      	}							    	}							  
							      	return min ;						      }								  
							      }								      return min ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_GREATER_FREQUENCY_ELEMENT				      NEXT_GREATER_FREQUENCY_ELEMENT				    NEXT_GREATER_FREQUENCY_ELEMENT				  NEXT_GREATER_FREQUENCY_ELEMENT
--							      --							    --								  --
void NFG ( int a [ ] , int n , int freq [ ] ) {		      static void NFG ( int a [ ] , int n , int freq [ ] ) {	    public static void NFG ( int a [ ] , int n , int freq [ ] ) { script_not_found : None
  stack < int > s ;					      	Stack < Integer > s = new Stack < Integer > ( ) ;	      Stack < Integer > s = new Stack < > ( ) ;			  
  s . push ( 0 ) ;					      	s . push ( 0 ) ;					      s . push ( 0 ) ;						  
  int res [ n ] = {					      	int res [ ] = new int [ n ] ;				      int res [ ] = new int [ n ] ;				  
    0 }							      	for ( int i = 0 ;					      for ( int i = 1 ;						  
    ;							      	i < n ;							      i < n ;							  
    for ( int i = 1 ;					      	i ++ ) res [ i ] = 0 ;					      i ++ ) {							  
    i < n ;						      	for ( int i = 1 ;					    	if ( freq [ a [ s . pop ( ) ] ] > freq [ a [ i ] ] ) {	  
    i ++ ) {						      	i < n ;							    	  s . push ( i ) ;					  
      if ( freq [ a [ s . top ( ) ] ] > freq [ a [ i ] ] ) s  	i ++ ) {						    	}							  
      else {						      	  if ( freq [ a [ s . peek ( ) ] ] > freq [ a [ i ] ] ) s . 	else {							  
	while ( freq [ a [ s . top ( ) ] ] < freq [ a [ i ] ] 	  else {						    	  while ( freq [ a [ s . pop ( ) ] ] < freq [ a [ i ] ] & 
	  res [ s . top ( ) ] = a [ i ] ;		      	    while ( freq [ a [ s . peek ( ) ] ] < freq [ a [ i ] ]  	    res [ s . pop ( ) ] = a [ i ] ;			  
	  s . pop ( ) ;					      	      res [ s . peek ( ) ] = a [ i ] ;			    	    s . pop ( ) ;					  
	}						      	      s . pop ( ) ;					    	  }							  
	s . push ( i ) ;				      	    }							    	  s . push ( i ) ;					  
      }							      	    s . push ( i ) ;					    	}							  
    }							      	  }							      }								  
    while ( ! s . empty ( ) ) {				      	}							      while ( ! s . isEmpty ( ) ) {				  
      res [ s . top ( ) ] = - 1 ;			      	while ( s . size ( ) > 0 ) {				    	res [ s . pop ( ) ] = - 1 ;				  
      s . pop ( ) ;					      	  res [ s . peek ( ) ] = - 1 ;				    	s . pop ( ) ;						  
    }							      	  s . pop ( ) ;						      }								  
    for ( int i = 0 ;					      	}							      for ( int i = 0 ;						  
    i < n ;						      	for ( int i = 0 ;					      i < n ;							  
    i ++ ) {						      	i < n ;							      i ++ ) {							  
      cout << res [ i ] << " " ;			      	i ++ ) {						    	System . out . print ( res [ i ] + " " ) ;		  
    }							      	  System . out . print ( res [ i ] + " " ) ;		      }								  
  }							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE    DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE    DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_12_LONGEST_PALINDROMIC_SUBSEQUENCE
--							      --							    --								  --
int lps ( char * str ) {				      static int lps ( String seq ) {				    public static int lps ( String str ) {			  script_not_found : None
  int n = strlen ( str ) ;				      	int n = seq . length ( ) ;				      int n = str . length ( ) ;				  
  int i , j , cl ;					      	int i , j , cl ;					      int i , j , cl ;						  
  int L [ n ] [ n ] ;					      	int L [ ] [ ] = new int [ n ] [ n ] ;			      int L [ ] [ ] = new int [ n ] [ n ] ;			  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) L [ i ] [ i ] = 1 ;				      	i ++ ) L [ i ] [ i ] = 1 ;				      i ++ ) {							  
  for ( cl = 2 ;					      	for ( cl = 2 ;						    	L [ i ] [ i ] = 1 ;					  
  cl <= n ;						      	cl <= n ;						      }								  
  cl ++ ) {						      	cl ++ ) {						      for ( cl = 2 ;						  
    for ( i = 0 ;					      	  for ( i = 0 ;						      cl <= n ;							  
    i < n - cl + 1 ;					      	  i < n - cl + 1 ;					      cl ++ ) {							  
    i ++ ) {						      	  i ++ ) {						    	for ( i = 0 ;						  
      j = i + cl - 1 ;					      	    j = i + cl - 1 ;					    	i < n - cl + 1 ;					  
      if ( str [ i ] == str [ j ] && cl == 2 ) L [ i ] [ j ]  	    if ( seq . charAt ( i ) == seq . charAt ( j ) && cl ==  	i ++ ) {						  
      else if ( str [ i ] == str [ j ] ) L [ i ] [ j ] = L [  	    else if ( seq . charAt ( i ) == seq . charAt ( j ) ) L  	  j = i + cl - 1 ;					  
      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i +  	    else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i +  	  if ( str . charAt ( i ) == str . charAt ( j ) && cl ==  
    }							      	  }							    	    L [ i ] [ j ] = 2 ;					  
  }							      	}							    	  }							  
  return L [ 0 ] [ n - 1 ] ;				      	return L [ 0 ] [ n - 1 ] ;				    	  else if ( str . charAt ( i ) == str . charAt ( j ) ) {  
}							      }								    	    L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ;		  
							      								    	  }							  
							      								    	  else {						  
							      								    	    L [ i ] [ j ] = Math . max ( L [ i ] [ j - 1 ] , L [  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return L [ 0 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			      MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			    MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX			  MAXIMUM_AND_MINIMUM_IN_A_SQUARE_MATRIX
--							      --							    --								  --
void maxMin ( int arr [ ] [ MAX ] , int n ) {		      static void maxMin ( int arr [ ] [ ] , int n ) {		    public static void maxMin ( int arr [ ] [ ] , int n ) {	  script_not_found : None
  int min = INT_MAX ;					      	int min = + 2147483647 ;				      int min = Integer . MAX_VALUE ;				  
  int max = INT_MIN ;					      	int max = - 2147483648 ;				      int max = Integer . MIN_VALUE ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= n / 2 ;					      	  j <= n / 2 ;						    	j <= n / 2 ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {      	    if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {	    	  if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {	  
	if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ]  	      if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ]  	    if ( min > arr [ i ] [ n - j - 1 ] ) {		  
	if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ;  	      if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ;  	      min = arr [ i ] [ n - j - 1 ] ;			  
      }							      	    }							    	    }							  
      else {						      	    else {						    	    if ( max < arr [ i ] [ j ] ) {			  
	if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ;  	      if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ;  	      max = arr [ i ] [ j ] ;				  
	if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ]  	      if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ]  	    }							  
      }							      	    }							    	  }							  
    }							      	  }							    	  else {						  
  }							      	}							    	    if ( min > arr [ i ] [ j ] ) {			  
  cout << "Maximum = " << max ;				      	System . out . print ( "Maximum = " + max + ", Minimum = "  	      min = arr [ i ] [ j ] ;				  
  << ", Minimum = " << min ;				      }								    	    }							  
}							      								    	    if ( max < arr [ i ] [ n - j - 1 ] ) {		  
							      								    	      max = arr [ i ] [ n - j - 1 ] ;			  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "Maximum = " + max ) ;		  
							      								      System . out . println ( ", Minimum = " + min ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	      MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE	    MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE		  MAXIMUM_DISTINCT_LOWERCASE_ALPHABETS_TWO_UPPERCASE
--							      --							    --								  --
int maxLower ( string str ) {				      static int maxLower ( String str ) {			    public static int maxLower ( String str ) {			  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  for ( ;						      	for ( ;							      for ( ;							  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {	      	  if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 	if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 
      i ++ ;						      	    i ++ ;						    	  i ++ ;						  
      break ;						      	    break ;						    	  break ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  int maxCount = 0 ;					      	int maxCount = 0 ;					      int maxCount = 0 ;					  
  int count [ MAX_CHAR ] = {				      	int count [ ] = new int [ MAX_CHAR ] ;			      int [ ] count = new int [ MAX_CHAR ] ;			  
    0 }							      	for ( ;							      for ( ;							  
    ;							      	i < n ;							      i < n ;							  
    for ( ;						      	i ++ ) {						      i ++ ) {							  
    i < n ;						      	  if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 	if ( str . charAt ( i ) >= 'A' && str . charAt ( i ) <= ' 
    i ++ ) {						      	    int currCount = 0 ;					    	  int currCount = 0 ;					  
      if ( str [ i ] >= 'A' && str [ i ] <= 'Z' ) {	      	    for ( int j = 0 ;					    	  for ( int j = 0 ;					  
	int currCount = 0 ;				      	    j < MAX_CHAR ;					    	  j < MAX_CHAR ;					  
	for ( int j = 0 ;				      	    j ++ ) {						    	  j ++ ) if ( count [ j ] > 0 ) currCount ++ ;		  
	j < MAX_CHAR ;					      	      if ( count [ j ] > 0 ) {				    	  maxCount = Math . max ( maxCount , currCount ) ;	  
	j ++ ) if ( count [ j ] > 0 ) currCount ++ ;	      		currCount ++ ;					    	  Arrays . fill ( count , 0 ) ;				  
	maxCount = max ( maxCount , currCount ) ;	      	      }							    	}							  
	memset ( count , 0 , sizeof ( count ) ) ;	      	    }							    	if ( str . charAt ( i ) >= 'a' && str . charAt ( i ) <= ' 
      }							      	    maxCount = Math . max ( maxCount , currCount ) ;	      }								  
      if ( str [ i ] >= 'a' && str [ i ] <= 'z' ) count [ str 	    Arrays . fill ( count , 0 ) ;			      return maxCount ;						  
    }							      	  }							    }								  
    return maxCount ;					      	  if ( str . charAt ( i ) >= 'a' && str . charAt ( i ) <= ' 								  
  }							      	    count [ str . charAt ( i ) - 'a' ] ++ ;		    								  
							      	  }							    								  
							      	}							    								  
							      	return maxCount ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1		      FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1		    FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1			  FIND_PAIR_WITH_GREATEST_PRODUCT_IN_ARRAY_1
--							      --							    --								  --
int findGreatest ( int arr [ ] , int n ) {		      static int findGreatest ( int arr [ ] , int n ) {		    public static int findGreatest ( int arr [ ] , int n ) {	  script_not_found : None
  unordered_map < int , int > m ;			      	Map < Integer , Integer > m = new HashMap < > ( ) ;	      HashMap < Integer , Integer > m = new HashMap < > ( ) ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) m [ arr [ i ] ] ++ ;				      	i ++ ) {						      i ++ ) {							  
  sort ( arr , arr + n ) ;				      	  if ( m . containsKey ( arr [ i ] ) ) {		    	m . put ( arr [ i ] , ++ i ) ;				  
  for ( int i = n - 1 ;					      	    m . put ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ;	      }								  
  i > 1 ;						      	  }							      Arrays . sort ( arr ) ;					  
  i -- ) {						      	  else {						      for ( int i = n - 1 ;					  
    for ( int j = 0 ;					      	    m . put ( arr [ i ] , m . get ( arr [ i ] ) ) ;	      i > 1 ;							  
    j < i && arr [ j ] <= sqrt ( arr [ i ] ) ;		      	  }							      i -- ) {							  
    j ++ ) {						      	}							    	for ( int j = 0 ;					  
      if ( arr [ i ] % arr [ j ] == 0 ) {		      	Arrays . sort ( arr ) ;					    	j < i && arr [ j ] <= Math . sqrt ( arr [ i ] ) ;	  
	int result = arr [ i ] / arr [ j ] ;		      	for ( int i = n - 1 ;					    	j ++ ) {						  
	if ( result != arr [ j ] && m [ result ] > 0 ) return 	i > 1 ;							    	  if ( arr [ i ] % arr [ j ] == 0 ) {			  
	else if ( result == arr [ j ] && m [ result ] > 1 ) r 	i -- ) {						    	    int result = arr [ i ] / arr [ j ] ;		  
      }							      	  for ( int j = 0 ;					    	    if ( result != arr [ j ] && m . get ( result ) > 0 )  
    }							      	  j < i && arr [ j ] <= Math . sqrt ( arr [ i ] ) ;	    	      return arr [ i ] ;				  
  }							      	  j ++ ) {						    	    }							  
  return - 1 ;						      	    if ( arr [ i ] % arr [ j ] == 0 ) {			    	    else if ( result == arr [ j ] && m . get ( result ) > 
}							      	      int result = arr [ i ] / arr [ j ] ;		    	      return arr [ i ] ;				  
							      	      if ( result != arr [ j ] && m . get ( result ) == nul 	    }							  
							      		return arr [ i ] ;				    	  }							  
							      	      }							    	}							  
							      	      else if ( result == arr [ j ] && m . get ( result ) >   }								  
							      		return arr [ i ] ;				      return - 1 ;						  
							      	      }							    }								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return - 1 ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PATH_MAXIMUM_AVERAGE_VALUE				      PATH_MAXIMUM_AVERAGE_VALUE				    PATH_MAXIMUM_AVERAGE_VALUE					  PATH_MAXIMUM_AVERAGE_VALUE
--							      --							    --								  --
double maxAverageOfPath ( int cost [ M ] [ M ] , int N ) {    public static double maxAverageOfPath ( int cost [ ] [ ] , in public static double maxAverageOfPath ( int cost [ ] [ ] , in script_not_found : None
  int dp [ N + 1 ] [ N + 1 ] ;				      	int dp [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ;		      int dp [ ] [ ] [ ] = new int [ N + 1 ] [ N + 1 ] ;	  
  dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			      	dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			      dp [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 	i ++ ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0   i ++ ) {							  
  for ( int j = 1 ;					      	for ( int j = 1 ;					    	dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;  
  j < N ;						      	j < N ;							      }								  
  j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j 	j ++ ) dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j   for ( int j = 1 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      j < N ;							  
  i < N ;						      	i < N ;							      j ++ ) {							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				    	dp [ 0 ] [ j ] = dp [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;  
  j <= N ;						      	j < N ;							      }								  
  j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i ] 	j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , d   for ( int i = 1 ;						  
  return ( double ) dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ;  	return ( double ) dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ;    i < N ;							  
}							      }								      i ++ ) for ( int j = 1 ;					  
							      								      j <= N ;							  
							      								      j ++ ) {							  
							      								    	dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j ] , dp [ i 
							      								      }								  
							      								      return ( double ) dp [ N - 1 ] [ N - 1 ] / ( 2 * N - 1 ) ;  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING		      COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING		    COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING			  COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING
--							      --							    --								  --
int countPS ( string str ) {				      static int countPS ( String str ) {			    public static int countPS ( String str ) {			  error : Exception in thread "main" java.lang.Array
  int N = str . length ( ) ;				      	int N = str . length ( ) ;				      int N = str . length ( ) ;				  StoreException: java.lang.Integer 	at java.base/ja
  int cps [ N + 1 ] [ N + 1 ] ;				      	int [ ] [ ] cps = new int [ N + 1 ] [ N + 1 ] ;		      int [ ] [ ] cps = new int [ N + 1 ] [ N + 1 ] ;		  va.util.Arrays.fill(Arrays.java:3638) 	at COUNT_PA
  memset ( cps , 0 , sizeof ( cps ) ) ;			      	for ( int i = 0 ;					      Arrays . fill ( cps , 0 ) ;				  LINDROMIC_SUBSEQUENCE_GIVEN_STRING.f_filled(COUNT_
  for ( int i = 0 ;					      	i < N ;							      for ( int i = 0 ;						  PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.java:39) 	at
  i < N ;						      	i ++ ) cps [ i ] [ i ] = 1 ;				      i < N ;							  COUNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.main(CO
  i ++ ) cps [ i ] [ i ] = 1 ;				      	for ( int L = 2 ;					      i ++ ) {							  UNT_PALINDROMIC_SUBSEQUENCE_GIVEN_STRING.java:79)
  for ( int L = 2 ;					      	L <= N ;						    	cps [ i ] [ i ] = 1 ;					  
  L <= N ;						      	L ++ ) {						      }								  
  L ++ ) {						      	  for ( int i = 0 ;					      for ( int L = 2 ;						  
    for ( int i = 0 ;					      	  i < N ;						      L <= N ;							  
    i < N ;						      	  i ++ ) {						      L ++ ) {							  
    i ++ ) {						      	    int k = L + i - 1 ;					    	for ( int i = 0 ;					  
      int k = L + i - 1 ;				      	    if ( k < N ) {					    	i < N ;							  
      if ( str [ i ] == str [ k ] ) cps [ i ] [ k ] = cps [ i 	      if ( str . charAt ( i ) == str . charAt ( k ) ) cps [ 	i ++ ) {						  
      else cps [ i ] [ k ] = cps [ i ] [ k - 1 ] + cps [ i +  	      else cps [ i ] [ k ] = cps [ i ] [ k - 1 ] + cps [ i  	  int k = L + i - 1 ;					  
    }							      	    }							    	  if ( str . charAt ( i ) == str . charAt ( k ) ) {	  
  }							      	  }							    	    cps [ i ] [ k ] = cps [ i ] [ k - 1 ] + cps [ i + 1 ] 
  return cps [ 0 ] [ N - 1 ] ;				      	}							    	  }							  
}							      	return cps [ 0 ] [ N - 1 ] ;				    	  else {						  
							      }								    	    cps [ i ] [ k ] = cps [ i ] [ k - 1 ] + cps [ i + 1 ] 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return cps [ 0 ] [ N - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY		      FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY		    FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY		  FIND_ONE_MULTIPLE_REPEATING_ELEMENTS_READ_ARRAY
--							      --							    --								  --
int findRepeatingNumber ( const int arr [ ] , int n ) {	      static int findRepeatingNumber ( int [ ] arr , int n ) {	    public static int findRepeatingNumber ( final int arr [ ] , f script_not_found : None
  int sq = sqrt ( n ) ;					      	int sq = ( int ) Math . sqrt ( n ) ;			      int sq = Math . sqrt ( n ) ;				  
  int range = ( n / sq ) + 1 ;				      	int range = ( n / sq ) + 1 ;				      int range = ( n / sq ) + 1 ;				  
  int count [ range ] = {				      	int [ ] count = new int [ range ] ;			      int count [ ] = new int [ range ] ;			  
    0 }							      	for ( int i = 0 ;					      count [ 0 ] = 0 ;						  
    ;							      	i <= n ;						      for ( int i = 0 ;						  
    for ( int i = 0 ;					      	i ++ ) {						      i <= n ;							  
    i <= n ;						      	  count [ ( arr [ i ] - 1 ) / sq ] ++ ;			      i ++ ) count [ ( arr [ i ] - 1 ) / sq ] ++ ;		  
    i ++ ) {						      	}							      int selectedBlock = range - 1 ;				  
      count [ ( arr [ i ] - 1 ) / sq ] ++ ;		      	int selected_block = range - 1 ;			      for ( int i = 0 ;						  
    }							      	for ( int i = 0 ;					      i < range - 1 ;						  
    int selected_block = range - 1 ;			      	i < range - 1 ;						      i ++ ) {							  
    for ( int i = 0 ;					      	i ++ ) {						    	if ( count [ i ] > sq ) {				  
    i < range - 1 ;					      	  if ( count [ i ] > sq ) {				    	  selectedBlock = i ;					  
    i ++ ) {						      	    selected_block = i ;				    	  break ;						  
      if ( count [ i ] > sq ) {				      	    break ;						    	}							  
	selected_block = i ;				      	  }							      }								  
	break ;						      	}							      final HashMap < Integer , Integer > m = new HashMap < > ( ) 
      }							      	HashMap < Integer , Integer > m = new HashMap < > ( ) ;	      for ( int i = 0 ;						  
    }							      	for ( int i = 0 ;					      i <= n ;							  
    unordered_map < int , int > m ;			      	i <= n ;						      i ++ ) {							  
    for ( int i = 0 ;					      	i ++ ) {						    	if ( ( ( selectedBlock * sq ) < arr [ i ] ) && ( arr [ i  
    i <= n ;						      	  if ( ( ( selected_block * sq ) < arr [ i ] ) && ( arr [ i 	  m . put ( arr [ i ] , 1 ) ;				  
    i ++ ) {						      	    m . put ( arr [ i ] , 1 ) ;				    	  if ( m . get ( arr [ i ] ) > 1 ) return arr [ i ] ;	  
      if ( ( ( selected_block * sq ) < arr [ i ] ) && ( arr [ 	    if ( m . get ( arr [ i ] ) == 1 ) return arr [ i ] ;    	}							  
	m [ arr [ i ] ] ++ ;				      	  }							      }								  
	if ( m [ arr [ i ] ] > 1 ) return arr [ i ] ;	      	}							      return - 1 ;						  
      }							      	return - 1 ;						    }								  
    }							      }								    								  
    return - 1 ;					      								    								  
  }							      								    								  
  -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	      EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING	    EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING		  EVALUATE_A_BOOLEAN_EXPRESSION_REPRESENTED_AS_STRING
--							      --							    --								  --
int evaluateBoolExpr ( string s ) {			      static int evaluateBoolExpr ( StringBuffer s ) {		    public static int evaluateBoolExpr ( String s ) {		  script_not_found : None
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i += 2 ) {						      	i += 2 ) {						      i += 2 ) {						  
    if ( s [ i + 1 ] == 'A' ) {				      	  if ( i + 1 < n && i + 2 < n ) {			    	if ( s . charAt ( i + 1 ) == 'A' ) {			  
      if ( s [ i + 2 ] == '0' || s [ i ] == '0' ) s [ i + 2 ] 	    if ( s . charAt ( i + 1 ) == 'A' ) {		    	  if ( s . charAt ( i + 2 ) == '0' || s . charAt ( i ) == 
      else s [ i + 2 ] = '1' ;				      	      if ( s . charAt ( i + 2 ) == '0' || s . charAt ( i )  	    s . setCharAt ( i + 2 , '0' ) ;			  
    }							      	      else s . setCharAt ( i + 2 , '1' ) ;		    	  }							  
    else if ( s [ i + 1 ] == 'B' ) {			      	    }							    	  else {						  
      if ( s [ i + 2 ] == '1' || s [ i ] == '1' ) s [ i + 2 ] 	    else if ( ( i + 1 ) < n && s . charAt ( i + 1 ) == 'B'  	    s . setCharAt ( i + 2 , '1' ) ;			  
      else s [ i + 2 ] = '0' ;				      	      if ( s . charAt ( i + 2 ) == '1' || s . charAt ( i )  	  }							  
    }							      	      else s . setCharAt ( i + 2 , '0' ) ;		    	}							  
    else {						      	    }							    	else if ( s . charAt ( i + 1 ) == 'B' ) {		  
      if ( s [ i + 2 ] == s [ i ] ) s [ i + 2 ] = '0' ;	      	    else {						    	  if ( s . charAt ( i + 2 ) == '1' || s . charAt ( i ) == 
      else s [ i + 2 ] = '1' ;				      	      if ( s . charAt ( i + 2 ) == s . charAt ( i ) ) s . s 	    s . setCharAt ( i + 2 , '1' ) ;			  
    }							      	      else s . setCharAt ( i + 2 , '1' ) ;		    	  }							  
  }							      	    }							    	  else {						  
  return s [ n - 1 ] - '0' ;				      	  }							    	    s . setCharAt ( i + 2 , '0' ) ;			  
}							      	}							    	  }							  
							      	return s . charAt ( n - 1 ) - '0' ;			    	}							  
							      }								    	else {							  
							      								    	  if ( s . charAt ( i + 2 ) == s . charAt ( i ) ) {	  
							      								    	    s . setCharAt ( i + 2 , '0' ) ;			  
							      								    	  }							  
							      								    	  else {						  
							      								    	    s . setCharAt ( i + 2 , '1' ) ;			  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return s . charAt ( n - 1 ) - '0' ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_NEXT_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
void NextFit ( int blockSize [ ] , int m , int processSize [  static void NextFit ( int blockSize [ ] , int m , int process public static void NextFit ( int [ ] blockSize , int m , int  script_not_found : None
  int allocation [ n ] , j = 0 ;			      	int allocation [ ] = new int [ n ] , j = 0 ;		      int allocation [ ] = new int [ n ] , j = 0 ;		  
  memset ( allocation , - 1 , sizeof ( allocation ) ) ;	      	Arrays . fill ( allocation , - 1 ) ;			      Arrays . fill ( allocation , - 1 ) ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( j < m ) {					      	  while ( j < m ) {					    	while ( j < m ) {					  
      if ( blockSize [ j ] >= processSize [ i ] ) {	      	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	allocation [ i ] = j ;				      	      allocation [ i ] = j ;				    	    allocation [ i ] = j ;				  
	blockSize [ j ] -= processSize [ i ] ;		      	      blockSize [ j ] -= processSize [ i ] ;		    	    blockSize [ j ] -= processSize [ i ] ;		  
	break ;						      	      break ;						    	    break ;						  
      }							      	    }							    	  }							  
      j = ( j + 1 ) % m ;				      	    j = ( j + 1 ) % m ;					    	  j = ( j + 1 ) % m ;					  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << "\nProcess No.\tProcess Size\tBlock no.\n" ;	      	System . out . print ( "\nProcess No.\tProcess Size\tBlock    System . out . println ( "\nProcess No.\tProcess Size\tBloc 
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    cout << " " << i + 1 << "\t\t" << processSize [ i ] << "\ 	  System . out . print ( i + 1 + "\t\t" + processSize [ i ] 	System . out . print ( " " + ( i + 1 ) + "\t\t" + process 
    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 	  if ( allocation [ i ] != - 1 ) {			    	if ( allocation [ i ] != - 1 ) {			  
    else cout << "Not Allocated" ;			      	    System . out . print ( allocation [ i ] + 1 ) ;	    	  System . out . println ( allocation [ i ] + 1 ) ;	  
    cout << endl ;					      	  }							    	}							  
  }							      	  else {						    	else {							  
}							      	    System . out . print ( "Not Allocated" ) ;		    	  System . out . println ( "Not Allocated" ) ;		  
							      	  }							    	}							  
							      	  System . out . println ( "" ) ;			    	System . out . println ( ) ;				  
							      	}							      }								  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH			      DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH			    DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH			  DYNAMIC_PROGRAMMING_SET_6_MIN_COST_PATH
--							      --							    --								  --
int minCost ( int cost [ R ] [ C ] , int m , int n ) {	      private static int minCost ( int cost [ ] [ ] , int m , int n public static int minCost ( int cost [ ] [ ] , int m , int n  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  int tc [ R ] [ C ] ;					      	int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      int tc [ ] [ ] = new int [ R ] [ C ] ;			  
  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			      	tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			      tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;			  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 	i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0   i ++ ) {							  
  for ( j = 1 ;						      	for ( j = 1 ;						    	tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;  
  j <= n ;						      	j <= n ;						      }								  
  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j 	j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j   for ( j = 1 ;						  
  for ( i = 1 ;						      	for ( i = 1 ;						      j <= n ;							  
  i <= m ;						      	i <= m ;						      j ++ ) {							  
  i ++ ) for ( j = 1 ;					      	i ++ ) for ( j = 1 ;					    	tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;  
  j <= n ;						      	j <= n ;						      }								  
  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ 	j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [   for ( i = 1 ;						  
  return tc [ m ] [ n ] ;				      	return tc [ m ] [ n ] ;					      i <= m ;							  
}							      }								      i ++ ) for ( j = 1 ;					  
							      								      j <= n ;							  
							      								      j ++ ) {							  
							      								    	tc [ i ] [ j ] = Math . min ( tc [ i - 1 ] [ j - 1 ] , tc 
							      								      }								  
							      								      return tc [ m ] [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2	      FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2	    FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2		  FIND_THE_TWO_REPEATING_ELEMENTS_IN_A_GIVEN_ARRAY_2
--							      --							    --								  --
void printRepeating ( int arr [ ] , int size ) {	      void printRepeating ( int arr [ ] , int size ) {		    public static void printRepeating ( int arr [ ] , int size )  script_not_found : None
  int Xor = arr [ 0 ] ;					      	int xor = arr [ 0 ] ;					      int Xor = arr [ 0 ] ;					  
  int set_bit_no ;					      	int set_bit_no ;					      int set_bit_no ;						  
  int i ;						      	int i ;							      int i ;							  
  int n = size - 2 ;					      	int n = size - 2 ;					      int n = size - 2 ;					  
  int x = 0 , y = 0 ;					      	int x = 0 , y = 0 ;					      int x = 0 , y = 0 ;					  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i < size ;						      	i < size ;						      i < size ;						  
  i ++ ) Xor ^= arr [ i ] ;				      	i ++ ) xor ^= arr [ i ] ;				      i ++ ) {							  
  for ( i = 1 ;						      	for ( i = 1 ;						    	Xor ^= arr [ i ] ;					  
  i <= n ;						      	i <= n ;						      }								  
  i ++ ) Xor ^= i ;					      	i ++ ) xor ^= i ;					      for ( i = 1 ;						  
  set_bit_no = Xor & ~ ( Xor - 1 ) ;			      	set_bit_no = ( xor & ~ ( xor - 1 ) ) ;			      i <= n ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      i ++ ) {							  
  i < size ;						      	i < size ;						    	Xor ^= i ;						  
  i ++ ) {						      	i ++ ) {						      }								  
    if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ;	      	  int a = arr [ i ] & set_bit_no ;			      set_bit_no = Xor & ~ ( Xor - 1 ) ;			  
    else y = y ^ arr [ i ] ;				      	  if ( a != 0 ) x = x ^ arr [ i ] ;			      for ( i = 0 ;						  
  }							      	  else y = y ^ arr [ i ] ;				      i < size ;						  
  for ( i = 1 ;						      	}							      i ++ ) {							  
  i <= n ;						      	for ( i = 1 ;						    	if ( arr [ i ] & set_bit_no != 0 ) {			  
  i ++ ) {						      	i <= n ;						    	  x = x ^ arr [ i ] ;					  
    if ( i & set_bit_no ) x = x ^ i ;			      	i ++ ) {						    	}							  
    else y = y ^ i ;					      	  int a = i & set_bit_no ;				    	else {							  
  }							      	  if ( a != 0 ) x = x ^ i ;				    	  y = y ^ arr [ i ] ;					  
  cout << "The two repeating elements are " << y << " " << x  	  else y = y ^ i ;					    	}							  
}							      	}							      }								  
							      	System . out . println ( "The two reppeated elements are :"   for ( i = 1 ;						  
							      	System . out . println ( x + " " + y ) ;		      i <= n ;							  
							      }								      i ++ ) {							  
							      								    	if ( i & set_bit_no != 0 ) {				  
							      								    	  x = x ^ i ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  y = y ^ i ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "The two repeating elements are "  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_FIRST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
void firstFit ( int blockSize [ ] , int m , int processSize [ static void firstFit ( int blockSize [ ] , int m , int proces public static void firstFit ( int [ ] blockSize , int m , int script_not_found : None
  int allocation [ n ] ;				      	int allocation [ ] = new int [ n ] ;			      int [ ] allocation = new int [ n ] ;			  
  memset ( allocation , - 1 , sizeof ( allocation ) ) ;	      	for ( int i = 0 ;					      Arrays . fill ( allocation , - 1 ) ;			  
  for ( int i = 0 ;					      	i < allocation . length ;				      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) allocation [ i ] = - 1 ;				      i < n ;							  
  i ++ ) {						      	for ( int i = 0 ;					      i ++ ) {							  
    for ( int j = 0 ;					      	i < n ;							    	for ( int j = 0 ;					  
    j < m ;						      	i ++ ) {						    	j < m ;							  
    j ++ ) {						      	  for ( int j = 0 ;					    	j ++ ) {						  
      if ( blockSize [ j ] >= processSize [ i ] ) {	      	  j < m ;						    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	allocation [ i ] = j ;				      	  j ++ ) {						    	    allocation [ i ] = j ;				  
	blockSize [ j ] -= processSize [ i ] ;		      	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	    blockSize [ j ] -= processSize [ i ] ;		  
	break ;						      	      allocation [ i ] = j ;				    	    break ;						  
      }							      	      blockSize [ j ] -= processSize [ i ] ;		    	  }							  
    }							      	      break ;						    	}							  
  }							      	    }							      }								  
  cout << "\nProcess No.\tProcess Size\tBlock no.\n" ;	      	  }							      System . out . println ( "\nProcess No.\tProcess Size\tBloc 
  for ( int i = 0 ;					      	}							      for ( int i = 0 ;						  
  i < n ;						      	System . out . println ( "\nProcess No.\tProcess Size\tBloc   i < n ;							  
  i ++ ) {						      	for ( int i = 0 ;					      i ++ ) {							  
    cout << " " << i + 1 << "\t\t" << processSize [ i ] << "\ 	i < n ;							    	System . out . print ( " " + ( i + 1 ) + "\t\t" + process 
    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 	i ++ ) {						    	if ( allocation [ i ] != - 1 ) {			  
    else cout << "Not Allocated" ;			      	  System . out . print ( " " + ( i + 1 ) + "\t\t" + process 	  System . out . println ( allocation [ i ] + 1 ) ;	  
    cout << endl ;					      	  if ( allocation [ i ] != - 1 ) System . out . print ( all 	}							  
  }							      	  else System . out . print ( "Not Allocated" ) ;	    	else {							  
}							      	  System . out . println ( ) ;				    	  System . out . println ( "Not Allocated" ) ;		  
							      	}							    	}							  
							      }								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY		      FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY			    FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY			  FIND_MINIMUM_ADJUSTMENT_COST_OF_AN_ARRAY
--							      --							    --								  --
int minAdjustmentCost ( int A [ ] , int n , int target ) {    static int minAdjustmentCost ( int A [ ] , int n , int target public static int minAdjustmentCost ( int A [ ] , int n , int script_not_found : None
  int dp [ n ] [ M + 1 ] ;				      	int [ ] [ ] dp = new int [ n ] [ M + 1 ] ;		      int dp [ ] [ ] = new int [ n ] [ M + 1 ] ;		  
  for ( int j = 0 ;					      	for ( int j = 0 ;					      for ( int j = 0 ;						  
  j <= M ;						      	j <= M ;						      j <= M ;							  
  j ++ ) dp [ 0 ] [ j ] = abs ( j - A [ 0 ] ) ;		      	j ++ ) dp [ 0 ] [ j ] = Math . abs ( j - A [ 0 ] ) ;	      j ++ ) {							  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	dp [ 0 ] [ j ] = Math . abs ( j - A [ 0 ] ) ;		  
  i < n ;						      	i < n ;							      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < n ;							  
    j <= M ;						      	  j <= M ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      dp [ i ] [ j ] = INT_MAX ;			      	    dp [ i ] [ j ] = Integer . MAX_VALUE ;		    	j <= M ;						  
      for ( int k = max ( j - target , 0 ) ;		      	    int k = Math . max ( j - target , 0 ) ;		    	j ++ ) {						  
      k <= min ( M , j + target ) ;			      	    for ( ;						    	  dp [ i ] [ j ] = Integer . MAX_VALUE ;		  
      k ++ ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ i - 	    k <= Math . min ( M , j + target ) ;		    	  for ( int k = Math . max ( j - target , 0 ) ;		  
    }							      	    k ++ ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , d 	  k <= Math . min ( M , j + target ) ;			  
  }							      	  }							    	  k ++ ) {						  
  int res = INT_MAX ;					      	}							    	    dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i 
  for ( int j = 0 ;					      	int res = Integer . MAX_VALUE ;				    	  }							  
  j <= M ;						      	for ( int j = 0 ;					    	}							  
  j ++ ) res = min ( res , dp [ n - 1 ] [ j ] ) ;	      	j <= M ;						      }								  
  return res ;						      	j ++ ) res = Math . min ( res , dp [ n - 1 ] [ j ] ) ;	      int res = Integer . MAX_VALUE ;				  
}							      	return res ;						      for ( int j = 0 ;						  
							      }								      j <= M ;							  
							      								      j ++ ) {							  
							      								    	res = Math . min ( res , dp [ n - 1 ] [ j ] ) ;		  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			      MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY			    MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY				  MAXIMUM_AVERAGE_SUM_PARTITION_ARRAY
--							      --							    --								  --
double largestSumOfAverages ( vector < int > & A , int K ) {  static double largestSumOfAverages ( int [ ] A , int K ) {    public static double largestSumOfAverages ( int [ ] A , int K success : None
  int n = A . size ( ) ;				      	int n = A . length ;					      int n = A . length ;					  
  double pre_sum [ n + 1 ] ;				      	double [ ] pre_sum = new double [ n + 1 ] ;		      double [ ] pre_sum = new double [ n + 1 ] ;		  
  pre_sum [ 0 ] = 0 ;					      	pre_sum [ 0 ] = 0 ;					      pre_sum [ 0 ] = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;	      	i ++ ) pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;	      i ++ ) {							  
  double dp [ n ] = {					      	double [ ] dp = new double [ n ] ;			    	pre_sum [ i + 1 ] = pre_sum [ i ] + A [ i ] ;		  
    0 }							      	double sum = 0 ;					      }								  
    ;							      	for ( int i = 0 ;					      double [ ] dp = new double [ n ] ;			  
    double sum = 0 ;					      	i < n ;							      double sum = 0 ;						  
    for ( int i = 0 ;					      	i ++ ) dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n -   for ( int i = 0 ;						  
    i < n ;						      	for ( int k = 0 ;					      i < n ;							  
    i ++ ) dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n 	k < K - 1 ;						      i ++ ) {							  
    for ( int k = 0 ;					      	k ++ ) for ( int i = 0 ;				    	dp [ i ] = ( pre_sum [ n ] - pre_sum [ i ] ) / ( n - i )  
    k < K - 1 ;						      	i < n ;							      }								  
    k ++ ) for ( int i = 0 ;				      	i ++ ) for ( int j = i + 1 ;				      for ( int k = 0 ;						  
    i < n ;						      	j < n ;							      k < K - 1 ;						  
    i ++ ) for ( int j = i + 1 ;			      	j ++ ) dp [ i ] = Math . max ( dp [ i ] , ( pre_sum [ j ] -   k ++ ) for ( int i = 0 ;					  
    j < n ;						      	return dp [ 0 ] ;					      i < n ;							  
    j ++ ) dp [ i ] = max ( dp [ i ] , ( pre_sum [ j ] - pre_ }								      i ++ ) for ( int j = i + 1 ;				  
    return dp [ 0 ] ;					      								      j < n ;							  
  }							      								      j ++ ) dp [ i ] = Math . max ( dp [ i ] , ( pre_sum [ j ] - 
							      								      return dp [ 0 ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_PRODUCT_TWO_ARRAYS				      MINIMUM_SUM_PRODUCT_TWO_ARRAYS				    MINIMUM_SUM_PRODUCT_TWO_ARRAYS				  MINIMUM_SUM_PRODUCT_TWO_ARRAYS
--							      --							    --								  --
int minproduct ( int a [ ] , int b [ ] , int n , int k ) {    static int minproduct ( int a [ ] , int b [ ] , int n , int k public static int minproduct ( int a [ ] , int b [ ] , int n  error : MINIMUM_SUM_PRODUCT_TWO_ARRAYS.java:52: er
  int diff = 0 , res = 0 ;				      	int diff = 0 , res = 0 ;				      int diff = 0 , res = 0 ;					  ror: variable temp might not have been initialized
  int temp ;						      	int temp = 0 ;						      int temp ;						       int d = Math . abs ( pro - temp ) ;
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  			^ 1 error
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int pro = a [ i ] * b [ i ] ;			      	  int pro = a [ i ] * b [ i ] ;				    	int pro = a [ i ] * b [ i ] ;				  
    res = res + pro ;					      	  res = res + pro ;					    	res = res + pro ;					  
    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k )  	  if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k )  	if ( pro < 0 && b [ i ] < 0 ) {				  
    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * 	  else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * 	  temp = ( a [ i ] + 2 * k ) * b [ i ] ;		  
    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * 	  else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * 	}							  
    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * 	  else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * 	else if ( pro < 0 && a [ i ] < 0 ) {			  
    int d = abs ( pro - temp ) ;			      	  int d = Math . abs ( pro - temp ) ;			    	  temp = ( a [ i ] - 2 * k ) * b [ i ] ;		  
    if ( d > diff ) diff = d ;				      	  if ( d > diff ) diff = d ;				    	}							  
  }							      	}							    	else if ( pro > 0 && a [ i ] < 0 ) {			  
  return res - diff ;					      	return res - diff ;					    	  temp = ( a [ i ] + 2 * k ) * b [ i ] ;		  
}							      }								    	}							  
							      								    	else if ( pro > 0 && a [ i ] > 0 ) {			  
							      								    	  temp = ( a [ i ] - 2 * k ) * b [ i ] ;		  
							      								    	}							  
							      								    	int d = Math . abs ( pro - temp ) ;			  
							      								    	if ( d > diff ) {					  
							      								    	  diff = d ;						  
							      								    	}							  
							      								      }								  
							      								      return res - diff ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY		      COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY		    COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY		  COUNT_ARITHMETIC_PROGRESSION_SUBSEQUENCES_ARRAY
--							      --							    --								  --
int numofAP ( int a [ ] , int n ) {			      static int numofAP ( int a [ ] , int n ) {		    public static int numofAP ( int a [ ] , int n ) {		  script_not_found : None
  int minarr = INT_MAX , maxarr = INT_MIN ;		      	int minarr = + 2147483647 ;				      int minarr = Integer . MAX_VALUE , maxarr = Integer . MIN_V 
  for ( int i = 0 ;					      	int maxarr = - 2147483648 ;				      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) {						      	i < n ;							      i ++ ) {							  
    minarr = min ( minarr , a [ i ] ) ;			      	i ++ ) {						    	minarr = Math . min ( minarr , a [ i ] ) ;		  
    maxarr = max ( maxarr , a [ i ] ) ;			      	  minarr = Math . min ( minarr , a [ i ] ) ;		    	maxarr = Math . max ( maxarr , a [ i ] ) ;		  
  }							      	  maxarr = Math . max ( maxarr , a [ i ] ) ;		      }								  
  int dp [ n ] , sum [ MAX ] ;				      	}							      int dp [ ] = new int [ n ] , sum [ MAX ] ;		  
  int ans = n + 1 ;					      	int dp [ ] = new int [ n ] ;				      int ans = n + 1 ;						  
  for ( int d = ( minarr - maxarr ) ;			      	int sum [ ] = new int [ MAX ] ;				      for ( int d = ( minarr - maxarr ) ;			  
  d <= ( maxarr - minarr ) ;				      	int ans = n + 1 ;					      d <= ( maxarr - minarr ) ;				  
  d ++ ) {						      	for ( int d = ( minarr - maxarr ) ;			      d ++ ) {							  
    memset ( sum , 0 , sizeof sum ) ;			      	d <= ( maxarr - minarr ) ;				    	System . arraycopy ( a , 0 , sum , 0 , n ) ;		  
    for ( int i = 0 ;					      	d ++ ) {						    	for ( int i = 0 ;					  
    i < n ;						      	  Arrays . fill ( sum , 0 ) ;				    	i < n ;							  
    i ++ ) {						      	  for ( int i = 0 ;					    	i ++ ) {						  
      dp [ i ] = 1 ;					      	  i < n ;						    	  dp [ i ] = 1 ;					  
      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [  	  i ++ ) {						    	  if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) {	  
      ans += dp [ i ] - 1 ;				      	    dp [ i ] = 1 ;					    	    dp [ i ] += sum [ a [ i ] - d ] ;			  
      sum [ a [ i ] ] += dp [ i ] ;			      	    if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [  	  }							  
    }							      	    ans += dp [ i ] - 1 ;				    	  ans += dp [ i ] - 1 ;					  
  }							      	    sum [ a [ i ] ] += dp [ i ] ;			    	  sum [ a [ i ] ] += dp [ i ] ;				  
  return ans ;						      	  }							    	}							  
}							      	}							      }								  
							      	return ans ;						      return ans ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT MAXIMUM_NUMBER_CHOCOLATES_DISTRIBUTED_EQUALLY_AMONG_K_STUDENT
--							      --							    --								  --
int maxNumOfChocolates ( int arr [ ] , int n , int k ) {      static int maxNumOfChocolates ( int arr [ ] , int n , int k ) public static int maxNumOfChocolates ( int arr [ ] , int n ,  success : None
  unordered_map < int , int > um ;			      	HashMap < Integer , Integer > um = new HashMap < Integer ,    HashMap < Integer , Integer > um = new HashMap < > ( ) ;	  
  int sum [ n ] , curr_rem ;				      	int [ ] sum = new int [ n ] ;				      int sum [ ] = new int [ n ] , currRem ;			  
  int maxSum = 0 ;					      	int curr_rem ;						      int maxSum = 0 ;						  
  sum [ 0 ] = arr [ 0 ] ;				      	int maxSum = 0 ;					      sum [ 0 ] = arr [ 0 ] ;					  
  for ( int i = 1 ;					      	sum [ 0 ] = arr [ 0 ] ;					      for ( int i = 1 ;						  
  i < n ;						      	for ( int i = 1 ;					      i < n ;							  
  i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ] ;	      	i < n ;							      i ++ ) {							  
  for ( int i = 0 ;					      	i ++ ) sum [ i ] = sum [ i - 1 ] + arr [ i ] ;		    	sum [ i ] = sum [ i - 1 ] + arr [ i ] ;			  
  i < n ;						      	for ( int i = 0 ;					      }								  
  i ++ ) {						      	i < n ;							      for ( int i = 0 ;						  
    curr_rem = sum [ i ] % k ;				      	i ++ ) {						      i < n ;							  
    if ( curr_rem == 0 ) {				      	  curr_rem = sum [ i ] % k ;				      i ++ ) {							  
      if ( maxSum < sum [ i ] ) maxSum = sum [ i ] ;	      	  if ( curr_rem == 0 ) {				    	currRem = sum [ i ] % k ;				  
    }							      	    if ( maxSum < sum [ i ] ) maxSum = sum [ i ] ;	    	if ( currRem == 0 ) {					  
    else if ( um . find ( curr_rem ) == um . end ( ) ) um [ c 	  }							    	  if ( maxSum < sum [ i ] ) {				  
    else if ( maxSum < ( sum [ i ] - sum [ um [ curr_rem ] ]  	  else if ( ! um . containsKey ( curr_rem ) ) um . put ( cu 	    maxSum = sum [ i ] ;				  
  }							      	  else if ( maxSum < ( sum [ i ] - sum [ um . get ( curr_re 	  }							  
  return ( maxSum / k ) ;				      	}							    	}							  
}							      	return ( maxSum / k ) ;					    	else if ( um . get ( currRem ) == null ) {		  
							      }								    	  um . put ( currRem , i ) ;				  
							      								    	}							  
							      								    	else if ( maxSum < ( sum [ i ] - sum [ um . get ( currRem 
							      								    	  maxSum = sum [ i ] - sum [ um . get ( currRem ) ] ;	  
							      								    	}							  
							      								      }								  
							      								      return ( maxSum / k ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTANCE_NEAREST_CELL_1_BINARY_MATRIX			      DISTANCE_NEAREST_CELL_1_BINARY_MATRIX			    DISTANCE_NEAREST_CELL_1_BINARY_MATRIX			  DISTANCE_NEAREST_CELL_1_BINARY_MATRIX
--							      --							    --								  --
void printDistance ( int mat [ N ] [ M ] ) {		      static void printDistance ( int mat [ ] [ ] ) {		    public static void printDistance ( int [ ] [ ] mat ) {	  script_not_found : None
  int ans [ N ] [ M ] ;					      	int ans [ ] [ ] = new int [ N ] [ M ] ;			      int [ ] [ ] ans = new int [ N ] [ M ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < M ;						      	j < M ;							      j < M ;							  
  j ++ ) ans [ i ] [ j ] = INT_MAX ;			      	j ++ ) ans [ i ] [ j ] = Integer . MAX_VALUE ;		      j ++ ) ans [ i ] [ j ] = Integer . MAX_VALUE ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < M ;						      	j < M ;							      j < M ;							  
  j ++ ) {						      	j ++ ) {						      j ++ ) {							  
    for ( int k = 0 ;					      	  for ( int k = 0 ;					    	for ( int k = 0 ;					  
    k < N ;						      	  k < N ;						    	k < N ;							  
    k ++ ) for ( int l = 0 ;				      	  k ++ ) for ( int l = 0 ;				    	k ++ ) for ( int l = 0 ;				  
    l < M ;						      	  l < M ;						    	l < M ;							  
    l ++ ) {						      	  l ++ ) {						    	l ++ ) {						  
      if ( mat [ k ] [ l ] == 1 ) ans [ i ] [ j ] = min ( ans 	    if ( mat [ k ] [ l ] == 1 ) ans [ i ] [ j ] = Math . mi 	  if ( mat [ k ] [ l ] == 1 ) {				  
    }							      	  }							    	    ans [ i ] [ j ] = Math . min ( ans [ i ] [ j ] , Math 
  }							      	}							    	  }							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	}							  
  i < N ;						      	i < N ;							      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < N ;							  
    j < M ;						      	  j < M ;						      i ++ ) {							  
    j ++ ) cout << ans [ i ] [ j ] << " " ;		      	  j ++ ) System . out . print ( ans [ i ] [ j ] + " " ) ;   	for ( int j = 0 ;					  
    cout << endl ;					      	  System . out . println ( ) ;				    	j < M ;							  
  }							      	}							    	j ++ ) {						  
}							      }								    	  System . out . print ( ans [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE    MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE    MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE	  MAXIMUM_PROFIT_BY_BUYING_AND_SELLING_A_SHARE_AT_MOST_TWICE
--							      --							    --								  --
int maxProfit ( int price [ ] , int n ) {		      static int maxProfit ( int price [ ] , int n ) {		    public static int maxProfit ( int [ ] price , int n ) {	  success : None
  int * profit = new int [ n ] ;			      	int profit [ ] = new int [ n ] ;			      int [ ] profit = new int [ n ] ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) profit [ i ] = 0 ;				      	i ++ ) profit [ i ] = 0 ;				      i ++ ) {							  
  int max_price = price [ n - 1 ] ;			      	int max_price = price [ n - 1 ] ;			    	profit [ i ] = 0 ;					  
  for ( int i = n - 2 ;					      	for ( int i = n - 2 ;					      }								  
  i >= 0 ;						      	i >= 0 ;						      int maxPrice = price [ n - 1 ] ;				  
  i -- ) {						      	i -- ) {						      for ( int i = n - 2 ;					  
    if ( price [ i ] > max_price ) max_price = price [ i ] ;  	  if ( price [ i ] > max_price ) max_price = price [ i ] ;    i >= 0 ;							  
    profit [ i ] = max ( profit [ i + 1 ] , max_price - price 	  profit [ i ] = Math . max ( profit [ i + 1 ] , max_price    i -- ) {							  
  }							      	}							    	if ( price [ i ] > maxPrice ) {				  
  int min_price = price [ 0 ] ;				      	int min_price = price [ 0 ] ;				    	  maxPrice = price [ i ] ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					    	}							  
  i < n ;						      	i < n ;							    	profit [ i ] = Math . max ( profit [ i + 1 ] , maxPrice - 
  i ++ ) {						      	i ++ ) {						      }								  
    if ( price [ i ] < min_price ) min_price = price [ i ] ;  	  if ( price [ i ] < min_price ) min_price = price [ i ] ;    int minPrice = price [ 0 ] ;				  
    profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + (  	  profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i   for ( int i = 1 ;						  
  }							      	}							      i < n ;							  
  int result = profit [ n - 1 ] ;			      	int result = profit [ n - 1 ] ;				      i ++ ) {							  
  delete [ ] profit ;					      	return result ;						    	if ( price [ i ] < minPrice ) {				  
  return result ;					      }								    	  minPrice = price [ i ] ;				  
}							      								    	}							  
							      								    	profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i 
							      								      }								  
							      								      int result = profit [ n - 1 ] ;				  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES      PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	    PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES	  PRINT_POSSIBLE_EDGES_TREE_GIVEN_DIAMETER_HEIGHT_VERTICES
--							      --							    --								  --
void constructTree ( int n , int d , int h ) {		      static void constructTree ( int n , int d , int h ) {	    public static void constructTree ( int n , int d , int h ) {  script_not_found : None
  if ( d == 1 ) {					      	if ( d == 1 ) {						      if ( d == 1 ) {						  
    if ( n == 2 && h == 1 ) {				      	  if ( n == 2 && h == 1 ) {				    	if ( n == 2 && h == 1 ) {				  
      cout << "1 2" << endl ;				      	    System . out . println ( "1 2" ) ;			    	  System . out . println ( "1 2" ) ;			  
      return ;						      	    return ;						    	  return ;						  
    }							      	  }							    	}							  
    cout << "-1" << endl ;				      	  System . out . println ( "-1" ) ;			    	System . out . println ( "-1" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( d > 2 * h ) {					      	if ( d > 2 * h ) {					      if ( d > 2 * h ) {					  
    cout << "-1" << endl ;				      	  System . out . println ( "-1" ) ;			    	System . out . println ( "-1" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= h ;						      	i <= h ;						      i <= h ;							  
  i ++ ) cout << i << " " << i + 1 << endl ;		      	i ++ ) System . out . println ( i + " " + ( i + 1 ) ) ;	      i ++ ) {							  
  if ( d > h ) {					      	if ( d > h ) {						    	System . out . println ( i + " " + i + 1 ) ;		  
    cout << "1" << " " << h + 2 << endl ;		      	  System . out . println ( "1" + " " + ( h + 2 ) ) ;	      }								  
    for ( int i = h + 2 ;				      	  for ( int i = h + 2 ;					      if ( d > h ) {						  
    i <= d ;						      	  i <= d ;						    	System . out . println ( "1" + " " + h + 2 ) ;		  
    i ++ ) {						      	  i ++ ) {						    	for ( int i = h + 2 ;					  
      cout << i << " " << i + 1 << endl ;		      	    System . out . println ( i + " " + ( i + 1 ) ) ;	    	i <= d ;						  
    }							      	  }							    	i ++ ) {						  
  }							      	}							    	  System . out . println ( i + " " + i + 1 ) ;		  
  for ( int i = d + 1 ;					      	for ( int i = d + 1 ;					    	}							  
  i < n ;						      	i < n ;							      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = d + 1 ;					  
    int k = 1 ;						      	  int k = 1 ;						      i < n ;							  
    if ( d == h ) k = 2 ;				      	  if ( d == h ) k = 2 ;					      i ++ ) {							  
    cout << k << " " << i + 1 << endl ;			      	  System . out . println ( k + " " + ( i + 1 ) ) ;	    	int k = 1 ;						  
  }							      	}							    	if ( d == h ) {						  
}							      }								    	  k = 2 ;						  
							      								    	}							  
							      								    	System . out . println ( k + " " + i + 1 ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE			    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE
--							      --							    --								  --
int sumNodes ( int l ) {				      static int sumNodes ( int l ) {				    public static int sumNodes ( int l ) {			  script_not_found : None
  int leafNodeCount = pow ( 2 , l - 1 ) ;		      	int leafNodeCount = ( int ) Math . pow ( 2 , l - 1 ) ;	      int leafNodeCount = Math . pow ( 2 , l - 1 ) ;		  
  vector < int > vec [ l ] ;				      	Vector < Vector < Integer >> vec = new Vector < Vector < In   int [ ] [ ] list = new int [ l ] [ l ] ;			  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= leafNodeCount ;					      	i <= l ;						      i <= leafNodeCount ;					  
  i ++ ) vec [ l - 1 ] . push_back ( i ) ;		      	i ++ ) vec . add ( new Vector < Integer > ( ) ) ;	      i ++ ) {							  
  for ( int i = l - 2 ;					      	for ( int i = 1 ;					    	list [ l - 1 ] [ i ] = i ;				  
  i >= 0 ;						      	i <= leafNodeCount ;					      }								  
  i -- ) {						      	i ++ ) vec . get ( l - 1 ) . add ( i ) ;		      for ( int i = l - 2 ;					  
    int k = 0 ;						      	for ( int i = l - 2 ;					      i >= 0 ;							  
    while ( k < vec [ i + 1 ] . size ( ) - 1 ) {	      	i >= 0 ;						      i -- ) {							  
      vec [ i ] . push_back ( vec [ i + 1 ] [ k ] + vec [ i + 	i -- ) {						    	int k = 0 ;						  
      k += 2 ;						      	  int k = 0 ;						    	while ( k < list [ i + 1 ] . length - 1 ) {		  
    }							      	  while ( k < vec . get ( i + 1 ) . size ( ) - 1 ) {	    	  list [ i ] [ k ] = list [ i + 1 ] [ k ] + list [ i + 1  
  }							      	    vec . get ( i ) . add ( vec . get ( i + 1 ) . get ( k ) 	  k += 2 ;						  
  int sum = 0 ;						      	    k += 2 ;						    	}							  
  for ( int i = 0 ;					      	  }							      }								  
  i < l ;						      	}							      int sum = 0 ;						  
  i ++ ) {						      	int sum = 0 ;						      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	for ( int i = 0 ;					      i < l ;							  
    j < vec [ i ] . size ( ) ;				      	i < l ;							      i ++ ) {							  
    j ++ ) sum += vec [ i ] [ j ] ;			      	i ++ ) {						    	for ( int j = 0 ;					  
  }							      	  for ( int j = 0 ;					    	j < list [ i ] . length ;				  
  return sum ;						      	  j < vec . get ( i ) . size ( ) ;			    	j ++ ) {						  
}							      	  j ++ ) sum += vec . get ( i ) . get ( j ) ;		    	  sum += list [ i ] [ j ] ;				  
							      	}							    	}							  
							      	return sum ;						      }								  
							      }								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER		      CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER		    CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER			  CHECK_POSSIBLE_TRANSFORM_ONE_STRING_ANOTHER
--							      --							    --								  --
bool check ( string s1 , string s2 ) {			      static boolean check ( String s1 , String s2 ) {		    public static boolean check ( String s1 , String s2 ) {	  failure : #Results:7, 10
  int n = s1 . length ( ) ;				      	int n = s1 . length ( ) ;				      int n = s1 . length ( ) ;					  
  int m = s2 . length ( ) ;				      	int m = s2 . length ( ) ;				      int m = s2 . length ( ) ;					  
  bool dp [ n + 1 ] [ m + 1 ] ;				      	boolean dp [ ] [ ] = new boolean [ n + 1 ] [ m + 1 ] ;	      boolean [ ] [ ] dp = new boolean [ n + 1 ] [ m + 1 ] ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= m ;						      	  j <= m ;						    	j <= m ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) dp [ i ] [ j ] = false ;				  
      dp [ i ] [ j ] = false ;				      	    dp [ i ] [ j ] = false ;				      }								  
    }							      	  }							      dp [ 0 ] [ 0 ] = true ;					  
  }							      	}							      for ( int i = 0 ;						  
  dp [ 0 ] [ 0 ] = true ;				      	dp [ 0 ] [ 0 ] = true ;					      i < s1 . length ( ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      i ++ ) {							  
  i < s1 . length ( ) ;					      	i < s1 . length ( ) ;					    	for ( int j = 0 ;					  
  i ++ ) {						      	i ++ ) {						    	j <= s2 . length ( ) ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	j ++ ) {						  
    j <= s2 . length ( ) ;				      	  j <= s2 . length ( ) ;				    	  if ( dp [ i ] [ j ] ) {				  
    j ++ ) {						      	  j ++ ) {						    	    if ( j < s2 . length ( ) && ( Character . isUpperCase 
      if ( dp [ i ] [ j ] ) {				      	    if ( dp [ i ] [ j ] ) {				    	      dp [ i + 1 ] [ j + 1 ] = true ;			  
	if ( j < s2 . length ( ) && ( toupper ( s1 [ i ] ) == 	      if ( j < s2 . length ( ) && ( Character . toUpperCase 	    }							  
	if ( ! isupper ( s1 [ i ] ) ) dp [ i + 1 ] [ j ] = tr 	      if ( ! Character . isUpperCase ( s1 . charAt ( i ) )  	    if ( ! Character . isUpperCase ( s1 . charAt ( i ) )  
      }							      	    }							    	      dp [ i + 1 ] [ j ] = true ;			  
    }							      	  }							    	    }							  
  }							      	}							    	  }							  
  return ( dp [ n ] [ m ] ) ;				      	return ( dp [ n ] [ m ] ) ;				    	}							  
}							      }								      }								  
							      								      return ( dp [ n ] [ m ] ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_LONGEST_BALANCED_SUBSEQUENCE			      LENGTH_LONGEST_BALANCED_SUBSEQUENCE			    LENGTH_LONGEST_BALANCED_SUBSEQUENCE				  LENGTH_LONGEST_BALANCED_SUBSEQUENCE
--							      --							    --								  --
int maxLength ( char s [ ] , int n ) {			      static int maxLength ( String s , int n ) {		    public static int maxLength ( char [ ] s , int n ) {	  script_not_found : None
  int dp [ n ] [ n ] ;					      	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] [ ] dp = new int [ n ] [ n ] ;			  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	for ( int i = 0 ;					      Arrays . fill ( dp , 0 ) ;				  
  for ( int i = 0 ;					      	i < n - 1 ;						      for ( int i = 0 ;						  
  i < n - 1 ;						      	i ++ ) if ( s . charAt ( i ) == '(' && s . charAt ( i + 1 )   i < n - 1 ;						  
  i ++ ) if ( s [ i ] == '(' && s [ i + 1 ] == ')' ) dp [ i ] 	for ( int l = 2 ;					      i ++ ) if ( s [ i ] == '(' && s [ i + 1 ] == ')' ) dp [ i ] 
  for ( int l = 2 ;					      	l < n ;							      for ( int l = 2 ;						  
  l < n ;						      	l ++ ) {						      l < n ;							  
  l ++ ) {						      	  for ( int i = 0 , j = l ;				      l ++ ) {							  
    for ( int i = 0 , j = l ;				      	  j < n ;						    	for ( int i = 0 , j = l ;				  
    j < n ;						      	  i ++ , j ++ ) {					    	j < n ;							  
    i ++ , j ++ ) {					      	    if ( s . charAt ( i ) == '(' && s . charAt ( j ) == ')' 	i ++ , j ++ ) {						  
      if ( s [ i ] == '(' && s [ j ] == ')' ) dp [ i ] [ j ]  	    for ( int k = i ;					    	  if ( s [ i ] == '(' && s [ j ] == ')' ) dp [ i ] [ j ]  
      for ( int k = i ;					      	    k < j ;						    	  for ( int k = i ;					  
      k < j ;						      	    k ++ ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , d 	  k < j ;						  
      k ++ ) dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] 	  }							    	  k ++ ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , d 
    }							      	}							    	}							  
  }							      	return dp [ 0 ] [ n - 1 ] ;				      }								  
  return dp [ 0 ] [ n - 1 ] ;				      }								      return dp [ 0 ] [ n - 1 ] ;				  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS  COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS  COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS  COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS
--							      --							    --								  --
int countStrings ( int n , int k ) {			      static int countStrings ( int n , int k ) {		    public static int countStrings ( int n , int k ) {		  error : COUNT_BINARY_STRINGS_K_TIMES_APPEARING_ADJ
  int dp [ n + 1 ] [ k + 1 ] [ 2 ] ;			      	int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ;      int [ ] [ ] dp = new int [ n + 1 ] [ k + 1 ] ;		  ACENT_TWO_SET_BITS.java:37: error: array required,
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	dp [ 1 ] [ 0 ] [ 0 ] = 1 ;				      Arrays . fill ( dp , 0 ) ;				   but int found   dp [ 1 ] [ 0 ] [ 0 ] = 1 ;
  dp [ 1 ] [ 0 ] [ 0 ] = 1 ;				      	dp [ 1 ] [ 0 ] [ 1 ] = 1 ;				      dp [ 1 ] [ 0 ] [ 0 ] = 1 ;				  	     ^ COUNT_BINARY_STRINGS_K_TIMES_APPEARIN
  dp [ 1 ] [ 0 ] [ 1 ] = 1 ;				      	for ( int i = 2 ;					      dp [ 1 ] [ 0 ] [ 1 ] = 1 ;				  G_ADJACENT_TWO_SET_BITS.java:38: error: array requ
  for ( int i = 2 ;					      	i <= n ;						      for ( int i = 2 ;						  ired, but int found	dp [ 1 ] [ 0 ] [ 1 ] = 1 ;
  i <= n ;						      	i ++ ) {						      i <= n ;							  		  ^ COUNT_BINARY_STRINGS_K_TIMES_APP
  i ++ ) {						      	  for ( int j = 0 ;					      i ++ ) {							  EARING_ADJACENT_TWO_SET_BITS.java:45: error: array
    for ( int j = 0 ;					      	  j < i && j < k + 1 ;					    	for ( int j = 0 ;					   required, but int found	 dp [ i ] [ j ] [ 0
    j < i ;						      	  j ++ ) {						    	j < i ;							  ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ]
    j ++ ) {						      	    dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [  	j ++ ) {						  [ 1 ] ;		       ^ COUNT_BINARY_STRING
      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [  	    dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;	    	  dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [  S_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS.java:45:
      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;	      	    if ( j - 1 >= 0 ) {					    	  dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;	   error: array required, but int found	      dp [ i
      if ( j - 1 >= 0 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ]  	      dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]  	  if ( j - 1 >= 0 ) {					   ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i
    }							      	    }							    	    dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]   - 1 ] [ j ] [ 1 ] ;
  }							      	  }							    	  }							  		     ^ COUNT_BINARY_STRINGS_K_TIMES_
  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;	      	}							    	}							  APPEARING_ADJACENT_TWO_SET_BITS.java:45: error: ar
}							      	return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;	      }								  ray required, but int found	    dp [ i ] [ j ] [
							      }								      return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;	   0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j
							      								    }								   ] [ 1 ] ;
							      								    								  				      ^ COUNT_BINARY
							      								    								  _STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS.j
							      								    								  ava:46: error: array required, but int found
							      								    								   dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;
							      								    								  			^ COUNT_BINARY_STRINGS_K_TIM
							      								    								  ES_APPEARING_ADJACENT_TWO_SET_BITS.java:46: error:
							      								    								   array required, but int found       dp [ i ] [ j
							      								    								  ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;
							      								    								  				     ^ COUNT_BINARY_
							      								    								  STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS.ja
							      								    								  va:48: error: array required, but int found
							      								    								    dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [
							      								    								   1 ] ;			^ COUNT_BINARY_STRIN
							      								    								  GS_K_TIMES_APPEARING_ADJACENT_TWO_SET_BITS.java:48
							      								    								  : error: array required, but int found	 dp
							      								    								  [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]
							      								    								  ;
							      								    								  	 ^ COUNT_BINARY_STRINGS_K_TIMES_APPEARING_AD
							      								    								  JACENT_TWO_SET_BITS.java:52: error: array required
							      								    								  , but int found   return dp [ n ] [ k ] [ 0 ] + dp
							      								    								   [ n ] [ k ] [ 1 ] ;			       ^ COU
							      								    								  NT_BINARY_STRINGS_K_TIMES_APPEARING_ADJACENT_TWO_S
							      								    								  ET_BITS.java:52: error: array required, but int fo
							      								    								  und	return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ]
							      								    								   [ 1 ] ;
							      								    								  	^ 11 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1	      DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1		    DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1		  DYNAMIC_PROGRAMMING_SET_11_EGG_DROPPING_PUZZLE_1
--							      --							    --								  --
int eggDrop ( int n , int k ) {				      static int eggDrop ( int n , int k ) {			    public static int eggDrop ( int n , int k ) {		  script_not_found : None
  int eggFloor [ n + 1 ] [ k + 1 ] ;			      	int eggFloor [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;	      int [ ] [ ] eggFloor = new int [ n + 1 ] [ k + 1 ] ;	  
  int res ;						      	int res ;						      int res ;							  
  int i , j , x ;					      	int i , j , x ;						      int i , j , x ;						  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    eggFloor [ i ] [ 1 ] = 1 ;				      	  eggFloor [ i ] [ 1 ] = 1 ;				    	eggFloor [ i ] [ 1 ] = 1 ;				  
    eggFloor [ i ] [ 0 ] = 0 ;				      	  eggFloor [ i ] [ 0 ] = 0 ;				    	eggFloor [ i ] [ 0 ] = 0 ;				  
  }							      	}							      }								  
  for ( j = 1 ;						      	for ( j = 1 ;						      for ( j = 1 ;						  
  j <= k ;						      	j <= k ;						      j <= k ;							  
  j ++ ) eggFloor [ 1 ] [ j ] = j ;			      	j ++ ) eggFloor [ 1 ] [ j ] = j ;			      j ++ ) {							  
  for ( i = 2 ;						      	for ( i = 2 ;						    	eggFloor [ 1 ] [ j ] = j ;				  
  i <= n ;						      	i <= n ;						      }								  
  i ++ ) {						      	i ++ ) {						      for ( i = 2 ;						  
    for ( j = 2 ;					      	  for ( j = 2 ;						      i <= n ;							  
    j <= k ;						      	  j <= k ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( j = 2 ;						  
      eggFloor [ i ] [ j ] = INT_MAX ;			      	    eggFloor [ i ] [ j ] = Integer . MAX_VALUE ;	    	j <= k ;						  
      for ( x = 1 ;					      	    for ( x = 1 ;					    	j ++ ) {						  
      x <= j ;						      	    x <= j ;						    	  eggFloor [ i ] [ j ] = Integer . MAX_VALUE ;		  
      x ++ ) {						      	    x ++ ) {						    	  for ( x = 1 ;						  
	res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFlo 	      res = 1 + max ( eggFloor [ i - 1 ] [ x - 1 ] , eggFlo 	  x <= j ;						  
	if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j  	      if ( res < eggFloor [ i ] [ j ] ) eggFloor [ i ] [ j  	  x ++ ) {						  
      }							      	    }							    	    res = 1 + Math . max ( eggFloor [ i - 1 ] [ x - 1 ] , 
    }							      	  }							    	    if ( res < eggFloor [ i ] [ j ] ) {			  
  }							      	}							    	      eggFloor [ i ] [ j ] = res ;			  
  return eggFloor [ n ] [ k ] ;				      	return eggFloor [ n ] [ k ] ;				    	    }							  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return eggFloor [ n ] [ k ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED     LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED	    LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED	  LONGEST_COMMON_SUBSEQUENCE_WITH_AT_MOST_K_CHANGES_ALLOWED
--							      --							    --								  --
int lcs ( int dp [ MAX ] [ MAX ] [ MAX ] , int arr1 [ ] , int static int lcs ( int [ ] [ ] [ ] dp , int [ ] arr1 , int n ,  public static int lcs ( int dp [ ] [ ] , int arr1 [ ] , int n script_not_found : None
  if ( k < 0 ) return - 1e7 ;				      	if ( k < 0 ) return - 10000000 ;			      if ( k < 0 ) return - 1e7 ;				  
  if ( n < 0 || m < 0 ) return 0 ;			      	if ( n < 0 || m < 0 ) return 0 ;			      if ( n < 0 || m < 0 ) return 0 ;				  
  int & ans = dp [ n ] [ m ] [ k ] ;			      	int ans = dp [ n ] [ m ] [ k ] ;			      int ans = dp [ n ] [ m ] [ k ] ;				  
  if ( ans != - 1 ) return ans ;			      	if ( ans != - 1 ) return ans ;				      if ( ans != - 1 ) return ans ;				  
  ans = max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) , lcs  	try {							      ans = Math . max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k ) 
  if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) ans = max ( ans , 1 	  ans = Math . max ( lcs ( dp , arr1 , n - 1 , arr2 , m , k   if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) ans = Math . max (  
  ans = max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 , m -  	  if ( arr1 [ n - 1 ] == arr2 [ m - 1 ] ) ans = Math . max    ans = Math . max ( ans , 1 + lcs ( dp , arr1 , n - 1 , arr2 
  return ans ;						      	  ans = Math . max ( ans , 1 + lcs ( dp , arr1 , n - 1 , ar   return ans ;						  
}							      	}							    }								  
							      	catch ( Exception e ) {					    								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1		      SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1			    SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1			  SORT_ARRAY_CONVERTING_ELEMENTS_SQUARES_1
--							      --							    --								  --
void sortSquares ( int arr [ ] , int n ) {		      public static void sortSquares ( int arr [ ] ) {		    public static void sortSquares ( int arr [ ] , int n ) {	  script_not_found : None
  int K = 0 ;						      	int n = arr . length ;					      int K = 0 ;						  
  for ( K = 0 ;						      	int k ;							      for ( K = 0 ;						  
  K < n ;						      	for ( k = 0 ;						      K < n ;							  
  K ++ ) if ( arr [ K ] >= 0 ) break ;			      	k < n ;							      K ++ ) if ( arr [ K ] >= 0 ) break ;			  
  int i = K - 1 ;					      	k ++ ) {						      int i = K - 1 ;						  
  int j = K ;						      	  if ( arr [ k ] >= 0 ) break ;				      int j = K ;						  
  int ind = 0 ;						      	}							      int ind = 0 ;						  
  int temp [ n ] ;					      	int i = k - 1 ;						      int temp [ ] = new int [ n ] ;				  
  while ( i >= 0 && j < n ) {				      	int j = k ;						      while ( i >= 0 && j < n ) {				  
    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {    	int ind = 0 ;						    	if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {	  
      temp [ ind ] = arr [ i ] * arr [ i ] ;		      	int [ ] temp = new int [ n ] ;				    	  temp [ ind ] = arr [ i ] * arr [ i ] ;		  
      i -- ;						      	while ( i >= 0 && j < n ) {				    	  i -- ;						  
    }							      	  if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {    	}							  
    else {						      	    temp [ ind ] = arr [ i ] * arr [ i ] ;		    	else {							  
      temp [ ind ] = arr [ j ] * arr [ j ] ;		      	    i -- ;						    	  temp [ ind ] = arr [ j ] * arr [ j ] ;		  
      j ++ ;						      	  }							    	  j ++ ;						  
    }							      	  else {						    	}							  
    ind ++ ;						      	    temp [ ind ] = arr [ j ] * arr [ j ] ;		    	ind ++ ;						  
  }							      	    j ++ ;						      }								  
  while ( i >= 0 ) {					      	  }							      while ( i >= 0 ) {					  
    temp [ ind ] = arr [ i ] * arr [ i ] ;		      	  ind ++ ;						    	temp [ ind ] = arr [ i ] * arr [ i ] ;			  
    i -- ;						      	}							    	i -- ;							  
    ind ++ ;						      	while ( i >= 0 ) {					    	ind ++ ;						  
  }							      	  temp [ ind ++ ] = arr [ i ] * arr [ i ] ;		      }								  
  while ( j < n ) {					      	  i -- ;						      while ( j < n ) {						  
    temp [ ind ] = arr [ j ] * arr [ j ] ;		      	}							    	temp [ ind ] = arr [ j ] * arr [ j ] ;			  
    j ++ ;						      	while ( j < n ) {					    	j ++ ;							  
    ind ++ ;						      	  temp [ ind ++ ] = arr [ j ] * arr [ j ] ;		    	ind ++ ;						  
  }							      	  j ++ ;						      }								  
  for ( int i = 0 ;					      	}							      for ( int i = 0 ;						  
  i < n ;						      	for ( int x = 0 ;					      i < n ;							  
  i ++ ) arr [ i ] = temp [ i ] ;			      	x < n ;							      i ++ ) arr [ i ] = temp [ i ] ;				  
}							      	x ++ ) arr [ x ] = temp [ x ] ;				    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K			      SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K				    SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K				  SUBARRAY_NO_PAIR_SUM_DIVISIBLE_K
--							      --							    --								  --
void subarrayDivisibleByK ( int arr [ ] , int n , int k ) {   static void subarrayDivisibleByK ( int [ ] arr , int n , int  public static void subarrayDivisibleByK ( int arr [ ] , int n script_not_found : None
  map < int , int > mp ;				      	int [ ] mp = new int [ 1000 ] ;				      int mp [ ] = new int [ n ] ;				  
  int s = 0 , e = 0 , maxs = 0 , maxe = 0 ;		      	int s = 0 , e = 0 , maxs = 0 , maxe = 0 ;		      int s = 0 , e = 0 , maxs = 0 , maxe = 0 ;			  
  mp [ arr [ 0 ] % k ] ++ ;				      	mp [ arr [ 0 ] % k ] ++ ;				      mp [ arr [ 0 ] % k ] ++ ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int mod = arr [ i ] % k ;				      	  int mod = arr [ i ] % k ;				    	int mod = arr [ i ] % k ;				  
    while ( mp [ k - mod ] != 0 || ( mod == 0 && mp [ mod ] ! 	  while ( mp [ k - mod ] != 0 || ( mod == 0 && mp [ mod ] ! 	while ( mp [ k - mod ] != 0 || ( mod == 0 && mp [ mod ] ! 
      mp [ arr [ s ] % k ] -- ;				      	    mp [ arr [ s ] % k ] -- ;				    	  mp [ arr [ s ] % k ] -- ;				  
      s ++ ;						      	    s ++ ;						    	  s ++ ;						  
    }							      	  }							    	}							  
    mp [ mod ] ++ ;					      	  mp [ mod ] ++ ;					    	mp [ mod ] ++ ;						  
    e ++ ;						      	  e ++ ;						    	e ++ ;							  
    if ( ( e - s ) > ( maxe - maxs ) ) {		      	  if ( ( e - s ) > ( maxe - maxs ) ) {			    	if ( ( e - s ) > ( maxe - maxs ) ) {			  
      maxe = e ;					      	    maxe = e ;						    	  maxe = e ;						  
      maxs = s ;					      	    maxs = s ;						    	  maxs = s ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << "The maximum size is " << maxe - maxs + 1 << " and  	System . out . print ( "The maximum size is " + ( maxe - ma   System . out . println ( "The maximum size is " + maxe - ma 
  for ( int i = maxs ;					      	for ( int i = maxs ;					      for ( int i = maxs ;					  
  i <= maxe ;						      	i <= maxe ;						      i <= maxe ;						  
  i ++ ) cout << arr [ i ] << " " ;			      	i ++ ) System . out . print ( arr [ i ] + " " ) ;	      i ++ ) {							  
}							      }								    	System . out . print ( arr [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA MAXIMUM_DIFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THA
--							      --							    --								  --
int maxdiff ( int arr [ ] , int n ) {			      static int maxdiff ( int arr [ ] , int n ) {		    public static int maxdiff ( int arr [ ] , int n ) {		  error : Exception in thread "main" java.lang.NullP
  unordered_map < int , int > freq ;			      	Map < Integer , Integer > freq = new HashMap < > ( ) ;	      HashMap < Integer , Integer > freq = new HashMap < > ( ) ;  ointerException 	at MAXIMUM_DIFFERENCE_BETWEEN_FRE
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  QUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GR
  i < n ;						      	i < n ;							      i < n ;							  EATER_FREQUENCY_IS_ALSO_GREATER.f_filled(MAXIMUM_D
  i ++ ) freq [ arr [ i ] ] ++ ;			      	i ++ ) freq . put ( arr [ i ] , freq . get ( arr [ i ] ) ==   i ++ ) {							  IFFERENCE_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_T
  int ans = 0 ;						      	int ans = 0 ;						    	freq . put ( arr [ i ] , ++ i ) ;			  HAT_ELEMENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREAT
  for ( int i = 0 ;					      	for ( int i = 0 ;					      }								  ER.java:47) 	at MAXIMUM_DIFFERENCE_BETWEEN_FREQUEN
  i < n ;						      	i < n ;							      int ans = 0 ;						  CY_OF_TWO_ELEMENTS_SUCH_THAT_ELEMENT_HAVING_GREATE
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  R_FREQUENCY_IS_ALSO_GREATER.main(MAXIMUM_DIFFERENC
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < n ;							  E_BETWEEN_FREQUENCY_OF_TWO_ELEMENTS_SUCH_THAT_ELEM
    j < n ;						      	  j < n ;						      i ++ ) {							  ENT_HAVING_GREATER_FREQUENCY_IS_ALSO_GREATER.java:
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  85)
      if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i 	    if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ]  	j < n ;							  
      else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && ar 	    else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ 	j ++ ) {						  
    }							      	  }							    	  if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ]  
  }							      	}							    	    ans = Math . max ( ans , freq . get ( arr [ i ] ) - f 
  return ans ;						      	return ans ;						    	  }							  
}							      }								    	  else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ 
							      								    	    ans = Math . max ( ans , freq . get ( arr [ j ] ) - f 
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_PATH_SUM_MATRIX					      MAXIMUM_PATH_SUM_MATRIX					    MAXIMUM_PATH_SUM_MATRIX					  MAXIMUM_PATH_SUM_MATRIX
--							      --							    --								  --
int findMaxPath ( int mat [ ] [ M ] ) {			      static int findMaxPath ( int mat [ ] [ ] ) {		    public static int findMaxPath ( int mat [ ] [ ] ) {		  script_not_found : None
  for ( int i = 1 ;					      	int res = - 1 ;						      for ( int i = 1 ;						  
  i < N ;						      	for ( int i = 0 ;					      i < N ;							  
  i ++ ) {						      	i < M ;							      i ++ ) {							  
    for ( int j = 0 ;					      	i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ;		    	for ( int j = 0 ;					  
    j < M ;						      	for ( int i = 1 ;					    	j < M ;							  
    j ++ ) {						      	i < N ;							    	j ++ ) {						  
      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat  	i ++ ) {						    	  if ( j > 0 && j < M - 1 ) {				  
      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1  	  res = - 1 ;						    	    mat [ i ] [ j ] += Math . max ( mat [ i - 1 ] [ j ] , 
      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i  	  for ( int j = 0 ;					    	  }							  
    }							      	  j < M ;						    	  else if ( j > 0 ) {					  
  }							      	  j ++ ) {						    	    mat [ i ] [ j ] += Math . max ( mat [ i - 1 ] [ j ] , 
  int res = 0 ;						      	    if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat  	  }							  
  for ( int j = 0 ;					      	    else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1  	  else if ( j < M - 1 ) {				  
  j < M ;						      	    else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i  	    mat [ i ] [ j ] += Math . max ( mat [ i - 1 ] [ j ] , 
  j ++ ) res = max ( mat [ N - 1 ] [ j ] , res ) ;	      	    res = max ( mat [ i ] [ j ] , res ) ;		    	  }							  
  return res ;						      	  }							    	}							  
}							      	}							      }								  
							      	return res ;						      int res = 0 ;						  
							      }								      for ( int j = 0 ;						  
							      								      j < M ;							  
							      								      j ++ ) {							  
							      								    	res = Math . max ( mat [ N - 1 ] [ j ] , res ) ;	  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K	      COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K		    COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K		  COUNT_DISTINCT_ELEMENTS_IN_EVERY_WINDOW_OF_SIZE_K
--							      --							    --								  --
void countDistinct ( int arr [ ] , int k , int n ) {	      static void countDistinct ( int arr [ ] , int k ) {	    public static void countDistinct ( int arr [ ] , int k , int  script_not_found : None
  map < int , int > hm ;				      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    HashMap < Integer , Integer > hm = new HashMap < > ( ) ;	  
  int dist_count = 0 ;					      	int dist_count = 0 ;					      int distCount = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( hm [ arr [ i ] ] == 0 ) {			      	  if ( hM . get ( arr [ i ] ) == null ) {		    	if ( hm . get ( arr [ i ] ) == 0 ) distCount ++ ;	  
      dist_count ++ ;					      	    hM . put ( arr [ i ] , 1 ) ;			    	hm . put ( arr [ i ] , 1 ) ;				  
    }							      	    dist_count ++ ;					      }								  
    hm [ arr [ i ] ] += 1 ;				      	  }							      System . out . println ( distCount ) ;			  
  }							      	  else {						      for ( int i = k ;						  
  cout << dist_count << endl ;				      	    int count = hM . get ( arr [ i ] ) ;		      i < n ;							  
  for ( int i = k ;					      	    hM . put ( arr [ i ] , count + 1 ) ;		      i ++ ) {							  
  i < n ;						      	  }							    	if ( hm . get ( arr [ i - k ] ) == 1 ) distCount -- ;	  
  i ++ ) {						      	}							    	hm . get ( arr [ i - k ] ) - = 1 ;			  
    if ( hm [ arr [ i - k ] ] == 1 ) {			      	System . out . println ( dist_count ) ;			    	if ( hm . get ( arr [ i ] ) == 0 ) distCount ++ ;	  
      dist_count -- ;					      	for ( int i = k ;					    	hm . put ( arr [ i ] , 1 ) ;				  
    }							      	i < arr . length ;					    	System . out . println ( distCount ) ;			  
    hm [ arr [ i - k ] ] -= 1 ;				      	i ++ ) {						      }								  
    if ( hm [ arr [ i ] ] == 0 ) {			      	  if ( hM . get ( arr [ i - k ] ) == 1 ) {		    }								  
      dist_count ++ ;					      	    hM . remove ( arr [ i - k ] ) ;			    								  
    }							      	    dist_count -- ;					    								  
    hm [ arr [ i ] ] += 1 ;				      	  }							    								  
    cout << dist_count << endl ;			      	  else {						    								  
  }							      	    int count = hM . get ( arr [ i - k ] ) ;		    								  
}							      	    hM . put ( arr [ i - k ] , count - 1 ) ;		    								  
							      	  }							    								  
							      	  if ( hM . get ( arr [ i ] ) == null ) {		    								  
							      	    hM . put ( arr [ i ] , 1 ) ;			    								  
							      	    dist_count ++ ;					    								  
							      	  }							    								  
							      	  else {						    								  
							      	    int count = hM . get ( arr [ i ] ) ;		    								  
							      	    hM . put ( arr [ i ] , count + 1 ) ;		    								  
							      	  }							    								  
							      	  System . out . println ( dist_count ) ;		    								  
							      	}							    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	      FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	    FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY	  FIND_INDEX_MAXIMUM_OCCURRING_ELEMENT_EQUAL_PROBABILITY
--							      --							    --								  --
void findRandomIndexOfMax ( int arr [ ] , int n ) {	      static void findRandomIndexOfMax ( int arr [ ] , int n ) {    public static void findRandomIndexOfMax ( int arr [ ] , int n script_not_found : None
  unordered_map < int , int > freq ;			      	HashMap < Integer , Integer > mp = new HashMap < Integer ,    HashMap < Integer , Integer > freq = new HashMap < > ( ) ;  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) freq [ arr [ i ] ] += 1 ;			      	i ++ ) if ( mp . containsKey ( arr [ i ] ) ) {		      i ++ ) {							  
  int max_element ;					      	  mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;	    	freq . put ( arr [ i ] , 1 ) ;				  
  int max_so_far = INT_MIN ;				      	}							      }								  
  for ( pair < int , int > p : freq ) {			      	else {							      int maxElement = 0 ;					  
    if ( p . second > max_so_far ) {			      	  mp . put ( arr [ i ] , 1 ) ;				      int maxSoFar = Integer . MIN_VALUE ;			  
      max_so_far = p . second ;				      	}							      for ( Pair < Integer , Integer > p : freq . values ( ) ) {  
      max_element = p . first ;				      	int max_element = Integer . MIN_VALUE ;			    	if ( p . second > maxSoFar ) {				  
    }							      	int max_so_far = Integer . MIN_VALUE ;			    	  maxSoFar = p . second ;				  
  }							      	for ( Map . Entry < Integer , Integer > p : mp . entrySet ( 	  maxElement = p . first ;				  
  int r = ( rand ( ) % max_so_far ) + 1 ;		      	  if ( p . getValue ( ) > max_so_far ) {		    	}							  
  for ( int i = 0 , count = 0 ;				      	    max_so_far = p . getValue ( ) ;			      }								  
  i < n ;						      	    max_element = p . getKey ( ) ;			      int r = ( Math . random ( ) * maxSoFar ) + 1 ;		  
  i ++ ) {						      	  }							      for ( int i = 0 , count = 0 ;				  
    if ( arr [ i ] == max_element ) count ++ ;		      	}							      i < n ;							  
    if ( count == r ) {					      	int r = ( int ) ( ( new Random ( ) . nextInt ( max_so_far )   i ++ ) {							  
      cout << "Element with maximum frequency present " "at i 	for ( int i = 0 , count = 0 ;				    	if ( arr [ i ] == maxElement ) {			  
      break ;						      	i < n ;							    	  count ++ ;						  
    }							      	i ++ ) {						    	}							  
  }							      	  if ( arr [ i ] == max_element ) count ++ ;		    	if ( count == r ) {					  
}							      	  if ( count == r ) {					    	  System . out . println ( "Element with maximum frequenc 
							      	    System . out . print ( "Element with maximum frequency  	  break ;						  
							      	    break ;						    	}							  
							      	  }							      }								  
							      	}							    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		      FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1		    FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1			  FIND_LARGEST_D_IN_ARRAY_SUCH_THAT_A_B_C_D_1
--							      --							    --								  --
int findFourElements ( int arr [ ] , int n ) {		      static int findFourElements ( int [ ] arr , int n ) {	    public static int findFourElements ( int arr [ ] , int n ) {  script_not_found : None
  unordered_map < int , pair < int , int >> mp ;	      	HashMap < Integer , Indexes > map = new HashMap < > ( ) ;     HashMap < Integer , Pair < Integer , Integer >> mp = new Ha 
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) {						      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	  for ( int j = i + 1 ;					      j < n ;							  
  j ++ ) mp [ arr [ i ] + arr [ j ] ] = {		      	  j < n ;						      j ++ ) mp . put ( arr [ i ] + arr [ j ] , new Pair < > ( i  
    i , j }						      	  j ++ ) {						      int d = Integer . MIN_VALUE ;				  
    ;							      	    map . put ( arr [ i ] + arr [ j ] , new Indexes ( i , j   for ( int i = 0 ;						  
    int d = INT_MIN ;					      	  }							      i < n - 1 ;						  
    for ( int i = 0 ;					      	}							      i ++ ) {							  
    i < n - 1 ;						      	int d = Integer . MIN_VALUE ;				    	for ( int j = i + 1 ;					  
    i ++ ) {						      	for ( int i = 0 ;					    	j < n ;							  
      for ( int j = i + 1 ;				      	i < n - 1 ;						    	j ++ ) {						  
      j < n ;						      	i ++ ) {						    	  int abs_diff = Math . abs ( arr [ i ] - arr [ j ] ) ;	  
      j ++ ) {						      	  for ( int j = i + 1 ;					    	  if ( mp . containsKey ( abs_diff ) ) {		  
	int abs_diff = abs ( arr [ i ] - arr [ j ] ) ;	      	  j < n ;						    	    Pair < Integer , Integer > p = mp . get ( abs_diff )  
	if ( mp . find ( abs_diff ) != mp . end ( ) ) {	      	  j ++ ) {						    	    if ( p . first != i && p . first != j && p . second ! 
	  pair < int , int > p = mp [ abs_diff ] ;	      	    int abs_diff = Math . abs ( arr [ i ] - arr [ j ] ) ;   	  }							  
	  if ( p . first != i && p . first != j && p . second 	    if ( map . containsKey ( abs_diff ) ) {		    	}							  
	}						      	      Indexes indexes = map . get ( abs_diff ) ;	      }								  
      }							      	      if ( indexes . getI ( ) != i && indexes . getI ( ) !=   return d ;						  
    }							      		d = Math . max ( d , Math . max ( arr [ i ] , arr [ }								  
    return d ;						      	      }							    								  
  }							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return d ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_ENDLESS_POINTS				      FIND_NUMBER_ENDLESS_POINTS				    FIND_NUMBER_ENDLESS_POINTS					  FIND_NUMBER_ENDLESS_POINTS
--							      --							    --								  --
int countEndless ( bool input [ ] [ MAX ] , int n ) {	      static int countEndless ( boolean input [ ] [ ] , int n ) {   public static int countEndless ( boolean [ ] input , int n )  error : FIND_NUMBER_ENDLESS_POINTS.java:49: error:
  bool row [ n ] [ n ] , col [ n ] [ n ] ;		      	boolean row [ ] [ ] = new boolean [ n ] [ n ] ;		      boolean [ ] row = new boolean [ n ] [ n ] , col = new boole  incompatible types: boolean[][] cannot be convert
  for ( int j = 0 ;					      	boolean col [ ] [ ] = new boolean [ n ] [ n ] ;		      for ( int j = 0 ;						  ed to boolean[]   boolean [ ] row = new boolean [
  j < n ;						      	for ( int j = 0 ;					      j < n ;							  n ] [ n ] , col = new boolean [ n ] [ n ] ;
  j ++ ) {						      	j < n ;							      j ++ ) {							  		^ FIND_NUMBER_ENDLESS_POINTS.java:49
    bool isEndless = 1 ;				      	j ++ ) {						    	boolean isEndless = 1 ;					  : error: incompatible types: boolean[][] cannot be
    for ( int i = n - 1 ;				      	  boolean isEndless = true ;				    	for ( int i = n - 1 ;					   converted to boolean[]   boolean [ ] row = new bo
    i >= 0 ;						      	  for ( int i = n - 1 ;					    	i >= 0 ;						  olean [ n ] [ n ] , col = new boolean [ n ] [ n ]
    i -- ) {						      	  i >= 0 ;						    	i -- ) {						  ;
      if ( input [ i ] [ j ] == 0 ) isEndless = 0 ;	      	  i -- ) {						    	  if ( input [ i ] [ j ] == 0 ) {			      ^ FIND_NUMBER_ENDLESS_POINTS.java:53: error: i
      col [ i ] [ j ] = isEndless ;			      	    if ( input [ i ] [ j ] == false ) isEndless = false ;   	    isEndless = 0 ;					  ncompatible types: int cannot be converted to bool
    }							      	    col [ i ] [ j ] = isEndless ;			    	  }							  ean	  boolean isEndless = 1 ;
  }							      	  }							    	  col [ i ] [ j ] = isEndless ;				  	^ FIND_NUMBER_ENDLESS_POINTS.java:57: error:
  for ( int i = 0 ;					      	}							    	}							   array required, but boolean found	   if ( inpu
  i < n ;						      	for ( int i = 0 ;					      }								  t [ i ] [ j ] == 0 ) {			^ FI
  i ++ ) {						      	i < n ;							      for ( int i = 0 ;						  ND_NUMBER_ENDLESS_POINTS.java:58: error: incompati
    bool isEndless = 1 ;				      	i ++ ) {						      i < n ;							  ble types: int cannot be converted to boolean
    for ( int j = n - 1 ;				      	  boolean isEndless = true ;				      i ++ ) {							      isEndless = 0 ;			  ^ FIND_NUM
    j >= 0 ;						      	  for ( int j = n - 1 ;					    	boolean isEndless = 1 ;					  BER_ENDLESS_POINTS.java:60: error: array required,
    j -- ) {						      	  j >= 0 ;						    	for ( int j = n - 1 ;					   but boolean found	   col [ i ] [ j ] = isEndle
      if ( input [ i ] [ j ] == 0 ) isEndless = 0 ;	      	  j -- ) {						    	j >= 0 ;						  ss ;		       ^ FIND_NUMBER_ENDLESS_POINTS.
      row [ i ] [ j ] = isEndless ;			      	    if ( input [ i ] [ j ] == false ) isEndless = false ;   	j -- ) {						  java:66: error: incompatible types: int cannot be
    }							      	    row [ i ] [ j ] = isEndless ;			    	  if ( input [ i ] [ j ] == 0 ) {			  converted to boolean	   boolean isEndless = 1 ;
  }							      	  }							    	    isEndless = 0 ;					  			 ^ FIND_NUMBER_ENDLESS_POINT
  int ans = 0 ;						      	}							    	  }							  S.java:70: error: array required, but boolean foun
  for ( int i = 0 ;					      	int ans = 0 ;						    	  row [ i ] [ j ] = isEndless ;				  d	  if ( input [ i ] [ j ] == 0 ) {
  i < n ;						      	for ( int i = 0 ;					    	}							  	       ^ FIND_NUMBER_ENDLESS_POINTS.java:71:
  i ++ ) for ( int j = 1 ;				      	i < n ;							      }								   error: incompatible types: int cannot be converte
  j < n ;						      	i ++ ) for ( int j = 1 ;				      int ans = 0 ;						  d to boolean	       isEndless = 0 ;
  j ++ ) if ( row [ i ] [ j ] && col [ i ] [ j ] ) ans ++ ;   	j < n ;							      for ( int i = 0 ;						  	 ^ FIND_NUMBER_ENDLESS_POINTS.java:73: error
  return ans ;						      	j ++ ) if ( row [ i ] [ j ] && col [ i ] [ j ] ) ans ++ ;     i < n ;							  : array required, but boolean found	    row [ i
}							      	return ans ;						      i ++ ) for ( int j = 1 ;					  ] [ j ] = isEndless ;			^ FIND_NUMBE
							      }								      j < n ;							  R_ENDLESS_POINTS.java:81: error: array required, b
							      								      j ++ ) if ( row [ i ] [ j ] && col [ i ] [ j ] ) ans ++ ;	  ut boolean found   j ++ ) if ( row [ i ] [ j ] &&
							      								      return ans ;						  col [ i ] [ j ] ) ans ++ ;
							      								    }								   ^ FIND_NUMBER_ENDLESS_POINTS.java:81: error: arra
							      								    								  y required, but boolean found	  j ++ ) if ( row [
							      								    								  i ] [ j ] && col [ i ] [ j ] ) ans ++ ;
							      								    								  				   ^ FIND_NUMBER_END
							      								    								  LESS_POINTS.java:112: error: incompatible types: b
							      								    								  oolean[][] cannot be converted to boolean[]
							      								    								    if(f_filled(param0.get(i),param1.get(i)) == f_go
							      								    								  ld(param0.get(i),param1.get(i)))
							      								    								  	       ^ Note: Some messages have been simpl
							      								    								  ified; recompile with -Xdiags:verbose to get full
							      								    								  output 13 errors
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINTING_STRING_PLUS_PATTERN_MATRIX			      PRINTING_STRING_PLUS_PATTERN_MATRIX			    PRINTING_STRING_PLUS_PATTERN_MATRIX				  PRINTING_STRING_PLUS_PATTERN_MATRIX
--							      --							    --								  --
void carveCross ( string str ) {			      static void carveCross ( String str ) {			    public static void carveCross ( String str ) {		  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  if ( n % 2 == 0 ) {					      	if ( n % 2 == 0 ) {					      if ( n % 2 == 0 ) {					  
    cout << "Not possible. Please enter " << "odd length stri 	  System . out . print ( "Not possible. Please enter " + "o 	System . out . println ( "Not possible. Please enter " +  
  }							      	}							      }								  
  else {						      	else {							      else {							  
    char arr [ max ] [ max ] ;				      	  char arr [ ] [ ] = new char [ max ] [ max ] ;		    	char [ ] arr [ ] [ ] = new char [ max ] [ max ] ;	  
    int m = n / 2 ;					      	  int m = n / 2 ;					    	int m = n / 2 ;						  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      for ( int j = 0 ;					      	    for ( int j = 0 ;					    	  for ( int j = 0 ;					  
      j < n ;						      	    j < n ;						    	  j < n ;						  
      j ++ ) {						      	    j ++ ) {						    	  j ++ ) {						  
	arr [ i ] [ j ] = 'X' ;				      	      arr [ i ] [ j ] = 'X' ;				    	    arr [ i ] [ j ] = 'X' ;				  
      }							      	    }							    	  }							  
    }							      	  }							    	}							  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      arr [ i ] [ m ] = str [ i ] ;			      	    arr [ i ] [ m ] = str . charAt ( i ) ;		    	  arr [ i ] [ m ] = str . charAt ( i ) ;		  
    }							      	  }							    	}							  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      arr [ m ] [ i ] = str [ i ] ;			      	    arr [ m ] [ i ] = str . charAt ( i ) ;		    	  arr [ m ] [ i ] = str . charAt ( i ) ;		  
    }							      	  }							    	}							  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      for ( int j = 0 ;					      	    for ( int j = 0 ;					    	  for ( int j = 0 ;					  
      j < n ;						      	    j < n ;						    	  j < n ;						  
      j ++ ) {						      	    j ++ ) {						    	  j ++ ) {						  
	cout << arr [ i ] [ j ] << " " ;		      	      System . out . print ( arr [ i ] [ j ] + " " ) ;	    	    System . out . print ( arr [ i ] [ j ] + " " ) ;	  
      }							      	    }							    	  }							  
      cout << "\n" ;					      	    System . out . print ( "\n" ) ;			    	  System . out . println ( "" ) ;			  
    }							      	  }							    	}							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING	      DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING	    DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING		  DYNAMIC_PROGRAMMING_SET_34_ASSEMBLY_LINE_SCHEDULING
--							      --							    --								  --
int carAssembly ( int a [ ] [ NUM_STATION ] , int t [ ] [ NUM static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int  public static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] script_not_found : None
  int T1 [ NUM_STATION ] , T2 [ NUM_STATION ] , i ;	      	int T1 [ ] = new int [ NUM_STATION ] ;			      int T1 [ ] = new int [ NUM_STATION ] , T2 [ ] = new int [ N 
  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;			      	int T2 [ ] = new int [ NUM_STATION ] ;			      T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;			  
  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;			      	int i ;							      T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;			  
  for ( i = 1 ;						      	T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;			      for ( i = 1 ;						  
  i < NUM_STATION ;					      	T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;			      i < NUM_STATION ;						  
  ++ i ) {						      	for ( i = 1 ;						      ++ i ) {							  
    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i -  	i < NUM_STATION ;					    	T1 [ i ] = Math . min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 
    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i -  	++ i ) {						    	T2 [ i ] = Math . min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 
  }							      	  T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i -    }								  
  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_ST 	  T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i -    return Math . min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ 
}							      	}							    }								  
							      	return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_ST 								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_TWO_LARGE_NUMBERS					      SUM_TWO_LARGE_NUMBERS					    SUM_TWO_LARGE_NUMBERS					  SUM_TWO_LARGE_NUMBERS
--							      --							    --								  --
string findSum ( string str1 , string str2 ) {		      static String findSum ( String str1 , String str2 ) {	    public static String findSum ( String str1 , String str2 ) {  error : SUM_TWO_LARGE_NUMBERS.java:46: error: cann
  if ( str1 . length ( ) > str2 . length ( ) ) swap ( str1 ,  	if ( str1 . length ( ) > str2 . length ( ) ) {		      if ( str1 . length ( ) > str2 . length ( ) ) {		  ot find symbol     swap ( str1 , str2 ) ;	^
  string str = "" ;					      	  String t = str1 ;					    	swap ( str1 , str2 ) ;					  symbol:   method swap(String,String)	 location: c
  int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;	      	  str1 = str2 ;						      }								  lass SUM_TWO_LARGE_NUMBERS SUM_TWO_LARGE_NUMBERS.j
  reverse ( str1 . begin ( ) , str1 . end ( ) ) ;	      	  str2 = t ;						      StringBuffer str = new StringBuffer ( ) ;			  ava:50: error: cannot find symbol   reverse ( str1
  reverse ( str2 . begin ( ) , str2 . end ( ) ) ;	      	}							      int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;	   ) ;	 ^   symbol:   method reverse(String)	loca
  int carry = 0 ;					      	String str = "" ;					      reverse ( str1 ) ;					  tion: class SUM_TWO_LARGE_NUMBERS SUM_TWO_LARGE_NU
  for ( int i = 0 ;					      	int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;	      reverse ( str2 ) ;					  MBERS.java:51: error: cannot find symbol   reverse
  i < n1 ;						      	str1 = new StringBuilder ( str1 ) . reverse ( ) . toString    int carry = 0 ;						   ( str2 ) ;	^   symbol:   method reverse(String)
  i ++ ) {						      	str2 = new StringBuilder ( str2 ) . reverse ( ) . toString    for ( int i = 0 ;						     location: class SUM_TWO_LARGE_NUMBERS SUM_TWO_L
    int sum = ( ( str1 [ i ] - '0' ) + ( str2 [ i ] - '0' ) + 	int carry = 0 ;						      i < n1 ;							  ARGE_NUMBERS.java:70: error: cannot find symbol
    str . push_back ( sum % 10 + '0' ) ;		      	for ( int i = 0 ;					      i ++ ) {							  reverse ( str ) ;   ^	  symbol:   method reverse(S
    carry = sum / 10 ;					      	i < n1 ;						    	int sum = ( ( str1 . charAt ( i ) - '0' ) + ( str2 . char tringBuffer)	 location: class SUM_TWO_LARGE_NUMBE
  }							      	i ++ ) {						    	str . append ( sum % 10 + '0' ) ;			  RS 4 errors
  for ( int i = n1 ;					      	  int sum = ( ( int ) ( str1 . charAt ( i ) - '0' ) + ( int 	carry = sum / 10 ;					  
  i < n2 ;						      	  str += ( char ) ( sum % 10 + '0' ) ;			      }								  
  i ++ ) {						      	  carry = sum / 10 ;					      for ( int i = n1 ;					  
    int sum = ( ( str2 [ i ] - '0' ) + carry ) ;	      	}							      i < n2 ;							  
    str . push_back ( sum % 10 + '0' ) ;		      	for ( int i = n1 ;					      i ++ ) {							  
    carry = sum / 10 ;					      	i < n2 ;						    	int sum = ( ( str2 . charAt ( i ) - '0' ) + carry ) ;	  
  }							      	i ++ ) {						    	str . append ( sum % 10 + '0' ) ;			  
  if ( carry ) str . push_back ( carry + '0' ) ;	      	  int sum = ( ( int ) ( str2 . charAt ( i ) - '0' ) + carry 	carry = sum / 10 ;					  
  reverse ( str . begin ( ) , str . end ( ) ) ;		      	  str += ( char ) ( sum % 10 + '0' ) ;			      }								  
  return str ;						      	  carry = sum / 10 ;					      if ( carry > 0 ) {					  
}							      	}							    	str . append ( carry + '0' ) ;				  
							      	if ( carry > 0 ) str += ( char ) ( carry + '0' ) ;	      }								  
							      	str = new StringBuilder ( str ) . reverse ( ) . toString (    reverse ( str ) ;						  
							      	return str ;						      return str . toString ( ) ;				  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1		      FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1			    FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1			  FIND_RECTANGLE_BINARY_MATRIX_CORNERS_1_1
--							      --							    --								  --
bool isRectangle ( const vector < vector < int >> & matrix )  static boolean isRectangle ( int matrix [ ] [ ] ) {	    public static boolean isRectangle ( int [ ] [ ] matrix ) {	  script_not_found : None
  int rows = matrix . size ( ) ;			      	int rows = matrix . length ;				      int rows = matrix . length ;				  
  if ( rows == 0 ) return false ;			      	if ( rows == 0 ) return false ;				      if ( rows == 0 ) {					  
  int columns = matrix [ 0 ] . size ( ) ;		      	int columns = matrix [ 0 ] . length ;			    	return false ;						  
  unordered_map < int , unordered_set < int >> table ;	      	HashMap < Integer , HashSet < Integer >> table = new HashMa   }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      int columns = matrix [ 0 ] . length ;			  
  i < rows ;						      	i < rows ;						      HashMap < Integer , HashSet < Integer >> table = new HashMa 
  ++ i ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < rows ;						  
    j < columns - 1 ;					      	  j < columns - 1 ;					      ++ i ) {							  
    ++ j ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      for ( int k = j + 1 ;				      	    for ( int k = j + 1 ;				    	j < columns - 1 ;					  
      k < columns ;					      	    k < columns ;					    	++ j ) {						  
      ++ k ) {						      	    k ++ ) {						    	  for ( int k = j + 1 ;					  
	if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 	      if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 	  k < columns ;						  
	  if ( table . find ( j ) != table . end ( ) && table 		if ( table . containsKey ( j ) && table . get ( j ) 	  ++ k ) {						  
	  table [ j ] . insert ( k ) ;			      		  return true ;					    	    if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 
	}						      		}						    	      if ( table . containsKey ( j ) && table . get ( j ) 
      }							      		if ( table . containsKey ( k ) && table . get ( k ) 		return true ;					  
    }							      		  return true ;					    	      }							  
  }							      		}						    	      table . get ( j ) . add ( k ) ;			  
  return false ;					      		if ( ! table . containsKey ( j ) ) {		    	    }							  
}							      		  HashSet < Integer > x = new HashSet < > ( ) ;	    	  }							  
							      		  x . add ( k ) ;				    	}							  
							      		  table . put ( j , x ) ;			      }								  
							      		}						      return false ;						  
							      		else {						    }								  
							      		  table . get ( j ) . add ( k ) ;		    								  
							      		}						    								  
							      		if ( ! table . containsKey ( k ) ) {		    								  
							      		  HashSet < Integer > x = new HashSet < > ( ) ;	    								  
							      		  x . add ( j ) ;				    								  
							      		  table . put ( k , x ) ;			    								  
							      		}						    								  
							      		else {						    								  
							      		  table . get ( k ) . add ( j ) ;		    								  
							      		}						    								  
							      	      }							    								  
							      	    }							    								  
							      	  }							    								  
							      	}							    								  
							      	return false ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION		      WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION		    WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION			  WORD_WRAP_PROBLEM_SPACE_OPTIMIZED_SOLUTION
--							      --							    --								  --
void solveWordWrap ( int arr [ ] , int n , int k ) {	      static void solveWordWrap ( int arr [ ] , int n , int k ) {   public static void solveWordWrap ( int arr [ ] , int n , int  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  int currlen ;						      	int currlen ;						      int currlen ;						  
  int cost ;						      	int cost ;						      int cost ;						  
  int dp [ n ] ;					      	int dp [ ] = new int [ n ] ;				      int dp [ ] = new int [ n ] ;				  
  int ans [ n ] ;					      	int ans [ ] = new int [ n ] ;				      int ans [ ] = new int [ n ] ;				  
  dp [ n - 1 ] = 0 ;					      	dp [ n - 1 ] = 0 ;					      dp [ n - 1 ] = 0 ;					  
  ans [ n - 1 ] = n - 1 ;				      	ans [ n - 1 ] = n - 1 ;					      ans [ n - 1 ] = n - 1 ;					  
  for ( i = n - 2 ;					      	for ( i = n - 2 ;					      for ( i = n - 2 ;						  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    currlen = - 1 ;					      	  currlen = - 1 ;					    	currlen = - 1 ;						  
    dp [ i ] = INT_MAX ;				      	  dp [ i ] = Integer . MAX_VALUE ;			    	dp [ i ] = Integer . MAX_VALUE ;			  
    for ( j = i ;					      	  for ( j = i ;						    	for ( j = i ;						  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      currlen += ( arr [ j ] + 1 ) ;			      	    currlen += ( arr [ j ] + 1 ) ;			    	  currlen += ( arr [ j ] + 1 ) ;			  
      if ( currlen > k ) break ;			      	    if ( currlen > k ) break ;				    	  if ( currlen > k ) break ;				  
      if ( j == n - 1 ) cost = 0 ;			      	    if ( j == n - 1 ) cost = 0 ;			    	  if ( j == n - 1 ) {					  
      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j  	    else cost = ( k - currlen ) * ( k - currlen ) + dp [ j  	    cost = 0 ;						  
      if ( cost < dp [ i ] ) {				      	    if ( cost < dp [ i ] ) {				    	  }							  
	dp [ i ] = cost ;				      	      dp [ i ] = cost ;					    	  else {						  
	ans [ i ] = j ;					      	      ans [ i ] = j ;					    	    cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 
      }							      	    }							    	  }							  
    }							      	  }							    	  if ( cost < dp [ i ] ) {				  
  }							      	}							    	    dp [ i ] = cost ;					  
  i = 0 ;						      	i = 0 ;							    	    ans [ i ] = j ;					  
  while ( i < n ) {					      	while ( i < n ) {					    	  }							  
    cout << i + 1 << " " << ans [ i ] + 1 << " " ;	      	  System . out . print ( ( i + 1 ) + " " + ( ans [ i ] + 1  	}							  
    i = ans [ i ] + 1 ;					      	  i = ans [ i ] + 1 ;					      }								  
  }							      	}							      i = 0 ;							  
}							      }								      while ( i < n ) {						  
							      								    	System . out . println ( i + 1 + " " + ans [ i ] + 1 + "  
							      								    	i = ans [ i ] + 1 ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX		      FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX			    FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX			  FIND_MINIMUM_SHIFT_LONGEST_COMMON_PREFIX
--							      --							    --								  --
void KMP ( int m , int n , string str2 , string str1 ) {      static void KMP ( int m , int n , String str2 , String str1 ) public static void KMP ( int m , int n , String str2 , String script_not_found : None
  int pos = 0 , len = 0 ;				      	int pos = 0 , len = 0 ;					      int pos = 0 , len = 0 ;					  
  int p [ m + 1 ] ;					      	int [ ] p = new int [ m + 1 ] ;				      int p [ ] = new int [ m + 1 ] ;				  
  int k = 0 ;						      	int k = 0 ;						      int k = 0 ;						  
  p [ 1 ] = 0 ;						      	char [ ] ch1 = str1 . toCharArray ( ) ;			      p [ 1 ] = 0 ;						  
  for ( int i = 2 ;					      	char [ ] ch2 = str2 . toCharArray ( ) ;			      for ( int i = 2 ;						  
  i <= n ;						      	for ( int i = 2 ;					      i <= n ;							  
  i ++ ) {						      	i <= n ;						      i ++ ) {							  
    while ( k > 0 && str1 [ k ] != str1 [ i - 1 ] ) k = p [ k 	i ++ ) {						    	while ( k > 0 && str1 . charAt ( k ) != str1 . charAt ( i 
    if ( str1 [ k ] == str1 [ i - 1 ] ) ++ k ;		      	  while ( k > 0 && ch1 [ k ] != ch1 [ i - 1 ] ) k = p [ k ] 	  k = p [ k ] ;						  
    p [ i ] = k ;					      	  if ( ch1 [ k ] == ch1 [ i - 1 ] ) ++ k ;		    	}							  
  }							      	  p [ i ] = k ;						    	if ( str1 . charAt ( k ) == str1 . charAt ( i - 1 ) ) {	  
  for ( int j = 0 , i = 0 ;				      	}							    	  k ++ ;						  
  i < m ;						      	for ( int j = 0 , i = 0 ;				    	}							  
  i ++ ) {						      	i < m ;							    	p [ i ] = k ;						  
    while ( j > 0 && str1 [ j ] != str2 [ i ] ) j = p [ j ] ; 	i ++ ) {						      }								  
    if ( str1 [ j ] == str2 [ i ] ) j ++ ;		      	  while ( j > 0 && j < n && ch1 [ j ] != ch2 [ i ] ) j = p    for ( int j = 0 , i = 0 ;					  
    if ( j > len ) {					      	  if ( j < n && ch1 [ j ] == ch2 [ i ] ) j ++ ;		      i < m ;							  
      len = j ;						      	  if ( j > len ) {					      i ++ ) {							  
      pos = i - j + 1 ;					      	    len = j ;						    	while ( j > 0 && str1 . charAt ( j ) != str2 . charAt ( i 
    }							      	    pos = i - j + 1 ;					    	  j = p [ j ] ;						  
  }							      	  }							    	}							  
  cout << "Shift = " << pos << endl ;			      	}							    	if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) {	  
  cout << "Prefix = " << str1 . substr ( 0 , len ) ;	      	System . out . println ( "Shift = " + pos ) ;		    	  j ++ ;						  
}							      	System . out . println ( "Prefix = " + str1 . substring ( 0 	}							  
							      }								    	if ( j > len ) {					  
							      								    	  len = j ;						  
							      								    	  pos = i - j + 1 ;					  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "Shift = " + pos ) ;		  
							      								      System . out . println ( "Prefix = " + str1 . substring ( 0 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY		      MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY			    MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY			  MINIMUM_NUMBER_SWAPS_REQUIRED_SORT_ARRAY
--							      --							    --								  --
int minSwaps ( int arr [ ] , int n ) {			      public static int minSwaps ( int [ ] arr ) {		    public static int minSwaps ( int arr [ ] , int n ) {	  script_not_found : None
  pair < int , int > arrPos [ n ] ;			      	int n = arr . length ;					      Pair [ ] arrPos = new Pair [ n ] ;			  
  for ( int i = 0 ;					      	ArrayList < Pair < Integer , Integer >> arrpos = new ArrayL   for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) {						      	i < n ;							      i ++ ) {							  
    arrPos [ i ] . first = arr [ i ] ;			      	i ++ ) arrpos . add ( new Pair < Integer , Integer > ( arr  	arrPos [ i ] = new Pair ( arr [ i ] , i ) ;		  
    arrPos [ i ] . second = i ;				      	arrpos . sort ( new Comparator < Pair < Integer , Integer >   }								  
  }							      	  @ Override public int compare ( Pair < Integer , Integer    Arrays . sort ( arrPos ) ;				  
  sort ( arrPos , arrPos + n ) ;			      	    if ( o1 . getKey ( ) > o2 . getKey ( ) ) return - 1 ;     boolean [ ] vis = new boolean [ n ] ;			  
  vector < bool > vis ( n , false ) ;			      	    else if ( o1 . getKey ( ) . equals ( o2 . getKey ( ) )    int ans = 0 ;						  
  int ans = 0 ;						      	    else return 1 ;					      for ( int i = 0 ;						  
  for ( int i = 0 ;					      	  }							      i < n ;							  
  i < n ;						      	}							      i ++ ) {							  
  i ++ ) {						      	) ;							    	if ( vis [ i ] || arrPos [ i ] . second == i ) continue ; 
    if ( vis [ i ] || arrPos [ i ] . second == i ) continue ; 	Boolean [ ] vis = new Boolean [ n ] ;			    	int cycleSize = 0 ;					  
    int cycle_size = 0 ;				      	Arrays . fill ( vis , false ) ;				    	int j = i ;						  
    int j = i ;						      	int ans = 0 ;						    	while ( ! vis [ j ] ) {					  
    while ( ! vis [ j ] ) {				      	for ( int i = 0 ;					    	  vis [ j ] = 1 ;					  
      vis [ j ] = 1 ;					      	i < n ;							    	  j = arrPos [ j ] . second ;				  
      j = arrPos [ j ] . second ;			      	i ++ ) {						    	  cycleSize ++ ;					  
      cycle_size ++ ;					      	  if ( vis [ i ] || arrpos . get ( i ) . getValue ( ) == i  	}							  
    }							      	  int cycle_size = 0 ;					    	if ( cycleSize > 0 ) ans += ( cycleSize - 1 ) ;		  
    if ( cycle_size > 0 ) {				      	  int j = i ;						      }								  
      ans += ( cycle_size - 1 ) ;			      	  while ( ! vis [ j ] ) {				      return ans ;						  
    }							      	    vis [ j ] = true ;					    }								  
  }							      	    j = arrpos . get ( j ) . getValue ( ) ;		    								  
  return ans ;						      	    cycle_size ++ ;					    								  
}							      	  }							    								  
							      	  if ( cycle_size > 0 ) {				    								  
							      	    ans += ( cycle_size - 1 ) ;				    								  
							      	  }							    								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE SMALLEST_SUBARRAY_WITH_ALL_OCCURRENCES_OF_A_MOST_FREQUENT_ELE
--							      --							    --								  --
void smallestSubsegment ( int a [ ] , int n ) {		      static void smallestSubsegment ( int a [ ] , int n ) {	    public static void smallestSubsegment ( int a [ ] , int n ) { script_not_found : None
  unordered_map < int , int > left ;			      	HashMap < Integer , Integer > left = new HashMap < Integer    HashMap < Integer , Integer > left = new HashMap < > ( ) ;  
  unordered_map < int , int > count ;			      	HashMap < Integer , Integer > count = new HashMap < Integer   HashMap < Integer , Integer > count = new HashMap < > ( ) ; 
  int mx = 0 ;						      	int mx = 0 ;						      int mx = 0 ;						  
  int mn , strindex ;					      	int mn = - 1 , strindex = - 1 ;				      int mn , strindex ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int x = a [ i ] ;					      	  int x = a [ i ] ;					    	int x = a [ i ] ;					  
    if ( count [ x ] == 0 ) {				      	  if ( count . get ( x ) == null ) {			    	if ( count . get ( x ) == 0 ) {				  
      left [ x ] = i ;					      	    left . put ( x , i ) ;				    	  left . put ( x , i ) ;				  
      count [ x ] = 1 ;					      	    count . put ( x , 1 ) ;				    	  count . put ( x , 1 ) ;				  
    }							      	  }							    	}							  
    else count [ x ] ++ ;				      	  else count . put ( x , count . get ( x ) + 1 ) ;	    	else {							  
    if ( count [ x ] > mx ) {				      	  if ( count . get ( x ) > mx ) {			    	  count . get ( x ) ++ ;				  
      mx = count [ x ] ;				      	    mx = count . get ( x ) ;				    	}							  
      mn = i - left [ x ] + 1 ;				      	    mn = i - left . get ( x ) + 1 ;			    	if ( count . get ( x ) > mx ) {				  
      strindex = left [ x ] ;				      	    strindex = left . get ( x ) ;			    	  mx = count . get ( x ) ;				  
    }							      	  }							    	  mn = i - left . get ( x ) + 1 ;			  
    else if ( count [ x ] == mx && i - left [ x ] + 1 < mn )  	  else if ( ( count . get ( x ) == mx ) && ( i - left . get 	  strindex = left . get ( x ) ;				  
      mn = i - left [ x ] + 1 ;				      	    mn = i - left . get ( x ) + 1 ;			    	}							  
      strindex = left [ x ] ;				      	    strindex = left . get ( x ) ;			    	else if ( count . get ( x ) == mx && i - left . get ( x ) 
    }							      	  }							    	  mn = i - left . get ( x ) + 1 ;			  
  }							      	}							    	  strindex = left . get ( x ) ;				  
  for ( int i = strindex ;				      	for ( int i = strindex ;				    	}							  
  i < strindex + mn ;					      	i < strindex + mn ;					      }								  
  i ++ ) cout << a [ i ] << " " ;			      	i ++ ) System . out . print ( a [ i ] + " " ) ;		      for ( int i = strindex ;					  
}							      }								      i < strindex + mn ;					  
							      								      i ++ ) {							  
							      								    	System . out . print ( a [ i ] + " " ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN FIND_K_SUCH_THAT_ALL_ELEMENTS_IN_KTH_ROW_ARE_0_AND_KTH_COLUMN
--							      --							    --								  --
int find ( bool arr [ n ] [ n ] ) {			      static int find ( boolean arr [ ] [ ] ) {			    public static int find ( boolean arr [ ] [ ] , int n ) {	  script_not_found : None
  int i = 0 , j = n - 1 ;				      	int i = 0 , j = n - 1 ;					      int i = 0 , j = n - 1 ;					  
  int res = - 1 ;					      	int res = - 1 ;						      int res = - 1 ;						  
  while ( i < n && j >= 0 ) {				      	while ( i < n && j >= 0 ) {				      while ( i < n && j >= 0 ) {				  
    if ( arr [ i ] [ j ] == 0 ) {			      	  if ( arr [ i ] [ j ] == false ) {			    	if ( arr [ i ] [ j ] == 0 ) {				  
      while ( j >= 0 && ( arr [ i ] [ j ] == 0 || i == j ) )  	    while ( j >= 0 && ( arr [ i ] [ j ] == false || i == j  	  while ( j >= 0 && ( arr [ i ] [ j ] == 0 || i == j ) )  
      if ( j == - 1 ) {					      	      j -- ;						    	    j -- ;						  
	res = i ;					      	    }							    	  }							  
	break ;						      	    if ( j == - 1 ) {					    	  if ( j == - 1 ) {					  
      }							      	      res = i ;						    	    res = i ;						  
      else i ++ ;					      	      break ;						    	    break ;						  
    }							      	    }							    	  }							  
    else {						      	    else {						    	  else {						  
      while ( i < n && ( arr [ i ] [ j ] == 1 || i == j ) ) i 	      i ++ ;						    	    i ++ ;						  
      if ( i == n ) {					      	    }							    	  }							  
	res = j ;					      	  }							    	}							  
	break ;						      	  else {						    	else {							  
      }							      	    while ( i < n && ( arr [ i ] [ j ] == true || i == j )  	  while ( i < n && ( arr [ i ] [ j ] == 1 || i == j ) ) { 
      else j -- ;					      	      i ++ ;						    	    i ++ ;						  
    }							      	    }							    	  }							  
  }							      	    if ( i == n ) {					    	  if ( i == n ) {					  
  if ( res == - 1 ) return res ;			      	      res = j ;						    	    res = j ;						  
  for ( int i = 0 ;					      	      break ;						    	    break ;						  
  i < n ;						      	    }							    	  }							  
  i ++ ) if ( res != i && arr [ i ] [ res ] != 1 ) return - 1 	    else {						    	  else {						  
  for ( int j = 0 ;					      	      j -- ;						    	    j -- ;						  
  j < n ;						      	    }							    	  }							  
  j ++ ) if ( res != j && arr [ res ] [ j ] != 0 ) return - 1 	  }							    	}							  
  return res ;						      	}							      }								  
}							      	if ( res == - 1 ) {					      if ( res == - 1 ) return res ;				  
							      	  return res ;						      for ( int i = 0 ;						  
							      	}							      i < n ;							  
							      	for ( int k = 0 ;					      i ++ ) if ( res != i && arr [ i ] [ res ] != 1 ) return - 1 
							      	k < n ;							      for ( int j = 0 ;						  
							      	k ++ ) {						      j < n ;							  
							      	  if ( res != k && arr [ k ] [ res ] != true ) {	      j ++ ) if ( res != j && arr [ res ] [ j ] != 0 ) return - 1 
							      	    return - 1 ;					      return res ;						  
							      	  }							    }								  
							      	}							    								  
							      	for ( int l = 0 ;					    								  
							      	l < n ;							    								  
							      	l ++ ) {						    								  
							      	  if ( res != l && arr [ res ] [ l ] != false ) {	    								  
							      	    return - 1 ;					    								  
							      	  }							    								  
							      	}							    								  
							      	return res ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM			      MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM			    MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM			  MAXIMUM_SUM_ALTERNATING_SUBSEQUENCE_SUM
--							      --							    --								  --
int maxAlternateSum ( int arr [ ] , int n ) {		      static int maxAlternateSum ( int arr [ ] , int n ) {	    public static int maxAlternateSum ( int arr [ ] , int n ) {	  script_not_found : None
  if ( n == 1 ) return arr [ 0 ] ;			      	if ( n == 1 ) return arr [ 0 ] ;			      if ( n == 1 ) return arr [ 0 ] ;				  
  int dec [ n ] ;					      	int dec [ ] = new int [ n ] ;				      int dec [ ] = new int [ n ] ;				  
  memset ( dec , 0 , sizeof ( dec ) ) ;			      	int inc [ ] = new int [ n ] ;				      Arrays . fill ( dec , 0 ) ;				  
  int inc [ n ] ;					      	dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;			      int inc [ ] = new int [ n ] ;				  
  memset ( inc , 0 , sizeof ( inc ) ) ;			      	int flag = 0 ;						      Arrays . fill ( inc , 0 ) ;				  
  dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;			      	for ( int i = 1 ;					      dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;			  
  int flag = 0 ;					      	i < n ;							      int flag = 0 ;						  
  for ( int i = 1 ;					      	i ++ ) {						      for ( int i = 1 ;						  
  i < n ;						      	  for ( int j = 0 ;					      i < n ;							  
  i ++ ) {						      	  j < i ;						      i ++ ) {							  
    for ( int j = 0 ;					      	  j ++ ) {						    	for ( int j = 0 ;					  
    j < i ;						      	    if ( arr [ j ] > arr [ i ] ) {			    	j < i ;							  
    j ++ ) {						      	      dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr  	j ++ ) {						  
      if ( arr [ j ] > arr [ i ] ) {			      	      flag = 1 ;					    	  if ( arr [ j ] > arr [ i ] ) {			  
	dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] ) 	    }							    	    dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr  
	flag = 1 ;					      	    else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i  	    flag = 1 ;						  
      }							      	  }							    	  }							  
      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i  	}							    	  else if ( arr [ j ] < arr [ i ] && flag == 1 ) {	  
    }							      	int result = Integer . MIN_VALUE ;			    	    inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr  
  }							      	for ( int i = 0 ;					    	  }							  
  int result = INT_MIN ;				      	i < n ;							    	}							  
  for ( int i = 0 ;					      	i ++ ) {						      }								  
  i < n ;						      	  if ( result < inc [ i ] ) result = inc [ i ] ;	      int result = Integer . MIN_VALUE ;			  
  i ++ ) {						      	  if ( result < dec [ i ] ) result = dec [ i ] ;	      for ( int i = 0 ;						  
    if ( result < inc [ i ] ) result = inc [ i ] ;	      	}							      i < n ;							  
    if ( result < dec [ i ] ) result = dec [ i ] ;	      	return result ;						      i ++ ) {							  
  }							      }								    	if ( result < inc [ i ] ) {				  
  return result ;					      								    	  result = inc [ i ] ;					  
}							      								    	}							  
							      								    	if ( result < dec [ i ] ) {				  
							      								    	  result = dec [ i ] ;					  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORTING_USING_TRIVIAL_HASH_FUNCTION_1			      SORTING_USING_TRIVIAL_HASH_FUNCTION_1			    SORTING_USING_TRIVIAL_HASH_FUNCTION_1			  SORTING_USING_TRIVIAL_HASH_FUNCTION_1
--							      --							    --								  --
void sortUsingHash ( int a [ ] , int n ) {		      static void sortUsingHash ( int a [ ] , int n ) {		    public static void sortUsingHash ( int a [ ] , int n ) {	  script_not_found : None
  int max = * std :: max_element ( a , a + n ) ;	      	int max = Arrays . stream ( a ) . max ( ) . getAsInt ( ) ;    int max = a . length ;					  
  int min = abs ( * std :: min_element ( a , a + n ) ) ;      	int min = Math . abs ( Arrays . stream ( a ) . min ( ) . ge   int min = Math . abs ( a [ n ] ) ;			  
  int hashpos [ max + 1 ] = {				      	int hashpos [ ] = new int [ max + 1 ] ;			      int hashpos [ ] = new int [ max + 1 ] ;			  
    0 }							      	int hashneg [ ] = new int [ min + 1 ] ;			      int hashneg [ ] = new int [ min + 1 ] ;			  
    ;							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    int hashneg [ min + 1 ] = {				      	i < n ;							      i < n ;							  
      0 }						      	i ++ ) {						      i ++ ) {							  
      ;							      	  if ( a [ i ] >= 0 ) hashpos [ a [ i ] ] += 1 ;	    	if ( a [ i ] >= 0 ) {					  
      for ( int i = 0 ;					      	  else hashneg [ Math . abs ( a [ i ] ) ] += 1 ;	    	  hashpos [ a [ i ] ] += 1 ;				  
      i < n ;						      	}							    	}							  
      i ++ ) {						      	for ( int i = min ;					    	else {							  
	if ( a [ i ] >= 0 ) hashpos [ a [ i ] ] += 1 ;	      	i > 0 ;							    	  hashneg [ Math . abs ( a [ i ] ) ] += 1 ;		  
	else hashneg [ abs ( a [ i ] ) ] += 1 ;		      	i -- ) {						    	}							  
      }							      	  if ( hashneg [ i ] > 0 ) {				      }								  
      for ( int i = min ;				      	    for ( int j = 0 ;					      for ( int i = min ;					  
      i > 0 ;						      	    j < hashneg [ i ] ;					      i > 0 ;							  
      i -- ) {						      	    j ++ ) {						      i -- ) {							  
	if ( hashneg [ i ] ) {				      	      System . out . print ( ( - 1 ) * i + " " ) ;	    	if ( hashneg [ i ] > 0 ) {				  
	  for ( int j = 0 ;				      	    }							    	  for ( int j = 0 ;					  
	  j < hashneg [ i ] ;				      	  }							    	  j < hashneg [ i ] ;					  
	  j ++ ) {					      	}							    	  j ++ ) {						  
	    cout << ( - 1 ) * i << " " ;		      	for ( int i = 0 ;					    	    System . out . print ( ( - 1 ) * i + " " ) ;	  
	  }						      	i <= max ;						    	  }							  
	}						      	i ++ ) {						    	}							  
      }							      	  if ( hashpos [ i ] > 0 ) {				      }								  
      for ( int i = 0 ;					      	    for ( int j = 0 ;					      for ( int i = 0 ;						  
      i <= max ;					      	    j < hashpos [ i ] ;					      i <= max ;						  
      i ++ ) {						      	    j ++ ) {						      i ++ ) {							  
	if ( hashpos [ i ] ) {				      	      System . out . print ( i + " " ) ;		    	if ( hashpos [ i ] > 0 ) {				  
	  for ( int j = 0 ;				      	    }							    	  for ( int j = 0 ;					  
	  j < hashpos [ i ] ;				      	  }							    	  j < hashpos [ i ] ;					  
	  j ++ ) {					      	}							    	  j ++ ) {						  
	    cout << i << " " ;				      }								    	    System . out . print ( i + " " ) ;			  
	  }						      								    	  }							  
	}						      								    	}							  
      }							      								      }								  
    }							      								    }								  
    -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B BALANCED_EXPRESSIONS_SUCH_THAT_GIVEN_POSITIONS_HAVE_OPENING_B
--							      --							    --								  --
long long arrangeBraces ( int n , int pos [ ] , int k ) {     static long arrangeBraces ( int n , int pos [ ] , int k ) {   public static long arrangeBraces ( int n , int pos [ ] , int  script_not_found : None
  bool h [ N ] ;					      	boolean h [ ] = new boolean [ N ] ;			      boolean h [ ] [ ] ;					  
  int dp [ N ] [ N ] ;					      	int dp [ ] [ ] = new int [ N ] [ N ] ;			      int dp [ ] [ ] ;						  
  memset ( h , 0 , sizeof h ) ;				      	for ( int i = 0 ;					      h = new boolean [ n ] [ k ] ;				  
  memset ( dp , 0 , sizeof dp ) ;			      	i < k ;							      dp = new int [ n ] [ k ] ;				  
  for ( int i = 0 ;					      	i ++ ) {						      for ( int i = 0 ;						  
  i < k ;						      	  h [ pos [ i ] ] = true ;				      i < k ;							  
  i ++ ) h [ pos [ i ] ] = 1 ;				      	}							      i ++ ) {							  
  dp [ 0 ] [ 0 ] = 1 ;					      	dp [ 0 ] [ 0 ] = 1 ;					    	h [ pos [ i ] ] = true ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      }								  
  i <= 2 * n ;						      	i <= 2 * n ;						      dp [ 0 ] [ 0 ] = 1 ;					  
  i ++ ) {						      	i ++ ) {						      for ( int i = 1 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i <= 2 * n ;						  
    j <= 2 * n ;					      	  j <= 2 * n ;						      i ++ ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      if ( h [ i ] ) {					      	    if ( h [ i ] ) {					    	j <= 2 * n ;						  
	if ( j != 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] 	      if ( j != 0 ) {					    	j ++ ) {						  
	else dp [ i ] [ j ] = 0 ;			      		dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;	    	  if ( h [ i ] ) {					  
      }							      	      }							    	    if ( j != 0 ) {					  
      else {						      	      else {						    	      dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
	if ( j != 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] 		dp [ i ] [ j ] = 0 ;				    	    }							  
	else dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;	      	      }							    	    else {						  
      }							      	    }							    	      dp [ i ] [ j ] = 0 ;				  
    }							      	    else if ( j != 0 ) {				    	    }							  
  }							      	      dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 1  	  }							  
  return dp [ 2 * n ] [ 0 ] ;				      	    }							    	  else {						  
}							      	    else {						    	    if ( j != 0 ) {					  
							      	      dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;		    	      dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i -  
							      	    }							    	    }							  
							      	  }							    	    else {						  
							      	}							    	      dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;		  
							      	return dp [ 2 * n ] [ 0 ] ;				    	    }							  
							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ 2 * n ] [ 0 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSION_IN_A_SORTED_ARRA
--							      --							    --								  --
int lenghtOfLongestAP ( int set [ ] , int n ) {		      static int lenghtOfLongestAP ( int set [ ] , int n ) {	    public static int lenghtOfLongestAP ( int set [ ] , int n ) { error : LENGTH_OF_THE_LONGEST_ARITHMATIC_PROGRESSI
  if ( n <= 2 ) return n ;				      	if ( n <= 2 ) return n ;				      if ( n <= 2 ) return n ;					  ON_IN_A_SORTED_ARRAY.java:64: error: ';' expected
  int L [ n ] [ n ] ;					      	int L [ ] [ ] = new int [ n ] [ n ] ;			      int L [ ] [ ] = new int [ n ] [ n ] ;			  	  L [ i ] [ j ] = 2 , i -- ;
  int llap = 2 ;					      	int llap = 2 ;						      int llap = 2 ;						  	    ^ 1 error
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) L [ i ] [ n - 1 ] = 2 ;			      	i ++ ) L [ i ] [ n - 1 ] = 2 ;				      i ++ ) {							  
  for ( int j = n - 2 ;					      	for ( int j = n - 2 ;					    	L [ i ] [ n - 1 ] = 2 ;					  
  j >= 1 ;						      	j >= 1 ;						      }								  
  j -- ) {						      	j -- ) {						      for ( int j = n - 2 ;					  
    int i = j - 1 , k = j + 1 ;				      	  int i = j - 1 , k = j + 1 ;				      j >= 1 ;							  
    while ( i >= 0 && k <= n - 1 ) {			      	  while ( i >= 0 && k <= n - 1 ) {			      j -- ) {							  
      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ;     	    if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ;	    	int i = j - 1 , k = j + 1 ;				  
      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {     	    else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {	    	while ( i >= 0 && k <= n - 1 ) {			  
	L [ i ] [ j ] = 2 , i -- ;			      	      L [ i ] [ j ] = 2 ;				    	  if ( set [ i ] + set [ k ] < 2 * set [ j ] ) {	  
      }							      	      i -- ;						    	    k ++ ;						  
      else {						      	    }							    	  }							  
	L [ i ] [ j ] = L [ j ] [ k ] + 1 ;		      	    else {						    	  else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {	  
	llap = max ( llap , L [ i ] [ j ] ) ;		      	      L [ i ] [ j ] = L [ j ] [ k ] + 1 ;		    	    L [ i ] [ j ] = 2 , i -- ;				  
	i -- ;						      	      llap = Math . max ( llap , L [ i ] [ j ] ) ;	    	  }							  
	k ++ ;						      	      i -- ;						    	  else {						  
      }							      	      k ++ ;						    	    L [ i ] [ j ] = L [ j ] [ k ] + 1 ;			  
    }							      	    }							    	    llap = Math . max ( llap , L [ i ] [ j ] ) ;	  
    while ( i >= 0 ) {					      	  }							    	    i -- ;						  
      L [ i ] [ j ] = 2 ;				      	  while ( i >= 0 ) {					    	    k ++ ;						  
      i -- ;						      	    L [ i ] [ j ] = 2 ;					    	  }							  
    }							      	    i -- ;						    	}							  
  }							      	  }							    	while ( i >= 0 ) {					  
  return llap ;						      	}							    	  L [ i ] [ j ] = 2 ;					  
}							      	return llap ;						    	  i -- ;						  
							      }								    	}							  
							      								      }								  
							      								      return llap ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_BITONIC_SUBARRAY				      MAXIMUM_SUM_BITONIC_SUBARRAY				    MAXIMUM_SUM_BITONIC_SUBARRAY				  MAXIMUM_SUM_BITONIC_SUBARRAY
--							      --							    --								  --
int maxSumBitonicSubArr ( int arr [ ] , int n ) {	      static int maxSumBitonicSubArr ( int arr [ ] , int n ) {	    public static int maxSumBitonicSubArr ( int arr [ ] , int n ) success : None
  int msis [ n ] , msds [ n ] ;				      	int [ ] msis = new int [ n ] ;				      int msis [ ] = new int [ n ] , msds [ ] = new int [ n ] ;	  
  int max_sum = INT_MIN ;				      	int [ ] msds = new int [ n ] ;				      int maxSum = Integer . MIN_VALUE ;			  
  msis [ 0 ] = arr [ 0 ] ;				      	int max_sum = Integer . MIN_VALUE ;			      msis [ 0 ] = arr [ 0 ] ;					  
  for ( int i = 1 ;					      	msis [ 0 ] = arr [ 0 ] ;				      for ( int i = 1 ;						  
  i < n ;						      	for ( int i = 1 ;					      i < n ;							  
  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ 	i < n ;							      i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ 
  else msis [ i ] = arr [ i ] ;				      	i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [   else msis [ i ] = arr [ i ] ;				  
  msds [ n - 1 ] = arr [ n - 1 ] ;			      	else msis [ i ] = arr [ i ] ;				      msds [ n - 1 ] = arr [ n - 1 ] ;				  
  for ( int i = n - 2 ;					      	msds [ n - 1 ] = arr [ n - 1 ] ;			      for ( int i = n - 2 ;					  
  i >= 0 ;						      	for ( int i = n - 2 ;					      i >= 0 ;							  
  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ 	i >= 0 ;						      i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ 
  else msds [ i ] = arr [ i ] ;				      	i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [   else msds [ i ] = arr [ i ] ;				  
  for ( int i = 0 ;					      	else msds [ i ] = arr [ i ] ;				      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] 	i < n ;							      i ++ ) if ( maxSum < ( msis [ i ] + msds [ i ] - arr [ i ]  
  return max_sum ;					      	i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ]   return maxSum ;						  
}							      	return max_sum ;					    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1	      LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1		    LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1		  LARGEST_SUBARRAY_WITH_EQUAL_NUMBER_OF_0S_AND_1S_1
--							      --							    --								  --
int maxLen ( int arr [ ] , int n ) {			      int maxLen ( int arr [ ] , int n ) {			    public static int maxLen ( int arr [ ] , int n ) {		  success : None
  unordered_map < int , int > hM ;			      	HashMap < Integer , Integer > hM = new HashMap < Integer ,    HashMap < Integer , Integer > hM = new HashMap < > ( ) ;	  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  int max_len = 0 ;					      	int max_len = 0 ;					      int maxLen = 0 ;						  
  int ending_index = - 1 ;				      	int ending_index = - 1 ;				      int endingIndex = - 1 ;					  
  for ( int i = 0 ;					      	int start_index = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  
  i ++ ) arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;	      	i < n ;							      i ++ ) {							  
  for ( int i = 0 ;					      	i ++ ) {						    	arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;		  
  i < n ;						      	  arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;		      }								  
  i ++ ) {						      	}							      for ( int i = 0 ;						  
    sum += arr [ i ] ;					      	for ( int i = 0 ;					      i < n ;							  
    if ( sum == 0 ) {					      	i < n ;							      i ++ ) {							  
      max_len = i + 1 ;					      	i ++ ) {						    	sum += arr [ i ] ;					  
      ending_index = i ;				      	  sum += arr [ i ] ;					    	if ( sum == 0 ) {					  
    }							      	  if ( sum == 0 ) {					    	  maxLen = i + 1 ;					  
    if ( hM . find ( sum + n ) != hM . end ( ) ) {	      	    max_len = i + 1 ;					    	  endingIndex = i ;					  
      if ( max_len < i - hM [ sum + n ] ) {		      	    ending_index = i ;					    	}							  
	max_len = i - hM [ sum + n ] ;			      	  }							    	if ( hM . containsKey ( sum + n ) ) {			  
	ending_index = i ;				      	  if ( hM . containsKey ( sum + n ) ) {			    	  if ( maxLen < i - hM . get ( sum + n ) ) {		  
      }							      	    if ( max_len < i - hM . get ( sum + n ) ) {		    	    maxLen = i - hM . get ( sum + n ) ;			  
    }							      	      max_len = i - hM . get ( sum + n ) ;		    	    endingIndex = i ;					  
    else hM [ sum + n ] = i ;				      	      ending_index = i ;				    	  }							  
  }							      	    }							    	}							  
  for ( int i = 0 ;					      	  }							    	else {							  
  i < n ;						      	  else hM . put ( sum + n , i ) ;			    	  hM . put ( sum + n , i ) ;				  
  i ++ ) arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;	      	}							    	}							  
  printf ( "%d to %d\n" , ending_index - max_len + 1 , ending 	for ( int i = 0 ;					      }								  
  return max_len ;					      	i < n ;							      for ( int i = 0 ;						  
}							      	i ++ ) {						      i < n ;							  
							      	  arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;		      i ++ ) {							  
							      	}							    	arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;		  
							      	int end = ending_index - max_len + 1 ;			      }								  
							      	System . out . println ( end + " to " + ending_index ) ;      System . out . println ( endingIndex - maxLen + 1 + " to "  
							      	return max_len ;					      return maxLen ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAGIC_SQUARE						      MAGIC_SQUARE						    MAGIC_SQUARE						  MAGIC_SQUARE
--							      --							    --								  --
void generateSquare ( int n ) {				      static void generateSquare ( int n ) {			    public static void generateSquare ( int n ) {		  script_not_found : None
  int magicSquare [ n ] [ n ] ;				      	int [ ] [ ] magicSquare = new int [ n ] [ n ] ;		      int [ ] [ ] magicSquare = new int [ n ] [ n ] ;		  
  memset ( magicSquare , 0 , sizeof ( magicSquare ) ) ;	      	int i = n / 2 ;						      Arrays . fill ( magicSquare , - 1 ) ;			  
  int i = n / 2 ;					      	int j = n - 1 ;						      int i = n / 2 ;						  
  int j = n - 1 ;					      	for ( int num = 1 ;					      int j = n - 1 ;						  
  for ( int num = 1 ;					      	num <= n * n ;						      for ( int num = 1 ;					  
  num <= n * n ;					      	) {							      num <= n * n ;						  
  ) {							      	  if ( i == - 1 && j == n ) {				      ) {							  
    if ( i == - 1 && j == n ) {				      	    j = n - 2 ;						    	if ( i == - 1 && j == n ) {				  
      j = n - 2 ;					      	    i = 0 ;						    	  j = n - 2 ;						  
      i = 0 ;						      	  }							    	  i = 0 ;						  
    }							      	  else {						    	}							  
    else {						      	    if ( j == n ) j = 0 ;				    	else {							  
      if ( j == n ) j = 0 ;				      	    if ( i < 0 ) i = n - 1 ;				    	  if ( j == n ) {					  
      if ( i < 0 ) i = n - 1 ;				      	  }							    	    j = 0 ;						  
    }							      	  if ( magicSquare [ i ] [ j ] != 0 ) {			    	  }							  
    if ( magicSquare [ i ] [ j ] ) {			      	    j -= 2 ;						    	  if ( i < 0 ) {					  
      j -= 2 ;						      	    i ++ ;						    	    i = n - 1 ;						  
      i ++ ;						      	    continue ;						    	  }							  
      continue ;					      	  }							    	}							  
    }							      	  else magicSquare [ i ] [ j ] = num ++ ;		    	if ( magicSquare [ i ] [ j ] != 0 ) {			  
    else magicSquare [ i ] [ j ] = num ++ ;		      	  j ++ ;						    	  j -= 2 ;						  
    j ++ ;						      	  i -- ;						    	  i ++ ;						  
    i -- ;						      	}							    	  continue ;						  
  }							      	System . out . println ( "The Magic Square for " + n + ":"  	}							  
  cout << "The Magic Square for n=" << n << ":\nSum of " "eac 	System . out . println ( "Sum of each row or column " + n * 	else {							  
  for ( i = 0 ;						      	for ( i = 0 ;						    	  magicSquare [ i ] [ j ] = num ++ ;			  
  i < n ;						      	i < n ;							    	}							  
  i ++ ) {						      	i ++ ) {						    	j ++ ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	i -- ;							  
    j < n ;						      	  j < n ;						      }								  
    j ++ ) cout << magicSquare [ i ] [ j ] << " " ;	      	  j ++ ) System . out . print ( magicSquare [ i ] [ j ] + "   System . out . println ( "The Magic Square for n=" + n + ": 
    cout << endl ;					      	  System . out . println ( ) ;				      for ( i = 0 ;						  
  }							      	}							      i < n ;							  
}							      }								      i ++ ) {							  
							      								    	for ( j = 0 ;						  
							      								    	j < n ;							  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( magicSquare [ i ] [ j ] + " " )  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_ MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_ MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_ MAXIMUM_SUM_INCREASING_SUBSEQUENCE_FROM_A_PREFIX_AND_A_GIVEN_
--							      --							    --								  --
ll pre_compute ( ll a [ ] , ll n , ll index , ll k ) {	      static int pre_compute ( int a [ ] , int n , int index , int  public static int preCompute ( int a [ ] , int n , int index  script_not_found : None
  ll dp [ n ] [ n ] = {					      	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int dp [ ] [ ] = new int [ n ] [ n ] ;			  
    0 }							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ;							      	i < n ;							      i < n ;							  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) {							  
    i < n ;						      	  if ( a [ i ] > a [ 0 ] ) dp [ 0 ] [ i ] = a [ i ] + a [ 0 	if ( a [ i ] > a [ 0 ] ) {				  
    i ++ ) {						      	  else dp [ 0 ] [ i ] = a [ i ] ;			    	  dp [ 0 ] [ i ] = a [ i ] + a [ 0 ] ;			  
      if ( a [ i ] > a [ 0 ] ) dp [ 0 ] [ i ] = a [ i ] + a [ 	}							    	}							  
      else dp [ 0 ] [ i ] = a [ i ] ;			      	for ( int i = 1 ;					    	else {							  
    }							      	i < n ;							    	  dp [ 0 ] [ i ] = a [ i ] ;				  
    for ( int i = 1 ;					      	i ++ ) {						    	}							  
    i < n ;						      	  for ( int j = 0 ;					      }								  
    i ++ ) {						      	  j < n ;						      for ( int i = 1 ;						  
      for ( int j = 0 ;					      	  j ++ ) {						      i < n ;							  
      j < n ;						      	    if ( a [ j ] > a [ i ] && j > i ) {			      i ++ ) {							  
      j ++ ) {						      	      if ( dp [ i - 1 ] [ i ] + a [ j ] > dp [ i - 1 ] [ j  	for ( int j = 0 ;					  
	if ( a [ j ] > a [ i ] && j > i ) {		      	      else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;	    	j < n ;							  
	  if ( dp [ i - 1 ] [ i ] + a [ j ] > dp [ i - 1 ] [  	    }							    	j ++ ) {						  
	  else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;	      	    else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		    	  if ( a [ j ] > a [ i ] && j > i ) {			  
	}						      	  }							    	    if ( dp [ i - 1 ] [ i ] + a [ j ] > dp [ i - 1 ] [ j  
	else dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;	      	}							    	      dp [ i ] [ j ] = dp [ i - 1 ] [ i ] + a [ j ] ;	  
      }							      	return dp [ index ] [ k ] ;				    	    }							  
    }							      }								    	    else {						  
    return dp [ index ] [ k ] ;				      								    	      dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		  
  }							      								    	    }							  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ index ] [ k ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING		      SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING		    SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING			  SMALLEST_WINDOW_CONTAINS_CHARACTERS_STRING
--							      --							    --								  --
string findSubString ( string str ) {			      static String findSubString ( String str ) {		    public static String findSubString ( String str ) {		  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int dist_count = 0 ;					      	int dist_count = 0 ;					      int distCount = 0 ;					  
  bool visited [ MAX_CHARS ] = {			      	boolean [ ] visited = new boolean [ MAX_CHARS ] ;	      boolean [ ] visited = new boolean [ n ] ;			  
    false }						      	Arrays . fill ( visited , false ) ;			      for ( int i = 0 ;						  
    ;							      	for ( int i = 0 ;					      i < n ;							  
    for ( int i = 0 ;					      	i < n ;							      i ++ ) {							  
    i < n ;						      	i ++ ) {						    	if ( visited [ str . charAt ( i ) ] == false ) {	  
    i ++ ) {						      	  if ( visited [ str . charAt ( i ) ] == false ) {	    	  visited [ str . charAt ( i ) ] = true ;		  
      if ( visited [ str [ i ] ] == false ) {		      	    visited [ str . charAt ( i ) ] = true ;		    	  distCount ++ ;					  
	visited [ str [ i ] ] = true ;			      	    dist_count ++ ;					    	}							  
	dist_count ++ ;					      	  }							      }								  
      }							      	}							      int start = 0 , startIndex = - 1 , minLen = Integer . MAX_V 
    }							      	int start = 0 , start_index = - 1 ;			      int count = 0 ;						  
    int start = 0 , start_index = - 1 , min_len = INT_MAX ;   	int min_len = Integer . MAX_VALUE ;			      int currCount [ ] = new int [ n ] ;			  
    int count = 0 ;					      	int count = 0 ;						      for ( int j = 0 ;						  
    int curr_count [ MAX_CHARS ] = {			      	int [ ] curr_count = new int [ MAX_CHARS ] ;		      j < n ;							  
      0 }						      	for ( int j = 0 ;					      j ++ ) {							  
      ;							      	j < n ;							    	currCount [ str . charAt ( j ) ] ++ ;			  
      for ( int j = 0 ;					      	j ++ ) {						    	if ( currCount [ str . charAt ( j ) ] == 1 ) {		  
      j < n ;						      	  curr_count [ str . charAt ( j ) ] ++ ;		    	  count ++ ;						  
      j ++ ) {						      	  if ( curr_count [ str . charAt ( j ) ] == 1 ) count ++ ;  	}							  
	curr_count [ str [ j ] ] ++ ;			      	  if ( count == dist_count ) {				    	if ( count == distCount ) {				  
	if ( curr_count [ str [ j ] ] == 1 ) count ++ ;	      	    while ( curr_count [ str . charAt ( start ) ] > 1 ) {   	  while ( currCount [ str . charAt ( start ) ] > 1 ) {	  
	if ( count == dist_count ) {			      	      if ( curr_count [ str . charAt ( start ) ] > 1 ) curr 	    if ( currCount [ str . charAt ( start ) ] > 1 ) {	  
	  while ( curr_count [ str [ start ] ] > 1 ) {	      	      start ++ ;					    	      currCount [ str . charAt ( start ) ] -- ;		  
	    if ( curr_count [ str [ start ] ] > 1 ) curr_coun 	    }							    	    }							  
	    start ++ ;					      	    int len_window = j - start + 1 ;			    	    start ++ ;						  
	  }						      	    if ( min_len > len_window ) {			    	  }							  
	  int len_window = j - start + 1 ;		      	      min_len = len_window ;				    	  int lenWindow = j - start + 1 ;			  
	  if ( min_len > len_window ) {			      	      start_index = start ;				    	  if ( minLen > lenWindow ) {				  
	    min_len = len_window ;			      	    }							    	    minLen = lenWindow ;				  
	    start_index = start ;			      	  }							    	    startIndex = start ;				  
	  }						      	}							    	  }							  
	}						      	return str . substring ( start_index , start_index + min_le 	}							  
      }							      }								      }								  
      return str . substr ( start_index , min_len ) ;	      								      return str . substring ( startIndex , minLen ) ;		  
    }							      								    }								  
    -							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM	      SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM		    SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM		  SPACE_OPTIMIZED_DP_SOLUTION_0_1_KNAPSACK_PROBLEM
--							      --							    --								  --
int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) {   static int KnapSack ( int val [ ] , int wt [ ] , int n , int  public static int KnapSack ( int val [ ] , int wt [ ] , int n script_not_found : None
  int mat [ 2 ] [ W + 1 ] ;				      	int mat [ ] [ ] = new int [ 2 ] [ W + 1 ] ;		      int mat [ ] [ ] = new int [ 2 ] [ W + 1 ] ;		  
  memset ( mat , 0 , sizeof ( mat ) ) ;			      	int i = 0 ;						      Arrays . fill ( mat , 0 ) ;				  
  int i = 0 ;						      	while ( i < n ) {					      int i = 0 ;						  
  while ( i < n ) {					      	  int j = 0 ;						      while ( i < n ) {						  
    int j = 0 ;						      	  if ( i % 2 != 0 ) {					    	int j = 0 ;						  
    if ( i % 2 != 0 ) {					      	    while ( ++ j <= W ) {				    	if ( i % 2 != 0 ) {					  
      while ( ++ j <= W ) {				      	      if ( wt [ i ] <= j ) {				    	  while ( ++ j <= W ) {					  
	if ( wt [ i ] <= j ) mat [ 1 ] [ j ] = max ( val [ i  		mat [ 1 ] [ j ] = Math . max ( val [ i ] + mat [ 0  	    if ( wt [ i ] <= j ) {				  
	else mat [ 1 ] [ j ] = mat [ 0 ] [ j ] ;	      	      }							    	      mat [ 1 ] [ j ] = Math . max ( val [ i ] + mat [ 0  
      }							      	      else {						    	    }							  
    }							      		mat [ 1 ] [ j ] = mat [ 0 ] [ j ] ;		    	    else {						  
    else {						      	      }							    	      mat [ 1 ] [ j ] = mat [ 0 ] [ j ] ;		  
      while ( ++ j <= W ) {				      	    }							    	    }							  
	if ( wt [ i ] <= j ) mat [ 0 ] [ j ] = max ( val [ i  	  }							    	  }							  
	else mat [ 0 ] [ j ] = mat [ 1 ] [ j ] ;	      	  else {						    	}							  
      }							      	    while ( ++ j <= W ) {				    	else {							  
    }							      	      if ( wt [ i ] <= j ) {				    	  while ( ++ j <= W ) {					  
    i ++ ;						      		mat [ 0 ] [ j ] = Math . max ( val [ i ] + mat [ 1  	    if ( wt [ i ] <= j ) {				  
  }							      	      }							    	      mat [ 0 ] [ j ] = Math . max ( val [ i ] + mat [ 1  
  return ( n % 2 != 0 ) ? mat [ 0 ] [ W ] : mat [ 1 ] [ W ] ; 	      else {						    	    }							  
}							      		mat [ 0 ] [ j ] = mat [ 1 ] [ j ] ;		    	    else {						  
							      	      }							    	      mat [ 0 ] [ j ] = mat [ 1 ] [ j ] ;		  
							      	    }							    	    }							  
							      	  }							    	  }							  
							      	  i ++ ;						    	}							  
							      	}							    	i ++ ;							  
							      	return ( n % 2 != 0 ) ? mat [ 0 ] [ W ] : mat [ 1 ] [ W ] ;   }								  
							      }								      return ( n % 2 != 0 ) ? mat [ 0 ] [ W ] : mat [ 1 ] [ W ] ; 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_APPLYING_GIVEN_EQUATION			      SORT_ARRAY_APPLYING_GIVEN_EQUATION			    SORT_ARRAY_APPLYING_GIVEN_EQUATION				  SORT_ARRAY_APPLYING_GIVEN_EQUATION
--							      --							    --								  --
void sortArray ( int arr [ ] , int n , int A , int B , int C  static void sortArray ( int arr [ ] , int n , int A , int B , public static void sortArray ( int arr [ ] , int n , int A ,  error : SORT_ARRAY_APPLYING_GIVEN_EQUATION.java:75
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  : error: variable i is already defined in method f
  i < n ;						      	i < n ;							      i < n ;							  _filled(int[],int,int,int,int)   for ( int i = 0 ;
  i ++ ) arr [ i ] = A * arr [ i ] * arr [ i ] + B * arr [ i  	i ++ ) arr [ i ] = A * arr [ i ] * arr [ i ] + B * arr [ i    i ++ ) {							  	       ^ 1 error
  int index , maximum = INT_MIN ;			      	int index = - 1 ;					    	arr [ i ] = A * arr [ i ] * arr [ i ] + B * arr [ i ] + C 
  for ( int i = 0 ;					      	int maximum = - 999999 ;				      }								  
  i < n ;						      	for ( int i = 0 ;					      int index = Integer . MIN_VALUE , maximum = Integer . MAX_V 
  i ++ ) {						      	i < n ;							      for ( int i = 0 ;						  
    if ( maximum < arr [ i ] ) {			      	i ++ ) {						      i < n ;							  
      index = i ;					      	  if ( maximum < arr [ i ] ) {				      i ++ ) {							  
      maximum = arr [ i ] ;				      	    index = i ;						    	if ( maximum < arr [ i ] ) {				  
    }							      	    maximum = arr [ i ] ;				    	  index = i ;						  
  }							      	  }							    	  maximum = arr [ i ] ;					  
  int i = 0 , j = n - 1 ;				      	}							    	}							  
  int new_arr [ n ] , k = 0 ;				      	int i = 0 , j = n - 1 ;					      }								  
  while ( i < index && j > index ) {			      	int [ ] new_arr = new int [ n ] ;			      int i = 0 , j = n - 1 ;					  
    if ( arr [ i ] < arr [ j ] ) new_arr [ k ++ ] = arr [ i + 	int k = 0 ;						      int newArr [ ] = new int [ n ] , k = 0 ;			  
    else new_arr [ k ++ ] = arr [ j -- ] ;		      	while ( i < index && j > index ) {			      while ( i < index && j > index ) {			  
  }							      	  if ( arr [ i ] < arr [ j ] ) new_arr [ k ++ ] = arr [ i + 	if ( arr [ i ] < arr [ j ] ) {				  
  while ( i < index ) new_arr [ k ++ ] = arr [ i ++ ] ;	      	  else new_arr [ k ++ ] = arr [ j -- ] ;		    	  newArr [ k ++ ] = arr [ i ++ ] ;			  
  while ( j > index ) new_arr [ k ++ ] = arr [ j -- ] ;	      	}							    	}							  
  new_arr [ n - 1 ] = maximum ;				      	while ( i < index ) new_arr [ k ++ ] = arr [ i ++ ] ;	    	else {							  
  for ( int i = 0 ;					      	while ( j > index ) new_arr [ k ++ ] = arr [ j -- ] ;	    	  newArr [ k ++ ] = arr [ j -- ] ;			  
  i < n ;						      	new_arr [ n - 1 ] = maximum ;				    	}							  
  i ++ ) arr [ i ] = new_arr [ i ] ;			      	for ( int p = 0 ;					      }								  
}							      	p < n ;							      while ( i < index ) {					  
							      	p ++ ) arr [ p ] = new_arr [ p ] ;			    	newArr [ k ++ ] = arr [ i ++ ] ;			  
							      }								      }								  
							      								      while ( j > index ) {					  
							      								    	newArr [ k ++ ] = arr [ j -- ] ;			  
							      								      }								  
							      								      newArr [ n - 1 ] = maximum ;				  
							      								      for ( int i = 0 ;						  
							      								      i < n ;							  
							      								      i ++ ) {							  
							      								    	arr [ i ] = newArr [ i ] ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS		      LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS		    LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS		  LCS_LONGEST_COMMON_SUBSEQUENCE_THREE_STRINGS
--							      --							    --								  --
int lcsOf3 ( string X , string Y , string Z , int m , int n , static int lcsOf3 ( String X , String Y , String Z , int m ,  public static int lcsOf3 ( String X , String Y , String Z , i script_not_found : None
  int L [ m + 1 ] [ n + 1 ] [ o + 1 ] ;			      	int [ ] [ ] [ ] L = new int [ m + 1 ] [ n + 1 ] [ o + 1 ] ;   int L [ ] [ ] = new int [ m + 1 ] [ n + 1 ] [ o + 1 ] ;	  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= n ;						      	  j <= n ;						    	j <= n ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      for ( int k = 0 ;					      	    for ( int k = 0 ;					    	  for ( int k = 0 ;					  
      k <= o ;						      	    k <= o ;						    	  k <= o ;						  
      k ++ ) {						      	    k ++ ) {						    	  k ++ ) {						  
	if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] 	      if ( i == 0 || j == 0 || k == 0 ) L [ i ] [ j ] [ k ] 	    if ( i == 0 || j == 0 || k == 0 ) {			  
	else if ( X [ i - 1 ] == Y [ j - 1 ] && X [ i - 1 ] = 	      else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1  	      L [ i ] [ j ] [ k ] = 0 ;				  
	else L [ i ] [ j ] [ k ] = max ( max ( L [ i - 1 ] [  	      else L [ i ] [ j ] [ k ] = Math . max ( Math . max (  	    }							  
      }							      	    }							    	    else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1  
    }							      	  }							    	      L [ i ] [ j ] [ k ] = L [ i - 1 ] [ j - 1 ] [ k - 1 
  }							      	}							    	    }							  
  return L [ m ] [ n ] [ o ] ;				      	return L [ m ] [ n ] [ o ] ;				    	    else {						  
}							      }								    	      L [ i ] [ j ] [ k ] = Math . max ( Math . max ( L [ 
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return L [ m ] [ n ] [ o ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES			      CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES			    CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES			  CONSTRUCT_GRAPH_GIVEN_DEGREES_VERTICES
--							      --							    --								  --
void printMat ( int degseq [ ] , int n ) {		      static void printMat ( int degseq [ ] , int n ) {		    public static void printMat ( int degseq [ ] , int n ) {	  script_not_found : None
  int mat [ n ] [ n ] ;					      	int [ ] [ ] mat = new int [ n ] [ n ] ;			      int mat [ ] [ ] = new int [ n ] [ n ] ;			  
  memset ( mat , 0 , sizeof ( mat ) ) ;			      	for ( int i = 0 ;					      Arrays . fill ( mat , 0 ) ;				  
  for ( int i = 0 ;					      	i < n ;							      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) {						      i < n ;							  
  i ++ ) {						      	  for ( int j = i + 1 ;					      i ++ ) {							  
    for ( int j = i + 1 ;				      	  j < n ;						    	for ( int j = i + 1 ;					  
    j < n ;						      	  j ++ ) {						    	j < n ;							  
    j ++ ) {						      	    if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {	    	j ++ ) {						  
      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {	      	      degseq [ i ] -- ;					    	  if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {		  
	degseq [ i ] -- ;				      	      degseq [ j ] -- ;					    	    degseq [ i ] -- ;					  
	degseq [ j ] -- ;				      	      mat [ i ] [ j ] = 1 ;				    	    degseq [ j ] -- ;					  
	mat [ i ] [ j ] = 1 ;				      	      mat [ j ] [ i ] = 1 ;				    	    mat [ i ] [ j ] = 1 ;				  
	mat [ j ] [ i ] = 1 ;				      	    }							    	    mat [ j ] [ i ] = 1 ;				  
      }							      	  }							    	  }							  
    }							      	}							    	}							  
  }							      	System . out . print ( "\n" + setw ( 3 ) + "	 " ) ;	      }								  
  cout << "\n" << setw ( 3 ) << "     " ;		      	for ( int i = 0 ;					      System . out . println ( "\n" + String . format ( "     " , 
  for ( int i = 0 ;					      	i < n ;							      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) System . out . print ( setw ( 3 ) + "(" + i + ")" )    i < n ;							  
  i ++ ) cout << setw ( 3 ) << "(" << i << ")" ;	      	System . out . print ( "\n\n" ) ;			      i ++ ) {							  
  cout << "\n\n" ;					      	for ( int i = 0 ;					    	System . out . println ( String . format ( "(%d)" , i ) ) 
  for ( int i = 0 ;					      	i < n ;							      }								  
  i < n ;						      	i ++ ) {						      System . out . println ( "\n\n" ) ;			  
  i ++ ) {						      	  System . out . print ( setw ( 4 ) + "(" + i + ")" ) ;	      for ( int i = 0 ;						  
    cout << setw ( 4 ) << "(" << i << ")" ;		      	  for ( int j = 0 ;					      i < n ;							  
    for ( int j = 0 ;					      	  j < n ;						      i ++ ) {							  
    j < n ;						      	  j ++ ) System . out . print ( setw ( 5 ) + mat [ i ] [ j  	System . out . println ( String . format ( "(%d)" , i ) ) 
    j ++ ) cout << setw ( 5 ) << mat [ i ] [ j ] ;	      	  System . out . print ( "\n" ) ;			    	for ( int j = 0 ;					  
    cout << "\n" ;					      	}							    	j < n ;							  
  }							      }								    	j ++ ) {						  
}							      								    	  System . out . println ( String . format ( "%d" , mat [ 
							      								    	}							  
							      								    	System . out . println ( "\n" ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_CHECK					      DIVISIBILITY_CHECK					    DIVISIBILITY_CHECK						  DIVISIBILITY_CHECK
--							      --							    --								  --
void divisibilityCheck ( int arr [ ] , int n ) {	      static void divisibilityCheck ( List < Integer > arr , int n  public static void divisibilityCheck ( int arr [ ] , int n )  script_not_found : None
  unordered_set < int > s ;				      	List < Integer > s = new ArrayList < Integer > ( ) ;	      HashSet < Integer > s = new HashSet < > ( ) ;		  
  int max_ele = INT_MIN ;				      	int max_ele = Integer . MIN_VALUE ;			      int maxEle = Integer . MIN_VALUE ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    s . insert ( arr [ i ] ) ;				      	  s . add ( arr . get ( i ) ) ;				    	s . add ( arr [ i ] ) ;					  
    max_ele = max ( max_ele , arr [ i ] ) ;		      	  max_ele = Math . max ( max_ele , arr . get ( i ) ) ;	    	maxEle = Math . max ( maxEle , arr [ i ] ) ;		  
  }							      	}							      }								  
  unordered_set < int > res ;				      	LinkedHashSet < Integer > res = new LinkedHashSet < Integer   HashSet < Integer > res = new HashSet < > ( ) ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] != 0 ) {				      	  if ( arr . get ( i ) != 0 ) for ( int j = arr . get ( i ) 	if ( arr [ i ] != 0 ) {					  
      for ( int j = arr [ i ] * 2 ;			      	  j <= max_ele ;					    	  for ( int j = arr [ i ] * 2 ;				  
      j <= max_ele ;					      	  j += arr . get ( i ) ) {				    	  j <= maxEle ;						  
      j += arr [ i ] ) {				      	    if ( s . contains ( j ) ) res . add ( j ) ;		    	  j += arr [ i ] ) {					  
	if ( s . find ( j ) != s . end ( ) ) res . insert ( j 	  }							    	    if ( s . contains ( j ) ) {				  
      }							      	}							    	      res . add ( j ) ;					  
    }							      	List < Integer > list = new ArrayList < Integer > ( res ) ; 	    }							  
  }							      	Collections . reverse ( list ) ;			    	  }							  
  unordered_map < int , int > mp ;			      	for ( Integer temp : list ) System . out . print ( temp + " 	}							  
  for ( int i = 0 ;					      }								      }								  
  i < n ;						      								      HashMap < Integer , Integer > mp = new HashMap < > ( ) ;	  
  i ++ ) mp [ arr [ i ] ] ++ ;				      								      for ( int i = 0 ;						  
  unordered_map < int , int > :: iterator it ;		      								      i < n ;							  
  vector < int > ans ;					      								      i ++ ) {							  
  for ( it = mp . begin ( ) ;				      								    	mp . put ( arr [ i ] , ++ i ) ;				  
  it != mp . end ( ) ;					      								      }								  
  it ++ ) {						      								      HashMap < Integer , Integer > map = mp ;			  
    if ( it -> second >= 2 ) {				      								      ArrayList < Integer > ans = new ArrayList < > ( ) ;	  
      if ( res . find ( it -> first ) == res . end ( ) ) {    								      for ( int i = 0 ;						  
	int val = it -> second ;			      								      i < mp . size ( ) ;					  
	while ( val -- ) ans . push_back ( it -> first ) ;    								      i ++ ) {							  
      }							      								    	if ( mp . get ( i ) >= 2 ) {				  
    }							      								    	  if ( res . get ( mp . get ( i ) ) == null ) {		  
    if ( res . find ( it -> first ) != res . end ( ) ) {      								    	    int val = mp . get ( i ) ;				  
      int val = it -> second ;				      								    	    while ( val -- > 0 ) {				  
      while ( val -- ) ans . push_back ( it -> first ) ;      								    	      ans . add ( mp . get ( i ) ) ;			  
    }							      								    	    }							  
  }							      								    	  }							  
  for ( auto x : ans ) cout << x << " " ;		      								    	  if ( res . get ( mp . get ( i ) ) != null ) {		  
}							      								    	    int val = mp . get ( i ) ;				  
							      								    	    while ( val -- > 0 ) {				  
							      								    	      ans . add ( mp . get ( i ) ) ;			  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								    	for ( Integer x : ans ) {				  
							      								    	  System . out . print ( x + " " ) ;			  
							      								    	}							  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X	      CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X	    CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X	  CREATE_A_MATRIX_WITH_ALTERNATING_RECTANGLES_OF_0_AND_X
--							      --							    --								  --
void fill0X ( int m , int n ) {				      static void fill0X ( int m , int n ) {			    public static void fill0X ( int m , int n ) {		  script_not_found : None
  int i , k = 0 , l = 0 ;				      	int i , k = 0 , l = 0 ;					      int i , k = 0 , l = 0 ;					  
  int r = m , c = n ;					      	int r = m , c = n ;					      int r = m , c = n ;					  
  char a [ m ] [ n ] ;					      	char a [ ] [ ] = new char [ m ] [ n ] ;			      char [ ] a = new char [ m ] [ n ] ;			  
  char x = 'X' ;					      	char x = 'X' ;						      char x = 'X' ;						  
  while ( k < m && l < n ) {				      	while ( k < m && l < n ) {				      while ( k < m && l < n ) {				  
    for ( i = l ;					      	  for ( i = l ;						    	for ( i = l ;						  
    i < n ;						      	  i < n ;						    	i < n ;							  
    ++ i ) a [ k ] [ i ] = x ;				      	  ++ i ) a [ k ] [ i ] = x ;				    	++ i ) {						  
    k ++ ;						      	  k ++ ;						    	  a [ k ] [ i ] = x ;					  
    for ( i = k ;					      	  for ( i = k ;						    	}							  
    i < m ;						      	  i < m ;						    	k ++ ;							  
    ++ i ) a [ i ] [ n - 1 ] = x ;			      	  ++ i ) a [ i ] [ n - 1 ] = x ;			    	for ( i = k ;						  
    n -- ;						      	  n -- ;						    	i < m ;							  
    if ( k < m ) {					      	  if ( k < m ) {					    	++ i ) {						  
      for ( i = n - 1 ;					      	    for ( i = n - 1 ;					    	  a [ i ] [ n - 1 ] = x ;				  
      i >= l ;						      	    i >= l ;						    	}							  
      -- i ) a [ m - 1 ] [ i ] = x ;			      	    -- i ) a [ m - 1 ] [ i ] = x ;			    	n -- ;							  
      m -- ;						      	    m -- ;						    	if ( k < m ) {						  
    }							      	  }							    	  for ( i = n - 1 ;					  
    if ( l < n ) {					      	  if ( l < n ) {					    	  i >= l ;						  
      for ( i = m - 1 ;					      	    for ( i = m - 1 ;					    	  -- i ) {						  
      i >= k ;						      	    i >= k ;						    	    a [ m - 1 ] [ i ] = x ;				  
      -- i ) a [ i ] [ l ] = x ;			      	    -- i ) a [ i ] [ l ] = x ;				    	  }							  
      l ++ ;						      	    l ++ ;						    	  m -- ;						  
    }							      	  }							    	}							  
    x = ( x == '0' ) ? 'X' : '0' ;			      	  x = ( x == '0' ) ? 'X' : '0' ;			    	if ( l < n ) {						  
  }							      	}							    	  for ( i = m - 1 ;					  
  for ( i = 0 ;						      	for ( i = 0 ;						    	  i >= k ;						  
  i < r ;						      	i < r ;							    	  -- i ) {						  
  i ++ ) {						      	i ++ ) {						    	    a [ i ] [ l ] = x ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	  }							  
    j < c ;						      	  j < c ;						    	  l ++ ;						  
    j ++ ) printf ( "%c " , a [ i ] [ j ] ) ;		      	  j ++ ) System . out . print ( a [ i ] [ j ] + " " ) ;	    	}							  
    printf ( "\n" ) ;					      	  System . out . println ( ) ;				    	x = ( x == '0' ) ? 'X' : '0' ;				  
  }							      	}							      }								  
}							      }								      for ( i = 0 ;						  
							      								      i < r ;							  
							      								      i ++ ) {							  
							      								    	for ( int j = 0 ;					  
							      								    	j < c ;							  
							      								    	++ j ) {						  
							      								    	  System . out . print ( a [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS	      FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS		    FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS		  FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_STACKS
--							      --							    --								  --
int maxSum ( int stack1 [ ] , int stack2 [ ] , int stack3 [ ] public static int maxSum ( int stack1 [ ] , int stack2 [ ] ,  public static int maxSum ( int stack1 [ ] , int stack2 [ ] ,  error : FIND_MAXIMUM_SUM_POSSIBLE_EQUAL_SUM_THREE_
  int sum1 = 0 , sum2 = 0 , sum3 = 0 ;			      	int sum1 = 0 , sum2 = 0 , sum3 = 0 ;			      int sum1 = 0 , sum2 = 0 , sum3 = 0 ;			  STACKS.java:55: error: incompatible types: int can
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  not be converted to boolean	while ( 1 ) {
  i < n1 ;						      	i < n1 ;						      i < n1 ;							      ^ 1 error
  i ++ ) sum1 += stack1 [ i ] ;				      	i ++ ) sum1 += stack1 [ i ] ;				      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	sum1 += stack1 [ i ] ;					  
  i < n2 ;						      	i < n2 ;						      }								  
  i ++ ) sum2 += stack2 [ i ] ;				      	i ++ ) sum2 += stack2 [ i ] ;				      for ( int i = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      i < n2 ;							  
  i < n3 ;						      	i < n3 ;						      i ++ ) {							  
  i ++ ) sum3 += stack3 [ i ] ;				      	i ++ ) sum3 += stack3 [ i ] ;				    	sum2 += stack2 [ i ] ;					  
  int top1 = 0 , top2 = 0 , top3 = 0 ;			      	int top1 = 0 , top2 = 0 , top3 = 0 ;			      }								  
  int ans = 0 ;						      	int ans = 0 ;						      for ( int i = 0 ;						  
  while ( 1 ) {						      	while ( true ) {					      i < n3 ;							  
    if ( top1 == n1 || top2 == n2 || top3 == n3 ) return 0 ;  	  if ( top1 == n1 || top2 == n2 || top3 == n3 ) return 0 ;    i ++ ) {							  
    if ( sum1 == sum2 && sum2 == sum3 ) return sum1 ;	      	  if ( sum1 == sum2 && sum2 == sum3 ) return sum1 ;	    	sum3 += stack3 [ i ] ;					  
    if ( sum1 >= sum2 && sum1 >= sum3 ) sum1 -= stack1 [ top1 	  if ( sum1 >= sum2 && sum1 >= sum3 ) sum1 -= stack1 [ top1   }								  
    else if ( sum2 >= sum3 && sum2 >= sum3 ) sum2 -= stack2 [ 	  else if ( sum2 >= sum3 && sum2 >= sum3 ) sum2 -= stack2 [   int top1 = 0 , top2 = 0 , top3 = 0 ;			  
    else if ( sum3 >= sum2 && sum3 >= sum1 ) sum3 -= stack3 [ 	  else if ( sum3 >= sum2 && sum3 >= sum1 ) sum3 -= stack3 [   int ans = 0 ;						  
  }							      	}							      while ( 1 ) {						  
}							      }								    	if ( top1 == n1 || top2 == n2 || top3 == n3 ) {		  
							      								    	  return 0 ;						  
							      								    	}							  
							      								    	if ( sum1 == sum2 && sum2 == sum3 ) {			  
							      								    	  return sum1 ;						  
							      								    	}							  
							      								    	if ( sum1 >= sum2 && sum1 >= sum3 ) {			  
							      								    	  sum1 -= stack1 [ top1 ++ ] ;				  
							      								    	}							  
							      								    	else if ( sum2 >= sum3 && sum2 >= sum3 ) {		  
							      								    	  sum2 -= stack2 [ top2 ++ ] ;				  
							      								    	}							  
							      								    	else if ( sum3 >= sum2 && sum3 >= sum1 ) {		  
							      								    	  sum3 -= stack3 [ top3 ++ ] ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT		      MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT			    MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT			  MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT
--							      --							    --								  --
int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n ) {    static int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n public static int maxSumSubarrayRemovingOneEle ( int arr [ ]  error : MAXIMUM_SUM_SUBARRAY_REMOVING_ONE_ELEMENT.
  int fw [ n ] , bw [ n ] ;				      	int fw [ ] = new int [ n ] ;				      int fw [ ] , bw [ ] ;					  java:44: error: variable fw might not have been in
  int cur_max = arr [ 0 ] , max_so_far = arr [ 0 ] ;	      	int bw [ ] = new int [ n ] ;				      int curMax = arr [ 0 ] , maxSo_far = arr [ 0 ] ;		  itialized   fw [ 0 ] = arr [ 0 ] ;   ^ MAXIMUM_SUM
  fw [ 0 ] = arr [ 0 ] ;				      	int cur_max = arr [ 0 ] , max_so_far = arr [ 0 ] ;	      fw [ 0 ] = arr [ 0 ] ;					  _SUBARRAY_REMOVING_ONE_ELEMENT.java:52: error: var
  for ( int i = 1 ;					      	fw [ 0 ] = arr [ 0 ] ;					      for ( int i = 1 ;						  iable bw might not have been initialized   curMax
  i < n ;						      	for ( int i = 1 ;					      i < n ;							  = maxSo_far = bw [ n - 1 ] = arr [ n - 1 ] ;
  i ++ ) {						      	i < n ;							      i ++ ) {							  		    ^ 2 errors
    cur_max = max ( arr [ i ] , cur_max + arr [ i ] ) ;	      	i ++ ) {						    	curMax = Math . max ( arr [ i ] , curMax + arr [ i ] ) ;  
    max_so_far = max ( max_so_far , cur_max ) ;		      	  cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] )  	maxSo_far = Math . max ( maxSo_far , curMax ) ;		  
    fw [ i ] = cur_max ;				      	  max_so_far = Math . max ( max_so_far , cur_max ) ;	    	fw [ i ] = curMax ;					  
  }							      	  fw [ i ] = cur_max ;					      }								  
  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ;	      	}							      curMax = maxSo_far = bw [ n - 1 ] = arr [ n - 1 ] ;	  
  for ( int i = n - 2 ;					      	cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ;	      for ( int i = n - 2 ;					  
  i >= 0 ;						      	for ( int i = n - 2 ;					      i >= 0 ;							  
  i -- ) {						      	i >= 0 ;						      i -- ) {							  
    cur_max = max ( arr [ i ] , cur_max + arr [ i ] ) ;	      	i -- ) {						    	curMax = Math . max ( arr [ i ] , curMax + arr [ i ] ) ;  
    max_so_far = max ( max_so_far , cur_max ) ;		      	  cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] )  	maxSo_far = Math . max ( maxSo_far , curMax ) ;		  
    bw [ i ] = cur_max ;				      	  max_so_far = Math . max ( max_so_far , cur_max ) ;	    	bw [ i ] = curMax ;					  
  }							      	  bw [ i ] = cur_max ;					      }								  
  int fans = max_so_far ;				      	}							      int fans = maxSo_far ;					  
  for ( int i = 1 ;					      	int fans = max_so_far ;					      for ( int i = 1 ;						  
  i < n - 1 ;						      	for ( int i = 1 ;					      i < n - 1 ;						  
  i ++ ) fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] ) ;  	i < n - 1 ;						      i ++ ) {							  
  return fans ;						      	i ++ ) fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 	fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 ] )  
}							      	return fans ;						      }								  
							      }								      return fans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1     GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1	    GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1	  GIVEN_LARGE_NUMBER_CHECK_SUBSEQUENCE_DIGITS_DIVISIBLE_8_1
--							      --							    --								  --
bool isSubSeqDivisible ( string str ) {			      static boolean isSubSeqDivisible ( String str ) {		    public static boolean isSubSeqDivisible ( String str ) {	  script_not_found : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int dp [ n + 1 ] [ 10 ] ;				      	int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ 10 ] ;		  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	int arr [ ] = new int [ n + 1 ] ;			      Arrays . fill ( dp , 0 ) ;				  
  int arr [ n + 1 ] ;					      	for ( int i = 1 ;					      int [ ] arr = new int [ n + 1 ] ;				  
  for ( int i = 1 ;					      	i <= n ;						      for ( int i = 1 ;						  
  i <= n ;						      	i ++ ) arr [ i ] = ( int ) ( str . charAt ( i - 1 ) - '0' )   i <= n ;							  
  i ++ ) arr [ i ] = str [ i - 1 ] - '0' ;		      	for ( int i = 1 ;					      i ++ ) {							  
  for ( int i = 1 ;					      	i <= n ;						    	arr [ i ] = str . charAt ( i - 1 ) - '0' ;		  
  i <= n ;						      	i ++ ) {						      }								  
  i ++ ) {						      	  dp [ i ] [ arr [ i ] % 8 ] = 1 ;			      for ( int i = 1 ;						  
    dp [ i ] [ arr [ i ] % 8 ] = 1 ;			      	  for ( int j = 0 ;					      i <= n ;							  
    for ( int j = 0 ;					      	  j < 8 ;						      i ++ ) {							  
    j < 8 ;						      	  j ++ ) {						    	dp [ i ] [ arr [ i ] % 8 ] = 1 ;			  
    j ++ ) {						      	    if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i 	for ( int j = 0 ;					  
      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i 	    if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j 	j < 8 ;							  
      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j 	  }							    	j ++ ) {						  
    }							      	}							    	  if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i 
  }							      	for ( int i = 1 ;					    	    dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1  
  for ( int i = 1 ;					      	i <= n ;						    	  }							  
  i <= n ;						      	i ++ ) {						    	  if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) {		  
  i ++ ) {						      	  if ( dp [ i ] [ 0 ] == 1 ) return true ;		    	    dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;		  
    if ( dp [ i ] [ 0 ] == 1 ) return true ;		      	}							    	  }							  
  }							      	return false ;						    	}							  
  return false ;					      }								      }								  
}							      								      for ( int i = 1 ;						  
							      								      i <= n ;							  
							      								      i ++ ) {							  
							      								    	if ( dp [ i ] [ 0 ] == 1 ) {				  
							      								    	  return true ;						  
							      								    	}							  
							      								      }								  
							      								      return false ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PREFIX_SUM_2D_ARRAY					      PREFIX_SUM_2D_ARRAY					    PREFIX_SUM_2D_ARRAY						  PREFIX_SUM_2D_ARRAY
--							      --							    --								  --
void prefixSum2D ( int a [ ] [ C ] ) {			      public static void prefixSum2D ( int a [ ] [ ] ) {	    public static void prefixSum2D ( int a [ ] [ ] ) {		  script_not_found : None
  int psa [ R ] [ C ] ;					      	int R = a . length ;					      int psa [ ] [ ] = new int [ R ] [ C ] ;			  
  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;			      	int C = a [ 0 ] . length ;				      psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;				  
  for ( int i = 1 ;					      	int psa [ ] [ ] = new int [ R ] [ C ] ;			      for ( int i = 1 ;						  
  i < C ;						      	psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;			      i < C ;							  
  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i  	for ( int i = 1 ;					      i ++ ) {							  
  for ( int i = 0 ;					      	i < C ;							    	psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ;	  
  i < R ;						      	i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i    }								  
  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0  	for ( int i = 1 ;					      for ( int i = 0 ;						  
  for ( int i = 1 ;					      	i < R ;							      i < R ;							  
  i < R ;						      	i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0    i ++ ) {							  
  i ++ ) {						      	for ( int i = 1 ;					    	psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ;	  
    for ( int j = 1 ;					      	i < R ;							      }								  
    j < C ;						      	i ++ ) for ( int j = 1 ;				      for ( int i = 1 ;						  
    j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ]  	j < C ;							      i < R ;							  
  }							      	j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [    i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	for ( int j = 1 ;					  
  i < R ;						      	i < R ;							    	j < C ;							  
  i ++ ) {						      	i ++ ) {						    	j ++ ) {						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	  psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 
    j < C ;						      	  j < C ;						    	}							  
    j ++ ) cout << psa [ i ] [ j ] << " " ;		      	  j ++ ) System . out . print ( psa [ i ] [ j ] + " " ) ;     }								  
    cout << "\n" ;					      	  System . out . println ( ) ;				      for ( int i = 0 ;						  
  }							      	}							      i < R ;							  
}							      }								      i ++ ) {							  
							      								    	for ( int j = 0 ;					  
							      								    	j < C ;							  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( psa [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( "\n" ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM			      MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM			    MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM				  MAXIMUM_SUM_PATH_MATRIX_TOP_BOTTOM
--							      --							    --								  --
int maxSum ( int mat [ SIZE ] [ SIZE ] , int n ) {	      static int maxSum ( int [ ] [ ] mat , int n ) {		    public static int maxSum ( int mat [ ] [ ] , int n ) {	  script_not_found : None
  if ( n == 1 ) return mat [ 0 ] [ 0 ] ;		      	if ( n == 1 ) return mat [ 0 ] [ 0 ] ;			      if ( n == 1 ) return mat [ 0 ] [ 0 ] ;			  
  int dp [ n ] [ n ] ;					      	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int dp [ ] [ ] = new int [ n ] [ n ] ;			  
  int maxSum = INT_MIN , max ;				      	int maxSum = Integer . MIN_VALUE , max ;		      int maxSum = Integer . MIN_VALUE , max ;			  
  for ( int j = 0 ;					      	for ( int j = 0 ;					      for ( int j = 0 ;						  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) dp [ n - 1 ] [ j ] = mat [ n - 1 ] [ j ] ;	      	j ++ ) dp [ n - 1 ] [ j ] = mat [ n - 1 ] [ j ] ;	      j ++ ) {							  
  for ( int i = n - 2 ;					      	for ( int i = n - 2 ;					    	dp [ n - 1 ] [ j ] = mat [ n - 1 ] [ j ] ;		  
  i >= 0 ;						      	i >= 0 ;						      }								  
  i -- ) {						      	i -- ) {						      for ( int i = n - 2 ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i >= 0 ;							  
    j < n ;						      	  j < n ;						      i -- ) {							  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      max = INT_MIN ;					      	    max = Integer . MIN_VALUE ;				    	j < n ;							  
      if ( ( ( j - 1 ) >= 0 ) && ( max < dp [ i + 1 ] [ j - 1 	    if ( ( ( j - 1 ) >= 0 ) && ( max < dp [ i + 1 ] [ j - 1 	j ++ ) {						  
      if ( ( ( j + 1 ) < n ) && ( max < dp [ i + 1 ] [ j + 1  	    if ( ( ( j + 1 ) < n ) && ( max < dp [ i + 1 ] [ j + 1  	  max = Integer . MIN_VALUE ;				  
      dp [ i ] [ j ] = mat [ i ] [ j ] + max ;		      	    dp [ i ] [ j ] = mat [ i ] [ j ] + max ;		    	  if ( ( ( j - 1 ) >= 0 ) && ( max < dp [ i + 1 ] [ j - 1 
    }							      	  }							    	    max = dp [ i + 1 ] [ j - 1 ] ;			  
  }							      	}							    	  }							  
  for ( int j = 0 ;					      	for ( int j = 0 ;					    	  if ( ( ( j + 1 ) < n ) && ( max < dp [ i + 1 ] [ j + 1  
  j < n ;						      	j < n ;							    	    max = dp [ i + 1 ] [ j + 1 ] ;			  
  j ++ ) if ( maxSum < dp [ 0 ] [ j ] ) maxSum = dp [ 0 ] [ j 	j ++ ) if ( maxSum < dp [ 0 ] [ j ] ) maxSum = dp [ 0 ] [ j 	  }							  
  return maxSum ;					      	return maxSum ;						    	  dp [ i ] [ j ] = mat [ i ] [ j ] + max ;		  
}							      }								    	}							  
							      								      }								  
							      								      for ( int j = 0 ;						  
							      								      j < n ;							  
							      								      j ++ ) if ( maxSum < dp [ 0 ] [ j ] ) maxSum = dp [ 0 ] [ j 
							      								      return maxSum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_BEST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
void bestFit ( int blockSize [ ] , int m , int processSize [  static void bestFit ( int blockSize [ ] , int m , int process public static void bestFit ( int [ ] blockSize , int m , int  script_not_found : None
  int allocation [ n ] ;				      	int allocation [ ] = new int [ n ] ;			      int [ ] allocation = new int [ n ] ;			  
  memset ( allocation , - 1 , sizeof ( allocation ) ) ;	      	for ( int i = 0 ;					      Arrays . fill ( allocation , - 1 ) ;			  
  for ( int i = 0 ;					      	i < allocation . length ;				      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) allocation [ i ] = - 1 ;				      i < n ;							  
  i ++ ) {						      	for ( int i = 0 ;					      i ++ ) {							  
    int bestIdx = - 1 ;					      	i < n ;							    	int bestIdx = - 1 ;					  
    for ( int j = 0 ;					      	i ++ ) {						    	for ( int j = 0 ;					  
    j < m ;						      	  int bestIdx = - 1 ;					    	j < m ;							  
    j ++ ) {						      	  for ( int j = 0 ;					    	j ++ ) {						  
      if ( blockSize [ j ] >= processSize [ i ] ) {	      	  j < m ;						    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	if ( bestIdx == - 1 ) bestIdx = j ;		      	  j ++ ) {						    	    if ( bestIdx == - 1 ) {				  
	else if ( blockSize [ bestIdx ] > blockSize [ j ] ) b 	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	      bestIdx = j ;					  
      }							      	      if ( bestIdx == - 1 ) bestIdx = j ;		    	    }							  
    }							      	      else if ( blockSize [ bestIdx ] > blockSize [ j ] ) b 	    else if ( blockSize [ bestIdx ] > blockSize [ j ] ) { 
    if ( bestIdx != - 1 ) {				      	    }							    	      bestIdx = j ;					  
      allocation [ i ] = bestIdx ;			      	  }							    	    }							  
      blockSize [ bestIdx ] -= processSize [ i ] ;	      	  if ( bestIdx != - 1 ) {				    	  }							  
    }							      	    allocation [ i ] = bestIdx ;			    	}							  
  }							      	    blockSize [ bestIdx ] -= processSize [ i ] ;	    	if ( bestIdx != - 1 ) {					  
  cout << "\nProcess No.\tProcess Size\tBlock no.\n" ;	      	  }							    	  allocation [ i ] = bestIdx ;				  
  for ( int i = 0 ;					      	}							    	  blockSize [ bestIdx ] -= processSize [ i ] ;		  
  i < n ;						      	System . out . println ( "\nProcess No.\tProcess Size\tBloc 	}							  
  i ++ ) {						      	for ( int i = 0 ;					      }								  
    cout << "	" << i + 1 << "\t\t" << processSize [ i ] <<  	i < n ;							      System . out . println ( "\nProcess No.\tProcess Size\tBloc 
    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 	i ++ ) {						      for ( int i = 0 ;						  
    else cout << "Not Allocated" ;			      	  System . out . print ( "   " + ( i + 1 ) + "\t\t" + proce   i < n ;							  
    cout << endl ;					      	  if ( allocation [ i ] != - 1 ) System . out . print ( all   i ++ ) {							  
  }							      	  else System . out . print ( "Not Allocated" ) ;	    	System . out . println ( "   " + i + "\t\t" + processSize 
}							      	  System . out . println ( ) ;				    	if ( allocation [ i ] != - 1 ) {			  
							      	}							    	  System . out . println ( allocation [ i ] + 1 ) ;	  
							      }								    	}							  
							      								    	else {							  
							      								    	  System . out . println ( "Not Allocated" ) ;		  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS	      WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS	    WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS		  WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTERS
--							      --							    --								  --
int countTransformation ( string a , string b ) {	      static int countTransformation ( String a , String b ) {	    public static int countTransformation ( String a , String b ) error : Exception in thread "main" java.lang.Array
  int n = a . size ( ) , m = b . size ( ) ;		      	int n = a . length ( ) , m = b . length ( ) ;		      int n = a . length ( ) , m = b . length ( ) ;		  StoreException: java.lang.Integer 	at java.base/ja
  if ( m == 0 ) return 1 ;				      	if ( m == 0 ) {						      if ( m == 0 ) return 1 ;					  va.util.Arrays.fill(Arrays.java:3638) 	at WAYS_TRA
  int dp [ m + 1 ] [ n + 1 ] ;				      	  return 1 ;						      int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		  NSFORMING_ONE_STRING_REMOVING_0_CHARACTERS.f_fille
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	}							      Arrays . fill ( dp , 0 ) ;				  d(WAYS_TRANSFORMING_ONE_STRING_REMOVING_0_CHARACTE
  for ( int i = 0 ;					      	int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;		      for ( int i = 0 ;						  RS.java:52) 	at WAYS_TRANSFORMING_ONE_STRING_REMOV
  i < m ;						      	for ( int i = 0 ;					      i < m ;							  ING_0_CHARACTERS.main(WAYS_TRANSFORMING_ONE_STRING
  i ++ ) {						      	i < m ;							      i ++ ) {							  _REMOVING_0_CHARACTERS.java:110)
    for ( int j = i ;					      	i ++ ) {						    	for ( int j = i ;					  
    j < n ;						      	  for ( int j = i ;					    	j < n ;							  
    j ++ ) {						      	  j < n ;						    	j ++ ) {						  
      if ( i == 0 ) {					      	  j ++ ) {						    	  if ( i == 0 ) {					  
	if ( j == 0 ) dp [ i ] [ j ] = ( a [ j ] == b [ i ] ) 	    if ( i == 0 ) {					    	    if ( j == 0 ) {					  
	else if ( a [ j ] == b [ i ] ) dp [ i ] [ j ] = dp [  	      if ( j == 0 ) {					    	      dp [ i ] [ j ] = ( a . charAt ( j ) == b . charAt ( 
	else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;	      		dp [ i ] [ j ] = ( a . charAt ( j ) == b . charAt ( 	    }							  
      }							      	      }							    	    else if ( a . charAt ( j ) == b . charAt ( i ) ) {	  
      else {						      	      else if ( a . charAt ( j ) == b . charAt ( i ) ) {    	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ;		  
	if ( a [ j ] == b [ i ] ) dp [ i ] [ j ] = dp [ i ] [ 		dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + 1 ;	    	    }							  
	else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;	      	      }							    	    else {						  
      }							      	      else {						    	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		  
    }							      		dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		    	    }							  
  }							      	      }							    	  }							  
  return dp [ m - 1 ] [ n - 1 ] ;			      	    }							    	  else {						  
}							      	    else if ( a . charAt ( j ) == b . charAt ( i ) ) {	    	    if ( a . charAt ( j ) == b . charAt ( i ) ) {	  
							      	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ] [  	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i - 1 ]  
							      	    }							    	    }							  
							      	    else {						    	    else {						  
							      	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		    	      dp [ i ] [ j ] = dp [ i ] [ j - 1 ] ;		  
							      	    }							    	    }							  
							      	  }							    	  }							  
							      	}							    	}							  
							      	return dp [ m - 1 ] [ n - 1 ] ;				      }								  
							      }								      return dp [ m - 1 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE	      DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_15_LONGEST_BITONIC_SUBSEQUENCE
--							      --							    --								  --
int lbs ( int arr [ ] , int n ) {			      static int lbs ( int arr [ ] , int n ) {			    public static int lbs ( int arr [ ] , int n ) {		  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  int * lis = new int [ n ] ;				      	int [ ] lis = new int [ n ] ;				      int lis [ ] = new int [ n ] ;				  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) lis [ i ] = 1 ;				      	i ++ ) lis [ i ] = 1 ;					      i ++ ) {							  
  for ( i = 1 ;						      	for ( i = 1 ;						    	lis [ i ] = 1 ;						  
  i < n ;						      	i < n ;							      }								  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      for ( i = 1 ;						  
  j < i ;						      	j < i ;							      i < n ;							  
  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]  	j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]    i ++ ) for ( j = 0 ;					  
  int * lds = new int [ n ] ;				      	int [ ] lds = new int [ n ] ;				      j < i ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ]  
  i < n ;						      	i < n ;							      int lds [ ] = new int [ n ] ;				  
  i ++ ) lds [ i ] = 1 ;				      	i ++ ) lds [ i ] = 1 ;					      for ( i = 0 ;						  
  for ( i = n - 2 ;					      	for ( i = n - 2 ;					      i < n ;							  
  i >= 0 ;						      	i >= 0 ;						      i ++ ) lds [ i ] = 1 ;					  
  i -- ) for ( j = n - 1 ;				      	i -- ) for ( j = n - 1 ;				      for ( i = n - 2 ;						  
  j > i ;						      	j > i ;							      i >= 0 ;							  
  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ]  	j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ]    i -- ) for ( j = n - 1 ;					  
  int max = lis [ 0 ] + lds [ 0 ] - 1 ;			      	int max = lis [ 0 ] + lds [ 0 ] - 1 ;			      j > i ;							  
  for ( i = 1 ;						      	for ( i = 1 ;						      j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ]  
  i < n ;						      	i < n ;							      int max = lis [ 0 ] + lds [ 0 ] - 1 ;			  
  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i 	i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i   for ( i = 1 ;						  
  return max ;						      	return max ;						      i < n ;							  
}							      }								      i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i 
							      								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINTING_ITEMS_01_KNAPSACK				      PRINTING_ITEMS_01_KNAPSACK				    PRINTING_ITEMS_01_KNAPSACK					  PRINTING_ITEMS_01_KNAPSACK
--							      --							    --								  --
void printknapSack ( int W , int wt [ ] , int val [ ] , int n static void printknapSack ( int W , int wt [ ] , int val [ ]  public static void printknapSack ( int W , int wt [ ] , int v script_not_found : None
  int i , w ;						      	int i , w ;						      int i , w ;						  
  int K [ n + 1 ] [ W + 1 ] ;				      	int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		      int K [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;		  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( w = 0 ;					      	  for ( w = 0 ;						    	for ( w = 0 ;						  
    w <= W ;						      	  w <= W ;						    	w <= W ;						  
    w ++ ) {						      	  w ++ ) {						    	w ++ ) {						  
      if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;	      	    if ( i == 0 || w == 0 ) K [ i ] [ w ] = 0 ;		    	  if ( i == 0 || w == 0 ) {				  
      else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = max ( val 	    else if ( wt [ i - 1 ] <= w ) K [ i ] [ w ] = Math . ma 	    K [ i ] [ w ] = 0 ;					  
      else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		      	    else K [ i ] [ w ] = K [ i - 1 ] [ w ] ;		    	  }							  
    }							      	  }							    	  else if ( wt [ i - 1 ] <= w ) {			  
  }							      	}							    	    K [ i ] [ w ] = Math . max ( val [ i - 1 ] + K [ i -  
  int res = K [ n ] [ W ] ;				      	int res = K [ n ] [ W ] ;				    	  }							  
  printf ( "%d\n" , res ) ;				      	System . out . println ( res ) ;			    	  else {						  
  w = W ;						      	w = W ;							    	    K [ i ] [ w ] = K [ i - 1 ] [ w ] ;			  
  for ( i = n ;						      	for ( i = n ;						    	  }							  
  i > 0 && res > 0 ;					      	i > 0 && res > 0 ;					    	}							  
  i -- ) {						      	i -- ) {						      }								  
    if ( res == K [ i - 1 ] [ w ] ) continue ;		      	  if ( res == K [ i - 1 ] [ w ] ) continue ;		      int res = K [ n ] [ W ] ;					  
    else {						      	  else {						      System . out . println ( res ) ;				  
      printf ( "%d " , wt [ i - 1 ] ) ;			      	    System . out . print ( wt [ i - 1 ] + " " ) ;	      w = W ;							  
      res = res - val [ i - 1 ] ;			      	    res = res - val [ i - 1 ] ;				      for ( i = n ;						  
      w = w - wt [ i - 1 ] ;				      	    w = w - wt [ i - 1 ] ;				      i > 0 && res > 0 ;					  
    }							      	  }							      i -- ) {							  
  }							      	}							    	if ( res == K [ i - 1 ] [ w ] ) {			  
}							      }								    	  continue ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  System . out . print ( wt [ i - 1 ] + " " ) ;		  
							      								    	  res = res - val [ i - 1 ] ;				  
							      								    	  w = w - wt [ i - 1 ] ;				  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET MAXIMUM_NUMBER_OF_TRAILING_ZEROS_IN_THE_PRODUCT_OF_THE_SUBSET
--							      --							    --								  --
int maximumZeros ( int * arr , int n , int k ) {	      static int maximumZeros ( int arr [ ] , int n , int k ) {	    public static int maximumZeros ( int [ ] arr , int n , int k  script_not_found : None
  int subset [ k + 1 ] [ MAX5 + 5 ] ;			      	int subset [ ] [ ] = new int [ k + 1 ] [ MAX5 + 5 ] ;	      int subset [ ] [ ] = new int [ k + 1 ] [ MAX5 + 5 ] ;	  
  memset ( subset , - 1 , sizeof ( subset ) ) ;		      	for ( int [ ] row : subset ) {				      Arrays . fill ( subset , - 1 ) ;				  
  subset [ 0 ] [ 0 ] = 0 ;				      	  Arrays . fill ( row , - 1 ) ;				      subset [ 0 ] [ 0 ] = 0 ;					  
  for ( int p = 0 ;					      	}							      for ( int p = 0 ;						  
  p < n ;						      	subset [ 0 ] [ 0 ] = 0 ;				      p < n ;							  
  p ++ ) {						      	for ( int p = 0 ;					      p ++ ) {							  
    int pw2 = 0 , pw5 = 0 ;				      	p < n ;							    	int pw2 = 0 , pw5 = 0 ;					  
    while ( arr [ p ] % 2 == 0 ) {			      	p ++ ) {						    	while ( arr [ p ] % 2 == 0 ) {				  
      pw2 ++ ;						      	  int pw2 = 0 , pw5 = 0 ;				    	  pw2 ++ ;						  
      arr [ p ] /= 2 ;					      	  while ( arr [ p ] % 2 == 0 ) {			    	  arr [ p ] /= 2 ;					  
    }							      	    pw2 ++ ;						    	}							  
    while ( arr [ p ] % 5 == 0 ) {			      	    arr [ p ] /= 2 ;					    	while ( arr [ p ] % 5 == 0 ) {				  
      pw5 ++ ;						      	  }							    	  pw5 ++ ;						  
      arr [ p ] /= 5 ;					      	  while ( arr [ p ] % 5 == 0 ) {			    	  arr [ p ] /= 5 ;					  
    }							      	    pw5 ++ ;						    	}							  
    for ( int i = k - 1 ;				      	    arr [ p ] /= 5 ;					    	for ( int i = k - 1 ;					  
    i >= 0 ;						      	  }							    	i >= 0 ;						  
    i -- ) for ( int j = 0 ;				      	  for ( int i = k - 1 ;					    	i -- ) for ( int j = 0 ;				  
    j < MAX5 ;						      	  i >= 0 ;						    	j < MAX5 ;						  
    j ++ ) if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ]  	  i -- ) {						    	j ++ ) if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ]  
  }							      	    for ( int j = 0 ;					      }								  
  int ans = 0 ;						      	    j < MAX5 ;						      int ans = 0 ;						  
  for ( int i = 0 ;					      	    j ++ ) {						      for ( int i = 0 ;						  
  i < MAX5 ;						      	      if ( subset [ i ] [ j ] != - 1 ) {		      i < MAX5 ;						  
  i ++ ) ans = max ( ans , min ( i , subset [ k ] [ i ] ) ) ; 		subset [ i + 1 ] [ j + pw5 ] = Math . max ( subset    i ++ ) ans = Math . max ( ans , Math . min ( i , subset [ k 
  return ans ;						      	      }							      return ans ;						  
}							      	    }							    }								  
							      	  }							    								  
							      	}							    								  
							      	int ans = 0 ;						    								  
							      	for ( int i = 0 ;					    								  
							      	i < MAX5 ;						    								  
							      	i ++ ) {						    								  
							      	  ans = Math . max ( ans , Math . min ( i , subset [ k ] [  								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K		      LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K		    LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K		  LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K
--							      --							    --								  --
int longestSubsequenceCommonSegment ( int k , string s1 , str static int longestSubsequenceCommonSegment ( int k , String s public static int longestSubsequenceCommonSegment ( int k , S error : Exception in thread "main" java.lang.Array
  int n = s1 . length ( ) ;				      	int n = s1 . length ( ) ;				      int n = s1 . length ( ) ;					  StoreException: java.lang.Integer 	at java.base/ja
  int m = s2 . length ( ) ;				      	int m = s2 . length ( ) ;				      int m = s2 . length ( ) ;					  va.util.Arrays.fill(Arrays.java:3638) 	at LCS_FORM
  int lcs [ n + 1 ] [ m + 1 ] ;				      	int lcs [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		      int lcs [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		  ED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.f_filled(LC
  int cnt [ n + 1 ] [ m + 1 ] ;				      	int cnt [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		      int cnt [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;		  S_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENGTH_K.java:
  memset ( lcs , 0 , sizeof ( lcs ) ) ;			      	for ( int i = 1 ;					      Arrays . fill ( lcs , 0 ) ;				  42) 	at LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LENG
  memset ( cnt , 0 , sizeof ( cnt ) ) ;			      	i <= n ;						      Arrays . fill ( cnt , 0 ) ;				  TH_K.main(LCS_FORMED_CONSECUTIVE_SEGMENTS_LEAST_LE
  for ( int i = 1 ;					      	i ++ ) {						      for ( int i = 1 ;						  NGTH_K.java:104)
  i <= n ;						      	  for ( int j = 1 ;					      i <= n ;							  
  i ++ ) {						      	  j <= m ;						      i ++ ) {							  
    for ( int j = 1 ;					      	  j ++ ) {						    	for ( int j = 1 ;					  
    j <= m ;						      	    lcs [ i ] [ j ] = Math . max ( lcs [ i - 1 ] [ j ] , lc 	j <= m ;						  
    j ++ ) {						      	    if ( s1 . charAt ( i - 1 ) == s2 . charAt ( j - 1 ) ) c 	j ++ ) {						  
      lcs [ i ] [ j ] = max ( lcs [ i - 1 ] [ j ] , lcs [ i ] 	    if ( cnt [ i ] [ j ] >= k ) {			    	  lcs [ i ] [ j ] = Math . max ( lcs [ i - 1 ] [ j ] , lc 
      if ( s1 [ i - 1 ] == s2 [ j - 1 ] ) cnt [ i ] [ j ] = c 	      for ( int a = k ;					    	  if ( s1 . charAt ( i - 1 ) == s2 . charAt ( j - 1 ) ) { 
      if ( cnt [ i ] [ j ] >= k ) {			      	      a <= cnt [ i ] [ j ] ;				    	    cnt [ i ] [ j ] = cnt [ i - 1 ] [ j - 1 ] + 1 ;	  
	for ( int a = k ;				      	      a ++ ) lcs [ i ] [ j ] = Math . max ( lcs [ i ] [ j ] 	  }							  
	a <= cnt [ i ] [ j ] ;				      	    }							    	  if ( cnt [ i ] [ j ] >= k ) {				  
	a ++ ) lcs [ i ] [ j ] = max ( lcs [ i ] [ j ] , lcs  	  }							    	    for ( int a = k ;					  
      }							      	}							    	    a <= cnt [ i ] [ j ] ;				  
    }							      	return lcs [ n ] [ m ] ;				    	    a ++ ) {						  
  }							      }								    	      lcs [ i ] [ j ] = Math . max ( lcs [ i ] [ j ] , lc 
  return lcs [ n ] [ m ] ;				      								    	    }							  
}							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return lcs [ n ] [ m ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT	      FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT	    FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT	  FIND_DISTINCT_INTEGERS_FOR_A_TRIPLET_WITH_GIVEN_PRODUCT
--							      --							    --								  --
void findTriplets ( int x ) {				      static void findTriplets ( int x ) {			    public static void findTriplets ( int x ) {			  script_not_found : None
  vector < int > fact ;					      	Vector < Integer > fact = new Vector < Integer > ( ) ;	      ArrayList < Integer > fact = new ArrayList < > ( ) ;	  
  unordered_set < int > factors ;			      	HashSet < Integer > factors = new HashSet < Integer > ( ) ;   HashSet < Integer > factors = new HashSet < > ( ) ;	  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= sqrt ( x ) ;					      	i <= Math . sqrt ( x ) ;				      i <= Math . sqrt ( x ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( x % i == 0 ) {					      	  if ( x % i == 0 ) {					    	if ( x % i == 0 ) {					  
      fact . push_back ( i ) ;				      	    fact . add ( i ) ;					    	  fact . add ( i ) ;					  
      if ( x / i != i ) fact . push_back ( x / i ) ;	      	    if ( x / i != i ) fact . add ( x / i ) ;		    	  if ( x / i != i ) {					  
      factors . insert ( i ) ;				      	    factors . add ( i ) ;				    	    fact . add ( x / i ) ;				  
      factors . insert ( x / i ) ;			      	    factors . add ( x / i ) ;				    	  }							  
    }							      	  }							    	  factors . add ( i ) ;					  
  }							      	}							    	  factors . add ( x / i ) ;				  
  bool found = false ;					      	boolean found = false ;					    	}							  
  int k = fact . size ( ) ;				      	int k = fact . size ( ) ;				      }								  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      boolean found = false ;					  
  i < k ;						      	i < k ;							      int k = fact . size ( ) ;					  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    int a = fact [ i ] ;				      	  int a = fact . get ( i ) ;				      i < k ;							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i ++ ) {							  
    j < k ;						      	  j < k ;						    	int a = fact . get ( i ) ;				  
    j ++ ) {						      	  j ++ ) {						    	for ( int j = 0 ;					  
      int b = fact [ j ] ;				      	    int b = fact . get ( j ) ;				    	j < k ;							  
      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a  	    if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a  	j ++ ) {						  
	cout << a << " " << b << " " << ( x / ( a * b ) ) ;   	      System . out . print ( a + " " + b + " " + ( x / ( a  	  int b = fact . get ( j ) ;				  
	found = true ;					      	      found = true ;					    	  if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a  
	break ;						      	      break ;						    	    System . out . println ( a + " " + b + " " + ( x / (  
      }							      	    }							    	    found = true ;					  
    }							      	  }							    	    break ;						  
    if ( found ) break ;				      	  if ( found ) break ;					    	  }							  
  }							      	}							    	}							  
  if ( ! found ) cout << "-1" ;				      	if ( ! found ) System . out . print ( "-1" ) ;		    	if ( found ) {						  
}							      }								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      if ( ! found ) {						  
							      								    	System . out . println ( "-1" ) ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FOUR_CONSECUTIVE_ELEM
--							      --							    --								  --
int minSum ( int arr [ ] , int n ) {			      static int minSum ( int [ ] arr , int n ) {		    public static int minSum ( int arr [ ] , int n ) {		  error : MINIMUM_SUM_SUBSEQUENCE_LEAST_ONE_EVERY_FO
  int dp [ n ] ;					      	int [ ] dp = new int [ n ] ;				      int dp [ ] ;						  UR_CONSECUTIVE_ELEMENTS_PICKED.java:36: error: var
  if ( n == 1 ) return arr [ 0 ] ;			      	if ( n == 1 ) return arr [ 0 ] ;			      if ( n == 1 ) return arr [ 0 ] ;				  iable dp might not have been initialized   dp [ 0
  if ( n == 2 ) return min ( arr [ 0 ] , arr [ 1 ] ) ;	      	if ( n == 2 ) return Math . min ( arr [ 0 ] , arr [ 1 ] ) ;   if ( n == 2 ) return Math . min ( arr [ 0 ] , arr [ 1 ] ) ; ] = arr [ 0 ] ;   ^ 1 error
  if ( n == 3 ) return min ( arr [ 0 ] , min ( arr [ 1 ] , ar 	if ( n == 3 ) return Math . min ( arr [ 0 ] , Math . min (    if ( n == 3 ) return Math . min ( arr [ 0 ] , Math . min (  
  if ( n == 4 ) return min ( min ( arr [ 0 ] , arr [ 1 ] ) ,  	if ( n == 4 ) return Math . min ( Math . min ( arr [ 0 ] ,    if ( n == 4 ) return Math . min ( Math . min ( arr [ 0 ] ,  
  dp [ 0 ] = arr [ 0 ] ;				      	dp [ 0 ] = arr [ 0 ] ;					      dp [ 0 ] = arr [ 0 ] ;					  
  dp [ 1 ] = arr [ 1 ] ;				      	dp [ 1 ] = arr [ 1 ] ;					      dp [ 1 ] = arr [ 1 ] ;					  
  dp [ 2 ] = arr [ 2 ] ;				      	dp [ 2 ] = arr [ 2 ] ;					      dp [ 2 ] = arr [ 2 ] ;					  
  dp [ 3 ] = arr [ 3 ] ;				      	dp [ 3 ] = arr [ 3 ] ;					      dp [ 3 ] = arr [ 3 ] ;					  
  for ( int i = 4 ;					      	for ( int i = 4 ;					      for ( int i = 4 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp 	i ++ ) dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp    i ++ ) {							  
  return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp 	return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2  	dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp [ i - 
}							      }								      }								  
							      								      return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH CHECK_IF_A_STRING_HAS_ALL_CHARACTERS_WITH_SAME_FREQUENCY_WITH
--							      --							    --								  --
bool isValidString ( string str ) {			      static boolean isValidString ( String str ) {		    public static boolean isValidString ( String str ) {	  script_not_found : None
  int freq [ CHARS ] = {				      	int freq [ ] = new int [ CHARS ] ;			      int [ ] freq = new int [ CHARS ] ;			  
    0 }							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    ;							      	i < str . length ( ) ;					      i < str . length ( ) ;					  
    for ( int i = 0 ;					      	i ++ ) {						      i ++ ) {							  
    i < str . length ( ) ;				      	  freq [ str . charAt ( i ) - 'a' ] ++ ;		    	freq [ str . charAt ( i ) - 'a' ] ++ ;			  
    i ++ ) freq [ str [ i ] - 'a' ] ++ ;		      	}							      }								  
    int i , freq1 = 0 , count_freq1 = 0 ;		      	int i , freq1 = 0 , count_freq1 = 0 ;			      int i , freq1 = 0 , count_freq1 = 0 ;			  
    for ( i = 0 ;					      	for ( i = 0 ;						      for ( i = 0 ;						  
    i < CHARS ;						      	i < CHARS ;						      i < CHARS ;						  
    i ++ ) {						      	i ++ ) {						      i ++ ) {							  
      if ( freq [ i ] != 0 ) {				      	  if ( freq [ i ] != 0 ) {				    	if ( freq [ i ] != 0 ) {				  
	freq1 = freq [ i ] ;				      	    freq1 = freq [ i ] ;				    	  freq1 = freq [ i ] ;					  
	count_freq1 = 1 ;				      	    count_freq1 = 1 ;					    	  count_freq1 = 1 ;					  
	break ;						      	    break ;						    	  break ;						  
      }							      	  }							    	}							  
    }							      	}							      }								  
    int j , freq2 = 0 , count_freq2 = 0 ;		      	int j , freq2 = 0 , count_freq2 = 0 ;			      int j , freq2 = 0 , count_freq2 = 0 ;			  
    for ( j = i + 1 ;					      	for ( j = i + 1 ;					      for ( j = i + 1 ;						  
    j < CHARS ;						      	j < CHARS ;						      j < CHARS ;						  
    j ++ ) {						      	j ++ ) {						      j ++ ) {							  
      if ( freq [ j ] != 0 ) {				      	  if ( freq [ j ] != 0 ) {				    	if ( freq [ j ] != 0 ) {				  
	if ( freq [ j ] == freq1 ) count_freq1 ++ ;	      	    if ( freq [ j ] == freq1 ) {			    	  if ( freq [ j ] == freq1 ) {				  
	else {						      	      count_freq1 ++ ;					    	    count_freq1 ++ ;					  
	  count_freq2 = 1 ;				      	    }							    	  }							  
	  freq2 = freq [ j ] ;				      	    else {						    	  else {						  
	  break ;					      	      count_freq2 = 1 ;					    	    count_freq2 = 1 ;					  
	}						      	      freq2 = freq [ j ] ;				    	    freq2 = freq [ j ] ;				  
      }							      	      break ;						    	    break ;						  
    }							      	    }							    	  }							  
    for ( int k = j + 1 ;				      	  }							    	}							  
    k < CHARS ;						      	}							      }								  
    k ++ ) {						      	for ( int k = j + 1 ;					      for ( int k = j + 1 ;					  
      if ( freq [ k ] != 0 ) {				      	k < CHARS ;						      k < CHARS ;						  
	if ( freq [ k ] == freq1 ) count_freq1 ++ ;	      	k ++ ) {						      k ++ ) {							  
	if ( freq [ k ] == freq2 ) count_freq2 ++ ;	      	  if ( freq [ k ] != 0 ) {				    	if ( freq [ k ] != 0 ) {				  
	else return false ;				      	    if ( freq [ k ] == freq1 ) {			    	  if ( freq [ k ] == freq1 ) {				  
      }							      	      count_freq1 ++ ;					    	    count_freq1 ++ ;					  
      if ( count_freq1 > 1 && count_freq2 > 1 ) return false  	    }							    	  }							  
    }							      	    if ( freq [ k ] == freq2 ) {			    	  if ( freq [ k ] == freq2 ) {				  
    return true ;					      	      count_freq2 ++ ;					    	    count_freq2 ++ ;					  
  }							      	    }							    	  }							  
							      	    else {						    	  else {						  
							      	      return false ;					    	    return false ;					  
							      	    }							    	  }							  
							      	  }							    	}							  
							      	  if ( count_freq1 > 1 && count_freq2 > 1 ) {		    	if ( count_freq1 > 1 && count_freq2 > 1 ) {		  
							      	    return false ;					    	  return false ;					  
							      	  }							    	}							  
							      	}							      }								  
							      	return true ;						      return true ;						  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS FINDING_THE_MAXIMUM_SQUARE_SUB_MATRIX_WITH_ALL_EQUAL_ELEMENTS
--							      --							    --								  --
int largestKSubmatrix ( int a [ ] [ Col ] ) {		      static int largestKSubmatrix ( int [ ] [ ] a ) {		    public static int largestKSubmatrix ( int a [ ] [ ] , int Col script_not_found : None
  int dp [ Row ] [ Col ] ;				      	int [ ] [ ] dp = new int [ Row ] [ Col ] ;		      int dp [ ] [ ] = new int [ Row ] [ Col ] ;		  
  memset ( dp , sizeof ( dp ) , 0 ) ;			      	int result = 0 ;					      Arrays . fill ( dp , 0 ) ;				  
  int result = 0 ;					      	for ( int i = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	i < Row ;						      for ( int i = 0 ;						  
  i < Row ;						      	i ++ ) {						      i < Row ;							  
  i ++ ) {						      	  for ( int j = 0 ;					      i ++ ) {							  
    for ( int j = 0 ;					      	  j < Col ;						    	for ( int j = 0 ;					  
    j < Col ;						      	  j ++ ) {						    	j < Col ;						  
    j ++ ) {						      	    if ( i == 0 || j == 0 ) dp [ i ] [ j ] = 1 ;	    	j ++ ) {						  
      if ( i == 0 || j == 0 ) dp [ i ] [ j ] = 1 ;	      	    else {						    	  if ( i == 0 || j == 0 ) {				  
      else {						      	      if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] && a [ i ] [  	    dp [ i ] [ j ] = 1 ;				  
	if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] && a [ i ] [  		dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] > dp [ i ] [  	  }							  
	else dp [ i ] [ j ] = 1 ;			      	      }							    	  else {						  
      }							      	      else dp [ i ] [ j ] = 1 ;				    	    if ( a [ i ] [ j ] == a [ i - 1 ] [ j ] && a [ i ] [  
      result = max ( result , dp [ i ] [ j ] ) ;	      	    }							    	      dp [ i ] [ j ] = Math . min ( Math . min ( dp [ i - 
    }							      	    result = result > dp [ i ] [ j ] ? result : dp [ i ] [  	    }							  
  }							      	  }							    	    else {						  
  return result ;					      	}							    	      dp [ i ] [ j ] = 1 ;				  
}							      	return result ;						    	    }							  
							      }								    	  }							  
							      								    	  result = Math . max ( result , dp [ i ] [ j ] ) ;	  
							      								    	}							  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		      PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		    PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT		  PROGRAM_WORST_FIT_ALGORITHM_MEMORY_MANAGEMENT
--							      --							    --								  --
void worstFit ( int blockSize [ ] , int m , int processSize [ static void worstFit ( int blockSize [ ] , int m , int proces public static void worstFit ( int [ ] blockSize , int m , int script_not_found : None
  int allocation [ n ] ;				      	int allocation [ ] = new int [ n ] ;			      int [ ] allocation = new int [ n ] ;			  
  memset ( allocation , - 1 , sizeof ( allocation ) ) ;	      	for ( int i = 0 ;					      Arrays . fill ( allocation , - 1 ) ;			  
  for ( int i = 0 ;					      	i < allocation . length ;				      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) allocation [ i ] = - 1 ;				      i < n ;							  
  i ++ ) {						      	for ( int i = 0 ;					      i ++ ) {							  
    int wstIdx = - 1 ;					      	i < n ;							    	int wstIdx = - 1 ;					  
    for ( int j = 0 ;					      	i ++ ) {						    	for ( int j = 0 ;					  
    j < m ;						      	  int wstIdx = - 1 ;					    	j < m ;							  
    j ++ ) {						      	  for ( int j = 0 ;					    	j ++ ) {						  
      if ( blockSize [ j ] >= processSize [ i ] ) {	      	  j < m ;						    	  if ( blockSize [ j ] >= processSize [ i ] ) {		  
	if ( wstIdx == - 1 ) wstIdx = j ;		      	  j ++ ) {						    	    if ( wstIdx == - 1 ) {				  
	else if ( blockSize [ wstIdx ] < blockSize [ j ] ) ws 	    if ( blockSize [ j ] >= processSize [ i ] ) {	    	      wstIdx = j ;					  
      }							      	      if ( wstIdx == - 1 ) wstIdx = j ;			    	    }							  
    }							      	      else if ( blockSize [ wstIdx ] < blockSize [ j ] ) ws 	    else if ( blockSize [ wstIdx ] < blockSize [ j ] ) {  
    if ( wstIdx != - 1 ) {				      	    }							    	      wstIdx = j ;					  
      allocation [ i ] = wstIdx ;			      	  }							    	    }							  
      blockSize [ wstIdx ] -= processSize [ i ] ;	      	  if ( wstIdx != - 1 ) {				    	  }							  
    }							      	    allocation [ i ] = wstIdx ;				    	}							  
  }							      	    blockSize [ wstIdx ] -= processSize [ i ] ;		    	if ( wstIdx != - 1 ) {					  
  cout << "\nProcess No.\tProcess Size\tBlock no.\n" ;	      	  }							    	  allocation [ i ] = wstIdx ;				  
  for ( int i = 0 ;					      	}							    	  blockSize [ wstIdx ] -= processSize [ i ] ;		  
  i < n ;						      	System . out . println ( "\nProcess No.\tProcess Size\tBloc 	}							  
  i ++ ) {						      	for ( int i = 0 ;					      }								  
    cout << "	" << i + 1 << "\t\t" << processSize [ i ] <<  	i < n ;							      System . out . println ( "\nProcess No.\tProcess Size\tBloc 
    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 	i ++ ) {						      for ( int i = 0 ;						  
    else cout << "Not Allocated" ;			      	  System . out . print ( "   " + ( i + 1 ) + "\t\t" + proce   i < n ;							  
    cout << endl ;					      	  if ( allocation [ i ] != - 1 ) System . out . print ( all   i ++ ) {							  
  }							      	  else System . out . print ( "Not Allocated" ) ;	    	System . out . println ( "   " + ( i + 1 ) + "\t\t" + pro 
}							      	  System . out . println ( ) ;				    	if ( allocation [ i ] != - 1 ) {			  
							      	}							    	  System . out . println ( allocation [ i ] + 1 ) ;	  
							      }								    	}							  
							      								    	else {							  
							      								    	  System . out . println ( "Not Allocated" ) ;		  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6	      PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6	    PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6	  PRINT_DIGITS_POSITION_REMOVED_MAKE_NUMBER_DIVISIBLE_6
--							      --							    --								  --
void greatest ( string s ) {				      static void greatest ( String s ) {			    public static void greatest ( String s ) {			  script_not_found : None
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  int a [ n ] ;						      	int [ ] a = new int [ n ] ;				      int a [ ] = new int [ n ] ;				  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    a [ i ] = s [ i ] - '0' ;				      	  a [ i ] = s . charAt ( i ) - '0' ;			    	a [ i ] = s . charAt ( i ) - '0' ;			  
    sum += a [ i ] ;					      	  sum += a [ i ] ;					    	sum += a [ i ] ;					  
  }							      	}							      }								  
  if ( a [ n - 1 ] % 2 ) {				      	if ( a [ n - 1 ] % 2 != 0 ) {				      if ( a [ n - 1 ] % 2 != 0 ) {				  
    if ( a [ n - 2 ] % 2 != 0 or ( sum - a [ n - 1 ] ) % 3 != 	  if ( a [ n - 2 ] % 2 != 0 || ( sum - a [ n - 1 ] ) % 3 != 	if ( a [ n - 2 ] % 2 != 0 or ( sum - a [ n - 1 ] ) % 3 != 
      cout << "-1" << endl ;				      	    System . out . println ( "-1" ) ;			    	else System . out . println ( n ) ;			  
    }							      	  }							      }								  
    else {						      	  else {						      else {							  
      cout << n << endl ;				      	    System . out . println ( n ) ;			    	int re = sum % 3 ;					  
    }							      	  }							    	int del = - 1 ;						  
  }							      	}							    	int flag = 0 ;						  
  else {						      	else {							    	for ( int i = 0 ;					  
    int re = sum % 3 ;					      	  int re = sum % 3 ;					    	i < n - 1 ;						  
    int del = - 1 ;					      	  int del = - 1 ;					    	i ++ ) {						  
    int flag = 0 ;					      	  int flag = 0 ;					    	  if ( ( a [ i ] ) % 3 == re ) {			  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	    if ( a [ i + 1 ] > a [ i ] ) {			  
    i < n - 1 ;						      	  i < n - 1 ;						    	      del = i ;						  
    i ++ ) {						      	  i ++ ) {						    	      flag = 1 ;					  
      if ( ( a [ i ] ) % 3 == re ) {			      	    if ( ( a [ i ] ) % 3 == re ) {			    	      break ;						  
	if ( a [ i + 1 ] > a [ i ] ) {			      	      if ( a [ i + 1 ] > a [ i ] ) {			    	    }							  
	  del = i ;					      		del = i ;					    	    else del = i ;					  
	  flag = 1 ;					      		flag = 1 ;					    	  }							  
	  break ;					      		break ;						    	}							  
	}						      	      }							    	if ( flag == 0 ) {					  
	else {						      	      else {						    	  if ( a [ n - 2 ] % 2 == 0 and re == a [ n - 1 ] % 3 ) d 
	  del = i ;					      		del = i ;					    	}							  
	}						      	      }							    	if ( del == - 1 ) System . out . println ( - 1 ) ;	  
      }							      	    }							    	else System . out . println ( del + 1 ) ;		  
    }							      	  }							      }								  
    if ( flag == 0 ) {					      	  if ( flag == 0 ) {					    }								  
      if ( a [ n - 2 ] % 2 == 0 and re == a [ n - 1 ] % 3 ) d 	    if ( a [ n - 2 ] % 2 == 0 && re == a [ n - 1 ] % 3 ) de 								  
    }							      	  }							    								  
    if ( del == - 1 ) cout << - 1 << endl ;		      	  if ( del == - 1 ) System . out . println ( - 1 ) ;	    								  
    else {						      	  else {						    								  
      cout << del + 1 << endl ;				      	    System . out . println ( del + 1 ) ;		    								  
    }							      	  }							    								  
  }							      	}							    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION		      MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION		    MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION		  MINIMUM_POSITIVE_POINTS_TO_REACH_DESTINATION
--							      --							    --								  --
int minInitialPoints ( int points [ ] [ C ] ) {		      static int minInitialPoints ( int points [ ] [ ] , int R , in public static int minInitialPoints ( int points [ ] [ ] ) {	  script_not_found : None
  int dp [ R ] [ C ] ;					      	int dp [ ] [ ] = new int [ R ] [ C ] ;			      int dp [ ] [ ] = new int [ R ] [ C ] ;			  
  int m = R , n = C ;					      	int m = R , n = C ;					      int m = R , n = C ;					  
  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 	dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1   dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 
  for ( int i = m - 2 ;					      	for ( int i = m - 2 ;					      for ( int i = m - 2 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] -  	i -- ) dp [ i ] [ n - 1 ] = Math . max ( dp [ i + 1 ] [ n -   i -- ) {							  
  for ( int j = n - 2 ;					      	for ( int j = n - 2 ;					    	dp [ i ] [ n - 1 ] = Math . max ( dp [ i + 1 ] [ n - 1 ]  
  j >= 0 ;						      	j >= 0 ;						      }								  
  j -- ) dp [ m - 1 ] [ j ] = max ( dp [ m - 1 ] [ j + 1 ] -  	j -- ) dp [ m - 1 ] [ j ] = Math . max ( dp [ m - 1 ] [ j +   for ( int j = n - 2 ;					  
  for ( int i = m - 2 ;					      	for ( int i = m - 2 ;					      j >= 0 ;							  
  i >= 0 ;						      	i >= 0 ;						      j -- ) {							  
  i -- ) {						      	i -- ) {						    	dp [ m - 1 ] [ j ] = Math . max ( dp [ m - 1 ] [ j + 1 ]  
    for ( int j = n - 2 ;				      	  for ( int j = n - 2 ;					      }								  
    j >= 0 ;						      	  j >= 0 ;						      for ( int i = m - 2 ;					  
    j -- ) {						      	  j -- ) {						      i >= 0 ;							  
      int min_points_on_exit = min ( dp [ i + 1 ] [ j ] , dp  	    int min_points_on_exit = Math . min ( dp [ i + 1 ] [ j    i -- ) {							  
      dp [ i ] [ j ] = max ( min_points_on_exit - points [ i  	    dp [ i ] [ j ] = Math . max ( min_points_on_exit - poin 	for ( int j = n - 2 ;					  
    }							      	  }							    	j >= 0 ;						  
  }							      	}							    	j -- ) {						  
  return dp [ 0 ] [ 0 ] ;				      	return dp [ 0 ] [ 0 ] ;					    	  int minPointsOnExit = Math . min ( dp [ i + 1 ] [ j ] , 
}							      }								    	  dp [ i ] [ j ] = Math . max ( minPointsOnExit - points  
							      								    	}							  
							      								      }								  
							      								      return dp [ 0 ] [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	      FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	    FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS	  FIND_SMALLEST_RANGE_CONTAINING_ELEMENTS_FROM_K_LISTS
--							      --							    --								  --
void findSmallestRange ( int arr [ ] [ N ] , int n , int k )  static void findSmallestRange ( int arr [ ] [ ] , int n , int public static void findSmallestRange ( int arr [ ] [ ] , int  script_not_found : None
  int i , minval , maxval , minrange , minel , maxel , flag , 	int i , minval , maxval , minrange , minel = 0 , maxel = 0    int i , minval , maxval , minrange , minel , maxel , flag , 
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i <= k ;						      	i <= k ;						      i <= k ;							  
  i ++ ) ptr [ i ] = 0 ;				      	i ++ ) {						      i ++ ) {							  
  minrange = INT_MAX ;					      	  ptr [ i ] = 0 ;					    	ptr [ i ] = 0 ;						  
  while ( 1 ) {						      	}							      }								  
    minind = - 1 ;					      	minrange = Integer . MAX_VALUE ;			      minrange = Integer . MAX_VALUE ;				  
    minval = INT_MAX ;					      	while ( true ) {					      while ( 1 ) {						  
    maxval = INT_MIN ;					      	  minind = - 1 ;					    	minind = - 1 ;						  
    flag = 0 ;						      	  minval = Integer . MAX_VALUE ;			    	minval = Integer . MAX_VALUE ;				  
    for ( i = 0 ;					      	  maxval = Integer . MIN_VALUE ;			    	maxval = Integer . MIN_VALUE ;				  
    i < k ;						      	  flag = 0 ;						    	flag = 0 ;						  
    i ++ ) {						      	  for ( i = 0 ;						    	for ( i = 0 ;						  
      if ( ptr [ i ] == n ) {				      	  i < k ;						    	i < k ;							  
	flag = 1 ;					      	  i ++ ) {						    	i ++ ) {						  
	break ;						      	    if ( ptr [ i ] == n ) {				    	  if ( ptr [ i ] == n ) {				  
      }							      	      flag = 1 ;					    	    flag = 1 ;						  
      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval  	      break ;						    	    break ;						  
	minind = i ;					      	    }							    	  }							  
	minval = arr [ i ] [ ptr [ i ] ] ;		      	    if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval  	  if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval  
      }							      	      minind = i ;					    	    minind = i ;					  
      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval  	      minval = arr [ i ] [ ptr [ i ] ] ;		    	    minval = arr [ i ] [ ptr [ i ] ] ;			  
	maxval = arr [ i ] [ ptr [ i ] ] ;		      	    }							    	  }							  
      }							      	    if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval  	  if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval  
    }							      	      maxval = arr [ i ] [ ptr [ i ] ] ;		    	    maxval = arr [ i ] [ ptr [ i ] ] ;			  
    if ( flag ) break ;					      	    }							    	  }							  
    ptr [ minind ] ++ ;					      	  }							    	}							  
    if ( ( maxval - minval ) < minrange ) {		      	  if ( flag == 1 ) {					    	if ( flag ) {						  
      minel = minval ;					      	    break ;						    	  break ;						  
      maxel = maxval ;					      	  }							    	}							  
      minrange = maxel - minel ;			      	  ptr [ minind ] ++ ;					    	ptr [ minind ] ++ ;					  
    }							      	  if ( ( maxval - minval ) < minrange ) {		    	if ( ( maxval - minval ) < minrange ) {			  
  }							      	    minel = minval ;					    	  minel = minval ;					  
  printf ( "The smallest range is [%d , %d]\n" , minel , maxe 	    maxel = maxval ;					    	  maxel = maxval ;					  
}							      	    minrange = maxel - minel ;				    	  minrange = maxel - minel ;				  
							      	  }							    	}							  
							      	}							      }								  
							      	System . out . printf ( "The smallest range is [%d , %d]\n"   System . out . println ( "The smallest range is [" + minel  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS	      REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS	    REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS	  REMOVE_BRACKETS_ALGEBRAIC_STRING_CONTAINING_OPERATORS
--							      --							    --								  --
char * simplify ( string str ) {			      static String simplify ( String str ) {			    public static String simplify ( String str ) {		  success : None
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  
  char * res = new char ( len ) ;			      	char res [ ] = new char [ len ] ;			      char [ ] res = new char [ len ] ;				  
  int index = 0 , i = 0 ;				      	int index = 0 , i = 0 ;					      int index = 0 , i = 0 ;					  
  stack < int > s ;					      	Stack < Integer > s = new Stack < Integer > ( ) ;	      Stack < Integer > s = new Stack < > ( ) ;			  
  s . push ( 0 ) ;					      	s . push ( 0 ) ;					      s . push ( 0 ) ;						  
  while ( i < len ) {					      	while ( i < len ) {					      while ( i < len ) {					  
    if ( str [ i ] == '+' ) {				      	  if ( str . charAt ( i ) == '+' ) {			    	if ( str . charAt ( i ) == '+' ) {			  
      if ( s . top ( ) == 1 ) res [ index ++ ] = '-' ;	      	    if ( s . peek ( ) == 1 ) res [ index ++ ] = '-' ;	    	  if ( s . peek ( ) == 1 ) {				  
      if ( s . top ( ) == 0 ) res [ index ++ ] = '+' ;	      	    if ( s . peek ( ) == 0 ) res [ index ++ ] = '+' ;	    	    res [ index ++ ] = '-' ;				  
    }							      	  }							    	  }							  
    else if ( str [ i ] == '-' ) {			      	  else if ( str . charAt ( i ) == '-' ) {		    	  if ( s . peek ( ) == 0 ) {				  
      if ( s . top ( ) == 1 ) res [ index ++ ] = '+' ;	      	    if ( s . peek ( ) == 1 ) res [ index ++ ] = '+' ;	    	    res [ index ++ ] = '+' ;				  
      else if ( s . top ( ) == 0 ) res [ index ++ ] = '-' ;   	    else if ( s . peek ( ) == 0 ) res [ index ++ ] = '-' ;  	  }							  
    }							      	  }							    	}							  
    else if ( str [ i ] == '(' && i > 0 ) {		      	  else if ( str . charAt ( i ) == '(' && i > 0 ) {	    	else if ( str . charAt ( i ) == '-' ) {			  
      if ( str [ i - 1 ] == '-' ) {			      	    if ( str . charAt ( i - 1 ) == '-' ) {		    	  if ( s . peek ( ) == 1 ) {				  
	int x = ( s . top ( ) == 1 ) ? 0 : 1 ;		      	      int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;		    	    res [ index ++ ] = '+' ;				  
	s . push ( x ) ;				      	      s . push ( x ) ;					    	  }							  
      }							      	    }							    	  else if ( s . peek ( ) == 0 ) {			  
      else if ( str [ i - 1 ] == '+' ) s . push ( s . top ( ) 	    else if ( str . charAt ( i - 1 ) == '+' ) s . push ( s  	    res [ index ++ ] = '-' ;				  
    }							      	  }							    	  }							  
    else if ( str [ i ] == ')' ) s . pop ( ) ;		      	  else if ( str . charAt ( i ) == ')' ) s . pop ( ) ;	    	}							  
    else res [ index ++ ] = str [ i ] ;			      	  else res [ index ++ ] = str . charAt ( i ) ;		    	else if ( str . charAt ( i ) == '(' && i > 0 ) {	  
    i ++ ;						      	  i ++ ;						    	  if ( str . charAt ( i - 1 ) == '-' ) {		  
  }							      	}							    	    int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;		  
  return res ;						      	return new String ( res ) ;				    	    s . push ( x ) ;					  
}							      }								    	  }							  
							      								    	  else if ( str . charAt ( i - 1 ) == '+' ) {		  
							      								    	    s . push ( s . pop ( ) ) ;				  
							      								    	  }							  
							      								    	}							  
							      								    	else if ( str . charAt ( i ) == ')' ) {			  
							      								    	  s . pop ( ) ;						  
							      								    	}							  
							      								    	else {							  
							      								    	  res [ index ++ ] = str . charAt ( i ) ;		  
							      								    	}							  
							      								    	i ++ ;							  
							      								      }								  
							      								      return new String ( res ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION		      MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION		    MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION			  MAXIMUM_MINIMUM_VALUES_ALGEBRAIC_EXPRESSION
--							      --							    --								  --
e9 int minMaxValues ( int arr [ ] , int n , int m ) {	      static void minMaxValues ( int [ ] arr , int n , int m ) {    public static int e9 ( int arr [ ] , int n , int m ) {	  script_not_found : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < ( n + m ) ;					      	i < ( n + m ) ;						      i < ( n + m ) ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    sum += arr [ i ] ;					      	  sum += arr [ i ] ;					    	sum += arr [ i ] ;					  
    arr [ i ] += 50 ;					      	  arr [ i ] += 50 ;					    	arr [ i ] += 50 ;					  
  }							      	}							      }								  
  bool dp [ MAX + 1 ] [ MAX * MAX + 1 ] ;		      	boolean dp [ ] [ ] = new boolean [ MAX + 1 ] [ MAX * MAX +    boolean dp [ ] [ ] = new boolean [ MAX + 1 ] [ MAX * MAX +  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	dp [ 0 ] [ 0 ] = true ;					      Arrays . fill ( dp , false ) ;				  
  dp [ 0 ] [ 0 ] = 1 ;					      	for ( int i = 0 ;					      dp [ 0 ] [ 0 ] = 1 ;					  
  for ( int i = 0 ;					      	i < ( n + m ) ;						      for ( int i = 0 ;						  
  i < ( n + m ) ;					      	i ++ ) {						      i < ( n + m ) ;						  
  i ++ ) {						      	  for ( int k = Math . min ( n , i + 1 ) ;		      i ++ ) {							  
    for ( int k = min ( n , i + 1 ) ;			      	  k >= 1 ;						    	for ( int k = Math . min ( n , i + 1 ) ;		  
    k >= 1 ;						      	  k -- ) {						    	k >= 1 ;						  
    k -- ) {						      	    for ( int j = 0 ;					    	k -- ) {						  
      for ( int j = 0 ;					      	    j < MAX * MAX + 1 ;					    	  for ( int j = 0 ;					  
      j < MAX * MAX + 1 ;				      	    j ++ ) {						    	  j < MAX * MAX + 1 ;					  
      j ++ ) {						      	      if ( dp [ k - 1 ] [ j ] ) dp [ k ] [ j + arr [ i ] ]  	  j ++ ) {						  
	if ( dp [ k - 1 ] [ j ] ) dp [ k ] [ j + arr [ i ] ]  	    }							    	    if ( dp [ k - 1 ] [ j ] ) {				  
      }							      	  }							    	      dp [ k ] [ j + arr [ i ] ] = 1 ;			  
    }							      	}							    	    }							  
  }							      	double max_value = - 1 * INF , min_value = INF ;	    	  }							  
  int max_value = - INF , min_value = INF ;		      	for ( int i = 0 ;					    	}							  
  for ( int i = 0 ;					      	i < MAX * MAX + 1 ;					      }								  
  i < MAX * MAX + 1 ;					      	i ++ ) {						      int maxValue = - INF , minValue = INF ;			  
  i ++ ) {						      	  if ( dp [ n ] [ i ] ) {				      for ( int i = 0 ;						  
    if ( dp [ n ] [ i ] ) {				      	    int temp = i - 50 * n ;				      i < MAX * MAX + 1 ;					  
      int temp = i - 50 * n ;				      	    max_value = Math . max ( max_value , temp * ( sum - tem   i ++ ) {							  
      max_value = max ( max_value , temp * ( sum - temp ) ) ; 	    min_value = Math . min ( min_value , temp * ( sum - tem 	if ( dp [ n ] [ i ] ) {					  
      min_value = min ( min_value , temp * ( sum - temp ) ) ; 	  }							    	  int temp = i - 50 * n ;				  
    }							      	}							    	  maxValue = Math . max ( maxValue , temp * ( sum - temp  
  }							      	System . out . print ( "Maximum Value: " + ( int ) max_valu 	  minValue = Math . min ( minValue , temp * ( sum - temp  
  cout << "Maximum Value: " << max_value << "\n" << "Minimum  }								    	}							  
}							      								      }								  
							      								      System . out . println ( "Maximum Value: " + maxValue + "\n 
							      								      return maxValue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING	      DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING	    DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING		  DYNAMIC_PROGRAMMING_SET_17_PALINDROME_PARTITIONING
--							      --							    --								  --
int minPalPartion ( char * str ) {			      static int minPalPartion ( String str ) {			    public static int minPalPartion ( String str ) {		  success : None
  int n = strlen ( str ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int C [ n ] [ n ] ;					      	int [ ] [ ] C = new int [ n ] [ n ] ;			      int [ ] [ ] C = new int [ n ] [ n ] ;			  
  bool P [ n ] [ n ] ;					      	boolean [ ] [ ] P = new boolean [ n ] [ n ] ;		      boolean [ ] [ ] P = new boolean [ n ] [ n ] ;		  
  int i , j , k , L ;					      	int i , j , k , L ;					      int i , j , k , L ;					  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    P [ i ] [ i ] = true ;				      	  P [ i ] [ i ] = true ;				    	P [ i ] [ i ] = true ;					  
    C [ i ] [ i ] = 0 ;					      	  C [ i ] [ i ] = 0 ;					    	C [ i ] [ i ] = 0 ;					  
  }							      	}							      }								  
  for ( L = 2 ;						      	for ( L = 2 ;						      for ( L = 2 ;						  
  L <= n ;						      	L <= n ;						      L <= n ;							  
  L ++ ) {						      	L ++ ) {						      L ++ ) {							  
    for ( i = 0 ;					      	  for ( i = 0 ;						    	for ( i = 0 ;						  
    i < n - L + 1 ;					      	  i < n - L + 1 ;					    	i < n - L + 1 ;						  
    i ++ ) {						      	  i ++ ) {						    	i ++ ) {						  
      j = i + L - 1 ;					      	    j = i + L - 1 ;					    	  j = i + L - 1 ;					  
      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ]  	    if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == s 	  if ( L == 2 ) {					  
      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [  	    else P [ i ] [ j ] = ( str . charAt ( i ) == str . char 	    P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt  
      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ;	      	    if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ;	    	  }							  
      else {						      	    else {						    	  else {						  
	C [ i ] [ j ] = INT_MAX ;			      	      C [ i ] [ j ] = Integer . MAX_VALUE ;		    	    P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt  
	for ( k = i ;					      	      for ( k = i ;					    	  }							  
	k <= j - 1 ;					      	      k <= j - 1 ;					    	  if ( P [ i ] [ j ] == true ) {			  
	k ++ ) C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ]  	      k ++ ) C [ i ] [ j ] = Integer . min ( C [ i ] [ j ]  	    C [ i ] [ j ] = 0 ;					  
      }							      	    }							    	  }							  
    }							      	  }							    	  else {						  
  }							      	}							    	    C [ i ] [ j ] = Integer . MAX_VALUE ;		  
  return C [ 0 ] [ n - 1 ] ;				      	return C [ 0 ] [ n - 1 ] ;				    	    for ( k = i ;					  
}							      }								    	    k <= j - 1 ;					  
							      								    	    k ++ ) {						  
							      								    	      C [ i ] [ j ] = Math . min ( C [ i ] [ j ] , C [ i  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return C [ 0 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRUFER_CODE_TREE_CREATION				      PRUFER_CODE_TREE_CREATION					    PRUFER_CODE_TREE_CREATION					  PRUFER_CODE_TREE_CREATION
--							      --							    --								  --
void printTreeEdges ( int prufer [ ] , int m ) {	      static void printTreeEdges ( int prufer [ ] , int m ) {	    public static void printTreeEdges ( int prufer [ ] , int m )  script_not_found : None
  int vertices = m + 2 ;				      	int vertices = m + 2 ;					      int vertices = m + 2 ;					  
  int vertex_set [ vertices ] ;				      	int vertex_set [ ] = new int [ vertices ] ;		      int [ ] vertex_set = new int [ vertices ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < vertices ;					      	i < vertices ;						      i < vertices ;						  
  i ++ ) vertex_set [ i ] = 0 ;				      	i ++ ) vertex_set [ i ] = 0 ;				      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	vertex_set [ i ] = 0 ;					  
  i < vertices - 2 ;					      	i < vertices - 2 ;					      }								  
  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1 ;		      	i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1 ;		      for ( int i = 0 ;						  
  cout << "\nThe edge set E(G) is :\n" ;		      	System . out . print ( "\nThe edge set E(G) is :\n" ) ;	      i < vertices - 2 ;					  
  int j = 0 ;						      	int j = 0 ;						      i ++ ) {							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	vertex_set [ prufer [ i ] - 1 ] += 1 ;			  
  i < vertices - 2 ;					      	i < vertices - 2 ;					      }								  
  i ++ ) {						      	i ++ ) {						      System . out . println ( "\nThe edge set E(G) is :\n" ) ;	  
    for ( j = 0 ;					      	  for ( j = 0 ;						      int j = 0 ;						  
    j < vertices ;					      	  j < vertices ;					      for ( int i = 0 ;						  
    j ++ ) {						      	  j ++ ) {						      i < vertices - 2 ;					  
      if ( vertex_set [ j ] == 0 ) {			      	    if ( vertex_set [ j ] == 0 ) {			      i ++ ) {							  
	vertex_set [ j ] = - 1 ;			      	      vertex_set [ j ] = - 1 ;				    	for ( j = 0 ;						  
	cout << "(" << ( j + 1 ) << ", " << prufer [ i ] << " 	      System . out . print ( "(" + ( j + 1 ) + ", " + prufe 	j < vertices ;						  
	vertex_set [ prufer [ i ] - 1 ] -- ;		      	      vertex_set [ prufer [ i ] - 1 ] -- ;		    	j ++ ) {						  
	break ;						      	      break ;						    	  if ( vertex_set [ j ] == 0 ) {			  
      }							      	    }							    	    vertex_set [ j ] = - 1 ;				  
    }							      	  }							    	    System . out . print ( "(" + ( j + 1 ) + ", " + prufe 
  }							      	}							    	    vertex_set [ prufer [ i ] - 1 ] -- ;		  
  j = 0 ;						      	j = 0 ;							    	    break ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	  }							  
  i < vertices ;					      	i < vertices ;						    	}							  
  i ++ ) {						      	i ++ ) {						      }								  
    if ( vertex_set [ i ] == 0 && j == 0 ) {		      	  if ( vertex_set [ i ] == 0 && j == 0 ) {		      j = 0 ;							  
      cout << "(" << ( i + 1 ) << ", " ;		      	    System . out . print ( "(" + ( i + 1 ) + ", " ) ;	      for ( int i = 0 ;						  
      j ++ ;						      	    j ++ ;						      i < vertices ;						  
    }							      	  }							      i ++ ) {							  
    else if ( vertex_set [ i ] == 0 && j == 1 ) cout << ( i + 	  else if ( vertex_set [ i ] == 0 && j == 1 ) System . out  	if ( vertex_set [ i ] == 0 && j == 0 ) {		  
  }							      	}							    	  System . out . print ( "(" + ( i + 1 ) + ", " ) ;	  
}							      }								    	  j ++ ;						  
							      								    	}							  
							      								    	else if ( vertex_set [ i ] == 0 && j == 1 ) {		  
							      								    	  System . out . print ( ( i + 1 ) + ")\n" ) ;		  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS		      MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS			    MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS			  MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS
--							      --							    --								  --
string maximumPalinUsingKChanges ( string str , int k ) {     static String maximumPalinUsingKChanges ( String str , int k  public static String maximumPalinUsingKChanges ( String str , error : MAKE_LARGEST_PALINDROME_CHANGING_K_DIGITS.
  string palin = str ;					      	char palin [ ] = str . toCharArray ( ) ;		      char [ ] palin = str . toCharArray ( ) ;			  java:63: error: incompatible types: possible lossy
  int l = 0 ;						      	String ans = "" ;					      int l = 0 ;						   conversion from int to char	     palin [ l ] = p
  int r = str . length ( ) - 1 ;			      	int l = 0 ;						      int r = str . length ( ) - 1 ;				  alin [ r ] = Math . max ( str . charAt ( l ) , str
  while ( l < r ) {					      	int r = str . length ( ) - 1 ;				      while ( l < r ) {						   . charAt ( r ) ) ;
    if ( str [ l ] != str [ r ] ) {			      	while ( l < r ) {					    	if ( str . charAt ( l ) != str . charAt ( r ) ) {	  		 ^ 1 error
      palin [ l ] = palin [ r ] = max ( str [ l ] , str [ r ] 	  if ( str . charAt ( l ) != str . charAt ( r ) ) {	    	  palin [ l ] = palin [ r ] = Math . max ( str . charAt ( 
      k -- ;						      	    palin [ l ] = palin [ r ] = ( char ) Math . max ( str . 	  k -- ;						  
    }							      	    k -- ;						    	}							  
    l ++ ;						      	  }							    	l ++ ;							  
    r -- ;						      	  l ++ ;						    	r -- ;							  
  }							      	  r -- ;						      }								  
  if ( k < 0 ) return "Not possible" ;			      	}							      if ( k < 0 ) return "Not possible" ;			  
  l = 0 ;						      	if ( k < 0 ) {						      l = 0 ;							  
  r = str . length ( ) - 1 ;				      	  return "Not possible" ;				      r = str . length ( ) - 1 ;				  
  while ( l <= r ) {					      	}							      while ( l <= r ) {					  
    if ( l == r ) {					      	l = 0 ;							    	if ( l == r ) {						  
      if ( k > 0 ) palin [ l ] = '9' ;			      	r = str . length ( ) - 1 ;				    	  if ( k > 0 ) {					  
    }							      	while ( l <= r ) {					    	    palin [ l ] = '9' ;					  
    if ( palin [ l ] < '9' ) {				      	  if ( l == r ) {					    	  }							  
      if ( k >= 2 && palin [ l ] == str [ l ] && palin [ r ]  	    if ( k > 0 ) {					    	}							  
	k -= 2 ;					      	      palin [ l ] = '9' ;				    	if ( palin [ l ] < '9' ) {				  
	palin [ l ] = palin [ r ] = '9' ;		      	    }							    	  if ( k >= 2 && palin [ l ] == str . charAt ( l ) && pal 
      }							      	  }							    	    k -= 2 ;						  
      else if ( k >= 1 && ( palin [ l ] != str [ l ] || palin 	  if ( palin [ l ] < '9' ) {				    	    palin [ l ] = palin [ r ] = '9' ;			  
	k -- ;						      	    if ( k >= 2 && palin [ l ] == str . charAt ( l ) && pal 	  }							  
	palin [ l ] = palin [ r ] = '9' ;		      	      k -= 2 ;						    	  else if ( k >= 1 && ( palin [ l ] != str . charAt ( l ) 
      }							      	      palin [ l ] = palin [ r ] = '9' ;			    	    k -- ;						  
    }							      	    }							    	    palin [ l ] = palin [ r ] = '9' ;			  
    l ++ ;						      	    else if ( k >= 1 && ( palin [ l ] != str . charAt ( l ) 	  }							  
    r -- ;						      	      k -- ;						    	}							  
  }							      	      palin [ l ] = palin [ r ] = '9' ;			    	l ++ ;							  
  return palin ;					      	    }							    	r -- ;							  
}							      	  }							      }								  
							      	  l ++ ;						      return new String ( palin ) ;				  
							      	  r -- ;						    }								  
							      	}							    								  
							      	for ( int i = 0 ;					    								  
							      	i < palin . length ;					    								  
							      	i ++ ) ans += palin [ i ] ;				    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG		      MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG		    MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG			  MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG
--							      --							    --								  --
int MinimumCost ( int cost [ ] , int n , int W ) {	      public static int MinimumCost ( int cost [ ] , int n , int W  public static int minimumCost ( int cost [ ] , int n , int W  error : MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BAG
  vector < int > val , wt ;				      	Vector < Integer > val = new Vector < Integer > ( ) ;	      int val [ ] , wt [ ] ;					  .java:65: error: cannot find symbol	  minCost [
  int size = 0 ;					      	Vector < Integer > wt = new Vector < Integer > ( ) ;	      int size = 0 ;						  0 ] [ i ] = INF ;			      ^	  sy
  for ( int i = 0 ;					      	int size = 0 ;						      for ( int i = 0 ;						  mbol:	  variable INF	 location: class MINIMUM_COS
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  T_TO_FILL_GIVEN_WEIGHT_IN_A_BAG MINIMUM_COST_TO_FI
  i ++ ) {						      	i < n ;							      i ++ ) {							  LL_GIVEN_WEIGHT_IN_A_BAG.java:91: error: cannot fi
    if ( cost [ i ] != - 1 ) {				      	i ++ ) {						    	if ( cost [ i ] != - 1 ) {				  nd symbol   return ( minCost [ n ] [ W ] == INF )
      val . push_back ( cost [ i ] ) ;			      	  if ( cost [ i ] != - 1 ) {				    	  val [ i ] = cost [ i ] ;				  ? - 1 : minCost [ n ] [ W ] ;
      wt . push_back ( i + 1 ) ;			      	    val . add ( cost [ i ] ) ;				    	  wt [ i ] = i + 1 ;					  		^   symbol:   variable INF   locatio
      size ++ ;						      	    wt . add ( i + 1 ) ;				    	  size ++ ;						  n: class MINIMUM_COST_TO_FILL_GIVEN_WEIGHT_IN_A_BA
    }							      	    size ++ ;						    	}							  G 2 errors
  }							      	  }							      }								  
  n = size ;						      	}							      n = size ;						  
  int min_cost [ n + 1 ] [ W + 1 ] ;			      	n = size ;						      int minCost [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;	  
  for ( int i = 0 ;					      	int min_cost [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;	      for ( int i = 0 ;						  
  i <= W ;						      	for ( int i = 0 ;					      i <= W ;							  
  i ++ ) min_cost [ 0 ] [ i ] = INF ;			      	i <= W ;						      i ++ ) {							  
  for ( int i = 1 ;					      	i ++ ) min_cost [ 0 ] [ i ] = Integer . MAX_VALUE ;	    	minCost [ 0 ] [ i ] = INF ;				  
  i <= n ;						      	for ( int i = 1 ;					      }								  
  i ++ ) min_cost [ i ] [ 0 ] = 0 ;			      	i <= n ;						      for ( int i = 1 ;						  
  for ( int i = 1 ;					      	i ++ ) min_cost [ i ] [ 0 ] = 0 ;			      i <= n ;							  
  i <= n ;						      	for ( int i = 1 ;					      i ++ ) {							  
  i ++ ) {						      	i <= n ;						    	minCost [ i ] [ 0 ] = 0 ;				  
    for ( int j = 1 ;					      	i ++ ) {						      }								  
    j <= W ;						      	  for ( int j = 1 ;					      for ( int i = 1 ;						  
    j ++ ) {						      	  j <= W ;						      i <= n ;							  
      if ( wt [ i - 1 ] > j ) min_cost [ i ] [ j ] = min_cost 	  j ++ ) {						      i ++ ) {							  
      else min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [  	    if ( wt . get ( i - 1 ) > j ) min_cost [ i ] [ j ] = mi 	minCost [ i ] [ 0 ] = 0 ;				  
    }							      	    else min_cost [ i ] [ j ] = Math . min ( min_cost [ i -   }								  
  }							      	  }							      for ( int i = 1 ;						  
  return ( min_cost [ n ] [ W ] == INF ) ? - 1 : min_cost [ n 	}							      i <= n ;							  
}							      	return ( min_cost [ n ] [ W ] == Integer . MAX_VALUE ) ? -    i ++ ) {							  
							      }								    	for ( int j = 1 ;					  
							      								    	j <= W ;						  
							      								    	j ++ ) {						  
							      								    	  if ( wt [ i - 1 ] > j ) {				  
							      								    	    minCost [ i ] [ j ] = minCost [ i - 1 ] [ j ] ;	  
							      								    	  }							  
							      								    	  else {						  
							      								    	    minCost [ i ] [ j ] = Math . min ( minCost [ i - 1 ]  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( minCost [ n ] [ W ] == INF ) ? - 1 : minCost [ n ] 
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2	      MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2	    MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2	  MINIMUM_NUMBER_DELETIONS_MAKE_STRING_PALINDROME_SET_2
--							      --							    --								  --
int getLevenstein ( string const & input ) {		      static int getLevenstein ( StringBuilder input ) {	    public static int getLevenstein ( String input ) {		  script_not_found : None
  string revInput ( input . rbegin ( ) , input . rend ( ) ) ; 	StringBuilder revInput = new StringBuilder ( input ) ;	      String revInput = new String ( input . toCharArray ( ) ) ;  
  int n = input . size ( ) ;				      	revInput = revInput . reverse ( ) ;			      int n = input . length ( ) ;				  
  vector < vector < int >> dp ( n + 1 , vector < int > ( n +  	int n = input . length ( ) ;				      int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		      for ( int i = 0 ;						  
  i <= n ;						      	for ( int i = 0 ;					      i <= n ;							  
  ++ i ) {						      	i <= n ;						      ++ i ) {							  
    dp [ 0 ] [ i ] = i ;				      	++ i ) {						    	dp [ 0 ] [ i ] = i ;					  
    dp [ i ] [ 0 ] = i ;				      	  dp [ 0 ] [ i ] = i ;					    	dp [ i ] [ 0 ] = i ;					  
  }							      	  dp [ i ] [ 0 ] = i ;					      }								  
  for ( int i = 1 ;					      	}							      for ( int i = 1 ;						  
  i <= n ;						      	for ( int i = 1 ;					      i <= n ;							  
  ++ i ) {						      	i <= n ;						      ++ i ) {							  
    for ( int j = 1 ;					      	++ i ) {						    	for ( int j = 1 ;					  
    j <= n ;						      	  for ( int j = 1 ;					    	j <= n ;						  
    ++ j ) {						      	  j <= n ;						    	++ j ) {						  
      if ( input [ i - 1 ] == revInput [ j - 1 ] ) dp [ i ] [ 	  ++ j ) {						    	  if ( input . charAt ( i - 1 ) == revInput . charAt ( j  
      else dp [ i ] [ j ] = 1 + min ( {			      	    if ( input . charAt ( i - 1 ) == revInput . charAt ( j  	    dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;		  
	dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] }	      	    else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 	  }							  
	) ;						      	  }							    	  else {						  
      }							      	}							    	    dp [ i ] [ j ] = 1 + Math . min ( new int [ ] {	  
    }							      	int res = Integer . MAX_VALUE ;				    	      dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] }		  
    int res = numeric_limits < int > :: max ( ) ;	      	for ( int i = n , j = 0 ;				    	      ) ;						  
    for ( int i = n , j = 0 ;				      	i >= 0 ;						    	    }							  
    i >= 0 ;						      	i -- , j ++ ) {						    	  }							  
    -- i , ++ j ) {					      	  res = Math . min ( res , dp [ i ] [ j ] ) ;		    	}							  
      res = min ( res , dp [ i ] [ j ] ) ;		      	  if ( i < n ) res = Math . min ( res , dp [ i + 1 ] [ j ]  	int res = Integer . MAX_VALUE ;				  
      if ( i < n ) res = min ( res , dp [ i + 1 ] [ j ] ) ;   	  if ( i > 0 ) res = Math . min ( res , dp [ i - 1 ] [ j ]  	for ( int i = n , j = 0 ;				  
      if ( i > 0 ) res = min ( res , dp [ i - 1 ] [ j ] ) ;   	}							    	i >= 0 ;						  
    }							      	return res ;						    	-- i , ++ j ) {						  
    return res ;					      }								    	  res = Math . min ( res , dp [ i ] [ j ] ) ;		  
  }							      								    	  if ( i < n ) {					  
							      								    	    res = Math . min ( res , dp [ i + 1 ] [ j ] ) ;	  
							      								    	  }							  
							      								    	  if ( i > 0 ) {					  
							      								    	    res = Math . min ( res , dp [ i - 1 ] [ j ] ) ;	  
							      								    	  }							  
							      								    	}							  
							      								    	return res ;						  
							      								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_REPEATED_SUBSEQUENCE_1				      LONGEST_REPEATED_SUBSEQUENCE_1				    LONGEST_REPEATED_SUBSEQUENCE_1				  LONGEST_REPEATED_SUBSEQUENCE_1
--							      --							    --								  --
string longestRepeatedSubSeq ( string str ) {		      static String longestRepeatedSubSeq ( String str ) {	    public static String longestRepeatedSubSeq ( String str ) {	  error : LONGEST_REPEATED_SUBSEQUENCE_1.java:73: er
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  ror: incompatible types: String cannot be converte
  int dp [ n + 1 ] [ n + 1 ] ;				      	int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;		  d to List<?>	 Collections . reverse ( res ) ;
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  			 ^ Note: Some messages have
  i <= n ;						      	i <= n ;						      i <= n ;							  been simplified; recompile with -Xdiags:verbose to
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					   get full output 1 error
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) dp [ i ] [ j ] = 0 ;				      	j ++ ) dp [ i ] [ j ] = 0 ;				      j ++ ) dp [ i ] [ j ] = 0 ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ 	j ++ ) if ( str . charAt ( i - 1 ) == str . charAt ( j - 1    j ++ ) if ( str . charAt ( i - 1 ) == str . charAt ( j - 1  
  else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 	else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp    else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp  
  string res = "" ;					      	String res = "" ;					      String res = "" ;						  
  int i = n , j = n ;					      	int i = n , j = n ;					      int i = n , j = n ;					  
  while ( i > 0 && j > 0 ) {				      	while ( i > 0 && j > 0 ) {				      while ( i > 0 && j > 0 ) {				  
    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {     	  if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {	    	if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {	  
      res = res + str [ i - 1 ] ;			      	    res = res + str . charAt ( i - 1 ) ;		    	  res = res + str . charAt ( i - 1 ) ;			  
      i -- ;						      	    i -- ;						    	  i -- ;						  
      j -- ;						      	    j -- ;						    	  j -- ;						  
    }							      	  }							    	}							  
    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;   	  else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;   	else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;	  
    else j -- ;						      	  else j -- ;						    	else j -- ;						  
  }							      	}							      }								  
  reverse ( res . begin ( ) , res . end ( ) ) ;		      	String reverse = "" ;					      Collections . reverse ( res ) ;				  
  return res ;						      	for ( int k = res . length ( ) - 1 ;			      return res ;						  
}							      	k >= 0 ;						    }								  
							      	k -- ) {						    								  
							      	  reverse = reverse + res . charAt ( k ) ;		    								  
							      	}							    								  
							      	return reverse ;					    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL MINIMUM_CELLS_REQUIRED_REACH_DESTINATION_JUMPS_EQUAL_CELL_VAL
--							      --							    --								  --
int minCells ( int mat [ SIZE ] [ SIZE ] , int m , int n ) {  static int minCells ( int mat [ ] [ ] , int m , int n ) {	    public static int minCells ( int [ ] mat , int m , int n ) {  script_not_found : None
  int dp [ m ] [ n ] ;					      	int dp [ ] [ ] = new int [ m ] [ n ] ;			      int [ ] [ ] dp = new int [ m ] [ n ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) dp [ i ] [ j ] = INT_MAX ;			      	j ++ ) dp [ i ] [ j ] = Integer . MAX_VALUE ;		      j ++ ) dp [ i ] [ j ] = Integer . MAX_VALUE ;		  
  dp [ 0 ] [ 0 ] = 1 ;					      	dp [ 0 ] [ 0 ] = 1 ;					      dp [ 0 ] [ 0 ] = 1 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m ;						      	i < m ;							      i < m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( dp [ i ] [ j ] != INT_MAX && ( j + mat [ i ] [ j ] 	    if ( dp [ i ] [ j ] != Integer . MAX_VALUE && ( j + mat 	  if ( dp [ i ] [ j ] != Integer . MAX_VALUE && ( j + mat 
      if ( dp [ i ] [ j ] != INT_MAX && ( i + mat [ i ] [ j ] 	    if ( dp [ i ] [ j ] != Integer . MAX_VALUE && ( i + mat 	  if ( dp [ i ] [ j ] != Integer . MAX_VALUE && ( i + mat 
    }							      	  }							    	}							  
  }							      	}							      }								  
  if ( dp [ m - 1 ] [ n - 1 ] != INT_MAX ) return dp [ m - 1  	if ( dp [ m - 1 ] [ n - 1 ] != Integer . MAX_VALUE ) return   if ( dp [ m - 1 ] [ n - 1 ] != Integer . MAX_VALUE ) return 
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1     RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1	    RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1	  RETURN_A_PAIR_WITH_MAXIMUM_PRODUCT_IN_ARRAY_OF_INTEGERS_1
--							      --							    --								  --
void maxProduct ( int arr [ ] , int n ) {		      static void maxProduct ( int arr [ ] , int n ) {		    public static void maxProduct ( int arr [ ] , int n ) {	  script_not_found : None
  if ( n < 2 ) {					      	if ( n < 2 ) {						      if ( n < 2 ) {						  
    cout << "No pairs exists\n" ;			      	  System . out . println ( "No pairs exists" ) ;	    	System . out . println ( "No pairs exists" ) ;		  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( n == 2 ) {					      	if ( n == 2 ) {						      if ( n == 2 ) {						  
    cout << arr [ 0 ] << " " << arr [ 1 ] << endl ;	      	  System . out . println ( arr [ 0 ] + " " + arr [ 1 ] ) ;  	System . out . println ( arr [ 0 ] + " " + arr [ 1 ] ) ;  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  int posa = INT_MIN , posb = INT_MIN ;			      	int posa = Integer . MIN_VALUE , posb = Integer . MIN_VALUE   int posa = Integer . MIN_VALUE , posb = Integer . MIN_VALUE 
  int nega = INT_MIN , negb = INT_MIN ;			      	int nega = Integer . MIN_VALUE , negb = Integer . MIN_VALUE   int nega = Integer . MIN_VALUE , negb = Integer . MIN_VALUE 
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] > posa ) {				      	  if ( arr [ i ] > posa ) {				    	if ( arr [ i ] > posa ) {				  
      posb = posa ;					      	    posb = posa ;					    	  posb = posa ;						  
      posa = arr [ i ] ;				      	    posa = arr [ i ] ;					    	  posa = arr [ i ] ;					  
    }							      	  }							    	}							  
    else if ( arr [ i ] > posb ) posb = arr [ i ] ;	      	  else if ( arr [ i ] > posb ) posb = arr [ i ] ;	    	else if ( arr [ i ] > posb ) {				  
    if ( arr [ i ] < 0 && abs ( arr [ i ] ) > abs ( nega ) )  	  if ( arr [ i ] < 0 && Math . abs ( arr [ i ] ) > Math . a 	  posb = arr [ i ] ;					  
      negb = nega ;					      	    negb = nega ;					    	}							  
      nega = arr [ i ] ;				      	    nega = arr [ i ] ;					    	if ( arr [ i ] < 0 && Math . abs ( arr [ i ] ) > Math . a 
    }							      	  }							    	  negb = nega ;						  
    else if ( arr [ i ] < 0 && abs ( arr [ i ] ) > abs ( negb 	  else if ( arr [ i ] < 0 && Math . abs ( arr [ i ] ) > Mat 	  nega = arr [ i ] ;					  
  }							      	}							    	}							  
  if ( nega * negb > posa * posb ) cout << "Max product pair  	if ( nega * negb > posa * posb ) System . out . println ( " 	else if ( arr [ i ] < 0 && Math . abs ( arr [ i ] ) > Mat 
  else cout << "Max product pair is {" << posa << ", " << pos 	else System . out . println ( "Max product pair is {" + pos 	  negb = arr [ i ] ;					  
}							      }								    	}							  
							      								      }								  
							      								      if ( nega * negb > posa * posb ) {			  
							      								    	System . out . println ( "Max product pair is {" + nega + 
							      								      }								  
							      								      else {							  
							      								    	System . out . println ( "Max product pair is {" + posa + 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PALINDROME_SUB_STRINGS_STRING			      COUNT_PALINDROME_SUB_STRINGS_STRING			    COUNT_PALINDROME_SUB_STRINGS_STRING				  COUNT_PALINDROME_SUB_STRINGS_STRING
--							      --							    --								  --
int CountPS ( char str [ ] , int n ) {			      static int CountPS ( char str [ ] , int n ) {		    public static int CountPS ( char str [ ] , int n ) {	  error : Exception in thread "main" java.lang.Array
  int dp [ n ] [ n ] ;					      	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int dp [ ] [ ] = new int [ n ] [ n ] ;			  StoreException: java.lang.Integer 	at java.base/ja
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	boolean P [ ] [ ] = new boolean [ n ] [ n ] ;		      Arrays . fill ( dp , 0 ) ;				  va.util.Arrays.fill(Arrays.java:3638) 	at COUNT_PA
  bool P [ n ] [ n ] ;					      	for ( int i = 0 ;					      boolean P [ ] [ ] = new boolean [ n ] [ n ] ;		  LINDROME_SUB_STRINGS_STRING.f_filled(COUNT_PALINDR
  memset ( P , false , sizeof ( P ) ) ;			      	i < n ;							      Arrays . fill ( P , false ) ;				  OME_SUB_STRINGS_STRING.java:45) 	at COUNT_PALINDRO
  for ( int i = 0 ;					      	i ++ ) P [ i ] [ i ] = true ;				      for ( int i = 0 ;						  ME_SUB_STRINGS_STRING.main(COUNT_PALINDROME_SUB_ST
  i < n ;						      	for ( int i = 0 ;					      i < n ;							  RINGS_STRING.java:109)
  i ++ ) P [ i ] [ i ] = true ;				      	i < n - 1 ;						      i ++ ) {							  
  for ( int i = 0 ;					      	i ++ ) {						    	P [ i ] [ i ] = true ;					  
  i < n - 1 ;						      	  if ( str [ i ] == str [ i + 1 ] ) {			      }								  
  i ++ ) {						      	    P [ i ] [ i + 1 ] = true ;				      for ( int i = 0 ;						  
    if ( str [ i ] == str [ i + 1 ] ) {			      	    dp [ i ] [ i + 1 ] = 1 ;				      i < n - 1 ;						  
      P [ i ] [ i + 1 ] = true ;			      	  }							      i ++ ) {							  
      dp [ i ] [ i + 1 ] = 1 ;				      	}							    	if ( str [ i ] == str [ i + 1 ] ) {			  
    }							      	for ( int gap = 2 ;					    	  P [ i ] [ i + 1 ] = true ;				  
  }							      	gap < n ;						    	  dp [ i ] [ i + 1 ] = 1 ;				  
  for ( int gap = 2 ;					      	gap ++ ) {						    	}							  
  gap < n ;						      	  for ( int i = 0 ;					      }								  
  gap ++ ) {						      	  i < n - gap ;						      for ( int gap = 2 ;					  
    for ( int i = 0 ;					      	  i ++ ) {						      gap < n ;							  
    i < n - gap ;					      	    int j = gap + i ;					      gap ++ ) {						  
    i ++ ) {						      	    if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] )  	for ( int i = 0 ;					  
      int j = gap + i ;					      	    if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ]  	i < n - gap ;						  
      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] )  	    else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] 	i ++ ) {						  
      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ]  	  }							    	  int j = gap + i ;					  
      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] 	}							    	  if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] )  
    }							      	return dp [ 0 ] [ n - 1 ] ;				    	    P [ i ] [ j ] = true ;				  
  }							      }								    	  }							  
  return dp [ 0 ] [ n - 1 ] ;				      								    	  if ( P [ i ] [ j ] == true ) {			  
}							      								    	    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [  
							      								    	  }							  
							      								    	  else {						  
							      								    	    dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return dp [ 0 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL FIND_THE_LARGEST_RECTANGLE_OF_1S_WITH_SWAPPING_OF_COLUMNS_ALL
--							      --							    --								  --
int maxArea ( bool mat [ R ] [ C ] ) {			      static int maxArea ( int mat [ ] [ ] ) {			    public static int maxArea ( boolean [ ] mat ) {		  script_not_found : None
  int hist [ R + 1 ] [ C + 1 ] ;			      	int hist [ ] [ ] = new int [ R + 1 ] [ C + 1 ] ;	      int [ ] [ ] hist = new int [ R + 1 ] [ C + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < C ;						      	i < C ;							      i < C ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ;		      	  hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ;			    	hist [ 0 ] [ i ] = mat [ 0 ] [ i ] ;			  
    for ( int j = 1 ;					      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
    j < R ;						      	  j < R ;						    	j < R ;							  
    j ++ ) hist [ j ] [ i ] = ( mat [ j ] [ i ] == 0 ) ? 0 :  	  j ++ ) {						    	j ++ ) {						  
  }							      	    hist [ j ] [ i ] = ( mat [ j ] [ i ] == 0 ) ? 0 : hist  	  hist [ j ] [ i ] = ( mat [ j ] [ i ] == 0 ) ? 0 : hist  
  for ( int i = 0 ;					      	  }							    	}							  
  i < R ;						      	}							      }								  
  i ++ ) {						      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    int count [ R + 1 ] = {				      	i < R ;							      i < R ;							  
      0 }						      	i ++ ) {						      i ++ ) {							  
      ;							      	  int count [ ] = new int [ R + 1 ] ;			    	int [ ] count = new int [ R + 1 ] ;			  
      for ( int j = 0 ;					      	  for ( int j = 0 ;					    	count [ 0 ] = 0 ;					  
      j < C ;						      	  j < C ;						    	for ( int j = 0 ;					  
      j ++ ) count [ hist [ i ] [ j ] ] ++ ;		      	  j ++ ) {						    	j < C ;							  
      int col_no = 0 ;					      	    count [ hist [ i ] [ j ] ] ++ ;			    	j ++ ) {						  
      for ( int j = R ;					      	  }							    	  count [ hist [ i ] [ j ] ] ++ ;			  
      j >= 0 ;						      	  int col_no = 0 ;					    	}							  
      j -- ) {						      	  for ( int j = R ;					    	int colNo = 0 ;						  
	if ( count [ j ] > 0 ) {			      	  j >= 0 ;						    	for ( int j = R ;					  
	  for ( int k = 0 ;				      	  j -- ) {						    	j >= 0 ;						  
	  k < count [ j ] ;				      	    if ( count [ j ] > 0 ) {				    	j -- ) {						  
	  k ++ ) {					      	      for ( int k = 0 ;					    	  if ( count [ j ] > 0 ) {				  
	    hist [ i ] [ col_no ] = j ;			      	      k < count [ j ] ;					    	    for ( int k = 0 ;					  
	    col_no ++ ;					      	      k ++ ) {						    	    k < count [ j ] ;					  
	  }						      		hist [ i ] [ col_no ] = j ;			    	    k ++ ) {						  
	}						      		col_no ++ ;					    	      hist [ i ] [ colNo ] = j ;			  
      }							      	      }							    	      colNo ++ ;					  
    }							      	    }							    	    }							  
    int curr_area , max_area = 0 ;			      	  }							    	  }							  
    for ( int i = 0 ;					      	}							    	}							  
    i < R ;						      	int curr_area , max_area = 0 ;				    	int currArea = 0 , maxArea = 0 ;			  
    i ++ ) {						      	for ( int i = 0 ;					    	for ( int i = 0 ;					  
      for ( int j = 0 ;					      	i < R ;							    	i < R ;							  
      j < C ;						      	i ++ ) {						    	i ++ ) {						  
      j ++ ) {						      	  for ( int j = 0 ;					    	  for ( int j = 0 ;					  
	curr_area = ( j + 1 ) * hist [ i ] [ j ] ;	      	  j < C ;						    	  j < C ;						  
	if ( curr_area > max_area ) max_area = curr_area ;    	  j ++ ) {						    	  j ++ ) {						  
      }							      	    curr_area = ( j + 1 ) * hist [ i ] [ j ] ;		    	    currArea = ( j + 1 ) * hist [ i ] [ j ] ;		  
    }							      	    if ( curr_area > max_area ) {			    	    if ( currArea > maxArea ) {				  
    return max_area ;					      	      max_area = curr_area ;				    	      maxArea = currArea ;				  
  }							      	    }							    	    }							  
							      	  }							    	  }							  
							      	}							    	}							  
							      	return max_area ;					    	return maxArea ;					  
							      }								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_ELEMENTS					      ROTATE_MATRIX_ELEMENTS					    ROTATE_MATRIX_ELEMENTS					  ROTATE_MATRIX_ELEMENTS
--							      --							    --								  --
void rotatematrix ( int m , int n , int mat [ R ] [ C ] ) {   static void rotatematrix ( int m , int n , int mat [ ] [ ] )  public static void rotatematrix ( int m , int n , int [ ] [ ] script_not_found : None
  int row = 0 , col = 0 ;				      	int row = 0 , col = 0 ;					      int row = 0 , col = 0 ;					  
  int prev , curr ;					      	int prev , curr ;					      int prev , curr ;						  
  while ( row < m && col < n ) {			      	while ( row < m && col < n ) {				      while ( row < m && col < n ) {				  
    if ( row + 1 == m || col + 1 == n ) break ;		      	  if ( row + 1 == m || col + 1 == n ) break ;		    	if ( row + 1 == m || col + 1 == n ) {			  
    prev = mat [ row + 1 ] [ col ] ;			      	  prev = mat [ row + 1 ] [ col ] ;			    	  break ;						  
    for ( int i = col ;					      	  for ( int i = col ;					    	}							  
    i < n ;						      	  i < n ;						    	prev = mat [ row + 1 ] [ col ] ;			  
    i ++ ) {						      	  i ++ ) {						    	for ( int i = col ;					  
      curr = mat [ row ] [ i ] ;			      	    curr = mat [ row ] [ i ] ;				    	i < n ;							  
      mat [ row ] [ i ] = prev ;			      	    mat [ row ] [ i ] = prev ;				    	i ++ ) {						  
      prev = curr ;					      	    prev = curr ;					    	  curr = mat [ row ] [ i ] ;				  
    }							      	  }							    	  mat [ row ] [ i ] = prev ;				  
    row ++ ;						      	  row ++ ;						    	  prev = curr ;						  
    for ( int i = row ;					      	  for ( int i = row ;					    	}							  
    i < m ;						      	  i < m ;						    	row ++ ;						  
    i ++ ) {						      	  i ++ ) {						    	for ( int i = row ;					  
      curr = mat [ i ] [ n - 1 ] ;			      	    curr = mat [ i ] [ n - 1 ] ;			    	i < m ;							  
      mat [ i ] [ n - 1 ] = prev ;			      	    mat [ i ] [ n - 1 ] = prev ;			    	i ++ ) {						  
      prev = curr ;					      	    prev = curr ;					    	  curr = mat [ i ] [ n - 1 ] ;				  
    }							      	  }							    	  mat [ i ] [ n - 1 ] = prev ;				  
    n -- ;						      	  n -- ;						    	  prev = curr ;						  
    if ( row < m ) {					      	  if ( row < m ) {					    	}							  
      for ( int i = n - 1 ;				      	    for ( int i = n - 1 ;				    	n -- ;							  
      i >= col ;					      	    i >= col ;						    	if ( row < m ) {					  
      i -- ) {						      	    i -- ) {						    	  for ( int i = n - 1 ;					  
	curr = mat [ m - 1 ] [ i ] ;			      	      curr = mat [ m - 1 ] [ i ] ;			    	  i >= col ;						  
	mat [ m - 1 ] [ i ] = prev ;			      	      mat [ m - 1 ] [ i ] = prev ;			    	  i -- ) {						  
	prev = curr ;					      	      prev = curr ;					    	    curr = mat [ m - 1 ] [ i ] ;			  
      }							      	    }							    	    mat [ m - 1 ] [ i ] = prev ;			  
    }							      	  }							    	    prev = curr ;					  
    m -- ;						      	  m -- ;						    	  }							  
    if ( col < n ) {					      	  if ( col < n ) {					    	}							  
      for ( int i = m - 1 ;				      	    for ( int i = m - 1 ;				    	m -- ;							  
      i >= row ;					      	    i >= row ;						    	if ( col < n ) {					  
      i -- ) {						      	    i -- ) {						    	  for ( int i = m - 1 ;					  
	curr = mat [ i ] [ col ] ;			      	      curr = mat [ i ] [ col ] ;			    	  i >= row ;						  
	mat [ i ] [ col ] = prev ;			      	      mat [ i ] [ col ] = prev ;			    	  i -- ) {						  
	prev = curr ;					      	      prev = curr ;					    	    curr = mat [ i ] [ col ] ;				  
      }							      	    }							    	    mat [ i ] [ col ] = prev ;				  
    }							      	  }							    	    prev = curr ;					  
    col ++ ;						      	  col ++ ;						    	  }							  
  }							      	}							    	}							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	col ++ ;						  
  i < R ;						      	i < R ;							      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					      i < R ;							  
    j < C ;						      	  j < C ;						      i ++ ) {							  
    j ++ ) cout << mat [ i ] [ j ] << " " ;		      	  j ++ ) System . out . print ( mat [ i ] [ j ] + " " ) ;   	for ( int j = 0 ;					  
    cout << endl ;					      	  System . out . print ( "\n" ) ;			    	j < C ;							  
  }							      	}							    	j ++ ) {						  
}							      }								    	  System . out . print ( mat [ i ] [ j ] + " " ) ;	  
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP MINIMUM_LENGTH_UNSORTED_SUBARRAY_SORTING_WHICH_MAKES_THE_COMP
--							      --							    --								  --
void printUnsorted ( int arr [ ] , int n ) {		      static void printUnsorted ( int arr [ ] , int n ) {	    public static void printUnsorted ( int arr [ ] , int n ) {	  script_not_found : None
  int s = 0 , e = n - 1 , i , max , min ;		      	int s = 0 , e = n - 1 , i , max , min ;			      int s = 0 , e = n - 1 , i , max , min ;			  
  for ( s = 0 ;						      	for ( s = 0 ;						      for ( s = 0 ;						  
  s < n - 1 ;						      	s < n - 1 ;						      s < n - 1 ;						  
  s ++ ) {						      	s ++ ) {						      s ++ ) {							  
    if ( arr [ s ] > arr [ s + 1 ] ) break ;		      	  if ( arr [ s ] > arr [ s + 1 ] ) break ;		    	if ( arr [ s ] > arr [ s + 1 ] ) {			  
  }							      	}							    	  break ;						  
  if ( s == n - 1 ) {					      	if ( s == n - 1 ) {					    	}							  
    cout << "The complete array is sorted" ;		      	  System . out . println ( "The complete array is sorted" )   }								  
    return ;						      	  return ;						      if ( s == n - 1 ) {					  
  }							      	}							    	System . out . println ( "The complete array is sorted" ) 
  for ( e = n - 1 ;					      	for ( e = n - 1 ;					    	return ;						  
  e > 0 ;						      	e > 0 ;							      }								  
  e -- ) {						      	e -- ) {						      for ( e = n - 1 ;						  
    if ( arr [ e ] < arr [ e - 1 ] ) break ;		      	  if ( arr [ e ] < arr [ e - 1 ] ) break ;		      e > 0 ;							  
  }							      	}							      e -- ) {							  
  max = arr [ s ] ;					      	max = arr [ s ] ;					    	if ( arr [ e ] < arr [ e - 1 ] ) {			  
  min = arr [ s ] ;					      	min = arr [ s ] ;					    	  break ;						  
  for ( i = s + 1 ;					      	for ( i = s + 1 ;					    	}							  
  i <= e ;						      	i <= e ;						      }								  
  i ++ ) {						      	i ++ ) {						      max = arr [ s ] ;						  
    if ( arr [ i ] > max ) max = arr [ i ] ;		      	  if ( arr [ i ] > max ) max = arr [ i ] ;		      min = arr [ s ] ;						  
    if ( arr [ i ] < min ) min = arr [ i ] ;		      	  if ( arr [ i ] < min ) min = arr [ i ] ;		      for ( i = s + 1 ;						  
  }							      	}							      i <= e ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      i ++ ) {							  
  i < s ;						      	i < s ;							    	if ( arr [ i ] > max ) {				  
  i ++ ) {						      	i ++ ) {						    	  max = arr [ i ] ;					  
    if ( arr [ i ] > min ) {				      	  if ( arr [ i ] > min ) {				    	}							  
      s = i ;						      	    s = i ;						    	if ( arr [ i ] < min ) {				  
      break ;						      	    break ;						    	  min = arr [ i ] ;					  
    }							      	  }							    	}							  
  }							      	}							      }								  
  for ( i = n - 1 ;					      	for ( i = n - 1 ;					      for ( i = 0 ;						  
  i >= e + 1 ;						      	i >= e + 1 ;						      i < s ;							  
  i -- ) {						      	i -- ) {						      i ++ ) {							  
    if ( arr [ i ] < max ) {				      	  if ( arr [ i ] < max ) {				    	if ( arr [ i ] > min ) {				  
      e = i ;						      	    e = i ;						    	  s = i ;						  
      break ;						      	    break ;						    	  break ;						  
    }							      	  }							    	}							  
  }							      	}							      }								  
  cout << "The unsorted subarray which" << " makes the given  	System . out . println ( " The unsorted subarray which" + "   for ( i = n - 1 ;						  
  return ;						      	return ;						      i >= e + 1 ;						  
}							      }								      i -- ) {							  
							      								    	if ( arr [ i ] < max ) {				  
							      								    	  e = i ;						  
							      								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "The unsorted subarray which" + "  
							      								      return ;							  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		      POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS		    POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS			  POINT_CLIPPING_ALGORITHM_COMPUTER_GRAPHICS
--							      --							    --								  --
void pointClip ( int XY [ ] [ 2 ] , int n , int Xmin , int Ym static void pointClip ( int XY [ ] [ ] , int n , int Xmin , i public static void pointClip ( int [ ] XY , int n , int Xmin  script_not_found : None
  cout << "Point inside the viewing pane:" << endl ;	      	System . out . printf ( "Point inside the viewing pane:\n"    System . out . println ( "Point inside the viewing pane:" ) 
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( ( XY [ i ] [ 0 ] >= Xmin ) && ( XY [ i ] [ 0 ] <= Xm 	  if ( ( XY [ i ] [ 0 ] >= Xmin ) && ( XY [ i ] [ 0 ] <= Xm 	if ( ( XY [ i ] [ 0 ] >= Xmin ) && ( XY [ i ] [ 0 ] <= Xm 
      if ( ( XY [ i ] [ 1 ] >= Ymin ) && ( XY [ i ] [ 1 ] <=  	    if ( ( XY [ i ] [ 1 ] >= Ymin ) && ( XY [ i ] [ 1 ] <=  	  if ( ( XY [ i ] [ 1 ] >= Ymin ) && ( XY [ i ] [ 1 ] <=  
    }							      	  }							    	    System . out . print ( "[" + XY [ i ] [ 0 ] + "," + X 
  }							      	}							    	  }							  
  cout << "\n" << endl ;				      	System . out . printf ( "\nPoint outside the viewing pane:\ 	}							  
  cout << "Point outside the viewing pane:" << endl ;	      	for ( int i = 0 ;					      }								  
  for ( int i = 0 ;					      	i < n ;							      System . out . println ( "\n" ) ;				  
  i < n ;						      	i ++ ) {						      System . out . println ( "Point outside the viewing pane:"  
  i ++ ) {						      	  if ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xmax   for ( int i = 0 ;						  
    if ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xmax 	  if ( ( XY [ i ] [ 1 ] < Ymin ) || ( XY [ i ] [ 1 ] > Ymax   i < n ;							  
    if ( ( XY [ i ] [ 1 ] < Ymin ) || ( XY [ i ] [ 1 ] > Ymax 	}							      i ++ ) {							  
  }							      }								    	if ( ( XY [ i ] [ 0 ] < Xmin ) || ( XY [ i ] [ 0 ] > Xmax 
}							      								    	  System . out . print ( "[" + XY [ i ] [ 0 ] + "," + XY  
							      								    	}							  
							      								    	if ( ( XY [ i ] [ 1 ] < Ymin ) || ( XY [ i ] [ 1 ] > Ymax 
							      								    	  System . out . print ( "[" + XY [ i ] [ 0 ] + "," + XY  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER		      MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER			    MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER			  MAXIMIZE_ARRAY_ELEMENTS_UPTO_GIVEN_NUMBER
--							      --							    --								  --
int findMaxVal ( int arr [ ] , int n , int num , int maxLimit static int findMaxVal ( int [ ] arr , int n , int num , int m public static int findMaxVal ( int arr [ ] , int n , int num  script_not_found : None
  int ind ;						      	int ind ;						      int ind ;							  
  int val ;						      	int val ;						      int val ;							  
  int dp [ n ] [ maxLimit + 1 ] ;			      	int [ ] [ ] dp = new int [ n ] [ maxLimit + 1 ] ;	      int dp [ ] [ ] = new int [ n ] [ maxLimit + 1 ] ;		  
  for ( ind = 0 ;					      	for ( ind = 0 ;						      for ( ind = 0 ;						  
  ind < n ;						      	ind < n ;						      ind < n ;							  
  ind ++ ) {						      	ind ++ ) {						      ind ++ ) {						  
    for ( val = 0 ;					      	  for ( val = 0 ;					    	for ( val = 0 ;						  
    val <= maxLimit ;					      	  val <= maxLimit ;					    	val <= maxLimit ;					  
    val ++ ) {						      	  val ++ ) {						    	val ++ ) {						  
      if ( ind == 0 ) {					      	    if ( ind == 0 ) {					    	  if ( ind == 0 ) {					  
	if ( num - arr [ ind ] == val || num + arr [ ind ] == 	      if ( num - arr [ ind ] == val || num + arr [ ind ] == 	    if ( num - arr [ ind ] == val || num + arr [ ind ] == 
	  dp [ ind ] [ val ] = 1 ;			      		dp [ ind ] [ val ] = 1 ;			    	    else dp [ ind ] [ val ] = 0 ;			  
	}						      	      }							    	  }							  
	else {						      	      else {						    	  else {						  
	  dp [ ind ] [ val ] = 0 ;			      		dp [ ind ] [ val ] = 0 ;			    	    if ( val - arr [ ind ] >= 0 && val + arr [ ind ] <= m 
	}						      	      }							    	    else if ( val - arr [ ind ] >= 0 ) dp [ ind ] [ val ] 
      }							      	    }							    	    else if ( val + arr [ ind ] <= maxLimit ) dp [ ind ]  
      else {						      	    else {						    	    else dp [ ind ] [ val ] = 0 ;			  
	if ( val - arr [ ind ] >= 0 && val + arr [ ind ] <= m 	      if ( val - arr [ ind ] >= 0 && val + arr [ ind ] <= m 	  }							  
	  dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ i 		if ( dp [ ind - 1 ] [ val - arr [ ind ] ] == 1 || d 	}							  
	}						      	      }							      }								  
	else if ( val - arr [ ind ] >= 0 ) {		      	      else if ( val - arr [ ind ] >= 0 ) {		      for ( val = maxLimit ;					  
	  dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ i 		dp [ ind ] [ val ] = dp [ ind - 1 ] [ val - arr [ i   val >= 0 ;						  
	}						      	      }							      val -- ) {						  
	else if ( val + arr [ ind ] <= maxLimit ) {	      	      else if ( val + arr [ ind ] <= maxLimit ) {	    	if ( dp [ n - 1 ] [ val ] ) return val ;		  
	  dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ i 		dp [ ind ] [ val ] = dp [ ind - 1 ] [ val + arr [ i   }								  
	}						      	      }							      return - 1 ;						  
	else {						      	      else {						    }								  
	  dp [ ind ] [ val ] = 0 ;			      		dp [ ind ] [ val ] = 0 ;			    								  
	}						      	      }							    								  
      }							      	    }							    								  
    }							      	  }							    								  
  }							      	}							    								  
  for ( val = maxLimit ;				      	for ( val = maxLimit ;					    								  
  val >= 0 ;						      	val >= 0 ;						    								  
  val -- ) {						      	val -- ) {						    								  
    if ( dp [ n - 1 ] [ val ] ) {			      	  if ( dp [ n - 1 ] [ val ] == 1 ) {			    								  
      return val ;					      	    return val ;					    								  
    }							      	  }							    								  
  }							      	}							    								  
  return - 1 ;						      	return - 1 ;						    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K		      SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K		    SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K		  SUM_MINIMUM_MAXIMUM_ELEMENTS_SUBARRAYS_SIZE_K
--							      --							    --								  --
int SumOfKsubArray ( int arr [ ] , int n , int k ) {	      public static int SumOfKsubArray ( int arr [ ] , int k ) {    public static int SumOfKsubArray ( int arr [ ] , int n , int  script_not_found : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  deque < int > S ( k ) , G ( k ) ;			      	Deque < Integer > S = new LinkedList < > ( ) , G = new Link   Deque < Integer > S = new ArrayDeque < > ( k ) , G = new Ar 
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( ( ! S . empty ( ) ) && arr [ S . back ( ) ] >= ar 	  while ( ! S . isEmpty ( ) && arr [ S . peekLast ( ) ] >=  	while ( ( ! S . isEmpty ( ) ) && arr [ S . pop ( ) ] >= a 
    while ( ( ! G . empty ( ) ) && arr [ G . back ( ) ] <= ar 	  while ( ! G . isEmpty ( ) && arr [ G . peekLast ( ) ] <=  	  S . pop ( ) ;						  
    G . push_back ( i ) ;				      	  G . addLast ( i ) ;					    	}							  
    S . push_back ( i ) ;				      	  S . addLast ( i ) ;					    	while ( ( ! G . isEmpty ( ) ) && arr [ G . pop ( ) ] <= a 
  }							      	}							    	  G . pop ( ) ;						  
  for ( ;						      	for ( ;							    	}							  
  i < n ;						      	i < arr . length ;					    	G . push ( i ) ;					  
  i ++ ) {						      	i ++ ) {						    	S . push ( i ) ;					  
    sum += arr [ S . front ( ) ] + arr [ G . front ( ) ] ;    	  sum += arr [ S . peekFirst ( ) ] + arr [ G . peekFirst (    }								  
    while ( ! S . empty ( ) && S . front ( ) <= i - k ) S . p 	  while ( ! S . isEmpty ( ) && S . peekFirst ( ) <= i - k )   for ( ;							  
    while ( ! G . empty ( ) && G . front ( ) <= i - k ) G . p 	  while ( ! G . isEmpty ( ) && G . peekFirst ( ) <= i - k )   i < n ;							  
    while ( ( ! S . empty ( ) ) && arr [ S . back ( ) ] >= ar 	  while ( ! S . isEmpty ( ) && arr [ S . peekLast ( ) ] >=    i ++ ) {							  
    while ( ( ! G . empty ( ) ) && arr [ G . back ( ) ] <= ar 	  while ( ! G . isEmpty ( ) && arr [ G . peekLast ( ) ] <=  	sum += arr [ S . pop ( ) ] + arr [ G . pop ( ) ] ;	  
    G . push_back ( i ) ;				      	  G . addLast ( i ) ;					    	while ( ! S . isEmpty ( ) && S . pop ( ) <= i - k ) {	  
    S . push_back ( i ) ;				      	  S . addLast ( i ) ;					    	  S . pop ( ) ;						  
  }							      	}							    	}							  
  sum += arr [ S . front ( ) ] + arr [ G . front ( ) ] ;      	sum += arr [ S . peekFirst ( ) ] + arr [ G . peekFirst ( )  	while ( ! G . isEmpty ( ) && G . pop ( ) <= i - k ) {	  
  return sum ;						      	return sum ;						    	  G . pop ( ) ;						  
}							      }								    	}							  
							      								    	while ( ( ! S . isEmpty ( ) ) && arr [ S . pop ( ) ] >= a 
							      								    	  S . pop ( ) ;						  
							      								    	}							  
							      								    	while ( ( ! G . isEmpty ( ) ) && arr [ G . pop ( ) ] <= a 
							      								    	  G . pop ( ) ;						  
							      								    	}							  
							      								    	G . push ( i ) ;					  
							      								    	S . push ( i ) ;					  
							      								      }								  
							      								      sum += arr [ S . pop ( ) ] + arr [ G . pop ( ) ] ;	  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ROTATIONS_DIVISIBLE_8				      COUNT_ROTATIONS_DIVISIBLE_8				    COUNT_ROTATIONS_DIVISIBLE_8					  COUNT_ROTATIONS_DIVISIBLE_8
--							      --							    --								  --
int countRotationsDivBy8 ( string n ) {			      static int countRotationsDivBy8 ( String n ) {		    public static int countRotationsDivBy8 ( String n ) {	  success : None
  int len = n . length ( ) ;				      	int len = n . length ( ) ;				      int len = n . length ( ) ;				  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  if ( len == 1 ) {					      	if ( len == 1 ) {					      if ( len == 1 ) {						  
    int oneDigit = n [ 0 ] - '0' ;			      	  int oneDigit = n . charAt ( 0 ) - '0' ;		    	int oneDigit = n . charAt ( 0 ) - '0' ;			  
    if ( oneDigit % 8 == 0 ) return 1 ;			      	  if ( oneDigit % 8 == 0 ) return 1 ;			    	if ( oneDigit % 8 == 0 ) {				  
    return 0 ;						      	  return 0 ;						    	  return 1 ;						  
  }							      	}							    	}							  
  if ( len == 2 ) {					      	if ( len == 2 ) {					    	return 0 ;						  
    int first = ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' ) ;  	  int first = ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charA   }								  
    int second = ( n [ 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' ) ; 	  int second = ( n . charAt ( 1 ) - '0' ) * 10 + ( n . char   if ( len == 2 ) {						  
    if ( first % 8 == 0 ) count ++ ;			      	  if ( first % 8 == 0 ) count ++ ;			    	int first = ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charA 
    if ( second % 8 == 0 ) count ++ ;			      	  if ( second % 8 == 0 ) count ++ ;			    	int second = ( n . charAt ( 1 ) - '0' ) * 10 + ( n . char 
    return count ;					      	  return count ;					    	if ( first % 8 == 0 ) {					  
  }							      	}							    	  count ++ ;						  
  int threeDigit ;					      	int threeDigit ;					    	}							  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	if ( second % 8 == 0 ) {				  
  i < ( len - 2 ) ;					      	i < ( len - 2 ) ;					    	  count ++ ;						  
  i ++ ) {						      	i ++ ) {						    	}							  
    threeDigit = ( n [ i ] - '0' ) * 100 + ( n [ i + 1 ] - '0 	  threeDigit = ( n . charAt ( i ) - '0' ) * 100 + ( n . cha 	return count ;						  
    if ( threeDigit % 8 == 0 ) count ++ ;		      	  if ( threeDigit % 8 == 0 ) count ++ ;			      }								  
  }							      	}							      int threeDigit ;						  
  threeDigit = ( n [ len - 1 ] - '0' ) * 100 + ( n [ 0 ] - '0 	threeDigit = ( n . charAt ( len - 1 ) - '0' ) * 100 + ( n .   for ( int i = 0 ;						  
  if ( threeDigit % 8 == 0 ) count ++ ;			      	if ( threeDigit % 8 == 0 ) count ++ ;			      i < ( len - 2 ) ;						  
  threeDigit = ( n [ len - 2 ] - '0' ) * 100 + ( n [ len - 1  	threeDigit = ( n . charAt ( len - 2 ) - '0' ) * 100 + ( n .   i ++ ) {							  
  if ( threeDigit % 8 == 0 ) count ++ ;			      	if ( threeDigit % 8 == 0 ) count ++ ;			    	threeDigit = ( n . charAt ( i ) - '0' ) * 100 + ( n . cha 
  return count ;					      	return count ;						    	if ( threeDigit % 8 == 0 ) {				  
}							      }								    	  count ++ ;						  
							      								    	}							  
							      								      }								  
							      								      threeDigit = ( n . charAt ( len - 1 ) - '0' ) * 100 + ( n . 
							      								      if ( threeDigit % 8 == 0 ) {				  
							      								    	count ++ ;						  
							      								      }								  
							      								      threeDigit = ( n . charAt ( len - 2 ) - '0' ) * 100 + ( n . 
							      								      if ( threeDigit % 8 == 0 ) {				  
							      								    	count ++ ;						  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT			      PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT			    PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT			  PRINT_MATRIX_SPIRAL_FORM_STARTING_POINT
--							      --							    --								  --
void printSpiral ( int mat [ ] [ MAX ] , int r , int c ) {    static void printSpiral ( int [ ] [ ] mat , int r , int c ) { public static void printSpiral ( int mat [ ] [ ] , int r , in script_not_found : None
  int i , a = 0 , b = 2 ;				      	int i , a = 0 , b = 2 ;					      int i , a = 0 , b = 2 ;					  
  int low_row = ( 0 > a ) ? 0 : a ;			      	int low_row = ( 0 > a ) ? 0 : a ;			      int lowRow = ( 0 > a ) ? 0 : a ;				  
  int low_column = ( 0 > b ) ? 0 : b - 1 ;		      	int low_column = ( 0 > b ) ? 0 : b - 1 ;		      int lowColumn = ( 0 > b ) ? 0 : b - 1 ;			  
  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;	      	int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;	      int highRow = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;	  
  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;      	int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;	      int highColumn = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;	  
  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {	      	while ( ( low_row > 0 - r && low_column > 0 - c ) ) {	      while ( ( lowRow > 0 - r && lowColumn > 0 - c ) ) {	  
    for ( i = low_column + 1 ;				      	  for ( i = low_column + 1 ;				    	for ( i = lowColumn + 1 ;				  
    i <= high_column && i < c && low_row >= 0 ;		      	  i <= high_column && i < c && low_row >= 0 ;		    	i <= highColumn && i < c && lowRow >= 0 ;		  
    ++ i ) cout << mat [ low_row ] [ i ] << " " ;	      	  ++ i ) System . out . print ( mat [ low_row ] [ i ] + " " 	++ i ) {						  
    low_row -= 1 ;					      	  low_row -= 1 ;					    	  System . out . print ( mat [ lowRow ] [ i ] + " " ) ;	  
    for ( i = low_row + 2 ;				      	  for ( i = low_row + 2 ;				    	}							  
    i <= high_row && i < r && high_column < c ;		      	  i <= high_row && i < r && high_column < c ;		    	lowRow -= 1 ;						  
    ++ i ) cout << mat [ i ] [ high_column ] << " " ;	      	  ++ i ) System . out . print ( mat [ i ] [ high_column ] + 	for ( i = lowRow + 2 ;					  
    high_column += 1 ;					      	  high_column += 1 ;					    	i <= highRow && i < r && highColumn < c ;		  
    for ( i = high_column - 2 ;				      	  for ( i = high_column - 2 ;				    	++ i ) {						  
    i >= low_column && i >= 0 && high_row < r ;		      	  i >= low_column && i >= 0 && high_row < r ;		    	  System . out . print ( mat [ i ] [ highColumn ] + " " ) 
    -- i ) cout << mat [ high_row ] [ i ] << " " ;	      	  -- i ) System . out . print ( mat [ high_row ] [ i ] + "  	}							  
    high_row += 1 ;					      	  high_row += 1 ;					    	highColumn += 1 ;					  
    for ( i = high_row - 2 ;				      	  for ( i = high_row - 2 ;				    	for ( i = highColumn - 2 ;				  
    i > low_row && i >= 0 && low_column >= 0 ;		      	  i > low_row && i >= 0 && low_column >= 0 ;		    	i >= lowColumn && i >= 0 && highRow < r ;		  
    -- i ) cout << mat [ i ] [ low_column ] << " " ;	      	  -- i ) System . out . print ( mat [ i ] [ low_column ] +  	-- i ) {						  
    low_column -= 1 ;					      	  low_column -= 1 ;					    	  System . out . print ( mat [ highRow ] [ i ] + " " ) ;  
  }							      	}							    	}							  
  cout << endl ;					      	System . out . println ( ) ;				    	highRow += 1 ;						  
}							      }								    	for ( i = highRow - 2 ;					  
							      								    	i > lowRow && i >= 0 && lowColumn >= 0 ;		  
							      								    	-- i ) {						  
							      								    	  System . out . print ( mat [ i ] [ lowColumn ] + " " )  
							      								    	}							  
							      								    	lowColumn -= 1 ;					  
							      								      }								  
							      								      System . out . println ( ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_PATH_UNDIRECTED_GRAPH				      EULERIAN_PATH_UNDIRECTED_GRAPH				    EULERIAN_PATH_UNDIRECTED_GRAPH				  EULERIAN_PATH_UNDIRECTED_GRAPH
--							      --							    --								  --
void findpath ( int graph [ ] [ 5 ] , int n ) {		      static void findpath ( int [ ] [ ] graph , int n ) {	    public static void findpath ( int graph [ ] [ ] , int n ) {	  script_not_found : None
  vector < int > numofadj ;				      	Vector < Integer > numofadj = new Vector < > ( ) ;	      int [ ] numofadj = new int [ n ] ;			  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) numofadj . push_back ( accumulate ( graph [ i ] , gr 	i ++ ) numofadj . add ( accumulate ( graph [ i ] , 0 ) ) ;    i ++ ) {							  
  int startpoint = 0 , numofodd = 0 ;			      	int startPoint = 0 , numofodd = 0 ;			    	numofadj [ i ] = Math . abs ( graph [ i ] [ 0 ] ) ;	  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      }								  
  i >= 0 ;						      	i >= 0 ;						      int startpoint = 0 , numofodd = 0 ;			  
  i -- ) {						      	i -- ) {						      for ( int i = n - 1 ;					  
    if ( numofadj [ i ] % 2 == 1 ) {			      	  if ( numofadj . elementAt ( i ) % 2 == 1 ) {		      i >= 0 ;							  
      numofodd ++ ;					      	    numofodd ++ ;					      i -- ) {							  
      startpoint = i ;					      	    startPoint = i ;					    	if ( numofadj [ i ] % 2 == 1 ) {			  
    }							      	  }							    	  numofodd ++ ;						  
  }							      	}							    	  startpoint = i ;					  
  if ( numofodd > 2 ) {					      	if ( numofodd > 2 ) {					    	}							  
    cout << "No Solution" << endl ;			      	  System . out . println ( "No Solution" ) ;		      }								  
    return ;						      	  return ;						      if ( numofodd > 2 ) {					  
  }							      	}							    	System . out . println ( "No Solution" ) ;		  
  stack < int > stack ;					      	Stack < Integer > stack = new Stack < > ( ) ;		    	return ;						  
  vector < int > path ;					      	Vector < Integer > path = new Vector < > ( ) ;		      }								  
  int cur = startpoint ;				      	int cur = startPoint ;					      Stack < Integer > stack = new Stack < > ( ) ;		  
  while ( ! stack . empty ( ) or accumulate ( graph [ cur ] , 	while ( ! stack . isEmpty ( ) || accumulate ( graph [ cur ]   List < Integer > path = new ArrayList < > ( ) ;		  
    if ( accumulate ( graph [ cur ] , graph [ cur ] + 5 , 0 ) 	  if ( accumulate ( graph [ cur ] , 0 ) == 0 ) {	      int cur = startpoint ;					  
      path . push_back ( cur ) ;			      	    path . add ( cur ) ;				      while ( ! stack . isEmpty ( ) or Math . abs ( graph [ cur ] 
      cur = stack . top ( ) ;				      	    cur = stack . pop ( ) ;				    	if ( Math . abs ( graph [ cur ] [ 0 ] ) == 0 ) {	  
      stack . pop ( ) ;					      	  }							    	  path . add ( cur ) ;					  
    }							      	  else {						    	  cur = stack . pop ( ) ;				  
    else {						      	    for ( int i = 0 ;					    	  stack . push ( cur ) ;				  
      for ( int i = 0 ;					      	    i < n ;						    	}							  
      i < n ;						      	    i ++ ) {						    	else {							  
      i ++ ) {						      	      if ( graph [ cur ] [ i ] == 1 ) {			    	  for ( int i = 0 ;					  
	if ( graph [ cur ] [ i ] == 1 ) {		      		stack . add ( cur ) ;				    	  i < n ;						  
	  stack . push ( cur ) ;			      		graph [ cur ] [ i ] = 0 ;			    	  i ++ ) {						  
	  graph [ cur ] [ i ] = 0 ;			      		graph [ i ] [ cur ] = 0 ;			    	    if ( graph [ cur ] [ i ] == 1 ) {			  
	  graph [ i ] [ cur ] = 0 ;			      		cur = i ;					    	      stack . push ( cur ) ;				  
	  cur = i ;					      		break ;						    	      graph [ cur ] [ i ] = 0 ;				  
	  break ;					      	      }							    	      graph [ i ] [ cur ] = 0 ;				  
	}						      	    }							    	      cur = i ;						  
      }							      	  }							    	      break ;						  
    }							      	}							    	    }							  
  }							      	for ( int ele : path ) System . out . print ( ele + " -> "  	  }							  
  for ( auto ele : path ) cout << ele << " -> " ;	      	System . out . println ( cur ) ;			    	}							  
  cout << cur << endl ;					      }								      }								  
}							      								      for ( Integer ele : path ) {				  
							      								    	System . out . print ( ele + " -> " ) ;			  
							      								      }								  
							      								      System . out . println ( cur ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L		      MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L		    MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L		  MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L
--							      --							    --								  --
- 100000000 int findMaxValue ( int arr [ ] , int n ) {	      static int findMaxValue ( int [ ] arr , int n ) {		    - 100000000 int findMaxValue ( int arr [ ] , int n ) {	  error : MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J
  if ( n < 4 ) {					      	if ( n < 4 ) {						      if ( n < 4 ) {						  _K_L.java:45: error: illegal start of type - 10000
    printf ( "The array should have atlest 4 elements\n" ) ;  	  System . out . println ( "The array should have" + " atle 	System . out . println ( "The array should have atlest 4  0000 int f_filled ( int arr [ ] , int n ) { ^ MAXI
    return MIN ;					      	}							    	return MIN ;						  MIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L.java:50
  }							      	int table1 [ ] = new int [ n + 1 ] ;			      }								  : error: ']' expected	  int table1 [ ] = new int [
  int table1 [ n + 1 ] , table2 [ n ] , table3 [ n - 1 ] , ta 	int table2 [ ] = new int [ n ] ;			      int table1 [ ] = new int [ n + 1 ] , table2 [ n ] , table3   n + 1 ] , table2 [ n ] , table3 [ n - 1 ] , table
  for ( int i = 0 ;					      	int table3 [ ] = new int [ n - 1 ] ;			      for ( int i = 0 ;						  4 [ n - 2 ] ;
  i <= n ;						      	int table4 [ ] = new int [ n - 2 ] ;			      i <= n ;							  	     ^ MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THA
  i ++ ) table1 [ i ] = table2 [ i ] = table3 [ i ] = table4  	Arrays . fill ( table1 , Integer . MIN_VALUE ) ;	      i ++ ) {							  T_I_J_K_L.java:50: error: not a statement   int ta
  for ( int i = n - 1 ;					      	Arrays . fill ( table2 , Integer . MIN_VALUE ) ;	    	table1 [ i ] = table2 [ i ] = table3 [ i ] = table4 [ i ] ble1 [ ] = new int [ n + 1 ] , table2 [ n ] , tabl
  i >= 0 ;						      	Arrays . fill ( table3 , Integer . MIN_VALUE ) ;	      }								  e3 [ n - 1 ] , table4 [ n - 2 ] ;
  i -- ) table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )  	Arrays . fill ( table4 , Integer . MIN_VALUE ) ;	      for ( int i = n - 1 ;					  				  ^ MAXIMIZE_ARRJ_AR
  for ( int i = n - 2 ;					      	for ( int i = n - 1 ;					      i >= 0 ;							  RI_ARRL_ARRK_SUCH_THAT_I_J_K_L.java:50: error: ';'
  i >= 0 ;						      	i >= 0 ;						      i -- ) {							   expected   int table1 [ ] = new int [ n + 1 ] , t
  i -- ) table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 	i -- ) {						    	table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ]  able2 [ n ] , table3 [ n - 1 ] , table4 [ n - 2 ]
  for ( int i = n - 3 ;					      	  table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ]    }								  ;
  i >= 0 ;						      	}							      for ( int i = n - 2 ;					   ^ MAXIMIZE_ARRJ_ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L.
  i -- ) table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 	for ( int i = n - 2 ;					      i >= 0 ;							  java:50: error: not a statement   int table1 [ ] =
  for ( int i = n - 4 ;					      	i >= 0 ;						      i -- ) {							   new int [ n + 1 ] , table2 [ n ] , table3 [ n - 1
  i >= 0 ;						      	i -- ) {						    	table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i  ] , table4 [ n - 2 ] ;
  i -- ) table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 	  table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i   }								  				     ^ MAXIMIZE_ARRJ
  return table4 [ 0 ] ;					      	}							      for ( int i = n - 3 ;					  _ARRI_ARRL_ARRK_SUCH_THAT_I_J_K_L.java:50: error:
}							      	for ( int i = n - 3 ;					      i >= 0 ;							  ';' expected	 int table1 [ ] = new int [ n + 1 ]
							      	i >= 0 ;						      i -- ) {							  , table2 [ n ] , table3 [ n - 1 ] , table4 [ n - 2
							      	i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table 	table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i  ] ;
							      	for ( int i = n - 4 ;					      }								  			   ^ MAXIMIZE_ARRJ_ARRI_ARRL
							      	i >= 0 ;						      for ( int i = n - 4 ;					  _ARRK_SUCH_THAT_I_J_K_L.java:50: error: not a stat
							      	i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table   i >= 0 ;							  ement	  int table1 [ ] = new int [ n + 1 ] , table
							      	return table4 [ 0 ] ;					      i -- ) {							  2 [ n ] , table3 [ n - 1 ] , table4 [ n - 2 ] ;
							      }								    	table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i 
							      								      }								  			      ^ 7 errors
							      								      return table4 [ 0 ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PARTITION_NUMBER_TWO_DIVISBLE_PARTS			      PARTITION_NUMBER_TWO_DIVISBLE_PARTS			    PARTITION_NUMBER_TWO_DIVISBLE_PARTS				  PARTITION_NUMBER_TWO_DIVISBLE_PARTS
--							      --							    --								  --
void findDivision ( string & str , int a , int b ) {	      static void findDivision ( String str , int a , int b ) {	    public static void findDivision ( String str , int a , int b  script_not_found : None
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  
  vector < int > lr ( len + 1 , 0 ) ;			      	int [ ] lr = new int [ len + 1 ] ;			      int [ ] lr = new int [ len + 1 ] ;			  
  lr [ 0 ] = ( str [ 0 ] - '0' ) % a ;			      	lr [ 0 ] = ( ( int ) str . charAt ( 0 ) - ( int ) '0' ) % a   lr [ 0 ] = ( str . charAt ( 0 ) - '0' ) % a ;		  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < len ;						      	i < len ;						      i < len ;							  
  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( str [ i ] 	i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( ( int ) s   i ++ ) {							  
  vector < int > rl ( len + 1 , 0 ) ;			      	int [ ] rl = new int [ len + 1 ] ;			    	lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( str . charAt ( 
  rl [ len - 1 ] = ( str [ len - 1 ] - '0' ) % b ;	      	rl [ len - 1 ] = ( ( int ) str . charAt ( len - 1 ) - ( int   }								  
  int power10 = 10 ;					      	int power10 = 10 ;					      int [ ] rl = new int [ len + 1 ] ;			  
  for ( int i = len - 2 ;				      	for ( int i = len - 2 ;					      rl [ len - 1 ] = ( str . charAt ( len - 1 ) - '0' ) % b ;	  
  i >= 0 ;						      	i >= 0 ;						      int power10 = 10 ;					  
  i -- ) {						      	i -- ) {						      for ( int i = len - 2 ;					  
    rl [ i ] = ( rl [ i + 1 ] + ( str [ i ] - '0' ) * power10 	  rl [ i ] = ( rl [ i + 1 ] + ( ( int ) str . charAt ( i )    i >= 0 ;							  
    power10 = ( power10 * 10 ) % b ;			      	  power10 = ( power10 * 10 ) % b ;			      i -- ) {							  
  }							      	}							    	rl [ i ] = ( rl [ i + 1 ] + ( str . charAt ( i ) - '0' )  
  for ( int i = 0 ;					      	for ( int i = 0 ;					    	power10 = ( power10 * 10 ) % b ;			  
  i < len - 1 ;						      	i < len - 1 ;						      }								  
  i ++ ) {						      	i ++ ) {						      for ( int i = 0 ;						  
    if ( lr [ i ] != 0 ) continue ;			      	  if ( lr [ i ] != 0 ) continue ;			      i < len - 1 ;						  
    if ( rl [ i + 1 ] == 0 ) {				      	  if ( rl [ i + 1 ] == 0 ) {				      i ++ ) {							  
      cout << "YES\n" ;					      	    System . out . println ( "YES" ) ;			    	if ( lr [ i ] != 0 ) continue ;				  
      for ( int k = 0 ;					      	    for ( int k = 0 ;					    	if ( rl [ i + 1 ] == 0 ) {				  
      k <= i ;						      	    k <= i ;						    	  System . out . print ( "YES" ) ;			  
      k ++ ) cout << str [ k ] ;			      	    k ++ ) System . out . print ( str . charAt ( k ) ) ;    	  for ( int k = 0 ;					  
      cout << ", " ;					      	    System . out . print ( ", " ) ;			    	  k <= i ;						  
      for ( int k = i + 1 ;				      	    for ( int k = i + 1 ;				    	  k ++ ) {						  
      k < len ;						      	    k < len ;						    	    System . out . print ( str . charAt ( k ) ) ;	  
      k ++ ) cout << str [ k ] ;			      	    k ++ ) System . out . print ( str . charAt ( k ) ) ;    	  }							  
      return ;						      	    return ;						    	  System . out . print ( ", " ) ;			  
    }							      	  }							    	  for ( int k = i + 1 ;					  
  }							      	}							    	  k < len ;						  
  cout << "NO\n" ;					      	System . out . println ( "NO" ) ;			    	  k ++ ) {						  
}							      }								    	    System . out . print ( str . charAt ( k ) ) ;	  
							      								    	  }							  
							      								    	  return ;						  
							      								    	}							  
							      								      }								  
							      								      System . out . println ( "NO" ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_A_SPECIFIC_PAIR_IN_MATRIX_1			      FIND_A_SPECIFIC_PAIR_IN_MATRIX_1				    FIND_A_SPECIFIC_PAIR_IN_MATRIX_1				  FIND_A_SPECIFIC_PAIR_IN_MATRIX_1
--							      --							    --								  --
int findMaxValue ( int mat [ ] [ N ] ) {		      static int findMaxValue ( int N , int mat [ ] [ ] ) {	    public static int findMaxValue ( int [ ] [ ] mat ) {	  script_not_found : None
  int maxValue = INT_MIN ;				      	int maxValue = Integer . MIN_VALUE ;			      int maxValue = Integer . MIN_VALUE ;			  
  int maxArr [ N ] [ N ] ;				      	int maxArr [ ] [ ] = new int [ N ] [ N ] ;		      int [ ] [ ] maxArr = new int [ mat . length ] [ mat [ 0 ] . 
  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;      	maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;	      maxArr [ mat . length - 1 ] [ mat . length - 1 ] = mat [ ma 
  int maxv = mat [ N - 1 ] [ N - 1 ] ;			      	int maxv = mat [ N - 1 ] [ N - 1 ] ;			      int maxv = mat [ mat . length - 1 ] [ mat . length - 1 ] ;  
  for ( int j = N - 2 ;					      	for ( int j = N - 2 ;					      for ( int j = N - 2 ;					  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  j -- ) {						      	j -- ) {						      j -- ) {							  
    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [  	  if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [  	if ( mat [ N - 1 ] [ j ] > maxv ) {			  
    maxArr [ N - 1 ] [ j ] = maxv ;			      	  maxArr [ N - 1 ] [ j ] = maxv ;			    	  maxv = mat [ N - 1 ] [ j ] ;				  
  }							      	}							    	}							  
  maxv = mat [ N - 1 ] [ N - 1 ] ;			      	maxv = mat [ N - 1 ] [ N - 1 ] ;			    	maxArr [ N - 1 ] [ j ] = maxv ;				  
  for ( int i = N - 2 ;					      	for ( int i = N - 2 ;					      }								  
  i >= 0 ;						      	i >= 0 ;						      maxv = mat [ N - 1 ] [ N - 1 ] ;				  
  i -- ) {						      	i -- ) {						      for ( int i = N - 2 ;					  
    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N -  	  if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N -    i >= 0 ;							  
    maxArr [ i ] [ N - 1 ] = maxv ;			      	  maxArr [ i ] [ N - 1 ] = maxv ;			      i -- ) {							  
  }							      	}							    	if ( mat [ i ] [ N - 1 ] > maxv ) {			  
  for ( int i = N - 2 ;					      	for ( int i = N - 2 ;					    	  maxv = mat [ i ] [ N - 1 ] ;				  
  i >= 0 ;						      	i >= 0 ;						    	}							  
  i -- ) {						      	i -- ) {						    	maxArr [ i ] [ N - 1 ] = maxv ;				  
    for ( int j = N - 2 ;				      	  for ( int j = N - 2 ;					      }								  
    j >= 0 ;						      	  j >= 0 ;						      for ( int i = N - 2 ;					  
    j -- ) {						      	  j -- ) {						      i >= 0 ;							  
      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > max 	    if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > max   i -- ) {							  
      maxArr [ i ] [ j ] = max ( mat [ i ] [ j ] , max ( maxA 	    maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Mat 	for ( int j = N - 2 ;					  
    }							      	  }							    	j >= 0 ;						  
  }							      	}							    	j -- ) {						  
  return maxValue ;					      	return maxValue ;					    	  if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > max 
}							      }								    	    maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j 
							      								    	  }							  
							      								    	  maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Mat 
							      								    	}							  
							      								      }								  
							      								      return maxValue ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER	      COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER		    COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER		  COUNT_ARRAYS_ADJACENT_ELEMENTS_ONE_DIVIDE_ANOTHER
--							      --							    --								  --
int numofArray ( int n , int m ) {			      static int numofArray ( int n , int m ) {			    public static int numofArray ( int n , int m ) {		  script_not_found : None
  int dp [ MAX ] [ MAX ] ;				      	int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;		      int dp [ ] [ ] = new int [ MAX ] [ MAX ] ;		  
  vector < int > di [ MAX ] ;				      	Vector < Integer > [ ] di = new Vector [ MAX ] ;	      int di [ ] [ ] = new int [ MAX ] [ MAX ] ;		  
  vector < int > mu [ MAX ] ;				      	Vector < Integer > [ ] mu = new Vector [ MAX ] ;	      int mu [ ] [ ] = new int [ MAX ] [ MAX ] ;		  
  memset ( dp , 0 , sizeof dp ) ;			      	for ( int i = 0 ;					      Arrays . fill ( dp , 0 ) ;				  
  memset ( di , 0 , sizeof di ) ;			      	i < MAX ;						      Arrays . fill ( di , 0 ) ;				  
  memset ( mu , 0 , sizeof mu ) ;			      	i ++ ) {						      Arrays . fill ( mu , 0 ) ;				  
  for ( int i = 1 ;					      	  for ( int j = 0 ;					      for ( int i = 1 ;						  
  i <= m ;						      	  j < MAX ;						      i <= m ;							  
  i ++ ) {						      	  j ++ ) {						      i ++ ) {							  
    for ( int j = 2 * i ;				      	    dp [ i ] [ j ] = 0 ;				    	for ( int j = 2 * i ;					  
    j <= m ;						      	  }							    	j <= m ;						  
    j += i ) {						      	}							    	j += i ) {						  
      di [ j ] . push_back ( i ) ;			      	for ( int i = 0 ;					    	  di [ j ] [ i ] = i ;					  
      mu [ i ] . push_back ( j ) ;			      	i < MAX ;						    	  mu [ i ] [ j ] = j ;					  
    }							      	i ++ ) {						    	}							  
    di [ i ] . push_back ( i ) ;			      	  di [ i ] = new Vector < > ( ) ;			    	di [ i ] [ i ] = i ;					  
  }							      	  mu [ i ] = new Vector < > ( ) ;			      }								  
  for ( int i = 1 ;					      	}							      for ( int i = 1 ;						  
  i <= m ;						      	for ( int i = 1 ;					      i <= m ;							  
  i ++ ) dp [ 1 ] [ i ] = 1 ;				      	i <= m ;						      i ++ ) {							  
  for ( int i = 2 ;					      	i ++ ) {						    	dp [ 1 ] [ i ] = 1 ;					  
  i <= n ;						      	  for ( int j = 2 * i ;					      }								  
  i ++ ) {						      	  j <= m ;						      for ( int i = 2 ;						  
    for ( int j = 1 ;					      	  j += i ) {						      i <= n ;							  
    j <= m ;						      	    di [ j ] . add ( i ) ;				      i ++ ) {							  
    j ++ ) {						      	    mu [ i ] . add ( j ) ;				    	for ( int j = 1 ;					  
      dp [ i ] [ j ] = 0 ;				      	  }							    	j <= m ;						  
      for ( auto x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1  	  di [ i ] . add ( i ) ;				    	j ++ ) {						  
      for ( auto x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1  	}							    	  dp [ i ] [ j ] = 0 ;					  
    }							      	for ( int i = 1 ;					    	  for ( int x : di [ j ] ) {				  
  }							      	i <= m ;						    	    dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;		  
  int ans = 0 ;						      	i ++ ) dp [ 1 ] [ i ] = 1 ;				    	  }							  
  for ( int i = 1 ;					      	for ( int i = 2 ;					    	  for ( int x : mu [ j ] ) {				  
  i <= m ;						      	i <= n ;						    	    dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;		  
  i ++ ) {						      	i ++ ) {						    	  }							  
    ans += dp [ n ] [ i ] ;				      	  for ( int j = 1 ;					    	}							  
    di [ i ] . clear ( ) ;				      	  j <= m ;						      }								  
    mu [ i ] . clear ( ) ;				      	  j ++ ) {						      int ans = 0 ;						  
  }							      	    dp [ i ] [ j ] = 0 ;				      for ( int i = 1 ;						  
  return ans ;						      	    for ( Integer x : di [ j ] ) dp [ i ] [ j ] += dp [ i -   i <= m ;							  
}							      	    for ( Integer x : mu [ j ] ) dp [ i ] [ j ] += dp [ i -   i ++ ) {							  
							      	  }							    	ans += dp [ n ] [ i ] ;					  
							      	}							    	di [ i ] = 0 ;						  
							      	int ans = 0 ;						    	mu [ i ] = 0 ;						  
							      	for ( int i = 1 ;					      }								  
							      	i <= m ;						      return ans ;						  
							      	i ++ ) {						    }								  
							      	  ans += dp [ n ] [ i ] ;				    								  
							      	  di [ i ] . clear ( ) ;				    								  
							      	  mu [ i ] . clear ( ) ;				    								  
							      	}							    								  
							      	return ans ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1		      MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1		    MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1		  MAXIMUM_DECIMAL_VALUE_PATH_IN_A_BINARY_MATRIX_1
--							      --							    --								  --
long long int MaximumDecimalValue ( int mat [ ] [ N ] , int n static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) {  public static long maximumDecimalValue ( int [ ] mat , int n  script_not_found : None
  int dp [ n ] [ n ] ;					      	int dp [ ] [ ] = new int [ n ] [ n ] ;			      int [ ] dp = new int [ n ] ;				  
  memset ( dp , 0 , sizeof ( dp ) ) ;			      	if ( mat [ 0 ] [ 0 ] == 1 ) {				      Arrays . fill ( dp , 0 ) ;				  
  if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1 ;	      	  dp [ 0 ] [ 0 ] = 1 ;					      if ( mat [ 0 ] [ 0 ] == 1 ) {				  
  for ( int i = 1 ;					      	}							    	dp [ 0 ] = 1 ;						  
  i < n ;						      	for ( int i = 1 ;					      }								  
  i ++ ) {						      	i < n ;							      for ( int i = 1 ;						  
    if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i 	i ++ ) {						      i < n ;							  
    else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;		      	  if ( mat [ 0 ] [ i ] == 1 ) {				      i ++ ) {							  
  }							      	    dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math .  	if ( mat [ 0 ] [ i ] == 1 ) {				  
  for ( int i = 1 ;					      	  }							    	  dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + Math . pow ( 2 ,  
  i < n ;						      	  else {						    	}							  
  i ++ ) {						      	    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;		    	else {							  
    if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] 	  }							    	  dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;			  
    else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;		      	}							    	}							  
  }							      	for ( int i = 1 ;					      }								  
  for ( int i = 1 ;					      	i < n ;							      for ( int i = 1 ;						  
  i < n ;						      	i ++ ) {						      i < n ;							  
  i ++ ) {						      	  if ( mat [ i ] [ 0 ] == 1 ) {				      i ++ ) {							  
    for ( int j = 1 ;					      	    dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math .  	if ( mat [ i ] [ 0 ] == 1 ) {				  
    j < n ;						      	  }							    	  dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + Math . pow ( 2 ,  
    j ++ ) {						      	  else {						    	}							  
      if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ 	    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;		    	else {							  
      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i 	  }							    	  dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;			  
    }							      	}							    	}							  
  }							      	for ( int i = 1 ;					      }								  
  return dp [ n - 1 ] [ n - 1 ] ;			      	i < n ;							      for ( int i = 1 ;						  
}							      	i ++ ) {						      i < n ;							  
							      	  for ( int j = 1 ;					      i ++ ) {							  
							      	  j < n ;						    	for ( int j = 1 ;					  
							      	  j ++ ) {						    	j < n ;							  
							      	    if ( mat [ i ] [ j ] == 1 ) {			    	j ++ ) {						  
							      	      dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j  	  if ( mat [ i ] [ j ] == 1 ) {				  
							      	    }							    	    dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 
							      	    else {						    	  }							  
							      	      dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 	  else {						  
							      	    }							    	    dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp 
							      	  }							    	  }							  
							      	}							    	}							  
							      	return dp [ n - 1 ] [ n - 1 ] ;				      }								  
							      }								      return dp [ n - 1 ] [ n - 1 ] ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIRECTION_LAST_SQUARE_BLOCK				      DIRECTION_LAST_SQUARE_BLOCK				    DIRECTION_LAST_SQUARE_BLOCK					  DIRECTION_LAST_SQUARE_BLOCK
--							      --							    --								  --
void direction ( ll R , ll C ) {			      static void direction ( int R , int C ) {			    public static void direction ( long R , long C ) {		  script_not_found : None
  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {	      	if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {	      if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {	  
    cout << "Left" << endl ;				      	  System . out . println ( "Left" ) ;			    	System . out . println ( "Left" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {	      	if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {	      if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {	  
    cout << "Up" << endl ;				      	  System . out . println ( "Up" ) ;			    	System . out . println ( "Up" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {		      	if ( R == C && R % 2 != 0 && C % 2 != 0 ) {		      if ( R == C && R % 2 != 0 && C % 2 != 0 ) {		  
    cout << "Right" << endl ;				      	  System . out . println ( "Right" ) ;			    	System . out . println ( "Right" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {		      	if ( R == C && R % 2 == 0 && C % 2 == 0 ) {		      if ( R == C && R % 2 == 0 && C % 2 == 0 ) {		  
    cout << "Left" << endl ;				      	  System . out . println ( "Left" ) ;			    	System . out . println ( "Left" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {	      	if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {	      if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {	  
    cout << "Right" << endl ;				      	  System . out . println ( "Right" ) ;			    	System . out . println ( "Right" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {	      	if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {	      if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {	  
    cout << "Down" << endl ;				      	  System . out . println ( "Down" ) ;			    	System . out . println ( "Down" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {	      	if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {	      if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {	  
    cout << "Left" << endl ;				      	  System . out . println ( "Left" ) ;			    	System . out . println ( "Left" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {	      	if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {	      if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {	  
    cout << "Up" << endl ;				      	  System . out . println ( "Up" ) ;			    	System . out . println ( "Up" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {	      	if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {	      if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {	  
    cout << "Down" << endl ;				      	  System . out . println ( "Down" ) ;			    	System . out . println ( "Down" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {	      	if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {	      if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {	  
    cout << "Right" << endl ;				      	  System . out . println ( "Right" ) ;			    	System . out . println ( "Right" ) ;			  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER FIND_THE_SMALLEST_WINDOW_IN_A_STRING_CONTAINING_ALL_CHARACTER
--							      --							    --								  --
string findSubString ( string str , string pat ) {	      static String findSubString ( String str , String pat ) {	    public static String findSubString ( String str , String pat  script_not_found : None
  int len1 = str . length ( ) ;				      	int len1 = str . length ( ) ;				      int len1 = str . length ( ) ;				  
  int len2 = pat . length ( ) ;				      	int len2 = pat . length ( ) ;				      int len2 = pat . length ( ) ;				  
  if ( len1 < len2 ) {					      	if ( len1 < len2 ) {					      if ( len1 < len2 ) {					  
    cout << "No such window exists" ;			      	  System . out . println ( "No such window exists" ) ;	    	System . out . println ( "No such window exists" ) ;	  
    return "" ;						      	  return "" ;						    	return "" ;						  
  }							      	}							      }								  
  int hash_pat [ no_of_chars ] = {			      	int hash_pat [ ] = new int [ no_of_chars ] ;		      int [ ] hashPat = new int [ no_of_chars ] ;		  
    0 }							      	int hash_str [ ] = new int [ no_of_chars ] ;		      int [ ] hashStr = new int [ no_of_chars ] ;		  
    ;							      	for ( int i = 0 ;					      for ( int i = 0 ;						  
    int hash_str [ no_of_chars ] = {			      	i < len2 ;						      i < len2 ;						  
      0 }						      	i ++ ) hash_pat [ pat . charAt ( i ) ] ++ ;		      i ++ ) {							  
      ;							      	int start = 0 , start_index = - 1 , min_len = Integer . MAX 	hashPat [ pat . charAt ( i ) ] ++ ;			  
      for ( int i = 0 ;					      	int count = 0 ;						      }								  
      i < len2 ;					      	for ( int j = 0 ;					      int start = 0 , startIndex = - 1 , minLen = Integer . MAX_V 
      i ++ ) hash_pat [ pat [ i ] ] ++ ;		      	j < len1 ;						      int count = 0 ;						  
      int start = 0 , start_index = - 1 , min_len = INT_MAX ; 	j ++ ) {						      for ( int j = 0 ;						  
      int count = 0 ;					      	  hash_str [ str . charAt ( j ) ] ++ ;			      j < len1 ;						  
      for ( int j = 0 ;					      	  if ( hash_pat [ str . charAt ( j ) ] != 0 && hash_str [ s   j ++ ) {							  
      j < len1 ;					      	  if ( count == len2 ) {				    	hashStr [ str . charAt ( j ) ] ++ ;			  
      j ++ ) {						      	    while ( hash_str [ str . charAt ( start ) ] > hash_pat  	if ( hashPat [ str . charAt ( j ) ] != 0 && hashStr [ str 
	hash_str [ str [ j ] ] ++ ;			      	      if ( hash_str [ str . charAt ( start ) ] > hash_pat [ 	  count ++ ;						  
	if ( hash_pat [ str [ j ] ] != 0 && hash_str [ str [  	      start ++ ;					    	}							  
	if ( count == len2 ) {				      	    }							    	if ( count == len2 ) {					  
	  while ( hash_str [ str [ start ] ] > hash_pat [ str 	    int len_window = j - start + 1 ;			    	  while ( hashStr [ str . charAt ( start ) ] > hashPat [  
	    if ( hash_str [ str [ start ] ] > hash_pat [ str  	    if ( min_len > len_window ) {			    	    if ( hashStr [ str . charAt ( start ) ] > hashPat [ s 
	    start ++ ;					      	      min_len = len_window ;				    	      hashStr [ str . charAt ( start ) ] -- ;		  
	  }						      	      start_index = start ;				    	    }							  
	  int len_window = j - start + 1 ;		      	    }							    	    start ++ ;						  
	  if ( min_len > len_window ) {			      	  }							    	  }							  
	    min_len = len_window ;			      	}							    	  int lenWindow = j - start + 1 ;			  
	    start_index = start ;			      	if ( start_index == - 1 ) {				    	  if ( minLen > lenWindow ) {				  
	  }						      	  System . out . println ( "No such window exists" ) ;	    	    minLen = lenWindow ;				  
	}						      	  return "" ;						    	    startIndex = start ;				  
      }							      	}							    	  }							  
      if ( start_index == - 1 ) {			      	return str . substring ( start_index , start_index + min_le 	}							  
	cout << "No such window exists" ;		      }								      }								  
	return "" ;					      								      if ( startIndex == - 1 ) {				  
      }							      								    	System . out . println ( "No such window exists" ) ;	  
      return str . substr ( start_index , min_len ) ;	      								    	return "" ;						  
    }							      								      }								  
							      								      return str . substring ( startIndex , minLen ) ;		  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_FOUR_SQUARE_IDENTITY_1				      EULERS_FOUR_SQUARE_IDENTITY_1				    EULERS_FOUR_SQUARE_IDENTITY_1				  EULERS_FOUR_SQUARE_IDENTITY_1
--							      --							    --								  --
void checkEulerFourSquareIdentity ( int a , int b ) {	      public static void checkEulerFourSquareIdentity ( int a , int public static void checkEulerFourSquareIdentity ( int a , int script_not_found : None
  int ab = a * b ;					      	int ab = a * b ;					      int ab = a * b ;						  
  bool flag = false ;					      	boolean flag = false ;					      boolean flag = false ;					  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( i * i <= ab ) {				      	while ( i * i <= ab ) {					      while ( i * i <= ab ) {					  
    int j = i ;						      	  int j = i ;						    	int j = i ;						  
    while ( i * i + j * j <= ab ) {			      	  while ( i * i + j * j <= ab ) {			    	while ( i * i + j * j <= ab ) {				  
      int k = j ;					      	    int k = j ;						    	  int k = j ;						  
      while ( i * i + j * j + k * k <= ab ) {		      	    while ( i * i + j * j + k * k <= ab ) {		    	  while ( i * i + j * j + k * k <= ab ) {		  
	double l = sqrt ( ab - ( i * i + j * j + k * k ) ) ;  	      double l = Math . sqrt ( ab - ( i * i + j * j + k * k 	    double l = Math . sqrt ( ab - ( i * i + j * j + k * k 
	if ( floor ( l ) == ceil ( l ) && l >= k ) {	      	      if ( Math . floor ( l ) == Math . ceil ( l ) && l >=  	    if ( Math . floor ( l ) == Math . ceil ( l ) && l >=  
	  flag = true ;					      		flag = true ;					    	      flag = true ;					  
	  cout << "i = " << i << "\n" ;			      		System . out . print ( "i = " + i + "\n" ) ;	    	      System . out . println ( "i = " + i + "\n" ) ;	  
	  cout << "j = " << j << "\n" ;			      		System . out . print ( "j = " + j + "\n" ) ;	    	      System . out . println ( "j = " + j + "\n" ) ;	  
	  cout << "k = " << k << "\n" ;			      		System . out . print ( "k = " + k + "\n" ) ;	    	      System . out . println ( "k = " + k + "\n" ) ;	  
	  cout << "l = " << ( int ) l << "\n" ;		      		System . out . print ( "l = " + ( int ) l + "\n" )  	      System . out . println ( "l = " + ( int ) l + "\n"  
	  cout << "Product of " << a << " and " << b << " can 		System . out . print ( "Product of " + a + " and "  	      System . out . println ( "Product of " + a + " and  
	  cout << ab + " = " << i << "*" << i << " + " << j < 		System . out . print ( ab + " = " + i + "*" + i + " 	      System . out . println ( ab + " = " + i + "*" + i + 
	}						      	      }							    	    }							  
	k += 1 ;					      	      k += 1 ;						    	    k += 1 ;						  
      }							      	    }							    	  }							  
      j += 1 ;						      	    j += 1 ;						    	  j += 1 ;						  
    }							      	  }							    	}							  
    i += 1 ;						      	  i += 1 ;						    	i += 1 ;						  
  }							      	}							      }								  
  if ( flag == false ) {				      	if ( flag == false ) {					      if ( flag == false ) {					  
    cout << "Solution doesn't exist!\n" ;		      	  System . out . println ( "Solution doesn't exist!" ) ;    	System . out . println ( "Solution doesn't exist!" ) ;	  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_GEOMETRIC_PROGRESSION				      LONGEST_GEOMETRIC_PROGRESSION				    LONGEST_GEOMETRIC_PROGRESSION				  LONGEST_GEOMETRIC_PROGRESSION
--							      --							    --								  --
int lenOfLongestGP ( int set [ ] , int n ) {		      static int lenOfLongestGP ( int set [ ] , int n ) {	    public static int lenOfLongestGP ( int [ ] set , int n ) {	  script_not_found : None
  if ( n < 2 ) return n ;				      	if ( n < 2 ) {						      if ( n < 2 ) return n ;					  
  if ( n == 2 ) return ( set [ 1 ] % set [ 0 ] == 0 ) ;	      	  return n ;						      if ( n == 2 ) return ( set [ 1 ] % set [ 0 ] == 0 ) ? 0 : 1 
  sort ( set , set + n ) ;				      	}							      Arrays . sort ( set ) ;					  
  int L [ n ] [ n ] ;					      	if ( n == 2 ) {						      int [ ] [ ] L = new int [ n ] [ n ] ;			  
  int llgp = 1 ;					      	  return ( set [ 1 ] % set [ 0 ] == 0 ? 1 : 0 ) ;	      int llgp = 1 ;						  
  for ( int i = 0 ;					      	}							      for ( int i = 0 ;						  
  i < n ;						      	Arrays . sort ( set ) ;					      i < n ;							  
  ++ i ) if ( set [ n - 1 ] % set [ i ] == 0 ) L [ i ] [ n -  	int L [ ] [ ] = new int [ n ] [ n ] ;			      ++ i ) if ( set [ n - 1 ] % set [ i ] == 0 ) L [ i ] [ n -  
  else L [ i ] [ n - 1 ] = 1 ;				      	int llgp = 1 ;						      else L [ i ] [ n - 1 ] = 1 ;				  
  for ( int j = n - 2 ;					      	for ( int i = 0 ;					      for ( int j = n - 2 ;					  
  j >= 1 ;						      	i < n ;							      j >= 1 ;							  
  -- j ) {						      	++ i ) {						      -- j ) {							  
    int i = j - 1 , k = j + 1 ;				      	  if ( set [ n - 1 ] % set [ i ] == 0 ) {		    	int i = j - 1 , k = j + 1 ;				  
    while ( i >= 0 && k <= n - 1 ) {			      	    L [ i ] [ n - 1 ] = 2 ;				    	while ( i >= 0 && k <= n - 1 ) {			  
      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) ++ 	  }							    	  if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) ++ 
      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] 	  else {						    	  else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] 
	if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2 ; 	    L [ i ] [ n - 1 ] = 1 ;				    	    if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2 ; 
	else L [ i ] [ j ] = 1 ;			      	  }							    	    else L [ i ] [ j ] = 1 ;				  
	-- i ;						      	}							    	    -- i ;						  
      }							      	for ( int j = n - 2 ;					    	  }							  
      else {						      	j >= 1 ;						    	  else {						  
	L [ i ] [ j ] = L [ j ] [ k ] + 1 ;		      	-- j ) {						    	    L [ i ] [ j ] = L [ j ] [ k ] + 1 ;			  
	if ( L [ i ] [ j ] > llgp ) llgp = L [ i ] [ j ] ;    	  int i = j - 1 , k = j + 1 ;				    	    if ( L [ i ] [ j ] > llgp ) llgp = L [ i ] [ j ] ;	  
	-- i ;						      	  while ( i >= 0 && k <= n - 1 ) {			    	    -- i ;						  
	++ k ;						      	    if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) {  	    ++ k ;						  
      }							      	      ++ k ;						    	  }							  
    }							      	    }							    	}							  
    while ( i >= 0 ) {					      	    else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] 	while ( i >= 0 ) {					  
      if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2 ;   	      if ( set [ j ] % set [ i ] == 0 ) {		    	  if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2 ;	  
      else L [ i ] [ j ] = 1 ;				      		L [ i ] [ j ] = 2 ;				    	  else L [ i ] [ j ] = 1 ;				  
      -- i ;						      	      }							    	  -- i ;						  
    }							      	      else {						    	}							  
  }							      		L [ i ] [ j ] = 1 ;				      }								  
  return llgp ;						      	      }							      return llgp ;						  
}							      	      -- i ;						    }								  
							      	    }							    								  
							      	    else {						    								  
							      	      L [ i ] [ j ] = L [ j ] [ k ] + 1 ;		    								  
							      	      if ( L [ i ] [ j ] > llgp ) {			    								  
							      		llgp = L [ i ] [ j ] ;				    								  
							      	      }							    								  
							      	      -- i ;						    								  
							      	      ++ k ;						    								  
							      	    }							    								  
							      	  }							    								  
							      	  while ( i >= 0 ) {					    								  
							      	    if ( set [ j ] % set [ i ] == 0 ) {			    								  
							      	      L [ i ] [ j ] = 2 ;				    								  
							      	    }							    								  
							      	    else {						    								  
							      	      L [ i ] [ j ] = 1 ;				    								  
							      	    }							    								  
							      	    -- i ;						    								  
							      	  }							    								  
							      	}							    								  
							      	return llgp ;						    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOOLITTLE_ALGORITHM_LU_DECOMPOSITION			      DOOLITTLE_ALGORITHM_LU_DECOMPOSITION			    DOOLITTLE_ALGORITHM_LU_DECOMPOSITION			  DOOLITTLE_ALGORITHM_LU_DECOMPOSITION
--							      --							    --								  --
void luDecomposition ( int mat [ ] [ MAX ] , int n ) {	      static void luDecomposition ( int [ ] [ ] mat , int n ) {	    public static void luDecomposition ( int mat [ ] [ ] , int n  script_not_found : None
  int lower [ n ] [ n ] , upper [ n ] [ n ] ;		      	int [ ] [ ] lower = new int [ n ] [ n ] ;		      int lower [ ] [ ] , upper [ ] [ ] ;			  
  memset ( lower , 0 , sizeof ( lower ) ) ;		      	int [ ] [ ] upper = new int [ n ] [ n ] ;		      Arrays . fill ( lower , 0 ) ;				  
  memset ( upper , 0 , sizeof ( upper ) ) ;		      	for ( int i = 0 ;					      Arrays . fill ( upper , 0 ) ;				  
  for ( int i = 0 ;					      	i < n ;							      for ( int i = 0 ;						  
  i < n ;						      	i ++ ) {						      i < n ;							  
  i ++ ) {						      	  for ( int k = i ;					      i ++ ) {							  
    for ( int k = i ;					      	  k < n ;						    	for ( int k = i ;					  
    k < n ;						      	  k ++ ) {						    	k < n ;							  
    k ++ ) {						      	    int sum = 0 ;					    	k ++ ) {						  
      int sum = 0 ;					      	    for ( int j = 0 ;					    	  int sum = 0 ;						  
      for ( int j = 0 ;					      	    j < i ;						    	  for ( int j = 0 ;					  
      j < i ;						      	    j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) 	  j < i ;						  
      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) 	    upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;		    	  j ++ ) {						  
      upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;	      	  }							    	    sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;	  
    }							      	  for ( int k = i ;					    	  }							  
    for ( int k = i ;					      	  k < n ;						    	  upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;		  
    k < n ;						      	  k ++ ) {						    	}							  
    k ++ ) {						      	    if ( i == k ) lower [ i ] [ i ] = 1 ;		    	for ( int k = i ;					  
      if ( i == k ) lower [ i ] [ i ] = 1 ;		      	    else {						    	k < n ;							  
      else {						      	      int sum = 0 ;					    	k ++ ) {						  
	int sum = 0 ;					      	      for ( int j = 0 ;					    	  if ( i == k ) {					  
	for ( int j = 0 ;				      	      j < i ;						    	    lower [ i ] [ i ] = 1 ;				  
	j < i ;						      	      j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] 	  }							  
	j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] 	      lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper 	  else {						  
	lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper 	    }							    	    int sum = 0 ;					  
      }							      	  }							    	    for ( int j = 0 ;					  
    }							      	}							    	    j < i ;						  
  }							      	System . out . println ( setw ( 2 ) + "	    Lower Triangula 	    j ++ ) {						  
  cout << setw ( 6 ) << "      Lower Triangular" << setw ( 32 	for ( int i = 0 ;					    	      sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;  
  for ( int i = 0 ;					      	i < n ;							    	    }							  
  i < n ;						      	i ++ ) {						    	    lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper 
  i ++ ) {						      	  for ( int j = 0 ;					    	  }							  
    for ( int j = 0 ;					      	  j < n ;						    	}							  
    j < n ;						      	  j ++ ) System . out . print ( setw ( 4 ) + lower [ i ] [    }								  
    j ++ ) cout << setw ( 6 ) << lower [ i ] [ j ] << "\t" ;  	  System . out . print ( "\t" ) ;			      System . out . println ( String . format ( "	Lower Tri 
    cout << "\t" ;					      	  for ( int j = 0 ;					      for ( int i = 0 ;						  
    for ( int j = 0 ;					      	  j < n ;						      i < n ;							  
    j < n ;						      	  j ++ ) System . out . print ( setw ( 4 ) + upper [ i ] [    i ++ ) {							  
    j ++ ) cout << setw ( 6 ) << upper [ i ] [ j ] << "\t" ;  	  System . out . print ( "\n" ) ;			    	for ( int j = 0 ;					  
    cout << endl ;					      	}							    	j < n ;							  
  }							      }								    	j ++ ) {						  
}							      								    	  System . out . print ( String . format ( "%d\t" , lower 
							      								    	}							  
							      								    	System . out . print ( "\t" ) ;				  
							      								    	for ( int j = 0 ;					  
							      								    	j < n ;							  
							      								    	j ++ ) {						  
							      								    	  System . out . print ( String . format ( "%d\t" , upper 
							      								    	}							  
							      								    	System . out . println ( ) ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS		      SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS			    SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS			  SHORTEST_POSSIBLE_COMBINATION_TWO_STRINGS
--							      --							    --								  --
void printSuperSeq ( string & a , string & b ) {	      static void printSuperSeq ( String a , String b ) {	    public static void printSuperSeq ( String a , String b ) {	  script_not_found : None
  int m = a . length ( ) , n = b . length ( ) ;		      	int m = a . length ( ) , n = b . length ( ) ;		      int m = a . length ( ) , n = b . length ( ) ;		  
  int dp [ m + 1 ] [ n + 1 ] ;				      	int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		      int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= m ;						      	i <= m ;						      i <= m ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j <= n ;						      	  j <= n ;						    	j <= n ;						  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( ! i ) dp [ i ] [ j ] = j ;			      	    if ( i == 0 ) dp [ i ] [ j ] = j ;			    	  if ( i == 0 ) {					  
      else if ( ! j ) dp [ i ] [ j ] = i ;		      	    else if ( j == 0 ) dp [ i ] [ j ] = i ;		    	    dp [ i ] [ j ] = j ;				  
      else if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 	    else if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 )  	  }							  
      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp 	    else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j 	  else if ( j == 0 ) {					  
    }							      	  }							    	    dp [ i ] [ j ] = i ;				  
  }							      	}							    	  }							  
  int index = dp [ m ] [ n ] ;				      	String res = "" ;					    	  else if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 )  
  string res ( index + 1 , '\0' ) ;			      	int i = m , j = n ;					    	    dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;	  
  int i = m , j = n ;					      	while ( i > 0 && j > 0 ) {				    	  }							  
  while ( i > 0 && j > 0 ) {				      	  if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {	    	  else {						  
    if ( a [ i - 1 ] == b [ j - 1 ] ) {			      	    res = a . charAt ( i - 1 ) + res ;			    	    dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ]  
      res [ index - 1 ] = a [ i - 1 ] ;			      	    i -- ;						    	  }							  
      i -- ;						      	    j -- ;						    	}							  
      j -- ;						      	  }							      }								  
      index -- ;					      	  else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {	      int index = dp [ m ] [ n ] ;				  
    }							      	    res = a . charAt ( i - 1 ) + res ;			      char [ ] res = new char [ index + 1 ] ;			  
    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {     	    i -- ;						      int i = m , j = n ;					  
      res [ index - 1 ] = a [ i - 1 ] ;			      	  }							      while ( i > 0 && j > 0 ) {				  
      i -- ;						      	  else {						    	if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {	  
      index -- ;					      	    res = b . charAt ( j - 1 ) + res ;			    	  res [ index - 1 ] = a . charAt ( i - 1 ) ;		  
    }							      	    j -- ;						    	  i -- ;						  
    else {						      	  }							    	  j -- ;						  
      res [ index - 1 ] = b [ j - 1 ] ;			      	}							    	  index -- ;						  
      j -- ;						      	while ( i > 0 ) {					    	}							  
      index -- ;					      	  res = a . charAt ( i - 1 ) + res ;			    	else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {	  
    }							      	  i -- ;						    	  res [ index - 1 ] = a . charAt ( i - 1 ) ;		  
  }							      	}							    	  i -- ;						  
  while ( i > 0 ) {					      	while ( j > 0 ) {					    	  index -- ;						  
    res [ index - 1 ] = a [ i - 1 ] ;			      	  res = b . charAt ( j - 1 ) + res ;			    	}							  
    i -- ;						      	  j -- ;						    	else {							  
    index -- ;						      	}							    	  res [ index - 1 ] = b . charAt ( j - 1 ) ;		  
  }							      	System . out . println ( res ) ;			    	  j -- ;						  
  while ( j > 0 ) {					      }								    	  index -- ;						  
    res [ index - 1 ] = b [ j - 1 ] ;			      								    	}							  
    j -- ;						      								      }								  
    index -- ;						      								      while ( i > 0 ) {						  
  }							      								    	res [ index - 1 ] = a . charAt ( i - 1 ) ;		  
  cout << res ;						      								    	i -- ;							  
}							      								    	index -- ;						  
							      								      }								  
							      								      while ( j > 0 ) {						  
							      								    	res [ index - 1 ] = b . charAt ( j - 1 ) ;		  
							      								    	j -- ;							  
							      								    	index -- ;						  
							      								      }								  
							      								      System . out . println ( res ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING    DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING    DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING	  DECODE_STRING_RECURSIVELY_ENCODED_COUNT_FOLLOWED_SUBSTRING
--							      --							    --								  --
string decode ( string str ) {				      static String decode ( String str ) {			    public static String decode ( String str ) {		  script_not_found : None
  stack < int > integerstack ;				      	Stack < Integer > integerstack = new Stack < > ( ) ;	      Stack < Integer > integerstack = new Stack < > ( ) ;	  
  stack < char > stringstack ;				      	Stack < Character > stringstack = new Stack < > ( ) ;	      Stack < Character > stringstack = new Stack < > ( ) ;	  
  string temp = "" , result = "" ;			      	String temp = "" , result = "" ;			      String temp = "" , result = "" ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . length ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int count = 0 ;					      	  int count = 0 ;					    	int count = 0 ;						  
    if ( str [ i ] >= '0' && str [ i ] <= '9' ) {	      	  if ( Character . isDigit ( str . charAt ( i ) ) ) {	    	if ( str . charAt ( i ) >= '0' && str . charAt ( i ) <= ' 
      while ( str [ i ] >= '0' && str [ i ] <= '9' ) {	      	    while ( Character . isDigit ( str . charAt ( i ) ) ) {  	  while ( str . charAt ( i ) >= '0' && str . charAt ( i ) 
	count = count * 10 + str [ i ] - '0' ;		      	      count = count * 10 + str . charAt ( i ) - '0' ;	    	    count = count * 10 + str . charAt ( i ) - '0' ;	  
	i ++ ;						      	      i ++ ;						    	    i ++ ;						  
      }							      	    }							    	  }							  
      i -- ;						      	    i -- ;						    	  i -- ;						  
      integerstack . push ( count ) ;			      	    integerstack . push ( count ) ;			    	  integerstack . push ( count ) ;			  
    }							      	  }							    	}							  
    else if ( str [ i ] == ']' ) {			      	  else if ( str . charAt ( i ) == ']' ) {		    	else if ( str . charAt ( i ) == ']' ) {			  
      temp = "" ;					      	    temp = "" ;						    	  temp = "" ;						  
      count = 0 ;					      	    count = 0 ;						    	  count = 0 ;						  
      if ( ! integerstack . empty ( ) ) {		      	    if ( ! integerstack . isEmpty ( ) ) {		    	  if ( ! integerstack . isEmpty ( ) ) {			  
	count = integerstack . top ( ) ;		      	      count = integerstack . peek ( ) ;			    	    count = integerstack . peek ( ) ;			  
	integerstack . pop ( ) ;			      	      integerstack . pop ( ) ;				    	    integerstack . pop ( ) ;				  
      }							      	    }							    	  }							  
      while ( ! stringstack . empty ( ) && stringstack . top  	    while ( ! stringstack . isEmpty ( ) && stringstack . pe 	  while ( ! stringstack . isEmpty ( ) && stringstack . pe 
	temp = stringstack . top ( ) + temp ;		      	      temp = stringstack . peek ( ) + temp ;		    	    temp = stringstack . peek ( ) + temp ;		  
	stringstack . pop ( ) ;				      	      stringstack . pop ( ) ;				    	    stringstack . pop ( ) ;				  
      }							      	    }							    	  }							  
      if ( ! stringstack . empty ( ) && stringstack . top ( ) 	    if ( ! stringstack . empty ( ) && stringstack . peek (  	  if ( ! stringstack . isEmpty ( ) && stringstack . peek  
      for ( int j = 0 ;					      	    for ( int j = 0 ;					    	    stringstack . pop ( ) ;				  
      j < count ;					      	    j < count ;						    	  }							  
      j ++ ) result = result + temp ;			      	    j ++ ) result = result + temp ;			    	  for ( int j = 0 ;					  
      for ( int j = 0 ;					      	    for ( int j = 0 ;					    	  j < count ;						  
      j < result . length ( ) ;				      	    j < result . length ( ) ;				    	  j ++ ) {						  
      j ++ ) stringstack . push ( result [ j ] ) ;	      	    j ++ ) stringstack . push ( result . charAt ( j ) ) ;   	    result = result + temp ;				  
      result = "" ;					      	    result = "" ;					    	  }							  
    }							      	  }							    	  for ( int j = 0 ;					  
    else if ( str [ i ] == '[' ) {			      	  else if ( str . charAt ( i ) == '[' ) {		    	  j < result . length ( ) ;				  
      if ( str [ i - 1 ] >= '0' && str [ i - 1 ] <= '9' ) str 	    if ( Character . isDigit ( str . charAt ( i - 1 ) ) ) s 	  j ++ ) {						  
      else {						      	    else {						    	    stringstack . push ( result . charAt ( j ) ) ;	  
	stringstack . push ( str [ i ] ) ;		      	      stringstack . push ( str . charAt ( i ) ) ;	    	  }							  
	integerstack . push ( 1 ) ;			      	      integerstack . push ( 1 ) ;			    	  result = "" ;						  
      }							      	    }							    	}							  
    }							      	  }							    	else if ( str . charAt ( i ) == '[' ) {			  
    else stringstack . push ( str [ i ] ) ;		      	  else stringstack . push ( str . charAt ( i ) ) ;	    	  if ( str . charAt ( i - 1 ) >= '0' && str . charAt ( i  
  }							      	}							    	    stringstack . push ( str . charAt ( i ) ) ;		  
  while ( ! stringstack . empty ( ) ) {			      	while ( ! stringstack . isEmpty ( ) ) {			    	  }							  
    result = stringstack . top ( ) + result ;		      	  result = stringstack . peek ( ) + result ;		    	  else {						  
    stringstack . pop ( ) ;				      	  stringstack . pop ( ) ;				    	    stringstack . push ( str . charAt ( i ) ) ;		  
  }							      	}							    	    integerstack . push ( 1 ) ;				  
  return result ;					      	return result ;						    	  }							  
}							      }								    	}							  
							      								    	else {							  
							      								    	  stringstack . push ( str . charAt ( i ) ) ;		  
							      								    	}							  
							      								      }								  
							      								      while ( ! stringstack . isEmpty ( ) ) {			  
							      								    	result = stringstack . peek ( ) + result ;		  
							      								    	stringstack . pop ( ) ;					  
							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE		      NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE		    NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE		  NUMBER_WAYS_INSERT_CHARACTER_INCREASE_LCS_ONE
--							      --							    --								  --
int numberofways ( string A , string B , int N , int M ) {    static int numberofways ( String A , String B , int N , int M public static int numberofways ( String A , String B , int N  script_not_found : None
  vector < int > pos [ MAX ] ;				      	Vector < Integer > [ ] pos = new Vector [ MAX ] ;	      int [ ] [ ] pos = new int [ MAX ] [ MAX ] ;		  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < M ;						      	i < MAX ;						      i < M ;							  
  i ++ ) pos [ B [ i ] ] . push_back ( i + 1 ) ;	      	i ++ ) pos [ i ] = new Vector < > ( ) ;			      i ++ ) {							  
  int dpl [ N + 2 ] [ M + 2 ] ;				      	for ( int i = 0 ;					    	pos [ B . charAt ( i ) ] [ i + 1 ] = i + 1 ;		  
  memset ( dpl , 0 , sizeof ( dpl ) ) ;			      	i < M ;							      }								  
  for ( int i = 1 ;					      	i ++ ) pos [ B . charAt ( i ) ] . add ( i + 1 ) ;	      int dpl [ ] [ N + 2 ] [ M + 2 ] ;				  
  i <= N ;						      	int [ ] [ ] dpl = new int [ N + 2 ] [ M + 2 ] ;		      Arrays . fill ( dpl , 0 , MAX ) ;				  
  i ++ ) {						      	for ( int i = 1 ;					      for ( int i = 1 ;						  
    for ( int j = 1 ;					      	i <= N ;						      i <= N ;							  
    j <= M ;						      	i ++ ) {						      i ++ ) {							  
    j ++ ) {						      	  for ( int j = 1 ;					    	for ( int j = 1 ;					  
      if ( A [ i - 1 ] == B [ j - 1 ] ) dpl [ i ] [ j ] = dpl 	  j <= M ;						    	j <= M ;						  
      else dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ] , dpl  	  j ++ ) {						    	j ++ ) {						  
    }							      	    if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpl 	  if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) {	  
  }							      	    else dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] 	    dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 ;	  
  int LCS = dpl [ N ] [ M ] ;				      	  }							    	  }							  
  int dpr [ N + 2 ] [ M + 2 ] ;				      	}							    	  else {						  
  memset ( dpr , 0 , sizeof ( dpr ) ) ;			      	int LCS = dpl [ N ] [ M ] ;				    	    dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] ,  
  for ( int i = N ;					      	int [ ] [ ] dpr = new int [ N + 2 ] [ M + 2 ] ;		    	  }							  
  i >= 1 ;						      	for ( int i = N ;					    	}							  
  i -- ) {						      	i >= 1 ;						      }								  
    for ( int j = M ;					      	i -- ) {						      int LCS = dpl [ N ] [ M ] ;				  
    j >= 1 ;						      	  for ( int j = M ;					      int dpr [ ] [ N + 2 ] [ M + 2 ] ;				  
    j -- ) {						      	  j >= 1 ;						      Arrays . fill ( dpr , 0 , MAX ) ;				  
      if ( A [ i - 1 ] == B [ j - 1 ] ) dpr [ i ] [ j ] = dpr 	  j -- ) {						      for ( int i = N ;						  
      else dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ] , dpr  	    if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpr   i >= 1 ;							  
    }							      	    else dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ]   i -- ) {							  
  }							      	  }							    	for ( int j = M ;					  
  int ans = 0 ;						      	}							    	j >= 1 ;						  
  for ( int i = 0 ;					      	int ans = 0 ;						    	j -- ) {						  
  i <= N ;						      	for ( int i = 0 ;					    	  if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) {	  
  i ++ ) {						      	i <= N ;						    	    dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 ;	  
    for ( int j = 0 ;					      	i ++ ) {						    	  }							  
    j < MAX ;						      	  for ( int j = 0 ;					    	  else {						  
    j ++ ) {						      	  j < MAX ;						    	    dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ] ,  
      for ( auto x : pos [ j ] ) {			      	  j ++ ) {						    	  }							  
	if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == 	    for ( int x : pos [ j ] ) {				    	}							  
	  ans ++ ;					      	      if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] ==   }								  
	  break ;					      		ans ++ ;					      int ans = 0 ;						  
	}						      		break ;						      for ( int i = 0 ;						  
      }							      	      }							      i <= N ;							  
    }							      	    }							      i ++ ) {							  
  }							      	  }							    	for ( int j = 0 ;					  
  return ans ;						      	}							    	j < MAX ;						  
}							      	return ans ;						    	j ++ ) {						  
							      }								    	  for ( int x : pos [ j ] ) {				  
							      								    	    if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == 
							      								    	      ans ++ ;						  
							      								    	      break ;						  
							      								    	    }							  
							      								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
