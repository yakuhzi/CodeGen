========================SOURCE============================    ==========================REF=============================    =========================HYPO=============================	  ==========================OUT=============================
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			      MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			    MAXIMUM_POINTS_INTERSECTION_N_CIRCLES			  MAXIMUM_POINTS_INTERSECTION_N_CIRCLES
--							      --							    --								  --
static int intersection ( int n ) {			      int intersection ( int n ) {				    int intersection ( int n ) {				  success : identical to gold
  return n * ( n - 1 ) ;				      	return n * ( n - 1 ) ;					      return n * ( n - 1 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_AREA_SQUARE					      PROGRAM_AREA_SQUARE					    PROGRAM_AREA_SQUARE						  PROGRAM_AREA_SQUARE
--							      --							    --								  --
static int areaSquare ( int side ) {			      int areaSquare ( int side ) {				    int area_square ( int side ) {				  success : None
  int area = side * side ;				      	int area = side * side ;				      int area = side * side ;					  
  return area ;						      	return area ;						      return area ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TURN_OFF_THE_RIGHTMOST_SET_BIT				      TURN_OFF_THE_RIGHTMOST_SET_BIT				    TURN_OFF_THE_RIGHTMOST_SET_BIT				  TURN_OFF_THE_RIGHTMOST_SET_BIT
--							      --							    --								  --
static int fun ( int n ) {				      int fun ( unsigned int n ) {				    int fun ( int n ) {						  success : None
  return n & ( n - 1 ) ;				      	return n & ( n - 1 ) ;					      return n & ( n - 1 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEXAGONAL_NUMBER					      HEXAGONAL_NUMBER						    HEXAGONAL_NUMBER						  HEXAGONAL_NUMBER
--							      --							    --								  --
int hexagonalNum ( int n ) {				      int hexagonalNum ( int n ) {				    int hexagonalNum ( int n ) {				  success : identical to gold
  return n * ( 2 * n - 1 ) ;				      	return n * ( 2 * n - 1 ) ;				      return n * ( 2 * n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CASSINIS_IDENTITY					      CASSINIS_IDENTITY						    CASSINIS_IDENTITY						  CASSINIS_IDENTITY
--							      --							    --								  --
static int cassini ( int n ) {				      int cassini ( int n ) {					    int cassini ( int n ) {					  success : identical to gold
  return ( n & 1 ) != 0 ? - 1 : 1 ;			      	return ( n & 1 ) ? - 1 : 1 ;				      return ( n & 1 ) ? - 1 : 1 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER_1				      ADD_1_TO_A_GIVEN_NUMBER_1					    ADD_1_TO_A_GIVEN_NUMBER_1					  ADD_1_TO_A_GIVEN_NUMBER_1
--							      --							    --								  --
static int addOne ( int x ) {				      int addOne ( int x ) {					    int addOne ( int x ) {					  success : identical to gold
  return ( - ( ~ x ) ) ;				      	return ( - ( ~ x ) ) ;					      return ( - ( ~ x ) ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_SQUARE_CIRCUMSCRIBED_CIRCLE			      AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				    AREA_SQUARE_CIRCUMSCRIBED_CIRCLE				  AREA_SQUARE_CIRCUMSCRIBED_CIRCLE
--							      --							    --								  --
static int find_Area ( int r ) {			      int find_Area ( int r ) {					    int find_Area ( int r ) {					  success : identical to gold
  return ( 2 * r * r ) ;				      	return ( 2 * r * r ) ;					      return ( 2 * r * r ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			      FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			    FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT			  FIND_WHETHER_GIVEN_INTEGER_POWER_3_NOT
--							      --							    --								  --
static boolean check ( int n ) {			      bool check ( int n ) {					    bool check ( int n ) {					  success : identical to gold
  return 1162261467 % n == 0 ;				      	return 1162261467 % n == 0 ;				      return 1162261467 % n == 0 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD				  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD
--							      --							    --								  --
public static boolean isEven ( int n ) {		      bool isEven ( int n ) {					    bool IsEven ( int n ) {					  success : None
  return ( n % 2 == 0 ) ;				      	return ( n % 2 == 0 ) ;					      return ( n % 2 == 0 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_PENTAGONAL_NUMBER					      NTH_PENTAGONAL_NUMBER					    NTH_PENTAGONAL_NUMBER					  NTH_PENTAGONAL_NUMBER
--							      --							    --								  --
int pentagonalNum ( int n ) {				      int pentagonalNum ( int n ) {				    int pentagonalNum ( int n ) {				  success : identical to gold
  return ( 3 * n * n - n ) / 2 ;			      	return ( 3 * n * n - n ) / 2 ;				      return ( 3 * n * n - n ) / 2 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE  PYTHON_PROGRAM_FIND_PERIMETER_CIRCUMFERENCE_SQUARE_RECTANGLE
--							      --							    --								  --
int Circumference ( int a ) {				      int Circumference ( int a ) {				    int Circumference ( int a ) {				  success : identical to gold
  return 4 * a ;					      	return 4 * a ;						      return 4 * a ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_MATCHSTICK_NUMBER				      TRIANGULAR_MATCHSTICK_NUMBER				    TRIANGULAR_MATCHSTICK_NUMBER				  TRIANGULAR_MATCHSTICK_NUMBER
--							      --							    --								  --
public static int numberOfSticks ( int x ) {		      int numberOfSticks ( int x ) {				    int numberOfSticks ( int x ) {				  success : identical to gold
  return ( 3 * x * ( x + 1 ) ) / 2 ;			      	return ( 3 * x * ( x + 1 ) ) / 2 ;			      return ( 3 * x * ( x + 1 ) ) / 2 ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HYPERCUBE_GRAPH						      HYPERCUBE_GRAPH						    HYPERCUBE_GRAPH						  HYPERCUBE_GRAPH
--							      --							    --								  --
static int power ( int n ) {				      int power ( int n ) {					    int power ( int n ) {					  success : identical to gold
  if ( n == 1 ) return 2 ;				      	if ( n == 1 ) return 2 ;				      if ( n == 1 ) return 2 ;					  
  return 2 * power ( n - 1 ) ;				      	return 2 * power ( n - 1 ) ;				      return 2 * power ( n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		      COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		    COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW		  COMPUTE_AVERAGE_TWO_NUMBERS_WITHOUT_OVERFLOW
--							      --							    --								  --
static int compute_average ( int a , int b ) {		      int compute_average ( int a , int b ) {			    int compute_average ( int a , int b ) {			  success : identical to gold
  return ( a + b ) / 2 ;				      	return ( a + b ) / 2 ;					      return ( a + b ) / 2 ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_BINOMIAL_COEFFICIENTS_1				      SUM_BINOMIAL_COEFFICIENTS_1				    SUM_BINOMIAL_COEFFICIENTS_1					  SUM_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
static int binomialCoeffSum ( int n ) {			      int binomialCoeffSum ( int n ) {				    int binomial_coeff_sum ( int n ) {				  success : None
  return ( 1 << n ) ;					      	return ( 1 << n ) ;					      return ( 1 << n ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_TWO_HALVES_SORTED				      SORT_ARRAY_TWO_HALVES_SORTED				    SORT_ARRAY_TWO_HALVES_SORTED				  SORT_ARRAY_TWO_HALVES_SORTED
--							      --							    --								  --
static void mergeTwoHalf ( int [ ] A , int n ) {	      void mergeTwoHalf ( int A [ ] , int n ) {			    void mergeTwoHalf ( int * A , int n ) {			  success : None
  Arrays . sort ( A ) ;					      	sort ( A , A + n ) ;					      std :: sort ( A , A + n ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GCD_ELEMENTS_GIVEN_RANGE				      GCD_ELEMENTS_GIVEN_RANGE					    GCD_ELEMENTS_GIVEN_RANGE					  GCD_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
static int rangeGCD ( int n , int m ) {			      int rangeGCD ( int n , int m ) {				    int range_gcd ( int n , int m ) {				  success : None
  return ( n == m ) ? n : 1 ;				      	return ( n == m ) ? n : 1 ;				      return ( n == m ) ? n : 1 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			      PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1			    PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1				  PROGRAM_PRINT_SUM_GIVEN_NTH_TERM_1
--							      --							    --								  --
static int summingSeries ( long n ) {			      int summingSeries ( long n ) {				    int summing_series ( long long n ) {			  success : None
  return ( int ) Math . pow ( n , 2 ) ;			      	return pow ( n , 2 ) ;					      return ( int ) pow ( n , 2 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_CIRCUMFERENCE_CIRCLE			      PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				    PROGRAM_FIND_CIRCUMFERENCE_CIRCLE				  PROGRAM_FIND_CIRCUMFERENCE_CIRCLE
--							      --							    --								  --
static double circumference ( double r ) {		      double circumference ( double r ) {			    double circumference ( double r ) {				  script_not_found : None
  double PI = 3.1415 ;					      	double cir = 2 * PI * r ;				      double PI = 3.1415 ;					  
  double cir = 2 * PI * r ;				      	return cir ;						      double cir = 2 * PI * r ;					  
  return cir ;						      }								      return cir ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_AN_INTEGER_WITH_3_5				      MULTIPLY_AN_INTEGER_WITH_3_5				    MULTIPLY_AN_INTEGER_WITH_3_5				  MULTIPLY_AN_INTEGER_WITH_3_5
--							      --							    --								  --
static int multiplyWith3Point5 ( int x ) {		      int multiplyWith3Point5 ( int x ) {			    int mul_with_3point5 ( int x ) {				  success : None
  return ( x << 1 ) + x + ( x >> 1 ) ;			      	return ( x << 1 ) + x + ( x >> 1 ) ;			      return ( x << 1 ) + x + ( x >> 1 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			      CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			    CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1			  CHECK_WHETHER_GIVEN_NUMBER_EVEN_ODD_1
--							      --							    --								  --
public static boolean isEven ( int n ) {		      bool isEven ( int n ) {					    bool IsEven ( int n ) {					  success : None
  if ( ( n & 1 ) == 0 ) return true ;			      	return ( ! ( n & 1 ) ) ;				      if ( ( n & 1 ) == 0 ) return true ;			  
  else return false ;					      }								      else return false ;					  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FACTORIAL_NUMBER				      C_PROGRAM_FACTORIAL_NUMBER				    C_PROGRAM_FACTORIAL_NUMBER					  C_PROGRAM_FACTORIAL_NUMBER
--							      --							    --								  --
static int factorial ( int n ) {			      unsigned int factorial ( unsigned int n ) {		    int factorial ( int n ) {					  success : None
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  return n * factorial ( n - 1 ) ;			      	return n * factorial ( n - 1 ) ;			      return n * factorial ( n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES		      HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			    HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES			  HEIGHT_COMPLETE_BINARY_TREE_HEAP_N_NODES
--							      --							    --								  --
static int height ( int N ) {				      int height ( int N ) {					    int height ( int N ) {					  success : None
  return ( int ) Math . ceil ( Math . log ( N + 1 ) / Math .  	return ceil ( log2 ( N + 1 ) ) - 1 ;			      return int ( ceil ( log ( N + 1 ) / log ( 2 ) ) ) - 1 ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY_1
--							      --							    --								  --
static int largest ( int [ ] arr , int n ) {		      int largest ( int arr [ ] , int n ) {			    int largest ( int arr [ ] , int n ) {			  success : None
  Arrays . sort ( arr ) ;				      	return * max_element ( arr , arr + n ) ;		      sort ( arr , arr + n ) ;					  
  return arr [ n - 1 ] ;				      }								      return arr [ n - 1 ] ;					  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_SLOPE_LINE					      PROGRAM_FIND_SLOPE_LINE					    PROGRAM_FIND_SLOPE_LINE					  PROGRAM_FIND_SLOPE_LINE
--							      --							    --								  --
static float slope ( float x1 , float y1 , float x2 , float y float slope ( float x1 , float y1 , float x2 , float y2 ) {   float slope ( float x1 , float y1 , float x2 , float y2 ) {	  success : identical to gold
  return ( y2 - y1 ) / ( x2 - x1 ) ;			      	return ( y2 - y1 ) / ( x2 - x1 ) ;			      return ( y2 - y1 ) / ( x2 - x1 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER
--							      --							    --								  --
static int factorial ( int n ) {			      unsigned int factorial ( unsigned int n ) {		    int factorial ( int n ) {					  success : None
  if ( n == 0 ) return 1 ;				      	if ( n == 0 ) return 1 ;				      if ( n == 0 ) return 1 ;					  
  return n * factorial ( n - 1 ) ;			      	return n * factorial ( n - 1 ) ;			      return n * factorial ( n - 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_SUBSTRINGS_STRING				      NUMBER_SUBSTRINGS_STRING					    NUMBER_SUBSTRINGS_STRING					  NUMBER_SUBSTRINGS_STRING
--							      --							    --								  --
static int countNonEmptySubstr ( String str ) {		      int countNonEmptySubstr ( string str ) {			    int countNonEmptySubstr ( string str ) {			  success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . size ( ) ;					  
  return n * ( n + 1 ) / 2 ;				      	return n * ( n + 1 ) / 2 ;				      return n * ( n + 1 ) / 2 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		      DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS		    DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS			  DETECT_IF_TWO_INTEGERS_HAVE_OPPOSITE_SIGNS
--							      --							    --								  --
static boolean oppositeSigns ( int x , int y ) {	      bool oppositeSigns ( int x , int y ) {			    bool oppositeSigns ( int x , int y ) {			  success : identical to gold
  return ( ( x ^ y ) < 0 ) ;				      	return ( ( x ^ y ) < 0 ) ;				      return ( ( x ^ y ) < 0 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NIBBLES_BYTE					      SWAP_TWO_NIBBLES_BYTE					    SWAP_TWO_NIBBLES_BYTE					  SWAP_TWO_NIBBLES_BYTE
--							      --							    --								  --
static int swapNibbles ( int x ) {			      int swapNibbles ( int x ) {				    int swapNibbles ( int x ) {					  success : identical to gold
  return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	      	return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	      return ( ( x & 0x0F ) << 4 | ( x & 0xF0 ) >> 4 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			      PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			    PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES			  PIZZA_CUT_PROBLEM_CIRCLE_DIVISION_LINES
--							      --							    --								  --
static int findMaximumPieces ( int n ) {		      int findMaximumPieces ( int n ) {				    int findMaximumPieces ( int n ) {				  success : identical to gold
  return 1 + n * ( n + 1 ) / 2 ;			      	return 1 + n * ( n + 1 ) / 2 ;				      return 1 + n * ( n + 1 ) / 2 ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		      COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		    COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER		  COMPUTE_MODULUS_DIVISION_BY_A_POWER_OF_2_NUMBER
--							      --							    --								  --
static int getModulo ( int n , int d ) {		      unsigned int getModulo ( unsigned int n , unsigned int d ) {  int getModulo ( int n , int d ) {				  success : None
  return ( n & ( d - 1 ) ) ;				      	return ( n & ( d - 1 ) ) ;				      return ( n & ( d - 1 ) ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_TERM_SERIES_2_12_36_80_150				      N_TH_TERM_SERIES_2_12_36_80_150				    N_TH_TERM_SERIES_2_12_36_80_150				  N_TH_TERM_SERIES_2_12_36_80_150
--							      --							    --								  --
public static int nthTerm ( int n ) {			      int nthTerm ( int n ) {					    int nth_term ( int n ) {					  success : None
  return ( n * n ) + ( n * n * n ) ;			      	return ( n * n ) + ( n * n * n ) ;			      return ( n * n ) + ( n * n * n ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_INCREASING_SUBSEQUENCE				      LONGEST_INCREASING_SUBSEQUENCE				    LONGEST_INCREASING_SUBSEQUENCE				  LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
static int lis ( int arr [ ] , int n ) {		      int lis ( int arr [ ] , int n ) {				    int lis ( int arr [ ] , int n ) {				  script_not_found : None
  max_ref = 1 ;						      	int max = 1 ;						      max_ref = 1 ;						  
  _lis ( arr , n ) ;					      	_lis ( arr , n , & max ) ;				      _lis ( arr , n ) ;					  
  return max_ref ;					      	return max ;						      return max_ref ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			      BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			    BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS			  BASIC_AND_EXTENDED_EUCLIDEAN_ALGORITHMS
--							      --							    --								  --
public static int gcd ( int a , int b ) {		      int gcd ( int a , int b ) {				    int gcd ( int a , int b ) {					  success : identical to gold
  if ( a == 0 ) return b ;				      	if ( a == 0 ) return b ;				      if ( a == 0 ) return b ;					  
  return gcd ( b % a , a ) ;				      	return gcd ( b % a , a ) ;				      return gcd ( b % a , a ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS_1				      BREAK_NUMBER_THREE_PARTS_1				    BREAK_NUMBER_THREE_PARTS_1					  BREAK_NUMBER_THREE_PARTS_1
--							      --							    --								  --
static long count_of_ways ( long n ) {			      ll count_of_ways ( ll n ) {				    long count_of_ways ( long n ) {				  script_not_found : None
  long count = 0 ;					      	ll count ;						      long count = 0 ;						  
  count = ( n + 1 ) * ( n + 2 ) / 2 ;			      	count = ( n + 1 ) * ( n + 2 ) / 2 ;			      count = ( n + 1 ) * ( n + 2 ) / 2 ;			  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		      FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1		    FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1			  FIND_SUM_EVEN_INDEX_BINOMIAL_COEFFICIENTS_1
--							      --							    --								  --
static int evenbinomialCoeffSum ( int n ) {		      int evenbinomialCoeffSum ( int n ) {			    int evenbinomial_coeff_sum ( int n ) {			  success : None
  return ( 1 << ( n - 1 ) ) ;				      	return ( 1 << ( n - 1 ) ) ;				      return ( 1 << ( n - 1 ) ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR    PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR	  PROGRAM_TO_FIND_REMAINDER_WITHOUT_USING_MODULO_OR_OPERATOR
--							      --							    --								  --
static int getRemainder ( int num , int divisor ) {	      int getRemainder ( int num , int divisor ) {		    int getRemainder ( int num , int divisor ) {		  success : identical to gold
  return ( num - divisor * ( num / divisor ) ) ;	      	return ( num - divisor * ( num / divisor ) ) ;		      return ( num - divisor * ( num / divisor ) ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_RECTANGLES_NM_GRID				      NUMBER_RECTANGLES_NM_GRID					    NUMBER_RECTANGLES_NM_GRID					  NUMBER_RECTANGLES_NM_GRID
--							      --							    --								  --
public static long rectCount ( int n , int m ) {	      int rectCount ( int n , int m ) {				    long rect_count ( int n , int m ) {				  success : None
  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;	      	return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		      return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10 EFFICIENT_WAY_CHECK_WHETHER_N_TH_FIBONACCI_NUMBER_MULTIPLE_10
--							      --							    --								  --
static boolean isMultipleOf10 ( int n ) {		      bool isMultipleOf10 ( int n ) {				    bool isMultipleOf10 ( int n ) {				  success : None
  if ( n % 15 == 0 ) return true ;			      	return ( n % 15 == 0 ) ;				      if ( n % 15 == 0 ) return true ;				  
  return false ;					      }								      return false ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_AREA_OCTAGON				      PROGRAM_CALCULATE_AREA_OCTAGON				    PROGRAM_CALCULATE_AREA_OCTAGON				  PROGRAM_CALCULATE_AREA_OCTAGON
--							      --							    --								  --
static double areaOctagon ( double side ) {		      double areaOctagon ( double side ) {			    double areaOctagon ( double side ) {			  success : identical to gold
  return ( float ) ( 2 * ( 1 + Math . sqrt ( 2 ) ) * side * s 	return ( float ) ( 2 * ( 1 + sqrt ( 2 ) ) * side * side ) ;   return ( float ) ( 2 * ( 1 + sqrt ( 2 ) ) * side * side ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			      PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			    PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON			  PROGRAM_FOR_SURFACE_AREA_OF_OCTAHEDRON
--							      --							    --								  --
static double surface_area_octahedron ( double side ) {	      double surface_area_octahedron ( double side ) {		    double surface_area_octahedron ( double side ) {		  success : identical to gold
  return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;    	return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) ) ;	      return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_2					      SUM_PAIRWISE_PRODUCTS_2					    SUM_PAIRWISE_PRODUCTS_2					  SUM_PAIRWISE_PRODUCTS_2
--							      --							    --								  --
static int findSum ( int n ) {				      long long int findSum ( int n ) {				    int findSum ( int n ) {					  success : None
  return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;     	return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	      return n * ( n + 1 ) * ( n + 2 ) * ( 3 * n + 1 ) / 24 ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			      PROGRAM_CALCULATE_VOLUME_OCTAHEDRON			    PROGRAM_CALCULATE_VOLUME_OCTAHEDRON				  PROGRAM_CALCULATE_VOLUME_OCTAHEDRON
--							      --							    --								  --
static double vol_of_octahedron ( double side ) {	      double vol_of_octahedron ( double side ) {		    double vol_of_octahedron ( double side ) {			  success : identical to gold
  return ( ( side * side * side ) * ( Math . sqrt ( 2 ) / 3 ) 	return ( ( side * side * side ) * ( sqrt ( 2 ) / 3 ) ) ;      return ( ( side * side * side ) * ( sqrt ( 2 ) / 3 ) ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		      PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		    PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP		  PROBABILITY_THREE_RANDOMLY_CHOSEN_NUMBERS_AP
--							      --							    --								  --
static double procal ( int n ) {			      double procal ( int n ) {					    double procal ( int n ) {					  success : identical to gold
  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;	      	return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		      return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_3				      COUNT_SET_BITS_IN_AN_INTEGER_3				    COUNT_SET_BITS_IN_AN_INTEGER_3				  COUNT_SET_BITS_IN_AN_INTEGER_3
--							      --							    --								  --
public static int countSetBits ( int n ) {		      int countSetBits ( int n ) {				    int countSetBits ( int n ) {				  success : identical to gold
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return 0 ;					  
  else return 1 + countSetBits ( n & ( n - 1 ) ) ;	      	else return 1 + countSetBits ( n & ( n - 1 ) ) ;	      else return 1 + countSetBits ( n & ( n - 1 ) ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_1				      COUNT_SET_BITS_IN_AN_INTEGER_1				    COUNT_SET_BITS_IN_AN_INTEGER_1				  COUNT_SET_BITS_IN_AN_INTEGER_1
--							      --							    --								  --
public static int countSetBits ( int n ) {		      int countSetBits ( int n ) {				    int countSetBits ( int n ) {				  success : identical to gold
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return 0 ;					  
  else return ( n & 1 ) + countSetBits ( n >> 1 ) ;	      	else return ( n & 1 ) + countSetBits ( n >> 1 ) ;	      else return ( n & 1 ) + countSetBits ( n >> 1 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	      PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	    PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM	  PROGRAM_FOR_DEADLOCK_FREE_CONDITION_IN_OPERATING_SYSTEM
--							      --							    --								  --
static int Resources ( int process , int need ) {	      int Resources ( int process , int need ) {		    int Resources ( int process , int need ) {			  success : identical to gold
  int minResources = 0 ;				      	int minResources = 0 ;					      int minResources = 0 ;					  
  minResources = process * ( need - 1 ) + 1 ;		      	minResources = process * ( need - 1 ) + 1 ;		      minResources = process * ( need - 1 ) + 1 ;		  
  return minResources ;					      	return minResources ;					      return minResources ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
static boolean isPowerOfTwo ( int x ) {			      int bool isPowerOfTwo ( int x ) {				    bool IsPowerOfTwo ( unsigned int x ) {			  script_not_found : None
  return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;		      	return x && ( ! ( x & ( x - 1 ) ) ) ;			      return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SET_BITS_IN_AN_INTEGER_2				      COUNT_SET_BITS_IN_AN_INTEGER_2				    COUNT_SET_BITS_IN_AN_INTEGER_2				  COUNT_SET_BITS_IN_AN_INTEGER_2
--							      --							    --								  --
static int countSetBits ( int n ) {			      public : unsigned int countSetBits ( int n ) {		    int countSetBits ( int n ) {				  script_not_found : None
  int count = 0 ;					      	unsigned int count = 0 ;				      int count = 0 ;						  
  while ( n > 0 ) {					      	while ( n ) {						      while ( n ) {						  
    n &= ( n - 1 ) ;					      	  n &= ( n - 1 ) ;					    	n &= ( n - 1 ) ;					  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CALCULATE_VOLUME_ELLIPSOID			      PROGRAM_CALCULATE_VOLUME_ELLIPSOID			    PROGRAM_CALCULATE_VOLUME_ELLIPSOID				  PROGRAM_CALCULATE_VOLUME_ELLIPSOID
--							      --							    --								  --
public static float volumeOfEllipsoid ( float r1 , float r2 , float volumeOfEllipsoid ( float r1 , float r2 , float r3 ) {  float volumeOfEllipsoid ( float r1 , float r2 , float r3 ) {  success : None
  float pi = ( float ) 3.14 ;				      	float pi = 3.14 ;					      float pi = ( float ) 3.14 ;				  
  return ( float ) 1.33 * pi * r1 * r2 * r3 ;		      	return 1.33 * pi * r1 * r2 * r3 ;			      return ( float ) 1.33 * pi * r1 * r2 * r3 ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE      DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	    DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE	  DYNAMIC_PROGRAMMING_SET_3_LONGEST_INCREASING_SUBSEQUENCE
--							      --							    --								  --
static int lis ( int arr [ ] , int n ) {		      int lis ( int arr [ ] , int n ) {				    int lis ( int arr [ ] , int n ) {				  script_not_found : None
  max_ref = 1 ;						      	int max = 1 ;						      max_ref = 1 ;						  
  _lis ( arr , n ) ;					      	_lis ( arr , n , & max ) ;				      _lis ( arr , n ) ;					  
  return max_ref ;					      	return max ;						      return max_ref ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS		      SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			    SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS			  SUM_SERIES_0_6_0_06_0_006_0_0006_N_TERMS
--							      --							    --								  --
static double sumOfSeries ( int n ) {			      float sumOfSeries ( int n ) {				    double sum_of_series ( int n ) {				  success : None
  return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;      	return ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ;		      return ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			      PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1			    PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1				  PROGRAM_FOR_FACTORIAL_OF_A_NUMBER_1
--							      --							    --								  --
static int factorial ( int n ) {			      unsigned int factorial ( unsigned int n ) {		    int factorial ( int n ) {					  success : None
  int res = 1 , i ;					      	int res = 1 , i ;					      int res = 1 , i ;						  
  for ( i = 2 ;						      	for ( i = 2 ;						      for ( i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) res *= i ;					      	i ++ ) res *= i ;					      i ++ ) {							  
  return res ;						      	return res ;						    	res *= i ;						  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SORT_ARRAY_CONTAIN_1_N_VALUES				      SORT_ARRAY_CONTAIN_1_N_VALUES				    SORT_ARRAY_CONTAIN_1_N_VALUES				  SORT_ARRAY_CONTAIN_1_N_VALUES
--							      --							    --								  --
static void sortit ( int [ ] arr , int n ) {		      void sortit ( int arr [ ] , int n ) {			    void sortit ( int * arr , int n ) {				  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) arr [ i ] = i + 1 ;				  
    arr [ i ] = i + 1 ;					      	  arr [ i ] = i + 1 ;					    }								  
  }							      	}							    								  
}							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LONGEST_PALINDROME_SUBSTRING_SET_1			      LONGEST_PALINDROME_SUBSTRING_SET_1			    LONGEST_PALINDROME_SUBSTRING_SET_1				  LONGEST_PALINDROME_SUBSTRING_SET_1
--							      --							    --								  --
static void printSubStr ( String str , int low , int high ) { void printSubStr ( string str , int low , int high ) {	    void printSubStr ( const std :: string & str , int low , int  script_not_found : None
  System . out . println ( str . substring ( low , high + 1 ) 	for ( int i = low ;					      std :: cout << str . substr ( low , high + 1 ) << std :: en 
}							      	i <= high ;						    }								  
							      	++ i ) cout << str [ i ] ;				    								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1		      BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			    BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1			  BINARY_REPRESENTATION_OF_A_GIVEN_NUMBER_1
--							      --							    --								  --
static void bin ( Integer n ) {				      void bin ( unsigned n ) {					    void bin ( int32_t n ) {					  script_not_found : None
  if ( n > 1 ) bin ( n >> 1 ) ;				      	if ( n > 1 ) bin ( n >> 1 ) ;				      if ( n > 1 ) {						  
  System . out . printf ( "%d" , n & 1 ) ;		      	printf ( "%d" , n & 1 ) ;				    	bin ( n >> 1 ) ;					  
}							      }								      }								  
							      								      printf ( "%d\n" , n & 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1     SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	    SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1	  SUM_OF_ALL_ELEMENTS_UP_TO_NTH_ROW_IN_A_PASCALS_TRIANGLE_1
--							      --							    --								  --
static long calculateSum ( int n ) {			      long long int calculateSum ( int n ) {			    long long calculateSum ( int n ) {				  success : None
  long sum = 0 ;					      	long long int sum = 0 ;					      long long sum = 0 ;					  
  sum = 1 << n ;					      	sum = 1 << n ;						      sum = 1 << n ;						  
  return ( sum - 1 ) ;					      	return ( sum - 1 ) ;					      return ( sum - 1 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT     PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	    PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT	  PROGRAMMING_PUZZLE_ASSIGN_VALUE_WITHOUT_CONTROL_STATEMENT
--							      --							    --								  --
static int assignValue ( int a , int b , int x ) {	      int assignValue ( int a , int b , bool x ) {		    int assign_value ( int a , int b , int x ) {		  failure : #Results: 0, 10
  int arr [ ] = {					      	int arr [ ] = {						      int arr [ ] = {						  
    a , b }						      	  a , b }						    	a , b }							  
    ;							      	  ;							    	;							  
    return ( arr [ x ] ) ;				      	  return ( arr [ x ] ) ;				    	return ( arr [ x ] ) ;					  
  }							      	}							      }								  
  -							      	-							      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		      KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY		    KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY			  KTH_SMALLESTLARGEST_ELEMENT_UNSORTED_ARRAY
--							      --							    --								  --
public static int kthSmallest ( Integer [ ] arr , int k ) {   int kthSmallest ( int arr [ ] , int n , int k ) {		    int kthSmallest ( int * arr , int k ) {			  script_not_found : None
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + k ) ;					  
  return arr [ k - 1 ] ;				      	return arr [ k - 1 ] ;					      return arr [ k - 1 ] ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		      C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		    C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES		  C_PROGRAM_CONCATENATE_STRING_GIVEN_NUMBER_TIMES
--							      --							    --								  --
static String repeat ( String s , int n ) {		      string repeat ( string s , int n ) {			    string repeat ( string s , int n ) {			  success : None
  String s1 = s ;					      	string s1 = s ;						      string s1 = s ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) s += s1 ;					      	i ++ ) s += s1 ;					      i ++ ) {							  
  return s ;						      	return s ;						    	s += s1 ;						  
}							      }								      }								  
							      								      return s ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I AREA_OF_THE_CIRCLE_THAT_HAS_A_SQUARE_AND_A_CIRCLE_INSCRIBED_I
--							      --							    --								  --
static float getArea ( int a ) {			      float getArea ( int a ) {					    float getArea ( int a ) {					  success : None
  float area = ( float ) ( Math . PI * a * a ) / 4 ;	      	float area = ( M_PI * a * a ) / 4.0 ;			      float area = float ( M_PI * a * a ) / 4 ;			  
  return area ;						      	return area ;						      return area ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		      HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		    HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER		  HOW_TO_TURN_OFF_A_PARTICULAR_BIT_IN_A_NUMBER
--							      --							    --								  --
static int turnOffK ( int n , int k ) {			      int turnOffK ( int n , int k ) {				    int turnOffK ( int n , int k ) {				  success : identical to gold
  if ( k <= 0 ) return n ;				      	if ( k <= 0 ) return n ;				      if ( k <= 0 ) return n ;					  
  return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			      	return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			      return ( n & ~ ( 1 << ( k - 1 ) ) ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		      MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES		    MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES			  MASTER_THEOREM_SUBTRACT_CONQUER_RECURRENCES
--							      --							    --								  --
static int fib ( int n ) {				      int fib ( int n ) {					    int fib ( int n ) {						  script_not_found : None
  if ( n <= 1 ) return n ;				      	if ( n <= 1 ) return n ;				      if ( n <= 1 ) return n ;					  
  return fib ( n - 1 ) + fib ( n - 2 ) ;		      	return fib ( n - 1 ) + fib ( n - 2 ) ;			      return fib ( n - 1 ) + fib ( n - 2 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS MAXIMUM_NUMBER_OF_SQUARES_THAT_CAN_BE_FIT_IN_A_RIGHT_ANGLE_IS
--							      --							    --								  --
static int maxSquare ( int b , int m ) {		      int maxSquare ( int b , int m ) {				    int maxSquare ( int b , int m ) {				  success : identical to gold
  return ( b / m - 1 ) * ( b / m ) / 2 ;		      	return ( b / m - 1 ) * ( b / m ) / 2 ;			      return ( b / m - 1 ) * ( b / m ) / 2 ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIME_NUMBERS						      PRIME_NUMBERS						    PRIME_NUMBERS						  PRIME_NUMBERS
--							      --							    --								  --
static boolean isPrime ( int n ) {			      bool isPrime ( int n ) {					    bool isPrime ( int n ) {					  success : identical to gold
  if ( n <= 1 ) return false ;				      	if ( n <= 1 ) return false ;				      if ( n <= 1 ) return false ;				  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( n % i == 0 ) return false ;		      	i ++ ) if ( n % i == 0 ) return false ;			      i ++ ) if ( n % i == 0 ) return false ;			  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	      COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	    COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1	  COUNT_STRINGS_CAN_FORMED_USING_B_C_GIVEN_CONSTRAINTS_1
--							      --							    --								  --
static int countStr ( int n ) {				      int countStr ( int n ) {					    int countStr ( int n ) {					  success : identical to gold
  return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;      	return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;	      return 1 + ( n * 2 ) + ( n * ( ( n * n ) - 1 ) / 2 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIVISORS_1_N_1					      SUM_DIVISORS_1_N_1					    SUM_DIVISORS_1_N_1						  SUM_DIVISORS_1_N_1
--							      --							    --								  --
static int divisorSum ( int n ) {			      int divisorSum ( int n ) {				    int divisorSum ( int n ) {					  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  ++ i ) sum += ( n / i ) * i ;				      	++ i ) sum += ( n / i ) * i ;				      ++ i ) {							  
  return sum ;						      	return sum ;						    	sum += ( n / i ) * i ;					  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE					      NEWMAN_CONWAY_SEQUENCE					    NEWMAN_CONWAY_SEQUENCE					  NEWMAN_CONWAY_SEQUENCE
--							      --							    --								  --
static int sequence ( int n ) {				      int sequence ( int n ) {					    int sequence ( int n ) {					  script_not_found : None
  if ( n == 1 || n == 2 ) return 1 ;			      	if ( n == 1 || n == 2 ) return 1 ;			      if ( n == 1 || n == 2 ) return 1 ;			  
  else return sequence ( sequence ( n - 1 ) ) + sequence ( n  	else return sequence ( sequence ( n - 1 ) ) + sequence ( n    else return sequence ( sequence ( n - 1 ) ) + sequence ( n  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING      COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	    COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING	  COMPUTE_THE_INTEGER_ABSOLUTE_VALUE_ABS_WITHOUT_BRANCHING
--							      --							    --								  --
static int getAbs ( int n ) {				      unsigned int getAbs ( int n ) {				    int getAbs ( int n ) {					  script_not_found : None
  int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;		      	int const mask = n >> ( sizeof ( int ) * CHARBIT - 1 ) ;      int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;		  
  return ( ( n + mask ) ^ mask ) ;			      	return ( ( n + mask ) ^ mask ) ;			      return ( ( n + mask ) ^ mask ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			      COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			    COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER			  COUNT_TRAILING_ZEROES_FACTORIAL_NUMBER
--							      --							    --								  --
static int findTrailingZeros ( int n ) {		      int findTrailingZeros ( int n ) {				    int findTrailingZeros ( int n ) {				  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 5 ;					      	for ( int i = 5 ;					      for ( int i = 5 ;						  
  n / i >= 1 ;						      	n / i >= 1 ;						      n / i >= 1 ;						  
  i *= 5 ) count += n / i ;				      	i *= 5 ) count += n / i ;				      i *= 5 ) {						  
  return count ;					      	return count ;						    	count += n / i ;					  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ADD_1_TO_A_GIVEN_NUMBER					      ADD_1_TO_A_GIVEN_NUMBER					    ADD_1_TO_A_GIVEN_NUMBER					  ADD_1_TO_A_GIVEN_NUMBER
--							      --							    --								  --
static int addOne ( int x ) {				      int addOne ( int x ) {					    int addOne ( int x ) {					  success : None
  int m = 1 ;						      	int m = 1 ;						      int m = 1 ;						  
  while ( ( int ) ( x & m ) >= 1 ) {			      	while ( x & m ) {					      while ( ( int ) ( x & m ) >= 1 ) {			  
    x = x ^ m ;						      	  x = x ^ m ;						    	x = x ^ m ;						  
    m <<= 1 ;						      	  m <<= 1 ;						    	m <<= 1 ;						  
  }							      	}							      }								  
  x = x ^ m ;						      	x = x ^ m ;						      x = x ^ m ;						  
  return x ;						      	return x ;						      return x ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		      COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		    COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ		  COUNT_FREQUENCY_K_MATRIX_SIZE_N_MATRIXI_J_IJ
--							      --							    --								  --
public static int find ( int n , int k ) {		      int find ( int n , int k ) {				    int find ( int n , int k ) {				  success : identical to gold
  if ( n + 1 >= k ) return ( k - 1 ) ;			      	if ( n + 1 >= k ) return ( k - 1 ) ;			      if ( n + 1 >= k ) return ( k - 1 ) ;			  
  else return ( 2 * n + 1 - k ) ;			      	else return ( 2 * n + 1 - k ) ;				      else return ( 2 * n + 1 - k ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		      CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		    CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN		  CHECK_WHETHER_TRIANGLE_VALID_NOT_SIDES_GIVEN
--							      --							    --								  --
public static int checkValidity ( int a , int b , int c ) {   bool checkValidity ( int a , int b , int c ) {		    int checkValidity ( int a , int b , int c ) {		  success : None
  if ( a + b <= c || a + c <= b || b + c <= a ) return 0 ;    	if ( a + b <= c || a + c <= b || b + c <= a ) return false    if ( a + b <= c || a + c <= b || b + c <= a ) return 0 ;	  
  else return 1 ;					      	else return true ;					      else return 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_INPUT_INTEGER_STRING			      PROGRAM_CHECK_INPUT_INTEGER_STRING			    PROGRAM_CHECK_INPUT_INTEGER_STRING				  PROGRAM_CHECK_INPUT_INTEGER_STRING
--							      --							    --								  --
static boolean isNumber ( String s ) {			      bool isNumber ( string s ) {				    bool isNumber ( string s ) {				  success : identical to gold
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < s . length ( ) ;					      	i < s . length ( ) ;					      i < s . length ( ) ;					  
  i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == fal 	i ++ ) if ( isdigit ( s [ i ] ) == false ) return false ;     i ++ ) if ( isdigit ( s [ i ] ) == false ) return false ;	  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS_1
--							      --							    --								  --
double countSquares ( int a , int b ) {			      int countSquares ( int a , int b ) {			    double countSquares ( int a , int b ) {			  script_not_found : None
  return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( 	return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 ) ;   return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_1					      NEXT_POWER_OF_2_1						    NEXT_POWER_OF_2_1						  NEXT_POWER_OF_2_1
--							      --							    --								  --
static int nextPowerOf2 ( int n ) {			      unsigned int nextPowerOf2 ( unsigned int n ) {		    int nextPowerOf2 ( int n ) {				  success : None
  int p = 1 ;						      	unsigned int p = 1 ;					      int p = 1 ;						  
  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      	if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      if ( n && ( n & ( n - 1 ) ) == 0 ) return n ;		  
  while ( p < n ) p <<= 1 ;				      	while ( p < n ) p <<= 1 ;				      while ( p < n ) {						  
  return p ;						      	return p ;						    	p <<= 1 ;						  
}							      }								      }								  
							      								      return p ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER						      LEONARDO_NUMBER						    LEONARDO_NUMBER						  LEONARDO_NUMBER
--							      --							    --								  --
static int leonardo ( int n ) {				      int leonardo ( int n ) {					    int leonardo ( int n ) {					  script_not_found : None
  if ( n == 0 || n == 1 ) return 1 ;			      	if ( n == 0 || n == 1 ) return 1 ;			      if ( n == 0 || n == 1 ) return 1 ;			  
  return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;    	return leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ;	      return ( leonardo ( n - 1 ) + leonardo ( n - 2 ) + 1 ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE CHECK_IF_STRING_REMAINS_PALINDROME_AFTER_REMOVING_GIVEN_NUMBE
--							      --							    --								  --
static boolean isPossible ( String str , int n ) {	      bool isPossible ( string str , int n ) {			    bool is_possible ( const std :: string & str , size_t n ) {	  success : None
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      size_t len = str . size ( ) ;				  
  if ( len >= n ) return true ;				      	if ( len >= n ) return true ;				      if ( len >= n ) return true ;				  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LINEAR_SEARCH						      LINEAR_SEARCH						    LINEAR_SEARCH						  LINEAR_SEARCH
--							      --							    --								  --
public static int search ( int arr [ ] , int x ) {	      int search ( int arr [ ] , int n , int x ) {		    public : int search ( int arr [ ] , int x ) {		  script_not_found : None
  int n = arr . length ;				      	int i ;							      int n = sizeof ( arr ) / sizeof ( int ) ;			  
  for ( int i = 0 ;					      	for ( i = 0 ;						      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) if ( arr [ i ] == x ) return i ;			      i ++ ) {							  
    if ( arr [ i ] == x ) return i ;			      	return - 1 ;						    	if ( arr [ i ] == x ) return i ;			  
  }							      }								      }								  
  return - 1 ;						      								      return - 1 ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_TRIPLET_SUM_ARRAY_1				      MAXIMUM_TRIPLET_SUM_ARRAY_1				    MAXIMUM_TRIPLET_SUM_ARRAY_1					  MAXIMUM_TRIPLET_SUM_ARRAY_1
--							      --							    --								  --
static int maxTripletSum ( int arr [ ] , int n ) {	      int maxTripletSum ( int arr [ ] , int n ) {		    int maxTripletSum ( int arr [ ] , int n ) {			  success : identical to gold
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;      	return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;	      return arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_LENGTH_PALINDROME				      NTH_EVEN_LENGTH_PALINDROME				    NTH_EVEN_LENGTH_PALINDROME					  NTH_EVEN_LENGTH_PALINDROME
--							      --							    --								  --
static String evenlength ( String n ) {			      string evenlength ( string n ) {				    string evenlength ( string n ) {				  success : None
  String res = n ;					      	string res = n ;					      string res = n ;						  
  for ( int j = n . length ( ) - 1 ;			      	for ( int j = n . length ( ) - 1 ;			      for ( int j = n . length ( ) - 1 ;			  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  -- j ) res += n . charAt ( j ) ;			      	-- j ) res += n [ j ] ;					      -- j ) {							  
  return res ;						      	return res ;						    	res += n [ j ] ;					  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER		      FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			    FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER			  FIND_SUM_MODULO_K_FIRST_N_NATURAL_NUMBER
--							      --							    --								  --
static int findSum ( int N , int K ) {			      int findSum ( int N , int K ) {				    int findSum ( int N , int K ) {				  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= N ;						      	i <= N ;						      i <= N ;							  
  i ++ ) ans += ( i % K ) ;				      	i ++ ) ans += ( i % K ) ;				      i ++ ) {							  
  return ans ;						      	return ans ;						    	ans += ( i % K ) ;					  
}							      }								      }								  
							      								      return ans ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_INTEGER_OVERFLOW_MULTIPLICATION			      CHECK_INTEGER_OVERFLOW_MULTIPLICATION			    CHECK_INTEGER_OVERFLOW_MULTIPLICATION			  CHECK_INTEGER_OVERFLOW_MULTIPLICATION
--							      --							    --								  --
static Boolean isOverflow ( long a , long b ) {		      bool isOverflow ( long long a , long long b ) {		    Boolean isOverflow ( unsigned long a , unsigned long b ) {	  error : CHECK_INTEGER_OVERFLOW_MULTIPLICATION.cpp:
  if ( a == 0 || b == 0 ) return false ;		      	if ( a == 0 || b == 0 ) return false ;			      if ( a == 0 || b == 0 ) return False ;			  24:1: error: ‘Boolean’ does not name a type  Boole
  long result = a * b ;					      	long long result = a * b ;				      unsigned long result = a * b ;				  an f_filled ( unsigned long a , unsigned long b )
  if ( a == result / b ) return false ;			      	if ( a == result / b ) return false ;			      if ( a == result / b ) return False ;			  {  ^~~~~~~ CHECK_INTEGER_OVERFLOW_MULTIPLICATION.c
  else return true ;					      	else return true ;					      else return True ;					  pp: In function ‘int main()’: CHECK_INTEGER_OVERFL
}							      }								    }								  OW_MULTIPLICATION.cpp:38:12: error: ‘f_filled’ was
							      								    								   not declared in this scope	       if(f_filled(p
							      								    								  aram0[i],param1[i]) == f_gold(param0[i],param1[i])
							      								    								  )		^~~~~~~~ CHECK_INTEGER_OVERFLOW_MULT
							      								    								  IPLICATION.cpp:38:12: note: suggested alternative:
							      								    								   ‘f_gold’	     if(f_filled(param0[i],param1[i]
							      								    								  ) == f_gold(param0[i],param1[i]))		^~~~
							      								    								  ~~~~		   f_gold
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_SHANKS_WILLIAMS_PRIME				      NEWMAN_SHANKS_WILLIAMS_PRIME				    NEWMAN_SHANKS_WILLIAMS_PRIME				  NEWMAN_SHANKS_WILLIAMS_PRIME
--							      --							    --								  --
static int nswp ( int n ) {				      int nswp ( int n ) {					    int nswp ( int n ) {					  script_not_found : None
  if ( n == 0 || n == 1 ) return 1 ;			      	if ( n == 0 || n == 1 ) return 1 ;			      if ( n == 0 || n == 1 ) return 1 ;			  
  return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		      	return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		      return 2 * nswp ( n - 1 ) + nswp ( n - 2 ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTS_PATHS_POINT_REACH_ORIGIN				      COUNTS_PATHS_POINT_REACH_ORIGIN				    COUNTS_PATHS_POINT_REACH_ORIGIN				  COUNTS_PATHS_POINT_REACH_ORIGIN
--							      --							    --								  --
static int countPaths ( int n , int m ) {		      int countPaths ( int n , int m ) {			    int countPaths ( int n , int m ) {				  script_not_found : None
  if ( n == 0 || m == 0 ) return 1 ;			      	if ( n == 0 || m == 0 ) return 1 ;			      if ( n == 0 || m == 0 ) return 1 ;			  
  return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  	return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1    return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_2
--							      --							    --								  --
static boolean isPowerOfFour ( int n ) {		      bool isPowerOfFour ( unsigned int n ) {			    bool isPowerOfFour ( unsigned n ) {				  success : None
  return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ( n & 0xAAAA 	return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ! ( n & 0xAA   return n != 0 && ( ( n & ( n - 1 ) ) == 0 ) && ( n & 0xAAAA 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSION						      RECURSION							    RECURSION							  RECURSION
--							      --							    --								  --
static void printFun ( int test ) {			      void printFun ( int test ) {				    void print_fun ( int test ) {				  script_not_found : None
  if ( test < 1 ) return ;				      	if ( test < 1 ) return ;				      if ( test < 1 ) return ;					  
  else {						      	else {							      else {							  
    System . out . printf ( "%d " , test ) ;		      	  cout << test << " " ;					    	printf ( "%d " , test ) ;				  
    printFun ( test - 1 ) ;				      	  printFun ( test - 1 ) ;				    	print_fun ( test - 1 ) ;				  
    System . out . printf ( "%d " , test ) ;		      	  cout << test << " " ;					    	printf ( "%d " , test ) ;				  
    return ;						      	  return ;						    	return ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CALCULATE_VOLUME_DODECAHEDRON				      CALCULATE_VOLUME_DODECAHEDRON				    CALCULATE_VOLUME_DODECAHEDRON				  CALCULATE_VOLUME_DODECAHEDRON
--							      --							    --								  --
static double vol_of_dodecahedron ( int side ) {	      double vol_of_dodecahedron ( int side ) {			    double vol_of_dodecahedron ( int side ) {			  success : identical to gold
  return ( ( ( 15 + ( 7 * ( Math . sqrt ( 5 ) ) ) ) / 4 ) * ( 	return ( ( ( 15 + ( 7 * ( sqrt ( 5 ) ) ) ) / 4 ) * ( pow (    return ( ( ( 15 + ( 7 * ( sqrt ( 5 ) ) ) ) / 4 ) * ( pow (  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			      PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			    PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON			  PROGRAM_TO_FIND_THE_AREA_OF_PENTAGON
--							      --							    --								  --
static float findArea ( float a ) {			      float findArea ( float a ) {				    float findArea ( float a ) {				  success : None
  float area ;						      	float area ;						      float area ;						  
  area = ( float ) ( Math . sqrt ( 5 * ( 5 + 2 * ( Math . sqr 	area = ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) ) * a * a )    area = ( float ) ( sqrt ( 5 * ( 5 + 2 * ( sqrt ( 5 ) ) ) )  
  return area ;						      	return area ;						      return area ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY		      MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			    MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY			  MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY
--							      --							    --								  --
static int minSum ( int [ ] A , int n ) {		      int minSum ( int A [ ] , int n ) {			    int minSum ( vector < int > & A , int n ) {			  error : MINIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY.c
  int min_val = Arrays . stream ( A ) . min ( ) . getAsInt (  	int min_val = * min_element ( A , A + n ) ;		      int min_val = accumulate ( A . begin ( ) , A . end ( ) , 0  pp: In function ‘int main()’: MINIMUM_SUM_CHOOSING
  return ( min_val * ( n - 1 ) ) ;			      	return ( min_val * ( n - 1 ) ) ;			      return ( min_val * ( n - 1 ) ) ;				  _MINIMUM_PAIRS_ARRAY.cpp:34:21: error: invalid ini
}							      }								    }								  tialization of non-const reference of type ‘std::v
							      								    								  ector<int>&’ from an rvalue of type ‘__gnu_cxx::__
							      								    								  alloc_traits<std::allocator<int>, int>::value_type
							      								    								  *’ {aka ‘int*’}	   if(f_filled(&param0[i].fr
							      								    								  ont(),param1[i]) == f_gold(&param0[i].front(),para
							      								    								  m1[i]))		       ^~~~~~~~~~~~~~~~~~ MI
							      								    								  NIMUM_SUM_CHOOSING_MINIMUM_PAIRS_ARRAY.cpp:22:5: n
							      								    								  ote: in passing argument 1 of ‘int f_filled(std::v
							      								    								  ector<int>&, int)’  int f_filled ( vector < int >
							      								    								  & A , int n ) {      ^~~~~~~~
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING_1			      FIND_LAST_INDEX_CHARACTER_STRING_1			    FIND_LAST_INDEX_CHARACTER_STRING_1				  FIND_LAST_INDEX_CHARACTER_STRING_1
--							      --							    --								  --
static int findLastIndex ( String str , Character x ) {	      int findLastIndex ( string & str , char x ) {		    int findLastIndex ( string str , char x ) {			  script_not_found : None
  for ( int i = str . length ( ) - 1 ;			      	for ( int i = str . length ( ) - 1 ;			      for ( int i = str . length ( ) - 1 ;			  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) if ( str . charAt ( i ) == x ) return i ;	      	i -- ) if ( str [ i ] == x ) return i ;			      i -- ) if ( str [ i ] == x ) return i ;			  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2_2					      NEXT_POWER_OF_2_2						    NEXT_POWER_OF_2_2						  NEXT_POWER_OF_2_2
--							      --							    --								  --
static int nextPowerOf2 ( int n ) {			      unsigned int nextPowerOf2 ( unsigned int n ) {		    int nextPowerOf2 ( int n ) {				  success : None
  n -- ;						      	n -- ;							      n -- ;							  
  n |= n >> 1 ;						      	n |= n >> 1 ;						      n |= n >> 1 ;						  
  n |= n >> 2 ;						      	n |= n >> 2 ;						      n |= n >> 2 ;						  
  n |= n >> 4 ;						      	n |= n >> 4 ;						      n |= n >> 4 ;						  
  n |= n >> 8 ;						      	n |= n >> 8 ;						      n |= n >> 8 ;						  
  n |= n >> 16 ;					      	n |= n >> 16 ;						      n |= n >> 16 ;						  
  n ++ ;						      	n ++ ;							      n ++ ;							  
  return n ;						      	return n ;						      return n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1				      FIND_REPETITIVE_ELEMENT_1_N_1				    FIND_REPETITIVE_ELEMENT_1_N_1				  FIND_REPETITIVE_ELEMENT_1_N_1
--							      --							    --								  --
static int findRepeating ( int [ ] arr , int n ) {	      int findRepeating ( int arr [ ] , int n ) {		    int findRepeating ( int * arr , int n ) {			  success : None
  int sum = 0 ;						      	return accumulate ( arr , arr + n , 0 ) - ( ( n - 1 ) * n /   int sum = 0 ;						  
  for ( int i = 0 ;					      }								      for ( int i = 0 ;						  
  i < n ;						      								      i < n ;							  
  i ++ ) sum += arr [ i ] ;				      								      i ++ ) {							  
  return sum - ( ( ( n - 1 ) * n ) / 2 ) ;		      								    	sum += arr [ i ] ;					  
}							      								      }								  
							      								      return sum - ( ( ( n - 1 ) * n ) / 2 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N_1			      FINDING_POWER_PRIME_NUMBER_P_N_1				    FINDING_POWER_PRIME_NUMBER_P_N_1				  FINDING_POWER_PRIME_NUMBER_P_N_1
--							      --							    --								  --
static int PowerOFPINnfactorial ( int n , int p ) {	      int PowerOFPINnfactorial ( int n , int p ) {		    int PowerOFPINnfactorial ( int n , int p ) {		  success : identical to gold
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  int temp = p ;					      	int temp = p ;						      int temp = p ;						  
  while ( temp <= n ) {					      	while ( temp <= n ) {					      while ( temp <= n ) {					  
    ans += n / temp ;					      	  ans += n / temp ;					    	ans += n / temp ;					  
    temp = temp * p ;					      	  temp = temp * p ;					    	temp = temp * p ;					  
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			      PROGRAM_TO_EFFICIENTLY_CALCULATE_EX			    PROGRAM_TO_EFFICIENTLY_CALCULATE_EX				  PROGRAM_TO_EFFICIENTLY_CALCULATE_EX
--							      --							    --								  --
static float exponential ( int n , float x ) {		      float exponential ( int n , float x ) {			    float exponential ( int n , float x ) {			  script_not_found : None
  float sum = 1 ;					      	float sum = 1.0f ;					      float sum = 1 ;						  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  -- i ) sum = 1 + x * sum / i ;			      	-- i ) sum = 1 + x * sum / i ;				      -- i ) {							  
  return sum ;						      	return sum ;						    	sum = 1 + x * sum / i ;					  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX
--							      --							    --								  --
static int numberOfPaths ( int m , int n ) {		      int numberOfPaths ( int m , int n ) {			    int numberOfPaths ( int m , int n ) {			  script_not_found : None
  if ( m == 1 || n == 1 ) return 1 ;			      	if ( m == 1 || n == 1 ) return 1 ;			      if ( m == 1 || n == 1 ) return 1 ;			  
  return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  	return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n    return numberOfPaths ( m - 1 , n ) + numberOfPaths ( m , n  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1		      MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			    MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1			  MAXIMIZE_VOLUME_CUBOID_GIVEN_SUM_SIDES_1
--							      --							    --								  --
static int maxvolume ( int s ) {			      int maxvolume ( int s ) {					    int maxvolume ( int s ) {					  success : identical to gold
  int length = s / 3 ;					      	int length = s / 3 ;					      int length = s / 3 ;					  
  s -= length ;						      	s -= length ;						      s -= length ;						  
  int breadth = s / 2 ;					      	int breadth = s / 2 ;					      int breadth = s / 2 ;					  
  int height = s - breadth ;				      	int height = s - breadth ;				      int height = s - breadth ;				  
  return length * breadth * height ;			      	return length * breadth * height ;			      return length * breadth * height ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2     GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	    GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2	  GIVEN_P_AND_N_FIND_THE_LARGEST_X_SUCH_THAT_PX_DIVIDES_N_2
--							      --							    --								  --
static int Largestpower ( int n , int p ) {		      int largestPower ( int n , int p ) {			    int Largestpower ( int n , int p ) {			  script_not_found : None
  int ans = 0 ;						      	int x = 0 ;						      int ans = 0 ;						  
  while ( n > 0 ) {					      	while ( n ) {						      while ( n ) {						  
    n /= p ;						      	  n /= p ;						    	n /= p ;						  
    ans += n ;						      	  x += n ;						    	ans += n ;						  
  }							      	}							      }								  
  return ans ;						      	return x ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
STACK_SET_3_REVERSE_STRING_USING_STACK			      STACK_SET_3_REVERSE_STRING_USING_STACK			    STACK_SET_3_REVERSE_STRING_USING_STACK			  STACK_SET_3_REVERSE_STRING_USING_STACK
--							      --							    --								  --
static void reverse ( char str [ ] ) {			      void reverse ( char str [ ] ) {				    void reverse ( char str [ ] ) {				  script_not_found : None
  int n = str . length , i ;				      	int n = strlen ( str ) , i ;				      int n = strlen ( str ) , i ;				  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n / 2 ;						      	i < n / 2 ;						      i < n / 2 ;						  
  i ++ ) {						      	i ++ ) swap ( & str [ i ] , & str [ n - i - 1 ] ) ;	      i ++ ) swap ( str [ i ] , str [ n - i - 1 ] ) ;		  
    swap ( str , i , n - i - 1 ) ;			      }								    }								  
  }							      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		      POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		    POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1		  POSITIVE_ELEMENTS_EVEN_NEGATIVE_ODD_POSITIONS_1
--							      --							    --								  --
static void printArray ( int [ ] a , int n ) {		      void printArray ( int * a , int n ) {			    void printArray ( int a [ ] , int n ) {			  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) System . out . print ( a [ i ] + " " ) ;	      	i ++ ) cout << a [ i ] << " " ;				      i ++ ) {							  
  System . out . println ( ) ;				      	cout << endl ;						    	cout << a [ i ] << " " ;				  
}							      	return ;						      }								  
							      }								      cout << endl ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_AN_INTEGER				      SQUARE_ROOT_OF_AN_INTEGER					    SQUARE_ROOT_OF_AN_INTEGER					  SQUARE_ROOT_OF_AN_INTEGER
--							      --							    --								  --
static int floorSqrt ( int x ) {			      int floorSqrt ( int x ) {					    int floorSqrt ( int x ) {					  success : identical to gold
  if ( x == 0 || x == 1 ) return x ;			      	if ( x == 0 || x == 1 ) return x ;			      if ( x == 0 || x == 1 ) return x ;			  
  int i = 1 , result = 1 ;				      	int i = 1 , result = 1 ;				      int i = 1 , result = 1 ;					  
  while ( result <= x ) {				      	while ( result <= x ) {					      while ( result <= x ) {					  
    i ++ ;						      	  i ++ ;						    	i ++ ;							  
    result = i * i ;					      	  result = i * i ;					    	result = i * i ;					  
  }							      	}							      }								  
  return i - 1 ;					      	return i - 1 ;						      return i - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER
--							      --							    --								  --
public static boolean isPower ( int x , int y ) {	      bool isPower ( int x , long int y ) {			    bool isPower ( int x , int y ) {				  success : None
  if ( x == 1 ) return ( y == 1 ) ;			      	if ( x == 1 ) return ( y == 1 ) ;			      if ( x == 1 ) return ( y == 1 ) ;				  
  int pow = 1 ;						      	long int pow = 1 ;					      int pow = 1 ;						  
  while ( pow < y ) pow = pow * x ;			      	while ( pow < y ) pow *= x ;				      while ( pow < y ) {					  
  return ( pow == y ) ;					      	return ( pow == y ) ;					    	pow = pow * x ;						  
}							      }								      }								  
							      								      return ( pow == y ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			      MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			    MULTIPLICATIVE_INVERSE_UNDER_MODULO_M			  MULTIPLICATIVE_INVERSE_UNDER_MODULO_M
--							      --							    --								  --
static int modInverse ( int a , int m ) {		      int modInverse ( int a , int m ) {			    int modInverse ( int a , int m ) {				  script_not_found : None
  a = a % m ;						      	a = a % m ;						      a = a % m ;						  
  for ( int x = 1 ;					      	for ( int x = 1 ;					      for ( int x = 1 ;						  
  x < m ;						      	x < m ;							      x < m ;							  
  x ++ ) if ( ( a * x ) % m == 1 ) return x ;		      	x ++ ) if ( ( a * x ) % m == 1 ) return x ;		      x ++ ) if ( ( a * x ) % m == 1 ) return x ;		  
  return 1 ;						      }								      return 1 ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_IS_DIVISIBLE_BY_29_OR_NOT			      NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				    NUMBER_IS_DIVISIBLE_BY_29_OR_NOT				  NUMBER_IS_DIVISIBLE_BY_29_OR_NOT
--							      --							    --								  --
static boolean isDivisible ( long n ) {			      bool isDivisible ( long long int n ) {			    bool isDivisible ( unsigned long n ) {			  success : None
  while ( n / 100 > 0 ) {				      	while ( n / 100 ) {					      while ( n / 100 > 0 ) {					  
    int last_digit = ( int ) n % 10 ;			      	  int last_digit = n % 10 ;				    	int last_digit = ( int ) n % 10 ;			  
    n /= 10 ;						      	  n /= 10 ;						    	n /= 10 ;						  
    n += last_digit * 3 ;				      	  n += last_digit * 3 ;					    	n += last_digit * 3 ;					  
  }							      	}							      }								  
  return ( n % 29 == 0 ) ;				      	return ( n % 29 == 0 ) ;				      return ( n % 29 == 0 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY	      QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		    QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY		  QUICKLY_FIND_MULTIPLE_LEFT_ROTATIONS_OF_AN_ARRAY
--							      --							    --								  --
static void leftRotate ( int arr [ ] , int n , int k ) {      void leftRotate ( int arr [ ] , int n , int k ) {		    void leftRotate ( int arr [ ] , int n , int k ) {		  script_not_found : None
  for ( int i = k ;					      	for ( int i = k ;					      for ( int i = k ;						  
  i < k + n ;						      	i < k + n ;						      i < k + n ;						  
  i ++ ) System . out . print ( arr [ i % n ] + " " ) ;	      	i ++ ) cout << arr [ i % n ] << " " ;			      i ++ ) {							  
}							      }								    	cout << arr [ i % n ] << " " ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DOUBLE_FACTORIAL_1					      DOUBLE_FACTORIAL_1					    DOUBLE_FACTORIAL_1						  DOUBLE_FACTORIAL_1
--							      --							    --								  --
static int doublefactorial ( int n ) {			      unsigned int doublefactorial ( unsigned int n ) {		    int doublefactorial ( int n ) {				  success : None
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  for ( int i = n ;					      	for ( int i = n ;					      for ( int i = n ;						  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i = i - 2 ) {						      	i = i - 2 ) {						      i = i - 2 ) {						  
    if ( i == 0 || i == 1 ) return res ;		      	  if ( i == 0 || i == 1 ) return res ;			    	if ( i == 0 || i == 1 ) return res ;			  
    else res *= i ;					      	  else res *= i ;					    	else res *= i ;						  
  }							      	}							      }								  
  return res ;						      }								      return res ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_LAST_INDEX_CHARACTER_STRING			      FIND_LAST_INDEX_CHARACTER_STRING				    FIND_LAST_INDEX_CHARACTER_STRING				  FIND_LAST_INDEX_CHARACTER_STRING
--							      --							    --								  --
static int findLastIndex ( String str , Character x ) {	      int findLastIndex ( string & str , char x ) {		    int find_last_index ( string str , char x ) {		  script_not_found : None
  int index = - 1 ;					      	int index = - 1 ;					      int index = - 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i < str . size ( ) ;					  
  i ++ ) if ( str . charAt ( i ) == x ) index = i ;	      	i ++ ) if ( str [ i ] == x ) index = i ;		      i ++ ) if ( str [ i ] == x ) index = i ;			  
  return index ;					      	return index ;						      return index ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP   HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP	  HOW_WILL_YOU_PRINT_NUMBERS_FROM_1_TO_200_WITHOUT_USING_LOOP
--							      --							    --								  --
static void printNos ( int n ) {			      public : void printNos ( unsigned int n ) {		    void print_nos ( int n ) {					  script_not_found : None
  if ( n > 0 ) {					      	if ( n > 0 ) {						      if ( n > 0 ) {						  
    printNos ( n - 1 ) ;				      	  printNos ( n - 1 ) ;					    	print_nos ( n - 1 ) ;					  
    System . out . print ( n + " " ) ;			      	  cout << n << " " ;					    	cout << n << " " ;					  
  }							      	}							      }								  
  return ;						      	return ;						      return ;							  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			      SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS			    SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS				  SUM_K_TH_GROUP_ODD_POSITIVE_NUMBERS
--							      --							    --								  --
public static int kthgroupsum ( int k ) {		      int kthgroupsum ( int k ) {				    int kthgroupsum ( int k ) {					  success : identical to gold
  int cur = ( k * ( k - 1 ) ) + 1 ;			      	int cur = ( k * ( k - 1 ) ) + 1 ;			      int cur = ( k * ( k - 1 ) ) + 1 ;				  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  while ( k -- > 0 ) {					      	while ( k -- ) {					      while ( k -- ) {						  
    sum += cur ;					      	  sum += cur ;						    	sum += cur ;						  
    cur += 2 ;						      	  cur += 2 ;						    	cur += 2 ;						  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			      FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N			    FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N				  FIND_FACTORIAL_NUMBERS_LESS_EQUAL_N
--							      --							    --								  --
static void printFactorialNums ( int n ) {		      void printFactorialNums ( int n ) {			    void printFactorialNums ( int n ) {				  script_not_found : None
  int fact = 1 ;					      	int fact = 1 ;						      int fact = 1 ;						  
  int x = 2 ;						      	int x = 2 ;						      int x = 2 ;						  
  while ( fact <= n ) {					      	while ( fact <= n ) {					      while ( fact <= n ) {					  
    System . out . print ( fact + " " ) ;		      	  cout << fact << " " ;					    	cout << fact << " " ;					  
    fact = fact * x ;					      	  fact = fact * x ;					    	fact = fact * x ;					  
    x ++ ;						      	  x ++ ;						    	x ++ ;							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEXT_POWER_OF_2						      NEXT_POWER_OF_2						    NEXT_POWER_OF_2						  NEXT_POWER_OF_2
--							      --							    --								  --
static int nextPowerOf2 ( int n ) {			      unsigned int nextPowerOf2 ( unsigned int n ) {		    int nextPowerOf2 ( unsigned n ) {				  success : None
  int count = 0 ;					      	unsigned count = 0 ;					      int count = 0 ;						  
  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      	if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      if ( n && ( n & ( n - 1 ) ) == 0 ) return n ;		  
  while ( n != 0 ) {					      	while ( n != 0 ) {					      while ( n != 0 ) {					  
    n >>= 1 ;						      	  n >>= 1 ;						    	n >>= 1 ;						  
    count += 1 ;					      	  count += 1 ;						    	count += 1 ;						  
  }							      	}							      }								  
  return 1 << count ;					      	return 1 << count ;					      return 1 << count ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		      FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER		    FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER			  FIND_CENTER_CIRCLE_USING_ENDPOINTS_DIAMETER
--							      --							    --								  --
static void center ( int x1 , int x2 , int y1 , int y2 ) {    void center ( int x1 , int x2 , int y1 , int y2 ) {	    void center ( int x1 , int x2 , int y1 , int y2 ) {		  script_not_found : None
  System . out . print ( ( float ) ( x1 + x2 ) / 2 + ", " + ( 	cout << ( float ) ( x1 + x2 ) / 2 << ", " << ( float ) ( y1   cout << ( float ) ( x1 + x2 ) / 2 << ", " << ( float ) ( y1 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING		      HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			    HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING			  HOW_TO_BEGIN_WITH_COMPETITIVE_PROGRAMMING
--							      --							    --								  --
static int search ( int arr [ ] , int n , int x ) {	      int search ( int arr [ ] , int n , int x ) {		    int search ( int arr [ ] , int n , int x ) {		  success : identical to gold
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			      SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES			    SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES				  SQUARE_PYRAMIDAL_NUMBER_SUM_SQUARES
--							      --							    --								  --
static int findS ( int s ) {				      int findS ( int s ) {					    int findS ( int s ) {					  success : identical to gold
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int n = 1 ;					      	for ( int n = 1 ;					      for ( int n = 1 ;						  
  sum < s ;						      	sum < s ;						      sum < s ;							  
  n ++ ) {						      	n ++ ) {						      n ++ ) {							  
    sum += n * n ;					      	  sum += n * n ;					    	sum += n * n ;						  
    if ( sum == s ) return n ;				      	  if ( sum == s ) return n ;				    	if ( sum == s ) return n ;				  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME HOW_CAN_WE_SUM_THE_DIGITS_OF_A_GIVEN_NUMBER_IN_SINGLE_STATEME
--							      --							    --								  --
static int getSum ( int n ) {				      public : int getSum ( int n ) {				    int getSum ( int n ) {					  script_not_found : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  while ( n != 0 ) {					      	while ( n != 0 ) {					      while ( n != 0 ) {					  
    sum = sum + n % 10 ;				      	  sum = sum + n % 10 ;					    	sum = sum + n % 10 ;					  
    n = n / 10 ;					      	  n = n / 10 ;						    	n = n / 10 ;						  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE	      SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		    SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE		  SWAP_TWO_NUMBERS_WITHOUT_USING_TEMPORARY_VARIABLE
--							      --							    --								  --
static void swap ( int [ ] xp , int [ ] yp ) {		      void swap ( int * xp , int * yp ) {			    void swap ( int * xp , int * yp ) {				  script_not_found : None
  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      	* xp = * xp ^ * yp ;					      * xp = * yp ^ * yp ;					  
  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      	* yp = * xp ^ * yp ;					      * yp = * xp ^ * yp ;					  
  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;			      	* xp = * xp ^ * yp ;					      * xp = * yp ^ * xp ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		      PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		    PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING		  PROGRAM_COUNT_OCCURRENCE_GIVEN_CHARACTER_STRING
--							      --							    --								  --
public static int count ( String s , char c ) {		      int count ( string s , char c ) {				    int count ( string s , char c ) {				  success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < s . length ( ) ;					      	i < s . length ( ) ;					      i < s . length ( ) ;					  
  i ++ ) {						      	i ++ ) if ( s [ i ] == c ) res ++ ;			      i ++ ) {							  
    if ( s . charAt ( i ) == c ) res ++ ;		      	return res ;						    	if ( s [ i ] == c ) {					  
  }							      }								    	  res ++ ;						  
  return res ;						      								    	}							  
}							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			      C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			    C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY			  C_PROGRAM_FIND_LARGEST_ELEMENT_ARRAY
--							      --							    --								  --
static int largest ( ) {				      int largest ( int arr [ ] , int n ) {			    int largest ( ) {						  script_not_found : None
  int i ;						      	int i ;							      int i ;							  
  int max = arr [ 0 ] ;					      	int max = arr [ 0 ] ;					      int max = arr [ 0 ] ;					  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i < arr . length ;					      	i < n ;							      i < arr . size ( ) ;					  
  i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;	      	i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;		      i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;		  
  return max ;						      	return max ;						      return max ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER					      FIND_THE_MISSING_NUMBER					    FIND_THE_MISSING_NUMBER					  FIND_THE_MISSING_NUMBER
--							      --							    --								  --
static int getMissingNo ( int a [ ] , int n ) {		      int getMissingNo ( int a [ ] , int n ) {			    int getMissingNo ( int a [ ] , int n ) {			  script_not_found : None
  int i , total ;					      	int total = ( n + 1 ) * ( n + 2 ) / 2 ;			      int i , total ;						  
  total = ( n + 1 ) * ( n + 2 ) / 2 ;			      	for ( int i = 0 ;					      total = ( n + 1 ) * ( n + 2 ) / 2 ;			  
  for ( i = 0 ;						      	i < n ;							      for ( i = 0 ;						  
  i < n ;						      	i ++ ) total -= a [ i ] ;				      i < n ;							  
  i ++ ) total -= a [ i ] ;				      	return total ;						      i ++ ) {							  
  return total ;					      }								    	total -= a [ i ] ;					  
}							      								      }								  
							      								      return total ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_1			      PROGRAM_DECIMAL_BINARY_CONVERSION_1			    PROGRAM_DECIMAL_BINARY_CONVERSION_1				  PROGRAM_DECIMAL_BINARY_CONVERSION_1
--							      --							    --								  --
public void decToBinary ( int n ) {			      int decToBinary ( int n ) {				    void decToBinary ( int n ) {				  script_not_found : None
  for ( int i = 31 ;					      	for ( int i = 31 ;					      for ( int i = 31 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    int k = n >> i ;					      	  int k = n >> i ;					    	int k = n >> i ;					  
    if ( ( k & 1 ) > 0 ) System . out . print ( "1" ) ;	      	  if ( k & 1 ) cout << "1" ;				    	if ( ( k & 1 ) > 0 ) {					  
    else System . out . print ( "0" ) ;			      	  else cout << "0" ;					    	  cout << "1" ;						  
  }							      	}							    	}							  
}							      }								    	else {							  
							      								    	  cout << "0" ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MISSING_NUMBER_1				      FIND_THE_MISSING_NUMBER_1					    FIND_THE_MISSING_NUMBER_1					  FIND_THE_MISSING_NUMBER_1
--							      --							    --								  --
static int getMissingNo ( int a [ ] , int n ) {		      int getMissingNo ( int a [ ] , int n ) {			    int getMissingNo ( int a [ ] , int n ) {			  success : None
  int total = 1 ;					      	int i , total = 1 ;					      int total = 1 ;						  
  for ( int i = 2 ;					      	for ( i = 2 ;						      for ( int i = 2 ;						  
  i <= ( n + 1 ) ;					      	i <= ( n + 1 ) ;					      i <= ( n + 1 ) ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    total += i ;					      	  total += i ;						    	total += i ;						  
    total -= a [ i - 2 ] ;				      	  total -= a [ i - 2 ] ;				    	total -= a [ i - 2 ] ;					  
  }							      	}							      }								  
  return total ;					      	return total ;						      return total ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_SERIES_12_32_52_2N_12				      SUM_SERIES_12_32_52_2N_12					    SUM_SERIES_12_32_52_2N_12					  SUM_SERIES_12_32_52_2N_12
--							      --							    --								  --
static int sumOfSeries ( int n ) {			      int sumOfSeries ( int n ) {				    int sum_of_series ( int n ) {				  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;	      	i ++ ) sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;	      i ++ ) {							  
  return sum ;						      	return sum ;						    	sum = sum + ( 2 * i - 1 ) * ( 2 * i - 1 ) ;		  
}							      }								      }								  
							      								      return sum ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	      SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS
--							      --							    --								  --
static int smallest ( int x , int y , int z ) {		      int smallest ( int x , int y , int z ) {			    int smallest ( int x , int y , int z ) {			  success : None
  int c = 0 ;						      	int c = 0 ;						      int c = 0 ;						  
  while ( x != 0 && y != 0 && z != 0 ) {		      	while ( x && y && z ) {					      while ( x != 0 && y != 0 && z != 0 ) {			  
    x -- ;						      	  x -- ;						    	x -- ;							  
    y -- ;						      	  y -- ;						    	y -- ;							  
    z -- ;						      	  z -- ;						    	z -- ;							  
    c ++ ;						      	  c ++ ;						    	c ++ ;							  
  }							      	}							      }								  
  return c ;						      	return c ;						      return c ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW WRITE_ONE_LINE_C_FUNCTION_TO_FIND_WHETHER_A_NO_IS_POWER_OF_TW
--							      --							    --								  --
static boolean isPowerOfTwo ( int n ) {			      bool isPowerOfTwo ( int n ) {				    bool isPowerOfTwo ( int n ) {				  success : None
  if ( n == 0 ) return false ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return false ;				  
  while ( n != 1 ) {					      	while ( n != 1 ) {					      while ( n != 1 ) {					  
    if ( n % 2 != 0 ) return false ;			      	  if ( n % 2 != 0 ) return 0 ;				    	if ( n % 2 != 0 ) return false ;			  
    n = n / 2 ;						      	  n = n / 2 ;						    	n = n / 2 ;						  
  }							      	}							      }								  
  return true ;						      	return 1 ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS					      SUM_PAIRWISE_PRODUCTS					    SUM_PAIRWISE_PRODUCTS					  SUM_PAIRWISE_PRODUCTS
--							      --							    --								  --
static int findSum ( int n ) {				      long long int findSum ( int n ) {				    int findSum ( int n ) {					  success : None
  int sum = 0 ;						      	long long int sum = 0 ;					      int sum = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = i ;				      	i ++ ) for ( int j = i ;				      i ++ ) for ( int j = i ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) sum = sum + i * j ;				      	j ++ ) sum = sum + i * j ;				      j ++ ) sum = sum + i * j ;				  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TRIANGULAR_NUMBERS					      TRIANGULAR_NUMBERS					    TRIANGULAR_NUMBERS						  TRIANGULAR_NUMBERS
--							      --							    --								  --
static boolean isTriangular ( int num ) {		      bool isTriangular ( int num ) {				    bool isTriangular ( int num ) {				  success : identical to gold
  if ( num < 0 ) return false ;				      	if ( num < 0 ) return false ;				      if ( num < 0 ) return false ;				  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int n = 1 ;					      	for ( int n = 1 ;					      for ( int n = 1 ;						  
  sum <= num ;						      	sum <= num ;						      sum <= num ;						  
  n ++ ) {						      	n ++ ) {						      n ++ ) {							  
    sum = sum + n ;					      	  sum = sum + n ;					    	sum = sum + n ;						  
    if ( sum == num ) return true ;			      	  if ( sum == num ) return true ;			    	if ( sum == num ) return true ;				  
  }							      	}							      }								  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			      SQUARED_TRIANGULAR_NUMBER_SUM_CUBES			    SQUARED_TRIANGULAR_NUMBER_SUM_CUBES				  SQUARED_TRIANGULAR_NUMBER_SUM_CUBES
--							      --							    --								  --
static int findS ( int s ) {				      int findS ( int s ) {					    int findS ( int s ) {					  success : identical to gold
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int n = 1 ;					      	for ( int n = 1 ;					      for ( int n = 1 ;						  
  sum < s ;						      	sum < s ;						      sum < s ;							  
  n ++ ) {						      	n ++ ) {						      n ++ ) {							  
    sum += n * n * n ;					      	  sum += n * n * n ;					    	sum += n * n * n ;					  
    if ( sum == s ) return n ;				      	  if ( sum == s ) return n ;				    	if ( sum == s ) return n ;				  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		      FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		    FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2		  FIND_THE_NUMBER_OCCURRING_ODD_NUMBER_OF_TIMES_2
--							      --							    --								  --
int getOddOccurrence ( int ar [ ] , int ar_size ) {	      int getOddOccurrence ( int ar [ ] , int ar_size ) {	    int getOddOccurrence ( int ar [ ] , int ar_size ) {		  success : None
  int i ;						      	int res = 0 ;						      int i ;							  
  int res = 0 ;						      	for ( int i = 0 ;					      int res = 0 ;						  
  for ( i = 0 ;						      	i < ar_size ;						      for ( i = 0 ;						  
  i < ar_size ;						      	i ++ ) res = res ^ ar [ i ] ;				      i < ar_size ;						  
  i ++ ) {						      	return res ;						      i ++ ) res = res ^ ar [ i ] ;				  
    res = res ^ ar [ i ] ;				      }								      return res ;						  
  }							      								    }								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_EVEN_FIBONACCI_NUMBER				      NTH_EVEN_FIBONACCI_NUMBER					    NTH_EVEN_FIBONACCI_NUMBER					  NTH_EVEN_FIBONACCI_NUMBER
--							      --							    --								  --
static long evenFib ( int n ) {				      long int evenFib ( int n ) {				    long long evenFib ( int n ) {				  script_not_found : None
  if ( n < 1 ) return n ;				      	if ( n < 1 ) return n ;					      if ( n < 1 ) return n ;					  
  if ( n == 1 ) return 2 ;				      	if ( n == 1 ) return 2 ;				      if ( n == 1 ) return 2 ;					  
  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;  	return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SQUARE_ROOT_OF_A_PERFECT_SQUARE				      SQUARE_ROOT_OF_A_PERFECT_SQUARE				    SQUARE_ROOT_OF_A_PERFECT_SQUARE				  SQUARE_ROOT_OF_A_PERFECT_SQUARE
--							      --							    --								  --
static float squareRoot ( float n ) {			      public : float squareRoot ( float n ) {			    float squareRoot ( float n ) {				  script_not_found : None
  float x = n ;						      	float x = n ;						      float x = n ;						  
  float y = 1 ;						      	float y = 1 ;						      float y = 1 ;						  
  double e = 0.000001 ;					      	float e = 0.000001 ;					      double e = 0.000001 ;					  
  while ( x - y > e ) {					      	while ( x - y > e ) {					      while ( x - y > e ) {					  
    x = ( x + y ) / 2 ;					      	  x = ( x + y ) / 2 ;					    	x = ( x + y ) / 2 ;					  
    y = n / x ;						      	  y = n / x ;						    	y = n / x ;						  
  }							      	}							      }								  
  return x ;						      	return x ;						      return x ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION      CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	    CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION	  CHECK_NUMBER_IS_PERFECT_SQUARE_USING_ADDITIONSUBTRACTION
--							      --							    --								  --
static boolean isPerfectSquare ( int n ) {		      bool isPerfectSquare ( int n ) {				    bool isPerfectSquare ( int n ) {				  success : identical to gold
  for ( int sum = 0 , i = 1 ;				      	for ( int sum = 0 , i = 1 ;				      for ( int sum = 0 , i = 1 ;				  
  sum < n ;						      	sum < n ;						      sum < n ;							  
  i += 2 ) {						      	i += 2 ) {						      i += 2 ) {						  
    sum += i ;						      	  sum += i ;						    	sum += i ;						  
    if ( sum == n ) return true ;			      	  if ( sum == n ) return true ;				    	if ( sum == n ) return true ;				  
  }							      	}							      }								  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1			    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS_1
--							      --							    --								  --
public static int countDigits ( int a , int b ) {	      int countDigits ( int a , int b ) {			    int countDigits ( int a , int b ) {				  success : None
  if ( a == 0 || b == 0 ) return 1 ;			      	if ( a == 0 || b == 0 ) return 1 ;			      if ( a == 0 || b == 0 ) return 1 ;			  
  return ( int ) Math . floor ( Math . log10 ( Math . abs ( a 	return floor ( log10 ( abs ( a ) ) + log10 ( abs ( b ) ) )    return ( int ) floor ( log10 ( abs ( a ) ) + log10 ( abs (  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUICK_WAY_CHECK_CHARACTERS_STRING			      QUICK_WAY_CHECK_CHARACTERS_STRING				    QUICK_WAY_CHECK_CHARACTERS_STRING				  QUICK_WAY_CHECK_CHARACTERS_STRING
--							      --							    --								  --
static boolean allCharactersSame ( String s ) {		      bool allCharactersSame ( string s ) {			    bool allCharactersSame ( string s ) {			  success : identical to gold
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( s . charAt ( i ) != s . charAt ( 0 ) ) return f 	i ++ ) if ( s [ i ] != s [ 0 ] ) return false ;		      i ++ ) if ( s [ i ] != s [ 0 ] ) return false ;		  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		      CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		    CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1		  CHECK_IF_A_NUMBER_IS_POWER_OF_ANOTHER_NUMBER_1
--							      --							    --								  --
static boolean isPower ( int x , int y ) {		      bool isPower ( int x , int y ) {				    bool isPower ( int x , int y ) {				  error : /bin/bash: line 1: 2967361 Floating point
  int res1 = ( int ) Math . log ( y ) / ( int ) Math . log (  	int res1 = log ( y ) / log ( x ) ;			      int res1 = ( int ) log ( y ) / ( int ) log ( x ) ;	  exception(core dumped) ./CHECK_IF_A_NUMBER_IS_POWE
  double res2 = Math . log ( y ) / Math . log ( x ) ;	      	double res2 = log ( y ) / log ( x ) ;			      double res2 = log ( y ) / log ( x ) ;			  R_OF_ANOTHER_NUMBER_1_cpp
  return ( res1 == res2 ) ;				      	return ( res1 == res2 ) ;				      return ( res1 == res2 ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_A_STRING_USING_RECURSION			      REVERSE_A_STRING_USING_RECURSION				    REVERSE_A_STRING_USING_RECURSION				  REVERSE_A_STRING_USING_RECURSION
--							      --							    --								  --
void reverse ( String str ) {				      void reverse ( string str ) {				    void reverse ( string str ) {				  script_not_found : None
  if ( ( str == null ) || ( str . length ( ) <= 1 ) ) System  	if ( str . size ( ) == 0 ) {				      if ( ( str . size ( ) == 0 ) || ( str . size ( ) <= 1 ) ) { 
  else {						      	  return ;						    	cout << str << endl ;					  
    System . out . print ( str . charAt ( str . length ( ) -  	}							      }								  
    reverse ( str . substring ( 0 , str . length ( ) - 1 ) )  	reverse ( str . substr ( 1 ) ) ;			      else {							  
  }							      	cout << str [ 0 ] ;					    	cout << str [ str . size ( ) - 1 ] << endl ;		  
}							      }								    	reverse ( str . begin ( ) , str . end ( ) ) ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT		  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT
--							      --							    --								  --
static int isPowerOfFour ( int n ) {			      public : bool isPowerOfFour ( int n ) {			    int isPowerOfFour ( int n ) {				  script_not_found : None
  if ( n == 0 ) return 0 ;				      	if ( n == 0 ) return 0 ;				      if ( n == 0 ) return 0 ;					  
  while ( n != 1 ) {					      	while ( n != 1 ) {					      while ( n != 1 ) {					  
    if ( n % 4 != 0 ) return 0 ;			      	  if ( n % 4 != 0 ) return 0 ;				    	if ( n % 4 != 0 ) return 0 ;				  
    n = n / 4 ;						      	  n = n / 4 ;						    	n = n / 4 ;						  
  }							      	}							      }								  
  return 1 ;						      	return 1 ;						      return 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HORNERS_METHOD_POLYNOMIAL_EVALUATION			      HORNERS_METHOD_POLYNOMIAL_EVALUATION			    HORNERS_METHOD_POLYNOMIAL_EVALUATION			  HORNERS_METHOD_POLYNOMIAL_EVALUATION
--							      --							    --								  --
static int horner ( int poly [ ] , int n , int x ) {	      int horner ( int poly [ ] , int n , int x ) {		    int horner ( int poly [ ] , int n , int x ) {		  success : None
  int result = poly [ 0 ] ;				      	int result = poly [ 0 ] ;				      int result = poly [ 0 ] ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) result = result * x + poly [ i ] ;		      	i ++ ) result = result * x + poly [ i ] ;		      i ++ ) {							  
  return result ;					      	return result ;						    	result = result * x + poly [ i ] ;			  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_1
--							      --							    --								  --
static int nextPowerOf2 ( int n ) {			      unsigned int nextPowerOf2 ( unsigned int n ) {		    int nextPowerOf2 ( int n ) {				  success : None
  int p = 1 ;						      	unsigned int p = 1 ;					      int p = 1 ;						  
  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;	      	if ( n && ! ( n & ( n - 1 ) ) ) return n ;		      if ( n && ( n & ( n - 1 ) ) == 0 ) return n ;		  
  while ( p < n ) p <<= 1 ;				      	while ( p < n ) p <<= 1 ;				      while ( p < n ) {						  
  return p ;						      	return p ;						    	p <<= 1 ;						  
}							      }								      }								  
							      								      return p ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		      SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		    SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX		  SUM_DIAGONALS_SPIRAL_ODD_ORDER_SQUARE_MATRIX
--							      --							    --								  --
static int spiralDiaSum ( int n ) {			      int spiralDiaSum ( int n ) {				    int spiralDiaSum ( int n ) {				  script_not_found : None
  if ( n == 1 ) return 1 ;				      	if ( n == 1 ) return 1 ;				      if ( n == 1 ) return 1 ;					  
  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 	return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ;   return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ; 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	      MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	    MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS	  MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS
--							      --							    --								  --
static int cost ( int [ ] a , int n ) {			      int cost ( int a [ ] , int n ) {				    int cost ( vector < int > a , int n ) {			  error : MINIMUM_COST_MAKE_ARRAY_SIZE_1_REMOVING_LA
  int min = a [ 0 ] ;					      	return ( n - 1 ) * ( * min_element ( a , a + n ) ) ;	      int min = a [ 0 ] ;					  RGER_PAIRS.cpp: In function ‘int main()’: MINIMUM_
  for ( int i = 1 ;					      }								      for ( int i = 1 ;						  COST_MAKE_ARRAY_SIZE_1_REMOVING_LARGER_PAIRS.cpp:4
  i < a . length ;					      								      i < a . size ( ) ;					  0:21: error: could not convert ‘&(& param0.std::ve
  i ++ ) {						      								      i ++ ) {							  ctor<std::vector<int> >::operator[](((std::vector<
    if ( a [ i ] < min ) min = a [ i ] ;		      								    	if ( a [ i ] < min ) {					  std::vector<int> >::size_type)i)))->std::vector<in
  }							      								    	  min = a [ i ] ;					  t>::front()’ from ‘__gnu_cxx::__alloc_traits<std::
  return ( n - 1 ) * min ;				      								    	}							  allocator<int>, int>::value_type*’ {aka ‘int*’} to
}							      								      }								   ‘std::vector<int>’	       if(f_filled(&param0[i
							      								      return ( n - 1 ) * min ;					  ].front(),param1[i]) == f_gold(&param0[i].front(),
							      								    }								  param1[i]))			   ^~~~~~~~~~~~~~~~~
							      								    								  ~
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE    FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE	  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE
--							      --							    --								  --
static char first ( String str ) {			      char first ( string str ) {				    char first ( const std :: string & str ) {			  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( std :: string :: const_iterator i = str . begin ( ) ; 
  i < str . length ( ) ;				      	i < str . length ( ) ;					      i != str . end ( ) ;					  
  i ++ ) if ( Character . isUpperCase ( str . charAt ( i ) )  	i ++ ) if ( isupper ( str [ i ] ) ) return str [ i ] ;	      ++ i ) if ( isupper ( * i ) ) return * i ;		  
  return 0 ;						      	return 0 ;						      return 0 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSITION_OF_RIGHTMOST_SET_BIT_2				      POSITION_OF_RIGHTMOST_SET_BIT_2				    POSITION_OF_RIGHTMOST_SET_BIT_2				  POSITION_OF_RIGHTMOST_SET_BIT_2
--							      --							    --								  --
static int Right_most_setbit ( int num ) {		      int Right_most_setbit ( int num ) {			    int Right_most_setbit ( int num ) {				  script_not_found : None
  int pos = 1 ;						      	int pos = 1 ;						      int pos = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < INT_SIZE ;					      	i < INT_SIZE ;						      i < INT_SIZE ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;		      	  if ( ! ( num & ( 1 << i ) ) ) pos ++ ;		    	if ( ( num & ( 1 << i ) ) == 0 ) {			  
    else break ;					      	  else break ;						    	  pos ++ ;						  
  }							      	}							    	}							  
  return pos ;						      	return pos ;						    	else {							  
}							      }								    	  break ;						  
							      								    	}							  
							      								      }								  
							      								      return pos ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY		      FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			    FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY			  FIND_ELEMENTS_LARGER_HALF_ELEMENTS_ARRAY
--							      --							    --								  --
static void findLarger ( int arr [ ] , int n ) {	      void findLarger ( int arr [ ] , int n ) {			    void findLarger ( int arr [ ] , int n ) {			  script_not_found : None
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i >= n / 2 ;						      	i >= n / 2 ;						      i >= n / 2 ;						  
  i -- ) System . out . print ( arr [ i ] + " " ) ;	      	i -- ) cout << arr [ i ] << " " ;			      i -- ) {							  
}							      }								    	cout << arr [ i ] << " " ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GAME_REPLACING_ARRAY_ELEMENTS				      GAME_REPLACING_ARRAY_ELEMENTS				    GAME_REPLACING_ARRAY_ELEMENTS				  GAME_REPLACING_ARRAY_ELEMENTS
--							      --							    --								  --
public static int playGame ( int arr [ ] ) {		      int playGame ( int arr [ ] , int n ) {			    int playGame ( int arr [ ] ) {				  script_not_found : None
  HashSet < Integer > set = new HashSet < > ( ) ;	      	unordered_set < int > hash ;				      std :: set < int > set ;					  
  for ( int i : arr ) set . add ( i ) ;			      	for ( int i = 0 ;					      for ( int i : arr ) {					  
  return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;		      	i < n ;							    	set . insert ( i ) ;					  
}							      	i ++ ) hash . insert ( arr [ i ] ) ;			      }								  
							      	return ( hash . size ( ) % 2 == 0 ? 1 : 2 ) ;		      return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;		  
							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			      FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			    FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X			  FIND_VALUE_OF_Y_MOD_2_RAISED_TO_POWER_X
--							      --							    --								  --
static long yMod ( long y , long x ) {			      long long int yMod ( long long int y , long long int x ) {    long long yMod ( long long y , long long x ) {		  success : None
  if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y 	if ( log2 ( y ) < x ) return y ;			      if ( ( log ( y ) / log ( 2 ) ) < x ) return y ;		  
  if ( x > 63 ) return y ;				      	if ( x > 63 ) return y ;				      if ( x > 63 ) return y ;					  
  return ( y % ( 1 << ( int ) x ) ) ;			      	return ( y % ( 1 << x ) ) ;				      return ( y % ( 1 << ( int ) x ) ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIBONACCI_MODULO_P					      FIBONACCI_MODULO_P					    FIBONACCI_MODULO_P						  FIBONACCI_MODULO_P
--							      --							    --								  --
static int findMinZero ( int p ) {			      int findMinZero ( int p ) {				    int findMinZero ( int p ) {					  success : identical to gold
  int first = 1 , second = 1 , number = 2 , next = 1 ;	      	int first = 1 , second = 1 , number = 2 , next = 1 ;	      int first = 1 , second = 1 , number = 2 , next = 1 ;	  
  while ( next > 0 ) {					      	while ( next ) {					      while ( next ) {						  
    next = ( first + second ) % p ;			      	  next = ( first + second ) % p ;			    	next = ( first + second ) % p ;				  
    first = second ;					      	  first = second ;					    	first = second ;					  
    second = next ;					      	  second = next ;					    	second = next ;						  
    number ++ ;						      	  number ++ ;						    	number ++ ;						  
  }							      	}							      }								  
  return number ;					      	return number ;						      return number ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_DIGITS_PRODUCT_TWO_NUMBERS			      NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				    NUMBER_DIGITS_PRODUCT_TWO_NUMBERS				  NUMBER_DIGITS_PRODUCT_TWO_NUMBERS
--							      --							    --								  --
static int countDigits ( int a , int b ) {		      int countDigits ( int a , int b ) {			    int countDigits ( int a , int b ) {				  success : identical to gold
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int p = Math . abs ( a * b ) ;			      	int p = abs ( a * b ) ;					      int p = abs ( a * b ) ;					  
  if ( p == 0 ) return 1 ;				      	if ( p == 0 ) return 1 ;				      if ( p == 0 ) return 1 ;					  
  while ( p > 0 ) {					      	while ( p > 0 ) {					      while ( p > 0 ) {						  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
    p = p / 10 ;					      	  p = p / 10 ;						    	p = p / 10 ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS	      ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		    ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS		  ANALYSIS_OF_ALGORITHMS_SET_2_ASYMPTOTIC_ANALYSIS
--							      --							    --								  --
static int search ( int arr [ ] , int n , int x ) {	      int search ( int arr [ ] , int n , int x ) {		    int search ( int arr [ ] , int n , int x ) {		  success : None
  int i ;						      	int i ;							      int i ;							  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] == x ) {				      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) {					  
      return i ;					      	}							    	  return i ;						  
    }							      	return - 1 ;						    	}							  
  }							      }								      }								  
  return - 1 ;						      								      return - 1 ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_STRING_ROTATION_PALINDROME			      CHECK_GIVEN_STRING_ROTATION_PALINDROME			    CHECK_GIVEN_STRING_ROTATION_PALINDROME			  CHECK_GIVEN_STRING_ROTATION_PALINDROME
--							      --							    --								  --
static boolean isPalindrome ( String str ) {		      bool isPalindrome ( string str ) {			    bool isPalindrome ( string str ) {				  success : identical to gold
  int l = 0 ;						      	int l = 0 ;						      int l = 0 ;						  
  int h = str . length ( ) - 1 ;			      	int h = str . length ( ) - 1 ;				      int h = str . length ( ) - 1 ;				  
  while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt  	while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return    while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		      PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		    PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2		  PROGRAM_REVERSE_STRING_ITERATIVE_RECURSIVE_2
--							      --							    --								  --
static void recursiveReverse ( char [ ] str , int i ) {	      void recursiveReverse ( string & str , int i = 0 ) {	    void recursiveReverse ( char * str , int i ) {		  script_not_found : None
  int n = str . length ;				      	int n = str . length ( ) ;				      int n = strlen ( str ) ;					  
  if ( i == n / 2 ) return ;				      	if ( i == n / 2 ) return ;				      if ( i == n / 2 ) return ;				  
  swap ( str , i , n - i - 1 ) ;			      	swap ( str [ i ] , str [ n - i - 1 ] ) ;		      swap ( str + i , str + n - i - 1 ) ;			  
  recursiveReverse ( str , i + 1 ) ;			      	recursiveReverse ( str , i + 1 ) ;			      recursiveReverse ( str + i + 1 ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2	      SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		    SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2		  SMALLEST_POWER_OF_2_GREATER_THAN_OR_EQUAL_TO_N_2
--							      --							    --								  --
static int nextPowerOf2 ( int n ) {			      unsigned int nextPowerOf2 ( unsigned int n ) {		    int nextPowerOf2 ( int n ) {				  success : None
  n -- ;						      	n -- ;							      n -- ;							  
  n |= n >> 1 ;						      	n |= n >> 1 ;						      n |= n >> 1 ;						  
  n |= n >> 2 ;						      	n |= n >> 2 ;						      n |= n >> 2 ;						  
  n |= n >> 4 ;						      	n |= n >> 4 ;						      n |= n >> 4 ;						  
  n |= n >> 8 ;						      	n |= n >> 8 ;						      n |= n >> 8 ;						  
  n |= n >> 16 ;					      	n |= n >> 16 ;						      n |= n >> 16 ;						  
  n ++ ;						      	n ++ ;							      n ++ ;							  
  return n ;						      	return n ;						      return n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	      MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	    MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N	  MINIMIZE_THE_SUM_OF_DIGITS_OF_A_AND_B_SUCH_THAT_A_B_N
--							      --							    --								  --
static int minSum ( int n ) {				      int minSum ( int n ) {					    int minSum ( int n ) {					  success : identical to gold
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    sum += ( n % 10 ) ;					      	  sum += ( n % 10 ) ;					    	sum += ( n % 10 ) ;					  
    n /= 10 ;						      	  n /= 10 ;						    	n /= 10 ;						  
  }							      	}							      }								  
  if ( sum == 1 ) return 10 ;				      	if ( sum == 1 ) return 10 ;				      if ( sum == 1 ) return 10 ;				  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY_2
--							      --							    --								  --
static int find_extra_element_index ( int [ ] arrA , int [ ]  int find_extra_element_index ( int arrA [ ] , int arrB [ ] ,  int find_extra_element_index ( int * arrA , int * arrB ) {	  script_not_found : None
  int extra_element = sum ( arrA ) - sum ( arrB ) ;	      	int extra_element = sum ( arrA , n ) - sum ( arrB , m ) ;     int extra_element = sum ( arrA ) - sum ( arrB ) ;		  
  return indexOf ( arrA , extra_element ) ;		      	return indexOf ( arrA , extra_element , n ) ;		      return find ( arrA , extra_element ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY    COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY	  COUNT_NUMBER_OF_OCCURRENCES_OR_FREQUENCY_IN_A_SORTED_ARRAY
--							      --							    --								  --
static int countOccurrences ( int arr [ ] , int n , int x ) { int countOccurrences ( int arr [ ] , int n , int x ) {	    int countOccurrences ( int arr [ ] , int n , int x ) {	  success : identical to gold
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( x == arr [ i ] ) res ++ ;			      	i ++ ) if ( x == arr [ i ] ) res ++ ;			      i ++ ) if ( x == arr [ i ] ) res ++ ;			  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FINDING_POWER_PRIME_NUMBER_P_N				      FINDING_POWER_PRIME_NUMBER_P_N				    FINDING_POWER_PRIME_NUMBER_P_N				  FINDING_POWER_PRIME_NUMBER_P_N
--							      --							    --								  --
static int PowerOFPINnfactorial ( int n , int p ) {	      int PowerOFPINnfactorial ( int n , int p ) {		    int PowerOFPINnfactorial ( int n , int p ) {		  success : None
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = 1 ;					      	int temp = p ;						      for ( int i = 1 ;						  
  i <= n ;						      	while ( temp <= n ) {					      i <= n ;							  
  i ++ ) {						      	  ans += n / temp ;					      i ++ ) {							  
    int count = 0 , temp = i ;				      	  temp = temp * p ;					    	int count = 0 , temp = i ;				  
    while ( temp % p == 0 ) {				      	}							    	while ( temp % p == 0 ) {				  
      count ++ ;					      	return ans ;						    	  count ++ ;						  
      temp = temp / p ;					      }								    	  temp = temp / p ;					  
    }							      								    	}							  
    ans += count ;					      								    	ans += count ;						  
  }							      								      }								  
  return ans ;						      								      return ans ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_1				      DYNAMIC_PROGRAMMING_SET_1					    DYNAMIC_PROGRAMMING_SET_1					  DYNAMIC_PROGRAMMING_SET_1
--							      --							    --								  --
int fib ( int n ) {					      int fib ( int n ) {					    int fib ( int n ) {						  script_not_found : None
  if ( lookup [ n ] == NIL ) {				      	if ( lookup [ n ] == NIL ) {				      if ( lookup [ n ] == NIL ) {				  
    if ( n <= 1 ) lookup [ n ] = n ;			      	  if ( n <= 1 ) lookup [ n ] = n ;			    	if ( n <= 1 ) {						  
    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	      	  else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	    	  lookup [ n ] = n ;					  
  }							      	}							    	}							  
  return lookup [ n ] ;					      	return lookup [ n ] ;					    	else {							  
}							      }								    	  lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;	  
							      								    	}							  
							      								      }								  
							      								      return lookup [ n ] ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			      C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			    C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE			  C_PROGRAM_CYCLICALLY_ROTATE_ARRAY_ONE
--							      --							    --								  --
static void rotate ( ) {				      void rotate ( int arr [ ] , int n ) {			    void rotate ( ) {						  script_not_found : None
  int x = arr [ arr . length - 1 ] , i ;		      	int x = arr [ n - 1 ] , i ;				      int x = arr [ arr . size ( ) - 1 ] , i ;			  
  for ( i = arr . length - 1 ;				      	for ( i = n - 1 ;					      for ( i = arr . size ( ) - 1 ;				  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  i -- ) arr [ i ] = arr [ i - 1 ] ;			      	i -- ) arr [ i ] = arr [ i - 1 ] ;			      i -- ) {							  
  arr [ 0 ] = x ;					      	arr [ 0 ] = x ;						    	arr [ i ] = arr [ i - 1 ] ;				  
}							      }								      }								  
							      								      arr [ 0 ] = x ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_9_USING_BITWISE_OPERATORS			      DIVISIBILITY_9_USING_BITWISE_OPERATORS			    DIVISIBILITY_9_USING_BITWISE_OPERATORS			  DIVISIBILITY_9_USING_BITWISE_OPERATORS
--							      --							    --								  --
static boolean isDivBy9 ( int n ) {			      bool isDivBy9 ( int n ) {					    bool isDivBy9 ( int n ) {					  success : identical to gold
  if ( n == 0 || n == 9 ) return true ;			      	if ( n == 0 || n == 9 ) return true ;			      if ( n == 0 || n == 9 ) return true ;			  
  if ( n < 9 ) return false ;				      	if ( n < 9 ) return false ;				      if ( n < 9 ) return false ;				  
  return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )  	return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )    return isDivBy9 ( ( int ) ( n >> 3 ) - ( int ) ( n & 7 ) )  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			      CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT			    CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT				  CHECK_LARGE_NUMBER_DIVISIBLE_9_NOT
--							      --							    --								  --
static boolean check ( String str ) {			      int check ( string str ) {				    bool check ( string str ) {					  success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  int digitSum = 0 ;					      	int digitSum = 0 ;					      int digitSum = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;	      	i ++ ) digitSum += ( str [ i ] - '0' ) ;		      i ++ ) {							  
  return ( digitSum % 9 == 0 ) ;			      	return ( digitSum % 9 == 0 ) ;				    	digitSum += ( str [ i ] - '0' ) ;			  
}							      }								      }								  
							      								      return ( digitSum % 9 == 0 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			      PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			    PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS			  PROGRAM_FIND_GCD_FLOATING_POINT_NUMBERS
--							      --							    --								  --
static double gcd ( double a , double b ) {		      double gcd ( double a , double b ) {			    double gcd ( double a , double b ) {			  script_not_found : None
  if ( a < b ) return gcd ( b , a ) ;			      	if ( a < b ) return gcd ( b , a ) ;			      if ( a < b ) return gcd ( b , a ) ;			  
  if ( Math . abs ( b ) < 0.001 ) return a ;		      	if ( fabs ( b ) < 0.001 ) return a ;			      if ( fabs ( b ) < 0.001 ) return a ;			  
  else return ( gcd ( b , a - Math . floor ( a / b ) * b ) )  	else return ( gcd ( b , a - floor ( a / b ) * b ) ) ;	      else return ( gcd ( b , a - floor ( a / b ) * b ) ) ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS		      SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			    SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS			  SUM_ELEMENTS_K1TH_K2TH_SMALLEST_ELEMENTS
--							      --							    --								  --
static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) int sumBetweenTwoKth ( int arr [ ] , int n , int k1 , int k2  int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) {	  script_not_found : None
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + k2 ) ;					  
  int result = 0 ;					      	return accumulate ( arr + k1 , arr + k2 - 1 , 0 ) ;	      int result = 0 ;						  
  for ( int i = k1 ;					      }								      for ( int i = k1 ;					  
  i < k2 - 1 ;						      								      i < k2 - 1 ;						  
  i ++ ) result += arr [ i ] ;				      								      i ++ ) {							  
  return result ;					      								    	result += arr [ i ] ;					  
}							      								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS   EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS	  EULERS_CRITERION_CHECK_IF_SQUARE_ROOT_UNDER_MODULO_P_EXISTS
--							      --							    --								  --
static boolean squareRootExists ( int n , int p ) {	      bool squareRootExists ( int n , int p ) {			    bool square_root_exists ( int n , int p ) {			  success : None
  n = n % p ;						      	n = n % p ;						      n = n % p ;						  
  for ( int x = 2 ;					      	for ( int x = 2 ;					      for ( int x = 2 ;						  
  x < p ;						      	x < p ;							      x < p ;							  
  x ++ ) if ( ( x * x ) % p == n ) return true ;	      	x ++ ) if ( ( x * x ) % p == n ) return true ;		      x ++ ) if ( ( x * x ) % p == n ) return true ;		  
  return false ;					      	return false ;						      return false ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		      COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		    COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX		  COUNT_ENTRIES_EQUAL_TO_X_IN_A_SPECIAL_MATRIX
--							      --							    --								  --
static int count ( int n , int x ) {			      int count ( int n , int x ) {				    int count ( int n , int x ) {				  script_not_found : None
  int count = 0 ;					      	int count = = 0 ;					      int count = 0 ;						  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n && i <= x ;					      	i <= n && i <= x ;					      i <= n && i <= x ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( x / i <= n && x % i == 0 ) count ++ ;		      	  if ( x / i <= n && x % i == 0 ) count ++ ;		    	if ( x / i <= n && x % i == 0 ) {			  
  }							      	}							    	  count ++ ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE	      SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		    SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE		  SELECT_A_RANDOM_NUMBER_FROM_STREAM_WITH_O1_SPACE
--							      --							    --								  --
static int selectRandom ( int x ) {			      int selectRandom ( int x ) {				    int selectRandom ( int x ) {				  script_not_found : None
  count ++ ;						      	static int res ;					      count ++ ;						  
  if ( count == 1 ) res = x ;				      	static int count = 0 ;					      if ( count == 1 ) {					  
  else {						      	count ++ ;						    	res = x ;						  
    Random r = new Random ( ) ;				      	if ( count == 1 ) res = x ;				      }								  
    int i = r . nextInt ( count ) ;			      	else {							      else {							  
    if ( i == count - 1 ) res = x ;			      	  int i = rand ( ) % count ;				    	srand ( time ( NULL ) ) ;				  
  }							      	  if ( i == count - 1 ) res = x ;			    	int i = rand ( ) % count ;				  
  return res ;						      	}							    	if ( i == count - 1 ) {					  
}							      	return res ;						    	  res = x ;						  
							      }								    	}							  
							      								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY    FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY	  FIND_INDEX_OF_AN_EXTRA_ELEMENT_PRESENT_IN_ONE_SORTED_ARRAY
--							      --							    --								  --
static int findExtra ( int arr1 [ ] , int arr2 [ ] , int n )  int findExtra ( int arr1 [ ] , int arr2 [ ] , int n ) {	    int find_extra ( int arr1 [ ] , int arr2 [ ] , int n ) {	  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;	      	i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;	      i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return i ;		  
  return n ;						      	return n ;						      return n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_NTH_CATALAN_NUMBER				      PROGRAM_NTH_CATALAN_NUMBER				    PROGRAM_NTH_CATALAN_NUMBER					  PROGRAM_NTH_CATALAN_NUMBER
--							      --							    --								  --
int catalan ( int n ) {					      unsigned long int catalan ( unsigned int n ) {		    int catalan ( int n ) {					  script_not_found : None
  int res = 0 ;						      	if ( n <= 1 ) return 1 ;				      int res = 0 ;						  
  if ( n <= 1 ) {					      	unsigned long int res = 0 ;				      if ( n <= 1 ) {						  
    return 1 ;						      	for ( int i = 0 ;					    	return 1 ;						  
  }							      	i < n ;							      }								  
  for ( int i = 0 ;					      	i ++ ) res += catalan ( i ) * catalan ( n - i - 1 ) ;	      for ( int i = 0 ;						  
  i < n ;						      	return res ;						      i < n ;							  
  i ++ ) {						      }								      i ++ ) {							  
    res += catalan ( i ) * catalan ( n - i - 1 ) ;	      								    	res += catalan ( i ) * catalan ( n - i - 1 ) ;		  
  }							      								      }								  
  return res ;						      								      return res ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		      FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		    FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO		  FIND_NTH_FIBONACCI_NUMBER_USING_GOLDEN_RATIO
--							      --							    --								  --
static int fib ( int n ) {				      int fib ( int n ) {					    int fib ( int n ) {						  script_not_found : None
  if ( n < 6 ) return f [ n ] ;				      	if ( n < 6 ) return f [ n ] ;				      if ( n < 6 ) return f [ n ] ;				  
  int t = 5 ;						      	int t = 5 , fn = 5 ;					      int t = 5 ;						  
  int fn = 5 ;						      	while ( t < n ) {					      int fn = 5 ;						  
  while ( t < n ) {					      	  fn = round ( fn * PHI ) ;				      while ( t < n ) {						  
    fn = ( int ) Math . round ( fn * PHI ) ;		      	  t ++ ;						    	fn = ( int ) round ( fn * PHI ) ;			  
    t ++ ;						      	}							    	t ++ ;							  
  }							      	return fn ;						      }								  
  return fn ;						      }								      return fn ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_PROGRAM_PRIME_NUMBER				      RECURSIVE_PROGRAM_PRIME_NUMBER				    RECURSIVE_PROGRAM_PRIME_NUMBER				  RECURSIVE_PROGRAM_PRIME_NUMBER
--							      --							    --								  --
static boolean isPrime ( int n , int i ) {		      bool isPrime ( int n , int i = 2 ) {			    bool isPrime ( int n , int i ) {				  success : None
  if ( n <= 2 ) return ( n == 2 ) ? true : false ;	      	if ( n <= 2 ) return ( n == 2 ) ? true : false ;	      if ( n <= 2 ) return ( n == 2 ) ? true : false ;		  
  if ( n % i == 0 ) return false ;			      	if ( n % i == 0 ) return false ;			      if ( n % i == 0 ) return false ;				  
  if ( i * i > n ) return true ;			      	if ( i * i > n ) return true ;				      if ( i * i > n ) return true ;				  
  return isPrime ( n , i + 1 ) ;			      	return isPrime ( n , i + 1 ) ;				      return isPrime ( n , i + 1 ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_3
--							      --							    --								  --
static int numberOfPaths ( int m , int n ) {		      int numberOfPaths ( int m , int n ) {			    int numberOfPaths ( int m , int n ) {			  success : identical to gold
  int path = 1 ;					      	int path = 1 ;						      int path = 1 ;						  
  for ( int i = n ;					      	for ( int i = n ;					      for ( int i = n ;						  
  i < ( m + n - 1 ) ;					      	i < ( m + n - 1 ) ;					      i < ( m + n - 1 ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    path *= i ;						      	  path *= i ;						    	path *= i ;						  
    path /= ( i - n + 1 ) ;				      	  path /= ( i - n + 1 ) ;				    	path /= ( i - n + 1 ) ;					  
  }							      	}							      }								  
  return path ;						      	return path ;						      return path ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	      NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	    NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES	  NUMBER_UNIQUE_RECTANGLES_FORMED_USING_N_UNIT_SQUARES
--							      --							    --								  --
static int countRect ( int n ) {			      int countRect ( int n ) {					    int countRect ( int n ) {					  success : identical to gold
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int length = 1 ;				      	for ( int length = 1 ;					      for ( int length = 1 ;					  
  length <= Math . sqrt ( n ) ;				      	length <= sqrt ( n ) ;					      length <= sqrt ( n ) ;					  
  ++ length ) for ( int height = length ;		      	++ length ) for ( int height = length ;			      ++ length ) for ( int height = length ;			  
  height * length <= n ;				      	height * length <= n ;					      height * length <= n ;					  
  ++ height ) ans ++ ;					      	++ height ) ans ++ ;					      ++ height ) ans ++ ;					  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1     SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	    SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1	  SMALLEST_OF_THREE_INTEGERS_WITHOUT_COMPARISON_OPERATORS_1
--							      --							    --								  --
static int smallest ( int x , int y , int z ) {		      int smallest ( int x , int y , int z ) {			    int smallest ( int x , int y , int z ) {			  failure : #Results: 5, 10
  if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;   	if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z ;	      if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;	  
  return ( ( x / z ) != 1 ) ? x : z ;			      	return ( ! ( x / z ) ) ? x : z ;			      return ( ( x / z ) != 1 ) ? x : z ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	      TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	    TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1	  TOTAL_NUMBER_OF_NON_DECREASING_NUMBERS_WITH_N_DIGITS_1
--							      --							    --								  --
static long countNonDecreasing ( int n ) {		      long long int countNonDecreasing ( int n ) {		    long long countNonDecreasing ( int n ) {			  success : None
  int N = 10 ;						      	int N = 10 ;						      int N = 10 ;						  
  long count = 1 ;					      	long long count = 1 ;					      long long count = 1 ;					  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    count *= ( N + i - 1 ) ;				      	  count *= ( N + i - 1 ) ;				    	count *= ( N + i - 1 ) ;				  
    count /= i ;					      	  count /= i ;						    	count /= i ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	      FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	    FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN	  FIND_HARMONIC_MEAN_USING_ARITHMETIC_MEAN_GEOMETRIC_MEAN
--							      --							    --								  --
static double compute ( int a , int b ) {		      double compute ( int a , int b ) {			    double compute ( int a , int b ) {				  success : identical to gold
  double AM , GM , HM ;					      	double AM , GM , HM ;					      double AM , GM , HM ;					  
  AM = ( a + b ) / 2 ;					      	AM = ( a + b ) / 2 ;					      AM = ( a + b ) / 2 ;					  
  GM = Math . sqrt ( a * b ) ;				      	GM = sqrt ( a * b ) ;					      GM = sqrt ( a * b ) ;					  
  HM = ( GM * GM ) / AM ;				      	HM = ( GM * GM ) / AM ;					      HM = ( GM * GM ) / AM ;					  
  return HM ;						      	return HM ;						      return HM ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		      DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		    DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT		  DYNAMIC_PROGRAMMING_SET_9_BINOMIAL_COEFFICIENT
--							      --							    --								  --
static int binomialCoeff ( int n , int k ) {		      int binomialCoeff ( int n , int k ) {			    int binomial_coeff ( int n , int k ) {			  script_not_found : None
  if ( k == 0 || k == n ) return 1 ;			      	if ( k == 0 || k == n ) return 1 ;			      if ( k == 0 || k == n ) return 1 ;			  
  return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n  	return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n    return binomial_coeff ( n - 1 , k - 1 ) + binomial_coeff (  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE		      NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			    NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE			  NUMBER_INDEXES_EQUAL_ELEMENTS_GIVEN_RANGE
--							      --							    --								  --
static int answer_query ( int a [ ] , int n , int l , int r ) int answer_query ( int a [ ] , int n , int l , int r ) {	    int answer_query ( int a [ ] , int n , int l , int r ) {	  success : identical to gold
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = l ;					      	for ( int i = l ;					      for ( int i = l ;						  
  i < r ;						      	i < r ;							      i < r ;							  
  i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;	      	i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;	      i ++ ) if ( a [ i ] == a [ i + 1 ] ) count += 1 ;		  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2   SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2	  SUM_MATRIX_ELEMENT_ABSOLUTE_DIFFERENCE_ROW_COLUMN_NUMBERS_2
--							      --							    --								  --
static int findSum ( int n ) {				      int findSum ( int n ) {					    int findSum ( int n ) {					  success : identical to gold
  n -- ;						      	n -- ;							      n -- ;							  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  sum += ( n * ( n + 1 ) ) / 2 ;			      	sum += ( n * ( n + 1 ) ) / 2 ;				      sum += ( n * ( n + 1 ) ) / 2 ;				  
  sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;	      	sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		      sum += ( n * ( n + 1 ) * ( 2 * n + 1 ) ) / 6 ;		  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM	      RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		    RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM		  RECURSIVELY_BREAK_NUMBER_3_PARTS_GET_MAXIMUM_SUM
--							      --							    --								  --
static int breakSum ( int n ) {				      int breakSum ( int n ) {					    int breakSum ( int n ) {					  success : identical to gold
  if ( n == 0 || n == 1 ) return n ;			      	if ( n == 0 || n == 1 ) return n ;			      if ( n == 0 || n == 1 ) return n ;			  
  return Math . max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 	return max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 ) + br   return max ( ( breakSum ( n / 2 ) + breakSum ( n / 3 ) + br 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP_1				      CHANGE_BITS_CAN_MADE_ONE_FLIP_1				    CHANGE_BITS_CAN_MADE_ONE_FLIP_1				  CHANGE_BITS_CAN_MADE_ONE_FLIP_1
--							      --							    --								  --
static boolean isOneFlip ( String str ) {		      bool isOneFlip ( string str ) {				    bool isOneFlip ( string str ) {				  success : None
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum += str . charAt ( i ) - '0' ;		      	i ++ ) sum += str [ i ] - '0' ;				      i ++ ) {							  
  return ( sum == n - 1 || sum == 1 ) ;			      	return ( sum == n - 1 || sum == 1 ) ;			    	sum += str [ i ] - '0' ;				  
}							      }								      }								  
							      								      return ( sum == n - 1 || sum == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHANGE_BITS_CAN_MADE_ONE_FLIP				      CHANGE_BITS_CAN_MADE_ONE_FLIP				    CHANGE_BITS_CAN_MADE_ONE_FLIP				  CHANGE_BITS_CAN_MADE_ONE_FLIP
--							      --							    --								  --
static boolean canMakeAllSame ( String str ) {		      bool canMakeAllSame ( string str ) {			    bool canMakeAllSame ( string str ) {			  success : None
  int zeros = 0 , ones = 0 ;				      	int zeros = 0 , ones = 0 ;				      int zeros = 0 , ones = 0 ;				  
  for ( int i = 0 ;					      	for ( char ch : str ) ( ch == '0' ) ? ++ zeros : ++ ones ;    for ( int i = 0 ;						  
  i < str . length ( ) ;				      	return ( zeros == 1 || ones == 1 ) ;			      i < str . length ( ) ;					  
  i ++ ) {						      }								      i ++ ) {							  
    char ch = str . charAt ( i ) ;			      								    	char ch = str [ i ] ;					  
    if ( ch == '0' ) ++ zeros ;				      								    	if ( ch == '0' ) {					  
    else ++ ones ;					      								    	  ++ zeros ;						  
  }							      								    	}							  
  return ( zeros == 1 || ones == 1 ) ;			      								    	else {							  
}							      								    	  ++ ones ;						  
							      								    	}							  
							      								      }								  
							      								      return ( zeros == 1 || ones == 1 ) ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_LARGE_NUMBER_DIVISIBLE_20				      CHECK_LARGE_NUMBER_DIVISIBLE_20				    CHECK_LARGE_NUMBER_DIVISIBLE_20				  CHECK_LARGE_NUMBER_DIVISIBLE_20
--							      --							    --								  --
static Boolean divisibleBy20 ( String num ) {		      bool divisibleBy20 ( string num ) {			    Boolean divisibleBy20 ( char * num ) {			  script_not_found : None
  int lastTwoDigits = Integer . parseInt ( num . substring (  	int lastTwoDigits = stoi ( num . substr ( num . length ( )    int lastTwoDigits = atoi ( num + strlen ( num ) - 2 ) ;	  
  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4  	return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4    return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		      RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		    RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS		  RANGE_QUERIES_FOR_FREQUENCIES_OF_ARRAY_ELEMENTS
--							      --							    --								  --
public static int findFrequency ( int arr [ ] , int n , int l int findFrequency ( int arr [ ] , int n , int left , int righ public : int findFrequency ( int arr [ ] , int n , int left , script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = left - 1 ;				      	for ( int i = left - 1 ;				      for ( int i = left - 1 ;					  
  i < right ;						      	i <= right ;						      i < right ;						  
  ++ i ) if ( arr [ i ] == element ) ++ count ;		      	++ i ) if ( arr [ i ] == element ) ++ count ;		      ++ i ) if ( arr [ i ] == element ) ++ count ;		  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS  DECIMAL_BINARY_CONVERSION_WITHOUT_USING_ARITHMETIC_OPERATORS
--							      --							    --								  --
static String decToBin ( int n ) {			      string decToBin ( int n ) {				    string decToBin ( int n ) {					  success : None
  if ( n == 0 ) return "0" ;				      	if ( n == 0 ) return "0" ;				      if ( n == 0 ) return "0" ;				  
  String bin = "" ;					      	string bin = "" ;					      string bin = "" ;						  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n ) {						  
    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;	      	  bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;		    	bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;		  
    n >>= 1 ;						      	  n >>= 1 ;						    	n >>= 1 ;						  
  }							      	}							      }								  
  return bin ;						      	return bin ;						      return bin ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1     GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	    GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1	  GIVEN_BINARY_STRING_COUNT_NUMBER_SUBSTRINGS_START_END_1_1
--							      --							    --								  --
int countSubStr ( char str [ ] , int n ) {		      int countSubStr ( char str [ ] ) {			    int countSubStr ( char str [ ] , int n ) {			  script_not_found : None
  int m = 0 ;						      	int m = 0 ;						      int m = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	str [ i ] != '\0' ;					      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( str [ i ] == '1' ) m ++ ;			      	  if ( str [ i ] == '1' ) m ++ ;			    	if ( str [ i ] == '1' ) {				  
  }							      	}							    	  m ++ ;						  
  return m * ( m - 1 ) / 2 ;				      	return m * ( m - 1 ) / 2 ;				    	}							  
}							      }								      }								  
							      								      return m * ( m - 1 ) / 2 ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1
--							      --							    --								  --
static char first ( String str , int i ) {		      char first ( string str , int i = 0 ) {			    char * first ( char * str , int i ) {			  error : FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATI
  if ( str . charAt ( i ) == '\0' ) return 0 ;		      	if ( str [ i ] == '\0' ) return 0 ;			      if ( str [ i ] == '\0' ) return 0 ;			  VE_AND_RECURSIVE_1.cpp: In function ‘int main()’:
  if ( Character . isUpperCase ( str . charAt ( i ) ) ) retur 	if ( isupper ( str [ i ] ) ) return str [ i ] ;		      if ( isupper ( str [ i ] ) ) return str + i ;		  FIRST_UPPERCASE_LETTER_IN_A_STRING_ITERATIVE_AND_R
  return first ( str , i + 1 ) ;			      	return first ( str , i + 1 ) ;				      return first ( str , i + 1 ) ;				  ECURSIVE_1.cpp:36:40: error: cannot convert ‘__gnu
}							      }								    }								  _cxx::__alloc_traits<std::allocator<std::__cxx11::
							      								    								  basic_string<char> >, std::__cxx11::basic_string<c
							      								    								  har> >::value_type’ {aka ‘std::__cxx11::basic_stri
							      								    								  ng<char>’} to ‘char*’		 if(f_filled(param0[
							      								    								  i],param1[i]) == f_gold(param0[i],param1[i]))
							      								    								  				      ^ FIRST_UPPERC
							      								    								  ASE_LETTER_IN_A_STRING_ITERATIVE_AND_RECURSIVE_1.c
							      								    								  pp:23:26: note:   initializing argument 1 of ‘char
							      								    								  * f_filled(char*, int)’  char * f_filled ( char *
							      								    								  str , int i ) {		     ~~~~~~~^~~
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_DIVISIBILITY_BINARY_STRING_2K			      CHECK_DIVISIBILITY_BINARY_STRING_2K			    CHECK_DIVISIBILITY_BINARY_STRING_2K				  CHECK_DIVISIBILITY_BINARY_STRING_2K
--							      --							    --								  --
static boolean isDivisible ( String str , int k ) {	      bool isDivisible ( char str [ ] , int k ) {		    bool isDivisible ( string str , int k ) {			  error : /bin/bash: line 1: 2967665 Aborted
  int n = str . length ( ) ;				      	int n = strlen ( str ) ;				      int n = str . size ( ) ;					  	   (core dumped) ./CHECK_DIVISIBILITY_BINARY
  int c = 0 ;						      	int c = 0 ;						      int c = 0 ;						  _STRING_2K_cpp
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) if ( str . charAt ( n - i - 1 ) == '0' ) c ++ ;      	i ++ ) if ( str [ n - i - 1 ] == '0' ) c ++ ;		      i ++ ) if ( str [ n - i - 1 ] == '0' ) c ++ ;		  
  return ( c == k ) ;					      	return ( c == k ) ;					      return ( c == k ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1	  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING_1
--							      --							    --								  --
static void printSquares ( int n ) {			      void printSquares ( int n ) {				    void printSquares ( int n ) {				  script_not_found : None
  int square = 0 , odd = 1 ;				      	int square = 0 , odd = 1 ;				      int square = 0 , odd = 1 ;				  
  for ( int x = 0 ;					      	for ( int x = 0 ;					      for ( int x = 0 ;						  
  x < n ;						      	x < n ;							      x < n ;							  
  x ++ ) {						      	x ++ ) {						      x ++ ) {							  
    System . out . print ( square + " " ) ;		      	  cout << square << " " ;				    	cout << square << " " ;					  
    square = square + odd ;				      	  square = square + odd ;				    	square = square + odd ;					  
    odd = odd + 2 ;					      	  odd = odd + 2 ;					    	odd = odd + 2 ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		      COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3		    COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3			  COUNT_WAYS_REACH_NTH_STAIR_USING_STEP_1_2_3
--							      --							    --								  --
public static int findStep ( int n ) {			      public : int findStep ( int n ) {				    int findStep ( int n ) {					  script_not_found : None
  if ( n == 1 || n == 0 ) return 1 ;			      	if ( n == 1 || n == 0 ) return 1 ;			      if ( n == 1 || n == 0 ) return 1 ;			  
  else if ( n == 2 ) return 2 ;				      	else if ( n == 2 ) return 2 ;				      else if ( n == 2 ) return 2 ;				  
  else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS 	else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS   else return findStep ( n - 3 ) + findStep ( n - 2 ) + findS 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY		      K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			    K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY			  K_LARGESTOR_SMALLEST_ELEMENTS_IN_AN_ARRAY
--							      --							    --								  --
public static void kLargest ( Integer [ ] arr , int k ) {     void kLargest ( int arr [ ] , int n , int k ) {		    void k_largest ( int arr [ ] , int k ) {			  script_not_found : None
  Arrays . sort ( arr , Collections . reverseOrder ( ) ) ;    	sort ( arr , arr + n , greater < int > ( ) ) ;		      sort ( arr , arr + k , cmp ) ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) System . out . print ( arr [ i ] + " " ) ;	      	i ++ ) cout << arr [ i ] << " " ;			      i ++ ) {							  
}							      }								    	cout << arr [ i ] << " " ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULUS_TWO_FLOAT_DOUBLE_NUMBERS			      MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				    MODULUS_TWO_FLOAT_DOUBLE_NUMBERS				  MODULUS_TWO_FLOAT_DOUBLE_NUMBERS
--							      --							    --								  --
static double findMod ( double a , double b ) {		      double findMod ( double a , double b ) {			    double findMod ( double a , double b ) {			  success : None
  if ( a < 0 ) a = - a ;				      	double mod ;						      if ( a < 0 ) a = - a ;					  
  if ( b < 0 ) b = - b ;				      	if ( a < 0 ) mod = - a ;				      if ( b < 0 ) b = - b ;					  
  double mod = a ;					      	else mod = a ;						      double mod = a ;						  
  while ( mod >= b ) mod = mod - b ;			      	if ( b < 0 ) b = - b ;					      while ( mod >= b ) mod = mod - b ;			  
  if ( a < 0 ) return - mod ;				      	while ( mod >= b ) mod = mod - b ;			      if ( a < 0 ) return - mod ;				  
  return mod ;						      	if ( a < 0 ) return - mod ;				      return mod ;						  
}							      	return mod ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION_2			      PROGRAM_DECIMAL_BINARY_CONVERSION_2			    PROGRAM_DECIMAL_BINARY_CONVERSION_2				  PROGRAM_DECIMAL_BINARY_CONVERSION_2
--							      --							    --								  --
static int decimalToBinary ( int N ) {			      unsigned long long int int decimalToBinary ( int N ) {	    int decimalToBinary ( int N ) {				  script_not_found : None
  int B_Number = 0 ;					      	ull B_Number = 0 ;					      int B_Number = 0 ;					  
  int cnt = 0 ;						      	int cnt = 0 ;						      int cnt = 0 ;						  
  while ( N != 0 ) {					      	while ( N != 0 ) {					      while ( N != 0 ) {					  
    int rem = N % 2 ;					      	  int rem = N % 2 ;					    	int rem = N % 2 ;					  
    double c = Math . pow ( 10 , cnt ) ;		      	  ull c = pow ( 10 , cnt ) ;				    	double c = pow ( 10 , cnt ) ;				  
    B_Number += rem * c ;				      	  B_Number += rem * c ;					    	B_Number += rem * c ;					  
    N /= 2 ;						      	  N /= 2 ;						    	N /= 2 ;						  
    cnt ++ ;						      	  cnt ++ ;						    	cnt ++ ;						  
  }							      	}							      }								  
  return B_Number ;					      	return B_Number ;					      return B_Number ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1   DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1	  DYNAMIC_PROGRAMMING_SET_36_CUT_A_ROPE_TO_MAXIMIZE_PRODUCT_1
--							      --							    --								  --
static int maxProd ( int n ) {				      int maxProd ( int n ) {					    int maxProd ( int n ) {					  success : identical to gold
  if ( n == 2 || n == 3 ) return ( n - 1 ) ;		      	if ( n == 2 || n == 3 ) return ( n - 1 ) ;		      if ( n == 2 || n == 3 ) return ( n - 1 ) ;		  
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  while ( n > 4 ) {					      	while ( n > 4 ) {					      while ( n > 4 ) {						  
    n -= 3 ;						      	  n -= 3 ;						    	n -= 3 ;						  
    res *= 3 ;						      	  res *= 3 ;						    	res *= 3 ;						  
  }							      	}							      }								  
  return ( n * res ) ;					      	return ( n * res ) ;					      return ( n * res ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2		      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN_2
--							      --							    --								  --
public static int findNth ( int n ) {			      int findNth ( int n ) {					    int findNth ( int n ) {					  success : None
  int nthElement = 19 + ( n - 1 ) * 9 ;			      	int nthElement = 19 + ( n - 1 ) * 9 ;			      int nth_element = 19 + ( n - 1 ) * 9 ;			  
  int outliersCount = ( int ) Math . log10 ( nthElement ) - 1 	int outliersCount = ( int ) log10 ( nthElement ) - 1 ;	      int outliers_count = ( int ) log10 ( nth_element ) - 1 ;	  
  nthElement += 9 * outliersCount ;			      	nthElement += 9 * outliersCount ;			      nth_element += 9 * outliers_count ;			  
  return nthElement ;					      	return nthElement ;					      return nth_element ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA LEXICOGRAPHICALLY_SMALLEST_STRING_OBTAINED_CONCATENATING_ARRA
--							      --							    --								  --
static String lexsmallest ( String a [ ] , int n ) {	      string lexSmallest ( string a [ ] , int n ) {		    string lexsmallest ( string a [ ] , int n ) {		  script_not_found : None
  sort ( a , n ) ;					      	sort ( a , a + n , compare ) ;				      sort ( a , a + n ) ;					  
  String answer = "" ;					      	string answer = "" ;					      string answer ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) answer += a [ i ] ;				      	i ++ ) answer += a [ i ] ;				      i ++ ) {							  
  return answer ;					      	return answer ;						    	answer += a [ i ] ;					  
}							      }								      }								  
							      								      return answer ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	      FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	    FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X	  FIND_FIRST_NATURAL_NUMBER_WHOSE_FACTORIAL_DIVISIBLE_X
--							      --							    --								  --
static int firstFactorialDivisibleNumber ( int x ) {	      int firstFactorialDivisibleNumber ( int x ) {		    int firstFactorialDivisibleNumber ( int x ) {		  success : identical to gold
  int i = 1 ;						      	int i = 1 ;						      int i = 1 ;						  
  int fact = 1 ;					      	int fact = 1 ;						      int fact = 1 ;						  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i < x ;						      	i < x ;							      i < x ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    fact = fact * i ;					      	  fact = fact * i ;					    	fact = fact * i ;					  
    if ( fact % x == 0 ) break ;			      	  if ( fact % x == 0 ) break ;				    	if ( fact % x == 0 ) break ;				  
  }							      	}							      }								  
  return i ;						      	return i ;						      return i ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_INVERSIONS					      COUNTING_INVERSIONS					    COUNTING_INVERSIONS						  COUNTING_INVERSIONS
--							      --							    --								  --
static int getInvCount ( int n ) {			      int getInvCount ( int arr [ ] , int n ) {			    int getInvCount ( int n ) {					  script_not_found : None
  int inv_count = 0 ;					      	int inv_count = 0 ;					      int inv_count = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	      	j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	      j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;	  
  return inv_count ;					      	return inv_count ;					      return inv_count ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE     CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	    CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE	  CHECK_WHETHER_GIVEN_DEGREES_VERTICES_REPRESENT_GRAPH_TREE
--							      --							    --								  --
static boolean check ( int degree [ ] , int n ) {	      bool check ( int degree [ ] , int n ) {			    bool check ( int degree [ ] , int n ) {			  success : identical to gold
  int deg_sum = 0 ;					      	int deg_sum = 0 ;					      int deg_sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) deg_sum += degree [ i ] ;			      i ++ ) deg_sum += degree [ i ] ;				  
    deg_sum += degree [ i ] ;				      	return ( 2 * ( n - 1 ) == deg_sum ) ;			      return ( 2 * ( n - 1 ) == deg_sum ) ;			  
  }							      }								    }								  
  return ( 2 * ( n - 1 ) == deg_sum ) ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			      COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			    COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY			  COUNT_INDEX_PAIRS_EQUAL_ELEMENTS_ARRAY
--							      --							    --								  --
static int countPairs ( int arr [ ] , int n ) {		      int countPairs ( int arr [ ] , int n ) {			    int countPairs ( int arr [ ] , int n ) {			  success : identical to gold
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		      	j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		      j ++ ) if ( arr [ i ] == arr [ j ] ) ans ++ ;		  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	      REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE	    REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE		  REVERSE_STRING_WITHOUT_USING_ANY_TEMPORARY_VARIABLE
--							      --							    --								  --
static String reversingString ( char [ ] str , int start , in string reversingString ( string str , int start , int end ) { String reversingString ( char * str , int start , int end ) { script_not_found : None
  while ( start < end ) {				      	while ( start < end ) {					      while ( start < end ) {					  
    str [ start ] ^= str [ end ] ;			      	  str [ start ] ^= str [ end ] ;			    	str [ start ] ^= str [ end ] ;				  
    str [ end ] ^= str [ start ] ;			      	  str [ end ] ^= str [ start ] ;			    	str [ end ] ^= str [ start ] ;				  
    str [ start ] ^= str [ end ] ;			      	  str [ start ] ^= str [ end ] ;			    	str [ start ] ^= str [ end ] ;				  
    ++ start ;						      	  ++ start ;						    	++ start ;						  
    -- end ;						      	  -- end ;						    	-- end ;						  
  }							      	}							      }								  
  return String . valueOf ( str ) ;			      	return str ;						      return String ( str ) ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PAPER_CUT_MINIMUM_NUMBER_SQUARES			      PAPER_CUT_MINIMUM_NUMBER_SQUARES				    PAPER_CUT_MINIMUM_NUMBER_SQUARES				  PAPER_CUT_MINIMUM_NUMBER_SQUARES
--							      --							    --								  --
static int minimumSquare ( int a , int b ) {		      int minimumSquare ( int a , int b ) {			    int minimum_square ( int a , int b ) {			  success : None
  int result = 0 , rem = 0 ;				      	long long result = 0 , rem = 0 ;			      int result = 0 , rem = 0 ;				  
  if ( a < b ) swap ( a , b ) ;				      	if ( a < b ) swap ( a , b ) ;				      if ( a < b ) {						  
  while ( b > 0 ) {					      	while ( b > 0 ) {					    	swap ( a , b ) ;					  
    result += a / b ;					      	  result += a / b ;					      }								  
    rem = a % b ;					      	  long long rem = a % b ;				      while ( b ) {						  
    a = b ;						      	  a = b ;						    	result += a / b ;					  
    b = rem ;						      	  b = rem ;						    	rem = a % b ;						  
  }							      	}							    	a = b ;							  
  return result ;					      	return result ;						    	b = rem ;						  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIGITS_FACTORIAL_SET_1				      COUNT_DIGITS_FACTORIAL_SET_1				    COUNT_DIGITS_FACTORIAL_SET_1				  COUNT_DIGITS_FACTORIAL_SET_1
--							      --							    --								  --
static int findDigits ( int n ) {			      int findDigits ( int n ) {				    int findDigits ( int n ) {					  success : None
  if ( n < 0 ) return 0 ;				      	if ( n < 0 ) return 0 ;					      if ( n < 0 ) return 0 ;					  
  if ( n <= 1 ) return 1 ;				      	if ( n <= 1 ) return 1 ;				      if ( n <= 1 ) return 1 ;					  
  double digits = 0 ;					      	double digits = 0 ;					      double digits = 0 ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) digits += Math . log10 ( i ) ;			      	i ++ ) digits += log10 ( i ) ;				      i ++ ) {							  
  return ( int ) ( Math . floor ( digits ) ) + 1 ;	      	return floor ( digits ) + 1 ;				    	digits += log10 ( i ) ;					  
}							      }								      }								  
							      								      return int ( floor ( digits ) ) + 1 ;			  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_2
--							      --							    --								  --
public static int middleOfThree ( int a , int b , int c ) {   int middleOfThree ( int a , int b , int c ) {		    int middle_of_three ( int a , int b , int c ) {		  success : None
  int x = a - b ;					      	int x = a - b ;						      int x = a - b ;						  
  int y = b - c ;					      	int y = b - c ;						      int y = b - c ;						  
  int z = a - c ;					      	int z = a - c ;						      int z = a - c ;						  
  if ( x * y > 0 ) return b ;				      	if ( x * y > 0 ) return b ;				      if ( x * y > 0 ) return b ;				  
  else if ( x * z > 0 ) return c ;			      	else if ( x * z > 0 ) return c ;			      else if ( x * z > 0 ) return c ;				  
  else return a ;					      	else return a ;						      else return a ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX		      SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			    SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX			  SWAP_MAJOR_MINOR_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
static void swapDiagonal ( int matrix [ ] [ ] ) {	      void swapDiagonal ( int matrix [ ] [ N ] ) {		    void swapDiagonal ( int matrix [ N ] [ N ] ) {		  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) {						      	i ++ ) swap ( matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1   i ++ ) {							  
    int temp = matrix [ i ] [ i ] ;			      }								    	int temp = matrix [ i ] [ i ] ;				  
    matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;	      								    	matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;	  
    matrix [ i ] [ N - i - 1 ] = temp ;			      								    	matrix [ i ] [ N - i - 1 ] = temp ;			  
  }							      								      }								  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION     DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	    DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION	  DISTRIBUTING_M_ITEMS_CIRCLE_SIZE_N_STARTING_K_TH_POSITION
--							      --							    --								  --
static int lastPosition ( int n , int m , int k ) {	      int lastPosition ( int n , int m , int k ) {		    int lastPosition ( int n , int m , int k ) {		  success : identical to gold
  if ( m <= n - k + 1 ) return m + k - 1 ;		      	if ( m <= n - k + 1 ) return m + k - 1 ;		      if ( m <= n - k + 1 ) return m + k - 1 ;			  
  m = m - ( n - k + 1 ) ;				      	m = m - ( n - k + 1 ) ;					      m = m - ( n - k + 1 ) ;					  
  return ( m % n == 0 ) ? n : ( m % n ) ;		      	return ( m % n == 0 ) ? n : ( m % n ) ;			      return ( m % n == 0 ) ? n : ( m % n ) ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		      FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		    FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME		  FIND_INDEX_GIVEN_FIBONACCI_NUMBER_CONSTANT_TIME
--							      --							    --								  --
static int findIndex ( int n ) {			      int findIndex ( int n ) {					    int findIndex ( int n ) {					  success : identical to gold
  if ( n <= 1 ) return n ;				      	if ( n <= 1 ) return n ;				      if ( n <= 1 ) return n ;					  
  int a = 0 , b = 1 , c = 1 ;				      	int a = 0 , b = 1 , c = 1 ;				      int a = 0 , b = 1 , c = 1 ;				  
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  while ( c < n ) {					      	while ( c < n ) {					      while ( c < n ) {						  
    c = a + b ;						      	  c = a + b ;						    	c = a + b ;						  
    res ++ ;						      	  res ++ ;						    	res ++ ;						  
    a = b ;						      	  a = b ;						    	a = b ;							  
    b = c ;						      	  b = c ;						    	b = c ;							  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_ROTATIONS_REQUIRED_GET_STRING			      MINIMUM_ROTATIONS_REQUIRED_GET_STRING			    MINIMUM_ROTATIONS_REQUIRED_GET_STRING			  MINIMUM_ROTATIONS_REQUIRED_GET_STRING
--							      --							    --								  --
static int findRotations ( String str ) {		      int findRotations ( string str ) {			    int findRotations ( string str ) {				  success : None
  String tmp = str + str ;				      	string tmp = str + str ;				      string tmp = str + str ;					  
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    String substring = tmp . substring ( i , str . length ( ) 	  string substring = tmp . substr ( i , str . size ( ) ) ;  	string substring = tmp . substr ( i , str . length ( ) )  
    if ( str == substring ) return i ;			      	  if ( str == substring ) return i ;			    	if ( str == substring ) return i ;			  
  }							      	}							      }								  
  return n ;						      	return n ;						      return n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX
--							      --							    --								  --
static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {     void transpose ( int A [ ] [ N ] , int B [ ] [ N ] ) {	    void transpose ( int A [ N ] [ N ] , int B [ N ] [ N ] ) {	  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      i ++ ) for ( j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;		      	j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			      j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		      FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		    FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS		  FIND_NUMBER_PERFECT_SQUARES_TWO_GIVEN_NUMBERS
--							      --							    --								  --
static int countSquares ( int a , int b ) {		      int countSquares ( int a , int b ) {			    int countSquares ( int a , int b ) {			  success : identical to gold
  int cnt = 0 ;						      	int cnt = 0 ;						      int cnt = 0 ;						  
  for ( int i = a ;					      	for ( int i = a ;					      for ( int i = a ;						  
  i <= b ;						      	i <= b ;						      i <= b ;							  
  i ++ ) for ( int j = 1 ;				      	i ++ ) for ( int j = 1 ;				      i ++ ) for ( int j = 1 ;					  
  j * j <= i ;						      	j * j <= i ;						      j * j <= i ;						  
  j ++ ) if ( j * j == i ) cnt ++ ;			      	j ++ ) if ( j * j == i ) cnt ++ ;			      j ++ ) if ( j * j == i ) cnt ++ ;				  
  return cnt ;						      	return cnt ;						      return cnt ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_OCTAL_DECIMAL_CONVERSION			      PROGRAM_OCTAL_DECIMAL_CONVERSION				    PROGRAM_OCTAL_DECIMAL_CONVERSION				  PROGRAM_OCTAL_DECIMAL_CONVERSION
--							      --							    --								  --
static int octalToDecimal ( int n ) {			      int octalToDecimal ( int n ) {				    int octal_to_decimal ( int n ) {				  success : None
  int num = n ;						      	int num = n ;						      int num = n ;						  
  int dec_value = 0 ;					      	int dec_value = 0 ;					      int dec_value = 0 ;					  
  int base = 1 ;					      	int base = 1 ;						      int base = 1 ;						  
  int temp = num ;					      	int temp = num ;					      int temp = num ;						  
  while ( temp > 0 ) {					      	while ( temp ) {					      while ( temp > 0 ) {					  
    int last_digit = temp % 10 ;			      	  int last_digit = temp % 10 ;				    	int last_digit = temp % 10 ;				  
    temp = temp / 10 ;					      	  temp = temp / 10 ;					    	temp = temp / 10 ;					  
    dec_value += last_digit * base ;			      	  dec_value += last_digit * base ;			    	dec_value += last_digit * base ;			  
    base = base * 8 ;					      	  base = base * 8 ;					    	base = base * 8 ;					  
  }							      	}							      }								  
  return dec_value ;					      	return dec_value ;					      return dec_value ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	      PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	    PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1	  PROGRAM_CHECK_ARRAY_SORTED_NOT_ITERATIVE_RECURSIVE_1
--							      --							    --								  --
static boolean arraySortedOrNot ( int arr [ ] , int n ) {     bool arraySortedOrNot ( int arr [ ] , int n ) {		    bool arraySortedOrNot ( int arr [ ] , int n ) {		  success : identical to gold
  if ( n == 0 || n == 1 ) return true ;			      	if ( n == 0 || n == 1 ) return true ;			      if ( n == 0 || n == 1 ) return true ;			  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;      	i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;	      i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;	  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ARC_LENGTH_ANGLE					      ARC_LENGTH_ANGLE						    ARC_LENGTH_ANGLE						  ARC_LENGTH_ANGLE
--							      --							    --								  --
static double arcLength ( double diameter , double angle ) {  double arcLength ( double diameter , double angle ) {	    double arcLength ( double diameter , double angle ) {	  script_not_found : None
  double pi = 22.0 / 7.0 ;				      	double pi = 22.0 / 7.0 ;				      double pi = 22.0 / 7.0 ;					  
  double arc ;						      	double arc ;						      double arc ;						  
  if ( angle >= 360 ) {					      	if ( angle >= 360 ) {					      if ( angle >= 360 ) {					  
    System . out . println ( "Angle cannot" + " be formed" )  	  cout << "Angle cannot" , " be formed" ;		    	cout << "Angle cannot" << " be formed" << endl ;	  
    return 0 ;						      	  return 0 ;						    	return 0 ;						  
  }							      	}							      }								  
  else {						      	else {							      else {							  
    arc = ( pi * diameter ) * ( angle / 360.0 ) ;	      	  arc = ( pi * diameter ) * ( angle / 360.0 ) ;		    	arc = ( pi * diameter ) * ( angle / 360.0 ) ;		  
    return arc ;					      	  return arc ;						    	return arc ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	      PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING	    PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING		  PRINT_SQUARES_FIRST_N_NATURAL_NUMBERS_WITHOUT_USING
--							      --							    --								  --
static void printSquares ( int n ) {			      void printSquares ( int n ) {				    void print_squares ( int n ) {				  script_not_found : None
  int square = 0 , prev_x = 0 ;				      	int square = 0 , prev_x = 0 ;				      int square = 0 , prev_x = 0 ;				  
  for ( int x = 0 ;					      	for ( int x = 0 ;					      for ( int x = 0 ;						  
  x < n ;						      	x < n ;							      x < n ;							  
  x ++ ) {						      	x ++ ) {						      x ++ ) {							  
    square = ( square + x + prev_x ) ;			      	  square = ( square + x + prev_x ) ;			    	square = ( square + x + prev_x ) ;			  
    System . out . print ( square + " " ) ;		      	  cout << square << " " ;				    	cout << square << " " ;					  
    prev_x = x ;					      	  prev_x = x ;						    	prev_x = x ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1	      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION_1
--							      --							    --								  --
static long exponentiation ( long base , long exp ) {	      long exponentiation ( long base , long exp ) {		    long long exponentiation ( long long base , long long exp ) { script_not_found : None
  long t = 1L ;						      	long t = 1L ;						      long long t = 1 ;						  
  while ( exp > 0 ) {					      	while ( exp > 0 ) {					      while ( exp > 0 ) {					  
    if ( exp % 2 != 0 ) t = ( t * base ) % N ;		      	  if ( exp % 2 != 0 ) t = ( t * base ) % N ;		    	if ( exp % 2 != 0 ) {					  
    base = ( base * base ) % N ;			      	  base = ( base * base ) % N ;				    	  t = ( t * base ) % N ;				  
    exp /= 2 ;						      	  exp /= 2 ;						    	}							  
  }							      	}							    	base = ( base * base ) % N ;				  
  return t % N ;					      	return t % N ;						    	exp /= 2 ;						  
}							      }								      }								  
							      								      return t % N ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y COUNT_DISTINCT_NON_NEGATIVE_PAIRS_X_Y_SATISFY_INEQUALITY_XX_Y
--							      --							    --								  --
static int countSolutions ( int n ) {			      int countSolutions ( int n ) {				    int countSolutions ( int n ) {				  success : identical to gold
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int x = 0 ;					      	for ( int x = 0 ;					      for ( int x = 0 ;						  
  x * x < n ;						      	x * x < n ;						      x * x < n ;						  
  x ++ ) for ( int y = 0 ;				      	x ++ ) for ( int y = 0 ;				      x ++ ) for ( int y = 0 ;					  
  x * x + y * y < n ;					      	x * x + y * y < n ;					      x * x + y * y < n ;					  
  y ++ ) res ++ ;					      	y ++ ) res ++ ;						      y ++ ) res ++ ;						  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		      PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		    PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11		  PROGRAM_FIND_REMAINDER_LARGE_NUMBER_DIVIDED_11
--							      --							    --								  --
static int remainder ( String str ) {			      int remainder ( string str ) {				    int remainder ( string str ) {				  success : identical to gold
  int len = str . length ( ) ;				      	int len = str . length ( ) ;				      int len = str . length ( ) ;				  
  int num , rem = 0 ;					      	int num , rem = 0 ;					      int num , rem = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < len ;						      	i < len ;						      i < len ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    num = rem * 10 + ( str . charAt ( i ) - '0' ) ;	      	  num = rem * 10 + ( str [ i ] - '0' ) ;		    	num = rem * 10 + ( str [ i ] - '0' ) ;			  
    rem = num % 11 ;					      	  rem = num % 11 ;					    	rem = num % 11 ;					  
  }							      	}							      }								  
  return rem ;						      	return rem ;						      return rem ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		      FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1		    FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1			  FIND_SUM_NODES_GIVEN_PERFECT_BINARY_TREE_1
--							      --							    --								  --
static double sumNodes ( int l ) {			      int sumNodes ( int l ) {					    double sumNodes ( int l ) {					  script_not_found : None
  double leafNodeCount = Math . pow ( 2 , l - 1 ) ;	      	int leafNodeCount = pow ( 2 , l - 1 ) ;			      double leafNodeCount = pow ( 2 , l - 1 ) ;		  
  double sumLastLevel = 0 ;				      	int sumLastLevel = 0 ;					      double sumLastLevel = 0 ;					  
  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /  	sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /    sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) /  
  double sum = sumLastLevel * l ;			      	int sum = sumLastLevel * l ;				      double sum = sumLastLevel * l ;				  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	      CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	    CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT	  CHECK_ARRAY_REPRESENTS_INORDER_BINARY_SEARCH_TREE_NOT
--							      --							    --								  --
static boolean isInorder ( int [ ] arr , int n ) {	      bool isInorder ( int arr [ ] , int n ) {			    bool isInorder ( int arr [ ] , int n ) {			  success : None
  if ( n == 0 || n == 1 ) {				      	if ( n == 0 || n == 1 ) return true ;			      if ( n == 0 || n == 1 ) {					  
    return true ;					      	for ( int i = 1 ;					    	return true ;						  
  }							      	i < n ;							      }								  
  for ( int i = 1 ;					      	i ++ ) if ( arr [ i - 1 ] > arr [ i ] ) return false ;	      for ( int i = 1 ;						  
  i < n ;						      	return true ;						      i < n ;							  
  i ++ ) {						      }								      i ++ ) {							  
    if ( arr [ i - 1 ] > arr [ i ] ) {			      								    	if ( arr [ i - 1 ] > arr [ i ] ) {			  
      return false ;					      								    	  return false ;					  
    }							      								    	}							  
  }							      								      }								  
  return true ;						      								      return true ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			      MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			    MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS			  MINIMUM_TIME_REQUIRED_PRODUCE_M_ITEMS
--							      --							    --								  --
static int minTime ( int [ ] arr , int n , int m ) {	      int minTime ( int arr [ ] , int n , int m ) {		    int minTime ( int arr [ ] , int n , int m ) {		  script_not_found : None
  int t = 0 ;						      	int t = 0 ;						      int t = 0 ;						  
  while ( true ) {					      	while ( 1 ) {						      while ( true ) {						  
    int items = 0 ;					      	  int items = 0 ;					    	int items = 0 ;						  
    for ( int i = 0 ;					      	  for ( int i = 0 ;					    	for ( int i = 0 ;					  
    i < n ;						      	  i < n ;						    	i < n ;							  
    i ++ ) items += ( t / arr [ i ] ) ;			      	  i ++ ) items += ( t / arr [ i ] ) ;			    	i ++ ) {						  
    if ( items >= m ) return t ;			      	  if ( items >= m ) return t ;				    	  items += ( t / arr [ i ] ) ;				  
    t ++ ;						      	  t ++ ;						    	}							  
  }							      	}							    	if ( items >= m ) return t ;				  
}							      }								    	t ++ ;							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE	      QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		    QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE		  QUERIES_COUNTS_ARRAY_ELEMENTS_VALUES_GIVEN_RANGE
--							      --							    --								  --
static int countInRange ( int arr [ ] , int n , int x , int y int countInRange ( int arr [ ] , int n , int x , int y ) {    int countInRange ( int arr [ ] , int n , int x , int y ) {	  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;	      	  if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;	    	if ( arr [ i ] >= x && arr [ i ] <= y ) {		  
  }							      	}							    	  count ++ ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	      ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	    ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX	  ROW_WISE_COMMON_ELEMENTS_TWO_DIAGONALS_SQUARE_MATRIX
--							      --							    --								  --
static int countCommon ( int mat [ ] [ ] , int n ) {	      int countCommon ( int mat [ ] [ MAX ] , int n ) {		    int countCommon ( int mat [ ] [ ] , int n ) {		  script_not_found : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re 	i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re   i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) re 
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		      MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		    MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET		  MINIMUM_REVOLUTIONS_MOVE_CENTER_CIRCLE_TARGET
--							      --							    --								  --
static double minRevolutions ( double r , int x1 , int y1 , i int minRevolutions ( double r , int x1 , int y1 , int x2 , in double minRevolutions ( double r , int x1 , int y1 , int x2 , script_not_found : None
  double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - 	double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) *   double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * 
  return Math . ceil ( d / ( 2 * r ) ) ;		      	return ceil ( d / ( 2 * r ) ) ;				      return ceil ( d / ( 2 * r ) ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON CHECK_GIVEN_CIRCLE_LIES_COMPLETELY_INSIDE_RING_FORMED_TWO_CON
--							      --							    --								  --
public static boolean checkcircle ( int r , int R , int r1 ,  bool checkcircle ( int r , int R , int r1 , int x1 , int y1 ) bool checkcircle ( int r , int R , int r1 , int x1 , int y1 ) success : None
  int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;	      	int dis = sqrt ( x1 * x1 + y1 * y1 ) ;			      int dis = ( int ) sqrt ( x1 * x1 + y1 * y1 ) ;		  
  return ( dis - r1 >= R && dis + r1 <= r ) ;		      	return ( dis - r1 >= R && dis + r1 <= r ) ;		      return ( dis - r1 >= R && dis + r1 <= r ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		      QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING		    QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING			  QUERIES_FOR_CHARACTERS_IN_A_REPEATED_STRING
--							      --							    --								  --
static void query ( String s , int i , int j ) {	      void query ( char s [ ] , int i , int j ) {		    void query ( string s , int i , int j ) {			  script_not_found : None
  int n = s . length ( ) ;				      	int n = strlen ( s ) ;					      int n = s . size ( ) ;					  
  i %= n ;						      	i %= n ;						      i %= n ;							  
  j %= n ;						      	j %= n ;						      j %= n ;							  
  if ( s . charAt ( i ) == s . charAt ( j ) ) System . out .  	( s [ i ] == s [ j ] ) ? ( cout << "Yes" << endl ) : ( cout   if ( s [ i ] == s [ j ] ) {				  
  else System . out . println ( "No" ) ;		      }								    	cout << "Yes" << endl ;					  
}							      								      }								  
							      								      else {							  
							      								    	cout << "No" << endl ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC		      PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			    PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC			  PROGRAM_TO_CHECK_IF_A_MATRIX_IS_SYMMETRIC
--							      --							    --								  --
static boolean isSymmetric ( int mat [ ] [ ] , int N ) {      bool isSymmetric ( int mat [ ] [ MAX ] , int N ) {	    bool isSymmetric ( int mat [ ] [ N ] , int N ) {		  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal 	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal   j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return fal 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_AREA_QUADRILATERAL				      MAXIMUM_AREA_QUADRILATERAL				    MAXIMUM_AREA_QUADRILATERAL					  MAXIMUM_AREA_QUADRILATERAL
--							      --							    --								  --
static double maxArea ( double a , double b , double c , doub double maxArea ( double a , double b , double c , double d )  double maxArea ( double a , double b , double c , double d )  script_not_found : None
  double semiperimeter = ( a + b + c + d ) / 2 ;	      	double semiperimeter = ( a + b + c + d ) / 2 ;		      double semiperimeter = ( a + b + c + d ) / 2 ;		  
  return Math . sqrt ( ( semiperimeter - a ) * ( semiperimete 	return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b )   return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BREAK_NUMBER_THREE_PARTS				      BREAK_NUMBER_THREE_PARTS					    BREAK_NUMBER_THREE_PARTS					  BREAK_NUMBER_THREE_PARTS
--							      --							    --								  --
static long count_of_ways ( long n ) {			      ll count_of_ways ( ll n ) {				    long count_of_ways ( long n ) {				  script_not_found : None
  long count = 0 ;					      	ll count = 0 ;						      long count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j <= n ;						      	j <= n ;						      j <= n ;							  
  j ++ ) for ( int k = 0 ;				      	j ++ ) for ( int k = 0 ;				      j ++ ) for ( int k = 0 ;					  
  k <= n ;						      	k <= n ;						      k <= n ;							  
  k ++ ) if ( i + j + k == n ) count ++ ;		      	k ++ ) if ( i + j + k == n ) count ++ ;			      k ++ ) if ( i + j + k == n ) count ++ ;			  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVISIBILITY_BY_7					      DIVISIBILITY_BY_7						    DIVISIBILITY_BY_7						  DIVISIBILITY_BY_7
--							      --							    --								  --
static boolean isDivisibleBy7 ( int num ) {		      int isDivisibleBy7 ( int num ) {				    bool isDivisibleBy7 ( int num ) {				  success : None
  if ( num < 0 ) return isDivisibleBy7 ( - num ) ;	      	if ( num < 0 ) return isDivisibleBy7 ( - num ) ;	      if ( num < 0 ) return isDivisibleBy7 ( - num ) ;		  
  if ( num == 0 || num == 7 ) return true ;		      	if ( num == 0 || num == 7 ) return 1 ;			      if ( num == 0 || num == 7 ) return true ;			  
  if ( num < 10 ) return false ;			      	if ( num < 10 ) return 0 ;				      if ( num < 10 ) return false ;				  
  return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1 	return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1   return isDivisibleBy7 ( num / 10 - 2 * ( num - num / 10 * 1 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			      POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES			    POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES				  POSSIBLE_FORM_TRIANGLE_ARRAY_VALUES
--							      --							    --								  --
static boolean isPossibleTriangle ( int [ ] arr , int N ) {   bool isPossibleTriangle ( int arr [ ] , int N ) {		    bool isPossibleTriangle ( int * arr , int N ) {		  failure : #Results: 9, 10
  if ( N < 3 ) return false ;				      	if ( N < 3 ) return false ;				      if ( N < 3 ) return false ;				  
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + N ) ;				      sort ( arr , arr + N ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N - 2 ;						      	i < N - 2 ;						      i < N - 2 ;						  
  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret 	i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret   i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) ret 
  return false ;					      }								      return false ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_PAIRWISE_PRODUCTS_1					      SUM_PAIRWISE_PRODUCTS_1					    SUM_PAIRWISE_PRODUCTS_1					  SUM_PAIRWISE_PRODUCTS_1
--							      --							    --								  --
static int findSum ( int n ) {				      long long int findSum ( int n ) {				    int findSum ( int n ) {					  success : None
  int multiTerms = n * ( n + 1 ) / 2 ;			      	long long int multiTerms = n * ( n + 1 ) / 2 ;		      int multiTerms = n * ( n + 1 ) / 2 ;			  
  int sum = multiTerms ;				      	long long int sum = multiTerms ;			      int sum = multiTerms ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    multiTerms = multiTerms - ( i - 1 ) ;		      	  multiTerms = multiTerms - ( i - 1 ) ;			    	multiTerms = multiTerms - ( i - 1 ) ;			  
    sum = sum + multiTerms * i ;			      	  sum = sum + multiTerms * i ;				    	sum = sum + multiTerms * i ;				  
  }							      	}							      }								  
  return sum ;						      	return sum ;						      return sum ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		      PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX		    PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX			  PROGRAM_CHECK_DIAGONAL_MATRIX_SCALAR_MATRIX
--							      --							    --								  --
static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {	      bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {		    bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {		  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 	j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return   j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR					      MINIMUM_XOR_VALUE_PAIR					    MINIMUM_XOR_VALUE_PAIR					  MINIMUM_XOR_VALUE_PAIR
--							      --							    --								  --
static int minXOR ( int arr [ ] , int n ) {		      int minXOR ( int arr [ ] , int n ) {			    int minXOR ( int arr [ ] , int n ) {			  success : identical to gold
  int min_xor = Integer . MAX_VALUE ;			      	int min_xor = INT_MAX ;					      int min_xor = INT_MAX ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j 	j ++ ) min_xor = min ( min_xor , arr [ i ] ^ arr [ j ] ) ;    j ++ ) min_xor = min ( min_xor , arr [ i ] ^ arr [ j ] ) ;  
  return min_xor ;					      	return min_xor ;					      return min_xor ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ROTATE_MATRIX_180_DEGREE				      ROTATE_MATRIX_180_DEGREE					    ROTATE_MATRIX_180_DEGREE					  ROTATE_MATRIX_180_DEGREE
--							      --							    --								  --
static void rotateMatrix ( int mat [ ] [ ] ) {		      void rotateMatrix ( int mat [ ] [ N ] ) {			    void rotateMatrix ( int mat [ N ] [ N ] ) {			  script_not_found : None
  for ( int i = N - 1 ;					      	for ( int i = N - 1 ;					      for ( int i = N - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    for ( int j = N - 1 ;				      	  for ( int j = N - 1 ;					    	for ( int j = N - 1 ;					  
    j >= 0 ;						      	  j >= 0 ;						    	j >= 0 ;						  
    j -- ) System . out . print ( mat [ i ] [ j ] + " " ) ;   	  j -- ) printf ( "%d " , mat [ i ] [ j ] ) ;		    	j -- ) {						  
    System . out . println ( ) ;			      	  printf ( "\n" ) ;					    	  cout << mat [ i ] [ j ] << " " ;			  
  }							      	}							    	}							  
}							      }								    	cout << endl ;						  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEONARDO_NUMBER_1					      LEONARDO_NUMBER_1						    LEONARDO_NUMBER_1						  LEONARDO_NUMBER_1
--							      --							    --								  --
static int leonardo ( int n ) {				      int leonardo ( int n ) {					    int leonardo ( int n ) {					  success : None
  int dp [ ] = new int [ n + 1 ] ;			      	int dp [ n + 1 ] ;					      int dp [ n + 1 ] ;					  
  dp [ 0 ] = dp [ 1 ] = 1 ;				      	dp [ 0 ] = dp [ 1 ] = 1 ;				      dp [ 0 ] = dp [ 1 ] = 1 ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;	      	i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;	      i ++ ) {							  
  return dp [ n ] ;					      	return dp [ n ] ;					    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;		  
}							      }								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EULERIAN_NUMBER						      EULERIAN_NUMBER						    EULERIAN_NUMBER						  EULERIAN_NUMBER
--							      --							    --								  --
public static int eulerian ( int n , int m ) {		      int eulerian ( int n , int m ) {				    int eulerian ( int n , int m ) {				  script_not_found : None
  if ( m >= n || n == 0 ) return 0 ;			      	if ( m >= n || n == 0 ) return 0 ;			      if ( m >= n || n == 0 ) return 0 ;			  
  if ( m == 0 ) return 1 ;				      	if ( m == 0 ) return 1 ;				      if ( m == 0 ) return 1 ;					  
  return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) * 	return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) *   return ( n - m ) * eulerian ( n - 1 , m - 1 ) + ( m + 1 ) * 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			      NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			    NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES			  NTH_MULTIPLE_NUMBER_FIBONACCI_SERIES
--							      --							    --								  --
public static int findPosition ( int k , int n ) {	      int findPosition ( int k , int n ) {			    int findPosition ( int k , int n ) {			  script_not_found : None
  long f1 = 0 , f2 = 1 , f3 ;				      	unsigned long long int f1 = 0 , f2 = 1 , f3 ;		      long long f1 = 0 , f2 = 1 , f3 ;				  
  int i = 2 ;						      	for ( int i = 2 ;					      int i = 2 ;						  
  while ( i != 0 ) {					      	i <= MAX ;						      while ( i != 0 ) {					  
    f3 = f1 + f2 ;					      	i ++ ) {						    	f3 = f1 + f2 ;						  
    f1 = f2 ;						      	  f3 = f1 + f2 ;					    	f1 = f2 ;						  
    f2 = f3 ;						      	  f1 = f2 ;						    	f2 = f3 ;						  
    if ( f2 % k == 0 ) {				      	  f2 = f3 ;						    	if ( f2 % k == 0 ) return n * i ;			  
      return n * i ;					      	  if ( f2 % k == 0 ) return n * i ;			    	i ++ ;							  
    }							      	}							      }								  
    i ++ ;						      }								      return 0 ;						  
  }							      								    }								  
  return 0 ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_DECK_OF_CARDS_3				      SHUFFLE_A_DECK_OF_CARDS_3					    SHUFFLE_A_DECK_OF_CARDS_3					  SHUFFLE_A_DECK_OF_CARDS_3
--							      --							    --								  --
public static void shuffle ( int card [ ] , int n ) {	      void shuffle ( int card [ ] , int n ) {			    void shuffle ( int card [ ] , int n ) {			  script_not_found : None
  Random rand = new Random ( ) ;			      	srand ( time ( 0 ) ) ;					      srand ( time ( NULL ) ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int r = i + rand . nextInt ( 52 - i ) ;		      	  int r = i + ( rand ( ) % ( 52 - i ) ) ;		    	int r = i + rand ( ) % ( 52 - i ) ;			  
    int temp = card [ r ] ;				      	  swap ( card [ i ] , card [ r ] ) ;			    	int temp = card [ r ] ;					  
    card [ r ] = card [ i ] ;				      	}							    	card [ r ] = card [ i ] ;				  
    card [ i ] = temp ;					      }								    	card [ i ] = temp ;					  
  }							      								      }								  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA FAST_MULTIPLICATION_METHOD_WITHOUT_USING_MULTIPLICATION_OPERA
--							      --							    --								  --
static int russianPeasant ( int a , int b ) {		      unsigned int russianPeasant ( unsigned int a , unsigned int b int russian_peasant ( int a , int b ) {			  success : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  while ( b > 0 ) {					      	while ( b > 0 ) {					      while ( b ) {						  
    if ( ( b & 1 ) != 0 ) res = res + a ;		      	  if ( b & 1 ) res = res + a ;				    	if ( ( b & 1 ) != 0 ) {					  
    a = a << 1 ;					      	  a = a << 1 ;						    	  res = res + a ;					  
    b = b >> 1 ;					      	  b = b >> 1 ;						    	}							  
  }							      	}							    	a = a << 1 ;						  
  return res ;						      	return res ;						    	b = b >> 1 ;						  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MARKOV_MATRIX						      MARKOV_MATRIX						    MARKOV_MATRIX						  MARKOV_MATRIX
--							      --							    --								  --
static boolean checkMarkov ( double m [ ] [ ] ) {	      bool checkMarkov ( double m [ ] [ n ] ) {			    bool checkMarkov ( double m [ ] [ 3 ] ) {			  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < m . length ;					      	i < n ;							      i < 3 ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    double sum = 0 ;					      	  double sum = 0 ;					    	double sum = 0 ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < m [ i ] . length ;				      	  j < n ;						    	j < 3 ;							  
    j ++ ) sum = sum + m [ i ] [ j ] ;			      	  j ++ ) sum = sum + m [ i ] [ j ] ;			    	j ++ ) {						  
    if ( sum != 1 ) return false ;			      	  if ( sum != 1 ) return false ;			    	  sum = sum + m [ i ] [ j ] ;				  
  }							      	}							    	}							  
  return true ;						      	return true ;						    	if ( sum != 1 ) return false ;				  
}							      }								      }								  
							      								      return true ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		      MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO		    MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO			  MULTIPLY_LARGE_INTEGERS_UNDER_LARGE_MODULO
--							      --							    --								  --
static long moduloMultiplication ( long a , long b , long mod long long moduloMultiplication ( long long a , long long b ,  long long moduloMultiplication ( long long a , long long b ,  success : None
  long res = 0 ;					      	long long res = 0 ;					      long long res = 0 ;					  
  a %= mod ;						      	a %= mod ;						      a %= mod ;						  
  while ( b > 0 ) {					      	while ( b ) {						      while ( b ) {						  
    if ( ( b & 1 ) > 0 ) {				      	  if ( b & 1 ) res = ( res + a ) % mod ;		    	if ( ( b & 1 ) > 0 ) res = ( res + a ) % mod ;		  
      res = ( res + a ) % mod ;				      	  a = ( 2 * a ) % mod ;					    	a = ( 2 * a ) % mod ;					  
    }							      	  b >>= 1 ;						    	b >>= 1 ;						  
    a = ( 2 * a ) % mod ;				      	}							      }								  
    b >>= 1 ;						      	return res ;						      return res ;						  
  }							      }								    }								  
  return res ;						      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS
--							      --							    --								  --
public static int middleOfThree ( int a , int b , int c ) {   int middleOfThree ( int a , int b , int c ) {		    int middle_of_three ( int a , int b , int c ) {		  success : None
  if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;  	if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;    if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;  
  else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return 	else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return   else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return 
  else return c ;					      	else return c ;						      else return c ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			      PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			    PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2			  PROGRAM_TO_FIND_TRANSPOSE_OF_A_MATRIX_2
--							      --							    --								  --
static void transpose ( int A [ ] [ ] ) {		      void transpose ( int A [ ] [ N ] ) {			    void transpose ( int A [ N ] [ N ] ) {			  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) {						      	j ++ ) swap ( A [ i ] [ j ] , A [ j ] [ i ] ) ;		      j ++ ) {							  
    int temp = A [ i ] [ j ] ;				      }								    	int temp = A [ i ] [ j ] ;				  
    A [ i ] [ j ] = A [ j ] [ i ] ;			      								    	A [ i ] [ j ] = A [ j ] [ i ] ;				  
    A [ j ] [ i ] = temp ;				      								    	A [ j ] [ i ] = temp ;					  
  }							      								      }								  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B			      COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				    COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B				  COUNT_NUMBER_PAIRS_N_B_N_GCD_B_B
--							      --							    --								  --
static int CountPairs ( int n ) {			      int CountPairs ( int n ) {				    int CountPairs ( int n ) {					  success : identical to gold
  int k = n ;						      	int k = n ;						      int k = n ;						  
  int imin = 1 ;					      	int imin = 1 ;						      int imin = 1 ;						  
  int ans = 0 ;						      	int ans = 0 ;						      int ans = 0 ;						  
  while ( imin <= n ) {					      	while ( imin <= n ) {					      while ( imin <= n ) {					  
    int imax = n / k ;					      	  int imax = n / k ;					    	int imax = n / k ;					  
    ans += k * ( imax - imin + 1 ) ;			      	  ans += k * ( imax - imin + 1 ) ;			    	ans += k * ( imax - imin + 1 ) ;			  
    imin = imax + 1 ;					      	  imin = imax + 1 ;					    	imin = imax + 1 ;					  
    k = n / imin ;					      	  k = n / imin ;					    	k = n / imin ;						  
  }							      	}							      }								  
  return ans ;						      	return ans ;						      return ans ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
K_TH_DIGIT_RAISED_POWER_B				      K_TH_DIGIT_RAISED_POWER_B					    K_TH_DIGIT_RAISED_POWER_B					  K_TH_DIGIT_RAISED_POWER_B
--							      --							    --								  --
public static int kthdigit ( int a , int b , int k ) {	      int kthdigit ( int a , int b , int k ) {			    int kthdigit ( int a , int b , int k ) {			  success : None
  int p = ( int ) Math . pow ( a , b ) ;		      	int p = pow ( a , b ) ;					      int p = ( int ) pow ( a , b ) ;				  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  while ( p > 0 && count < k ) {			      	while ( p > 0 && count < k ) {				      while ( p > 0 && count < k ) {				  
    int rem = p % 10 ;					      	  int rem = p % 10 ;					    	int rem = p % 10 ;					  
    count ++ ;						      	  count ++ ;						    	count ++ ;						  
    if ( count == k ) return rem ;			      	  if ( count == k ) return rem ;			    	if ( count == k ) return rem ;				  
    p = p / 10 ;					      	  p = p / 10 ;						    	p = p / 10 ;						  
  }							      	}							      }								  
  return 0 ;						      	return 0 ;						      return 0 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_ MULTIPLY_TWO_NUMBERS_WITHOUT_USING_MULTIPLY_DIVISION_BITWISE_
--							      --							    --								  --
static int multiply ( int x , int y ) {			      public : int multiply ( int x , int y ) {			    int multiply ( int x , int y ) {				  script_not_found : None
  if ( y == 0 ) return 0 ;				      	if ( y == 0 ) return 0 ;				      if ( y == 0 ) return 0 ;					  
  if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	      	if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	      if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;	  
  if ( y < 0 ) return - multiply ( x , - y ) ;		      	if ( y < 0 ) return - multiply ( x , - y ) ;		      if ( y < 0 ) return - multiply ( x , - y ) ;		  
  return - 1 ;						      }								      return - 1 ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_DECIMAL_BINARY_CONVERSION			      PROGRAM_DECIMAL_BINARY_CONVERSION				    PROGRAM_DECIMAL_BINARY_CONVERSION				  PROGRAM_DECIMAL_BINARY_CONVERSION
--							      --							    --								  --
static void decToBinary ( int n ) {			      void decToBinary ( int n ) {				    void decToBinary ( int n ) {				  script_not_found : None
  int [ ] binaryNum = new int [ 32 ] ;			      	int binaryNum [ 32 ] ;					      int binaryNum [ 32 ] ;					  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n > 0 ) {						  
    binaryNum [ i ] = n % 2 ;				      	  binaryNum [ i ] = n % 2 ;				    	binaryNum [ i ] = n % 2 ;				  
    n = n / 2 ;						      	  n = n / 2 ;						    	n = n / 2 ;						  
    i ++ ;						      	  i ++ ;						    	i ++ ;							  
  }							      	}							      }								  
  for ( int j = i - 1 ;					      	for ( int j = i - 1 ;					      for ( int j = i - 1 ;					  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  j -- ) System . out . print ( binaryNum [ j ] ) ;	      	j -- ) cout << binaryNum [ j ] ;			      j -- ) {							  
}							      }								    	cout << binaryNum [ j ] << endl ;			  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER   MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER	  MAXIMUM_LENGTH_PREFIX_ONE_STRING_OCCURS_SUBSEQUENCE_ANOTHER
--							      --							    --								  --
static int maxPrefix ( String s , String t ) {		      int maxPrefix ( char s [ ] , char t [ ] ) {		    int maxPrefix ( string s , string t ) {			  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < t . length ( ) ;					      	i < strlen ( t ) ;					      i < t . size ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( count == t . length ( ) ) break ;		      	  if ( count == strlen ( s ) ) break ;			    	if ( count == t . size ( ) ) break ;			  
    if ( t . charAt ( i ) == s . charAt ( count ) ) count ++  	  if ( t [ i ] == s [ count ] ) count ++ ;		    	if ( t [ i ] == s [ count ] ) count ++ ;		  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN EFFICIENT_SEARCH_IN_AN_ARRAY_WHERE_DIFFERENCE_BETWEEN_ADJACEN
--							      --							    --								  --
static int search ( int arr [ ] , int n , int x ) {	      int search ( int arr [ ] , int n , int x ) {		    int search ( int arr [ ] , int n , int x ) {		  success : identical to gold
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  while ( i <= n - 1 ) {				      	while ( i <= n - 1 ) {					      while ( i <= n - 1 ) {					  
    if ( arr [ i ] == x ) return i ;			      	  if ( arr [ i ] == x ) return i ;			    	if ( arr [ i ] == x ) return i ;			  
    i += Math . abs ( arr [ i ] - x ) ;			      	  i += abs ( arr [ i ] - x ) ;				    	i += abs ( arr [ i ] - x ) ;				  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LOWER_CASE_UPPER_CASE_INTERESTING_FACT			      LOWER_CASE_UPPER_CASE_INTERESTING_FACT			    LOWER_CASE_UPPER_CASE_INTERESTING_FACT			  LOWER_CASE_UPPER_CASE_INTERESTING_FACT
--							      --							    --								  --
static String to_upper ( char [ ] in ) {		      string to_upper ( string & in ) {				    String to_upper ( char * in ) {				  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < in . length ;					      	i < in . length ( ) ;					      i < strlen ( in ) ;					  
  i ++ ) {						      	i ++ ) if ( 'a' <= in [ i ] <= 'z' ) in [ i ] = in [ i ] -    i ++ ) {							  
    if ( 'a' <= in [ i ] & in [ i ] <= 'z' ) {		      	return in ;						    	if ( 'a' <= in [ i ] & in [ i ] <= 'z' ) in [ i ] = ( cha 
      in [ i ] = ( char ) ( in [ i ] - 'a' + 'A' ) ;	      }								      }								  
    }							      								      return String ( in ) ;					  
  }							      								    }								  
  return String . valueOf ( in ) ;			      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_FIND_STRING_START_END_GEEKS			      PROGRAM_FIND_STRING_START_END_GEEKS			    PROGRAM_FIND_STRING_START_END_GEEKS				  PROGRAM_FIND_STRING_START_END_GEEKS
--							      --							    --								  --
static boolean isCornerPresent ( String str , String corner ) bool isCornerPresent ( string str , string corner ) {	    bool isCornerPresent ( const string & str , const string & co success : None
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . size ( ) ;					  
  int cl = corner . length ( ) ;			      	int cl = corner . length ( ) ;				      int cl = corner . size ( ) ;				  
  if ( n < cl ) return false ;				      	if ( n < cl ) return false ;				      if ( n < cl ) return false ;				  
  return ( str . substring ( 0 , cl ) . equals ( corner ) &&  	return ( str . substr ( 0 , cl ) . compare ( corner ) == 0    return ( str . substr ( 0 , cl ) == corner . substr ( 0 , n 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				      CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				    CONSTRUCT_ARRAY_PAIR_SUM_ARRAY				  CONSTRUCT_ARRAY_PAIR_SUM_ARRAY
--							      --							    --								  --
static void constructArr ( int arr [ ] , int pair [ ] , int n void constructArr ( int arr [ ] , int pair [ ] , int n ) {    void constructArr ( int arr [ ] , int pair [ ] , int n ) {	  script_not_found : None
  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /  	arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) /  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;	      	i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		      i ++ ) {							  
}							      }								    	arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;		  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		      PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS		    PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS			  PROGRAM_TO_PRINT_FIRST_N_FIBONACCI_NUMBERS
--							      --							    --								  --
static void printFibonacciNumbers ( int n ) {		      void printFibonacciNumbers ( int n ) {			    void printFibonacciNumbers ( int n ) {			  script_not_found : None
  int f1 = 0 , f2 = 1 , i ;				      	int f1 = 0 , f2 = 1 , i ;				      int f1 = 0 , f2 = 1 , i ;					  
  if ( n < 1 ) return ;					      	if ( n < 1 ) return ;					      if ( n < 1 ) return ;					  
  for ( i = 1 ;						      	for ( i = 1 ;						      for ( i = 1 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    System . out . print ( f2 + " " ) ;			      	  cout << f2 << " " ;					    	cout << f2 << " " ;					  
    int next = f1 + f2 ;				      	  int next = f1 + f2 ;					    	int next = f1 + f2 ;					  
    f1 = f2 ;						      	  f1 = f2 ;						    	f1 = f2 ;						  
    f2 = next ;						      	  f2 = next ;						    	f2 = next ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL		      MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			    MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL			  MOVE_SPACES_FRONT_STRING_SINGLE_TRAVERSAL
--							      --							    --								  --
static void moveSpaceInFront ( char str [ ] ) {		      void moveSpaceInFront ( char str [ ] ) {			    void moveSpaceInFront ( char str [ ] ) {			  script_not_found : None
  int i = str . length - 1 ;				      	int i = strlen ( str ) ;				      int i = strlen ( str ) - 1 ;				  
  for ( int j = i ;					      	for ( int j = i ;					      for ( int j = i ;						  
  j >= 0 ;						      	j >= 0 ;						      j >= 0 ;							  
  j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ] ;   	j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ] ;     j -- ) if ( str [ j ] != ' ' ) str [ i -- ] = str [ j ] ;	  
  while ( i >= 0 ) str [ i -- ] = ' ' ;			      	while ( i >= 0 ) str [ i -- ] = ' ' ;			      while ( i >= 0 ) str [ i -- ] = ' ' ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	      MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	    MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1	  MINIMUM_FLIP_REQUIRED_MAKE_BINARY_MATRIX_SYMMETRIC_1
--							      --							    --								  --
static int minimumflip ( int mat [ ] [ ] , int n ) {	      int minimumflip ( int mat [ ] [ N ] , int n ) {		    int minimumflip ( int mat [ ] [ ] , int n ) {		  script_not_found : None
  int flip = 0 ;					      	int flip = 0 ;						      int flip = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j < i ;						      	j < i ;							      j < i ;							  
  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;  	j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;    j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) flip ++ ;  
  return flip ;						      	return flip ;						      return flip ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	      FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	    FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1	  FIND_WHETHER_A_GIVEN_NUMBER_IS_A_POWER_OF_4_OR_NOT_1
--							      --							    --								  --
static int isPowerOfFour ( int n ) {			      bool isPowerOfFour ( unsigned int n ) {			    int isPowerOfFour ( int n ) {				  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int x = n & ( n - 1 ) ;				      	if ( n && ! ( n & ( n - 1 ) ) ) {			      int x = n & ( n - 1 ) ;					  
  if ( n > 0 && x == 0 ) {				      	  while ( n > 1 ) {					      if ( n > 0 && x == 0 ) {					  
    while ( n > 1 ) {					      	    n >>= 1 ;						    	while ( n > 1 ) {					  
      n >>= 1 ;						      	    count += 1 ;					    	  n >>= 1 ;						  
      count += 1 ;					      	  }							    	  count += 1 ;						  
    }							      	  return ( count % 2 == 0 ) ? 1 : 0 ;			    	}							  
    return ( count % 2 == 0 ) ? 1 : 0 ;			      	}							    	return ( count % 2 == 0 ) ;				  
  }							      	return 0 ;						      }								  
  return 0 ;						      }								      return 0 ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_2				      FRIENDS_PAIRING_PROBLEM_2					    FRIENDS_PAIRING_PROBLEM_2					  FRIENDS_PAIRING_PROBLEM_2
--							      --							    --								  --
static int countFriendsPairings ( int n ) {		      int countFriendsPairings ( int n ) {			    int countFriendsPairings ( int n ) {			  success : identical to gold
  int a = 1 , b = 2 , c = 0 ;				      	int a = 1 , b = 2 , c = 0 ;				      int a = 1 , b = 2 , c = 0 ;				  
  if ( n <= 2 ) {					      	if ( n <= 2 ) {						      if ( n <= 2 ) {						  
    return n ;						      	  return n ;						    	return n ;						  
  }							      	}							      }								  
  for ( int i = 3 ;					      	for ( int i = 3 ;					      for ( int i = 3 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    c = b + ( i - 1 ) * a ;				      	  c = b + ( i - 1 ) * a ;				    	c = b + ( i - 1 ) * a ;					  
    a = b ;						      	  a = b ;						    	a = b ;							  
    b = c ;						      	  b = c ;						    	b = c ;							  
  }							      	}							      }								  
  return c ;						      	return c ;						      return c ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_BINARY_DECIMAL_CONVERSION_1			      PROGRAM_BINARY_DECIMAL_CONVERSION_1			    PROGRAM_BINARY_DECIMAL_CONVERSION_1				  PROGRAM_BINARY_DECIMAL_CONVERSION_1
--							      --							    --								  --
static int binaryToDecimal ( String n ) {		      int binaryToDecimal ( string n ) {			    int binary_to_decimal ( string n ) {			  success : None
  String num = n ;					      	string num = n ;					      string num = n ;						  
  int dec_value = 0 ;					      	int dec_value = 0 ;					      int dec_value = 0 ;					  
  int base = 1 ;					      	int base = 1 ;						      int base = 1 ;						  
  int len = num . length ( ) ;				      	int len = num . length ( ) ;				      int len = num . length ( ) ;				  
  for ( int i = len - 1 ;				      	for ( int i = len - 1 ;					      for ( int i = len - 1 ;					  
  i >= 0 ;						      	i >= 0 ;						      i >= 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    if ( num . charAt ( i ) == '1' ) dec_value += base ;      	  if ( num [ i ] == '1' ) dec_value += base ;		    	if ( num [ i ] == '1' ) {				  
    base = base * 2 ;					      	  base = base * 2 ;					    	  dec_value += base ;					  
  }							      	}							    	}							  
  return dec_value ;					      	return dec_value ;					    	base = base * 2 ;					  
}							      }								      }								  
							      								      return dec_value ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	      MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	    MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY	  MINIMUM_COST_CONNECT_WEIGHTED_NODES_REPRESENTED_ARRAY
--							      --							    --								  --
static int minimum_cost ( int a [ ] , int n ) {		      int minimum_cost ( int a [ ] , int n ) {			    int minimum_cost ( int a [ ] , int n ) {			  success : identical to gold
  int mn = Integer . MAX_VALUE ;			      	int mn = INT_MAX ;					      int mn = INT_MAX ;					  
  int sum = 0 ;						      	int sum = 0 ;						      int sum = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    mn = Math . min ( a [ i ] , mn ) ;			      	  mn = min ( a [ i ] , mn ) ;				    	mn = min ( a [ i ] , mn ) ;				  
    sum += a [ i ] ;					      	  sum += a [ i ] ;					    	sum += a [ i ] ;					  
  }							      	}							      }								  
  return mn * ( sum - mn ) ;				      	return mn * ( sum - mn ) ;				      return mn * ( sum - mn ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUM_FACTORS_NUMBER					      SUM_FACTORS_NUMBER					    SUM_FACTORS_NUMBER						  SUM_FACTORS_NUMBER
--							      --							    --								  --
static int divSum ( int n ) {				      int divSum ( int n ) {					    int divSum ( int n ) {					  success : None
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= Math . sqrt ( n ) ;				      	i <= sqrt ( n ) ;					      i <= sqrt ( n ) ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( n % i == 0 ) {					      	  if ( n % i == 0 ) {					    	if ( n % i == 0 ) {					  
      if ( i == ( n / i ) ) result += i ;		      	    if ( i == ( n / i ) ) result += i ;			    	  if ( i == ( n / i ) ) {				  
      else result += ( i + n / i ) ;			      	    else result += ( i + n / i ) ;			    	    result += i ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return ( result + n + 1 ) ;				      	return ( result + n + 1 ) ;				    	    result += ( i + n / i ) ;				  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return ( result + n + 1 ) ;				  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	      RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	    RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY	  RECURSIVE_C_PROGRAM_LINEARLY_SEARCH_ELEMENT_GIVEN_ARRAY
--							      --							    --								  --
static int recSearch ( int arr [ ] , int l , int r , int x )  int recSearch ( int arr [ ] , int l , int r , int x ) {	    int recSearch ( int arr [ ] , int l , int r , int x ) {	  success : identical to gold
  if ( r < l ) return - 1 ;				      	if ( r < l ) return - 1 ;				      if ( r < l ) return - 1 ;					  
  if ( arr [ l ] == x ) return l ;			      	if ( arr [ l ] == x ) return l ;			      if ( arr [ l ] == x ) return l ;				  
  if ( arr [ r ] == x ) return r ;			      	if ( arr [ r ] == x ) return r ;			      if ( arr [ r ] == x ) return r ;				  
  return recSearch ( arr , l + 1 , r - 1 , x ) ;	      	return recSearch ( arr , l + 1 , r - 1 , x ) ;		      return recSearch ( arr , l + 1 , r - 1 , x ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		      HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		    HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION		  HOW_TO_AVOID_OVERFLOW_IN_MODULAR_MULTIPLICATION
--							      --							    --								  --
static long mulmod ( long a , long b , long mod ) {	      ll mulmod ( ll a , ll b , ll mod ) {			    long long mulmod ( long long a , long long b , long long mod  script_not_found : None
  long res = 0 ;					      	ll res = 0 ;						      long long res = 0 ;					  
  a = a % mod ;						      	a = a % mod ;						      a = a % mod ;						  
  while ( b > 0 ) {					      	while ( b > 0 ) {					      while ( b ) {						  
    if ( b % 2 == 1 ) {					      	  if ( b % 2 == 1 ) res = ( res + a ) % mod ;		    	if ( b % 2 == 1 ) res = ( res + a ) % mod ;		  
      res = ( res + a ) % mod ;				      	  a = ( a * 2 ) % mod ;					    	a = ( a * 2 ) % mod ;					  
    }							      	  b /= 2 ;						    	b /= 2 ;						  
    a = ( a * 2 ) % mod ;				      	}							      }								  
    b /= 2 ;						      	return res % mod ;					      return res % mod ;					  
  }							      }								    }								  
  return res % mod ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_REPETITIVE_ELEMENT_1_N_1_1				      FIND_REPETITIVE_ELEMENT_1_N_1_1				    FIND_REPETITIVE_ELEMENT_1_N_1_1				  FIND_REPETITIVE_ELEMENT_1_N_1_1
--							      --							    --								  --
static int findRepeating ( int arr [ ] , int n ) {	      int findRepeating ( int arr [ ] , int n ) {		    int findRepeating ( int arr [ ] , int n ) {			  success : None
  HashSet < Integer > s = new HashSet < Integer > ( ) ;	      	unordered_set < int > s ;				      set < int > s ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;      	  if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ 	if ( s . count ( arr [ i ] ) ) return arr [ i ] ;	  
    s . add ( arr [ i ] ) ;				      	  s . insert ( arr [ i ] ) ;				    	s . insert ( arr [ i ] ) ;				  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN FIND_THE_MAXIMUM_ELEMENT_IN_AN_ARRAY_WHICH_IS_FIRST_INCREASIN
--							      --							    --								  --
static int findMaximum ( int arr [ ] , int low , int high ) { int findMaximum ( int arr [ ] , int low , int high ) {	    int findMaximum ( int arr [ ] , int low , int high ) {	  failure : #Results: 8, 10
  int max = arr [ low ] ;				      	int max = arr [ low ] ;					      int max = arr [ low ] ;					  
  int i ;						      	int i ;							      int i ;							  
  for ( i = low ;					      	for ( i = low + 1 ;					      for ( i = low ;						  
  i <= high ;						      	i <= high ;						      i <= high ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] > max ) max = arr [ i ] ;		      	  if ( arr [ i ] > max ) max = arr [ i ] ;		    	if ( arr [ i ] > max ) {				  
  }							      	  else break ;						    	  max = arr [ i ] ;					  
  return max ;						      	}							    	}							  
}							      	return max ;						      }								  
							      }								      return max ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		      MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1		    MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1			  MIDDLE_OF_THREE_USING_MINIMUM_COMPARISONS_1
--							      --							    --								  --
public static int middleOfThree ( int a , int b , int c ) {   int middleOfThree ( int a , int b , int c ) {		    int middle_of_three ( int a , int b , int c ) {		  success : None
  if ( a > b ) {					      	if ( a > b ) {						      if ( a > b ) {						  
    if ( b > c ) return b ;				      	  if ( b > c ) return b ;				    	if ( b > c ) return b ;					  
    else if ( a > c ) return c ;			      	  else if ( a > c ) return c ;				    	else if ( a > c ) return c ;				  
    else return a ;					      	  else return a ;					    	else return a ;						  
  }							      	}							      }								  
  else {						      	else {							      else {							  
    if ( a > c ) return a ;				      	  if ( a > c ) return a ;				    	if ( a > c ) return a ;					  
    else if ( b > c ) return c ;			      	  else if ( b > c ) return c ;				    	else if ( b > c ) return c ;				  
    else return b ;					      	  else return b ;					    	else return b ;						  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS COUNT_MINIMUM_NUMBER_SUBSETS_SUBSEQUENCES_CONSECUTIVE_NUMBERS
--							      --							    --								  --
static int numofsubset ( int arr [ ] , int n ) {	      int numofsubset ( int arr [ ] , int n ) {			    int numofsubset ( int arr [ ] , int n ) {			  success : None
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  int count = 1 ;					      	int count = 1 ;						      int count = 1 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;	      	  if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;	    	if ( arr [ i ] + 1 != arr [ i + 1 ] ) {			  
  }							      	}							    	  count ++ ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SHUFFLE_A_GIVEN_ARRAY					      SHUFFLE_A_GIVEN_ARRAY					    SHUFFLE_A_GIVEN_ARRAY					  SHUFFLE_A_GIVEN_ARRAY
--							      --							    --								  --
static void randomize ( int arr [ ] , int n ) {		      void randomize ( int arr [ ] , int n ) {			    void randomize ( int arr [ ] , int n ) {			  script_not_found : None
  Random r = new Random ( ) ;				      	srand ( time ( NULL ) ) ;				      srand ( time ( NULL ) ) ;					  
  for ( int i = n - 1 ;					      	for ( int i = n - 1 ;					      for ( int i = n - 1 ;					  
  i > 0 ;						      	i > 0 ;							      i > 0 ;							  
  i -- ) {						      	i -- ) {						      i -- ) {							  
    int j = r . nextInt ( i + 1 ) ;			      	  int j = rand ( ) % ( i + 1 ) ;			    	int j = rand ( ) % ( i + 1 ) ;				  
    int temp = arr [ i ] ;				      	  swap ( & arr [ i ] , & arr [ j ] ) ;			    	int temp = arr [ i ] ;					  
    arr [ i ] = arr [ j ] ;				      	}							    	arr [ i ] = arr [ j ] ;					  
    arr [ j ] = temp ;					      }								    	arr [ j ] = temp ;					  
  }							      								      }								  
  System . out . println ( Arrays . toString ( arr ) ) ;      								      cout << endl ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SPLIT_ARRAY_ADD_FIRST_PART_END				      SPLIT_ARRAY_ADD_FIRST_PART_END				    SPLIT_ARRAY_ADD_FIRST_PART_END				  SPLIT_ARRAY_ADD_FIRST_PART_END
--							      --							    --								  --
public static void splitArr ( int arr [ ] , int n , int k ) { void splitArr ( int arr [ ] , int n , int k ) {		    void splitArr ( int arr [ ] , int n , int k ) {		  success : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < k ;						      	i < k ;							      i < k ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int x = arr [ 0 ] ;					      	  int x = arr [ 0 ] ;					    	int x = arr [ 0 ] ;					  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n - 1 ;						      	  j < n - 1 ;						    	j < n - 1 ;						  
    ++ j ) arr [ j ] = arr [ j + 1 ] ;			      	  ++ j ) arr [ j ] = arr [ j + 1 ] ;			    	++ j ) {						  
    arr [ n - 1 ] = x ;					      	  arr [ n - 1 ] = x ;					    	  arr [ j ] = arr [ j + 1 ] ;				  
  }							      	}							    	}							  
}							      }								    	arr [ n - 1 ] = x ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NON_REPEATING_ELEMENT					      NON_REPEATING_ELEMENT					    NON_REPEATING_ELEMENT					  NON_REPEATING_ELEMENT
--							      --							    --								  --
static int firstNonRepeating ( int arr [ ] , int n ) {	      int firstNonRepeating ( int arr [ ] , int n ) {		    int firstNonRepeating ( int arr [ ] , int n ) {		  success : identical to gold
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;    	  j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;    	j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;	  
    if ( j == n ) return arr [ i ] ;			      	  if ( j == n ) return arr [ i ] ;			    	if ( j == n ) return arr [ i ] ;			  
  }							      	}							      }								  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	      MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC	    MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC		  MODULAR_EXPONENTIATION_POWER_IN_MODULAR_ARITHMETIC
--							      --							    --								  --
static int power ( int x , int y , int p ) {		      int power ( int x , unsigned int y , int p ) {		    int power ( int x , int y , int p ) {			  success : None
  int res = 1 ;						      	int res = 1 ;						      int res = 1 ;						  
  x = x % p ;						      	x = x % p ;						      x = x % p ;						  
  while ( y > 0 ) {					      	while ( y > 0 ) {					      while ( y ) {						  
    if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;	      	  if ( y & 1 ) res = ( res * x ) % p ;			    	if ( ( y & 1 ) == 1 ) {					  
    y = y >> 1 ;					      	  y = y >> 1 ;						    	  res = ( res * x ) % p ;				  
    x = ( x * x ) % p ;					      	  x = ( x * x ) % p ;					    	}							  
  }							      	}							    	y = y >> 1 ;						  
  return res ;						      	return res ;						    	x = ( x * x ) % p ;					  
}							      }								      }								  
							      								      return res ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MINIMUM_DIFFERENCE_PAIR_1				      FIND_MINIMUM_DIFFERENCE_PAIR_1				    FIND_MINIMUM_DIFFERENCE_PAIR_1				  FIND_MINIMUM_DIFFERENCE_PAIR_1
--							      --							    --								  --
static int findMinDiff ( int [ ] arr , int n ) {	      int findMinDiff ( int arr [ ] , int n ) {			    int findMinDiff ( int arr [ ] , int n ) {			  success : identical to gold
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  int diff = Integer . MAX_VALUE ;			      	int diff = INT_MAX ;					      int diff = INT_MAX ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ 	i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [   i ++ ) if ( arr [ i + 1 ] - arr [ i ] < diff ) diff = arr [ 
  return diff ;						      	return diff ;						      return diff ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM_1				      FRIENDS_PAIRING_PROBLEM_1					    FRIENDS_PAIRING_PROBLEM_1					  FRIENDS_PAIRING_PROBLEM_1
--							      --							    --								  --
static int countFriendsPairings ( int n ) {		      int countFriendsPairings ( int n ) {			    int countFriendsPairings ( int n ) {			  script_not_found : None
  if ( dp [ n ] != - 1 ) return dp [ n ] ;		      	if ( dp [ n ] != - 1 ) return dp [ n ] ;		      if ( dp [ n ] != - 1 ) return dp [ n ] ;			  
  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 	if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1   if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 
  else return dp [ n ] = n ;				      	else return dp [ n ] = n ;				      else return dp [ n ] = n ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION ZECKENDORFS_THEOREM_NON_NEIGHBOURING_FIBONACCI_REPRESENTATION
--							      --							    --								  --
public static int nearestSmallerEqFib ( int n ) {	      int nearestSmallerEqFib ( int n ) {			    int nearestSmallerEqFib ( int n ) {				  success : identical to gold
  if ( n == 0 || n == 1 ) return n ;			      	if ( n == 0 || n == 1 ) return n ;			      if ( n == 0 || n == 1 ) return n ;			  
  int f1 = 0 , f2 = 1 , f3 = 1 ;			      	int f1 = 0 , f2 = 1 , f3 = 1 ;				      int f1 = 0 , f2 = 1 , f3 = 1 ;				  
  while ( f3 <= n ) {					      	while ( f3 <= n ) {					      while ( f3 <= n ) {					  
    f1 = f2 ;						      	  f1 = f2 ;						    	f1 = f2 ;						  
    f2 = f3 ;						      	  f2 = f3 ;						    	f2 = f3 ;						  
    f3 = f1 + f2 ;					      	  f3 = f1 + f2 ;					    	f3 = f1 + f2 ;						  
  }							      	}							      }								  
  return f2 ;						      	return f2 ;						      return f2 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_1
--							      --							    --								  --
static void printDistinct ( int arr [ ] , int n ) {	      void printDistinct ( int arr [ ] , int n ) {		    void printDistinct ( int arr [ ] , int n ) {		  script_not_found : None
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) i ++ ;  	  while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) i ++ ;  	while ( i < n - 1 && arr [ i ] == arr [ i + 1 ] ) {	  
    System . out . print ( arr [ i ] + " " ) ;		      	  cout << arr [ i ] << " " ;				    	  i ++ ;						  
  }							      	}							    	}							  
}							      }								    	cout << arr [ i ] << " " ;				  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			      HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			    HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN			  HEIGHT_N_ARY_TREE_PARENT_ARRAY_GIVEN
--							      --							    --								  --
static int findHeight ( int [ ] parent , int n ) {	      int findHeight ( int * parent , int n ) {			    int findHeight ( int * parent , int n ) {			  script_not_found : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int p = i , current = 1 ;				      	  int p = i , current = 1 ;				    	int p = i , current = 1 ;				  
    while ( parent [ p ] != - 1 ) {			      	  while ( parent [ p ] != - 1 ) {			    	while ( parent [ p ] != - 1 ) {				  
      current ++ ;					      	    current ++ ;					    	  current ++ ;						  
      p = parent [ p ] ;				      	    p = parent [ p ] ;					    	  p = parent [ p ] ;					  
    }							      	  }							    	}							  
    res = Math . max ( res , current ) ;		      	  res = max ( res , current ) ;				    	res = max ( res , current ) ;				  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MAXIMUM_GAMES_PLAYED_WINNER				      MAXIMUM_GAMES_PLAYED_WINNER				    MAXIMUM_GAMES_PLAYED_WINNER					  MAXIMUM_GAMES_PLAYED_WINNER
--							      --							    --								  --
static int maxGameByWinner ( int N ) {			      int maxGameByWinner ( int N ) {				    int maxGameByWinner ( int N ) {				  success : None
  int [ ] dp = new int [ N ] ;				      	int dp [ N ] ;						      int * dp = new int [ N ] ;				  
  dp [ 0 ] = 1 ;					      	dp [ 0 ] = 1 ;						      dp [ 0 ] = 1 ;						  
  dp [ 1 ] = 2 ;					      	dp [ 1 ] = 2 ;						      dp [ 1 ] = 2 ;						  
  int i = 2 ;						      	int i = 2 ;						      int i = 2 ;						  
  do {							      	do {							      do {							  
    dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		      	  dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		    	dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ;		  
  }							      	}							      }								  
  while ( dp [ i ++ ] <= N ) ;				      	while ( dp [ i ++ ] <= N ) ;				      while ( dp [ i ++ ] <= N ) ;				  
  return ( i - 2 ) ;					      	return ( i - 2 ) ;					      delete [ ] dp ;						  
}							      }								      return ( i - 2 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	      COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	    COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS	  COUNT_SUBSTRINGS_WITH_SAME_FIRST_AND_LAST_CHARACTERS
--							      --							    --								  --
static int countSubstringWithEqualEnds ( String s ) {	      int countSubstringWithEqualEnds ( string s ) {		    int countSubstringWithEqualEnds ( string s ) {		  success : identical to gold
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  int n = s . length ( ) ;				      	int n = s . length ( ) ;				      int n = s . length ( ) ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i ;				      	i ++ ) for ( int j = i ;				      i ++ ) for ( int j = i ;					  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result + 	j ++ ) if ( s [ i ] == s [ j ] ) result ++ ;		      j ++ ) if ( s [ i ] == s [ j ] ) result ++ ;		  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MIRROR_IMAGE_POINT_2_D_PLANE			      FIND_MIRROR_IMAGE_POINT_2_D_PLANE				    FIND_MIRROR_IMAGE_POINT_2_D_PLANE				  FIND_MIRROR_IMAGE_POINT_2_D_PLANE
--							      --							    --								  --
static pair mirrorImage ( double a , double b , double c , do pair < double , double > mirrorImage ( double a , double b ,  pair mirror_image ( double a , double b , double c , double x script_not_found : None
  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * 	double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b *   double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * 
  double x = temp * a + x1 ;				      	double x = temp * a + x1 ;				      double x = temp * a + x1 ;				  
  double y = temp * b + y1 ;				      	double y = temp * b + y1 ;				      double y = temp * b + y1 ;				  
  return new pair ( x , y ) ;				      	return make_pair ( x , y ) ;				      return make_pair ( x , y ) ;				  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NTH_NON_FIBONACCI_NUMBER				      NTH_NON_FIBONACCI_NUMBER					    NTH_NON_FIBONACCI_NUMBER					  NTH_NON_FIBONACCI_NUMBER
--							      --							    --								  --
static int nonFibonacci ( int n ) {			      int nonFibonacci ( int n ) {				    int nonFibonacci ( int n ) {				  failure : #Results: 0, 10
  int prevPrev = 1 , prev = 2 , curr = 3 ;		      	int prevPrev = 1 , prev = 2 , curr = 3 ;		      int prevPrev = 1 , prev = 2 , curr = 3 ;			  
  while ( n > 0 ) {					      	while ( n > 0 ) {					      while ( n ) {						  
    prevPrev = prev ;					      	  prevPrev = prev ;					    	prevPrev = prev ;					  
    prev = curr ;					      	  prev = curr ;						    	prev = curr ;						  
    curr = prevPrev + prev ;				      	  curr = prevPrev + prev ;				    	curr = prevPrev + prev ;				  
    n = n - ( curr - prev - 1 ) ;			      	  n = n - ( curr - prev - 1 ) ;				    	n = n - ( curr - prev - 1 ) ;				  
  }							      	}							      }								  
  n = n + ( curr - prev - 1 ) ;				      	n = n + ( curr - prev - 1 ) ;				      n = n + ( curr - prev - 1 ) ;				  
  return prev + n ;					      	return prev + n ;					      return prev + n ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	      MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	    MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED	  MINIMIZE_SUM_PRODUCT_TWO_ARRAYS_PERMUTATIONS_ALLOWED
--							      --							    --								  --
static int minValue ( int A [ ] , int B [ ] , int n ) {	      int minValue ( int A [ ] , int B [ ] , int n ) {		    int minValue ( int A [ ] , int B [ ] , int n ) {		  success : None
  Arrays . sort ( A ) ;					      	sort ( A , A + n ) ;					      sort ( A , A + n ) ;					  
  Arrays . sort ( B ) ;					      	sort ( B , B + n ) ;					      sort ( B , B + n ) ;					  
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ;	      	i ++ ) result += ( A [ i ] * B [ n - i - 1 ] ) ;	      i ++ ) {							  
  return result ;					      	return result ;						    	result += ( A [ i ] * B [ n - i - 1 ] ) ;		  
}							      }								      }								  
							      								      return result ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_PERIMETER_N_BLOCKS				      MINIMUM_PERIMETER_N_BLOCKS				    MINIMUM_PERIMETER_N_BLOCKS					  MINIMUM_PERIMETER_N_BLOCKS
--							      --							    --								  --
public static long minPerimeter ( int n ) {		      int minPerimeter ( int n ) {				    long long minPerimeter ( int n ) {				  success : None
  int l = ( int ) Math . sqrt ( n ) ;			      	int l = sqrt ( n ) ;					      int l = ( int ) sqrt ( n ) ;				  
  int sq = l * l ;					      	int sq = l * l ;					      int sq = l * l ;						  
  if ( sq == n ) return l * 4 ;				      	if ( sq == n ) return l * 4 ;				      if ( sq == n ) {						  
  else {						      	else {							    	return l * 4 ;						  
    long row = n / l ;					      	  long long int row = n / l ;				      }								  
    long perimeter = 2 * ( l + row ) ;			      	  long long int perimeter = 2 * ( l + row ) ;		      else {							  
    if ( n % l != 0 ) perimeter += 2 ;			      	  if ( n % l != 0 ) perimeter += 2 ;			    	long long row = n / l ;					  
    return perimeter ;					      	  return perimeter ;					    	long long perimeter = 2 * ( l + row ) ;			  
  }							      	}							    	if ( n % l != 0 ) {					  
}							      }								    	  perimeter += 2 ;					  
							      								    	}							  
							      								    	return perimeter ;					  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
BINARY_SEARCH_1						      BINARY_SEARCH_1						    BINARY_SEARCH_1						  BINARY_SEARCH_1
--							      --							    --								  --
int binarySearch ( int arr [ ] , int x ) {		      int binarySearch ( int arr [ ] , int l , int r , int x ) {    int binarySearch ( int arr [ ] , int x ) {			  script_not_found : None
  int l = 0 , r = arr . length - 1 ;			      	while ( l <= r ) {					      int l = 0 , r = arr . size ( ) - 1 ;			  
  while ( l <= r ) {					      	  int m = l + ( r - l ) / 2 ;				      while ( l <= r ) {					  
    int m = l + ( r - l ) / 2 ;				      	  if ( arr [ m ] == x ) return m ;			    	int m = l + ( r - l ) / 2 ;				  
    if ( arr [ m ] == x ) return m ;			      	  if ( arr [ m ] < x ) l = m + 1 ;			    	if ( arr [ m ] == x ) return m ;			  
    if ( arr [ m ] < x ) l = m + 1 ;			      	  else r = m - 1 ;					    	if ( arr [ m ] < x ) l = m + 1 ;			  
    else r = m - 1 ;					      	}							    	else r = m - 1 ;					  
  }							      	return - 1 ;						      }								  
  return - 1 ;						      }								      return - 1 ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		      FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		    FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1		  FIND_MAXIMUM_PRODUCT_OF_A_TRIPLET_IN_ARRAY_1
--							      --							    --								  --
static int maxProduct ( int arr [ ] , int n ) {		      int maxProduct ( int arr [ ] , int n ) {			    int maxProduct ( int arr [ ] , int n ) {			  success : None
  if ( n < 3 ) {					      	if ( n < 3 ) return - 1 ;				      if ( n < 3 ) {						  
    return - 1 ;					      	sort ( arr , arr + n ) ;				    	return - 1 ;						  
  }							      	return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [    }								  
  Arrays . sort ( arr ) ;				      }								      sort ( arr , arr + n ) ;					  
  return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , 								      return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND COUNT_EVEN_LENGTH_BINARY_SEQUENCES_WITH_SAME_SUM_OF_FIRST_AND
--							      --							    --								  --
static int countSeq ( int n ) {				      int countSeq ( int n ) {					    int countSeq ( int n ) {					  success : identical to gold
  int nCr = 1 , res = 1 ;				      	int nCr = 1 , res = 1 ;					      int nCr = 1 , res = 1 ;					  
  for ( int r = 1 ;					      	for ( int r = 1 ;					      for ( int r = 1 ;						  
  r <= n ;						      	r <= n ;						      r <= n ;							  
  r ++ ) {						      	r ++ ) {						      r ++ ) {							  
    nCr = ( nCr * ( n + 1 - r ) ) / r ;			      	  nCr = ( nCr * ( n + 1 - r ) ) / r ;			    	nCr = ( nCr * ( n + 1 - r ) ) / r ;			  
    res += nCr * nCr ;					      	  res += nCr * nCr ;					    	res += nCr * nCr ;					  
  }							      	}							      }								  
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			      DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			    DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM			  DIVIDE_CUBOID_CUBES_SUM_VOLUMES_MAXIMUM
--							      --							    --								  --
static void maximizecube ( int l , int b , int h ) {	      void maximizecube ( int l , int b , int h ) {		    void maximizecube ( int l , int b , int h ) {		  script_not_found : None
  int side = gcd ( l , gcd ( b , h ) ) ;		      	int side = __gcd ( l , __gcd ( b , h ) ) ;		      int side = gcd ( l , gcd ( b , h ) ) ;			  
  int num = l / side ;					      	int num = l / side ;					      int num = l / side ;					  
  num = ( num * b / side ) ;				      	num = ( num * b / side ) ;				      num = ( num * b / side ) ;				  
  num = ( num * h / side ) ;				      	num = ( num * h / side ) ;				      num = ( num * h / side ) ;				  
  System . out . println ( side + " " + num ) ;		      	cout << side << " " << num << endl ;			      cout << side << " " << num << endl ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE SUBARRAYSUBSTRING_VS_SUBSEQUENCE_AND_PROGRAMS_TO_GENERATE_THE
--							      --							    --								  --
static void subArray ( int n ) {			      void subArray ( int arr [ ] , int n ) {			    void subArray ( int n ) {					  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i ;					      	  for ( int j = i ;					    	for ( int j = i ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      for ( int k = i ;					      	    for ( int k = i ;					    	  for ( int k = i ;					  
      k <= j ;						      	    k <= j ;						    	  k <= j ;						  
      k ++ ) System . out . print ( arr [ k ] + " " ) ;	      	    k ++ ) cout << arr [ k ] << " " ;			    	  k ++ ) {						  
    }							      	    cout << endl ;					    	    cout << arr [ k ] << " " ;				  
  }							      	  }							    	  }							  
}							      	}							    	}							  
							      }								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		      PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		    PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES		  PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES
--							      --							    --								  --
static boolean isPrime ( int p ) {			      bool isPrime ( int p ) {					    bool isPrime ( int p ) {					  error : PRIMALITY_TEST_SET_5USING_LUCAS_LEHMER_SER
  double checkNumber = Math . pow ( 2 , p ) - 1 ;	      	long long checkNumber = pow ( 2 , p ) - 1 ;		      double checkNumber = pow ( 2 , p ) - 1 ;			  IES.cpp: In function ‘bool f_filled(int)’: PRIMALI
  double nextval = 4 % checkNumber ;			      	long long nextval = 4 % checkNumber ;			      double nextval = 4 % checkNumber ;			  TY_TEST_SET_5USING_LUCAS_LEHMER_SERIES.cpp:28:22:
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  error: invalid operands of types ‘int’ and ‘double
  i < p - 1 ;						      	i < p - 1 ;						      i < p - 1 ;						  ’ to binary ‘operator%’    double nextval = 4 % ch
  i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ;  	i ++ ) nextval = ( nextval * nextval - 2 ) % checkNumber ;    i ++ ) {							  eckNumber ;			  ~~^~~~~~~~~~~~~ PR
  return ( nextval == 0 ) ;				      	return ( nextval == 0 ) ;				    	nextval = ( nextval * nextval - 2 ) % checkNumber ;	  IMALITY_TEST_SET_5USING_LUCAS_LEHMER_SERIES.cpp:32
}							      }								      }								  :41: error: invalid operands of types ‘double’ and
							      								      return ( nextval == 0 ) ;					   ‘double’ to binary ‘operator%’      nextval = ( n
							      								    }								  extval * nextval - 2 ) % checkNumber ;
							      								    								      ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FLOOR_IN_A_SORTED_ARRAY					      FLOOR_IN_A_SORTED_ARRAY					    FLOOR_IN_A_SORTED_ARRAY					  FLOOR_IN_A_SORTED_ARRAY
--							      --							    --								  --
static int floorSearch ( int arr [ ] , int n , int x ) {      int floorSearch ( int arr [ ] , int n , int x ) {		    int floorSearch ( int arr [ ] , int n , int x ) {		  success : identical to gold
  if ( x >= arr [ n - 1 ] ) return n - 1 ;		      	if ( x >= arr [ n - 1 ] ) return n - 1 ;		      if ( x >= arr [ n - 1 ] ) return n - 1 ;			  
  if ( x < arr [ 0 ] ) return - 1 ;			      	if ( x < arr [ 0 ] ) return - 1 ;			      if ( x < arr [ 0 ] ) return - 1 ;				  
  for ( int i = 1 ;					      	for ( int i = 1 ;					      for ( int i = 1 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;	      	i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;		      i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;		  
  return - 1 ;						      	return - 1 ;						      return - 1 ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION		      LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			    LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION			  LEXICOGRAPHICALLY_MINIMUM_STRING_ROTATION
--							      --							    --								  --
static String minLexRotation ( String str ) {		      string minLexRotation ( string str ) {			    string minLexRotation ( string str ) {			  failure : #Results: 1, 10
  int n = str . length ( ) ;				      	int n = str . length ( ) ;				      int n = str . length ( ) ;				  
  String arr [ ] = new String [ n ] ;			      	string arr [ n ] ;					      string arr [ n ] ;					  
  String concat = str + str ;				      	string concat = str + str ;				      string concat = str + str ;				  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) arr [ i ] = concat . substr ( i , n ) ;		      i ++ ) arr [ i ] = concat . substr ( i , n - i ) ;	  
    arr [ i ] = concat . substring ( i , i + n ) ;	      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  }							      	return arr [ 0 ] ;					      return arr [ 0 ] ;					  
  Arrays . sort ( arr ) ;				      }								    }								  
  return arr [ 0 ] ;					      								    								  
}							      								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	      COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	    COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX	  COUNT_ZEROS_IN_A_ROW_WISE_AND_COLUMN_WISE_SORTED_MATRIX
--							      --							    --								  --
static int countZeroes ( int mat [ ] [ ] ) {		      int countZeroes ( int mat [ N ] [ N ] ) {			    int countZeroes ( int mat [ N ] [ N ] ) {			  script_not_found : None
  int row = N - 1 , col = 0 ;				      	int row = N - 1 , col = 0 ;				      int row = N - 1 , col = 0 ;				  
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  while ( col < N ) {					      	while ( col < N ) {					      while ( col < N ) {					  
    while ( mat [ row ] [ col ] > 0 ) if ( -- row < 0 ) retur 	  while ( mat [ row ] [ col ] ) if ( -- row < 0 ) return co 	while ( mat [ row ] [ col ] > 0 ) if ( -- row < 0 ) retur 
    count += ( row + 1 ) ;				      	  count += ( row + 1 ) ;				    	count += ( row + 1 ) ;					  
    col ++ ;						      	  col ++ ;						    	col ++ ;						  
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_XOR_VALUE_PAIR_1				      MINIMUM_XOR_VALUE_PAIR_1					    MINIMUM_XOR_VALUE_PAIR_1					  MINIMUM_XOR_VALUE_PAIR_1
--							      --							    --								  --
static int minXOR ( int arr [ ] , int n ) {		      int minXOR ( int arr [ ] , int n ) {			    int minXOR ( int arr [ ] , int n ) {			  success : None
  Arrays . parallelSort ( arr ) ;			      	sort ( arr , arr + n ) ;				      std :: sort ( arr , arr + n ) ;				  
  int minXor = Integer . MAX_VALUE ;			      	int minXor = INT_MAX ;					      int minXor = INT_MAX ;					  
  int val = 0 ;						      	int val = 0 ;						      int val = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n - 1 ;						      	i < n - 1 ;						      i < n - 1 ;						  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    val = arr [ i ] ^ arr [ i + 1 ] ;			      	  val = arr [ i ] ^ arr [ i + 1 ] ;			    	val = arr [ i ] ^ arr [ i + 1 ] ;			  
    minXor = Math . min ( minXor , val ) ;		      	  minXor = min ( minXor , val ) ;			    	minXor = min ( minXor , val ) ;				  
  }							      	}							      }								  
  return minXor ;					      	return minXor ;						      return minXor ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1		      COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			    COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1			  COUNTING_PAIRS_PERSON_CAN_FORM_PAIR_ONE_1
--							      --							    --								  --
static int numberOfWays ( int x ) {			      int numberOfWays ( int x ) {				    int numberOfWays ( int x ) {				  success : None
  int dp [ ] = new int [ x + 1 ] ;			      	int dp [ x + 1 ] ;					      int dp [ x + 1 ] ;					  
  dp [ 0 ] = dp [ 1 ] = 1 ;				      	dp [ 0 ] = dp [ 1 ] = 1 ;				      dp [ 0 ] = dp [ 1 ] = 1 ;					  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i <= x ;						      	i <= x ;						      i <= x ;							  
  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;   i ++ ) {							  
  return dp [ x ] ;					      	return dp [ x ] ;					    	dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;	  
}							      }								      }								  
							      								      return dp [ x ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7	      FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		    FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7		  FIND_POSITION_GIVEN_NUMBER_AMONG_NUMBERS_MADE_4_7
--							      --							    --								  --
static int findpos ( String n ) {			      int findpos ( string n ) {				    int findpos ( string n ) {					  success : None
  int k = 0 , pos = 0 , i = 0 ;				      	int i = 0 , pos = 0 ;					      int k = 0 , pos = 0 , i = 0 ;				  
  while ( k != n . length ( ) ) {			      	while ( n [ i ] != '\0' ) {				      while ( k != n . size ( ) ) {				  
    switch ( n . charAt ( i ) ) {			      	  switch ( n [ i ] ) {					    	switch ( n [ i ] ) {					  
      case '4' : pos = pos * 2 + 1 ;			      	    case '4' : pos = pos * 2 + 1 ;			    	  case '4' : pos = pos * 2 + 1 ;			  
      break ;						      	    break ;						    	  break ;						  
      case '7' : pos = pos * 2 + 2 ;			      	    case '7' : pos = pos * 2 + 2 ;			    	  case '7' : pos = pos * 2 + 2 ;			  
      break ;						      	    break ;						    	  break ;						  
    }							      	  }							    	}							  
    i ++ ;						      	  i ++ ;						    	i ++ ;							  
    k ++ ;						      	}							    	k ++ ;							  
  }							      	return pos ;						      }								  
  return pos ;						      }								      return pos ;						  
}							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_ADDITION_TWO_MATRICES				      C_PROGRAM_ADDITION_TWO_MATRICES				    C_PROGRAM_ADDITION_TWO_MATRICES				  C_PROGRAM_ADDITION_TWO_MATRICES
--							      --							    --								  --
static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ void add ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N  void add ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] [ N  script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      i ++ ) for ( j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	      j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_DIVISIBLE_PAIRS_ARRAY				      COUNT_DIVISIBLE_PAIRS_ARRAY				    COUNT_DIVISIBLE_PAIRS_ARRAY					  COUNT_DIVISIBLE_PAIRS_ARRAY
--							      --							    --								  --
static int countDivisibles ( int arr [ ] , int n ) {	      int countDivisibles ( int arr [ ] , int n ) {		    int countDivisibles ( int arr [ ] , int n ) {		  script_not_found : None
  int res = 0 ;						      	int res = 0 ;						      int res = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) for ( int j = i + 1 ;				      	i ++ ) for ( int j = i + 1 ;				      i ++ ) for ( int j = i + 1 ;				  
  j < n ;						      	j < n ;							      j < n ;							  
  j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ 	j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [   j ++ ) if ( arr [ i ] % arr [ j ] == 0 || arr [ j ] % arr [ 
  return res ;						      	return res ;						      return res ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY			  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY
--							      --							    --								  --
static void printDistinct ( int arr [ ] , int n ) {	      void printDistinct ( int arr [ ] , int n ) {		    void printDistinct ( int arr [ ] , int n ) {		  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < i ;						      	  j < i ;						    	j < i ;							  
    j ++ ) if ( arr [ i ] == arr [ j ] ) break ;	      	  j ++ ) if ( arr [ i ] == arr [ j ] ) break ;		    	j ++ ) if ( arr [ i ] == arr [ j ] ) break ;		  
    if ( i == j ) System . out . print ( arr [ i ] + " " ) ;  	  if ( i == j ) cout << arr [ i ] << " " ;		    	if ( i == j ) cout << arr [ i ] << " " ;		  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
C_PROGRAM_SUBTRACTION_MATICES				      C_PROGRAM_SUBTRACTION_MATICES				    C_PROGRAM_SUBTRACTION_MATICES				  C_PROGRAM_SUBTRACTION_MATICES
--							      --							    --								  --
static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C  void multiply ( int A [ ] [ N ] , int B [ ] [ N ] , int C [ ] void multiply ( int A [ N ] [ N ] , int B [ N ] [ N ] , int C script_not_found : None
  int i , j ;						      	int i , j ;						      int i , j ;						  
  for ( i = 0 ;						      	for ( i = 0 ;						      for ( i = 0 ;						  
  i < N ;						      	i < N ;							      i < N ;							  
  i ++ ) for ( j = 0 ;					      	i ++ ) for ( j = 0 ;					      i ++ ) for ( j = 0 ;					  
  j < N ;						      	j < N ;							      j < N ;							  
  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;      	j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	      j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;	  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FRIENDS_PAIRING_PROBLEM					      FRIENDS_PAIRING_PROBLEM					    FRIENDS_PAIRING_PROBLEM					  FRIENDS_PAIRING_PROBLEM
--							      --							    --								  --
static int countFriendsPairings ( int n ) {		      int countFriendsPairings ( int n ) {			    int countFriendsPairings ( int n ) {			  success : None
  int dp [ ] = new int [ n + 1 ] ;			      	int dp [ n + 1 ] ;					      int dp [ n + 1 ] ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i <= 2 ) dp [ i ] = i ;			      	  if ( i <= 2 ) dp [ i ] = i ;				    	if ( i <= 2 ) {						  
    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	  else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; 	  dp [ i ] = i ;					  
  }							      	}							    	}							  
  return dp [ n ] ;					      	return dp [ n ] ;					    	else {							  
}							      }								    	  dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;	  
							      								    	}							  
							      								      }								  
							      								      return dp [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			      N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			    N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN			  N_TH_NUMBER_WHOSE_SUM_OF_DIGITS_IS_TEN
--							      --							    --								  --
public static int findNth ( int n ) {			      int findNth ( int n ) {					    int findNth ( int n ) {					  success : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int curr = 1 ;					      	for ( int curr = 1 ;					      for ( int curr = 1 ;					  
  ;							      	;							      ;								  
  curr ++ ) {						      	curr ++ ) {						      curr ++ ) {						  
    int sum = 0 ;					      	  int sum = 0 ;						    	int sum = 0 ;						  
    for ( int x = curr ;				      	  for ( int x = curr ;					    	for ( int x = curr ;					  
    x > 0 ;						      	  x > 0 ;						    	x > 0 ;							  
    x = x / 10 ) sum = sum + x % 10 ;			      	  x = x / 10 ) sum = sum + x % 10 ;			    	x = x / 10 ) {						  
    if ( sum == 10 ) count ++ ;				      	  if ( sum == 10 ) count ++ ;				    	  sum = sum + x % 10 ;					  
    if ( count == n ) return curr ;			      	  if ( count == n ) return curr ;			    	}							  
  }							      	}							    	if ( sum == 10 ) {					  
}							      	return - 1 ;						    	  count ++ ;						  
							      }								    	}							  
							      								    	if ( count == n ) {					  
							      								    	  return curr ;						  
							      								    	}							  
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_THE_FIRST_MISSING_NUMBER				      FIND_THE_FIRST_MISSING_NUMBER				    FIND_THE_FIRST_MISSING_NUMBER				  FIND_THE_FIRST_MISSING_NUMBER
--							      --							    --								  --
int findFirstMissing ( int array [ ] , int start , int end )  int findFirstMissing ( int array [ ] , int start , int end )  int findFirstMissing ( int array [ ] , int start , int end )  success : identical to gold
  if ( start > end ) return end + 1 ;			      	if ( start > end ) return end + 1 ;			      if ( start > end ) return end + 1 ;			  
  if ( start != array [ start ] ) return start ;	      	if ( start != array [ start ] ) return start ;		      if ( start != array [ start ] ) return start ;		  
  int mid = ( start + end ) / 2 ;			      	int mid = ( start + end ) / 2 ;				      int mid = ( start + end ) / 2 ;				  
  if ( array [ mid ] == mid ) return findFirstMissing ( array 	if ( array [ mid ] == mid ) return findFirstMissing ( array   if ( array [ mid ] == mid ) return findFirstMissing ( array 
  return findFirstMissing ( array , start , mid ) ;	      	return findFirstMissing ( array , start , mid ) ;	      return findFirstMissing ( array , start , mid ) ;		  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM   DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM	  DYNAMIC_PROGRAMMING_HIGH_EFFORT_VS_LOW_EFFORT_TASKS_PROBLEM
--							      --							    --								  --
static int maxTasks ( int high [ ] , int low [ ] , int n ) {  int maxTasks ( int high [ ] , int low [ ] , int n ) {	    int maxTasks ( int high [ ] , int low [ ] , int n ) {	  success : identical to gold
  if ( n <= 0 ) return 0 ;				      	if ( n <= 0 ) return 0 ;				      if ( n <= 0 ) return 0 ;					  
  return Math . max ( high [ n - 1 ] + maxTasks ( high , low  	return max ( high [ n - 1 ] + maxTasks ( high , low , ( n -   return max ( high [ n - 1 ] + maxTasks ( high , low , ( n - 
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		      FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		    FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS		  FIND_ELEMENTS_ARRAY_LEAST_TWO_GREATER_ELEMENTS
--							      --							    --								  --
static void findElements ( int arr [ ] , int n ) {	      void findElements ( int arr [ ] , int n ) {		    void findElements ( int arr [ ] , int n ) {			  script_not_found : None
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    int count = 0 ;					      	  int count = 0 ;					    	int count = 0 ;						  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;	      	  j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;	    	j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ;		  
    if ( count >= 2 ) System . out . print ( arr [ i ] + " "  	  if ( count >= 2 ) cout << arr [ i ] << " " ;		    	if ( count >= 2 ) cout << arr [ i ] << " " ;		  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		      PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		    PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2		  PRINT_DISTINCT_ELEMENTS_GIVEN_INTEGER_ARRAY_2
--							      --							    --								  --
static void printDistinct ( int arr [ ] ) {		      void printDistinct ( int arr [ ] , int n ) {		    void printDistinct ( int arr [ ] ) {			  script_not_found : None
  HashSet < Integer > set = new HashSet < > ( ) ;	      	unordered_set < int > s ;				      set < int > set ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < arr . length ;					      	i < n ;							      i < arr . size ( ) ;					  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( ! set . contains ( arr [ i ] ) ) {		      	  if ( s . find ( arr [ i ] ) == s . end ( ) ) {	    	if ( ! set . count ( arr [ i ] ) ) {			  
      set . add ( arr [ i ] ) ;				      	    s . insert ( arr [ i ] ) ;				    	  set . insert ( arr [ i ] ) ;				  
      System . out . print ( arr [ i ] + " " ) ;	      	    cout << arr [ i ] << " " ;				    	  cout << arr [ i ] << " " ;				  
    }							      	  }							    	}							  
  }							      	}							      }								  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PRINT_WAYS_BREAK_STRING_BRACKET_FORM			      PRINT_WAYS_BREAK_STRING_BRACKET_FORM			    PRINT_WAYS_BREAK_STRING_BRACKET_FORM			  PRINT_WAYS_BREAK_STRING_BRACKET_FORM
--							      --							    --								  --
static void findCombinations ( String str , int index , Strin void findCombinations ( string str , int index , string out ) void findCombinations ( string str , int index , string out ) script_not_found : None
  if ( index == str . length ( ) ) System . out . println ( o 	if ( index == str . length ( ) ) cout << out << endl ;	      if ( index == str . length ( ) ) {			  
  for ( int i = index ;					      	for ( int i = index ;					    	cout << out << endl ;					  
  i < str . length ( ) ;				      	i < str . length ( ) ;					      }								  
  i ++ ) findCombinations ( str , i + 1 , out + "(" + str . s 	i ++ ) findCombinations ( str , i + 1 , out + "(" + str . s   for ( int i = index ;					  
}							      }								      i < str . length ( ) ;					  
							      								      i ++ ) {							  
							      								    	findCombinations ( str , i + 1 , out + "(" + str . substr 
							      								      }								  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		      CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		    CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION		  CHINESE_REMAINDER_THEOREM_SET_1_INTRODUCTION
--							      --							    --								  --
static int findMinX ( int num [ ] , int rem [ ] , int k ) {   int findMinX ( int num [ ] , int rem [ ] , int k ) {	    int findMinX ( int num [ ] , int rem [ ] , int k ) {	  script_not_found : None
  int x = 1 ;						      	int x = 1 ;						      int x = 1 ;						  
  while ( true ) {					      	while ( true ) {					      while ( true ) {						  
    int j ;						      	  int j ;						    	int j ;							  
    for ( j = 0 ;					      	  for ( j = 0 ;						    	for ( j = 0 ;						  
    j < k ;						      	  j < k ;						    	j < k ;							  
    j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	      	  j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	    	j ++ ) if ( x % num [ j ] != rem [ j ] ) break ;	  
    if ( j == k ) return x ;				      	  if ( j == k ) return x ;				    	if ( j == k ) return x ;				  
    x ++ ;						      	  x ++ ;						    	x ++ ;							  
  }							      	}							      }								  
}							      	return x ;						    }								  
							      }								    								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		      NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		    NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N		  NUMBER_NON_NEGATIVE_INTEGRAL_SOLUTIONS_B_C_N
--							      --							    --								  --
static int countIntegralSolutions ( int n ) {		      int countIntegralSolutions ( int n ) {			    int countIntegralSolutions ( int n ) {			  success : identical to gold
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) for ( int j = 0 ;				      	i ++ ) for ( int j = 0 ;				      i ++ ) for ( int j = 0 ;					  
  j <= n - i ;						      	j <= n - i ;						      j <= n - i ;						  
  j ++ ) for ( int k = 0 ;				      	j ++ ) for ( int k = 0 ;				      j ++ ) for ( int k = 0 ;					  
  k <= ( n - i - j ) ;					      	k <= ( n - i - j ) ;					      k <= ( n - i - j ) ;					  
  k ++ ) if ( i + j + k == n ) result ++ ;		      	k ++ ) if ( i + j + k == n ) result ++ ;		      k ++ ) if ( i + j + k == n ) result ++ ;			  
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS	      MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		    MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS		  MINIMUM_SUM_ABSOLUTE_DIFFERENCE_PAIRS_TWO_ARRAYS
--							      --							    --								  --
static long findMinSum ( long a [ ] , long b [ ] , long n ) { long long int findMinSum ( int a [ ] , int b [ ] , int n ) {  long long findMinSum ( long long a [ ] , long long b [ ] , lo script_not_found : None
  Arrays . sort ( a ) ;					      	sort ( a , a + n ) ;					      qsort ( a , n , sizeof ( long long ) , compareLong ) ;	  
  Arrays . sort ( b ) ;					      	sort ( b , b + n ) ;					      qsort ( b , n , sizeof ( long long ) , compareLong ) ;	  
  long sum = 0 ;					      	long long int sum = 0 ;					      long long sum = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( long long i = 0 ;					  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;	      	i ++ ) sum = sum + abs ( a [ i ] - b [ i ] ) ;		      i ++ ) {							  
  return sum ;						      	return sum ;						    	sum = sum + qAbs ( a [ i ] - b [ i ] ) ;		  
}							      }								      }								  
-							      -								      -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K	      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		    PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K		  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K
--							      --							    --								  --
static boolean isPossible ( Integer a [ ] , int b [ ] , int n bool isPossible ( int a [ ] , int b [ ] , int n , int k ) {   bool isPossible ( Integer a [ ] , Integer b [ ] , int n , int error : PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_
  Arrays . sort ( a , Collections . reverseOrder ( ) ) ;      	sort ( a , a + n ) ;					      sort ( a , a + n , cmp ) ;				  EQUAL_K.cpp:26:17: error: ‘Integer’ was not declar
  Arrays . sort ( b ) ;					      	sort ( b , b + n , greater < int > ( ) ) ;		      sort ( b , b + n , cmp ) ;				  ed in this scope  bool f_filled ( Integer a [ ] ,
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  Integer b [ ] , int n , int k ) {
  i < n ;						      	i < n ;							      i < n ;							   ^~~~~~~ PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER
  i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	      	i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	      i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;	  _EQUAL_K.cpp:26:33: error: ‘Integer’ was not decla
  return true ;						      	return true ;						      return true ;						  red in this scope  bool f_filled ( Integer a [ ] ,
}							      }								    }								   Integer b [ ] , int n , int k ) {
							      								    								  		    ^~~~~~~ PERMUTE_TWO_ARRAYS_SUM_E
							      								    								  VERY_PAIR_GREATER_EQUAL_K.cpp:26:49: error: expect
							      								    								  ed primary-expression before ‘int’  bool f_filled
							      								    								  ( Integer a [ ] , Integer b [ ] , int n , int k )
							      								    								  {
							      								    								   ^~~ PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQU
							      								    								  AL_K.cpp:26:57: error: expected primary-expression
							      								    								   before ‘int’	 bool f_filled ( Integer a [ ] , Int
							      								    								  eger b [ ] , int n , int k ) {
							      								    								  					^~~ PERMUTE_
							      								    								  TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K.cpp:26:6
							      								    								  3: error: expression list treated as compound expr
							      								    								  ession in initializer [-fpermissive]	bool f_fille
							      								    								  d ( Integer a [ ] , Integer b [ ] , int n , int k
							      								    								  ) {
							      								    								  		   ^ PERMUTE_TWO_ARRAYS_SUM_EVERY_PA
							      								    								  IR_GREATER_EQUAL_K.cpp: In function ‘int main()’:
							      								    								  PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K.
							      								    								  cpp:44:78: error: ‘f_filled’ cannot be used as a f
							      								    								  unction	   if(f_filled(&param0[i].front(),&p
							      								    								  aram1[i].front(),param2[i],param3[i]) == f_gold(&p
							      								    								  aram0[i].front(),&param1[i].front(),param2[i],para
							      								    								  m3[i]))
							      								    								  				      ^
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
static int countNegative ( int M [ ] [ ] , int n , int m ) {  int countNegative ( int M [ ] [ 4 ] , int n , int m ) {	    int countNegative ( int M [ ] [ ] , int n , int m ) {	  script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = 0 ;					      	  for ( int j = 0 ;					    	for ( int j = 0 ;					  
    j < m ;						      	  j < m ;						    	j < m ;							  
    j ++ ) {						      	  j ++ ) {						    	j ++ ) {						  
      if ( M [ i ] [ j ] < 0 ) count += 1 ;		      	    if ( M [ i ] [ j ] < 0 ) count += 1 ;		    	  if ( M [ i ] [ j ] < 0 ) {				  
      else break ;					      	    else break ;					    	    count += 1 ;					  
    }							      	  }							    	  }							  
  }							      	}							    	  else {						  
  return count ;					      	return count ;						    	    break ;						  
}							      }								    	  }							  
							      								    	}							  
							      								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	      COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	    COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2	  COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT_NXM_MATRIX_2
--							      --							    --								  --
static int numberOfPaths ( int m , int n ) {		      int numberOfPaths ( int m , int n ) {			    public : int numberOfPaths ( int m , int n ) {		  error : COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGHT
  int [ ] dp = new int [ n ] ;				      	int dp [ n ] = {					      vector < int > dp ( n , 1 ) ;				  _NXM_MATRIX_2.cpp:33:1: error: expected unqualifie
  dp [ 0 ] = 1 ;					      	  1 }							      dp [ 0 ] = 1 ;						  d-id before ‘public’	public : int f_filled ( int
  for ( int i = 0 ;					      	  ;							      for ( int i = 0 ;						  m , int n ) {	 ^~~~~~ COUNT_POSSIBLE_PATHS_TOP_LEF
  i < m ;						      	  dp [ 0 ] = 1 ;					      i < m ;							  T_BOTTOM_RIGHT_NXM_MATRIX_2.cpp: In function ‘int
  i ++ ) {						      	  for ( int i = 0 ;					      i ++ ) {							  main()’: COUNT_POSSIBLE_PATHS_TOP_LEFT_BOTTOM_RIGH
    for ( int j = 1 ;					      	  i < m ;						    	for ( int j = 1 ;					  T_NXM_MATRIX_2.cpp:55:12: error: ‘f_filled’ was no
    j < n ;						      	  i ++ ) {						    	j < n ;							  t declared in this scope	    if(f_filled(para
    j ++ ) {						      	    for ( int j = 1 ;					    	j ++ ) {						  m0[i],param1[i]) == f_gold(param0[i],param1[i]))
      dp [ j ] += dp [ j - 1 ] ;			      	    j < n ;						    	  dp [ j ] += dp [ j - 1 ] ;				  	     ^~~~~~~~ COUNT_POSSIBLE_PATHS_TOP_LEFT_
    }							      	    j ++ ) {						    	}							  BOTTOM_RIGHT_NXM_MATRIX_2.cpp:55:12: note: suggest
  }							      	      dp [ j ] += dp [ j - 1 ] ;			      }								  ed alternative: ‘f_gold’	    if(f_filled(para
  return dp [ n - 1 ] ;					      	    }							      return dp [ n - 1 ] ;					  m0[i],param1[i]) == f_gold(param0[i],param1[i]))
}							      	  }							    }								  	     ^~~~~~~~		  f_gold
							      	  return dp [ n - 1 ] ;					    								  
							      	}							    								  
-							      	-							    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		      SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		    SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1		  SEARCH_INSERT_AND_DELETE_IN_A_SORTED_ARRAY_1
--							      --							    --								  --
static int insertSorted ( int arr [ ] , int n , int key , int int insertSorted ( int arr [ ] , int n , int key , int capaci int insertSorted ( int arr [ ] , int n , int key , int capaci success : None
  if ( n >= capacity ) return n ;			      	if ( n >= capacity ) return n ;				      if ( n >= capacity ) return n ;				  
  int i ;						      	int i ;							      int i ;							  
  for ( i = n - 1 ;					      	for ( i = n - 1 ;					      for ( i = n - 1 ;						  
  ( i >= 0 && arr [ i ] > key ) ;			      	( i >= 0 && arr [ i ] > key ) ;				      ( i >= 0 && arr [ i ] > key ) ;				  
  i -- ) arr [ i + 1 ] = arr [ i ] ;			      	i -- ) arr [ i + 1 ] = arr [ i ] ;			      i -- ) {							  
  arr [ i + 1 ] = key ;					      	arr [ i + 1 ] = key ;					    	arr [ i + 1 ] = arr [ i ] ;				  
  return ( n + 1 ) ;					      	return ( n + 1 ) ;					      }								  
}							      }								      arr [ i + 1 ] = key ;					  
							      								      return ( n + 1 ) ;					  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		      MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY		    MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY			  MINIMUM_SUM_TWO_NUMBERS_FORMED_DIGITS_ARRAY
--							      --							    --								  --
static int solve ( int arr [ ] , int n ) {		      int solve ( int arr [ ] , int n ) {			    int solve ( int arr [ ] , int n ) {				  success : None
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  int a = 0 , b = 0 ;					      	int a = 0 , b = 0 ;					      int a = 0 , b = 0 ;					  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;		      	  if ( i & 1 ) a = a * 10 + arr [ i ] ;			    	if ( i % 2 != 0 ) {					  
    else b = b * 10 + arr [ i ] ;			      	  else b = b * 10 + arr [ i ] ;				    	  a = a * 10 + arr [ i ] ;				  
  }							      	}							    	}							  
  return a + b ;					      	return a + b ;						    	else {							  
}							      }								    	  b = b * 10 + arr [ i ] ;				  
							      								    	}							  
							      								      }								  
							      								      return a + b ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
NEWMAN_CONWAY_SEQUENCE_1				      NEWMAN_CONWAY_SEQUENCE_1					    NEWMAN_CONWAY_SEQUENCE_1					  NEWMAN_CONWAY_SEQUENCE_1
--							      --							    --								  --
static int sequence ( int n ) {				      int sequence ( int n ) {					    int sequence ( int n ) {					  success : None
  int f [ ] = new int [ n + 1 ] ;			      	int f [ n + 1 ] ;					      int f [ n + 1 ] ;						  
  f [ 0 ] = 0 ;						      	int i ;							      f [ 0 ] = 0 ;						  
  f [ 1 ] = 1 ;						      	f [ 0 ] = 0 ;						      f [ 1 ] = 1 ;						  
  f [ 2 ] = 1 ;						      	f [ 1 ] = 1 ;						      f [ 2 ] = 1 ;						  
  int i ;						      	f [ 2 ] = 1 ;						      int i ;							  
  for ( i = 3 ;						      	for ( i = 3 ;						      for ( i = 3 ;						  
  i <= n ;						      	i <= n ;						      i <= n ;							  
  i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]  	i ++ ) f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ]    i ++ ) {							  
  return f [ n ] ;					      	return f [ n ] ;					    	f [ i ] = f [ f [ i - 1 ] ] + f [ i - f [ i - 1 ] ] ;	  
}							      }								      }								  
							      								      return f [ n ] ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES  FIND_NUMBER_OF_SOLUTIONS_OF_A_LINEAR_EQUATION_OF_N_VARIABLES
--							      --							    --								  --
static int countSol ( int coeff [ ] , int start , int end , i int countSol ( int coeff [ ] , int start , int end , int rhs  int countSol ( int coeff [ ] , int start , int end , int rhs  script_not_found : None
  if ( rhs == 0 ) return 1 ;				      	if ( rhs == 0 ) return 1 ;				      if ( rhs == 0 ) return 1 ;				  
  int result = 0 ;					      	int result = 0 ;					      int result = 0 ;						  
  for ( int i = start ;					      	for ( int i = start ;					      for ( int i = start ;					  
  i <= end ;						      	i <= end ;						      i <= end ;						  
  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff 	i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff   i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff 
  return result ;					      	return result ;						      return result ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
RECURSIVE_INSERTION_SORT				      RECURSIVE_INSERTION_SORT					    RECURSIVE_INSERTION_SORT					  RECURSIVE_INSERTION_SORT
--							      --							    --								  --
static void insertionSortRecursive ( int arr [ ] , int n ) {  void insertionSortRecursive ( int arr [ ] , int n ) {	    void insertionSortRecursive ( int arr [ ] , int n ) {	  script_not_found : None
  if ( n <= 1 ) return ;				      	if ( n <= 1 ) return ;					      if ( n <= 1 ) return ;					  
  insertionSortRecursive ( arr , n - 1 ) ;		      	insertionSortRecursive ( arr , n - 1 ) ;		      insertionSortRecursive ( arr , n - 1 ) ;			  
  int last = arr [ n - 1 ] ;				      	int last = arr [ n - 1 ] ;				      int last = arr [ n - 1 ] ;				  
  int j = n - 2 ;					      	int j = n - 2 ;						      int j = n - 2 ;						  
  while ( j >= 0 && arr [ j ] > last ) {		      	while ( j >= 0 && arr [ j ] > last ) {			      while ( j >= 0 && arr [ j ] > last ) {			  
    arr [ j + 1 ] = arr [ j ] ;				      	  arr [ j + 1 ] = arr [ j ] ;				    	arr [ j + 1 ] = arr [ j ] ;				  
    j -- ;						      	  j -- ;						    	j -- ;							  
  }							      	}							      }								  
  arr [ j + 1 ] = last ;				      	arr [ j + 1 ] = last ;					      arr [ j + 1 ] = last ;					  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI COUNT_NEGATIVE_NUMBERS_IN_A_COLUMN_WISE_ROW_WISE_SORTED_MATRI
--							      --							    --								  --
static int countNegative ( int M [ ] [ ] , int n , int m ) {  int countNegative ( int M [ ] [ 4 ] , int n , int m ) {	    int countNegative ( int M [ ] [ ] , int n , int m ) {	  script_not_found : None
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  int i = 0 ;						      	int i = 0 ;						      int i = 0 ;						  
  int j = m - 1 ;					      	int j = m - 1 ;						      int j = m - 1 ;						  
  while ( j >= 0 && i < n ) {				      	while ( j >= 0 && i < n ) {				      while ( j >= 0 && i < n ) {				  
    if ( M [ i ] [ j ] < 0 ) {				      	  if ( M [ i ] [ j ] < 0 ) {				    	if ( M [ i ] [ j ] < 0 ) {				  
      count += j + 1 ;					      	    count += j + 1 ;					    	  count += j + 1 ;					  
      i += 1 ;						      	    i += 1 ;						    	  i += 1 ;						  
    }							      	  }							    	}							  
    else j -= 1 ;					      	  else j -= 1 ;						    	else {							  
  }							      	}							    	  j -= 1 ;						  
  return count ;					      	return count ;						    	}							  
}							      }								      }								  
							      								      return count ;						  
							      								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
LAST_NON_ZERO_DIGIT_FACTORIAL				      LAST_NON_ZERO_DIGIT_FACTORIAL				    LAST_NON_ZERO_DIGIT_FACTORIAL				  LAST_NON_ZERO_DIGIT_FACTORIAL
--							      --							    --								  --
static int lastNon0Digit ( int n ) {			      int lastNon0Digit ( int n ) {				    int last_non0_digit ( int n ) {				  script_not_found : None
  if ( n < 10 ) return dig [ n ] ;			      	if ( n < 10 ) return dig [ n ] ;			      if ( n < 10 ) return dig [ n ] ;				  
  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Di 	if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Di   if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * last_non0_ 
  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ]  	else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ]    else return ( 4 * last_non0_digit ( n / 5 ) * dig [ n % 10  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		      EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		    EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION		  EXPONENTIAL_SQUARING_FAST_MODULO_MULTIPLICATION
--							      --							    --								  --
static long exponentiation ( long base , long exp ) {	      long int exponentiation ( long int base , long int exp ) {    long long exponentiation ( long long base , long long exp ) { script_not_found : None
  if ( exp == 0 ) return 1 ;				      	if ( exp == 0 ) return 1 ;				      if ( exp == 0 ) return 1 ;				  
  if ( exp == 1 ) return base % N ;			      	if ( exp == 1 ) return base % N ;			      if ( exp == 1 ) return base % N ;				  
  long t = exponentiation ( base , exp / 2 ) ;		      	long int t = exponentiation ( base , exp / 2 ) ;	      long long t = exponentiation ( base , exp / 2 ) ;		  
  t = ( t * t ) % N ;					      	t = ( t * t ) % N ;					      t = ( t * t ) % N ;					  
  if ( exp % 2 == 0 ) return t ;			      	if ( exp % 2 == 0 ) return t ;				      if ( exp % 2 == 0 ) return t ;				  
  else return ( ( base % N ) * t ) % N ;		      	else return ( ( base % N ) * t ) % N ;			      else return ( ( base % N ) * t ) % N ;			  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
PROGRAM_PRINT_IDENTITY_MATRIX_1				      PROGRAM_PRINT_IDENTITY_MATRIX_1				    PROGRAM_PRINT_IDENTITY_MATRIX_1				  PROGRAM_PRINT_IDENTITY_MATRIX_1
--							      --							    --								  --
static boolean isIdentity ( int mat [ ] [ ] , int N ) {	      bool isIdentity ( int mat [ ] [ MAX ] , int N ) {		    bool isIdentity ( int mat [ ] [ N ] , int N ) {		  script_not_found : None
  for ( int row = 0 ;					      	for ( int row = 0 ;					      for ( int row = 0 ;					  
  row < N ;						      	row < N ;						      row < N ;							  
  row ++ ) {						      	row ++ ) {						      row ++ ) {						  
    for ( int col = 0 ;					      	  for ( int col = 0 ;					    	for ( int col = 0 ;					  
    col < N ;						      	  col < N ;						    	col < N ;						  
    col ++ ) {						      	  col ++ ) {						    	col ++ ) {						  
      if ( row == col && mat [ row ] [ col ] != 1 ) return fa 	    if ( row == col && mat [ row ] [ col ] != 1 ) return fa 	  if ( row == col && mat [ row ] [ col ] != 1 ) return fa 
      else if ( row != col && mat [ row ] [ col ] != 0 ) retu 	    else if ( row != col && mat [ row ] [ col ] != 0 ) retu 	  else if ( row != col && mat [ row ] [ col ] != 0 ) retu 
    }							      	  }							    	}							  
  }							      	}							      }								  
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
COUNT_PAIRS_DIFFERENCE_EQUAL_K				      COUNT_PAIRS_DIFFERENCE_EQUAL_K				    COUNT_PAIRS_DIFFERENCE_EQUAL_K				  COUNT_PAIRS_DIFFERENCE_EQUAL_K
--							      --							    --								  --
static int countPairsWithDiffK ( int arr [ ] , int n , int k  int countPairsWithDiffK ( int arr [ ] , int n , int k ) {	    int countPairsWithDiffK ( int arr [ ] , int n , int k ) {	  success : identical to gold
  int count = 0 ;					      	int count = 0 ;						      int count = 0 ;						  
  for ( int i = 0 ;					      	for ( int i = 0 ;					      for ( int i = 0 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) {						      	i ++ ) {						      i ++ ) {							  
    for ( int j = i + 1 ;				      	  for ( int j = i + 1 ;					    	for ( int j = i + 1 ;					  
    j < n ;						      	  j < n ;						    	j < n ;							  
    j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 	  j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 	j ++ ) if ( arr [ i ] - arr [ j ] == k || arr [ j ] - arr 
  }							      	}							      }								  
  return count ;					      	return count ;						      return count ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
=========================================================     =========================================================	    =========================================================	  =========================================================
CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY   CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY	  CHECK_WHETHER_ARITHMETIC_PROGRESSION_CAN_FORMED_GIVEN_ARRAY
--							      --							    --								  --
static boolean checkIsAP ( int arr [ ] , int n ) {	      bool checkIsAP ( int arr [ ] , int n ) {			    bool checkIsAP ( int arr [ ] , int n ) {			  success : identical to gold
  if ( n == 1 ) return true ;				      	if ( n == 1 ) return true ;				      if ( n == 1 ) return true ;				  
  Arrays . sort ( arr ) ;				      	sort ( arr , arr + n ) ;				      sort ( arr , arr + n ) ;					  
  int d = arr [ 1 ] - arr [ 0 ] ;			      	int d = arr [ 1 ] - arr [ 0 ] ;				      int d = arr [ 1 ] - arr [ 0 ] ;				  
  for ( int i = 2 ;					      	for ( int i = 2 ;					      for ( int i = 2 ;						  
  i < n ;						      	i < n ;							      i < n ;							  
  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; 	i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;   i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; 
  return true ;						      	return true ;						      return true ;						  
}							      }								    }								  
-							      -								    -								  -
--							      --							    --								  --
							      								    								  
